bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  return  (N  *  N  *  (N  -  m)*(N  -  1))  /(N  *  N  *  (N  -  1));  (N  *  (N  -  m)*(N  -  1))  /(N  *  (N  -  1));  [CE]  not  a  statement  [FE]    AssertionError    [CONTEXT]      protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();  final  double  m  =  getNumberOfSuccesses();  final  double  n  =  getSampleSize();      [BUGGY]  return  (N  *  N  *  (N  -  m)*(N  -  1))  /(N  *  N  *  (N  -  1));  (N  *  (N  -  m)*(N  -  1))  /(N  *  (N  -  1));  [BUGGY]      }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	295	295	1	replace	return    (N    *    N    *    (N    -    m)*(N    -    1))    /(N    *    N    *    (N    -    1));    (N  *  (N  -  m)*(N  -  1))  /(N  *  (N  -  1));	  	non-compiled	[CE]  not  a  statement	29	None	add
2	[BUG]  [BUGGY]  return  (N  *  N  *  (N  -  m)*(N  -  1))  /(N  *  N  *  (N  -  1));  (N  *  (N  -  m)*(N  -  1))  /(N  *  N  *  (N  -  1));  [CE]  not  a  statement  [FE]      AssertionError    [CONTEXT]      protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();  final  double  m  =  getNumberOfSuccesses();  final  double  n  =  getSampleSize();      [BUGGY]  return  (N  *  N  *  (N  -  m)*(N  -  1))  /(N  *  N  *  (N  -  1));  (N  *  (N  -  m)*(N  -  1))  /(N  *  N  *  (N  -  1));  [BUGGY]      }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	295	295	1	replace	return    (N    *    N    *    (N    -    m)*(N    -    1))    /(N    *    N    *    (N    -    1));    (N  *  (N  -  m)*(N  -  1))  /(N  *  N  *  (N  -  1));	  	non-compiled	[CE]  not  a  statement	29	None	add
3	[BUG]  [BUGGY]  return  (N  *  N  *  (N  -  m)*(N  -  1))  /(N  *  N  *  (N  -  1));  double  m  =  getSampleSize();  [CE]  variable  m  is  already  defined  in  method  calculateNumericalVariance()  [FE]        AssertionError    [CONTEXT]      protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();  final  double  m  =  getNumberOfSuccesses();  final  double  n  =  getSampleSize();      [BUGGY]  return  (N  *  N  *  (N  -  m)*(N  -  1))  /(N  *  N  *  (N  -  1));  double  m  =  getSampleSize();  [BUGGY]      }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	295	295	1	replace	return    (N    *    N    *    (N    -    m)*(N    -    1))    /(N    *    N    *    (N    -    1));    double  m  =  getSampleSize();	  	non-compiled	[CE]  variable  m  is  already  defined  in  method  calculateNumericalVariance()	29	None	add
4	[BUG]  [BUGGY]  int  sampleSize  =  getSampleSize();  if(sampleSize  ==  N)  {  return  sampleSize;  }  [CE]  missing  return  statement  [FE]              AssertionError      [CONTEXT]      protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();  final  double  m  =  getNumberOfSuccesses();  final  double  n  =  getSampleSize();      [BUGGY]  int  sampleSize  =  getSampleSize();  if(sampleSize  ==  N)  {  return  sampleSize;  }  [BUGGY]      }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	295	295	1	replace	int  sampleSize  =  getSampleSize();  if(sampleSize  ==  N)  {  return  sampleSize;  }	  if(n    >    0)    {    int    sampleSize    =    getSampleSize();    if(sampleSize    ==    N)    {    return    sampleSize;    }    	non-compiled	[CE]  missing  return  statement	31	None	replace
5	[BUG]  [BUGGY]  int  sampleSize  =  getSampleSize();  if(n  ==  N)  {  return  sampleSize;  }  [CE]  missing  return  statement  [FE]                AssertionError      [CONTEXT]      protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();  final  double  m  =  getNumberOfSuccesses();  final  double  n  =  getSampleSize();      [BUGGY]  int  sampleSize  =  getSampleSize();  if(n  ==  N)  {  return  sampleSize;  }  [BUGGY]      }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	295	295	1	replace	int  sampleSize  =  getSampleSize();  if(n  ==  N)  {  return  sampleSize;  }	  if(n    >    0)    {    int    sampleSize    =    getSampleSize();    if(sampleSize    ==    N)    {    return    sampleSize;    }    	non-compiled	[CE]  missing  return  statement	31	None	replace
6	[BUG]  [BUGGY]  final  double  n  =  getNumberOfSuccesses();  [CE]  variable  n  is  already  defined  in  method  calculateNumericalVariance()  [FE]            AssertionError      [CONTEXT]      protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();  final  double  m  =  getNumberOfSuccesses();  final  double  n  =  getSampleSize();      [BUGGY]  final  double  n  =  getNumberOfSuccesses();  [BUGGY]      return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	295	295	1	replace	final  double  n  =  getNumberOfSuccesses();	  double    n    =    getNumberOfSuccesses();    	non-compiled	[CE]  variable  n  is  already  defined  in  method  calculateNumericalVariance()	22	None	replace
7	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  N;  i++)  {  m  *=  N;  }  [CE]  cannot  assign  a  value  to  final  variable  m  [FE]              AssertionError      [CONTEXT]      protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();  final  double  m  =  getNumberOfSuccesses();  final  double  n  =  getSampleSize();      [BUGGY]  for(int  i  =  0;  i  <  N;  i++)  {  m  *=  N;  }  [BUGGY]      }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	295	295	1	replace	for(int  i  =  0;  i  <  N;  i++)  {  m  *=  N;  }	  if(n    >    populationSize)    {    for(int    i    =    0;    i    <    N;    i++)    {    m    *=    N;    }    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  m	25	None	replace
8	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  N;  i++)  {  m  *=  N;  }  [CE]  '.class'  expected  [FE]                AssertionError      [CONTEXT]      protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();  final  double  m  =  getNumberOfSuccesses();  final  double  n  =  getSampleSize();      [BUGGY]  For(int  i  =  0;  i  <  N;  i++)  {  m  *=  N;  }  [BUGGY]      }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	295	295	1	replace	For(int  i  =  0;  i  <  N;  i++)  {  m  *=  N;  }	  if(n    >    populationSize)    {    for(int    i    =    0;    i    <    N;    i++)    {    m    *=    N;    }    	non-compiled	[CE]  '.class'  expected	25	None	replace
9	[BUG]  [BUGGY]  (N  *  n  *  (N  -  m)*  (N  -  1))  /(N  *  N  *  (N  -  1));  [CE]  not  a  statement  [FE]            AssertionError      [CONTEXT]      protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();  final  double  m  =  getNumberOfSuccesses();  final  double  n  =  getSampleSize();      [BUGGY]  (N  *  n  *  (N  -  m)*  (N  -  1))  /(N  *  N  *  (N  -  1));  [BUGGY]      }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	295	295	1	replace	(N  *  n  *  (N  -  m)*  (N  -  1))  /(N  *  N  *  (N  -  1));	  return    (N    *    n    *    (N    -    m)*    (N    -    1))/(N    *    N    *    (N    -    1));    (N    *    n    *    (N    -    m)*    (N    -    1))(N    *    N    *    (N    -    1));    	non-compiled	[CE]  not  a  statement	17	None	replace
10	[BUG]  [BUGGY]  (N  *  n  *  (N  -  m)*  (N  -  1))  /(N  *  N  *  (N  -  1));  (N  *  n  *  (N  -  m)*  (N  *  N  *  (N  -  1));  [CE]  not  a  statement  [FE]              AssertionError      [CONTEXT]      protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();  final  double  m  =  getNumberOfSuccesses();  final  double  n  =  getSampleSize();      [BUGGY]  (N  *  n  *  (N  -  m)*  (N  -  1))  /(N  *  N  *  (N  -  1));  (N  *  n  *  (N  -  m)*  (N  *  N  *  (N  -  1));  [BUGGY]      }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	295	295	1	replace	(N  *  n  *  (N  -  m)*  (N  -  1))  /(N  *  N  *  (N  -  1));  (N  *  n  *  (N  -  m)*  (N  *  N  *  (N  -  1));	  return    (N    *    n    *    (N    -    m)*    (N    -    1))/(N    *    N    *    (N    -    1));    (N    *    n    *    (N    -    m)*    (N    -    1))(N    *    N    *    (N    -    1));    	non-compiled	[CE]  not  a  statement	17	None	replace
11	[BUG]  [BUGGY]  (n  *  m  *  (N  -  n)*  (N  -  1))  /(N  *  N  *  (N  -  1));  [CE]  not  a  statement  [FE]        AssertionError      [CONTEXT]      protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();  final  double  m  =  getNumberOfSuccesses();  final  double  n  =  getSampleSize();      [BUGGY]  (n  *  m  *  (N  -  n)*  (N  -  1))  /(N  *  N  *  (N  -  1));  [BUGGY]      }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	295	295	1	replace	(n  *  m  *  (N  -  n)*  (N  -  1))  /(N  *  N  *  (N  -  1));	  return    (n    *    m    *    (N    -    n)*    (N    -    1))/(N    *    N    *    (N    -    1));    (n    *    m    *    (N    -    n)*    (N    -    1))/(N    *    N    *    (N    -    1));    	non-compiled	[CE]  not  a  statement	19	None	replace
12	[BUG]  [BUGGY]  (n  *  m  *  (N  -  n)*(N  *  N  -  1));  (n  *  m  *  (N  -  n)*  (N  *  N  *  (N  -  1));  [CE]  not  a  statement  [FE]          AssertionError      [CONTEXT]      protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();  final  double  m  =  getNumberOfSuccesses();  final  double  n  =  getSampleSize();      [BUGGY]  (n  *  m  *  (N  -  n)*(N  *  N  -  1));  (n  *  m  *  (N  -  n)*  (N  *  N  *  (N  -  1));  [BUGGY]      }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	295	295	1	replace	(n  *  m  *  (N  -  n)*(N  *  N  -  1));  (n  *  m  *  (N  -  n)*  (N  *  N  *  (N  -  1));	  return    (n    *    m    *    (N    -    n)*    (N    -    1))/(N    *    N    *    (N    -    1));    (n    *    m    *    (N    -    n)*    (N    -    1))/(N    *    N    *    (N    -    1));    	non-compiled	[CE]  not  a  statement	19	None	replace
13	[BUG]  [BUGGY]  Double  m  =  getSampleSize();  [CE]  variable  m  is  already  defined  in  method  calculateNumericalVariance()  [FE]                AssertionError      [CONTEXT]      protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();  final  double  m  =  getNumberOfSuccesses();  final  double  n  =  getSampleSize();      [BUGGY]  Double  m  =  getSampleSize();  [BUGGY]      return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	295	295	1	replace	Double  m  =  getSampleSize();	  double    m    =    getSampleSize()    +    1;    	non-compiled	[CE]  variable  m  is  already  defined  in  method  calculateNumericalVariance()	28	None	replace
14	[BUG]  [BUGGY]  (N  *  n  *  (N  -  m)*(N  *  N  -  1));  (N  *  n  *  (N  -  m)*  (N  *  N  *  (N  -  1));  [CE]  not  a  statement  [FE]        AssertionError      [CONTEXT]      protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();  final  double  m  =  getNumberOfSuccesses();  final  double  n  =  getSampleSize();      [BUGGY]  (N  *  n  *  (N  -  m)*(N  *  N  -  1));  (N  *  n  *  (N  -  m)*  (N  *  N  *  (N  -  1));  [BUGGY]      }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	295	295	1	replace	(N  *  n  *  (N  -  m)*(N  *  N  -  1));  (N  *  n  *  (N  -  m)*  (N  *  N  *  (N  -  1));	  return    (N    *    n    *    (N    -    m)*    (N    -    1))/(N    *    N    *    (N    -    1));    (N    *    n    *    (N    -    m)*    (N    -    1))/(N    *    N    *    (N    -    1));    	non-compiled	[CE]  not  a  statement	15	None	replace
15	[BUG]  [BUGGY]  (n  *  m  *  (N  -  n)*  (N  -  1))  /(N  *  (N  -  1));  [CE]  not  a  statement  [FE]          AssertionError      [CONTEXT]      protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();  final  double  m  =  getNumberOfSuccesses();  final  double  n  =  getSampleSize();      [BUGGY]  (n  *  m  *  (N  -  n)*  (N  -  1))  /(N  *  (N  -  1));  [BUGGY]      }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	295	295	1	replace	(n  *  m  *  (N  -  n)*  (N  -  1))  /(N  *  (N  -  1));	  return    (n    *    m    *    (N    -    n)*    (N    -    1))/(N    *    N    *    (N    -    1));    (n    *    m    *    (N    -    n)*    (N    -    1))/(N    *    (N    -    1));    	non-compiled	[CE]  not  a  statement	20	None	replace
16	[BUG]  [BUGGY]  (n  *  m  *  (N  -  n)*(N  *  (N  -  1))  /(N  *  (N  -  1));  [CE]  ')'  expected  [FE]            AssertionError      [CONTEXT]      protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();  final  double  m  =  getNumberOfSuccesses();  final  double  n  =  getSampleSize();      [BUGGY]  (n  *  m  *  (N  -  n)*(N  *  (N  -  1))  /(N  *  (N  -  1));  [BUGGY]      }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	295	295	1	replace	(n  *  m  *  (N  -  n)*(N  *  (N  -  1))  /(N  *  (N  -  1));	  return    (n    *    m    *    (N    -    n)*    (N    -    1))/(N    *    N    *    (N    -    1));    (n    *    m    *    (N    -    n)*    (N    -    1))/(N    *    (N    -    1));    	non-compiled	[CE]  ')'  expected	20	None	replace
17	[BUG]  [BUGGY]  return(n  *  m  *  (N  -  1)*  (N  -  1))  /(N  *  N  *  (N  -  1));  (n  *  m  *  (N  -  1)*  (N  -  1))  /(N  *  N  *  (N  -  1));  [CE]  not  a  statement  [FE]    AssertionError    [CONTEXT]      protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();  final  double  m  =  getNumberOfSuccesses();  final  double  n  =  getSampleSize();      [BUGGY]  return(n  *  m  *  (N  -  1)*  (N  -  1))  /(N  *  N  *  (N  -  1));  (n  *  m  *  (N  -  1)*  (N  -  1))  /(N  *  N  *  (N  -  1));  [BUGGY]      }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	295	295	1	replace	return(n    *    m    *    (N    -    1)*    (N    -    1))    /(N    *    N    *    (N    -    1));    (n  *  m  *  (N  -  1)*  (N  -  1))  /(N  *  N  *  (N  -  1));	  	non-compiled	[CE]  not  a  statement	3	None	add
18	[BUG]  [BUGGY]  return(n  *  m  *  (N  -  1)*  (N  -  1))  /(N  *  N  *  (N  -  1));  n  *  m  *  (N  -  1)*  (N  -  1))  /(N  *  N  *  (N  -  1));  [CE]  not  a  statement  [FE]      AssertionError    [CONTEXT]      protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();  final  double  m  =  getNumberOfSuccesses();  final  double  n  =  getSampleSize();      [BUGGY]  return(n  *  m  *  (N  -  1)*  (N  -  1))  /(N  *  N  *  (N  -  1));  n  *  m  *  (N  -  1)*  (N  -  1))  /(N  *  N  *  (N  -  1));  [BUGGY]      }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	295	295	1	replace	return(n    *    m    *    (N    -    1)*    (N    -    1))    /(N    *    N    *    (N    -    1));    n  *  m  *  (N  -  1)*  (N  -  1))  /(N  *  N  *  (N  -  1));	  	non-compiled	[CE]  not  a  statement	3	None	add
19	[BUG]  [BUGGY]  return(n  *  m  *  (N  -  1)*  (N  -  1))  /(N  *  N  *  (N  -  1));  (n  *  m  *  (N  -  1)*  (N  -  1))  /(N  *  (N  -  1));  [CE]  not  a  statement  [FE]        AssertionError    [CONTEXT]      protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();  final  double  m  =  getNumberOfSuccesses();  final  double  n  =  getSampleSize();      [BUGGY]  return(n  *  m  *  (N  -  1)*  (N  -  1))  /(N  *  N  *  (N  -  1));  (n  *  m  *  (N  -  1)*  (N  -  1))  /(N  *  (N  -  1));  [BUGGY]      }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	295	295	1	replace	return(n    *    m    *    (N    -    1)*    (N    -    1))    /(N    *    N    *    (N    -    1));    (n  *  m  *  (N  -  1)*  (N  -  1))  /(N  *  (N  -  1));	  	non-compiled	[CE]  not  a  statement	3	None	add
20	[BUG]  [BUGGY]  final  double  m  =  getSampleSize();  [CE]  variable  m  is  already  defined  in  method  calculateNumericalVariance()  [FE]              AssertionError      [CONTEXT]      protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();  final  double  m  =  getNumberOfSuccesses();  final  double  n  =  getSampleSize();      [BUGGY]  final  double  m  =  getSampleSize();  [BUGGY]      return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	295	295	1	replace	final  double  m  =  getSampleSize();	  final    double    m    =    getNumberOfSuccesses();    	non-compiled	[CE]  variable  m  is  already  defined  in  method  calculateNumericalVariance()	10	None	replace
21	[BUG]  [BUGGY]  return  (n  *  m  *  (N  -  1)*  (N  *  n  *  2))  /(N  *  N  *  (N  -  1));  (n  *  m  *  (N  -  1)*  (N  *  n  *  2))  /(N  *  N  *  (N  -  1));  [CE]  not  a  statement  [FE]    AssertionError    [CONTEXT]      protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();  final  double  m  =  getNumberOfSuccesses();  final  double  n  =  getSampleSize();      [BUGGY]  return  (n  *  m  *  (N  -  1)*  (N  *  n  *  2))  /(N  *  N  *  (N  -  1));  (n  *  m  *  (N  -  1)*  (N  *  n  *  2))  /(N  *  N  *  (N  -  1));  [BUGGY]      }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	295	295	1	replace	return    (n    *    m    *    (N    -    1)*    (N    *    n    *    2))    /(N    *    N    *    (N    -    1));    (n  *  m  *  (N  -  1)*  (N  *  n  *  2))  /(N  *  N  *  (N  -  1));	  	non-compiled	[CE]  not  a  statement	13	None	add
22	[BUG]  [BUGGY]  return  (n  *  m  *  (N  -  1)*  (N  *  n  *  2))  /(N  *  N  *  (N  -  1));  (n  *  m  *  (N  -  1)*  (N  *  n  *  2))  /(N  *  (N  -  1));  [CE]  not  a  statement  [FE]      AssertionError    [CONTEXT]      protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();  final  double  m  =  getNumberOfSuccesses();  final  double  n  =  getSampleSize();      [BUGGY]  return  (n  *  m  *  (N  -  1)*  (N  *  n  *  2))  /(N  *  N  *  (N  -  1));  (n  *  m  *  (N  -  1)*  (N  *  n  *  2))  /(N  *  (N  -  1));  [BUGGY]      }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	295	295	1	replace	return    (n    *    m    *    (N    -    1)*    (N    *    n    *    2))    /(N    *    N    *    (N    -    1));    (n  *  m  *  (N  -  1)*  (N  *  n  *  2))  /(N  *  (N  -  1));	  	non-compiled	[CE]  not  a  statement	13	None	add
23	[BUG]  [BUGGY]  return  (n  *  m  *  (N  -  1)*  (N  *  n  *  2))  /(N  *  N  *  (N  -  1));  double  n  =  getSampleSize();  [CE]  variable  n  is  already  defined  in  method  calculateNumericalVariance()  [FE]        AssertionError    [CONTEXT]      protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();  final  double  m  =  getNumberOfSuccesses();  final  double  n  =  getSampleSize();      [BUGGY]  return  (n  *  m  *  (N  -  1)*  (N  *  n  *  2))  /(N  *  N  *  (N  -  1));  double  n  =  getSampleSize();  [BUGGY]      }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	295	295	1	replace	return    (n    *    m    *    (N    -    1)*    (N    *    n    *    2))    /(N    *    N    *    (N    -    1));    double  n  =  getSampleSize();	  	non-compiled	[CE]  variable  n  is  already  defined  in  method  calculateNumericalVariance()	13	None	add
24	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();  final  double  m  =  getNumberOfSuccesses();  final  double  n  =  getSampleSize();      [BUGGY]  return  (N  *  N  *(N  -  1))/(N  *  N  *  (N  -  1));  [BUGGY]      }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	295	295	1	add	return  (N  *  N  *(N  -  1))/(N  *  N  *  (N  -  1));	  return    (N    *    N    *    (N    -    m)*(N    -    1))    /(N    *    N    *    (N    -    1));    	compilable	  [FE]  AssertionError  	30	2	replace
25	[BUG]  [BUGGY]  return  (N  *  N  *(N  -  1))/(N  *  N  *  (N  -  1));  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();  final  double  m  =  getNumberOfSuccesses();  final  double  n  =  getSampleSize();      [BUGGY]  return  (N  *  N  *(N  -  1))/(N  *  N  *  (N  -  1));  [BUGGY]      }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	295	295	1	replace	return  (N  *  N  *(N  -  1))/(N  *  N  *  (N  -  1));	  return    (N    *    N    *    (N    -    m)*(N    -    1))    /(N    *    N    *    (N    -    1));    	compilable	  [FE]  AssertionError  	30	2	replace
26	[BUG]  [BUGGY]  return  (N  *  m  *(N  -  1))  /(N  *  N  *  (N  -  1));  (N  *  m  *(N  -  1))  /(N  *  (N  -  1));  [CE]  not  a  statement  [FE]    AssertionError    [CONTEXT]      protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();  final  double  m  =  getNumberOfSuccesses();  final  double  n  =  getSampleSize();      [BUGGY]  return  (N  *  m  *(N  -  1))  /(N  *  N  *  (N  -  1));  (N  *  m  *(N  -  1))  /(N  *  (N  -  1));  [BUGGY]      }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	295	295	1	replace	return    (N    *    m    *(N    -    1))    /(N    *    N    *    (N    -    1));    (N  *  m  *(N  -  1))  /(N  *  (N  -  1));	  	non-compiled	[CE]  not  a  statement	33	None	add
27	[BUG]  [BUGGY]  return  (N  *  m  *(N  -  1))  /(N  *  N  *  (N  -  1));  (N  *  m  *(N  -  1))  /(N  *  N  *  (N  -  1));  [CE]  not  a  statement  [FE]      AssertionError    [CONTEXT]      protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();  final  double  m  =  getNumberOfSuccesses();  final  double  n  =  getSampleSize();      [BUGGY]  return  (N  *  m  *(N  -  1))  /(N  *  N  *  (N  -  1));  (N  *  m  *(N  -  1))  /(N  *  N  *  (N  -  1));  [BUGGY]      }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	295	295	1	replace	return    (N    *    m    *(N    -    1))    /(N    *    N    *    (N    -    1));    (N  *  m  *(N  -  1))  /(N  *  N  *  (N  -  1));	  	non-compiled	[CE]  not  a  statement	33	None	add
28	[BUG]  [BUGGY]  return  (N  *  m  *(N  -  1))  /(N  *  N  *  (N  -  1));  double  m  =  getSampleSize();  [CE]  variable  m  is  already  defined  in  method  calculateNumericalVariance()  [FE]        AssertionError    [CONTEXT]      protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();  final  double  m  =  getNumberOfSuccesses();  final  double  n  =  getSampleSize();      [BUGGY]  return  (N  *  m  *(N  -  1))  /(N  *  N  *  (N  -  1));  double  m  =  getSampleSize();  [BUGGY]      }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	295	295	1	replace	return    (N    *    m    *(N    -    1))    /(N    *    N    *    (N    -    1));    double  m  =  getSampleSize();	  	non-compiled	[CE]  variable  m  is  already  defined  in  method  calculateNumericalVariance()	33	None	add
29	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();  final  double  m  =  getNumberOfSuccesses();  final  double  n  =  getSampleSize();      [BUGGY]  return(n  *  n  *  (N  -  1))/(N  *  N  *  (N  -  1));  [BUGGY]      }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	295	295	1	add	return(n  *  n  *  (N  -  1))/(N  *  N  *  (N  -  1));	  return    (N    *    n    *    (N    -    1))    /(N    *    N    *    (N    -    1));    	compilable	  [FE]  AssertionError  	12	3	replace
30	[BUG]  [BUGGY]  return(n  *  n  *  (N  -  1))/(N  *  N  *  (N  -  1));  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();  final  double  m  =  getNumberOfSuccesses();  final  double  n  =  getSampleSize();      [BUGGY]  return(n  *  n  *  (N  -  1))/(N  *  N  *  (N  -  1));  [BUGGY]      }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	295	295	1	replace	return(n  *  n  *  (N  -  1))/(N  *  N  *  (N  -  1));	  return    (N    *    n    *    (N    -    1))    /(N    *    N    *    (N    -    1));    	compilable	  [FE]  AssertionError  	12	3	replace
31	[BUG]  [BUGGY]  (n  *  m  *  (N  -  n)*  (N  *  n  *  2))  /(N  *  N  *  (N  -  1));  [CE]  not  a  statement  [FE]            AssertionError      [CONTEXT]      protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();  final  double  m  =  getNumberOfSuccesses();  final  double  n  =  getSampleSize();      [BUGGY]  (n  *  m  *  (N  -  n)*  (N  *  n  *  2))  /(N  *  N  *  (N  -  1));  [BUGGY]      }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	295	295	1	replace	(n  *  m  *  (N  -  n)*  (N  *  n  *  2))  /(N  *  N  *  (N  -  1));	  return    (n    *    m    *    (N    -    n)*    (N    *    n    *    2))/(N    *    N    *    (N    -    1));    (n    *    m    *    (N    -    n)*    (N    *    n    *    2))(N    *    N    *    (N    -    1));    	non-compiled	[CE]  not  a  statement	7	None	replace
32	[BUG]  [BUGGY]  (n  *  m  *  (N  -  n)*  (N  *  n  *  2))  /(N  *  N  *  (N  -  1));  (n  *  m  *  (N  -  n)*  (N  *  n  *  2))(N  *  N  *  (N  -  1));  [CE]  not  a  statement  [FE]              AssertionError      [CONTEXT]      protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();  final  double  m  =  getNumberOfSuccesses();  final  double  n  =  getSampleSize();      [BUGGY]  (n  *  m  *  (N  -  n)*  (N  *  n  *  2))  /(N  *  N  *  (N  -  1));  (n  *  m  *  (N  -  n)*  (N  *  n  *  2))(N  *  N  *  (N  -  1));  [BUGGY]      }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	295	295	1	replace	(n  *  m  *  (N  -  n)*  (N  *  n  *  2))  /(N  *  N  *  (N  -  1));  (n  *  m  *  (N  -  n)*  (N  *  n  *  2))(N  *  N  *  (N  -  1));	  return    (n    *    m    *    (N    -    n)*    (N    *    n    *    2))/(N    *    N    *    (N    -    1));    (n    *    m    *    (N    -    n)*    (N    *    n    *    2))(N    *    N    *    (N    -    1));    	non-compiled	[CE]  not  a  statement	7	None	replace
33	[BUG]  [BUGGY]  return  (N  *  n  *  (N  -  1))  /(N  *  N  *  (N  -  1));  (N  *  n  *  (N  -  1))  /(N  *  N  *  (N  -  1));  [CE]  not  a  statement  [FE]    AssertionError    [CONTEXT]      protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();  final  double  m  =  getNumberOfSuccesses();  final  double  n  =  getSampleSize();      [BUGGY]  return  (N  *  n  *  (N  -  1))  /(N  *  N  *  (N  -  1));  (N  *  n  *  (N  -  1))  /(N  *  N  *  (N  -  1));  [BUGGY]      }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	295	295	1	replace	return    (N    *    n    *    (N    -    1))    /(N    *    N    *    (N    -    1));    (N  *  n  *  (N  -  1))  /(N  *  N  *  (N  -  1));	  	non-compiled	[CE]  not  a  statement	11	None	add
34	[BUG]  [BUGGY]  return  (N  *  n  *  (N  -  1))  /(N  *  N  *  (N  -  1));  (N  *  n  *  (N  -  1))  /(N  *  (N  -  1));  [CE]  not  a  statement  [FE]      AssertionError    [CONTEXT]      protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();  final  double  m  =  getNumberOfSuccesses();  final  double  n  =  getSampleSize();      [BUGGY]  return  (N  *  n  *  (N  -  1))  /(N  *  N  *  (N  -  1));  (N  *  n  *  (N  -  1))  /(N  *  (N  -  1));  [BUGGY]      }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	295	295	1	replace	return    (N    *    n    *    (N    -    1))    /(N    *    N    *    (N    -    1));    (N  *  n  *  (N  -  1))  /(N  *  (N  -  1));	  	non-compiled	[CE]  not  a  statement	11	None	add
35	[BUG]  [BUGGY]  return  (N  *  n  *  (N  -  1))  /(N  *  N  *  (N  -  1));  double  n  =  getSampleSize();  [CE]  variable  n  is  already  defined  in  method  calculateNumericalVariance()  [FE]        AssertionError    [CONTEXT]      protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();  final  double  m  =  getNumberOfSuccesses();  final  double  n  =  getSampleSize();      [BUGGY]  return  (N  *  n  *  (N  -  1))  /(N  *  N  *  (N  -  1));  double  n  =  getSampleSize();  [BUGGY]      }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	295	295	1	replace	return    (N    *    n    *    (N    -    1))    /(N    *    N    *    (N    -    1));    double  n  =  getSampleSize();	  	non-compiled	[CE]  variable  n  is  already  defined  in  method  calculateNumericalVariance()	11	None	add
36	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();  final  double  m  =  getNumberOfSuccesses();  final  double  n  =  getSampleSize();      [BUGGY]  return(n  *  m  *  (N  -  1)*  n)/(N  *  N  *  (N  -  1));  [BUGGY]      }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	295	295	1	add	return(n  *  m  *  (N  -  1)*  n)/(N  *  N  *  (N  -  1));	  return(n    *    m    *    (N    -    1)*    (N    -    1))    /(N    *    N    *    (N    -    1));    	compilable	  [FE]  AssertionError  	4	2	replace
37	[BUG]  [BUGGY]  return(n  *  m  *  (N  -  1)*  n)/(N  *  N  *  (N  -  1));  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();  final  double  m  =  getNumberOfSuccesses();  final  double  n  =  getSampleSize();      [BUGGY]  return(n  *  m  *  (N  -  1)*  n)/(N  *  N  *  (N  -  1));  [BUGGY]      }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	295	295	1	replace	return(n  *  m  *  (N  -  1)*  n)/(N  *  N  *  (N  -  1));	  return(n    *    m    *    (N    -    1)*    (N    -    1))    /(N    *    N    *    (N    -    1));    	compilable	  [FE]  AssertionError  	4	2	replace
38	[BUG]  [BUGGY]  (N  *  n  *  (N  -  m)*  (N  -  1))  /(N  *  (N  -  1));  [CE]  not  a  statement  [FE]          AssertionError      [CONTEXT]      protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();  final  double  m  =  getNumberOfSuccesses();  final  double  n  =  getSampleSize();      [BUGGY]  (N  *  n  *  (N  -  m)*  (N  -  1))  /(N  *  (N  -  1));  [BUGGY]      }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	295	295	1	replace	(N  *  n  *  (N  -  m)*  (N  -  1))  /(N  *  (N  -  1));	  return    (N    *    n    *    (N    -    m)*    (N    -    1))/(N    *    N    *    (N    -    1));    (N    *    n    *    (N    -    m)*    (N    -    1))/(N    *    (N    -    1));    	non-compiled	[CE]  not  a  statement	16	None	replace
39	[BUG]  [BUGGY]  (n  *  m  *  (N  -  n)*  (N  *  n  *  2))  /(N  *  (N  -  1));  [CE]  not  a  statement  [FE]          AssertionError      [CONTEXT]      protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();  final  double  m  =  getNumberOfSuccesses();  final  double  n  =  getSampleSize();      [BUGGY]  (n  *  m  *  (N  -  n)*  (N  *  n  *  2))  /(N  *  (N  -  1));  [BUGGY]      }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	295	295	1	replace	(n  *  m  *  (N  -  n)*  (N  *  n  *  2))  /(N  *  (N  -  1));	  return    (n    *    m    *    (N    -    n)*    (N    *    n    *    2))/(N    *    N    *    (N    -    1));    (n    *    m    *    (N    -    n)*    (N    *    n    *    2))/(N    *    (N    -    1));    	non-compiled	[CE]  not  a  statement	6	None	replace
40	[BUG]  [BUGGY]  n  *  m  *  (N  -  n)*(N  *  N  *  (N  -  1));  (n  *  m  *  (N  -  n)*  (N  *  n  *  2))/(N  *  N  *  (N  -  1));  [CE]  not  a  statement  [FE]        AssertionError      [CONTEXT]      protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();  final  double  m  =  getNumberOfSuccesses();  final  double  n  =  getSampleSize();      [BUGGY]  n  *  m  *  (N  -  n)*(N  *  N  *  (N  -  1));  (n  *  m  *  (N  -  n)*  (N  *  n  *  2))/(N  *  N  *  (N  -  1));  [BUGGY]      }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	295	295	1	replace	n  *  m  *  (N  -  n)*(N  *  N  *  (N  -  1));  (n  *  m  *  (N  -  n)*  (N  *  n  *  2))/(N  *  N  *  (N  -  1));	  return    (n    *    m    *    (N    -    n)*    (N    *    n    *    2))/(N    *    N    *    (N    -    1));    (n    *    m    *    (N    -    n)*    (N    *    n    *    2))/(N    *    N    *    (N    -    1));    	non-compiled	[CE]  not  a  statement	5	None	replace
41	[BUG]  [BUGGY]  double  n  =  getNumberOfSuccesses()  +  1;  [CE]  variable  n  is  already  defined  in  method  calculateNumericalVariance()  [FE]            AssertionError      [CONTEXT]      protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();  final  double  m  =  getNumberOfSuccesses();  final  double  n  =  getSampleSize();      [BUGGY]  double  n  =  getNumberOfSuccesses()  +  1;  [BUGGY]      return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	295	295	1	replace	double  n  =  getNumberOfSuccesses()  +  1;	  int    n    =    getNumberOfSuccesses()    +    1;    	non-compiled	[CE]  variable  n  is  already  defined  in  method  calculateNumericalVariance()	24	None	replace
42	[BUG]  [BUGGY]  int  sampleSize  =  getSampleSize();  if(sampleSize  >=  N)  {  return  sampleSize;  }  [CE]  missing  return  statement  [FE]                AssertionError      [CONTEXT]      protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();  final  double  m  =  getNumberOfSuccesses();  final  double  n  =  getSampleSize();      [BUGGY]  int  sampleSize  =  getSampleSize();  if(sampleSize  >=  N)  {  return  sampleSize;  }  [BUGGY]      }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	295	295	1	replace	int  sampleSize  =  getSampleSize();  if(sampleSize  >=  N)  {  return  sampleSize;  }	  if(n    >    0)    {    int    sampleSize    =    getSampleSize();    if(sampleSize    >=    N)    {    return    sampleSize;    }    	non-compiled	[CE]  missing  return  statement	32	None	replace
43	[BUG]  [BUGGY]  int  sampleSize  =  getSampleSize();  if(sampleSize!=  N)  {  return  sampleSize;  }  [CE]  missing  return  statement  [FE]                  AssertionError      [CONTEXT]      protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();  final  double  m  =  getNumberOfSuccesses();  final  double  n  =  getSampleSize();      [BUGGY]  int  sampleSize  =  getSampleSize();  if(sampleSize!=  N)  {  return  sampleSize;  }  [BUGGY]      }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	295	295	1	replace	int  sampleSize  =  getSampleSize();  if(sampleSize!=  N)  {  return  sampleSize;  }	  if(n    >    0)    {    int    sampleSize    =    getSampleSize();    if(sampleSize    >=    N)    {    return    sampleSize;    }    	non-compiled	[CE]  missing  return  statement	32	None	replace
44	[BUG]  [BUGGY]  final  double  n  =  getSampleSize();  [CE]  variable  n  is  already  defined  in  method  calculateNumericalVariance()  [FE]            AssertionError      [CONTEXT]      protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();  final  double  m  =  getNumberOfSuccesses();  final  double  n  =  getSampleSize();      [BUGGY]  final  double  n  =  getSampleSize();  [BUGGY]      return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	295	295	1	replace	final  double  n  =  getSampleSize();	  double    n    =    getSampleSize();    	non-compiled	[CE]  variable  n  is  already  defined  in  method  calculateNumericalVariance()	18	None	replace
45	[BUG]  [BUGGY]  return(n  *  m  *  (N  -  1))  /(N  *  N  *  (N  -  1));  (n  *  m  *  (N  -  1))  /(N  *  N  *  (N  -  1));  [CE]  not  a  statement  [FE]    AssertionError    [CONTEXT]      protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();  final  double  m  =  getNumberOfSuccesses();  final  double  n  =  getSampleSize();      [BUGGY]  return(n  *  m  *  (N  -  1))  /(N  *  N  *  (N  -  1));  (n  *  m  *  (N  -  1))  /(N  *  N  *  (N  -  1));  [BUGGY]      }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	295	295	1	replace	return(n    *    m    *    (N    -    1))    /(N    *    N    *    (N    -    1));    (n  *  m  *  (N  -  1))  /(N  *  N  *  (N  -  1));	  	non-compiled	[CE]  not  a  statement	1	None	add
46	[BUG]  [BUGGY]  return(n  *  m  *  (N  -  1))  /(N  *  N  *  (N  -  1));  n  *  m  *  (N  -  1))  /(N  *  N  *  (N  -  1));  [CE]  not  a  statement  [FE]      AssertionError    [CONTEXT]      protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();  final  double  m  =  getNumberOfSuccesses();  final  double  n  =  getSampleSize();      [BUGGY]  return(n  *  m  *  (N  -  1))  /(N  *  N  *  (N  -  1));  n  *  m  *  (N  -  1))  /(N  *  N  *  (N  -  1));  [BUGGY]      }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	295	295	1	replace	return(n    *    m    *    (N    -    1))    /(N    *    N    *    (N    -    1));    n  *  m  *  (N  -  1))  /(N  *  N  *  (N  -  1));	  	non-compiled	[CE]  not  a  statement	1	None	add
47	[BUG]  [BUGGY]  return(n  *  m  *  (N  -  1))  /(N  *  N  *  (N  -  1));  (n  *  m  *  (N  -  1))  /(N  *  (N  -  1));  [CE]  not  a  statement  [FE]        AssertionError    [CONTEXT]      protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();  final  double  m  =  getNumberOfSuccesses();  final  double  n  =  getSampleSize();      [BUGGY]  return(n  *  m  *  (N  -  1))  /(N  *  N  *  (N  -  1));  (n  *  m  *  (N  -  1))  /(N  *  (N  -  1));  [BUGGY]      }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	295	295	1	replace	return(n    *    m    *    (N    -    1))    /(N    *    N    *    (N    -    1));    (n  *  m  *  (N  -  1))  /(N  *  (N  -  1));	  	non-compiled	[CE]  not  a  statement	1	None	add
48	[BUG]  [BUGGY]  double  n  =  getPopulationSize();  [CE]  variable  n  is  already  defined  in  method  calculateNumericalVariance()  [FE]            AssertionError      [CONTEXT]      protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();  final  double  m  =  getNumberOfSuccesses();  final  double  n  =  getSampleSize();      [BUGGY]  double  n  =  getPopulationSize();  [BUGGY]      return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	295	295	1	replace	double  n  =  getPopulationSize();	  double    n    =    getSampleSize();    	non-compiled	[CE]  variable  n  is  already  defined  in  method  calculateNumericalVariance()	18	None	replace
49	[BUG]  [BUGGY]  (N  *  n  *  (N  -  1))  /(N  *  N  *  (N  -  1));  (N  *  n  *  (N  -  m)*  (N  -  1))  /(N  *  N  *  (N  -  1));  [CE]  not  a  statement  [FE]        AssertionError      [CONTEXT]      protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();  final  double  m  =  getNumberOfSuccesses();  final  double  n  =  getSampleSize();      [BUGGY]  (N  *  n  *  (N  -  1))  /(N  *  N  *  (N  -  1));  (N  *  n  *  (N  -  m)*  (N  -  1))  /(N  *  N  *  (N  -  1));  [BUGGY]      }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	295	295	1	replace	(N  *  n  *  (N  -  1))  /(N  *  N  *  (N  -  1));  (N  *  n  *  (N  -  m)*  (N  -  1))  /(N  *  N  *  (N  -  1));	  return    (N    *    n    *    (N    -    m)*    (N    -    1))/(N    *    N    *    (N    -    1));    (N    *    n    *    (N    -    m)*    (N    -    1))/(N    *    N    *    (N    -    1));    	non-compiled	[CE]  not  a  statement	15	None	replace
50	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();  final  double  m  =  getNumberOfSuccesses();  final  double  n  =  getSampleSize();      [BUGGY]  return(n  *  N  *  (N  -  1)*  (N  -  1))/(N  *  N  *  (N  -  1));  [BUGGY]      }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	295	295	1	add	return(n  *  N  *  (N  -  1)*  (N  -  1))/(N  *  N  *  (N  -  1));	  return(n    *    m    *    (N    -    1)*    (N    -    1))    /(N    *    N    *    (N    -    1));    	compilable	  [FE]  AssertionError  	4	2	replace
51	[BUG]  [BUGGY]  return(n  *  N  *  (N  -  1)*  (N  -  1))/(N  *  N  *  (N  -  1));  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();  final  double  m  =  getNumberOfSuccesses();  final  double  n  =  getSampleSize();      [BUGGY]  return(n  *  N  *  (N  -  1)*  (N  -  1))/(N  *  N  *  (N  -  1));  [BUGGY]      }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	295	295	1	replace	return(n  *  N  *  (N  -  1)*  (N  -  1))/(N  *  N  *  (N  -  1));	  return(n    *    m    *    (N    -    1)*    (N    -    1))    /(N    *    N    *    (N    -    1));    	compilable	  [FE]  AssertionError  	4	2	replace
52	[BUG]  [BUGGY]  (N  *  n  *  (N  -  1))  /(N  *  N  *  (N  -  1));  (N  *  n  *  (N  -  m)*  (N  -  1))(N  *  N  *  (N  -  1));  [CE]  not  a  statement  [FE]            AssertionError      [CONTEXT]      protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();  final  double  m  =  getNumberOfSuccesses();  final  double  n  =  getSampleSize();      [BUGGY]  (N  *  n  *  (N  -  1))  /(N  *  N  *  (N  -  1));  (N  *  n  *  (N  -  m)*  (N  -  1))(N  *  N  *  (N  -  1));  [BUGGY]      }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	295	295	1	replace	(N  *  n  *  (N  -  1))  /(N  *  N  *  (N  -  1));  (N  *  n  *  (N  -  m)*  (N  -  1))(N  *  N  *  (N  -  1));	  return    (N    *    n    *    (N    -    m)*    (N    -    1))/(N    *    N    *    (N    -    1));    (N    *    n    *    (N    -    m)*    (N    -    1))(N    *    N    *    (N    -    1));    	non-compiled	[CE]  not  a  statement	17	None	replace
53	[BUG]  [BUGGY]  (N  *  n  *  (N  -  m)*  (N  -  1))  /(N  *  N  *  (N  -  1));  (N  *  n  *  (N  -  m)*  (N  -  1))(N  *  N  *  (N  -  1));  [CE]  not  a  statement  [FE]              AssertionError      [CONTEXT]      protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();  final  double  m  =  getNumberOfSuccesses();  final  double  n  =  getSampleSize();      [BUGGY]  (N  *  n  *  (N  -  m)*  (N  -  1))  /(N  *  N  *  (N  -  1));  (N  *  n  *  (N  -  m)*  (N  -  1))(N  *  N  *  (N  -  1));  [BUGGY]      }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	295	295	1	replace	(N  *  n  *  (N  -  m)*  (N  -  1))  /(N  *  N  *  (N  -  1));  (N  *  n  *  (N  -  m)*  (N  -  1))(N  *  N  *  (N  -  1));	  return    (N    *    n    *    (N    -    m)*    (N    -    1))/(N    *    N    *    (N    -    1));    (N    *    n    *    (N    -    m)*    (N    -    1))(N    *    N    *    (N    -    1));    	non-compiled	[CE]  not  a  statement	17	None	replace
54	[BUG]  [BUGGY]  (n  *  m  *  (N  -  1))  /(N  *  N  *  (N  -  1));  (n  *  m  *  (N  -  n)*  (N  *  N  *  (N  -  1));  [CE]  not  a  statement  [FE]        AssertionError      [CONTEXT]      protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();  final  double  m  =  getNumberOfSuccesses();  final  double  n  =  getSampleSize();      [BUGGY]  (n  *  m  *  (N  -  1))  /(N  *  N  *  (N  -  1));  (n  *  m  *  (N  -  n)*  (N  *  N  *  (N  -  1));  [BUGGY]      }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	295	295	1	replace	(n  *  m  *  (N  -  1))  /(N  *  N  *  (N  -  1));  (n  *  m  *  (N  -  n)*  (N  *  N  *  (N  -  1));	  return    (n    *    m    *    (N    -    n)*    (N    -    1))/(N    *    N    *    (N    -    1));    (n    *    m    *    (N    -    n)*    (N    -    1))/(N    *    N    *    (N    -    1));    	non-compiled	[CE]  not  a  statement	19	None	replace
55	[BUG]  [BUGGY]  (n  *  N  *  (N  -  1))  /(N  *  N  *  (N  -  1));  (n  *  m  *  (N  -  n)*  (N  *  N  *  (N  -  1));  [CE]  not  a  statement  [FE]          AssertionError      [CONTEXT]      protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();  final  double  m  =  getNumberOfSuccesses();  final  double  n  =  getSampleSize();      [BUGGY]  (n  *  N  *  (N  -  1))  /(N  *  N  *  (N  -  1));  (n  *  m  *  (N  -  n)*  (N  *  N  *  (N  -  1));  [BUGGY]      }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	295	295	1	replace	(n  *  N  *  (N  -  1))  /(N  *  N  *  (N  -  1));  (n  *  m  *  (N  -  n)*  (N  *  N  *  (N  -  1));	  return    (n    *    m    *    (N    -    n)*    (N    -    1))/(N    *    N    *    (N    -    1));    (n    *    m    *    (N    -    n)*    (N    -    1))/(N    *    N    *    (N    -    1));    	non-compiled	[CE]  not  a  statement	19	None	replace
56	[BUG]  [BUGGY]  (n  *  m  *  (N  -  1))  /(N  *  N  *  (N  -  1));  (n  *  m  *  (N  -  n)*  (N  -  1))  /(N  *  (N  -  1));  [CE]  not  a  statement  [FE]          AssertionError      [CONTEXT]      protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();  final  double  m  =  getNumberOfSuccesses();  final  double  n  =  getSampleSize();      [BUGGY]  (n  *  m  *  (N  -  1))  /(N  *  N  *  (N  -  1));  (n  *  m  *  (N  -  n)*  (N  -  1))  /(N  *  (N  -  1));  [BUGGY]      }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	295	295	1	replace	(n  *  m  *  (N  -  1))  /(N  *  N  *  (N  -  1));  (n  *  m  *  (N  -  n)*  (N  -  1))  /(N  *  (N  -  1));	  return    (n    *    m    *    (N    -    n)*    (N    -    1))/(N    *    N    *    (N    -    1));    (n    *    m    *    (N    -    n)*    (N    -    1))/(N    *    (N    -    1));    	non-compiled	[CE]  not  a  statement	20	None	replace
57	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError      [CONTEXT]      protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();  final  double  m  =  getNumberOfSuccesses();  final  double  n  =  getSampleSize();      [BUGGY]  return  (n  *  m  *  (N  -  1))  /(N  *  n  *  (N  -  1));  [BUGGY]      }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	295	295	1	add	return  (n  *  m  *  (N  -  1))  /(N  *  n  *  (N  -  1));	  return    (n    *    m    *    (N    -    n)*    (N    -    1))/(N    *    N    *    (N    -    1));    double    n    =    getSampleSize();    	compilable	  [FE]  AssertionError  	27	2	replace
58	[BUG]  [BUGGY]  return  (n  *  m  *  (N  -  1))  /(N  *  n  *  (N  -  1));  [FE]  AssertionError  [FE]        AssertionError      [CONTEXT]      protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();  final  double  m  =  getNumberOfSuccesses();  final  double  n  =  getSampleSize();      [BUGGY]  return  (n  *  m  *  (N  -  1))  /(N  *  n  *  (N  -  1));  [BUGGY]      }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	295	295	1	replace	return  (n  *  m  *  (N  -  1))  /(N  *  n  *  (N  -  1));	  return    (n    *    m    *    (N    -    n)*    (N    -    1))/(N    *    N    *    (N    -    1));    double    n    =    getSampleSize();    	compilable	  [FE]  AssertionError  	27	2	replace
59	[BUG]  [BUGGY]  (N  *  n  *  (N  -  1))  /(N  *  N  *  (N  -  1));  (N  *  n  *  (N  -  m)*  (N  -  1))  /(N  *  (N  -  1));  [CE]  not  a  statement  [FE]          AssertionError      [CONTEXT]      protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();  final  double  m  =  getNumberOfSuccesses();  final  double  n  =  getSampleSize();      [BUGGY]  (N  *  n  *  (N  -  1))  /(N  *  N  *  (N  -  1));  (N  *  n  *  (N  -  m)*  (N  -  1))  /(N  *  (N  -  1));  [BUGGY]      }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	295	295	1	replace	(N  *  n  *  (N  -  1))  /(N  *  N  *  (N  -  1));  (N  *  n  *  (N  -  m)*  (N  -  1))  /(N  *  (N  -  1));	  return    (N    *    n    *    (N    -    m)*    (N    -    1))/(N    *    N    *    (N    -    1));    (N    *    n    *    (N    -    m)*    (N    -    1))/(N    *    (N    -    1));    	non-compiled	[CE]  not  a  statement	16	None	replace
60	[BUG]  [BUGGY]  return(n  *  m  *  (N  -  1)*  (N  -  1))  /(N  *  N  *  (N  -  1));  double  n  =  getSampleSize();  [CE]  variable  n  is  already  defined  in  method  calculateNumericalVariance()  [FE]    AssertionError    [CONTEXT]      protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();  final  double  m  =  getNumberOfSuccesses();  final  double  n  =  getSampleSize();      [BUGGY]  return(n  *  m  *  (N  -  1)*  (N  -  1))  /(N  *  N  *  (N  -  1));  double  n  =  getSampleSize();  [BUGGY]      }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	295	295	1	replace	return(n    *    m    *    (N    -    1)*    (N    -    1))    /(N    *    N    *    (N    -    1));    double  n  =  getSampleSize();	  	non-compiled	[CE]  variable  n  is  already  defined  in  method  calculateNumericalVariance()	3	None	add
61	[BUG]  [BUGGY]  return(n  *  m  *  (N  -  1)*  (N  -  1))  /(N  *  N  *  (N  -  1));  n  *  m  *  (N  -  1)*  (N  -  1))  /(N  *  (N  -  1));  [CE]  not  a  statement  [FE]      AssertionError    [CONTEXT]      protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();  final  double  m  =  getNumberOfSuccesses();  final  double  n  =  getSampleSize();      [BUGGY]  return(n  *  m  *  (N  -  1)*  (N  -  1))  /(N  *  N  *  (N  -  1));  n  *  m  *  (N  -  1)*  (N  -  1))  /(N  *  (N  -  1));  [BUGGY]      }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	295	295	1	replace	return(n    *    m    *    (N    -    1)*    (N    -    1))    /(N    *    N    *    (N    -    1));    n  *  m  *  (N  -  1)*  (N  -  1))  /(N  *  (N  -  1));	  	non-compiled	[CE]  not  a  statement	3	None	add
62	[BUG]  [BUGGY]  int  numberOfSuccesses  =  n  >  populationSize)  {  for(int  i  =  0;  i  <  N;  i++)  {  m  *=  N;  }  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]      protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();  final  double  m  =  getNumberOfSuccesses();  final  double  n  =  getSampleSize();      [BUGGY]  int  numberOfSuccesses  =  n  >  populationSize)  {  for(int  i  =  0;  i  <  N;  i++)  {  m  *=  N;  }  [BUGGY]      }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	295	295	1	replace	int  numberOfSuccesses  =  n  >  populationSize)  {  for(int  i  =  0;  i  <  N;  i++)  {  m  *=  N;  }	  if(n    >    populationSize)    {    for(int    i    =    0;    i    <    N;    i++)    {    m    *=    N;    }    	non-compiled	[CE]  ';'  expected	25	None	replace
63	[BUG]  [BUGGY]  int  sampleSize  =  getSampleSize();  if(n  <  N)  {  return  sampleSize;  }  [CE]  missing  return  statement  [FE]                AssertionError      [CONTEXT]      protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();  final  double  m  =  getNumberOfSuccesses();  final  double  n  =  getSampleSize();      [BUGGY]  int  sampleSize  =  getSampleSize();  if(n  <  N)  {  return  sampleSize;  }  [BUGGY]      }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	295	295	1	replace	int  sampleSize  =  getSampleSize();  if(n  <  N)  {  return  sampleSize;  }	  if(n    >    0)    {    int    sampleSize    =    getSampleSize();    if(sampleSize    >=    N)    {    return    sampleSize;    }    	non-compiled	[CE]  missing  return  statement	32	None	replace
64	[BUG]  [BUGGY]  (n  *  m  *  (N  -  n)*  (N  *  n  *  2))  /(N  *  N  *  (N  -  1));  (n  *  m  *  (N  -  n)*  (N  *  n  *  2))(N  *  N  *  (N  -  1)  [CE]  not  a  statement  [FE]            AssertionError      [CONTEXT]      protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();  final  double  m  =  getNumberOfSuccesses();  final  double  n  =  getSampleSize();      [BUGGY]  (n  *  m  *  (N  -  n)*  (N  *  n  *  2))  /(N  *  N  *  (N  -  1));  (n  *  m  *  (N  -  n)*  (N  *  n  *  2))(N  *  N  *  (N  -  1)  [BUGGY]      }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	295	295	1	replace	(n  *  m  *  (N  -  n)*  (N  *  n  *  2))  /(N  *  N  *  (N  -  1));  (n  *  m  *  (N  -  n)*  (N  *  n  *  2))(N  *  N  *  (N  -  1)	  return    (n    *    m    *    (N    -    n)*    (N    *    n    *    2))/(N    *    N    *    (N    -    1));    (n    *    m    *    (N    -    n)*    (N    *    n    *    2))(N    *    N    *    (N    -    1));    	non-compiled	[CE]  not  a  statement	7	None	replace
65	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();  final  double  m  =  getNumberOfSuccesses();  final  double  n  =  getSampleSize();      [BUGGY]  return(n  *  N  *  (N  -  1))  /(N  *  N  *  (N  -  1));  [BUGGY]      }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	295	295	1	add	return(n  *  N  *  (N  -  1))  /(N  *  N  *  (N  -  1));	  return(n    *    m    *    (N    -    1))    /(N    *    N    *    (N    -    1));    	compilable	  [FE]  AssertionError  	2	2	replace
66	[BUG]  [BUGGY]  return(n  *  N  *  (N  -  1))  /(N  *  N  *  (N  -  1));  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();  final  double  m  =  getNumberOfSuccesses();  final  double  n  =  getSampleSize();      [BUGGY]  return(n  *  N  *  (N  -  1))  /(N  *  N  *  (N  -  1));  [BUGGY]      }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	295	295	1	replace	return(n  *  N  *  (N  -  1))  /(N  *  N  *  (N  -  1));	  return(n    *    m    *    (N    -    1))    /(N    *    N    *    (N    -    1));    	compilable	  [FE]  AssertionError  	2	2	replace
67	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();  final  double  m  =  getNumberOfSuccesses();  final  double  n  =  getSampleSize();      [BUGGY]  return(n  *  m  *  (N  -  1))/(N  *  N  *  2);  [BUGGY]      }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	295	295	1	add	return(n  *  m  *  (N  -  1))/(N  *  N  *  2);	  return(n    *    m    *    (N    -    1))    /(N    *    N    *    (N    -    1));    	compilable	  [FE]  AssertionError  	2	2	replace
68	[BUG]  [BUGGY]  return(n  *  m  *  (N  -  1))/(N  *  N  *  2);  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();  final  double  m  =  getNumberOfSuccesses();  final  double  n  =  getSampleSize();      [BUGGY]  return(n  *  m  *  (N  -  1))/(N  *  N  *  2);  [BUGGY]      }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	295	295	1	replace	return(n  *  m  *  (N  -  1))/(N  *  N  *  2);	  return(n    *    m    *    (N    -    1))    /(N    *    N    *    (N    -    1));    	compilable	  [FE]  AssertionError  	2	2	replace
69	[BUG]  [BUGGY]  (n  *  m  *  (N  -  n)*  (N  *  n  *  2))  /(N  *  N  *  (N  -  1));  (n  *  m  *  (N  -  n)*  (N  *  n  *  2))  /(N  *  (N  -  1));  [CE]  not  a  statement  [FE]          AssertionError      [CONTEXT]      protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();  final  double  m  =  getNumberOfSuccesses();  final  double  n  =  getSampleSize();      [BUGGY]  (n  *  m  *  (N  -  n)*  (N  *  n  *  2))  /(N  *  N  *  (N  -  1));  (n  *  m  *  (N  -  n)*  (N  *  n  *  2))  /(N  *  (N  -  1));  [BUGGY]      }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	295	295	1	replace	(n  *  m  *  (N  -  n)*  (N  *  n  *  2))  /(N  *  N  *  (N  -  1));  (n  *  m  *  (N  -  n)*  (N  *  n  *  2))  /(N  *  (N  -  1));	  return    (n    *    m    *    (N    -    n)*    (N    *    n    *    2))/(N    *    N    *    (N    -    1));    (n    *    m    *    (N    -    n)*    (N    *    n    *    2))/(N    *    (N    -    1));    	non-compiled	[CE]  not  a  statement	6	None	replace
70	[BUG]  [BUGGY]  (n  *  m  *  (N  -  n)*  (N  *  n  *  2))  /(N  *  N  *  (N  -  1));  (n  *  m  *  (N  -  n)*  (N  *  n  *  2))  /(N  *  (N  -  1)  [CE]  not  a  statement  [FE]            AssertionError      [CONTEXT]      protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();  final  double  m  =  getNumberOfSuccesses();  final  double  n  =  getSampleSize();      [BUGGY]  (n  *  m  *  (N  -  n)*  (N  *  n  *  2))  /(N  *  N  *  (N  -  1));  (n  *  m  *  (N  -  n)*  (N  *  n  *  2))  /(N  *  (N  -  1)  [BUGGY]      }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	295	295	1	replace	(n  *  m  *  (N  -  n)*  (N  *  n  *  2))  /(N  *  N  *  (N  -  1));  (n  *  m  *  (N  -  n)*  (N  *  n  *  2))  /(N  *  (N  -  1)	  return    (n    *    m    *    (N    -    n)*    (N    *    n    *    2))/(N    *    N    *    (N    -    1));    (n    *    m    *    (N    -    n)*    (N    *    n    *    2))/(N    *    (N    -    1));    	non-compiled	[CE]  not  a  statement	6	None	replace
71	[BUG]  [BUGGY]  (n  *  m  *  (N  -  n)*  (N  *  n  *  2))  /(N  *  N  *  (N  -  1));  (n  *  m  *  (N  -  n)*  (N  *  n  *  2))  /(N  *  N  *  (N  -  1)  [CE]  not  a  statement  [FE]        AssertionError      [CONTEXT]      protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();  final  double  m  =  getNumberOfSuccesses();  final  double  n  =  getSampleSize();      [BUGGY]  (n  *  m  *  (N  -  n)*  (N  *  n  *  2))  /(N  *  N  *  (N  -  1));  (n  *  m  *  (N  -  n)*  (N  *  n  *  2))  /(N  *  N  *  (N  -  1)  [BUGGY]      }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	295	295	1	replace	(n  *  m  *  (N  -  n)*  (N  *  n  *  2))  /(N  *  N  *  (N  -  1));  (n  *  m  *  (N  -  n)*  (N  *  n  *  2))  /(N  *  N  *  (N  -  1)	  return    (n    *    m    *    (N    -    n)*    (N    *    n    *    2))/(N    *    N    *    (N    -    1));    (n    *    m    *    (N    -    n)*    (N    *    n    *    2))/(N    *    N    *    (N    -    1));    	non-compiled	[CE]  not  a  statement	5	None	replace
72	[BUG]  [BUGGY]  return  (N  *  n  *  (N  -  1))  /(N  *  N  *  (N  -  1));  (N  *  n  *  (N  -  1))  /(N  *  N  *  (N  -  1));  }  [CE]  not  a  statement  [FE]    AssertionError    [CONTEXT]      protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();  final  double  m  =  getNumberOfSuccesses();  final  double  n  =  getSampleSize();      [BUGGY]  return  (N  *  n  *  (N  -  1))  /(N  *  N  *  (N  -  1));  (N  *  n  *  (N  -  1))  /(N  *  N  *  (N  -  1));  }  [BUGGY]      }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	295	295	1	replace	return    (N    *    n    *    (N    -    1))    /(N    *    N    *    (N    -    1));    (N  *  n  *  (N  -  1))  /(N  *  N  *  (N  -  1));  }	  	non-compiled	[CE]  not  a  statement	11	None	add
73	[BUG]  [BUGGY]  double  n  =  getSampleSize()  +  1;  [CE]  variable  n  is  already  defined  in  method  calculateNumericalVariance()  [FE]            AssertionError      [CONTEXT]      protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();  final  double  m  =  getNumberOfSuccesses();  final  double  n  =  getSampleSize();      [BUGGY]  double  n  =  getSampleSize()  +  1;  [BUGGY]      return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	295	295	1	replace	double  n  =  getSampleSize()  +  1;	  double    n    =    getSampleSize();    	non-compiled	[CE]  variable  n  is  already  defined  in  method  calculateNumericalVariance()	18	None	replace
74	[BUG]  [BUGGY]  return  (N  *  N  *  (N  -  m)*(N  -  1))  /(N  *  N  *  (N  -  1));  (N  *  N  *  (N  -  m)*(N  -  1))  /(N  *  N  *  (N  -  1));  [CE]  not  a  statement  [FE]    AssertionError    [CONTEXT]      protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();  final  double  m  =  getNumberOfSuccesses();  final  double  n  =  getSampleSize();      [BUGGY]  return  (N  *  N  *  (N  -  m)*(N  -  1))  /(N  *  N  *  (N  -  1));  (N  *  N  *  (N  -  m)*(N  -  1))  /(N  *  N  *  (N  -  1));  [BUGGY]      }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	295	295	1	replace	return    (N    *    N    *    (N    -    m)*(N    -    1))    /(N    *    N    *    (N    -    1));    (N  *  N  *  (N  -  m)*(N  -  1))  /(N  *  N  *  (N  -  1));	  	non-compiled	[CE]  not  a  statement	29	None	add
75	[BUG]  [BUGGY]  (n  *  m  *  (N  -  1))  /(N  *  N  *  (N  -  1));  (n  *  m  *  (N  -  n)*  (N  -  1));  [CE]  not  a  statement  [FE]          AssertionError      [CONTEXT]      protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();  final  double  m  =  getNumberOfSuccesses();  final  double  n  =  getSampleSize();      [BUGGY]  (n  *  m  *  (N  -  1))  /(N  *  N  *  (N  -  1));  (n  *  m  *  (N  -  n)*  (N  -  1));  [BUGGY]      }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	295	295	1	replace	(n  *  m  *  (N  -  1))  /(N  *  N  *  (N  -  1));  (n  *  m  *  (N  -  n)*  (N  -  1));	  return    (n    *    m    *    (N    -    n)*    (N    -    1))/(N    *    N    *    (N    -    1));    (n    *    m    *    (N    -    n)*    (N    -    1))/(N    *    (N    -    1));    	non-compiled	[CE]  not  a  statement	20	None	replace
76	[BUG]  [BUGGY]  (n  *  m  *  (N  -  n)*  (N  *  n  *  2))  /(N  *  N  *  (N  -  1));  (n  *  m  *  (N  -  n)*  (N  *  N  *  (N  -  1));  [CE]  not  a  statement  [FE]            AssertionError      [CONTEXT]      protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();  final  double  m  =  getNumberOfSuccesses();  final  double  n  =  getSampleSize();      [BUGGY]  (n  *  m  *  (N  -  n)*  (N  *  n  *  2))  /(N  *  N  *  (N  -  1));  (n  *  m  *  (N  -  n)*  (N  *  N  *  (N  -  1));  [BUGGY]      }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	295	295	1	replace	(n  *  m  *  (N  -  n)*  (N  *  n  *  2))  /(N  *  N  *  (N  -  1));  (n  *  m  *  (N  -  n)*  (N  *  N  *  (N  -  1));	  return    (n    *    m    *    (N    -    n)*    (N    *    n    *    2))/(N    *    N    *    (N    -    1));    (n    *    m    *    (N    -    n)*    (N    *    n    *    2))(N    *    N    *    (N    -    1));    	non-compiled	[CE]  not  a  statement	7	None	replace
77	[BUG]  [BUGGY]  double  n  =  getNumberOfSuccesses().doubleValue();  [CE]  variable  n  is  already  defined  in  method  calculateNumericalVariance()  [FE]                AssertionError      [CONTEXT]      protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();  final  double  m  =  getNumberOfSuccesses();  final  double  n  =  getSampleSize();      [BUGGY]  double  n  =  getNumberOfSuccesses().doubleValue();  [BUGGY]      }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	295	295	1	replace	double  n  =  getNumberOfSuccesses().doubleValue();	  n    =    getNumberOfSuccesses().doubleValue();    	non-compiled	[CE]  variable  n  is  already  defined  in  method  calculateNumericalVariance()	9	None	replace
78	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError      [CONTEXT]      protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();  final  double  m  =  getNumberOfSuccesses();  final  double  n  =  getSampleSize();      [BUGGY]  return  (N  *  n  *  (N  -  m)*  (N  *  n  *  2))  /(N  *  N  *  (N  -  1));  [BUGGY]      }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	295	295	1	add	return  (N  *  n  *  (N  -  m)*  (N  *  n  *  2))  /(N  *  N  *  (N  -  1));	  return    (n    *    m    *    (N    -    n)*    (N    *    n    *    2))/(N    *    N    *    (N    -    1));    double    n    =    getSampleSize();    	compilable	  [FE]  AssertionError  	23	2	replace
79	[BUG]  [BUGGY]  return  (N  *  n  *  (N  -  m)*  (N  *  n  *  2))  /(N  *  N  *  (N  -  1));  [FE]  AssertionError  [FE]        AssertionError      [CONTEXT]      protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();  final  double  m  =  getNumberOfSuccesses();  final  double  n  =  getSampleSize();      [BUGGY]  return  (N  *  n  *  (N  -  m)*  (N  *  n  *  2))  /(N  *  N  *  (N  -  1));  [BUGGY]      }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	295	295	1	replace	return  (N  *  n  *  (N  -  m)*  (N  *  n  *  2))  /(N  *  N  *  (N  -  1));	  return    (n    *    m    *    (N    -    n)*    (N    *    n    *    2))/(N    *    N    *    (N    -    1));    double    n    =    getSampleSize();    	compilable	  [FE]  AssertionError  	23	2	replace
80	[BUG]  [BUGGY]  (n  *  m  *  (N  -  1))  /(N  *  N  *  (N  -  1));  (n  *  m  *  (N  -  n)*  (N  -  1))  /(N  *  N  *  (N  -  1));  [CE]  not  a  statement  [FE]        AssertionError      [CONTEXT]      protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();  final  double  m  =  getNumberOfSuccesses();  final  double  n  =  getSampleSize();      [BUGGY]  (n  *  m  *  (N  -  1))  /(N  *  N  *  (N  -  1));  (n  *  m  *  (N  -  n)*  (N  -  1))  /(N  *  N  *  (N  -  1));  [BUGGY]      }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	295	295	1	replace	(n  *  m  *  (N  -  1))  /(N  *  N  *  (N  -  1));  (n  *  m  *  (N  -  n)*  (N  -  1))  /(N  *  N  *  (N  -  1));	  return    (n    *    m    *    (N    -    n)*    (N    -    1))/(N    *    N    *    (N    -    1));    (n    *    m    *    (N    -    n)*    (N    -    1))/(N    *    N    *    (N    -    1));    	non-compiled	[CE]  not  a  statement	19	None	replace
81	[BUG]  [BUGGY]  return  (N  *  m  *(N  -  1))  /(N  *  N  *  (N  -  1));  int  sampleSize  =  getSampleSize();  [CE]  unreachable  statement  [FE]    AssertionError    [CONTEXT]      protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();  final  double  m  =  getNumberOfSuccesses();  final  double  n  =  getSampleSize();      [BUGGY]  return  (N  *  m  *(N  -  1))  /(N  *  N  *  (N  -  1));  int  sampleSize  =  getSampleSize();  [BUGGY]      }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	295	295	1	replace	return    (N    *    m    *(N    -    1))    /(N    *    N    *    (N    -    1));    int  sampleSize  =  getSampleSize();	  	non-compiled	[CE]  unreachable  statement	33	None	add
82	[BUG]  [BUGGY]  (n  *  m  *  (N  -  n)*  (N  *  N  *  2))  /(N  *  N  *  (N  -  1));  [CE]  not  a  statement  [FE]        AssertionError      [CONTEXT]      protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();  final  double  m  =  getNumberOfSuccesses();  final  double  n  =  getSampleSize();      [BUGGY]  (n  *  m  *  (N  -  n)*  (N  *  N  *  2))  /(N  *  N  *  (N  -  1));  [BUGGY]      }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	295	295	1	replace	(n  *  m  *  (N  -  n)*  (N  *  N  *  2))  /(N  *  N  *  (N  -  1));	  return    (n    *    m    *    (N    -    n)*    (N    *    n    *    2))/(N    *    N    *    (N    -    1));    (n    *    m    *    (N    -    n)*    (N    *    n    *    2))/(N    *    N    *    (N    -    1));    	non-compiled	[CE]  not  a  statement	5	None	replace
83	[BUG]  [BUGGY]  return  (n  *  m  *  (N  -  1)*  (N  *  n  *  2))  /(N  *  N  *  (N  -  1));  int  n  =  getSampleSize();  [CE]  variable  n  is  already  defined  in  method  calculateNumericalVariance()  [FE]    AssertionError    [CONTEXT]      protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();  final  double  m  =  getNumberOfSuccesses();  final  double  n  =  getSampleSize();      [BUGGY]  return  (n  *  m  *  (N  -  1)*  (N  *  n  *  2))  /(N  *  N  *  (N  -  1));  int  n  =  getSampleSize();  [BUGGY]      }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	295	295	1	replace	return    (n    *    m    *    (N    -    1)*    (N    *    n    *    2))    /(N    *    N    *    (N    -    1));    int  n  =  getSampleSize();	  	non-compiled	[CE]  variable  n  is  already  defined  in  method  calculateNumericalVariance()	13	None	add
84	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  N;  i++)  {  m  *=  n;  }  [CE]  cannot  assign  a  value  to  final  variable  m  [FE]              AssertionError      [CONTEXT]      protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();  final  double  m  =  getNumberOfSuccesses();  final  double  n  =  getSampleSize();      [BUGGY]  for(int  i  =  0;  i  <  N;  i++)  {  m  *=  n;  }  [BUGGY]      }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	295	295	1	replace	for(int  i  =  0;  i  <  N;  i++)  {  m  *=  n;  }	  if(n    >    populationSize)    {    for(int    i    =    0;    i    <    N;    i++)    {    m    *=    N;    }    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  m	25	None	replace
85	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();  final  double  m  =  getNumberOfSuccesses();  final  double  n  =  getSampleSize();      [BUGGY]  return  (N  *  n  *  (N  -  1)*  (N  *  n  *  2))/(N  *  N  *  (N  -  1));  [BUGGY]      }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	295	295	1	add	return  (N  *  n  *  (N  -  1)*  (N  *  n  *  2))/(N  *  N  *  (N  -  1));	  return    (n    *    m    *    (N    -    1)*    (N    *    n    *    2))    /(N    *    N    *    (N    -    1));    	compilable	  [FE]  AssertionError  	14	2	replace
86	[BUG]  [BUGGY]  return  (N  *  n  *  (N  -  1)*  (N  *  n  *  2))/(N  *  N  *  (N  -  1));  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();  final  double  m  =  getNumberOfSuccesses();  final  double  n  =  getSampleSize();      [BUGGY]  return  (N  *  n  *  (N  -  1)*  (N  *  n  *  2))/(N  *  N  *  (N  -  1));  [BUGGY]      }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	295	295	1	replace	return  (N  *  n  *  (N  -  1)*  (N  *  n  *  2))/(N  *  N  *  (N  -  1));	  return    (n    *    m    *    (N    -    1)*    (N    *    n    *    2))    /(N    *    N    *    (N    -    1));    	compilable	  [FE]  AssertionError  	14	2	replace
87	[BUG]  [BUGGY]  return(n  *  m  *  (N  -  1))  /(N  *  N  *  (N  -  1));  int  dx  =  getDynamicSize();  [CE]  cannot  find  symbol  [FE]    AssertionError    [CONTEXT]      protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();  final  double  m  =  getNumberOfSuccesses();  final  double  n  =  getSampleSize();      [BUGGY]  return(n  *  m  *  (N  -  1))  /(N  *  N  *  (N  -  1));  int  dx  =  getDynamicSize();  [BUGGY]      }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	295	295	1	replace	return(n    *    m    *    (N    -    1))    /(N    *    N    *    (N    -    1));    int  dx  =  getDynamicSize();	  	non-compiled	[CE]  cannot  find  symbol	1	None	add
88	[BUG]  [BUGGY]  (N  *  n  *  (N  -  1))  /(N  *  N  *  (N  -  1));  (N  *  n  *  (N  -  m)*  (N  -  1));  [CE]  not  a  statement  [FE]          AssertionError      [CONTEXT]      protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();  final  double  m  =  getNumberOfSuccesses();  final  double  n  =  getSampleSize();      [BUGGY]  (N  *  n  *  (N  -  1))  /(N  *  N  *  (N  -  1));  (N  *  n  *  (N  -  m)*  (N  -  1));  [BUGGY]      }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	295	295	1	replace	(N  *  n  *  (N  -  1))  /(N  *  N  *  (N  -  1));  (N  *  n  *  (N  -  m)*  (N  -  1));	  return    (N    *    n    *    (N    -    m)*    (N    -    1))/(N    *    N    *    (N    -    1));    (N    *    n    *    (N    -    m)*    (N    -    1))/(N    *    (N    -    1));    	non-compiled	[CE]  not  a  statement	16	None	replace
89	[BUG]  [BUGGY]  Integer  sampleSize  =  getSampleSize();  if(sampleSize  >=  N)  {  return  sampleSize;  }  [CE]  missing  return  statement  [FE]                AssertionError      [CONTEXT]      protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();  final  double  m  =  getNumberOfSuccesses();  final  double  n  =  getSampleSize();      [BUGGY]  Integer  sampleSize  =  getSampleSize();  if(sampleSize  >=  N)  {  return  sampleSize;  }  [BUGGY]      }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	295	295	1	replace	Integer  sampleSize  =  getSampleSize();  if(sampleSize  >=  N)  {  return  sampleSize;  }	  if(n    >    0)    {    int    sampleSize    =    getSampleSize();    if(sampleSize    >=    N)    {    return    sampleSize;    }    	non-compiled	[CE]  missing  return  statement	32	None	replace
90	[BUG]  [BUGGY]  Integer  sampleSize  =  getSampleSize();  if(sampleSize  ==  N)  {  return  sampleSize;  }  [CE]  missing  return  statement  [FE]              AssertionError      [CONTEXT]      protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();  final  double  m  =  getNumberOfSuccesses();  final  double  n  =  getSampleSize();      [BUGGY]  Integer  sampleSize  =  getSampleSize();  if(sampleSize  ==  N)  {  return  sampleSize;  }  [BUGGY]      }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	295	295	1	replace	Integer  sampleSize  =  getSampleSize();  if(sampleSize  ==  N)  {  return  sampleSize;  }	  if(n    >    0)    {    int    sampleSize    =    getSampleSize();    if(sampleSize    ==    N)    {    return    sampleSize;    }    	non-compiled	[CE]  missing  return  statement	31	None	replace
91	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError      [CONTEXT]      protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();  final  double  m  =  getNumberOfSuccesses();  final  double  n  =  getSampleSize();      [BUGGY]  return  (N  *  m  *  (N  -  1))  /(N  *  n  *  (N  -  1));  [BUGGY]      }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	295	295	1	add	return  (N  *  m  *  (N  -  1))  /(N  *  n  *  (N  -  1));	  return    (n    *    m    *    (N    -    n)*    (N    -    1))/(N    *    N    *    (N    -    1));    double    n    =    getSampleSize();    	compilable	  [FE]  AssertionError  	27	1	replace
92	[BUG]  [BUGGY]  return  (N  *  m  *  (N  -  1))  /(N  *  n  *  (N  -  1));  [FE]  AssertionError  [FE]        AssertionError      [CONTEXT]      protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();  final  double  m  =  getNumberOfSuccesses();  final  double  n  =  getSampleSize();      [BUGGY]  return  (N  *  m  *  (N  -  1))  /(N  *  n  *  (N  -  1));  [BUGGY]      }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	295	295	1	replace	return  (N  *  m  *  (N  -  1))  /(N  *  n  *  (N  -  1));	  return    (n    *    m    *    (N    -    n)*    (N    -    1))/(N    *    N    *    (N    -    1));    double    n    =    getSampleSize();    	compilable	  [FE]  AssertionError  	27	1	replace
