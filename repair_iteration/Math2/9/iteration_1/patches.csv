bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();  final  double  m  =  getNumberOfSuccesses();  final  double  n  =  getSampleSize();    [BUGGY]  return(n  *  m  *  (N  -  1))  /(N  *  N  *  (N  -  1));  [BUGGY]    }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	295	295	1	add	return(n  *  m  *  (N  -  1))  /(N  *  N  *  (N  -  1));	  return    (n    *    m    *    (N    -    n)*    (N    -    1))/(N    *    N    *    (N    -    1));    	compilable	  [FE]  AssertionError  	2	3	replace
2	[BUG]  [BUGGY]  return(n  *  m  *  (N  -  1))  /(N  *  N  *  (N  -  1));  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();  final  double  m  =  getNumberOfSuccesses();  final  double  n  =  getSampleSize();    [BUGGY]  return(n  *  m  *  (N  -  1))  /(N  *  N  *  (N  -  1));  [BUGGY]    }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	295	295	1	replace	return(n  *  m  *  (N  -  1))  /(N  *  N  *  (N  -  1));	  return    (n    *    m    *    (N    -    n)*    (N    -    1))/(N    *    N    *    (N    -    1));    	compilable	  [FE]  AssertionError  	2	3	replace
3	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]    protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();  final  double  m  =  getNumberOfSuccesses();  final  double  n  =  getSampleSize();    [BUGGY]  return(n  *  m  *  (N  -  1)*  (N  -  1))  /(N  *  N  *  (N  -  1));  [BUGGY]    }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	295	295	1	add	return(n  *  m  *  (N  -  1)*  (N  -  1))  /(N  *  N  *  (N  -  1));	  return    (n    *    m    *    (N    -    n)*    (N    -    1))/(N    *    N    *    (N    -    1));    	compilable	  [FE]  AssertionError  	2	2	replace
4	[BUG]  [BUGGY]  return(n  *  m  *  (N  -  1)*  (N  -  1))  /(N  *  N  *  (N  -  1));  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]    protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();  final  double  m  =  getNumberOfSuccesses();  final  double  n  =  getSampleSize();    [BUGGY]  return(n  *  m  *  (N  -  1)*  (N  -  1))  /(N  *  N  *  (N  -  1));  [BUGGY]    }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	295	295	1	replace	return(n  *  m  *  (N  -  1)*  (N  -  1))  /(N  *  N  *  (N  -  1));	  return    (n    *    m    *    (N    -    n)*    (N    -    1))/(N    *    N    *    (N    -    1));    	compilable	  [FE]  AssertionError  	2	2	replace
5	[BUG]  [BUGGY]  return  (n  *  m  *  (N  -  n)*  (N  *  n  *  2))/(N  *  N  *  (N  -  1));  (n  *  m  *  (N  -  n)*  (N  *  n  *  2))/(N  *  N  *  (N  -  1));  [CE]  not  a  statement  [FE]    AssertionError    [CONTEXT]    protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();  final  double  m  =  getNumberOfSuccesses();  final  double  n  =  getSampleSize();    [BUGGY]  return  (n  *  m  *  (N  -  n)*  (N  *  n  *  2))/(N  *  N  *  (N  -  1));  (n  *  m  *  (N  -  n)*  (N  *  n  *  2))/(N  *  N  *  (N  -  1));  [BUGGY]    }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	295	295	1	replace	return    (n    *    m    *    (N    -    n)*    (N    *    n    *    2))/(N    *    N    *    (N    -    1));    (n  *  m  *  (N  -  n)*  (N  *  n  *  2))/(N  *  N  *  (N  -  1));	  	non-compiled	[CE]  not  a  statement	8	None	add
6	[BUG]  [BUGGY]  return  (n  *  m  *  (N  -  n)*  (N  *  n  *  2))/(N  *  N  *  (N  -  1));  (n  *  m  *  (N  -  n)*  (N  *  n  *  2))/(N  *  (N  -  1));  [CE]  not  a  statement  [FE]      AssertionError    [CONTEXT]    protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();  final  double  m  =  getNumberOfSuccesses();  final  double  n  =  getSampleSize();    [BUGGY]  return  (n  *  m  *  (N  -  n)*  (N  *  n  *  2))/(N  *  N  *  (N  -  1));  (n  *  m  *  (N  -  n)*  (N  *  n  *  2))/(N  *  (N  -  1));  [BUGGY]    }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	295	295	1	replace	return    (n    *    m    *    (N    -    n)*    (N    *    n    *    2))/(N    *    N    *    (N    -    1));    (n  *  m  *  (N  -  n)*  (N  *  n  *  2))/(N  *  (N  -  1));	  	non-compiled	[CE]  not  a  statement	8	None	add
7	[BUG]  [BUGGY]  return  (n  *  m  *  (N  -  n)*  (N  *  n  *  2))/(N  *  N  *  (N  -  1));  (n  *  m  *  (N  -  n)*  (N  *  n  *  2))(N  *  N  *  (N  -  1));  [CE]  not  a  statement  [FE]        AssertionError    [CONTEXT]    protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();  final  double  m  =  getNumberOfSuccesses();  final  double  n  =  getSampleSize();    [BUGGY]  return  (n  *  m  *  (N  -  n)*  (N  *  n  *  2))/(N  *  N  *  (N  -  1));  (n  *  m  *  (N  -  n)*  (N  *  n  *  2))(N  *  N  *  (N  -  1));  [BUGGY]    }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	295	295	1	replace	return    (n    *    m    *    (N    -    n)*    (N    *    n    *    2))/(N    *    N    *    (N    -    1));    (n  *  m  *  (N  -  n)*  (N  *  n  *  2))(N  *  N  *  (N  -  1));	  	non-compiled	[CE]  not  a  statement	8	None	add
8	[BUG]  [BUGGY]  n  =  getNumberOfSuccesses();  [CE]  cannot  assign  a  value  to  final  variable  n  [FE]          AssertionError    [CONTEXT]    protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();  final  double  m  =  getNumberOfSuccesses();  final  double  n  =  getSampleSize();    [BUGGY]  n  =  getNumberOfSuccesses();  [BUGGY]    }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	295	295	1	replace	n  =  getNumberOfSuccesses();	      	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  n	3	None	replace
9	[BUG]  [BUGGY]  n  =  getNumberOfSuccesses().doubleValue();  [CE]  cannot  assign  a  value  to  final  variable  n  [FE]            AssertionError    [CONTEXT]    protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();  final  double  m  =  getNumberOfSuccesses();  final  double  n  =  getSampleSize();    [BUGGY]  n  =  getNumberOfSuccesses().doubleValue();  [BUGGY]    }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	295	295	1	replace	n  =  getNumberOfSuccesses().doubleValue();	      	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  n	3	None	replace
10	[BUG]  [BUGGY]  final  double  m  =  getNumberOfSuccesses();  [CE]  variable  m  is  already  defined  in  method  calculateNumericalVariance()  [FE]          AssertionError    [CONTEXT]    protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();  final  double  m  =  getNumberOfSuccesses();  final  double  n  =  getSampleSize();    [BUGGY]  final  double  m  =  getNumberOfSuccesses();  [BUGGY]    return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	295	295	1	replace	final  double  m  =  getNumberOfSuccesses();	      double    m    =    getNumberOfSuccesses();    	non-compiled	[CE]  variable  m  is  already  defined  in  method  calculateNumericalVariance()	5	None	replace
11	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();  final  double  m  =  getNumberOfSuccesses();  final  double  n  =  getSampleSize();    [BUGGY]  return  (N  *  n  *  (N  -  1))  /(N  *  N  *  (N  -  1));  [BUGGY]    }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	295	295	1	add	return  (N  *  n  *  (N  -  1))  /(N  *  N  *  (N  -  1));	  return    (N    *    n    *    (N    -    m)*    (N    -    1))/(N    *    N    *    (N    -    1));    	compilable	  [FE]  AssertionError  	11	2	replace
12	[BUG]  [BUGGY]  return  (N  *  n  *  (N  -  1))  /(N  *  N  *  (N  -  1));  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();  final  double  m  =  getNumberOfSuccesses();  final  double  n  =  getSampleSize();    [BUGGY]  return  (N  *  n  *  (N  -  1))  /(N  *  N  *  (N  -  1));  [BUGGY]    }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	295	295	1	replace	return  (N  *  n  *  (N  -  1))  /(N  *  N  *  (N  -  1));	  return    (N    *    n    *    (N    -    m)*    (N    -    1))/(N    *    N    *    (N    -    1));    	compilable	  [FE]  AssertionError  	11	2	replace
13	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();  final  double  m  =  getNumberOfSuccesses();  final  double  n  =  getSampleSize();    [BUGGY]  return  (n  *  m  *  (N  -  1)*  (N  *  n  *  2))  /(N  *  N  *  (N  -  1));  [BUGGY]    }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	295	295	1	add	return  (n  *  m  *  (N  -  1)*  (N  *  n  *  2))  /(N  *  N  *  (N  -  1));	  return    (n    *    m    *    (N    -    n)*    (N    *    n    *    2))/(N    *    N    *    (N    -    1));    	compilable	  [FE]  AssertionError  	9	2	replace
14	[BUG]  [BUGGY]  return  (n  *  m  *  (N  -  1)*  (N  *  n  *  2))  /(N  *  N  *  (N  -  1));  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();  final  double  m  =  getNumberOfSuccesses();  final  double  n  =  getSampleSize();    [BUGGY]  return  (n  *  m  *  (N  -  1)*  (N  *  n  *  2))  /(N  *  N  *  (N  -  1));  [BUGGY]    }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	295	295	1	replace	return  (n  *  m  *  (N  -  1)*  (N  *  n  *  2))  /(N  *  N  *  (N  -  1));	  return    (n    *    m    *    (N    -    n)*    (N    *    n    *    2))/(N    *    N    *    (N    -    1));    	compilable	  [FE]  AssertionError  	9	2	replace
15	[BUG]  [BUGGY]  return  (N  *  n  *  (N  -  m)*  (N  -  1))/(N  *  N  *  (N  -  1));  (N  *  n  *  (N  -  m)*  (N  -  1))/(N  *  N  *  (N  -  1));  [CE]  not  a  statement  [FE]    AssertionError    [CONTEXT]    protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();  final  double  m  =  getNumberOfSuccesses();  final  double  n  =  getSampleSize();    [BUGGY]  return  (N  *  n  *  (N  -  m)*  (N  -  1))/(N  *  N  *  (N  -  1));  (N  *  n  *  (N  -  m)*  (N  -  1))/(N  *  N  *  (N  -  1));  [BUGGY]    }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	295	295	1	replace	return    (N    *    n    *    (N    -    m)*    (N    -    1))/(N    *    N    *    (N    -    1));    (N  *  n  *  (N  -  m)*  (N  -  1))/(N  *  N  *  (N  -  1));	  	non-compiled	[CE]  not  a  statement	10	None	add
16	[BUG]  [BUGGY]  return  (N  *  n  *  (N  -  m)*  (N  -  1))/(N  *  N  *  (N  -  1));  (N  *  n  *  (N  -  m)*  (N  -  1))/(N  *  (N  -  1));  [CE]  not  a  statement  [FE]      AssertionError    [CONTEXT]    protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();  final  double  m  =  getNumberOfSuccesses();  final  double  n  =  getSampleSize();    [BUGGY]  return  (N  *  n  *  (N  -  m)*  (N  -  1))/(N  *  N  *  (N  -  1));  (N  *  n  *  (N  -  m)*  (N  -  1))/(N  *  (N  -  1));  [BUGGY]    }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	295	295	1	replace	return    (N    *    n    *    (N    -    m)*    (N    -    1))/(N    *    N    *    (N    -    1));    (N  *  n  *  (N  -  m)*  (N  -  1))/(N  *  (N  -  1));	  	non-compiled	[CE]  not  a  statement	10	None	add
17	[BUG]  [BUGGY]  return  (N  *  n  *  (N  -  m)*  (N  -  1))/(N  *  N  *  (N  -  1));  (N  *  n  *  (N  -  m)*  (N  -  1))(N  *  N  *  (N  -  1));  [CE]  not  a  statement  [FE]        AssertionError    [CONTEXT]    protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();  final  double  m  =  getNumberOfSuccesses();  final  double  n  =  getSampleSize();    [BUGGY]  return  (N  *  n  *  (N  -  m)*  (N  -  1))/(N  *  N  *  (N  -  1));  (N  *  n  *  (N  -  m)*  (N  -  1))(N  *  N  *  (N  -  1));  [BUGGY]    }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	295	295	1	replace	return    (N    *    n    *    (N    -    m)*    (N    -    1))/(N    *    N    *    (N    -    1));    (N  *  n  *  (N  -  m)*  (N  -  1))(N  *  N  *  (N  -  1));	  	non-compiled	[CE]  not  a  statement	10	None	add
18	[BUG]  [BUGGY]  double  n  =  getSampleSize();  [CE]  variable  n  is  already  defined  in  method  calculateNumericalVariance()  [FE]        AssertionError    [CONTEXT]    protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();  final  double  m  =  getNumberOfSuccesses();  final  double  n  =  getSampleSize();    [BUGGY]  double  n  =  getSampleSize();  [BUGGY]    return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	295	295	1	replace	double  n  =  getSampleSize();	      int    n    =    getSampleSize();    	non-compiled	[CE]  variable  n  is  already  defined  in  method  calculateNumericalVariance()	12	None	replace
19	[BUG]  [BUGGY]  return  (n  *  m  *  (N  -  n)*  (N  -  1))/(N  *  N  *  (N  -  1));  (n  *  m  *  (N  -  n)*  (N  -  1))/(N  *  N  *  (N  -  1));  [CE]  not  a  statement  [FE]    AssertionError    [CONTEXT]    protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();  final  double  m  =  getNumberOfSuccesses();  final  double  n  =  getSampleSize();    [BUGGY]  return  (n  *  m  *  (N  -  n)*  (N  -  1))/(N  *  N  *  (N  -  1));  (n  *  m  *  (N  -  n)*  (N  -  1))/(N  *  N  *  (N  -  1));  [BUGGY]    }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	295	295	1	replace	return    (n    *    m    *    (N    -    n)*    (N    -    1))/(N    *    N    *    (N    -    1));    (n  *  m  *  (N  -  n)*  (N  -  1))/(N  *  N  *  (N  -  1));	  	non-compiled	[CE]  not  a  statement	1	None	add
20	[BUG]  [BUGGY]  return  (n  *  m  *  (N  -  n)*  (N  -  1))/(N  *  N  *  (N  -  1));  (n  *  m  *  (N  -  n)*  (N  -  1))/(N  *  (N  -  1));  [CE]  not  a  statement  [FE]      AssertionError    [CONTEXT]    protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();  final  double  m  =  getNumberOfSuccesses();  final  double  n  =  getSampleSize();    [BUGGY]  return  (n  *  m  *  (N  -  n)*  (N  -  1))/(N  *  N  *  (N  -  1));  (n  *  m  *  (N  -  n)*  (N  -  1))/(N  *  (N  -  1));  [BUGGY]    }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	295	295	1	replace	return    (n    *    m    *    (N    -    n)*    (N    -    1))/(N    *    N    *    (N    -    1));    (n  *  m  *  (N  -  n)*  (N  -  1))/(N  *  (N  -  1));	  	non-compiled	[CE]  not  a  statement	1	None	add
21	[BUG]  [BUGGY]  return  (n  *  m  *  (N  -  n)*  (N  -  1))/(N  *  N  *  (N  -  1));  int  n  =  getNumberOfSuccesses();  [CE]  variable  n  is  already  defined  in  method  calculateNumericalVariance()  [FE]        AssertionError    [CONTEXT]    protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();  final  double  m  =  getNumberOfSuccesses();  final  double  n  =  getSampleSize();    [BUGGY]  return  (n  *  m  *  (N  -  n)*  (N  -  1))/(N  *  N  *  (N  -  1));  int  n  =  getNumberOfSuccesses();  [BUGGY]    }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	295	295	1	replace	return    (n    *    m    *    (N    -    n)*    (N    -    1))/(N    *    N    *    (N    -    1));    int  n  =  getNumberOfSuccesses();	  	non-compiled	[CE]  variable  n  is  already  defined  in  method  calculateNumericalVariance()	1	None	add
22	[BUG]  [BUGGY]  double  n  =  getNumberOfSuccesses();  [CE]  variable  n  is  already  defined  in  method  calculateNumericalVariance()  [FE]        AssertionError    [CONTEXT]    protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();  final  double  m  =  getNumberOfSuccesses();  final  double  n  =  getSampleSize();    [BUGGY]  double  n  =  getNumberOfSuccesses();  [BUGGY]    return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	295	295	1	replace	double  n  =  getNumberOfSuccesses();	      int    n    =    getNumberOfSuccesses();    	non-compiled	[CE]  variable  n  is  already  defined  in  method  calculateNumericalVariance()	4	None	replace
23	[BUG]  [BUGGY]  return  (n  *  m  *  (N  -  n)*  (N  *  n  *  2))/(N  *  N  *  (N  -  1));  double  n  =  getSampleSize();  [CE]  variable  n  is  already  defined  in  method  calculateNumericalVariance()  [FE]    AssertionError    [CONTEXT]    protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();  final  double  m  =  getNumberOfSuccesses();  final  double  n  =  getSampleSize();    [BUGGY]  return  (n  *  m  *  (N  -  n)*  (N  *  n  *  2))/(N  *  N  *  (N  -  1));  double  n  =  getSampleSize();  [BUGGY]    }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	295	295	1	replace	return    (n    *    m    *    (N    -    n)*    (N    *    n    *    2))/(N    *    N    *    (N    -    1));    double  n  =  getSampleSize();	  	non-compiled	[CE]  variable  n  is  already  defined  in  method  calculateNumericalVariance()	8	None	add
24	[BUG]  [BUGGY]  int  n  =  getNumberOfSuccesses()  +  1;  [CE]  variable  n  is  already  defined  in  method  calculateNumericalVariance()  [FE]        AssertionError    [CONTEXT]    protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();  final  double  m  =  getNumberOfSuccesses();  final  double  n  =  getSampleSize();    [BUGGY]  int  n  =  getNumberOfSuccesses()  +  1;  [BUGGY]    return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	295	295	1	replace	int  n  =  getNumberOfSuccesses()  +  1;	      int    n    =    getNumberOfSuccesses();    	non-compiled	[CE]  variable  n  is  already  defined  in  method  calculateNumericalVariance()	4	None	replace
25	[BUG]  [BUGGY]  if(n  >  populationSize)  {  for(int  i  =  0;  i  <  N;  i++)  {  m  *=  N;  }  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]    protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();  final  double  m  =  getNumberOfSuccesses();  final  double  n  =  getSampleSize();    [BUGGY]  if(n  >  populationSize)  {  for(int  i  =  0;  i  <  N;  i++)  {  m  *=  N;  }  [BUGGY]    }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	295	295	1	replace	if(n  >  populationSize)  {  for(int  i  =  0;  i  <  N;  i++)  {  m  *=  N;  }	      	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
26	[BUG]  [BUGGY]  int  n  =  getPopulationSize();  [CE]  variable  n  is  already  defined  in  method  calculateNumericalVariance()  [FE]        AssertionError    [CONTEXT]    protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();  final  double  m  =  getNumberOfSuccesses();  final  double  n  =  getSampleSize();    [BUGGY]  int  n  =  getPopulationSize();  [BUGGY]    return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	295	295	1	replace	int  n  =  getPopulationSize();	      int    n    =    getSampleSize();    	non-compiled	[CE]  variable  n  is  already  defined  in  method  calculateNumericalVariance()	12	None	replace
27	[BUG]  [BUGGY]  return  (n  *  m  *  (N  -  n)*  (N  -  1))/(N  *  N  *  (N  -  1));  double  n  =  getSampleSize();  [CE]  variable  n  is  already  defined  in  method  calculateNumericalVariance()  [FE]    AssertionError    [CONTEXT]    protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();  final  double  m  =  getNumberOfSuccesses();  final  double  n  =  getSampleSize();    [BUGGY]  return  (n  *  m  *  (N  -  n)*  (N  -  1))/(N  *  N  *  (N  -  1));  double  n  =  getSampleSize();  [BUGGY]    }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	295	295	1	replace	return    (n    *    m    *    (N    -    n)*    (N    -    1))/(N    *    N    *    (N    -    1));    double  n  =  getSampleSize();	  	non-compiled	[CE]  variable  n  is  already  defined  in  method  calculateNumericalVariance()	1	None	add
28	[BUG]  [BUGGY]  double  m  =  getSampleSize()  +  1;  [CE]  variable  m  is  already  defined  in  method  calculateNumericalVariance()  [FE]            AssertionError    [CONTEXT]    protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();  final  double  m  =  getNumberOfSuccesses();  final  double  n  =  getSampleSize();    [BUGGY]  double  m  =  getSampleSize()  +  1;  [BUGGY]    return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	295	295	1	replace	double  m  =  getSampleSize()  +  1;	      double    m    =    getSampleSize();    	non-compiled	[CE]  variable  m  is  already  defined  in  method  calculateNumericalVariance()	6	None	replace
29	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();  final  double  m  =  getNumberOfSuccesses();  final  double  n  =  getSampleSize();    [BUGGY]  return  (N  *  N  *  (N  -  m)*(N  -  1))  /(N  *  N  *  (N  -  1));  [BUGGY]    }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	295	295	1	add	return  (N  *  N  *  (N  -  m)*(N  -  1))  /(N  *  N  *  (N  -  1));	  return    (N    *    n    *    (N    -    m)*    (N    -    1))/(N    *    N    *    (N    -    1));    	compilable	  [FE]  AssertionError  	11	2	replace
30	[BUG]  [BUGGY]  return  (N  *  N  *  (N  -  m)*(N  -  1))  /(N  *  N  *  (N  -  1));  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();  final  double  m  =  getNumberOfSuccesses();  final  double  n  =  getSampleSize();    [BUGGY]  return  (N  *  N  *  (N  -  m)*(N  -  1))  /(N  *  N  *  (N  -  1));  [BUGGY]    }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	295	295	1	replace	return  (N  *  N  *  (N  -  m)*(N  -  1))  /(N  *  N  *  (N  -  1));	  return    (N    *    n    *    (N    -    m)*    (N    -    1))/(N    *    N    *    (N    -    1));    	compilable	  [FE]  AssertionError  	11	2	replace
31	[BUG]  [BUGGY]  if(n  >  0)  {  int  sampleSize  =  getSampleSize();  if(sampleSize  ==  N)  {  return  sampleSize;  }  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]    protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();  final  double  m  =  getNumberOfSuccesses();  final  double  n  =  getSampleSize();    [BUGGY]  if(n  >  0)  {  int  sampleSize  =  getSampleSize();  if(sampleSize  ==  N)  {  return  sampleSize;  }  [BUGGY]    }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	295	295	1	replace	if(n  >  0)  {  int  sampleSize  =  getSampleSize();  if(sampleSize  ==  N)  {  return  sampleSize;  }	      	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
32	[BUG]  [BUGGY]  if(n  >  0)  {  int  sampleSize  =  getSampleSize();  if(sampleSize  >=  N)  {  return  sampleSize;  }  [CE]  illegal  start  of  expression  [FE]            AssertionError    [CONTEXT]    protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();  final  double  m  =  getNumberOfSuccesses();  final  double  n  =  getSampleSize();    [BUGGY]  if(n  >  0)  {  int  sampleSize  =  getSampleSize();  if(sampleSize  >=  N)  {  return  sampleSize;  }  [BUGGY]    }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	295	295	1	replace	if(n  >  0)  {  int  sampleSize  =  getSampleSize();  if(sampleSize  >=  N)  {  return  sampleSize;  }	      	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
33	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();  final  double  m  =  getNumberOfSuccesses();  final  double  n  =  getSampleSize();    [BUGGY]  return  (N  *  m  *(N  -  1))  /(N  *  N  *  (N  -  1));  [BUGGY]    }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	295	295	1	add	return  (N  *  m  *(N  -  1))  /(N  *  N  *  (N  -  1));	  return    (n    *    m    *    (N    -    n)*    (N    -    1))/(N    *    N    *    (N    -    1));    	compilable	  [FE]  AssertionError  	2	2	replace
34	[BUG]  [BUGGY]  return  (N  *  m  *(N  -  1))  /(N  *  N  *  (N  -  1));  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();  final  double  m  =  getNumberOfSuccesses();  final  double  n  =  getSampleSize();    [BUGGY]  return  (N  *  m  *(N  -  1))  /(N  *  N  *  (N  -  1));  [BUGGY]    }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	295	295	1	replace	return  (N  *  m  *(N  -  1))  /(N  *  N  *  (N  -  1));	  return    (n    *    m    *    (N    -    n)*    (N    -    1))/(N    *    N    *    (N    -    1));    	compilable	  [FE]  AssertionError  	2	2	replace
