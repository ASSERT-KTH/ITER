bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  return(double)(getPopulationSize()  *  getNumberOfSuccesses())/  (double)getNumberOfSuccesses();  (double)(getPopulationSize()  *  getNumberOfSuccesses())/  (double)getNumberOfSuccesses();  [CE]  not  a  statement  [FE]    AssertionError    [CONTEXT]      public  double  getNumericalMean()  {      [BUGGY]  return(double)(getPopulationSize()  *  getNumberOfSuccesses())/  (double)getNumberOfSuccesses();  (double)(getPopulationSize()  *  getNumberOfSuccesses())/  (double)getNumberOfSuccesses();  [BUGGY]      }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalMean  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	268	268	1	replace	return(double)(getPopulationSize()    *    getNumberOfSuccesses())/    (double)getNumberOfSuccesses();    (double)(getPopulationSize()  *  getNumberOfSuccesses())/  (double)getNumberOfSuccesses();	  	non-compiled	[CE]  not  a  statement	21	None	add
2	[BUG]  [BUGGY]  return(double)(getPopulationSize()  *  getNumberOfSuccesses())/  (double)getNumberOfSuccesses();  (double)(getPopulationSize()  *  getNumberOfSuccesses())/  (double)getNumberOfSuccesses());  [CE]  not  a  statement  [FE]      AssertionError    [CONTEXT]      public  double  getNumericalMean()  {      [BUGGY]  return(double)(getPopulationSize()  *  getNumberOfSuccesses())/  (double)getNumberOfSuccesses();  (double)(getPopulationSize()  *  getNumberOfSuccesses())/  (double)getNumberOfSuccesses());  [BUGGY]      }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalMean  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	268	268	1	replace	return(double)(getPopulationSize()    *    getNumberOfSuccesses())/    (double)getNumberOfSuccesses();    (double)(getPopulationSize()  *  getNumberOfSuccesses())/  (double)getNumberOfSuccesses());	  	non-compiled	[CE]  not  a  statement	21	None	add
3	[BUG]  [BUGGY]  Double  n  =  getNumberOfSuccesses();  [CE]  incompatible  types  [FE]          AssertionError      [CONTEXT]      public  double  getNumericalMean()  {      [BUGGY]  Double  n  =  getNumberOfSuccesses();  [BUGGY]      return  (double)  (getSampleSize()  *  getNumberOfSuccesses())  /  (double)  getPopulationSize();  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalMean  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	268	268	1	replace	Double  n  =  getNumberOfSuccesses();	          double    n    =    getNumberOfSuccesses();    Double    n    =    getNumberOfSuccesses();    	non-compiled	[CE]  incompatible  types	4	None	replace
4	[BUG]  [BUGGY]  Int  sampleSize  =  getSampleSize();  [CE]  cannot  find  symbol  [FE]          AssertionError      [CONTEXT]      public  double  getNumericalMean()  {      [BUGGY]  Int  sampleSize  =  getSampleSize();  [BUGGY]      return  (double)  (getSampleSize()  *  getNumberOfSuccesses())  /  (double)  getPopulationSize();  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalMean  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	268	268	1	replace	Int  sampleSize  =  getSampleSize();	          int    sampleSize    =    getSampleSize();    Int    sampleSize    =    getSampleSize();    	non-compiled	[CE]  cannot  find  symbol	9	None	replace
5	[BUG]  [BUGGY]  int  sampleSize  =  getNumberOfSuccesses();  Int  sampleSize  =  getSampleSize();  [CE]  cannot  find  symbol  [FE]            AssertionError      [CONTEXT]      public  double  getNumericalMean()  {      [BUGGY]  int  sampleSize  =  getNumberOfSuccesses();  Int  sampleSize  =  getSampleSize();  [BUGGY]      return  (double)  (getSampleSize()  *  getNumberOfSuccesses())  /  (double)  getPopulationSize();  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalMean  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	268	268	1	replace	int  sampleSize  =  getNumberOfSuccesses();  Int  sampleSize  =  getSampleSize();	          int    sampleSize    =    getSampleSize();    Int    sampleSize    =    getSampleSize();    	non-compiled	[CE]  cannot  find  symbol	9	None	replace
6	[BUG]  [BUGGY]  [FE]  ArithmeticException  [FE]    AssertionError    [CONTEXT]      public  double  getNumericalMean()  {      [BUGGY]  return  this.numberOfSuccesses  /  getNumberOfSuccesses();  [BUGGY]      }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalMean  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	268	268	1	add	return  this.numberOfSuccesses  /  getNumberOfSuccesses();	  return    this.numberOfSuccesses    -    getNumberOfSuccesses();    	compilable	  [FE]  ArithmeticException  	29	4	replace
7	[BUG]  [BUGGY]  return  this.numberOfSuccesses  /  getNumberOfSuccesses();  [FE]  ArithmeticException  [FE]    AssertionError    [CONTEXT]      public  double  getNumericalMean()  {      [BUGGY]  return  this.numberOfSuccesses  /  getNumberOfSuccesses();  [BUGGY]      }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalMean  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	268	268	1	replace	return  this.numberOfSuccesses  /  getNumberOfSuccesses();	  return    this.numberOfSuccesses    -    getNumberOfSuccesses();    	compilable	  [FE]  ArithmeticException  	29	4	replace
8	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      public  double  getNumericalMean()  {      [BUGGY]  return  this.numberOfSuccesses  *  getNumberOfSuccesses();  [BUGGY]      }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalMean  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	268	268	1	add	return  this.numberOfSuccesses  *  getNumberOfSuccesses();	  return    this.numberOfSuccesses    -    getNumberOfSuccesses();    	compilable	  [FE]  AssertionError  	29	4	replace
9	[BUG]  [BUGGY]  return  this.numberOfSuccesses  *  getNumberOfSuccesses();  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      public  double  getNumericalMean()  {      [BUGGY]  return  this.numberOfSuccesses  *  getNumberOfSuccesses();  [BUGGY]      }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalMean  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	268	268	1	replace	return  this.numberOfSuccesses  *  getNumberOfSuccesses();	  return    this.numberOfSuccesses    -    getNumberOfSuccesses();    	compilable	  [FE]  AssertionError  	29	4	replace
10	[BUG]  [BUGGY]  double  numberOfSuccesses  =  getNumberOfSuccesses();  int  sampleSize  =  getPopulationSize();  [CE]  missing  return  statement  [FE]    AssertionError    [CONTEXT]      public  double  getNumericalMean()  {      [BUGGY]  double  numberOfSuccesses  =  getNumberOfSuccesses();  int  sampleSize  =  getPopulationSize();  [BUGGY]      return  (double)  (getSampleSize()  *  getNumberOfSuccesses())  /  (double)  getPopulationSize();  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalMean  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	268	268	1	replace	double  numberOfSuccesses  =  getNumberOfSuccesses();  int  sampleSize  =  getPopulationSize();	          double    numberOfSuccesses    =    getNumberOfSuccesses();    int    sampleSize    =    getSampleSize();    	non-compiled	[CE]  missing  return  statement	33	None	replace
11	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      public  double  getNumericalMean()  {      [BUGGY]  return(double)(getNumberOfSuccesses()  *  getPopulationSize())/  (double)getNumberOfSuccesses();  [BUGGY]      }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalMean  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	268	268	1	add	return(double)(getNumberOfSuccesses()  *  getPopulationSize())/  (double)getNumberOfSuccesses();	  return(double)(getPopulationSize()    *    getNumberOfSuccesses())/    (double)getNumberOfSuccesses();    	compilable	  [FE]  AssertionError  	22	4	replace
12	[BUG]  [BUGGY]  return(double)(getNumberOfSuccesses()  *  getPopulationSize())/  (double)getNumberOfSuccesses();  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      public  double  getNumericalMean()  {      [BUGGY]  return(double)(getNumberOfSuccesses()  *  getPopulationSize())/  (double)getNumberOfSuccesses();  [BUGGY]      }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalMean  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	268	268	1	replace	return(double)(getNumberOfSuccesses()  *  getPopulationSize())/  (double)getNumberOfSuccesses();	  return(double)(getPopulationSize()    *    getNumberOfSuccesses())/    (double)getNumberOfSuccesses();    	compilable	  [FE]  AssertionError  	22	4	replace
13	[BUG]  [BUGGY]  return(double)(getPopulationSize()  *  getNumberOfSuccesses())/  (double)getMeanSize();  [CE]  cannot  find  symbol  [FE]      AssertionError    [CONTEXT]      public  double  getNumericalMean()  {      [BUGGY]  return(double)(getPopulationSize()  *  getNumberOfSuccesses())/  (double)getMeanSize();  [BUGGY]      }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalMean  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	268	268	1	replace	return(double)(getPopulationSize()  *  getNumberOfSuccesses())/  (double)getMeanSize();	  return(double)(getPopulationSize()    *    getNumberOfSuccesses())/    (double)getNumberOfSuccesses();    	non-compiled	[CE]  cannot  find  symbol	22	None	replace
14	[BUG]  [BUGGY]  return(double)(getNumberOfSuccesses()  *  getNumberOfSuccesses())/  (double)getSampleSize();  (double)(getNumberOfSuccesses()  *  getNumberOfSuccesses())/  (double)getSampleSize();  [CE]  not  a  statement  [FE]    AssertionError    [CONTEXT]      public  double  getNumericalMean()  {      [BUGGY]  return(double)(getNumberOfSuccesses()  *  getNumberOfSuccesses())/  (double)getSampleSize();  (double)(getNumberOfSuccesses()  *  getNumberOfSuccesses())/  (double)getSampleSize();  [BUGGY]      }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalMean  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	268	268	1	replace	return(double)(getNumberOfSuccesses()    *    getNumberOfSuccesses())/    (double)getSampleSize();    (double)(getNumberOfSuccesses()  *  getNumberOfSuccesses())/  (double)getSampleSize();	  	non-compiled	[CE]  not  a  statement	34	None	add
15	[BUG]  [BUGGY]  return(double)(getNumberOfSuccesses()  *  getNumberOfSuccesses())/  (double)getSampleSize();  double)(getNumberOfSuccesses()  *  getNumberOfSuccesses())/  (double)getSampleSize();  [CE]  not  a  statement  [FE]      AssertionError    [CONTEXT]      public  double  getNumericalMean()  {      [BUGGY]  return(double)(getNumberOfSuccesses()  *  getNumberOfSuccesses())/  (double)getSampleSize();  double)(getNumberOfSuccesses()  *  getNumberOfSuccesses())/  (double)getSampleSize();  [BUGGY]      }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalMean  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	268	268	1	replace	return(double)(getNumberOfSuccesses()    *    getNumberOfSuccesses())/    (double)getSampleSize();    double)(getNumberOfSuccesses()  *  getNumberOfSuccesses())/  (double)getSampleSize();	  	non-compiled	[CE]  not  a  statement	34	None	add
16	[BUG]  [BUGGY]  Double  numberOfSuccesses  =  getNumberOfSuccesses();  [CE]  incompatible  types  [FE]        AssertionError      [CONTEXT]      public  double  getNumericalMean()  {      [BUGGY]  Double  numberOfSuccesses  =  getNumberOfSuccesses();  [BUGGY]      return  (double)  (getSampleSize()  *  getNumberOfSuccesses())  /  (double)  getPopulationSize();  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalMean  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	268	268	1	replace	Double  numberOfSuccesses  =  getNumberOfSuccesses();	          double    numberOfSuccesses    =    getNumberOfSuccesses();    double    numberOfSuccesses    =    getNumberOfSuccesses();    	non-compiled	[CE]  incompatible  types	19	None	replace
17	[BUG]  [BUGGY]  double  n  =  getSampleSize()  +  1;  [CE]  missing  return  statement  [FE]          AssertionError      [CONTEXT]      public  double  getNumericalMean()  {      [BUGGY]  double  n  =  getSampleSize()  +  1;  [BUGGY]      return  (double)  (getSampleSize()  *  getNumberOfSuccesses())  /  (double)  getPopulationSize();  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalMean  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	268	268	1	replace	double  n  =  getSampleSize()  +  1;	  double    n    =    getNumberOfSuccesses()    +    1;    	non-compiled	[CE]  missing  return  statement	14	None	replace
18	[BUG]  [BUGGY]  int  numberOfSuccesses  =  getNumberOfSuccesses();  [CE]  missing  return  statement  [FE]        AssertionError      [CONTEXT]      public  double  getNumericalMean()  {      [BUGGY]  int  numberOfSuccesses  =  getNumberOfSuccesses();  [BUGGY]      return  (double)  (getSampleSize()  *  getNumberOfSuccesses())  /  (double)  getPopulationSize();  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalMean  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	268	268	1	replace	int  numberOfSuccesses  =  getNumberOfSuccesses();	          double    numberOfSuccesses    =    getNumberOfSuccesses();    int    numberOfSuccesses    =    getNumberOfSuccesses();    	non-compiled	[CE]  missing  return  statement	27	None	replace
19	[BUG]  [BUGGY]  double  n  =  getPopulationSize();  [CE]  missing  return  statement  [FE]        AssertionError      [CONTEXT]      public  double  getNumericalMean()  {      [BUGGY]  double  n  =  getPopulationSize();  [BUGGY]      return  (double)  (getSampleSize()  *  getNumberOfSuccesses())  /  (double)  getPopulationSize();  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalMean  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	268	268	1	replace	double  n  =  getPopulationSize();	  double    n    =    getSampleSize();    	non-compiled	[CE]  missing  return  statement	13	None	replace
20	[BUG]  [BUGGY]  return  this.numberOfSuccesses  -  getNumberOfSuccesses();  double  numberOfSuccesses  =  this.numberOfSuccesses  -  getNumberOfSuccesses();  [CE]  unreachable  statement  [FE]    AssertionError    [CONTEXT]      public  double  getNumericalMean()  {      [BUGGY]  return  this.numberOfSuccesses  -  getNumberOfSuccesses();  double  numberOfSuccesses  =  this.numberOfSuccesses  -  getNumberOfSuccesses();  [BUGGY]      }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalMean  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	268	268	1	replace	return    this.numberOfSuccesses    -    getNumberOfSuccesses();    double  numberOfSuccesses  =  this.numberOfSuccesses  -  getNumberOfSuccesses();	  	non-compiled	[CE]  unreachable  statement	28	None	add
21	[BUG]  [BUGGY]  return  this.numberOfSuccesses  -  getNumberOfSuccesses();  double  numberOfSuccesses  =  getNumberOfSuccesses();  [CE]  unreachable  statement  [FE]      AssertionError    [CONTEXT]      public  double  getNumericalMean()  {      [BUGGY]  return  this.numberOfSuccesses  -  getNumberOfSuccesses();  double  numberOfSuccesses  =  getNumberOfSuccesses();  [BUGGY]      }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalMean  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	268	268	1	replace	return    this.numberOfSuccesses    -    getNumberOfSuccesses();    double  numberOfSuccesses  =  getNumberOfSuccesses();	  	non-compiled	[CE]  unreachable  statement	28	None	add
22	[BUG]  [BUGGY]  return  this.numberOfSuccesses  -  getNumberOfSuccesses();  int  numberOfSuccesses  =  getNumberOfSuccesses();  [CE]  unreachable  statement  [FE]        AssertionError    [CONTEXT]      public  double  getNumericalMean()  {      [BUGGY]  return  this.numberOfSuccesses  -  getNumberOfSuccesses();  int  numberOfSuccesses  =  getNumberOfSuccesses();  [BUGGY]      }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalMean  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	268	268	1	replace	return    this.numberOfSuccesses    -    getNumberOfSuccesses();    int  numberOfSuccesses  =  getNumberOfSuccesses();	  	non-compiled	[CE]  unreachable  statement	28	None	add
23	[BUG]  [BUGGY]  return  this.numberOfSuccesses?  getNumberOfSuccesses()  :  n;  [CE]  incompatible  types  [FE]              AssertionError      [CONTEXT]      public  double  getNumericalMean()  {      [BUGGY]  return  this.numberOfSuccesses?  getNumberOfSuccesses()  :  n;  [BUGGY]      }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalMean  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	268	268	1	replace	return  this.numberOfSuccesses?  getNumberOfSuccesses()  :  n;	  return    this.numberOfSuccesses?    getNumberOfSuccesses()    :    numberOfSuccesses;    	non-compiled	[CE]  incompatible  types	36	None	replace
24	[BUG]  [BUGGY]  double  numberOfSuccesses  =  getNumberOfSuccesses();  (double)(getNumberOfSuccesses()  *  getNumberOfSuccesses())/  (double)getPopulationSize());  [CE]  not  a  statement  [FE]          AssertionError      [CONTEXT]      public  double  getNumericalMean()  {      [BUGGY]  double  numberOfSuccesses  =  getNumberOfSuccesses();  (double)(getNumberOfSuccesses()  *  getNumberOfSuccesses())/  (double)getPopulationSize());  [BUGGY]      }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalMean  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	268	268	1	replace	double  numberOfSuccesses  =  getNumberOfSuccesses();  (double)(getNumberOfSuccesses()  *  getNumberOfSuccesses())/  (double)getPopulationSize());	  return(double)(getNumberOfSuccesses()    *    getNumberOfSuccesses())/    (double)getPopulationSize();    (double)(getNumberOfSuccesses()    *    getNumberOfSuccesses())/    (double)getPopulationSize());    	non-compiled	[CE]  not  a  statement	11	None	replace
25	[BUG]  [BUGGY]  (double)(getNumberOfSuccesses()  *  getNumberOfSuccesses())/  (double)getPopulationSize());  [CE]  not  a  statement  [FE]            AssertionError      [CONTEXT]      public  double  getNumericalMean()  {      [BUGGY]  (double)(getNumberOfSuccesses()  *  getNumberOfSuccesses())/  (double)getPopulationSize());  [BUGGY]      }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalMean  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	268	268	1	replace	(double)(getNumberOfSuccesses()  *  getNumberOfSuccesses())/  (double)getPopulationSize());	  return(double)(getNumberOfSuccesses()    *    getNumberOfSuccesses())/    (double)getPopulationSize();    (double)(getNumberOfSuccesses()    *    getNumberOfSuccesses())/    (double)getPopulationSize());    	non-compiled	[CE]  not  a  statement	11	None	replace
26	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      public  double  getNumericalMean()  {      [BUGGY]  return  getNumberOfSuccesses()  +  1;  [BUGGY]      }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalMean  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	268	268	1	add	return  getNumberOfSuccesses()  +  1;	  return    getNumberOfSuccesses();    	compilable	  [FE]  AssertionError  	16	3	replace
27	[BUG]  [BUGGY]  return  getNumberOfSuccesses()  +  1;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      public  double  getNumericalMean()  {      [BUGGY]  return  getNumberOfSuccesses()  +  1;  [BUGGY]      }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalMean  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	268	268	1	replace	return  getNumberOfSuccesses()  +  1;	  return    getNumberOfSuccesses();    	compilable	  [FE]  AssertionError  	16	3	replace
28	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      public  double  getNumericalMean()  {      [BUGGY]  return  getSampleSize();  [BUGGY]      }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalMean  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	268	268	1	add	return  getSampleSize();	  return    getNumberOfSuccesses();    	compilable	  [FE]  AssertionError  	16	3	replace
29	[BUG]  [BUGGY]  return  getSampleSize();  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      public  double  getNumericalMean()  {      [BUGGY]  return  getSampleSize();  [BUGGY]      }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalMean  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	268	268	1	replace	return  getSampleSize();	  return    getNumberOfSuccesses();    	compilable	  [FE]  AssertionError  	16	3	replace
30	[BUG]  [BUGGY]  return  getNumberOfSuccesses()  /.doubleValue();  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      public  double  getNumericalMean()  {      [BUGGY]  return  getNumberOfSuccesses()  /.doubleValue();  [BUGGY]      }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalMean  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	268	268	1	replace	return  getNumberOfSuccesses()  /.doubleValue();	  return    getNumberOfSuccesses().doubleValue();    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
31	[BUG]  [BUGGY]  double  numberOfSuccesses  =  getNumberOfSuccesses();  (double)(getNumberOfSuccesses()  *  getNumberOfSuccesses())/  (double)getPopulationSize();  [CE]  not  a  statement  [FE]        AssertionError      [CONTEXT]      public  double  getNumericalMean()  {      [BUGGY]  double  numberOfSuccesses  =  getNumberOfSuccesses();  (double)(getNumberOfSuccesses()  *  getNumberOfSuccesses())/  (double)getPopulationSize();  [BUGGY]      }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalMean  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	268	268	1	replace	double  numberOfSuccesses  =  getNumberOfSuccesses();  (double)(getNumberOfSuccesses()  *  getNumberOfSuccesses())/  (double)getPopulationSize();	  return(double)(getNumberOfSuccesses()    *    getNumberOfSuccesses())/    (double)getPopulationSize();    (double)(getNumberOfSuccesses()    *    getNumberOfSuccesses())/    (double)getPopulationSize();    	non-compiled	[CE]  not  a  statement	10	None	replace
32	[BUG]  [BUGGY]  double  numberOfSuccesses  =  getNumberOfSuccesses()  *  getPopulationSize();  (double)(getNumberOfSuccesses()  *  getNumberOfSuccesses())/  (double)getPopulationSize();  [CE]  not  a  statement  [FE]          AssertionError      [CONTEXT]      public  double  getNumericalMean()  {      [BUGGY]  double  numberOfSuccesses  =  getNumberOfSuccesses()  *  getPopulationSize();  (double)(getNumberOfSuccesses()  *  getNumberOfSuccesses())/  (double)getPopulationSize();  [BUGGY]      }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalMean  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	268	268	1	replace	double  numberOfSuccesses  =  getNumberOfSuccesses()  *  getPopulationSize();  (double)(getNumberOfSuccesses()  *  getNumberOfSuccesses())/  (double)getPopulationSize();	  return(double)(getNumberOfSuccesses()    *    getNumberOfSuccesses())/    (double)getPopulationSize();    (double)(getNumberOfSuccesses()    *    getNumberOfSuccesses())/    (double)getPopulationSize();    	non-compiled	[CE]  not  a  statement	10	None	replace
33	[BUG]  [BUGGY]  return  getNumberOfSuccesses();  getNumberOfSuccesses();  [CE]  unreachable  statement  [FE]    AssertionError    [CONTEXT]      public  double  getNumericalMean()  {      [BUGGY]  return  getNumberOfSuccesses();  getNumberOfSuccesses();  [BUGGY]      }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalMean  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	268	268	1	replace	return    getNumberOfSuccesses();    getNumberOfSuccesses();	  	non-compiled	[CE]  unreachable  statement	15	None	add
34	[BUG]  [BUGGY]  return  getNumberOfSuccesses();  int  numberOfSuccesses  =  getNumberOfSuccesses();  [CE]  unreachable  statement  [FE]      AssertionError    [CONTEXT]      public  double  getNumericalMean()  {      [BUGGY]  return  getNumberOfSuccesses();  int  numberOfSuccesses  =  getNumberOfSuccesses();  [BUGGY]      }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalMean  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	268	268	1	replace	return    getNumberOfSuccesses();    int  numberOfSuccesses  =  getNumberOfSuccesses();	  	non-compiled	[CE]  unreachable  statement	15	None	add
35	[BUG]  [BUGGY]  return  getNumberOfSuccesses();  int  n  =  getNumberOfSuccesses();  [CE]  unreachable  statement  [FE]        AssertionError    [CONTEXT]      public  double  getNumericalMean()  {      [BUGGY]  return  getNumberOfSuccesses();  int  n  =  getNumberOfSuccesses();  [BUGGY]      }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalMean  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	268	268	1	replace	return    getNumberOfSuccesses();    int  n  =  getNumberOfSuccesses();	  	non-compiled	[CE]  unreachable  statement	15	None	add
36	[BUG]  [BUGGY]  int  n  =  getNumberOfSuccesses();  [CE]  missing  return  statement  [FE]            AssertionError      [CONTEXT]      public  double  getNumericalMean()  {      [BUGGY]  int  n  =  getNumberOfSuccesses();  [BUGGY]      return  (double)  (getSampleSize()  *  getNumberOfSuccesses())  /  (double)  getPopulationSize();  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalMean  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	268	268	1	replace	int  n  =  getNumberOfSuccesses();	          double    n    =    getNumberOfSuccesses();    int    n    =    getNumberOfSuccesses();    	non-compiled	[CE]  missing  return  statement	5	None	replace
37	[BUG]  [BUGGY]          double    numberOfSuccesses    =    getNumberOfSuccesses();    int  sampleSize  =  getSampleSize();  double  numberOfSuccesses  =  getNumberOfSuccesses();  int  sampleSize  =  getSampleSize();  [CE]  variable  numberOfSuccesses  is  already  defined  in  method  getNumericalMean()  [FE]    AssertionError    [CONTEXT]      public  double  getNumericalMean()  {      [BUGGY]          double    numberOfSuccesses    =    getNumberOfSuccesses();    int  sampleSize  =  getSampleSize();  double  numberOfSuccesses  =  getNumberOfSuccesses();  int  sampleSize  =  getSampleSize();  [BUGGY]      return  (double)  (getSampleSize()  *  getNumberOfSuccesses())  /  (double)  getPopulationSize();  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalMean  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	268	268	1	replace	                double        numberOfSuccesses        =        getNumberOfSuccesses();        int    sampleSize    =    getSampleSize();    double  numberOfSuccesses  =  getNumberOfSuccesses();  int  sampleSize  =  getSampleSize();	  	non-compiled	[CE]  variable  numberOfSuccesses  is  already  defined  in  method  getNumericalMean()	32	None	add
38	[BUG]  [BUGGY]          double    numberOfSuccesses    =    getNumberOfSuccesses();    int  sampleSize  =  getSampleSize();  int  numberOfSuccesses  =  getNumberOfSuccesses();  int  sampleSize  =  getSampleSize();  [CE]  variable  numberOfSuccesses  is  already  defined  in  method  getNumericalMean()  [FE]      AssertionError    [CONTEXT]      public  double  getNumericalMean()  {      [BUGGY]          double    numberOfSuccesses    =    getNumberOfSuccesses();    int  sampleSize  =  getSampleSize();  int  numberOfSuccesses  =  getNumberOfSuccesses();  int  sampleSize  =  getSampleSize();  [BUGGY]      return  (double)  (getSampleSize()  *  getNumberOfSuccesses())  /  (double)  getPopulationSize();  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalMean  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	268	268	1	replace	                double        numberOfSuccesses        =        getNumberOfSuccesses();        int    sampleSize    =    getSampleSize();    int  numberOfSuccesses  =  getNumberOfSuccesses();  int  sampleSize  =  getSampleSize();	  	non-compiled	[CE]  variable  numberOfSuccesses  is  already  defined  in  method  getNumericalMean()	32	None	add
39	[BUG]  [BUGGY]          double    numberOfSuccesses    =    getNumberOfSuccesses();    int  sampleSize  =  getSampleSize();  double  numberOfSuccesses  =  getNumberOfSuccesses();  int  sampleSize  =  getPopulationSize();  [CE]  variable  numberOfSuccesses  is  already  defined  in  method  getNumericalMean()  [FE]        AssertionError    [CONTEXT]      public  double  getNumericalMean()  {      [BUGGY]          double    numberOfSuccesses    =    getNumberOfSuccesses();    int  sampleSize  =  getSampleSize();  double  numberOfSuccesses  =  getNumberOfSuccesses();  int  sampleSize  =  getPopulationSize();  [BUGGY]      return  (double)  (getSampleSize()  *  getNumberOfSuccesses())  /  (double)  getPopulationSize();  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalMean  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	268	268	1	replace	                double        numberOfSuccesses        =        getNumberOfSuccesses();        int    sampleSize    =    getSampleSize();    double  numberOfSuccesses  =  getNumberOfSuccesses();  int  sampleSize  =  getPopulationSize();	  	non-compiled	[CE]  variable  numberOfSuccesses  is  already  defined  in  method  getNumericalMean()	32	None	add
40	[BUG]  [BUGGY]  Double  sampleSize  =  getPopulationSize();  [CE]  incompatible  types  [FE]          AssertionError      [CONTEXT]      public  double  getNumericalMean()  {      [BUGGY]  Double  sampleSize  =  getPopulationSize();  [BUGGY]      return  (double)  (getSampleSize()  *  getNumberOfSuccesses())  /  (double)  getPopulationSize();  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalMean  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	268	268	1	replace	Double  sampleSize  =  getPopulationSize();	          double    sampleSize    =    getSampleSize();    Double    sampleSize    =    getSampleSize();    	non-compiled	[CE]  incompatible  types	25	None	replace
41	[BUG]  [BUGGY]  Integer  sampleSize  =  getNumberOfSuccesses();  [CE]  missing  return  statement  [FE]        AssertionError      [CONTEXT]      public  double  getNumericalMean()  {      [BUGGY]  Integer  sampleSize  =  getNumberOfSuccesses();  [BUGGY]      return  (double)  (getSampleSize()  *  getNumberOfSuccesses())  /  (double)  getPopulationSize();  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalMean  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	268	268	1	replace	Integer  sampleSize  =  getNumberOfSuccesses();	          int    sampleSize    =    getNumberOfSuccesses();    Int    sampleSize    =    getNumberOfSuccesses();    	non-compiled	[CE]  missing  return  statement	26	None	replace
42	[BUG]  [BUGGY]  double  sampleSize  =  getNumberOfSuccesses()  +  1;  [CE]  missing  return  statement  [FE]        AssertionError      [CONTEXT]      public  double  getNumericalMean()  {      [BUGGY]  double  sampleSize  =  getNumberOfSuccesses()  +  1;  [BUGGY]      return  (double)  (getSampleSize()  *  getNumberOfSuccesses())  /  (double)  getPopulationSize();  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalMean  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	268	268	1	replace	double  sampleSize  =  getNumberOfSuccesses()  +  1;	  double    sampleSize    =    getNumberOfSuccesses();    	non-compiled	[CE]  missing  return  statement	6	None	replace
43	[BUG]  [BUGGY]          double    numberOfSuccesses    =    getNumberOfSuccesses();    int  sampleSize  =  getSampleSize();  int  numberOfSuccesses  =  getNumberOfSuccesses();  int  sampleSize  =  getPopulationSize();  [CE]  variable  numberOfSuccesses  is  already  defined  in  method  getNumericalMean()  [FE]    AssertionError    [CONTEXT]      public  double  getNumericalMean()  {      [BUGGY]          double    numberOfSuccesses    =    getNumberOfSuccesses();    int  sampleSize  =  getSampleSize();  int  numberOfSuccesses  =  getNumberOfSuccesses();  int  sampleSize  =  getPopulationSize();  [BUGGY]      return  (double)  (getSampleSize()  *  getNumberOfSuccesses())  /  (double)  getPopulationSize();  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalMean  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	268	268	1	replace	                double        numberOfSuccesses        =        getNumberOfSuccesses();        int    sampleSize    =    getSampleSize();    int  numberOfSuccesses  =  getNumberOfSuccesses();  int  sampleSize  =  getPopulationSize();	  	non-compiled	[CE]  variable  numberOfSuccesses  is  already  defined  in  method  getNumericalMean()	32	None	add
44	[BUG]  [BUGGY]  Double  sampleSize  =  getNumberOfSuccesses();  [CE]  incompatible  types  [FE]          AssertionError      [CONTEXT]      public  double  getNumericalMean()  {      [BUGGY]  Double  sampleSize  =  getNumberOfSuccesses();  [BUGGY]      return  (double)  (getSampleSize()  *  getNumberOfSuccesses())  /  (double)  getPopulationSize();  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalMean  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	268	268	1	replace	Double  sampleSize  =  getNumberOfSuccesses();	          double    sampleSize    =    getSampleSize();    Double    sampleSize    =    getSampleSize();    	non-compiled	[CE]  incompatible  types	25	None	replace
45	[BUG]  [BUGGY]  return  this.numberOfSuccesses?  getNumberOfSuccesses()  :  0;  [CE]  incompatible  types  [FE]              AssertionError      [CONTEXT]      public  double  getNumericalMean()  {      [BUGGY]  return  this.numberOfSuccesses?  getNumberOfSuccesses()  :  0;  [BUGGY]      }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalMean  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	268	268	1	replace	return  this.numberOfSuccesses?  getNumberOfSuccesses()  :  0;	  return    this.numberOfSuccesses?    getNumberOfSuccesses()    :    numberOfSuccesses;    	non-compiled	[CE]  incompatible  types	36	None	replace
46	[BUG]  [BUGGY]  Int  sampleSize  =  getNumberOfSuccesses();  [CE]  cannot  find  symbol  [FE]        AssertionError      [CONTEXT]      public  double  getNumericalMean()  {      [BUGGY]  Int  sampleSize  =  getNumberOfSuccesses();  [BUGGY]      return  (double)  (getSampleSize()  *  getNumberOfSuccesses())  /  (double)  getPopulationSize();  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalMean  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	268	268	1	replace	Int  sampleSize  =  getNumberOfSuccesses();	          int    sampleSize    =    getNumberOfSuccesses();    Int    sampleSize    =    getNumberOfSuccesses();    	non-compiled	[CE]  cannot  find  symbol	26	None	replace
47	[BUG]  [BUGGY]  double  numberOfSuccesses  =(double)getPopulationSize()  *  getNumberOfSuccesses();  [CE]  missing  return  statement  [FE]          AssertionError      [CONTEXT]      public  double  getNumericalMean()  {      [BUGGY]  double  numberOfSuccesses  =(double)getPopulationSize()  *  getNumberOfSuccesses();  [BUGGY]      }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalMean  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	268	268	1	replace	double  numberOfSuccesses  =(double)getPopulationSize()  *  getNumberOfSuccesses();	  return(double)(getNumberOfSuccesses()    *    getNumberOfSuccesses())/    (double)getPopulationSize();    double)(getNumberOfSuccesses()    *    getNumberOfSuccesses())/    (double)getPopulationSize();    	non-compiled	[CE]  missing  return  statement	31	None	replace
48	[BUG]  [BUGGY]  return(double)(getNumberOfSuccesses()  *  getNumberOfSuccesses())/  (double)getNumericalSize();  [CE]  cannot  find  symbol  [FE]    AssertionError    [CONTEXT]      public  double  getNumericalMean()  {      [BUGGY]  return(double)(getNumberOfSuccesses()  *  getNumberOfSuccesses())/  (double)getNumericalSize();  [BUGGY]      }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalMean  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	268	268	1	replace	return(double)(getNumberOfSuccesses()  *  getNumberOfSuccesses())/  (double)getNumericalSize();	  return(double)(getNumberOfSuccesses()    *    getNumberOfSuccesses())/    (double)getSampleSize();    	non-compiled	[CE]  cannot  find  symbol	35	None	replace
49	[BUG]  [BUGGY]  double  sampleSize  =  getPopulationSize();  (double)(getNumberOfSuccesses()  *  getNumberOfSuccesses())/  (double)getPopulationSize();  [CE]  not  a  statement  [FE]        AssertionError      [CONTEXT]      public  double  getNumericalMean()  {      [BUGGY]  double  sampleSize  =  getPopulationSize();  (double)(getNumberOfSuccesses()  *  getNumberOfSuccesses())/  (double)getPopulationSize();  [BUGGY]      }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalMean  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	268	268	1	replace	double  sampleSize  =  getPopulationSize();  (double)(getNumberOfSuccesses()  *  getNumberOfSuccesses())/  (double)getPopulationSize();	  return(double)(getNumberOfSuccesses()    *    getNumberOfSuccesses())/    (double)getPopulationSize();    (double)(getNumberOfSuccesses()    *    getNumberOfSuccesses())/    (double)getPopulationSize();    	non-compiled	[CE]  not  a  statement	10	None	replace
50	[BUG]  [BUGGY]  return(double)(getNumberOfSuccesses()  *  getNumberOfSuccesses())/  (double)getSampleSize();  (double)(getNumberOfSuccesses()  *  getNumberOfSuccesses())/  (double)getSampleSize());  [CE]  not  a  statement  [FE]    AssertionError    [CONTEXT]      public  double  getNumericalMean()  {      [BUGGY]  return(double)(getNumberOfSuccesses()  *  getNumberOfSuccesses())/  (double)getSampleSize();  (double)(getNumberOfSuccesses()  *  getNumberOfSuccesses())/  (double)getSampleSize());  [BUGGY]      }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalMean  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	268	268	1	replace	return(double)(getNumberOfSuccesses()    *    getNumberOfSuccesses())/    (double)getSampleSize();    (double)(getNumberOfSuccesses()  *  getNumberOfSuccesses())/  (double)getSampleSize());	  	non-compiled	[CE]  not  a  statement	34	None	add
51	[BUG]  [BUGGY]  int  sampleSize  =  getPopulationSize();  Int  sampleSize  =  getSampleSize();  [CE]  cannot  find  symbol  [FE]          AssertionError      [CONTEXT]      public  double  getNumericalMean()  {      [BUGGY]  int  sampleSize  =  getPopulationSize();  Int  sampleSize  =  getSampleSize();  [BUGGY]      return  (double)  (getSampleSize()  *  getNumberOfSuccesses())  /  (double)  getPopulationSize();  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalMean  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	268	268	1	replace	int  sampleSize  =  getPopulationSize();  Int  sampleSize  =  getSampleSize();	          int    sampleSize    =    getSampleSize();    Int    sampleSize    =    getSampleSize();    	non-compiled	[CE]  cannot  find  symbol	9	None	replace
52	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      public  double  getNumericalMean()  {      [BUGGY]  return(double)(getSampleSize()  *  getNumberOfSuccesses())/  (double)getNumberOfSuccesses();  [BUGGY]      }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalMean  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	268	268	1	add	return(double)(getSampleSize()  *  getNumberOfSuccesses())/  (double)getNumberOfSuccesses();	  return(double)(getPopulationSize()    *    getNumberOfSuccesses())/    (double)getNumberOfSuccesses();    	compilable	  [FE]  AssertionError  	22	4	replace
53	[BUG]  [BUGGY]  return(double)(getSampleSize()  *  getNumberOfSuccesses())/  (double)getNumberOfSuccesses();  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      public  double  getNumericalMean()  {      [BUGGY]  return(double)(getSampleSize()  *  getNumberOfSuccesses())/  (double)getNumberOfSuccesses();  [BUGGY]      }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalMean  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	268	268	1	replace	return(double)(getSampleSize()  *  getNumberOfSuccesses())/  (double)getNumberOfSuccesses();	  return(double)(getPopulationSize()    *    getNumberOfSuccesses())/    (double)getNumberOfSuccesses();    	compilable	  [FE]  AssertionError  	22	4	replace
54	[BUG]  [BUGGY]  return  this.numberOfSuccesses  -  getNumberOfSuccesses();  this.numberOfSuccesses  -  getNumberOfSuccesses();  [CE]  not  a  statement  [FE]    AssertionError    [CONTEXT]      public  double  getNumericalMean()  {      [BUGGY]  return  this.numberOfSuccesses  -  getNumberOfSuccesses();  this.numberOfSuccesses  -  getNumberOfSuccesses();  [BUGGY]      }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalMean  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	268	268	1	replace	return    this.numberOfSuccesses    -    getNumberOfSuccesses();    this.numberOfSuccesses  -  getNumberOfSuccesses();	  	non-compiled	[CE]  not  a  statement	28	None	add
55	[BUG]  [BUGGY]  return  this.numberOfSuccesses  -  getNumberOfSuccesses();  int  sampleSize  =  getSampleSize();  [CE]  unreachable  statement  [FE]      AssertionError    [CONTEXT]      public  double  getNumericalMean()  {      [BUGGY]  return  this.numberOfSuccesses  -  getNumberOfSuccesses();  int  sampleSize  =  getSampleSize();  [BUGGY]      }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalMean  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	268	268	1	replace	return    this.numberOfSuccesses    -    getNumberOfSuccesses();    int  sampleSize  =  getSampleSize();	  	non-compiled	[CE]  unreachable  statement	28	None	add
56	[BUG]  [BUGGY]  double  sampleSize  =  getNumberOfSuccesses()  -  1;  [CE]  missing  return  statement  [FE]        AssertionError      [CONTEXT]      public  double  getNumericalMean()  {      [BUGGY]  double  sampleSize  =  getNumberOfSuccesses()  -  1;  [BUGGY]      return  (double)  (getSampleSize()  *  getNumberOfSuccesses())  /  (double)  getPopulationSize();  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalMean  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	268	268	1	replace	double  sampleSize  =  getNumberOfSuccesses()  -  1;	  double    sampleSize    =    getNumberOfSuccesses();    	non-compiled	[CE]  missing  return  statement	6	None	replace
57	[BUG]  [BUGGY]  return(double)(getNumberOfSuccesses()  *  getNumberOfSuccesses())/  (double)getSampleSize();  return(double)(getNumberOfSuccesses()  *  getNumberOfSuccesses())/  (double)getSampleSize();  [CE]  unreachable  statement  [FE]    AssertionError    [CONTEXT]      public  double  getNumericalMean()  {      [BUGGY]  return(double)(getNumberOfSuccesses()  *  getNumberOfSuccesses())/  (double)getSampleSize();  return(double)(getNumberOfSuccesses()  *  getNumberOfSuccesses())/  (double)getSampleSize();  [BUGGY]      }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalMean  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	268	268	1	replace	return(double)(getNumberOfSuccesses()    *    getNumberOfSuccesses())/    (double)getSampleSize();    return(double)(getNumberOfSuccesses()  *  getNumberOfSuccesses())/  (double)getSampleSize();	  	non-compiled	[CE]  unreachable  statement	34	None	add
58	[BUG]  [BUGGY]  double  sampleSize  =  getPopulationSize();  (double)(getNumberOfSuccesses()  *  getNumberOfSuccesses())/  (double)getPopulationSize());  [CE]  not  a  statement  [FE]          AssertionError      [CONTEXT]      public  double  getNumericalMean()  {      [BUGGY]  double  sampleSize  =  getPopulationSize();  (double)(getNumberOfSuccesses()  *  getNumberOfSuccesses())/  (double)getPopulationSize());  [BUGGY]      }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalMean  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	268	268	1	replace	double  sampleSize  =  getPopulationSize();  (double)(getNumberOfSuccesses()  *  getNumberOfSuccesses())/  (double)getPopulationSize());	  return(double)(getNumberOfSuccesses()    *    getNumberOfSuccesses())/    (double)getPopulationSize();    (double)(getNumberOfSuccesses()    *    getNumberOfSuccesses())/    (double)getPopulationSize());    	non-compiled	[CE]  not  a  statement	11	None	replace
59	[BUG]  [BUGGY]  return  this.numberOfSuccesses?  getNumericalVariance()  :  numberOfSuccesses;  [CE]  incompatible  types  [FE]              AssertionError      [CONTEXT]      public  double  getNumericalMean()  {      [BUGGY]  return  this.numberOfSuccesses?  getNumericalVariance()  :  numberOfSuccesses;  [BUGGY]      }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalMean  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	268	268	1	replace	return  this.numberOfSuccesses?  getNumericalVariance()  :  numberOfSuccesses;	  return    this.numberOfSuccesses?    getNumberOfSuccesses()    :    numberOfSuccesses;    	non-compiled	[CE]  incompatible  types	36	None	replace
60	[BUG]  [BUGGY]  return  getNumberOfSuccesses();  int  sampleSize  =  getNumberOfSuccesses();  [CE]  unreachable  statement  [FE]    AssertionError    [CONTEXT]      public  double  getNumericalMean()  {      [BUGGY]  return  getNumberOfSuccesses();  int  sampleSize  =  getNumberOfSuccesses();  [BUGGY]      }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalMean  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	268	268	1	replace	return    getNumberOfSuccesses();    int  sampleSize  =  getNumberOfSuccesses();	  	non-compiled	[CE]  unreachable  statement	15	None	add
61	[BUG]  [BUGGY]  return  getNumberOfSuccesses();  return  getNumberOfSuccesses();  [CE]  unreachable  statement  [FE]      AssertionError    [CONTEXT]      public  double  getNumericalMean()  {      [BUGGY]  return  getNumberOfSuccesses();  return  getNumberOfSuccesses();  [BUGGY]      }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalMean  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	268	268	1	replace	return    getNumberOfSuccesses();    return  getNumberOfSuccesses();	  	non-compiled	[CE]  unreachable  statement	15	None	add
62	[BUG]  [BUGGY]          double    numberOfSuccesses    =    getNumberOfSuccesses();    int  sampleSize  =  getSampleSize();  int  sampleSize  =  getSampleSize();  [CE]  variable  sampleSize  is  already  defined  in  method  getNumericalMean()  [FE]    AssertionError    [CONTEXT]      public  double  getNumericalMean()  {      [BUGGY]          double    numberOfSuccesses    =    getNumberOfSuccesses();    int  sampleSize  =  getSampleSize();  int  sampleSize  =  getSampleSize();  [BUGGY]      return  (double)  (getSampleSize()  *  getNumberOfSuccesses())  /  (double)  getPopulationSize();  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalMean  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	268	268	1	replace	                double        numberOfSuccesses        =        getNumberOfSuccesses();        int    sampleSize    =    getSampleSize();    int  sampleSize  =  getSampleSize();	  	non-compiled	[CE]  variable  sampleSize  is  already  defined  in  method  getNumericalMean()	32	None	add
63	[BUG]  [BUGGY]  return(double)(getPopulationSize()  *  getNumberOfSuccesses())/  (double)getNumberOfSuccesses();  return(double)(getPopulationSize()  *  getNumberOfSuccesses())/  (double)getNumberOfSuccesses();  [CE]  unreachable  statement  [FE]    AssertionError    [CONTEXT]      public  double  getNumericalMean()  {      [BUGGY]  return(double)(getPopulationSize()  *  getNumberOfSuccesses())/  (double)getNumberOfSuccesses();  return(double)(getPopulationSize()  *  getNumberOfSuccesses())/  (double)getNumberOfSuccesses();  [BUGGY]      }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalMean  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	268	268	1	replace	return(double)(getPopulationSize()    *    getNumberOfSuccesses())/    (double)getNumberOfSuccesses();    return(double)(getPopulationSize()  *  getNumberOfSuccesses())/  (double)getNumberOfSuccesses();	  	non-compiled	[CE]  unreachable  statement	21	None	add
