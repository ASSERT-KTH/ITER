bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError  [CONTEXT]  public  double  getNumericalMean()  {  [BUGGY]  return(double)(getNumberOfSuccesses()  *  getNumberOfSuccesses())/  (double)getPopulationSize();  [BUGGY]  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalMean  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	268	268	1	add	return(double)(getNumberOfSuccesses()  *  getNumberOfSuccesses())/  (double)getPopulationSize();	return  (double)  (getSampleSize()  *  getNumberOfSuccesses())  /  (double)  getPopulationSize();  	compilable	  [FE]  AssertionError  	1	2	replace
2	[BUG]  [BUGGY]  return(double)(getNumberOfSuccesses()  *  getNumberOfSuccesses())/  (double)getPopulationSize();  [FE]  AssertionError  [FE]    AssertionError  [CONTEXT]  public  double  getNumericalMean()  {  [BUGGY]  return(double)(getNumberOfSuccesses()  *  getNumberOfSuccesses())/  (double)getPopulationSize();  [BUGGY]  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalMean  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	268	268	1	replace	return(double)(getNumberOfSuccesses()  *  getNumberOfSuccesses())/  (double)getPopulationSize();	return  (double)  (getSampleSize()  *  getNumberOfSuccesses())  /  (double)  getPopulationSize();  	compilable	  [FE]  AssertionError  	1	2	replace
3	[BUG]  [BUGGY]    [CE]  missing  return  statement  [FE]      AssertionError  [CONTEXT]  public  double  getNumericalMean()  {  [BUGGY]    [BUGGY]  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalMean  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	268	268	1	replace	  	return  (double)  (getSampleSize()  *  getNumberOfSuccesses())  /  (double)  getPopulationSize();  	non-compiled	[CE]  missing  return  statement	1	None	replace
4	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError  [CONTEXT]  public  double  getNumericalMean()  {  [BUGGY]    double  numberOfSuccesses  =  getNumberOfSuccesses();  [BUGGY]  return  (double)  (getSampleSize()  *  getNumberOfSuccesses())  /  (double)  getPopulationSize();  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalMean  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	268	268	1	add	    double  numberOfSuccesses  =  getNumberOfSuccesses();		compilable	  [FE]  AssertionError  	2	1	add
5	[BUG]  [BUGGY]    double  numberOfSuccesses  =  getNumberOfSuccesses();  [FE]  AssertionError  [FE]    AssertionError  [CONTEXT]  public  double  getNumericalMean()  {  [BUGGY]    double  numberOfSuccesses  =  getNumberOfSuccesses();  [BUGGY]  return  (double)  (getSampleSize()  *  getNumberOfSuccesses())  /  (double)  getPopulationSize();  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalMean  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	268	268	1	replace	    double  numberOfSuccesses  =  getNumberOfSuccesses();		compilable	  [FE]  AssertionError  	2	1	add
6	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError  [CONTEXT]  public  double  getNumericalMean()  {  [BUGGY]    double  sampleSize  =  getSampleSize();  [BUGGY]  return  (double)  (getSampleSize()  *  getNumberOfSuccesses())  /  (double)  getPopulationSize();  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalMean  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	268	268	1	add	    double  sampleSize  =  getSampleSize();		compilable	  [FE]  AssertionError  	2	1	add
7	[BUG]  [BUGGY]    double  sampleSize  =  getSampleSize();  [FE]  AssertionError  [FE]      AssertionError  [CONTEXT]  public  double  getNumericalMean()  {  [BUGGY]    double  sampleSize  =  getSampleSize();  [BUGGY]  return  (double)  (getSampleSize()  *  getNumberOfSuccesses())  /  (double)  getPopulationSize();  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalMean  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	268	268	1	replace	    double  sampleSize  =  getSampleSize();		compilable	  [FE]  AssertionError  	2	1	add
8	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError  [CONTEXT]  public  double  getNumericalMean()  {  [BUGGY]    int  sampleSize  =  getSampleSize();  [BUGGY]  return  (double)  (getSampleSize()  *  getNumberOfSuccesses())  /  (double)  getPopulationSize();  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalMean  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	268	268	1	add	    int  sampleSize  =  getSampleSize();		compilable	  [FE]  AssertionError  	2	1	add
9	[BUG]  [BUGGY]    int  sampleSize  =  getSampleSize();  [FE]  AssertionError  [FE]        AssertionError  [CONTEXT]  public  double  getNumericalMean()  {  [BUGGY]    int  sampleSize  =  getSampleSize();  [BUGGY]  return  (double)  (getSampleSize()  *  getNumberOfSuccesses())  /  (double)  getPopulationSize();  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalMean  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	268	268	1	replace	    int  sampleSize  =  getSampleSize();		compilable	  [FE]  AssertionError  	2	1	add
10	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError  [CONTEXT]  public  double  getNumericalMean()  {  [BUGGY]    double  n  =  getNumberOfSuccesses();  [BUGGY]  return  (double)  (getSampleSize()  *  getNumberOfSuccesses())  /  (double)  getPopulationSize();  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalMean  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	268	268	1	add	    double  n  =  getNumberOfSuccesses();		compilable	  [FE]  AssertionError  	2	1	add
11	[BUG]  [BUGGY]    double  n  =  getNumberOfSuccesses();  [FE]  AssertionError  [FE]    AssertionError  [CONTEXT]  public  double  getNumericalMean()  {  [BUGGY]    double  n  =  getNumberOfSuccesses();  [BUGGY]  return  (double)  (getSampleSize()  *  getNumberOfSuccesses())  /  (double)  getPopulationSize();  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalMean  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	268	268	1	replace	    double  n  =  getNumberOfSuccesses();		compilable	  [FE]  AssertionError  	2	1	add
12	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError  [CONTEXT]  public  double  getNumericalMean()  {  [BUGGY]    int  sampleSize  =  getNumberOfSuccesses();  [BUGGY]  return  (double)  (getSampleSize()  *  getNumberOfSuccesses())  /  (double)  getPopulationSize();  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalMean  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	268	268	1	add	    int  sampleSize  =  getNumberOfSuccesses();		compilable	  [FE]  AssertionError  	2	1	add
13	[BUG]  [BUGGY]    int  sampleSize  =  getNumberOfSuccesses();  [FE]  AssertionError  [FE]    AssertionError  [CONTEXT]  public  double  getNumericalMean()  {  [BUGGY]    int  sampleSize  =  getNumberOfSuccesses();  [BUGGY]  return  (double)  (getSampleSize()  *  getNumberOfSuccesses())  /  (double)  getPopulationSize();  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalMean  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	268	268	1	replace	    int  sampleSize  =  getNumberOfSuccesses();		compilable	  [FE]  AssertionError  	2	1	add
