bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]      int  sampleSize  =  getNumberOfSuccesses();  int  sampleSize  =  getNumberOfSuccesses();  [CE]  variable  sampleSize  is  already  defined  in  method  getNumericalMean()  [FE]    AssertionError    [CONTEXT]    public  double  getNumericalMean()  {    [BUGGY]      int  sampleSize  =  getNumberOfSuccesses();  int  sampleSize  =  getNumberOfSuccesses();  [BUGGY]    return  (double)  (getSampleSize()  *  getNumberOfSuccesses())  /  (double)  getPopulationSize();  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalMean  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	268	268	1	replace	        int    sampleSize    =    getNumberOfSuccesses();    int  sampleSize  =  getNumberOfSuccesses();	  	non-compiled	[CE]  variable  sampleSize  is  already  defined  in  method  getNumericalMean()	12	None	add
2	[BUG]  [BUGGY]      int  sampleSize  =  getNumberOfSuccesses();  int  sampleSize  =  getPopulationSize();  [CE]  variable  sampleSize  is  already  defined  in  method  getNumericalMean()  [FE]      AssertionError    [CONTEXT]    public  double  getNumericalMean()  {    [BUGGY]      int  sampleSize  =  getNumberOfSuccesses();  int  sampleSize  =  getPopulationSize();  [BUGGY]    return  (double)  (getSampleSize()  *  getNumberOfSuccesses())  /  (double)  getPopulationSize();  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalMean  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	268	268	1	replace	        int    sampleSize    =    getNumberOfSuccesses();    int  sampleSize  =  getPopulationSize();	  	non-compiled	[CE]  variable  sampleSize  is  already  defined  in  method  getNumericalMean()	12	None	add
3	[BUG]  [BUGGY]      double  n  =  getNumberOfSuccesses();  double  n  =  getNumberOfSuccesses();  [CE]  variable  n  is  already  defined  in  method  getNumericalMean()  [FE]    AssertionError    [CONTEXT]    public  double  getNumericalMean()  {    [BUGGY]      double  n  =  getNumberOfSuccesses();  double  n  =  getNumberOfSuccesses();  [BUGGY]    return  (double)  (getSampleSize()  *  getNumberOfSuccesses())  /  (double)  getPopulationSize();  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalMean  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	268	268	1	replace	        double    n    =    getNumberOfSuccesses();    double  n  =  getNumberOfSuccesses();	  	non-compiled	[CE]  variable  n  is  already  defined  in  method  getNumericalMean()	10	None	add
4	[BUG]  [BUGGY]      double  n  =  getNumberOfSuccesses();  Double  n  =  getNumberOfSuccesses();  [CE]  variable  n  is  already  defined  in  method  getNumericalMean()  [FE]      AssertionError    [CONTEXT]    public  double  getNumericalMean()  {    [BUGGY]      double  n  =  getNumberOfSuccesses();  Double  n  =  getNumberOfSuccesses();  [BUGGY]    return  (double)  (getSampleSize()  *  getNumberOfSuccesses())  /  (double)  getPopulationSize();  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalMean  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	268	268	1	replace	        double    n    =    getNumberOfSuccesses();    Double  n  =  getNumberOfSuccesses();	  	non-compiled	[CE]  variable  n  is  already  defined  in  method  getNumericalMean()	10	None	add
5	[BUG]  [BUGGY]      double  n  =  getNumberOfSuccesses();  int  n  =  getNumberOfSuccesses();  [CE]  variable  n  is  already  defined  in  method  getNumericalMean()  [FE]        AssertionError    [CONTEXT]    public  double  getNumericalMean()  {    [BUGGY]      double  n  =  getNumberOfSuccesses();  int  n  =  getNumberOfSuccesses();  [BUGGY]    return  (double)  (getSampleSize()  *  getNumberOfSuccesses())  /  (double)  getPopulationSize();  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalMean  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	268	268	1	replace	        double    n    =    getNumberOfSuccesses();    int  n  =  getNumberOfSuccesses();	  	non-compiled	[CE]  variable  n  is  already  defined  in  method  getNumericalMean()	10	None	add
6	[BUG]  [BUGGY]  double  sampleSize  =  getNumberOfSuccesses();  [CE]  missing  return  statement  [FE]    AssertionError    [CONTEXT]    public  double  getNumericalMean()  {    [BUGGY]  double  sampleSize  =  getNumberOfSuccesses();  [BUGGY]    return  (double)  (getSampleSize()  *  getNumberOfSuccesses())  /  (double)  getPopulationSize();  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalMean  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	268	268	1	replace	double  sampleSize  =  getNumberOfSuccesses();	      int    sampleSize    =    getNumberOfSuccesses();    	non-compiled	[CE]  missing  return  statement	13	None	replace
7	[BUG]  [BUGGY]  int  sampleSize  =  getPopulationSize();  [CE]  missing  return  statement  [FE]      AssertionError    [CONTEXT]    public  double  getNumericalMean()  {    [BUGGY]  int  sampleSize  =  getPopulationSize();  [BUGGY]    return  (double)  (getSampleSize()  *  getNumberOfSuccesses())  /  (double)  getPopulationSize();  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalMean  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	268	268	1	replace	int  sampleSize  =  getPopulationSize();	      int    sampleSize    =    getNumberOfSuccesses();    	non-compiled	[CE]  missing  return  statement	13	None	replace
8	[BUG]  [BUGGY]      int  sampleSize  =  getSampleSize();  int  sampleSize  =  getSampleSize();  [CE]  variable  sampleSize  is  already  defined  in  method  getNumericalMean()  [FE]    AssertionError    [CONTEXT]    public  double  getNumericalMean()  {    [BUGGY]      int  sampleSize  =  getSampleSize();  int  sampleSize  =  getSampleSize();  [BUGGY]    return  (double)  (getSampleSize()  *  getNumberOfSuccesses())  /  (double)  getPopulationSize();  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalMean  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	268	268	1	replace	        int    sampleSize    =    getSampleSize();    int  sampleSize  =  getSampleSize();	  	non-compiled	[CE]  variable  sampleSize  is  already  defined  in  method  getNumericalMean()	8	None	add
9	[BUG]  [BUGGY]      int  sampleSize  =  getSampleSize();  Int  sampleSize  =  getSampleSize();  [CE]  cannot  find  symbol  [FE]      AssertionError    [CONTEXT]    public  double  getNumericalMean()  {    [BUGGY]      int  sampleSize  =  getSampleSize();  Int  sampleSize  =  getSampleSize();  [BUGGY]    return  (double)  (getSampleSize()  *  getNumberOfSuccesses())  /  (double)  getPopulationSize();  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalMean  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	268	268	1	replace	        int    sampleSize    =    getSampleSize();    Int  sampleSize  =  getSampleSize();	  	non-compiled	[CE]  cannot  find  symbol	8	None	add
10	[BUG]  [BUGGY]  return(double)(getNumberOfSuccesses()  *  getNumberOfSuccesses())/  (double)getPopulationSize();  (double)(getNumberOfSuccesses()  *  getNumberOfSuccesses())/  (double)getPopulationSize();  [CE]  not  a  statement  [FE]    AssertionError    [CONTEXT]    public  double  getNumericalMean()  {    [BUGGY]  return(double)(getNumberOfSuccesses()  *  getNumberOfSuccesses())/  (double)getPopulationSize();  (double)(getNumberOfSuccesses()  *  getNumberOfSuccesses())/  (double)getPopulationSize();  [BUGGY]    }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalMean  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	268	268	1	replace	return(double)(getNumberOfSuccesses()    *    getNumberOfSuccesses())/    (double)getPopulationSize();    (double)(getNumberOfSuccesses()  *  getNumberOfSuccesses())/  (double)getPopulationSize();	  	non-compiled	[CE]  not  a  statement	1	None	add
11	[BUG]  [BUGGY]  return(double)(getNumberOfSuccesses()  *  getNumberOfSuccesses())/  (double)getPopulationSize();  (double)(getNumberOfSuccesses()  *  getNumberOfSuccesses())/  (double)getPopulationSize());  [CE]  not  a  statement  [FE]      AssertionError    [CONTEXT]    public  double  getNumericalMean()  {    [BUGGY]  return(double)(getNumberOfSuccesses()  *  getNumberOfSuccesses())/  (double)getPopulationSize();  (double)(getNumberOfSuccesses()  *  getNumberOfSuccesses())/  (double)getPopulationSize());  [BUGGY]    }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalMean  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	268	268	1	replace	return(double)(getNumberOfSuccesses()    *    getNumberOfSuccesses())/    (double)getPopulationSize();    (double)(getNumberOfSuccesses()  *  getNumberOfSuccesses())/  (double)getPopulationSize());	  	non-compiled	[CE]  not  a  statement	1	None	add
12	[BUG]  [BUGGY]  double  numberOfSuccesses  =  getNumberOfSuccesses()  +  1;  [CE]  missing  return  statement  [FE]    AssertionError    [CONTEXT]    public  double  getNumericalMean()  {    [BUGGY]  double  numberOfSuccesses  =  getNumberOfSuccesses()  +  1;  [BUGGY]    return  (double)  (getSampleSize()  *  getNumberOfSuccesses())  /  (double)  getPopulationSize();  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalMean  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	268	268	1	replace	double  numberOfSuccesses  =  getNumberOfSuccesses()  +  1;	      double    numberOfSuccesses    =    getNumberOfSuccesses();    	non-compiled	[CE]  missing  return  statement	5	None	replace
13	[BUG]  [BUGGY]  double  n  =  getSampleSize();  [CE]  missing  return  statement  [FE]    AssertionError    [CONTEXT]    public  double  getNumericalMean()  {    [BUGGY]  double  n  =  getSampleSize();  [BUGGY]    return  (double)  (getSampleSize()  *  getNumberOfSuccesses())  /  (double)  getPopulationSize();  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalMean  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	268	268	1	replace	double  n  =  getSampleSize();	      double    n    =    getNumberOfSuccesses();    	non-compiled	[CE]  missing  return  statement	11	None	replace
14	[BUG]  [BUGGY]  double  n  =  getNumberOfSuccesses()  +  1;  [CE]  missing  return  statement  [FE]      AssertionError    [CONTEXT]    public  double  getNumericalMean()  {    [BUGGY]  double  n  =  getNumberOfSuccesses()  +  1;  [BUGGY]    return  (double)  (getSampleSize()  *  getNumberOfSuccesses())  /  (double)  getPopulationSize();  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalMean  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	268	268	1	replace	double  n  =  getNumberOfSuccesses()  +  1;	      double    n    =    getNumberOfSuccesses();    	non-compiled	[CE]  missing  return  statement	11	None	replace
15	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]          AssertionError    [CONTEXT]    public  double  getNumericalMean()  {    [BUGGY]  return  getNumberOfSuccesses();  [BUGGY]    }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalMean  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	268	268	1	add	return  getNumberOfSuccesses();	      	compilable	  [FE]  AssertionError  	3	3	replace
16	[BUG]  [BUGGY]  return  getNumberOfSuccesses();  [FE]  AssertionError  [FE]          AssertionError    [CONTEXT]    public  double  getNumericalMean()  {    [BUGGY]  return  getNumberOfSuccesses();  [BUGGY]    }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalMean  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	268	268	1	replace	return  getNumberOfSuccesses();	      	compilable	  [FE]  AssertionError  	3	3	replace
17	[BUG]  [BUGGY]  return  getNumberOfSuccesses().doubleValue();  [CE]  int  cannot  be  dereferenced  [FE]            AssertionError    [CONTEXT]    public  double  getNumericalMean()  {    [BUGGY]  return  getNumberOfSuccesses().doubleValue();  [BUGGY]    }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalMean  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	268	268	1	replace	return  getNumberOfSuccesses().doubleValue();	      	non-compiled	[CE]  int  cannot  be  dereferenced	3	None	replace
18	[BUG]  [BUGGY]  double  sampleSize  =  getPopulationSize();  [CE]  missing  return  statement  [FE]    AssertionError    [CONTEXT]    public  double  getNumericalMean()  {    [BUGGY]  double  sampleSize  =  getPopulationSize();  [BUGGY]    return  (double)  (getSampleSize()  *  getNumberOfSuccesses())  /  (double)  getPopulationSize();  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalMean  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	268	268	1	replace	double  sampleSize  =  getPopulationSize();	      double    sampleSize    =    getSampleSize();    	non-compiled	[CE]  missing  return  statement	7	None	replace
19	[BUG]  [BUGGY]      double  numberOfSuccesses  =  getNumberOfSuccesses();  double  numberOfSuccesses  =  getNumberOfSuccesses();  [CE]  variable  numberOfSuccesses  is  already  defined  in  method  getNumericalMean()  [FE]    AssertionError    [CONTEXT]    public  double  getNumericalMean()  {    [BUGGY]      double  numberOfSuccesses  =  getNumberOfSuccesses();  double  numberOfSuccesses  =  getNumberOfSuccesses();  [BUGGY]    return  (double)  (getSampleSize()  *  getNumberOfSuccesses())  /  (double)  getPopulationSize();  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalMean  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	268	268	1	replace	        double    numberOfSuccesses    =    getNumberOfSuccesses();    double  numberOfSuccesses  =  getNumberOfSuccesses();	  	non-compiled	[CE]  variable  numberOfSuccesses  is  already  defined  in  method  getNumericalMean()	4	None	add
20	[BUG]  [BUGGY]      double  numberOfSuccesses  =  getNumberOfSuccesses();  Double  numberOfSuccesses  =  getNumberOfSuccesses();  [CE]  variable  numberOfSuccesses  is  already  defined  in  method  getNumericalMean()  [FE]      AssertionError    [CONTEXT]    public  double  getNumericalMean()  {    [BUGGY]      double  numberOfSuccesses  =  getNumberOfSuccesses();  Double  numberOfSuccesses  =  getNumberOfSuccesses();  [BUGGY]    return  (double)  (getSampleSize()  *  getNumberOfSuccesses())  /  (double)  getPopulationSize();  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalMean  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	268	268	1	replace	        double    numberOfSuccesses    =    getNumberOfSuccesses();    Double  numberOfSuccesses  =  getNumberOfSuccesses();	  	non-compiled	[CE]  variable  numberOfSuccesses  is  already  defined  in  method  getNumericalMean()	4	None	add
21	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    public  double  getNumericalMean()  {    [BUGGY]  return(double)(getPopulationSize()  *  getNumberOfSuccesses())/  (double)getNumberOfSuccesses();  [BUGGY]    }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalMean  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	268	268	1	add	return(double)(getPopulationSize()  *  getNumberOfSuccesses())/  (double)getNumberOfSuccesses();	  return(double)(getNumberOfSuccesses()    *    getNumberOfSuccesses())/    (double)getPopulationSize();    	compilable	  [FE]  AssertionError  	2	4	replace
22	[BUG]  [BUGGY]  return(double)(getPopulationSize()  *  getNumberOfSuccesses())/  (double)getNumberOfSuccesses();  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    public  double  getNumericalMean()  {    [BUGGY]  return(double)(getPopulationSize()  *  getNumberOfSuccesses())/  (double)getNumberOfSuccesses();  [BUGGY]    }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalMean  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	268	268	1	replace	return(double)(getPopulationSize()  *  getNumberOfSuccesses())/  (double)getNumberOfSuccesses();	  return(double)(getNumberOfSuccesses()    *    getNumberOfSuccesses())/    (double)getPopulationSize();    	compilable	  [FE]  AssertionError  	2	4	replace
23	[BUG]  [BUGGY]  return(double)(getNumberOfSuccesses()  *  getNumberOfSuccesses())/  (double)getMeanSize();  [CE]  cannot  find  symbol  [FE]      AssertionError    [CONTEXT]    public  double  getNumericalMean()  {    [BUGGY]  return(double)(getNumberOfSuccesses()  *  getNumberOfSuccesses())/  (double)getMeanSize();  [BUGGY]    }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalMean  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	268	268	1	replace	return(double)(getNumberOfSuccesses()  *  getNumberOfSuccesses())/  (double)getMeanSize();	  return(double)(getNumberOfSuccesses()    *    getNumberOfSuccesses())/    (double)getPopulationSize();    	non-compiled	[CE]  cannot  find  symbol	2	None	replace
24	[BUG]  [BUGGY]      double  sampleSize  =  getSampleSize();  double  sampleSize  =  getSampleSize();  [CE]  variable  sampleSize  is  already  defined  in  method  getNumericalMean()  [FE]    AssertionError    [CONTEXT]    public  double  getNumericalMean()  {    [BUGGY]      double  sampleSize  =  getSampleSize();  double  sampleSize  =  getSampleSize();  [BUGGY]    return  (double)  (getSampleSize()  *  getNumberOfSuccesses())  /  (double)  getPopulationSize();  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalMean  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	268	268	1	replace	        double    sampleSize    =    getSampleSize();    double  sampleSize  =  getSampleSize();	  	non-compiled	[CE]  variable  sampleSize  is  already  defined  in  method  getNumericalMean()	6	None	add
25	[BUG]  [BUGGY]      double  sampleSize  =  getSampleSize();  Double  sampleSize  =  getSampleSize();  [CE]  variable  sampleSize  is  already  defined  in  method  getNumericalMean()  [FE]      AssertionError    [CONTEXT]    public  double  getNumericalMean()  {    [BUGGY]      double  sampleSize  =  getSampleSize();  Double  sampleSize  =  getSampleSize();  [BUGGY]    return  (double)  (getSampleSize()  *  getNumberOfSuccesses())  /  (double)  getPopulationSize();  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalMean  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	268	268	1	replace	        double    sampleSize    =    getSampleSize();    Double  sampleSize  =  getSampleSize();	  	non-compiled	[CE]  variable  sampleSize  is  already  defined  in  method  getNumericalMean()	6	None	add
26	[BUG]  [BUGGY]      int  sampleSize  =  getNumberOfSuccesses();  Int  sampleSize  =  getNumberOfSuccesses();  [CE]  cannot  find  symbol  [FE]    AssertionError    [CONTEXT]    public  double  getNumericalMean()  {    [BUGGY]      int  sampleSize  =  getNumberOfSuccesses();  Int  sampleSize  =  getNumberOfSuccesses();  [BUGGY]    return  (double)  (getSampleSize()  *  getNumberOfSuccesses())  /  (double)  getPopulationSize();  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalMean  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	268	268	1	replace	        int    sampleSize    =    getNumberOfSuccesses();    Int  sampleSize  =  getNumberOfSuccesses();	  	non-compiled	[CE]  cannot  find  symbol	12	None	add
27	[BUG]  [BUGGY]      double  numberOfSuccesses  =  getNumberOfSuccesses();  int  numberOfSuccesses  =  getNumberOfSuccesses();  [CE]  variable  numberOfSuccesses  is  already  defined  in  method  getNumericalMean()  [FE]    AssertionError    [CONTEXT]    public  double  getNumericalMean()  {    [BUGGY]      double  numberOfSuccesses  =  getNumberOfSuccesses();  int  numberOfSuccesses  =  getNumberOfSuccesses();  [BUGGY]    return  (double)  (getSampleSize()  *  getNumberOfSuccesses())  /  (double)  getPopulationSize();  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalMean  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	268	268	1	replace	        double    numberOfSuccesses    =    getNumberOfSuccesses();    int  numberOfSuccesses  =  getNumberOfSuccesses();	  	non-compiled	[CE]  variable  numberOfSuccesses  is  already  defined  in  method  getNumericalMean()	4	None	add
28	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]          AssertionError    [CONTEXT]    public  double  getNumericalMean()  {    [BUGGY]  return  this.numberOfSuccesses  -  getNumberOfSuccesses();  [BUGGY]    }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalMean  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	268	268	1	add	return  this.numberOfSuccesses  -  getNumberOfSuccesses();	      	compilable	  [FE]  AssertionError  	3	3	replace
29	[BUG]  [BUGGY]  return  this.numberOfSuccesses  -  getNumberOfSuccesses();  [FE]  AssertionError  [FE]          AssertionError    [CONTEXT]    public  double  getNumericalMean()  {    [BUGGY]  return  this.numberOfSuccesses  -  getNumberOfSuccesses();  [BUGGY]    }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalMean  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	268	268	1	replace	return  this.numberOfSuccesses  -  getNumberOfSuccesses();	      	compilable	  [FE]  AssertionError  	3	3	replace
30	[BUG]  [BUGGY]  return(double)(getNumberOfSuccesses()  *  getNumberOfSuccesses())/  (double)getPopulationSize();  return(double)(getNumberOfSuccesses()  *  getNumberOfSuccesses())/  (double)getPopulationSize();  [CE]  unreachable  statement  [FE]    AssertionError    [CONTEXT]    public  double  getNumericalMean()  {    [BUGGY]  return(double)(getNumberOfSuccesses()  *  getNumberOfSuccesses())/  (double)getPopulationSize();  return(double)(getNumberOfSuccesses()  *  getNumberOfSuccesses())/  (double)getPopulationSize();  [BUGGY]    }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalMean  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	268	268	1	replace	return(double)(getNumberOfSuccesses()    *    getNumberOfSuccesses())/    (double)getPopulationSize();    return(double)(getNumberOfSuccesses()  *  getNumberOfSuccesses())/  (double)getPopulationSize();	  	non-compiled	[CE]  unreachable  statement	1	None	add
31	[BUG]  [BUGGY]  return(double)(getNumberOfSuccesses()  *  getNumberOfSuccesses())/  (double)getPopulationSize();  double)(getNumberOfSuccesses()  *  getNumberOfSuccesses())/  (double)getPopulationSize();  [CE]  not  a  statement  [FE]      AssertionError    [CONTEXT]    public  double  getNumericalMean()  {    [BUGGY]  return(double)(getNumberOfSuccesses()  *  getNumberOfSuccesses())/  (double)getPopulationSize();  double)(getNumberOfSuccesses()  *  getNumberOfSuccesses())/  (double)getPopulationSize();  [BUGGY]    }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalMean  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	268	268	1	replace	return(double)(getNumberOfSuccesses()    *    getNumberOfSuccesses())/    (double)getPopulationSize();    double)(getNumberOfSuccesses()  *  getNumberOfSuccesses())/  (double)getPopulationSize();	  	non-compiled	[CE]  not  a  statement	1	None	add
32	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    public  double  getNumericalMean()  {    [BUGGY]      double  numberOfSuccesses  =  getNumberOfSuccesses();  int  sampleSize  =  getSampleSize();  [BUGGY]    return  (double)  (getSampleSize()  *  getNumberOfSuccesses())  /  (double)  getPopulationSize();  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalMean  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	268	268	1	add	        double    numberOfSuccesses    =    getNumberOfSuccesses();    int  sampleSize  =  getSampleSize();	  	compilable	  [FE]  AssertionError  	4	1	add
33	[BUG]  [BUGGY]      double  numberOfSuccesses  =  getNumberOfSuccesses();  int  sampleSize  =  getSampleSize();  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    public  double  getNumericalMean()  {    [BUGGY]      double  numberOfSuccesses  =  getNumberOfSuccesses();  int  sampleSize  =  getSampleSize();  [BUGGY]    return  (double)  (getSampleSize()  *  getNumberOfSuccesses())  /  (double)  getPopulationSize();  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalMean  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	268	268	1	replace	        double    numberOfSuccesses    =    getNumberOfSuccesses();    int  sampleSize  =  getSampleSize();	  	compilable	  [FE]  AssertionError  	4	1	add
34	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    public  double  getNumericalMean()  {    [BUGGY]  return(double)(getNumberOfSuccesses()  *  getNumberOfSuccesses())/  (double)getSampleSize();  [BUGGY]    }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalMean  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	268	268	1	add	return(double)(getNumberOfSuccesses()  *  getNumberOfSuccesses())/  (double)getSampleSize();	  return(double)(getNumberOfSuccesses()    *    getNumberOfSuccesses())/    (double)getPopulationSize();    	compilable	  [FE]  AssertionError  	2	4	replace
35	[BUG]  [BUGGY]  return(double)(getNumberOfSuccesses()  *  getNumberOfSuccesses())/  (double)getSampleSize();  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    public  double  getNumericalMean()  {    [BUGGY]  return(double)(getNumberOfSuccesses()  *  getNumberOfSuccesses())/  (double)getSampleSize();  [BUGGY]    }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalMean  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	268	268	1	replace	return(double)(getNumberOfSuccesses()  *  getNumberOfSuccesses())/  (double)getSampleSize();	  return(double)(getNumberOfSuccesses()    *    getNumberOfSuccesses())/    (double)getPopulationSize();    	compilable	  [FE]  AssertionError  	2	4	replace
36	[BUG]  [BUGGY]  return  this.numberOfSuccesses?  getNumberOfSuccesses()  :  numberOfSuccesses;  [CE]  incompatible  types  [FE]          AssertionError    [CONTEXT]    public  double  getNumericalMean()  {    [BUGGY]  return  this.numberOfSuccesses?  getNumberOfSuccesses()  :  numberOfSuccesses;  [BUGGY]    }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalMean  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	268	268	1	replace	return  this.numberOfSuccesses?  getNumberOfSuccesses()  :  numberOfSuccesses;	      	non-compiled	[CE]  incompatible  types	3	None	replace
