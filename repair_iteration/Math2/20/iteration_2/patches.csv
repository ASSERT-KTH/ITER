bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  RandomGenerator  rng  =(RandomGenerator)this.numbers.get(1);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      throws  NotPositiveException,  NotStrictlyPositiveException,  NumberIsTooLargeException  {  super(rng);      [BUGGY]  RandomGenerator  rng  =(RandomGenerator)this.numbers.get(1);  [BUGGY]      if  (populationSize  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.POPULATION_SIZE,  populationSize);  }  if  (numberOfSuccesses  <  0)  {  throw  new  NotPositiveException(LocalizedFormats.NUMBER_OF_SUCCESSES,  numberOfSuccesses);  }  if  (sampleSize  <  0)  {  throw  new  NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,  sampleSize);  [CLASS]  HypergeometricDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,int,int,int)  RandomGenerator  rng  int  populationSize  int  numberOfSuccesses  int  sampleSize  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  long  serialVersionUID  int  numberOfSuccesses  populationSize  sampleSize  RandomGenerator  rng  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.25	86	86	1	replace	RandomGenerator  rng  =(RandomGenerator)this.numbers.get(1);	  RandomGenerator    rng    =(RandomGenerator)this.numbers.get(0);    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
2	[BUG]  [BUGGY]  RandomGenerator  rng  =(RandomGenerator)super.getValue(populationSize);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      throws  NotPositiveException,  NotStrictlyPositiveException,  NumberIsTooLargeException  {  super(rng);      [BUGGY]  RandomGenerator  rng  =(RandomGenerator)super.getValue(populationSize);  [BUGGY]      if  (populationSize  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.POPULATION_SIZE,  populationSize);  }  if  (numberOfSuccesses  <  0)  {  throw  new  NotPositiveException(LocalizedFormats.NUMBER_OF_SUCCESSES,  numberOfSuccesses);  }  if  (sampleSize  <  0)  {  throw  new  NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,  sampleSize);  [CLASS]  HypergeometricDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,int,int,int)  RandomGenerator  rng  int  populationSize  int  numberOfSuccesses  int  sampleSize  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  long  serialVersionUID  int  numberOfSuccesses  populationSize  sampleSize  RandomGenerator  rng  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.25	86	86	1	replace	RandomGenerator  rng  =(RandomGenerator)super.getValue(populationSize);	  RandomGenerator    rng    =(RandomGenerator)super.getValue(numberOfSuccesses);    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
3	[BUG]  [BUGGY]  RandomGenerator  rng  =(RandomGenerator)super.getValue(numberOfSuccesses  +  1);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      throws  NotPositiveException,  NotStrictlyPositiveException,  NumberIsTooLargeException  {  super(rng);      [BUGGY]  RandomGenerator  rng  =(RandomGenerator)super.getValue(numberOfSuccesses  +  1);  [BUGGY]      if  (populationSize  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.POPULATION_SIZE,  populationSize);  }  if  (numberOfSuccesses  <  0)  {  throw  new  NotPositiveException(LocalizedFormats.NUMBER_OF_SUCCESSES,  numberOfSuccesses);  }  if  (sampleSize  <  0)  {  throw  new  NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,  sampleSize);  [CLASS]  HypergeometricDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,int,int,int)  RandomGenerator  rng  int  populationSize  int  numberOfSuccesses  int  sampleSize  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  long  serialVersionUID  int  numberOfSuccesses  populationSize  sampleSize  RandomGenerator  rng  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.25	86	86	1	replace	RandomGenerator  rng  =(RandomGenerator)super.getValue(numberOfSuccesses  +  1);	  RandomGenerator    rng    =(RandomGenerator)super.getValue(numberOfSuccesses);    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
4	[BUG]  [BUGGY]  int  populationSize  =  rng.getSampleSize(numberOfSuccesses,  sampleSize);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      throws  NotPositiveException,  NotStrictlyPositiveException,  NumberIsTooLargeException  {  super(rng);      [BUGGY]  int  populationSize  =  rng.getSampleSize(numberOfSuccesses,  sampleSize);  [BUGGY]      if  (populationSize  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.POPULATION_SIZE,  populationSize);  }  if  (numberOfSuccesses  <  0)  {  throw  new  NotPositiveException(LocalizedFormats.NUMBER_OF_SUCCESSES,  numberOfSuccesses);  }  if  (sampleSize  <  0)  {  throw  new  NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,  sampleSize);  [CLASS]  HypergeometricDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,int,int,int)  RandomGenerator  rng  int  populationSize  int  numberOfSuccesses  int  sampleSize  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  long  serialVersionUID  int  numberOfSuccesses  populationSize  sampleSize  RandomGenerator  rng  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.25	86	86	1	replace	int  populationSize  =  rng.getSampleSize(numberOfSuccesses,  sampleSize);	  int    populationSize    =    rng.getSampleSize(numberOfSuccesses);    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
5	[BUG]  [BUGGY]  int  populationSize  =  rng.getSampleSize(sampleSize);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      throws  NotPositiveException,  NotStrictlyPositiveException,  NumberIsTooLargeException  {  super(rng);      [BUGGY]  int  populationSize  =  rng.getSampleSize(sampleSize);  [BUGGY]      if  (populationSize  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.POPULATION_SIZE,  populationSize);  }  if  (numberOfSuccesses  <  0)  {  throw  new  NotPositiveException(LocalizedFormats.NUMBER_OF_SUCCESSES,  numberOfSuccesses);  }  if  (sampleSize  <  0)  {  throw  new  NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,  sampleSize);  [CLASS]  HypergeometricDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,int,int,int)  RandomGenerator  rng  int  populationSize  int  numberOfSuccesses  int  sampleSize  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  long  serialVersionUID  int  numberOfSuccesses  populationSize  sampleSize  RandomGenerator  rng  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.25	86	86	1	replace	int  populationSize  =  rng.getSampleSize(sampleSize);	  int    populationSize    =    rng.getSampleSize(numberOfSuccesses);    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
6	[BUG]  [BUGGY]  RandomGenerator  rng  =(RandomGenerator)super.getValue(variance,  numberOfSuccesses);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      throws  NotPositiveException,  NotStrictlyPositiveException,  NumberIsTooLargeException  {  super(rng);      [BUGGY]  RandomGenerator  rng  =(RandomGenerator)super.getValue(variance,  numberOfSuccesses);  [BUGGY]      if  (populationSize  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.POPULATION_SIZE,  populationSize);  }  if  (numberOfSuccesses  <  0)  {  throw  new  NotPositiveException(LocalizedFormats.NUMBER_OF_SUCCESSES,  numberOfSuccesses);  }  if  (sampleSize  <  0)  {  throw  new  NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,  sampleSize);  [CLASS]  HypergeometricDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,int,int,int)  RandomGenerator  rng  int  populationSize  int  numberOfSuccesses  int  sampleSize  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  long  serialVersionUID  int  numberOfSuccesses  populationSize  sampleSize  RandomGenerator  rng  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.25	86	86	1	replace	RandomGenerator  rng  =(RandomGenerator)super.getValue(variance,  numberOfSuccesses);	  RandomGenerator    rng    =(RandomGenerator)super.getValue(variance);    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
7	[BUG]  [BUGGY]  RandomGenerator  rng  =(RandomGenerator)super.getValue(null,  null);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      throws  NotPositiveException,  NotStrictlyPositiveException,  NumberIsTooLargeException  {  super(rng);      [BUGGY]  RandomGenerator  rng  =(RandomGenerator)super.getValue(null,  null);  [BUGGY]      if  (populationSize  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.POPULATION_SIZE,  populationSize);  }  if  (numberOfSuccesses  <  0)  {  throw  new  NotPositiveException(LocalizedFormats.NUMBER_OF_SUCCESSES,  numberOfSuccesses);  }  if  (sampleSize  <  0)  {  throw  new  NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,  sampleSize);  [CLASS]  HypergeometricDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,int,int,int)  RandomGenerator  rng  int  populationSize  int  numberOfSuccesses  int  sampleSize  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  long  serialVersionUID  int  numberOfSuccesses  populationSize  sampleSize  RandomGenerator  rng  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.25	86	86	1	replace	RandomGenerator  rng  =(RandomGenerator)super.getValue(null,  null);	  RandomGenerator    rng    =(RandomGenerator)super.getValue(null);    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
8	[BUG]  [BUGGY]  RandomGenerator  rng  =(RandomGenerator)super.getValue(null,  numberOfSuccesses);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      throws  NotPositiveException,  NotStrictlyPositiveException,  NumberIsTooLargeException  {  super(rng);      [BUGGY]  RandomGenerator  rng  =(RandomGenerator)super.getValue(null,  numberOfSuccesses);  [BUGGY]      if  (populationSize  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.POPULATION_SIZE,  populationSize);  }  if  (numberOfSuccesses  <  0)  {  throw  new  NotPositiveException(LocalizedFormats.NUMBER_OF_SUCCESSES,  numberOfSuccesses);  }  if  (sampleSize  <  0)  {  throw  new  NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,  sampleSize);  [CLASS]  HypergeometricDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,int,int,int)  RandomGenerator  rng  int  populationSize  int  numberOfSuccesses  int  sampleSize  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  long  serialVersionUID  int  numberOfSuccesses  populationSize  sampleSize  RandomGenerator  rng  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.25	86	86	1	replace	RandomGenerator  rng  =(RandomGenerator)super.getValue(null,  numberOfSuccesses);	  RandomGenerator    rng    =(RandomGenerator)super.getValue(null);    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
9	[BUG]  [BUGGY]  if  (populationSize  <  1)  {  if  (populationSize  <  1)  {  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]      throws  NotPositiveException,  NotStrictlyPositiveException,  NumberIsTooLargeException  {  super(rng);      [BUGGY]  if  (populationSize  <  1)  {  if  (populationSize  <  1)  {  [BUGGY]      throw  new  NotStrictlyPositiveException(LocalizedFormats.POPULATION_SIZE,  populationSize);  }  if  (numberOfSuccesses  <  0)  {  throw  new  NotPositiveException(LocalizedFormats.NUMBER_OF_SUCCESSES,  numberOfSuccesses);  }  if  (sampleSize  <  0)  {  throw  new  NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,  sampleSize);  [CLASS]  HypergeometricDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,int,int,int)  RandomGenerator  rng  int  populationSize  int  numberOfSuccesses  int  sampleSize  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  long  serialVersionUID  int  numberOfSuccesses  populationSize  sampleSize  RandomGenerator  rng  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.25	86	86	1	replace	if    (populationSize    <    1)    {    if  (populationSize  <  1)  {	  	non-compiled	[CE]  illegal  start  of  expression	6	None	add
10	[BUG]  [BUGGY]  if  (populationSize  <  1)  {  If  (populationSize  <  1)  {  [CE]  ';'  expected  [FE]      AssertionError    [CONTEXT]      throws  NotPositiveException,  NotStrictlyPositiveException,  NumberIsTooLargeException  {  super(rng);      [BUGGY]  if  (populationSize  <  1)  {  If  (populationSize  <  1)  {  [BUGGY]      throw  new  NotStrictlyPositiveException(LocalizedFormats.POPULATION_SIZE,  populationSize);  }  if  (numberOfSuccesses  <  0)  {  throw  new  NotPositiveException(LocalizedFormats.NUMBER_OF_SUCCESSES,  numberOfSuccesses);  }  if  (sampleSize  <  0)  {  throw  new  NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,  sampleSize);  [CLASS]  HypergeometricDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,int,int,int)  RandomGenerator  rng  int  populationSize  int  numberOfSuccesses  int  sampleSize  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  long  serialVersionUID  int  numberOfSuccesses  populationSize  sampleSize  RandomGenerator  rng  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.25	86	86	1	replace	if    (populationSize    <    1)    {    If  (populationSize  <  1)  {	  	non-compiled	[CE]  ';'  expected	6	None	add
11	[BUG]  [BUGGY]  RandomGenerator  rng  =  new  RandomGenerator(numberOfSuccesses,  sampleSize);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      throws  NotPositiveException,  NotStrictlyPositiveException,  NumberIsTooLargeException  {  super(rng);      [BUGGY]  RandomGenerator  rng  =  new  RandomGenerator(numberOfSuccesses,  sampleSize);  [BUGGY]      throw  new  NotStrictlyPositiveException(LocalizedFormats.POPULATION_SIZE,  populationSize);  }  if  (numberOfSuccesses  <  0)  {  throw  new  NotPositiveException(LocalizedFormats.NUMBER_OF_SUCCESSES,  numberOfSuccesses);  }  if  (sampleSize  <  0)  {  throw  new  NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,  sampleSize);  [CLASS]  HypergeometricDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,int,int,int)  RandomGenerator  rng  int  populationSize  int  numberOfSuccesses  int  sampleSize  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  long  serialVersionUID  int  numberOfSuccesses  populationSize  sampleSize  RandomGenerator  rng  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.25	86	86	1	replace	RandomGenerator  rng  =  new  RandomGenerator(numberOfSuccesses,  sampleSize);	  RandomGenerator    rng    =    new    RandomGenerator(sampleSize,    numberOfSuccesses);    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
12	[BUG]  [BUGGY]  RandomGenerator  rng  =  new  RandomGenerator(populationSize,  numberOfSuccesses);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      throws  NotPositiveException,  NotStrictlyPositiveException,  NumberIsTooLargeException  {  super(rng);      [BUGGY]  RandomGenerator  rng  =  new  RandomGenerator(populationSize,  numberOfSuccesses);  [BUGGY]      throw  new  NotStrictlyPositiveException(LocalizedFormats.POPULATION_SIZE,  populationSize);  }  if  (numberOfSuccesses  <  0)  {  throw  new  NotPositiveException(LocalizedFormats.NUMBER_OF_SUCCESSES,  numberOfSuccesses);  }  if  (sampleSize  <  0)  {  throw  new  NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,  sampleSize);  [CLASS]  HypergeometricDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,int,int,int)  RandomGenerator  rng  int  populationSize  int  numberOfSuccesses  int  sampleSize  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  long  serialVersionUID  int  numberOfSuccesses  populationSize  sampleSize  RandomGenerator  rng  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.25	86	86	1	replace	RandomGenerator  rng  =  new  RandomGenerator(populationSize,  numberOfSuccesses);	  RandomGenerator    rng    =    new    RandomGenerator(sampleSize,    numberOfSuccesses);    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
13	[BUG]  [BUGGY]  RandomGenerator  rng  =(RandomGenerator)super.getNumberOfSuccesses()  +  1;  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      throws  NotPositiveException,  NotStrictlyPositiveException,  NumberIsTooLargeException  {  super(rng);      [BUGGY]  RandomGenerator  rng  =(RandomGenerator)super.getNumberOfSuccesses()  +  1;  [BUGGY]      throw  new  NotStrictlyPositiveException(LocalizedFormats.POPULATION_SIZE,  populationSize);  }  if  (numberOfSuccesses  <  0)  {  throw  new  NotPositiveException(LocalizedFormats.NUMBER_OF_SUCCESSES,  numberOfSuccesses);  }  if  (sampleSize  <  0)  {  throw  new  NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,  sampleSize);  [CLASS]  HypergeometricDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,int,int,int)  RandomGenerator  rng  int  populationSize  int  numberOfSuccesses  int  sampleSize  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  long  serialVersionUID  int  numberOfSuccesses  populationSize  sampleSize  RandomGenerator  rng  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.25	86	86	1	replace	RandomGenerator  rng  =(RandomGenerator)super.getNumberOfSuccesses()  +  1;	  RandomGenerator    rng    =(RandomGenerator)super.getNumberOfSuccesses();    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
14	[BUG]  [BUGGY]  RandomGenerator  rng  =(RandomGenerator)this.super.getRandomGenerator();  [CE]  '('  expected  [FE]            AssertionError      [CONTEXT]      throws  NotPositiveException,  NotStrictlyPositiveException,  NumberIsTooLargeException  {  super(rng);      [BUGGY]  RandomGenerator  rng  =(RandomGenerator)this.super.getRandomGenerator();  [BUGGY]      if  (populationSize  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.POPULATION_SIZE,  populationSize);  }  if  (numberOfSuccesses  <  0)  {  throw  new  NotPositiveException(LocalizedFormats.NUMBER_OF_SUCCESSES,  numberOfSuccesses);  }  if  (sampleSize  <  0)  {  throw  new  NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,  sampleSize);  [CLASS]  HypergeometricDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,int,int,int)  RandomGenerator  rng  int  populationSize  int  numberOfSuccesses  int  sampleSize  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  long  serialVersionUID  int  numberOfSuccesses  populationSize  sampleSize  RandomGenerator  rng  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.25	86	86	1	replace	RandomGenerator  rng  =(RandomGenerator)this.super.getRandomGenerator();	  RandomGenerator    rng    =(RandomGenerator)this.super.getDataResolver();    	non-compiled	[CE]  '('  expected	8	None	replace
15	[BUG]  [BUGGY]  int  numberOfSuccesses  =  rng.getNumberOfSuccesses()  +  1;  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      throws  NotPositiveException,  NotStrictlyPositiveException,  NumberIsTooLargeException  {  super(rng);      [BUGGY]  int  numberOfSuccesses  =  rng.getNumberOfSuccesses()  +  1;  [BUGGY]      throw  new  NotStrictlyPositiveException(LocalizedFormats.POPULATION_SIZE,  populationSize);  }  if  (numberOfSuccesses  <  0)  {  throw  new  NotPositiveException(LocalizedFormats.NUMBER_OF_SUCCESSES,  numberOfSuccesses);  }  if  (sampleSize  <  0)  {  throw  new  NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,  sampleSize);  [CLASS]  HypergeometricDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,int,int,int)  RandomGenerator  rng  int  populationSize  int  numberOfSuccesses  int  sampleSize  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  long  serialVersionUID  int  numberOfSuccesses  populationSize  sampleSize  RandomGenerator  rng  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.25	86	86	1	replace	int  numberOfSuccesses  =  rng.getNumberOfSuccesses()  +  1;	  int    numberOfSuccesses    =    rng.getNumberOfSuccesses();    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
16	[BUG]  [BUGGY]  RandomGenerator  rng  =(RandomGenerator)this.numberOfSuccesses;  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      throws  NotPositiveException,  NotStrictlyPositiveException,  NumberIsTooLargeException  {  super(rng);      [BUGGY]  RandomGenerator  rng  =(RandomGenerator)this.numberOfSuccesses;  [BUGGY]      if  (populationSize  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.POPULATION_SIZE,  populationSize);  }  if  (numberOfSuccesses  <  0)  {  throw  new  NotPositiveException(LocalizedFormats.NUMBER_OF_SUCCESSES,  numberOfSuccesses);  }  if  (sampleSize  <  0)  {  throw  new  NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,  sampleSize);  [CLASS]  HypergeometricDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,int,int,int)  RandomGenerator  rng  int  populationSize  int  numberOfSuccesses  int  sampleSize  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  long  serialVersionUID  int  numberOfSuccesses  populationSize  sampleSize  RandomGenerator  rng  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.25	86	86	1	replace	RandomGenerator  rng  =(RandomGenerator)this.numberOfSuccesses;	  RandomGenerator    rng    =(RandomGenerator)this;    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
17	[BUG]  [BUGGY]  RandomGenerator  rng  =(RandomGenerator)this.super.clone();  [CE]  '('  expected  [FE]              AssertionError      [CONTEXT]      throws  NotPositiveException,  NotStrictlyPositiveException,  NumberIsTooLargeException  {  super(rng);      [BUGGY]  RandomGenerator  rng  =(RandomGenerator)this.super.clone();  [BUGGY]      if  (populationSize  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.POPULATION_SIZE,  populationSize);  }  if  (numberOfSuccesses  <  0)  {  throw  new  NotPositiveException(LocalizedFormats.NUMBER_OF_SUCCESSES,  numberOfSuccesses);  }  if  (sampleSize  <  0)  {  throw  new  NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,  sampleSize);  [CLASS]  HypergeometricDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,int,int,int)  RandomGenerator  rng  int  populationSize  int  numberOfSuccesses  int  sampleSize  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  long  serialVersionUID  int  numberOfSuccesses  populationSize  sampleSize  RandomGenerator  rng  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.25	86	86	1	replace	RandomGenerator  rng  =(RandomGenerator)this.super.clone();	  RandomGenerator    rng    =(RandomGenerator)this.super.getValue();    	non-compiled	[CE]  '('  expected	13	None	replace
18	[BUG]  [BUGGY]  RandomGenerator  rng  =(RandomGenerator)super.getNumberOfSuccesses(0);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      throws  NotPositiveException,  NotStrictlyPositiveException,  NumberIsTooLargeException  {  super(rng);      [BUGGY]  RandomGenerator  rng  =(RandomGenerator)super.getNumberOfSuccesses(0);  [BUGGY]      throw  new  NotStrictlyPositiveException(LocalizedFormats.POPULATION_SIZE,  populationSize);  }  if  (numberOfSuccesses  <  0)  {  throw  new  NotPositiveException(LocalizedFormats.NUMBER_OF_SUCCESSES,  numberOfSuccesses);  }  if  (sampleSize  <  0)  {  throw  new  NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,  sampleSize);  [CLASS]  HypergeometricDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,int,int,int)  RandomGenerator  rng  int  populationSize  int  numberOfSuccesses  int  sampleSize  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  long  serialVersionUID  int  numberOfSuccesses  populationSize  sampleSize  RandomGenerator  rng  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.25	86	86	1	replace	RandomGenerator  rng  =(RandomGenerator)super.getNumberOfSuccesses(0);	  RandomGenerator    rng    =(RandomGenerator)super.getNumberOfSuccesses();    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
19	[BUG]  [BUGGY]  RandomGenerator  rng  =(RandomGenerator)this.super.resolver();  [CE]  '('  expected  [FE]            AssertionError      [CONTEXT]      throws  NotPositiveException,  NotStrictlyPositiveException,  NumberIsTooLargeException  {  super(rng);      [BUGGY]  RandomGenerator  rng  =(RandomGenerator)this.super.resolver();  [BUGGY]      if  (populationSize  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.POPULATION_SIZE,  populationSize);  }  if  (numberOfSuccesses  <  0)  {  throw  new  NotPositiveException(LocalizedFormats.NUMBER_OF_SUCCESSES,  numberOfSuccesses);  }  if  (sampleSize  <  0)  {  throw  new  NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,  sampleSize);  [CLASS]  HypergeometricDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,int,int,int)  RandomGenerator  rng  int  populationSize  int  numberOfSuccesses  int  sampleSize  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  long  serialVersionUID  int  numberOfSuccesses  populationSize  sampleSize  RandomGenerator  rng  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.25	86	86	1	replace	RandomGenerator  rng  =(RandomGenerator)this.super.resolver();	  RandomGenerator    rng    =(RandomGenerator)this.super.getDataResolver();    	non-compiled	[CE]  '('  expected	8	None	replace
20	[BUG]  [BUGGY]  int  populationSize  =  randomGenerator.getSampleSize(numberOfSuccesses);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      throws  NotPositiveException,  NotStrictlyPositiveException,  NumberIsTooLargeException  {  super(rng);      [BUGGY]  int  populationSize  =  randomGenerator.getSampleSize(numberOfSuccesses);  [BUGGY]      if  (populationSize  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.POPULATION_SIZE,  populationSize);  }  if  (numberOfSuccesses  <  0)  {  throw  new  NotPositiveException(LocalizedFormats.NUMBER_OF_SUCCESSES,  numberOfSuccesses);  }  if  (sampleSize  <  0)  {  throw  new  NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,  sampleSize);  [CLASS]  HypergeometricDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,int,int,int)  RandomGenerator  rng  int  populationSize  int  numberOfSuccesses  int  sampleSize  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  long  serialVersionUID  int  numberOfSuccesses  populationSize  sampleSize  RandomGenerator  rng  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.25	86	86	1	replace	int  populationSize  =  randomGenerator.getSampleSize(numberOfSuccesses);	  int    populationSize    =    rng.getSampleSize(numberOfSuccesses);    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
21	[BUG]  [BUGGY]  RandomGenerator  rng  =(RandomGenerator)this.super.getValue()  +  1;  [CE]  '('  expected  [FE]              AssertionError      [CONTEXT]      throws  NotPositiveException,  NotStrictlyPositiveException,  NumberIsTooLargeException  {  super(rng);      [BUGGY]  RandomGenerator  rng  =(RandomGenerator)this.super.getValue()  +  1;  [BUGGY]      if  (populationSize  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.POPULATION_SIZE,  populationSize);  }  if  (numberOfSuccesses  <  0)  {  throw  new  NotPositiveException(LocalizedFormats.NUMBER_OF_SUCCESSES,  numberOfSuccesses);  }  if  (sampleSize  <  0)  {  throw  new  NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,  sampleSize);  [CLASS]  HypergeometricDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,int,int,int)  RandomGenerator  rng  int  populationSize  int  numberOfSuccesses  int  sampleSize  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  long  serialVersionUID  int  numberOfSuccesses  populationSize  sampleSize  RandomGenerator  rng  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.25	86	86	1	replace	RandomGenerator  rng  =(RandomGenerator)this.super.getValue()  +  1;	  RandomGenerator    rng    =(RandomGenerator)this.super.getValue();    	non-compiled	[CE]  '('  expected	13	None	replace
22	[BUG]  [BUGGY]  if(populationSize  <  =  0)  {  If  (populationSize  <  =  0)  {  [CE]  illegal  start  of  expression  [FE]          NumberIsTooLargeException      [CONTEXT]      throws  NotPositiveException,  NotStrictlyPositiveException,  NumberIsTooLargeException  {  super(rng);      [BUGGY]  if(populationSize  <  =  0)  {  If  (populationSize  <  =  0)  {  [BUGGY]      throw  new  NotStrictlyPositiveException(LocalizedFormats.POPULATION_SIZE,  populationSize);  }  if  (numberOfSuccesses  <  0)  {  throw  new  NotPositiveException(LocalizedFormats.NUMBER_OF_SUCCESSES,  numberOfSuccesses);  }  if  (sampleSize  <  0)  {  throw  new  NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,  sampleSize);  [CLASS]  HypergeometricDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,int,int,int)  RandomGenerator  rng  int  populationSize  int  numberOfSuccesses  int  sampleSize  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  long  serialVersionUID  int  numberOfSuccesses  populationSize  sampleSize  RandomGenerator  rng  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.25	86	86	1	replace	if(populationSize  <  =  0)  {  If  (populationSize  <  =  0)  {	  if    (populationSize    <    0)    {    If    (populationSize    <    0)    {    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
23	[BUG]  [BUGGY]  if  (populationSize  <  =  0)  {  If  (populationSize  <  0)  {  [CE]  illegal  start  of  expression  [FE]            NumberIsTooLargeException      [CONTEXT]      throws  NotPositiveException,  NotStrictlyPositiveException,  NumberIsTooLargeException  {  super(rng);      [BUGGY]  if  (populationSize  <  =  0)  {  If  (populationSize  <  0)  {  [BUGGY]      throw  new  NotStrictlyPositiveException(LocalizedFormats.POPULATION_SIZE,  populationSize);  }  if  (numberOfSuccesses  <  0)  {  throw  new  NotPositiveException(LocalizedFormats.NUMBER_OF_SUCCESSES,  numberOfSuccesses);  }  if  (sampleSize  <  0)  {  throw  new  NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,  sampleSize);  [CLASS]  HypergeometricDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,int,int,int)  RandomGenerator  rng  int  populationSize  int  numberOfSuccesses  int  sampleSize  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  long  serialVersionUID  int  numberOfSuccesses  populationSize  sampleSize  RandomGenerator  rng  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.25	86	86	1	replace	if  (populationSize  <  =  0)  {  If  (populationSize  <  0)  {	  if    (populationSize    <    0)    {    If    (populationSize    <    0)    {    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
24	[BUG]  [BUGGY]  RandomGenerator  rng  =(RandomGenerator)this.super.getData();  [CE]  '('  expected  [FE]              AssertionError      [CONTEXT]      throws  NotPositiveException,  NotStrictlyPositiveException,  NumberIsTooLargeException  {  super(rng);      [BUGGY]  RandomGenerator  rng  =(RandomGenerator)this.super.getData();  [BUGGY]      if  (populationSize  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.POPULATION_SIZE,  populationSize);  }  if  (numberOfSuccesses  <  0)  {  throw  new  NotPositiveException(LocalizedFormats.NUMBER_OF_SUCCESSES,  numberOfSuccesses);  }  if  (sampleSize  <  0)  {  throw  new  NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,  sampleSize);  [CLASS]  HypergeometricDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,int,int,int)  RandomGenerator  rng  int  populationSize  int  numberOfSuccesses  int  sampleSize  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  long  serialVersionUID  int  numberOfSuccesses  populationSize  sampleSize  RandomGenerator  rng  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.25	86	86	1	replace	RandomGenerator  rng  =(RandomGenerator)this.super.getData();	  RandomGenerator    rng    =(RandomGenerator)this.super.getValue();    	non-compiled	[CE]  '('  expected	13	None	replace
25	[BUG]  [BUGGY]  RandomGenerator  rng  =(RandomGenerator)this.super.getNumberOfSuccesses();  [CE]  '('  expected  [FE]                AssertionError      [CONTEXT]      throws  NotPositiveException,  NotStrictlyPositiveException,  NumberIsTooLargeException  {  super(rng);      [BUGGY]  RandomGenerator  rng  =(RandomGenerator)this.super.getNumberOfSuccesses();  [BUGGY]      throw  new  NotStrictlyPositiveException(LocalizedFormats.POPULATION_SIZE,  populationSize);  }  if  (numberOfSuccesses  <  0)  {  throw  new  NotPositiveException(LocalizedFormats.NUMBER_OF_SUCCESSES,  numberOfSuccesses);  }  if  (sampleSize  <  0)  {  throw  new  NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,  sampleSize);  [CLASS]  HypergeometricDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,int,int,int)  RandomGenerator  rng  int  populationSize  int  numberOfSuccesses  int  sampleSize  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  long  serialVersionUID  int  numberOfSuccesses  populationSize  sampleSize  RandomGenerator  rng  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.25	86	86	1	replace	RandomGenerator  rng  =(RandomGenerator)this.super.getNumberOfSuccesses();	  RandomGenerator    rng    =(RandomGenerator)super.getNumberOfSuccesses();    	non-compiled	[CE]  '('  expected	14	None	replace
26	[BUG]  [BUGGY]  RandomGenerator  rng  =(RandomGenerator)super.getValue(numberOfSuccesses,  numberOfSuccesses);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      throws  NotPositiveException,  NotStrictlyPositiveException,  NumberIsTooLargeException  {  super(rng);      [BUGGY]  RandomGenerator  rng  =(RandomGenerator)super.getValue(numberOfSuccesses,  numberOfSuccesses);  [BUGGY]      if  (populationSize  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.POPULATION_SIZE,  populationSize);  }  if  (numberOfSuccesses  <  0)  {  throw  new  NotPositiveException(LocalizedFormats.NUMBER_OF_SUCCESSES,  numberOfSuccesses);  }  if  (sampleSize  <  0)  {  throw  new  NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,  sampleSize);  [CLASS]  HypergeometricDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,int,int,int)  RandomGenerator  rng  int  populationSize  int  numberOfSuccesses  int  sampleSize  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  long  serialVersionUID  int  numberOfSuccesses  populationSize  sampleSize  RandomGenerator  rng  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.25	86	86	1	replace	RandomGenerator  rng  =(RandomGenerator)super.getValue(numberOfSuccesses,  numberOfSuccesses);	  RandomGenerator    rng    =(RandomGenerator)super.getValue(numberOfSuccesses);    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
