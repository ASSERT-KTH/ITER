bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  int  populationSize  =  rng.getSampleSize()  +  1;  [CE]  illegal  start  of  type  [FE]        AssertionError    [CONTEXT]    throws  NotPositiveException,  NotStrictlyPositiveException,  NumberIsTooLargeException  {  super(rng);    [BUGGY]  int  populationSize  =  rng.getSampleSize()  +  1;  [BUGGY]    if  (populationSize  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.POPULATION_SIZE,  populationSize);  }  if  (numberOfSuccesses  <  0)  {  throw  new  NotPositiveException(LocalizedFormats.NUMBER_OF_SUCCESSES,  numberOfSuccesses);  }  if  (sampleSize  <  0)  {  throw  new  NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,  sampleSize);  [CLASS]  HypergeometricDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,int,int,int)  RandomGenerator  rng  int  populationSize  int  numberOfSuccesses  int  sampleSize  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  long  serialVersionUID  int  numberOfSuccesses  populationSize  sampleSize  RandomGenerator  rng  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.25	86	86	1	replace	int  populationSize  =  rng.getSampleSize()  +  1;	      int    populationSize    =    rng.getSampleSize();    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
2	[BUG]  [BUGGY]  int  populationSize  =  rng.getSampleSize(numberOfSuccesses);  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    throws  NotPositiveException,  NotStrictlyPositiveException,  NumberIsTooLargeException  {  super(rng);    [BUGGY]  int  populationSize  =  rng.getSampleSize(numberOfSuccesses);  [BUGGY]    if  (populationSize  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.POPULATION_SIZE,  populationSize);  }  if  (numberOfSuccesses  <  0)  {  throw  new  NotPositiveException(LocalizedFormats.NUMBER_OF_SUCCESSES,  numberOfSuccesses);  }  if  (sampleSize  <  0)  {  throw  new  NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,  sampleSize);  [CLASS]  HypergeometricDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,int,int,int)  RandomGenerator  rng  int  populationSize  int  numberOfSuccesses  int  sampleSize  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  long  serialVersionUID  int  numberOfSuccesses  populationSize  sampleSize  RandomGenerator  rng  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.25	86	86	1	replace	int  populationSize  =  rng.getSampleSize(numberOfSuccesses);	      int    populationSize    =    rng.getSampleSize();    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
3	[BUG]  [BUGGY]  if  (populationSize  <  0)  {  if  (populationSize  <  0)  {  [CE]  illegal  start  of  expression  [FE]    NumberIsTooLargeException    [CONTEXT]    throws  NotPositiveException,  NotStrictlyPositiveException,  NumberIsTooLargeException  {  super(rng);    [BUGGY]  if  (populationSize  <  0)  {  if  (populationSize  <  0)  {  [BUGGY]    throw  new  NotStrictlyPositiveException(LocalizedFormats.POPULATION_SIZE,  populationSize);  }  if  (numberOfSuccesses  <  0)  {  throw  new  NotPositiveException(LocalizedFormats.NUMBER_OF_SUCCESSES,  numberOfSuccesses);  }  if  (sampleSize  <  0)  {  throw  new  NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,  sampleSize);  [CLASS]  HypergeometricDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,int,int,int)  RandomGenerator  rng  int  populationSize  int  numberOfSuccesses  int  sampleSize  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  long  serialVersionUID  int  numberOfSuccesses  populationSize  sampleSize  RandomGenerator  rng  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.25	86	86	1	replace	if    (populationSize    <    0)    {    if  (populationSize  <  0)  {	  	non-compiled	[CE]  illegal  start  of  expression	2	None	add
4	[BUG]  [BUGGY]  if  (populationSize  <  0)  {  If  (populationSize  <  0)  {  [CE]  ';'  expected  [FE]      NumberIsTooLargeException    [CONTEXT]    throws  NotPositiveException,  NotStrictlyPositiveException,  NumberIsTooLargeException  {  super(rng);    [BUGGY]  if  (populationSize  <  0)  {  If  (populationSize  <  0)  {  [BUGGY]    throw  new  NotStrictlyPositiveException(LocalizedFormats.POPULATION_SIZE,  populationSize);  }  if  (numberOfSuccesses  <  0)  {  throw  new  NotPositiveException(LocalizedFormats.NUMBER_OF_SUCCESSES,  numberOfSuccesses);  }  if  (sampleSize  <  0)  {  throw  new  NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,  sampleSize);  [CLASS]  HypergeometricDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,int,int,int)  RandomGenerator  rng  int  populationSize  int  numberOfSuccesses  int  sampleSize  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  long  serialVersionUID  int  numberOfSuccesses  populationSize  sampleSize  RandomGenerator  rng  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.25	86	86	1	replace	if    (populationSize    <    0)    {    If  (populationSize  <  0)  {	  	non-compiled	[CE]  ';'  expected	2	None	add
5	[BUG]  [BUGGY]  int  numberOfSuccesses  =  rng.getNumberOfSuccesses();  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    throws  NotPositiveException,  NotStrictlyPositiveException,  NumberIsTooLargeException  {  super(rng);    [BUGGY]  int  numberOfSuccesses  =  rng.getNumberOfSuccesses();  [BUGGY]    throw  new  NotStrictlyPositiveException(LocalizedFormats.POPULATION_SIZE,  populationSize);  }  if  (numberOfSuccesses  <  0)  {  throw  new  NotPositiveException(LocalizedFormats.NUMBER_OF_SUCCESSES,  numberOfSuccesses);  }  if  (sampleSize  <  0)  {  throw  new  NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,  sampleSize);  [CLASS]  HypergeometricDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,int,int,int)  RandomGenerator  rng  int  populationSize  int  numberOfSuccesses  int  sampleSize  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  long  serialVersionUID  int  numberOfSuccesses  populationSize  sampleSize  RandomGenerator  rng  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.25	86	86	1	replace	int  numberOfSuccesses  =  rng.getNumberOfSuccesses();	      	non-compiled	[CE]  illegal  start  of  type	4	None	replace
6	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]    throws  NotPositiveException,  NotStrictlyPositiveException,  NumberIsTooLargeException  {  super(rng);    [BUGGY]  if  (populationSize  <  1)  {  [BUGGY]    throw  new  NotStrictlyPositiveException(LocalizedFormats.POPULATION_SIZE,  populationSize);  }  if  (numberOfSuccesses  <  0)  {  throw  new  NotPositiveException(LocalizedFormats.NUMBER_OF_SUCCESSES,  numberOfSuccesses);  }  if  (sampleSize  <  0)  {  throw  new  NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,  sampleSize);  [CLASS]  HypergeometricDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,int,int,int)  RandomGenerator  rng  int  populationSize  int  numberOfSuccesses  int  sampleSize  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  long  serialVersionUID  int  numberOfSuccesses  populationSize  sampleSize  RandomGenerator  rng  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.25	86	86	1	add	if  (populationSize  <  1)  {	  if    (populationSize    <    =    1)    {    	compilable	  [FE]  AssertionError  	1	1	replace
7	[BUG]  [BUGGY]  if  (populationSize  <  1)  {  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]    throws  NotPositiveException,  NotStrictlyPositiveException,  NumberIsTooLargeException  {  super(rng);    [BUGGY]  if  (populationSize  <  1)  {  [BUGGY]    throw  new  NotStrictlyPositiveException(LocalizedFormats.POPULATION_SIZE,  populationSize);  }  if  (numberOfSuccesses  <  0)  {  throw  new  NotPositiveException(LocalizedFormats.NUMBER_OF_SUCCESSES,  numberOfSuccesses);  }  if  (sampleSize  <  0)  {  throw  new  NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,  sampleSize);  [CLASS]  HypergeometricDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,int,int,int)  RandomGenerator  rng  int  populationSize  int  numberOfSuccesses  int  sampleSize  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  long  serialVersionUID  int  numberOfSuccesses  populationSize  sampleSize  RandomGenerator  rng  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.25	86	86	1	replace	if  (populationSize  <  1)  {	  if    (populationSize    <    =    1)    {    	compilable	  [FE]  AssertionError  	1	1	replace
8	[BUG]  [BUGGY]  RandomGenerator  rng  =(RandomGenerator)this.super.getDataResolver();  [CE]  '('  expected  [FE]        AssertionError    [CONTEXT]    throws  NotPositiveException,  NotStrictlyPositiveException,  NumberIsTooLargeException  {  super(rng);    [BUGGY]  RandomGenerator  rng  =(RandomGenerator)this.super.getDataResolver();  [BUGGY]    if  (populationSize  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.POPULATION_SIZE,  populationSize);  }  if  (numberOfSuccesses  <  0)  {  throw  new  NotPositiveException(LocalizedFormats.NUMBER_OF_SUCCESSES,  numberOfSuccesses);  }  if  (sampleSize  <  0)  {  throw  new  NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,  sampleSize);  [CLASS]  HypergeometricDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,int,int,int)  RandomGenerator  rng  int  populationSize  int  numberOfSuccesses  int  sampleSize  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  long  serialVersionUID  int  numberOfSuccesses  populationSize  sampleSize  RandomGenerator  rng  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.25	86	86	1	replace	RandomGenerator  rng  =(RandomGenerator)this.super.getDataResolver();	      RandomGenerator    rng    =(RandomGenerator)super.getDataResolver();    	non-compiled	[CE]  '('  expected	8	None	replace
9	[BUG]  [BUGGY]  RandomGenerator  rng  =(RandomGenerator)this;  [CE]  illegal  start  of  type  [FE]        AssertionError    [CONTEXT]    throws  NotPositiveException,  NotStrictlyPositiveException,  NumberIsTooLargeException  {  super(rng);    [BUGGY]  RandomGenerator  rng  =(RandomGenerator)this;  [BUGGY]    if  (populationSize  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.POPULATION_SIZE,  populationSize);  }  if  (numberOfSuccesses  <  0)  {  throw  new  NotPositiveException(LocalizedFormats.NUMBER_OF_SUCCESSES,  numberOfSuccesses);  }  if  (sampleSize  <  0)  {  throw  new  NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,  sampleSize);  [CLASS]  HypergeometricDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,int,int,int)  RandomGenerator  rng  int  populationSize  int  numberOfSuccesses  int  sampleSize  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  long  serialVersionUID  int  numberOfSuccesses  populationSize  sampleSize  RandomGenerator  rng  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.25	86	86	1	replace	RandomGenerator  rng  =(RandomGenerator)this;	      RandomGenerator    rng    =(RandomGenerator)this.null;    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
10	[BUG]  [BUGGY]  RandomGenerator  rng  =(RandomGenerator)this.numbers.get(0);  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    throws  NotPositiveException,  NotStrictlyPositiveException,  NumberIsTooLargeException  {  super(rng);    [BUGGY]  RandomGenerator  rng  =(RandomGenerator)this.numbers.get(0);  [BUGGY]    if  (populationSize  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.POPULATION_SIZE,  populationSize);  }  if  (numberOfSuccesses  <  0)  {  throw  new  NotPositiveException(LocalizedFormats.NUMBER_OF_SUCCESSES,  numberOfSuccesses);  }  if  (sampleSize  <  0)  {  throw  new  NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,  sampleSize);  [CLASS]  HypergeometricDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,int,int,int)  RandomGenerator  rng  int  populationSize  int  numberOfSuccesses  int  sampleSize  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  long  serialVersionUID  int  numberOfSuccesses  populationSize  sampleSize  RandomGenerator  rng  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.25	86	86	1	replace	RandomGenerator  rng  =(RandomGenerator)this.numbers.get(0);	      RandomGenerator    rng    =(RandomGenerator)this.numbers.clone();    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
11	[BUG]  [BUGGY]  RandomGenerator  rng  =(RandomGenerator)super.getValue(null);  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    throws  NotPositiveException,  NotStrictlyPositiveException,  NumberIsTooLargeException  {  super(rng);    [BUGGY]  RandomGenerator  rng  =(RandomGenerator)super.getValue(null);  [BUGGY]    if  (populationSize  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.POPULATION_SIZE,  populationSize);  }  if  (numberOfSuccesses  <  0)  {  throw  new  NotPositiveException(LocalizedFormats.NUMBER_OF_SUCCESSES,  numberOfSuccesses);  }  if  (sampleSize  <  0)  {  throw  new  NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,  sampleSize);  [CLASS]  HypergeometricDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,int,int,int)  RandomGenerator  rng  int  populationSize  int  numberOfSuccesses  int  sampleSize  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  long  serialVersionUID  int  numberOfSuccesses  populationSize  sampleSize  RandomGenerator  rng  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.25	86	86	1	replace	RandomGenerator  rng  =(RandomGenerator)super.getValue(null);	      RandomGenerator    rng    =(RandomGenerator)super.getValue(rng);    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
12	[BUG]  [BUGGY]  RandomGenerator  rng  =(RandomGenerator)super.getValue(variance);  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]    throws  NotPositiveException,  NotStrictlyPositiveException,  NumberIsTooLargeException  {  super(rng);    [BUGGY]  RandomGenerator  rng  =(RandomGenerator)super.getValue(variance);  [BUGGY]    if  (populationSize  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.POPULATION_SIZE,  populationSize);  }  if  (numberOfSuccesses  <  0)  {  throw  new  NotPositiveException(LocalizedFormats.NUMBER_OF_SUCCESSES,  numberOfSuccesses);  }  if  (sampleSize  <  0)  {  throw  new  NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,  sampleSize);  [CLASS]  HypergeometricDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,int,int,int)  RandomGenerator  rng  int  populationSize  int  numberOfSuccesses  int  sampleSize  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  long  serialVersionUID  int  numberOfSuccesses  populationSize  sampleSize  RandomGenerator  rng  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.25	86	86	1	replace	RandomGenerator  rng  =(RandomGenerator)super.getValue(variance);	      RandomGenerator    rng    =(RandomGenerator)super.getValue(rng);    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
13	[BUG]  [BUGGY]  RandomGenerator  rng  =(RandomGenerator)this.super.getValue();  [CE]  '('  expected  [FE]          AssertionError    [CONTEXT]    throws  NotPositiveException,  NotStrictlyPositiveException,  NumberIsTooLargeException  {  super(rng);    [BUGGY]  RandomGenerator  rng  =(RandomGenerator)this.super.getValue();  [BUGGY]    if  (populationSize  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.POPULATION_SIZE,  populationSize);  }  if  (numberOfSuccesses  <  0)  {  throw  new  NotPositiveException(LocalizedFormats.NUMBER_OF_SUCCESSES,  numberOfSuccesses);  }  if  (sampleSize  <  0)  {  throw  new  NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,  sampleSize);  [CLASS]  HypergeometricDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,int,int,int)  RandomGenerator  rng  int  populationSize  int  numberOfSuccesses  int  sampleSize  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  long  serialVersionUID  int  numberOfSuccesses  populationSize  sampleSize  RandomGenerator  rng  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.25	86	86	1	replace	RandomGenerator  rng  =(RandomGenerator)this.super.getValue();	      RandomGenerator    rng    =(RandomGenerator)super.getValue();    	non-compiled	[CE]  '('  expected	6	None	replace
14	[BUG]  [BUGGY]  RandomGenerator  rng  =(RandomGenerator)super.getNumberOfSuccesses();  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    throws  NotPositiveException,  NotStrictlyPositiveException,  NumberIsTooLargeException  {  super(rng);    [BUGGY]  RandomGenerator  rng  =(RandomGenerator)super.getNumberOfSuccesses();  [BUGGY]    throw  new  NotStrictlyPositiveException(LocalizedFormats.POPULATION_SIZE,  populationSize);  }  if  (numberOfSuccesses  <  0)  {  throw  new  NotPositiveException(LocalizedFormats.NUMBER_OF_SUCCESSES,  numberOfSuccesses);  }  if  (sampleSize  <  0)  {  throw  new  NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,  sampleSize);  [CLASS]  HypergeometricDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,int,int,int)  RandomGenerator  rng  int  populationSize  int  numberOfSuccesses  int  sampleSize  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  long  serialVersionUID  int  numberOfSuccesses  populationSize  sampleSize  RandomGenerator  rng  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.25	86	86	1	replace	RandomGenerator  rng  =(RandomGenerator)super.getNumberOfSuccesses();	      	non-compiled	[CE]  illegal  start  of  type	4	None	replace
15	[BUG]  [BUGGY]  RandomGenerator  rng  =(RandomGenerator)super.getValue(numberOfSuccesses);  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    throws  NotPositiveException,  NotStrictlyPositiveException,  NumberIsTooLargeException  {  super(rng);    [BUGGY]  RandomGenerator  rng  =(RandomGenerator)super.getValue(numberOfSuccesses);  [BUGGY]    if  (populationSize  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.POPULATION_SIZE,  populationSize);  }  if  (numberOfSuccesses  <  0)  {  throw  new  NotPositiveException(LocalizedFormats.NUMBER_OF_SUCCESSES,  numberOfSuccesses);  }  if  (sampleSize  <  0)  {  throw  new  NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,  sampleSize);  [CLASS]  HypergeometricDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,int,int,int)  RandomGenerator  rng  int  populationSize  int  numberOfSuccesses  int  sampleSize  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  long  serialVersionUID  int  numberOfSuccesses  populationSize  sampleSize  RandomGenerator  rng  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.25	86	86	1	replace	RandomGenerator  rng  =(RandomGenerator)super.getValue(numberOfSuccesses);	      RandomGenerator    rng    =(RandomGenerator)super.getValue(rng);    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
16	[BUG]  [BUGGY]  RandomGenerator  rng  =  new  RandomGenerator(sampleSize,  numberOfSuccesses);  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    throws  NotPositiveException,  NotStrictlyPositiveException,  NumberIsTooLargeException  {  super(rng);    [BUGGY]  RandomGenerator  rng  =  new  RandomGenerator(sampleSize,  numberOfSuccesses);  [BUGGY]    throw  new  NotStrictlyPositiveException(LocalizedFormats.POPULATION_SIZE,  populationSize);  }  if  (numberOfSuccesses  <  0)  {  throw  new  NotPositiveException(LocalizedFormats.NUMBER_OF_SUCCESSES,  numberOfSuccesses);  }  if  (sampleSize  <  0)  {  throw  new  NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,  sampleSize);  [CLASS]  HypergeometricDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,int,int,int)  RandomGenerator  rng  int  populationSize  int  numberOfSuccesses  int  sampleSize  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  long  serialVersionUID  int  numberOfSuccesses  populationSize  sampleSize  RandomGenerator  rng  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.25	86	86	1	replace	RandomGenerator  rng  =  new  RandomGenerator(sampleSize,  numberOfSuccesses);	      	non-compiled	[CE]  illegal  start  of  type	4	None	replace
