bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number
1	[BUG]  [BUGGY]  int  populationSize  =  getPopulationSize();  [CE]  cannot  find  symbol  n  [CONTEXT]    protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();  final  double  m  =  getNumberOfSuccesses();    [BUGGY]  int  populationSize  =  getPopulationSize();  [BUGGY]    return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	294	294	1	replace	int  populationSize  =  getPopulationSize();	  final    double    n    =    getDecimalSize();    	non-compiled	[CE]  cannot  find  symbol  n	83	None
2	[BUG]  [BUGGY]  int  populationSize  =  getNumberOfSuccesses();  [CE]  cannot  find  symbol  n  [CONTEXT]    protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();  final  double  m  =  getNumberOfSuccesses();    [BUGGY]  int  populationSize  =  getNumberOfSuccesses();  [BUGGY]    return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	294	294	1	replace	int  populationSize  =  getNumberOfSuccesses();	  final    double    n    =    getDecimalSize();    	non-compiled	[CE]  cannot  find  symbol  n	83	None
3	[BUG]  [BUGGY]  int  populationSize  =  getNumberOfSuccesses()  -  getPopulationSize();  [CE]  cannot  find  symbol  n  [CONTEXT]    protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();  final  double  m  =  getNumberOfSuccesses();    [BUGGY]  int  populationSize  =  getNumberOfSuccesses()  -  getPopulationSize();  [BUGGY]    return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	294	294	1	replace	int  populationSize  =  getNumberOfSuccesses()  -  getPopulationSize();	  final    double    n    =    getDecimalSize();    	non-compiled	[CE]  cannot  find  symbol  n	83	None
4	[BUG]  [BUGGY]  int  populationSize  =  getPopulationSize()  -  getNumberOfSuccesses();  [CE]  cannot  find  symbol  n  [CONTEXT]    protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();  final  double  m  =  getNumberOfSuccesses();    [BUGGY]  int  populationSize  =  getPopulationSize()  -  getNumberOfSuccesses();  [BUGGY]    return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	294	294	1	replace	int  populationSize  =  getPopulationSize()  -  getNumberOfSuccesses();	  final    double    n    =    getDecimalSize();    	non-compiled	[CE]  cannot  find  symbol  n	83	None
11	[BUG]  [BUGGY]      int  k  =  getNumberOfSuccesses();  n  =  getNumberOfSuccesses();  [CE]  cannot  find  symbol  n  [CONTEXT]    public  double  getNumericalMean()  {    [BUGGY]      int  k  =  getNumberOfSuccesses();  n  =  getNumberOfSuccesses();  [BUGGY]    return  (double)  (getSampleSize()  *  getNumberOfSuccesses())  /  (double)  getPopulationSize();  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalMean  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	268	268	1	replace	        int    k    =    getNumberOfSuccesses();    n  =  getNumberOfSuccesses();	  	non-compiled	[CE]  cannot  find  symbol  n	362	None
12	[BUG]  [BUGGY]      int  k  =  getNumberOfSuccesses();  m  =  getNumberOfSuccesses();  [CE]  cannot  find  symbol  m  [CONTEXT]    public  double  getNumericalMean()  {    [BUGGY]      int  k  =  getNumberOfSuccesses();  m  =  getNumberOfSuccesses();  [BUGGY]    return  (double)  (getSampleSize()  *  getNumberOfSuccesses())  /  (double)  getPopulationSize();  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalMean  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	268	268	1	replace	        int    k    =    getNumberOfSuccesses();    m  =  getNumberOfSuccesses();	  	non-compiled	[CE]  cannot  find  symbol  m	362	None
13	[BUG]  [BUGGY]      int  k  =  getNumberOfSuccesses();  N  =  getNumberOfSuccesses();  [CE]  cannot  find  symbol  N  [CONTEXT]    public  double  getNumericalMean()  {    [BUGGY]      int  k  =  getNumberOfSuccesses();  N  =  getNumberOfSuccesses();  [BUGGY]    return  (double)  (getSampleSize()  *  getNumberOfSuccesses())  /  (double)  getPopulationSize();  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalMean  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	268	268	1	replace	        int    k    =    getNumberOfSuccesses();    N  =  getNumberOfSuccesses();	  	non-compiled	[CE]  cannot  find  symbol  N	362	None
14	[BUG]  [BUGGY]      int  k  =  getNumberOfSuccesses();  numberOfSuccesses  =  getNumberOfSuccesses();  [CE]  cannot  assign  a  value  to  final  variable  numberOfSuccesses  [CONTEXT]    public  double  getNumericalMean()  {    [BUGGY]      int  k  =  getNumberOfSuccesses();  numberOfSuccesses  =  getNumberOfSuccesses();  [BUGGY]    return  (double)  (getSampleSize()  *  getNumberOfSuccesses())  /  (double)  getPopulationSize();  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalMean  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	268	268	1	replace	        int    k    =    getNumberOfSuccesses();    numberOfSuccesses  =  getNumberOfSuccesses();	  	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  numberOfSuccesses	362	None
15	[BUG]  [BUGGY]  [FE]  AssertionError  testMath1021  [CONTEXT]    public  double  getNumericalMean()  {    [BUGGY]      int  k  =  getNumberOfSuccesses();  final  double  n  =  getNumberOfSuccesses();  [BUGGY]    return  (double)  (getSampleSize()  *  getNumberOfSuccesses())  /  (double)  getPopulationSize();  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalMean  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	268	268	1	add	        int    k    =    getNumberOfSuccesses();    final  double  n  =  getNumberOfSuccesses();	  	compilable	  [FE]  AssertionError  testMath1021	362	1
16	[BUG]  [BUGGY]      int  k  =  getNumberOfSuccesses();  final  double  n  =  getNumberOfSuccesses();  [FE]  AssertionError  testMath1021  [CONTEXT]    public  double  getNumericalMean()  {    [BUGGY]      int  k  =  getNumberOfSuccesses();  final  double  n  =  getNumberOfSuccesses();  [BUGGY]    return  (double)  (getSampleSize()  *  getNumberOfSuccesses())  /  (double)  getPopulationSize();  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalMean  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	268	268	1	replace	        int    k    =    getNumberOfSuccesses();    final  double  n  =  getNumberOfSuccesses();	  	compilable	  [FE]  AssertionError  testMath1021	362	1
21	[BUG]  [BUGGY]  int  k  =  getPopulationSize();  [CE]  missing  return  statement  [CONTEXT]    public  double  getNumericalMean()  {    [BUGGY]  int  k  =  getPopulationSize();  [BUGGY]    return  (double)  (getSampleSize()  *  getNumberOfSuccesses())  /  (double)  getPopulationSize();  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalMean  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	268	268	1	replace	int  k  =  getPopulationSize();	      int    k    =    getNumberOfSuccesses();    	non-compiled	[CE]  missing  return  statement	363	None
23	[BUG]  [BUGGY]  int  k  =  getSampleSize();  [CE]  missing  return  statement  [CONTEXT]    public  double  getNumericalMean()  {    [BUGGY]  int  k  =  getSampleSize();  [BUGGY]    return  (double)  (getSampleSize()  *  getNumberOfSuccesses())  /  (double)  getPopulationSize();  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalMean  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	268	268	1	replace	int  k  =  getSampleSize();	      int    k    =    getNumberOfSuccesses();    	non-compiled	[CE]  missing  return  statement	363	None
24	[BUG]  [BUGGY]  int  k  =  getNumberOfSuccesses()  +  1;  [CE]  missing  return  statement  [CONTEXT]    public  double  getNumericalMean()  {    [BUGGY]  int  k  =  getNumberOfSuccesses()  +  1;  [BUGGY]    return  (double)  (getSampleSize()  *  getNumberOfSuccesses())  /  (double)  getPopulationSize();  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalMean  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	268	268	1	replace	int  k  =  getNumberOfSuccesses()  +  1;	      int    k    =    getNumberOfSuccesses();    	non-compiled	[CE]  missing  return  statement	363	None
32	[BUG]  [BUGGY]  final  double  N  =  getPopulationSize();  [CE]  variable  N  is  already  defined  in  method  calculateNumericalVariance()  [CONTEXT]    protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();  final  double  m  =  getNumberOfSuccesses();  final  double  n  =  getSampleSize();    [BUGGY]  final  double  N  =  getPopulationSize();  [BUGGY]    return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	295	295	1	replace	final  double  N  =  getPopulationSize();	      final    double    n    =    getPopulationSize();    	non-compiled	[CE]  variable  N  is  already  defined  in  method  calculateNumericalVariance()	91	None
33	[BUG]  [BUGGY]  final  double  m  =  getPopulationSize();  [CE]  variable  m  is  already  defined  in  method  calculateNumericalVariance()  [CONTEXT]    protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();  final  double  m  =  getNumberOfSuccesses();  final  double  n  =  getSampleSize();    [BUGGY]  final  double  m  =  getPopulationSize();  [BUGGY]    return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	295	295	1	replace	final  double  m  =  getPopulationSize();	      final    double    n    =    getPopulationSize();    	non-compiled	[CE]  variable  m  is  already  defined  in  method  calculateNumericalVariance()	91	None
34	[BUG]  [BUGGY]  final  double  n  is  getPopulationSize();  [CE]  ';'  expected  [CONTEXT]    protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();  final  double  m  =  getNumberOfSuccesses();  final  double  n  =  getSampleSize();    [BUGGY]  final  double  n  is  getPopulationSize();  [BUGGY]    return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	295	295	1	replace	final  double  n  is  getPopulationSize();	      final    double    n    =    getPopulationSize();    	non-compiled	[CE]  ';'  expected	91	None
41	[BUG]  [BUGGY]  if(numberOfSuccesses  >  0)  {  if(!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumberOfSuccesses();  }  [CE]  illegal  start  of  expression  [CONTEXT]    public  int  getSupportLowerBound()  {    [BUGGY]  if(numberOfSuccesses  >  0)  {  if(!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumberOfSuccesses();  }  [BUGGY]    getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  }  [CLASS]  HypergeometricDistribution  [METHOD]  getSupportLowerBound  [RETURN_TYPE]  int  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	308	309	1	replace	if(numberOfSuccesses  >  0)  {  if(!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumberOfSuccesses();  }	      	non-compiled	[CE]  illegal  start  of  expression	5	None
42	[BUG]  [BUGGY]  double  numericalVariance  =  getNumberOfSuccesses()  /(numberOfSuccesses  -  1);  [CE]  missing  return  statement  [CONTEXT]    public  int  getSupportLowerBound()  {    [BUGGY]  double  numericalVariance  =  getNumberOfSuccesses()  /(numberOfSuccesses  -  1);  [BUGGY]    getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  }  [CLASS]  HypergeometricDistribution  [METHOD]  getSupportLowerBound  [RETURN_TYPE]  int  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	308	309	1	replace	double  numericalVariance  =  getNumberOfSuccesses()  /(numberOfSuccesses  -  1);	      	non-compiled	[CE]  missing  return  statement	5	None
43	[BUG]  [BUGGY]  double  numericalVariance  =  getNumberOfSuccesses()  *(numberOfSuccesses  -  1);  [CE]  missing  return  statement  [CONTEXT]    public  int  getSupportLowerBound()  {    [BUGGY]  double  numericalVariance  =  getNumberOfSuccesses()  *(numberOfSuccesses  -  1);  [BUGGY]    getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  }  [CLASS]  HypergeometricDistribution  [METHOD]  getSupportLowerBound  [RETURN_TYPE]  int  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	308	309	1	replace	double  numericalVariance  =  getNumberOfSuccesses()  *(numberOfSuccesses  -  1);	      	non-compiled	[CE]  missing  return  statement	5	None
44	[BUG]  [BUGGY]  if(numberOfSuccesses  >  0)  {  if(!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumberOfSuccesses()  *(numberOfSuccesses  -  1);  }  [CE]  illegal  start  of  expression  [CONTEXT]    public  int  getSupportLowerBound()  {    [BUGGY]  if(numberOfSuccesses  >  0)  {  if(!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumberOfSuccesses()  *(numberOfSuccesses  -  1);  }  [BUGGY]    getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  }  [CLASS]  HypergeometricDistribution  [METHOD]  getSupportLowerBound  [RETURN_TYPE]  int  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	308	309	1	replace	if(numberOfSuccesses  >  0)  {  if(!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumberOfSuccesses()  *(numberOfSuccesses  -  1);  }	      	non-compiled	[CE]  illegal  start  of  expression	5	None
52	[BUG]  [BUGGY]  int  n  =  getPopulationSize();  [CE]  missing  return  statement  [CONTEXT]    public  int  getSupportLowerBound()  {    [BUGGY]  int  n  =  getPopulationSize();  [BUGGY]    return  FastMath.max(0,        getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  }  [CLASS]  HypergeometricDistribution  [METHOD]  getSupportLowerBound  [RETURN_TYPE]  int  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	308	309	1	replace	int  n  =  getPopulationSize();	      int    numberOfSuccesses    =    getNumberOfSuccesses();    	non-compiled	[CE]  missing  return  statement	82	None
54	[BUG]  [BUGGY]  int  populationSize  =  getPopulationSize()  -  getNumberOfSuccesses();  [CE]  missing  return  statement  [CONTEXT]    public  int  getSupportLowerBound()  {    [BUGGY]  int  populationSize  =  getPopulationSize()  -  getNumberOfSuccesses();  [BUGGY]    return  FastMath.max(0,        getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  }  [CLASS]  HypergeometricDistribution  [METHOD]  getSupportLowerBound  [RETURN_TYPE]  int  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	308	309	1	replace	int  populationSize  =  getPopulationSize()  -  getNumberOfSuccesses();	      int    numberOfSuccesses    =    getNumberOfSuccesses();    	non-compiled	[CE]  missing  return  statement	82	None
62	[BUG]  [BUGGY]  return  numericalVariance  /(numericalVariance  >  0)?  numericVariance  :  null;  [CE]  bad  operand  types  for  binary  operator  '/'  [CONTEXT]    public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }    [BUGGY]  return  numericalVariance  /(numericalVariance  >  0)?  numericVariance  :  null;  [BUGGY]    }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	283	283	1	replace	return  numericalVariance  /(numericalVariance  >  0)?  numericVariance  :  null;	  return    numericalVariance    /(numericalVariance    >    0)?    numericalVariance    :    null;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '/'	153	None
63	[BUG]  [BUGGY]  return  numericalVariance  /(numericalVariance  >  0)?  null  :  numericalVariance;  [CE]  bad  operand  types  for  binary  operator  '/'  [CONTEXT]    public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }    [BUGGY]  return  numericalVariance  /(numericalVariance  >  0)?  null  :  numericalVariance;  [BUGGY]    }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	283	283	1	replace	return  numericalVariance  /(numericalVariance  >  0)?  null  :  numericalVariance;	  return    numericalVariance    /(numericalVariance    >    0)?    numericalVariance    :    null;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '/'	153	None
71	[BUG]  [BUGGY]  n  =  getNumberOfSuccesses()  +  Math.max(n,  m);  [CE]  cannot  find  symbol  n  [CONTEXT]    public  double  getNumericalMean()  {    [BUGGY]  n  =  getNumberOfSuccesses()  +  Math.max(n,  m);  [BUGGY]    return  (double)  (getSampleSize()  *  getNumberOfSuccesses())  /  (double)  getPopulationSize();  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalMean  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	268	268	1	replace	n  =  getNumberOfSuccesses()  +  Math.max(n,  m);	      int    k    =    getNumberOfSuccesses();    	non-compiled	[CE]  cannot  find  symbol  n	363	None
72	[BUG]  [BUGGY]  N  =  getNumberOfSuccesses()  +  Math.max(n,  m);  [CE]  cannot  find  symbol  N  [CONTEXT]    public  double  getNumericalMean()  {    [BUGGY]  N  =  getNumberOfSuccesses()  +  Math.max(n,  m);  [BUGGY]    return  (double)  (getSampleSize()  *  getNumberOfSuccesses())  /  (double)  getPopulationSize();  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalMean  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	268	268	1	replace	N  =  getNumberOfSuccesses()  +  Math.max(n,  m);	      int    k    =    getNumberOfSuccesses();    	non-compiled	[CE]  cannot  find  symbol  N	363	None
73	[BUG]  [BUGGY]  n  =  getNumberOfSuccesses()  +  Math.max(m,  n);  [CE]  cannot  find  symbol  n  [CONTEXT]    public  double  getNumericalMean()  {    [BUGGY]  n  =  getNumberOfSuccesses()  +  Math.max(m,  n);  [BUGGY]    return  (double)  (getSampleSize()  *  getNumberOfSuccesses())  /  (double)  getPopulationSize();  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalMean  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	268	268	1	replace	n  =  getNumberOfSuccesses()  +  Math.max(m,  n);	      int    k    =    getNumberOfSuccesses();    	non-compiled	[CE]  cannot  find  symbol  n	363	None
74	[BUG]  [BUGGY]  m  =  getNumberOfSuccesses()  +  Math.max(n,  m);  [CE]  cannot  find  symbol  m  [CONTEXT]    public  double  getNumericalMean()  {    [BUGGY]  m  =  getNumberOfSuccesses()  +  Math.max(n,  m);  [BUGGY]    return  (double)  (getSampleSize()  *  getNumberOfSuccesses())  /  (double)  getPopulationSize();  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalMean  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	268	268	1	replace	m  =  getNumberOfSuccesses()  +  Math.max(n,  m);	      int    k    =    getNumberOfSuccesses();    	non-compiled	[CE]  cannot  find  symbol  m	363	None
81	[BUG]  [BUGGY]  [FE]  AssertionError  testMoments  [CONTEXT]    public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();    [BUGGY]      numericalVariance  =  Math.max(numberOfSuccesses,  numberOfSuccesses);  numericalVariance  =  Math.min(numberOfSuccesses,  numberOfSuccesses);  [BUGGY]    numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	281	281	1	add	        numericalVariance    =    Math.max(numberOfSuccesses,    numberOfSuccesses);    numericalVariance  =  Math.min(numberOfSuccesses,  numberOfSuccesses);	  	compilable	  [FE]  AssertionError  testMoments	152	1
82	[BUG]  [BUGGY]      numericalVariance  =  Math.max(numberOfSuccesses,  numberOfSuccesses);  numericalVariance  =  Math.min(numberOfSuccesses,  numberOfSuccesses);  [FE]  AssertionError  testMoments  [CONTEXT]    public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();    [BUGGY]      numericalVariance  =  Math.max(numberOfSuccesses,  numberOfSuccesses);  numericalVariance  =  Math.min(numberOfSuccesses,  numberOfSuccesses);  [BUGGY]    numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	281	281	1	replace	        numericalVariance    =    Math.max(numberOfSuccesses,    numberOfSuccesses);    numericalVariance  =  Math.min(numberOfSuccesses,  numberOfSuccesses);	  	compilable	  [FE]  AssertionError  testMoments	152	1
82	[BUG]  [BUGGY]      numericalVariance  =  Math.max(numberOfSuccesses,  numberOfSuccesses);  if(numberOfSuccesses  >  0)  {  if(!numericalVarianceIsCalculated)  {  numericalVariance  =  Math.min(numberOfSuccesses,  numberOfSuccesses);  }  [CE]  illegal  start  of  expression  [CONTEXT]    public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();    [BUGGY]      numericalVariance  =  Math.max(numberOfSuccesses,  numberOfSuccesses);  if(numberOfSuccesses  >  0)  {  if(!numericalVarianceIsCalculated)  {  numericalVariance  =  Math.min(numberOfSuccesses,  numberOfSuccesses);  }  [BUGGY]    numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	281	281	1	replace	        numericalVariance    =    Math.max(numberOfSuccesses,    numberOfSuccesses);    if(numberOfSuccesses  >  0)  {  if(!numericalVarianceIsCalculated)  {  numericalVariance  =  Math.min(numberOfSuccesses,  numberOfSuccesses);  }	  	non-compiled	[CE]  illegal  start  of  expression	152	None
83	[BUG]  [BUGGY]      numericalVariance  =  Math.max(numberOfSuccesses,  numberOfSuccesses);  if(numberOfSuccesses  >  0)  {  if(!numericalVarianceIsCalculated)  {  numericalVariance  =  Math.max(numberOfSuccesses,  numberOfSuccesses);  }  [CE]  illegal  start  of  expression  [CONTEXT]    public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();    [BUGGY]      numericalVariance  =  Math.max(numberOfSuccesses,  numberOfSuccesses);  if(numberOfSuccesses  >  0)  {  if(!numericalVarianceIsCalculated)  {  numericalVariance  =  Math.max(numberOfSuccesses,  numberOfSuccesses);  }  [BUGGY]    numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	281	281	1	replace	        numericalVariance    =    Math.max(numberOfSuccesses,    numberOfSuccesses);    if(numberOfSuccesses  >  0)  {  if(!numericalVarianceIsCalculated)  {  numericalVariance  =  Math.max(numberOfSuccesses,  numberOfSuccesses);  }	  	non-compiled	[CE]  illegal  start  of  expression	152	None
84	[BUG]  [BUGGY]      numericalVariance  =  Math.max(numberOfSuccesses,  numberOfSuccesses);  if(!numberOfSuccessesIsCalculated)  {  if(!numberOfSuccessesIsCalculated)  {  numericalVariance  =  Math.min(numberOfSuccesses,  numberOfSuccesses);  }  [CE]  illegal  start  of  expression  [CONTEXT]    public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();    [BUGGY]      numericalVariance  =  Math.max(numberOfSuccesses,  numberOfSuccesses);  if(!numberOfSuccessesIsCalculated)  {  if(!numberOfSuccessesIsCalculated)  {  numericalVariance  =  Math.min(numberOfSuccesses,  numberOfSuccesses);  }  [BUGGY]    numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	281	281	1	replace	        numericalVariance    =    Math.max(numberOfSuccesses,    numberOfSuccesses);    if(!numberOfSuccessesIsCalculated)  {  if(!numberOfSuccessesIsCalculated)  {  numericalVariance  =  Math.min(numberOfSuccesses,  numberOfSuccesses);  }	  	non-compiled	[CE]  illegal  start  of  expression	152	None
85	[BUG]  [BUGGY]      numericalVariance  =  Math.max(numberOfSuccesses,  numberOfSuccesses);  if(numberOfSuccesses  >  0)  {  if(!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumberOfSuccesses();  }  [CE]  illegal  start  of  expression  [CONTEXT]    public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();    [BUGGY]      numericalVariance  =  Math.max(numberOfSuccesses,  numberOfSuccesses);  if(numberOfSuccesses  >  0)  {  if(!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumberOfSuccesses();  }  [BUGGY]    numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	281	281	1	replace	        numericalVariance    =    Math.max(numberOfSuccesses,    numberOfSuccesses);    if(numberOfSuccesses  >  0)  {  if(!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumberOfSuccesses();  }	  	non-compiled	[CE]  illegal  start  of  expression	152	None
93	[BUG]  [BUGGY]  [FE]  AssertionError  testMoments  [CONTEXT]    protected  double  calculateNumericalVariance()  {    [BUGGY]  double  N  =  getNumberOfSuccesses()  -  1;  [BUGGY]    final  double  N  =  getPopulationSize();  final  double  m  =  getNumberOfSuccesses();  final  double  n  =  getSampleSize();  return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	292	292	1	add	double  N  =  getNumberOfSuccesses()  -  1;	      double    N    =    getNumberOfSuccesses();    	compilable	  [FE]  AssertionError  testMoments	163	1
94	[BUG]  [BUGGY]  double  N  =  getNumberOfSuccesses()  -  1;  [FE]  AssertionError  testMoments  [CONTEXT]    protected  double  calculateNumericalVariance()  {    [BUGGY]  double  N  =  getNumberOfSuccesses()  -  1;  [BUGGY]    final  double  N  =  getPopulationSize();  final  double  m  =  getNumberOfSuccesses();  final  double  n  =  getSampleSize();  return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	292	292	1	replace	double  N  =  getNumberOfSuccesses()  -  1;	      double    N    =    getNumberOfSuccesses();    	compilable	  [FE]  AssertionError  testMoments	163	1
94	[BUG]  [BUGGY]  [FE]  AssertionError  testMoments  [CONTEXT]    protected  double  calculateNumericalVariance()  {    [BUGGY]  double  N  =  getNumberOfSuccesses()  /  2;  [BUGGY]    final  double  N  =  getPopulationSize();  final  double  m  =  getNumberOfSuccesses();  final  double  n  =  getSampleSize();  return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	292	292	1	add	double  N  =  getNumberOfSuccesses()  /  2;	      double    N    =    getNumberOfSuccesses();    	compilable	  [FE]  AssertionError  testMoments	163	1
95	[BUG]  [BUGGY]  double  N  =  getNumberOfSuccesses()  /  2;  [FE]  AssertionError  testMoments  [CONTEXT]    protected  double  calculateNumericalVariance()  {    [BUGGY]  double  N  =  getNumberOfSuccesses()  /  2;  [BUGGY]    final  double  N  =  getPopulationSize();  final  double  m  =  getNumberOfSuccesses();  final  double  n  =  getSampleSize();  return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	292	292	1	replace	double  N  =  getNumberOfSuccesses()  /  2;	      double    N    =    getNumberOfSuccesses();    	compilable	  [FE]  AssertionError  testMoments	163	1
101	[BUG]  [BUGGY]  numericalVariance  =  getPopulationSize();  [CE]  cannot  find  symbol  m  [CONTEXT]    protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();    [BUGGY]  numericalVariance  =  getPopulationSize();  [BUGGY]    final  double  m  =  getNumberOfSuccesses();  final  double  n  =  getSampleSize();  return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	293	293	1	replace	numericalVariance  =  getPopulationSize();	      final    double    n    =    getNumberOfSuccesses();    	non-compiled	[CE]  cannot  find  symbol  m	142	None
102	[BUG]  [BUGGY]  numericalVariance  =  getSampleSize();  [CE]  cannot  find  symbol  m  [CONTEXT]    protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();    [BUGGY]  numericalVariance  =  getSampleSize();  [BUGGY]    final  double  m  =  getNumberOfSuccesses();  final  double  n  =  getSampleSize();  return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	293	293	1	replace	numericalVariance  =  getSampleSize();	      final    double    n    =    getNumberOfSuccesses();    	non-compiled	[CE]  cannot  find  symbol  m	142	None
103	[BUG]  [BUGGY]  numericalVariance  =  getNumberOfSuccesses();  [CE]  cannot  find  symbol  m  [CONTEXT]    protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();    [BUGGY]  numericalVariance  =  getNumberOfSuccesses();  [BUGGY]    final  double  m  =  getNumberOfSuccesses();  final  double  n  =  getSampleSize();  return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	293	293	1	replace	numericalVariance  =  getNumberOfSuccesses();	      final    double    n    =    getNumberOfSuccesses();    	non-compiled	[CE]  cannot  find  symbol  m	142	None
104	[BUG]  [BUGGY]  numericalVariance  =  getNumberOfSuccesses()  -  1;  [CE]  cannot  find  symbol  m  [CONTEXT]    protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();    [BUGGY]  numericalVariance  =  getNumberOfSuccesses()  -  1;  [BUGGY]    final  double  m  =  getNumberOfSuccesses();  final  double  n  =  getSampleSize();  return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	293	293	1	replace	numericalVariance  =  getNumberOfSuccesses()  -  1;	      final    double    n    =    getNumberOfSuccesses();    	non-compiled	[CE]  cannot  find  symbol  m	142	None
111	[BUG]  [BUGGY]  return(double)(getSampleSize()  *  getNumberOfSuccesses())/(double)getSummarySize();  [CE]  cannot  find  symbol  [CONTEXT]    public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();    [BUGGY]  return(double)(getSampleSize()  *  getNumberOfSuccesses())/(double)getSummarySize();  [BUGGY]    }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	281	281	1	replace	return(double)(getSampleSize()  *  getNumberOfSuccesses())/(double)getSummarySize();	  numericalVarianceIisCalculated    =    false;    	non-compiled	[CE]  cannot  find  symbol	124	None
113	[BUG]  [BUGGY]  return(double)(getNumberOfSuccesses()  *  getSampleSize())/(double)getSummarySize();  [CE]  cannot  find  symbol  [CONTEXT]    public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();    [BUGGY]  return(double)(getNumberOfSuccesses()  *  getSampleSize())/(double)getSummarySize();  [BUGGY]    }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	281	281	1	replace	return(double)(getNumberOfSuccesses()  *  getSampleSize())/(double)getSummarySize();	  numericalVarianceIisCalculated    =    false;    	non-compiled	[CE]  cannot  find  symbol	124	None
114	[BUG]  [BUGGY]  return(double)(getSampleSize()  /  getNumberOfSuccesses())/(double)getSummarySize();  [CE]  cannot  find  symbol  [CONTEXT]    public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();    [BUGGY]  return(double)(getSampleSize()  /  getNumberOfSuccesses())/(double)getSummarySize();  [BUGGY]    }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	281	281	1	replace	return(double)(getSampleSize()  /  getNumberOfSuccesses())/(double)getSummarySize();	  numericalVarianceIisCalculated    =    false;    	non-compiled	[CE]  cannot  find  symbol	124	None
121	[BUG]  [BUGGY]  final  double  N  =  getPopulationSize()  /  2;  final  double  N  =  getNumberOfSuccesses();  [CE]  variable  N  is  already  defined  in  method  calculateNumericalVariance()  [CONTEXT]    protected  double  calculateNumericalVariance()  {    [BUGGY]  final  double  N  =  getPopulationSize()  /  2;  final  double  N  =  getNumberOfSuccesses();  [BUGGY]    final  double  m  =  getNumberOfSuccesses();  final  double  n  =  getSampleSize();  return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	292	292	1	replace	final    double    N    =    getPopulationSize()    /    2;    final  double  N  =  getNumberOfSuccesses();	  	non-compiled	[CE]  variable  N  is  already  defined  in  method  calculateNumericalVariance()	192	None
122	[BUG]  [BUGGY]  final  double  N  =  getPopulationSize()  /  2;  final  double  N  =  getNumberOfSuccesses()  /  2;  [CE]  variable  N  is  already  defined  in  method  calculateNumericalVariance()  [CONTEXT]    protected  double  calculateNumericalVariance()  {    [BUGGY]  final  double  N  =  getPopulationSize()  /  2;  final  double  N  =  getNumberOfSuccesses()  /  2;  [BUGGY]    final  double  m  =  getNumberOfSuccesses();  final  double  n  =  getSampleSize();  return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	292	292	1	replace	final    double    N    =    getPopulationSize()    /    2;    final  double  N  =  getNumberOfSuccesses()  /  2;	  	non-compiled	[CE]  variable  N  is  already  defined  in  method  calculateNumericalVariance()	192	None
123	[BUG]  [BUGGY]  final  double  N  =  getPopulationSize()  /  2;  final  double  N  =  getNumberOfSuccesses()  *  2;  [CE]  variable  N  is  already  defined  in  method  calculateNumericalVariance()  [CONTEXT]    protected  double  calculateNumericalVariance()  {    [BUGGY]  final  double  N  =  getPopulationSize()  /  2;  final  double  N  =  getNumberOfSuccesses()  *  2;  [BUGGY]    final  double  m  =  getNumberOfSuccesses();  final  double  n  =  getSampleSize();  return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	292	292	1	replace	final    double    N    =    getPopulationSize()    /    2;    final  double  N  =  getNumberOfSuccesses()  *  2;	  	non-compiled	[CE]  variable  N  is  already  defined  in  method  calculateNumericalVariance()	192	None
124	[BUG]  [BUGGY]  final  double  N  =  getPopulationSize()  /  2;  final  double  n  =  getNumberOfSuccesses();  [CE]  variable  N  is  already  defined  in  method  calculateNumericalVariance()  [CONTEXT]    protected  double  calculateNumericalVariance()  {    [BUGGY]  final  double  N  =  getPopulationSize()  /  2;  final  double  n  =  getNumberOfSuccesses();  [BUGGY]    final  double  m  =  getNumberOfSuccesses();  final  double  n  =  getSampleSize();  return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	292	292	1	replace	final    double    N    =    getPopulationSize()    /    2;    final  double  n  =  getNumberOfSuccesses();	  	non-compiled	[CE]  variable  N  is  already  defined  in  method  calculateNumericalVariance()	192	None
125	[BUG]  [BUGGY]  final  double  N  =  getPopulationSize()  /  2;  final  double  N  =  getPopulationSize()  /  2;  [CE]  variable  N  is  already  defined  in  method  calculateNumericalVariance()  [CONTEXT]    protected  double  calculateNumericalVariance()  {    [BUGGY]  final  double  N  =  getPopulationSize()  /  2;  final  double  N  =  getPopulationSize()  /  2;  [BUGGY]    final  double  m  =  getNumberOfSuccesses();  final  double  n  =  getSampleSize();  return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	292	292	1	replace	final    double    N    =    getPopulationSize()    /    2;    final  double  N  =  getPopulationSize()  /  2;	  	non-compiled	[CE]  variable  N  is  already  defined  in  method  calculateNumericalVariance()	192	None
131	[BUG]  [BUGGY]  if(!numericalVarianceIsCalculated)  {  if(!numericalVarianceIsCalculated)  {  numericalVariance  =  false;  toured  [CE]  not  a  statement  [CONTEXT]    public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();    [BUGGY]  if(!numericalVarianceIsCalculated)  {  if(!numericalVarianceIsCalculated)  {  numericalVariance  =  false;  toured  [BUGGY]    numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	281	281	1	replace	if(!numericalVarianceIsCalculated)  {  if(!numericalVarianceIsCalculated)  {  numericalVariance  =  false;  toured	      if(!numericalVarianceIsCalculated)    {    if(!numericalVarianceIsCalculated)    {    numericalVariance    =    false;    }    	non-compiled	[CE]  not  a  statement	172	None
134	[BUG]  [BUGGY]  if(!numericalVarianceIsCalculated)  {  if(!numericalVarianceIsCalculated)  {  numericalVariance  =  false;  Alternatively  [CE]  not  a  statement  [CONTEXT]    public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();    [BUGGY]  if(!numericalVarianceIsCalculated)  {  if(!numericalVarianceIsCalculated)  {  numericalVariance  =  false;  Alternatively  [BUGGY]    numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	281	281	1	replace	if(!numericalVarianceIsCalculated)  {  if(!numericalVarianceIsCalculated)  {  numericalVariance  =  false;  Alternatively	      if(!numericalVarianceIsCalculated)    {    if(!numericalVarianceIsCalculated)    {    numericalVariance    =    false;    }    	non-compiled	[CE]  not  a  statement	172	None
142	[BUG]  [BUGGY]  final  double  m  =  getSampleSize();  [CE]  variable  m  is  already  defined  in  method  calculateNumericalVariance()  [CONTEXT]    protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();  final  double  m  =  getNumberOfSuccesses();  final  double  n  =  getSampleSize();    [BUGGY]  final  double  m  =  getSampleSize();  [BUGGY]    return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	295	295	1	replace	final  double  m  =  getSampleSize();	      final    double    n    =    getSampleSize();    	non-compiled	[CE]  variable  m  is  already  defined  in  method  calculateNumericalVariance()	94	None
143	[BUG]  [BUGGY]  final  double  N  =  getSampleSize();  [CE]  variable  N  is  already  defined  in  method  calculateNumericalVariance()  [CONTEXT]    protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();  final  double  m  =  getNumberOfSuccesses();  final  double  n  =  getSampleSize();    [BUGGY]  final  double  N  =  getSampleSize();  [BUGGY]    return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	295	295	1	replace	final  double  N  =  getSampleSize();	      final    double    n    =    getSampleSize();    	non-compiled	[CE]  variable  N  is  already  defined  in  method  calculateNumericalVariance()	94	None
151	[BUG]  [BUGGY]  [FE]  AssertionError  testMoments  [CONTEXT]    protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();  final  double  m  =  getNumberOfSuccesses();  final  double  n  =  getSampleSize();    [BUGGY]  return  numericalVariance  *(numberOfSuccesses  /  1);  [BUGGY]    return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	295	295	1	add	return  numericalVariance  *(numberOfSuccesses  /  1);	      final    double    k    =    getKnowledge();    	compilable	  [FE]  AssertionError  testMoments	95	1
152	[BUG]  [BUGGY]  return  numericalVariance  *(numberOfSuccesses  /  1);  [FE]  AssertionError  testMoments  [CONTEXT]    protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();  final  double  m  =  getNumberOfSuccesses();  final  double  n  =  getSampleSize();    [BUGGY]  return  numericalVariance  *(numberOfSuccesses  /  1);  [BUGGY]    return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	295	295	1	replace	return  numericalVariance  *(numberOfSuccesses  /  1);	      final    double    k    =    getKnowledge();    	compilable	  [FE]  AssertionError  testMoments	95	1
152	[BUG]  [BUGGY]  [FE]  AssertionError  testMoments  [CONTEXT]    protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();  final  double  m  =  getNumberOfSuccesses();  final  double  n  =  getSampleSize();    [BUGGY]  return  numericalVariance  *(numberOfSuccesses  -  1);  [BUGGY]    return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	295	295	1	add	return  numericalVariance  *(numberOfSuccesses  -  1);	      final    double    k    =    getKnowledge();    	compilable	  [FE]  AssertionError  testMoments	95	1
153	[BUG]  [BUGGY]  return  numericalVariance  *(numberOfSuccesses  -  1);  [FE]  AssertionError  testMoments  [CONTEXT]    protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();  final  double  m  =  getNumberOfSuccesses();  final  double  n  =  getSampleSize();    [BUGGY]  return  numericalVariance  *(numberOfSuccesses  -  1);  [BUGGY]    return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	295	295	1	replace	return  numericalVariance  *(numberOfSuccesses  -  1);	      final    double    k    =    getKnowledge();    	compilable	  [FE]  AssertionError  testMoments	95	1
153	[BUG]  [BUGGY]  [FE]  AssertionError  testMoments  [CONTEXT]    protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();  final  double  m  =  getNumberOfSuccesses();  final  double  n  =  getSampleSize();    [BUGGY]  return  numericalVariance  /(numberOfSuccesses  -  1);  [BUGGY]    return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	295	295	1	add	return  numericalVariance  /(numberOfSuccesses  -  1);	      final    double    k    =    getKnowledge();    	compilable	  [FE]  AssertionError  testMoments	95	1
154	[BUG]  [BUGGY]  return  numericalVariance  /(numberOfSuccesses  -  1);  [FE]  AssertionError  testMoments  [CONTEXT]    protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();  final  double  m  =  getNumberOfSuccesses();  final  double  n  =  getSampleSize();    [BUGGY]  return  numericalVariance  /(numberOfSuccesses  -  1);  [BUGGY]    return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	295	295	1	replace	return  numericalVariance  /(numberOfSuccesses  -  1);	      final    double    k    =    getKnowledge();    	compilable	  [FE]  AssertionError  testMoments	95	1
154	[BUG]  [BUGGY]  [FE]  AssertionError  testMoments  [CONTEXT]    protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();  final  double  m  =  getNumberOfSuccesses();  final  double  n  =  getSampleSize();    [BUGGY]  return  numberOfSuccesses  *(numberOfSuccesses  -  1);  [BUGGY]    return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	295	295	1	add	return  numberOfSuccesses  *(numberOfSuccesses  -  1);	      final    double    k    =    getKnowledge();    	compilable	  [FE]  AssertionError  testMoments	95	1
155	[BUG]  [BUGGY]  return  numberOfSuccesses  *(numberOfSuccesses  -  1);  [FE]  AssertionError  testMoments  [CONTEXT]    protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();  final  double  m  =  getNumberOfSuccesses();  final  double  n  =  getSampleSize();    [BUGGY]  return  numberOfSuccesses  *(numberOfSuccesses  -  1);  [BUGGY]    return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	295	295	1	replace	return  numberOfSuccesses  *(numberOfSuccesses  -  1);	      final    double    k    =    getKnowledge();    	compilable	  [FE]  AssertionError  testMoments	95	1
162	[BUG]  [BUGGY]  if(!numericalVarianceIsCalculated)  {  if(!numericalVarianceIsCalculated)  {  numericalVariance  =  false;  }  [CE]  illegal  start  of  expression  [CONTEXT]    public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {    [BUGGY]  if(!numericalVarianceIsCalculated)  {  if(!numericalVarianceIsCalculated)  {  numericalVariance  =  false;  }  [BUGGY]    numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	280	280	1	replace	if(!numericalVarianceIsCalculated)  {  if(!numericalVarianceIsCalculated)  {  numericalVariance  =  false;  }	      	non-compiled	[CE]  illegal  start  of  expression	36	None
172	[BUG]  [BUGGY]  final  int  k  =  getNumberOfDay();  [CE]  cannot  find  symbol  [CONTEXT]    protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();    [BUGGY]  final  int  k  =  getNumberOfDay();  [BUGGY]    final  double  m  =  getNumberOfSuccesses();  final  double  n  =  getSampleSize();  return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	293	293	1	replace	final  int  k  =  getNumberOfDay();	      final    double    k    =    getNumberOfDay();    	non-compiled	[CE]  cannot  find  symbol	185	None
173	[BUG]  [BUGGY]  final  double  dx  =  getNumberOfDay();  [CE]  cannot  find  symbol  [CONTEXT]    protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();    [BUGGY]  final  double  dx  =  getNumberOfDay();  [BUGGY]    final  double  m  =  getNumberOfSuccesses();  final  double  n  =  getSampleSize();  return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	293	293	1	replace	final  double  dx  =  getNumberOfDay();	      final    double    k    =    getNumberOfDay();    	non-compiled	[CE]  cannot  find  symbol	185	None
174	[BUG]  [BUGGY]  final  double  n  =  getNumberOfDay();  [CE]  cannot  find  symbol  [CONTEXT]    protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();    [BUGGY]  final  double  n  =  getNumberOfDay();  [BUGGY]    final  double  m  =  getNumberOfSuccesses();  final  double  n  =  getSampleSize();  return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	293	293	1	replace	final  double  n  =  getNumberOfDay();	      final    double    k    =    getNumberOfDay();    	non-compiled	[CE]  cannot  find  symbol	185	None
183	[BUG]  [BUGGY]  getNumberOfSuccesses()  /  getPopulationSize();  [CE]  not  a  statement  [CONTEXT]    public  int  getSupportLowerBound()  {    [BUGGY]  getNumberOfSuccesses()  /  getPopulationSize();  [BUGGY]    return  FastMath.max(0,        getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  }  [CLASS]  HypergeometricDistribution  [METHOD]  getSupportLowerBound  [RETURN_TYPE]  int  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	308	309	1	replace	getNumberOfSuccesses()  /  getPopulationSize();	      getNumberOfSuccesses()    +    getPopulationSize();    	non-compiled	[CE]  not  a  statement	272	None
184	[BUG]  [BUGGY]  getPopulationSize()  +  getNumberOfSuccesses();  [CE]  not  a  statement  [CONTEXT]    public  int  getSupportLowerBound()  {    [BUGGY]  getPopulationSize()  +  getNumberOfSuccesses();  [BUGGY]    return  FastMath.max(0,        getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  }  [CLASS]  HypergeometricDistribution  [METHOD]  getSupportLowerBound  [RETURN_TYPE]  int  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	308	309	1	replace	getPopulationSize()  +  getNumberOfSuccesses();	      getNumberOfSuccesses()    +    getPopulationSize();    	non-compiled	[CE]  not  a  statement	272	None
201	[BUG]  [BUGGY]  if(numberOfSuccesses  >  0)  {  if(!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumberOfSuccesses();  }  [CE]  illegal  start  of  expression  [CONTEXT]    protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();  final  double  m  =  getNumberOfSuccesses();  final  double  n  =  getSampleSize();    [BUGGY]  if(numberOfSuccesses  >  0)  {  if(!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumberOfSuccesses();  }  [BUGGY]    return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	295	295	1	replace	if(numberOfSuccesses  >  0)  {  if(!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumberOfSuccesses();  }	      final    double    n    =    getSampleSize();    	non-compiled	[CE]  illegal  start  of  expression	94	None
202	[BUG]  [BUGGY]  if(numberOfSuccesses  >  0)  {  if(!numericalVarianceIsCalculated)  {  return  numericalVariance  *(numberOfSuccesses  -  1);  }  [CE]  illegal  start  of  expression  [CONTEXT]    protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();  final  double  m  =  getNumberOfSuccesses();  final  double  n  =  getSampleSize();    [BUGGY]  if(numberOfSuccesses  >  0)  {  if(!numericalVarianceIsCalculated)  {  return  numericalVariance  *(numberOfSuccesses  -  1);  }  [BUGGY]    return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	295	295	1	replace	if(numberOfSuccesses  >  0)  {  if(!numericalVarianceIsCalculated)  {  return  numericalVariance  *(numberOfSuccesses  -  1);  }	      final    double    n    =    getSampleSize();    	non-compiled	[CE]  illegal  start  of  expression	94	None
203	[BUG]  [BUGGY]  if(numberOfSuccesses  >  0)  {  if(!numericalVarianceIsCalculated)  {  numericalVariance  =  null;  }  [CE]  illegal  start  of  expression  [CONTEXT]    protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();  final  double  m  =  getNumberOfSuccesses();  final  double  n  =  getSampleSize();    [BUGGY]  if(numberOfSuccesses  >  0)  {  if(!numericalVarianceIsCalculated)  {  numericalVariance  =  null;  }  [BUGGY]    return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	295	295	1	replace	if(numberOfSuccesses  >  0)  {  if(!numericalVarianceIsCalculated)  {  numericalVariance  =  null;  }	      final    double    n    =    getSampleSize();    	non-compiled	[CE]  illegal  start  of  expression	94	None
204	[BUG]  [BUGGY]  if(numberOfSuccesses  >  0)  {  if(!numericalVarianceIsCalculated)  {  numericalVariance  =  false;  }  [CE]  illegal  start  of  expression  [CONTEXT]    protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();  final  double  m  =  getNumberOfSuccesses();  final  double  n  =  getSampleSize();    [BUGGY]  if(numberOfSuccesses  >  0)  {  if(!numericalVarianceIsCalculated)  {  numericalVariance  =  false;  }  [BUGGY]    return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	295	295	1	replace	if(numberOfSuccesses  >  0)  {  if(!numericalVarianceIsCalculated)  {  numericalVariance  =  false;  }	      final    double    n    =    getSampleSize();    	non-compiled	[CE]  illegal  start  of  expression	94	None
211	[BUG]  [BUGGY]  setNumberOfSuccesses(numberOfSuccesses);  [CE]  cannot  find  symbol  [CONTEXT]    public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {    [BUGGY]  setNumberOfSuccesses(numberOfSuccesses);  [BUGGY]    numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	280	280	1	replace	setNumberOfSuccesses(numberOfSuccesses);	      setNumberOfSuccesses(n);    	non-compiled	[CE]  cannot  find  symbol	242	None
213	[BUG]  [BUGGY]  setNumberOfSuccesses(numberOfSuccesses  -  1);  [CE]  cannot  find  symbol  [CONTEXT]    public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {    [BUGGY]  setNumberOfSuccesses(numberOfSuccesses  -  1);  [BUGGY]    numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	280	280	1	replace	setNumberOfSuccesses(numberOfSuccesses  -  1);	      setNumberOfSuccesses(n);    	non-compiled	[CE]  cannot  find  symbol	242	None
214	[BUG]  [BUGGY]  setNumberOfSuccesses(0);  [CE]  cannot  find  symbol  [CONTEXT]    public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {    [BUGGY]  setNumberOfSuccesses(0);  [BUGGY]    numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	280	280	1	replace	setNumberOfSuccesses(0);	      setNumberOfSuccesses(n);    	non-compiled	[CE]  cannot  find  symbol	242	None
221	[BUG]  [BUGGY]  if(numberOfSuccesses  >  0)  {  if(!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumberOfSuccesses()  *  Math.pow(10,  numberOfSuccesses);  }  [CE]  illegal  start  of  expression  [CONTEXT]    public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }    [BUGGY]  if(numberOfSuccesses  >  0)  {  if(!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumberOfSuccesses()  *  Math.pow(10,  numberOfSuccesses);  }  [BUGGY]    return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	283	283	1	replace	if(numberOfSuccesses  >  0)  {  if(!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumberOfSuccesses()  *  Math.pow(10,  numberOfSuccesses);  }	      if(!numericalVarianceIsCalculated)    {    if(!numericalVarianceIsCalculated)    {    numericalVariance    =    calculateNumberOfSuccesses();    if(!numericalVarianceIsCalculated)    {    numericalVariance    	non-compiled	[CE]  illegal  start  of  expression	105	None
222	[BUG]  [BUGGY]  if(numberOfSuccesses  >  0)  {  if(!numericalVarianceIsCalculated)  {  numericalVariance  =  getNumberOfSuccesses()  *  Math.pow(10,  numberOfSuccesses);  }  [CE]  illegal  start  of  expression  [CONTEXT]    public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }    [BUGGY]  if(numberOfSuccesses  >  0)  {  if(!numericalVarianceIsCalculated)  {  numericalVariance  =  getNumberOfSuccesses()  *  Math.pow(10,  numberOfSuccesses);  }  [BUGGY]    return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	283	283	1	replace	if(numberOfSuccesses  >  0)  {  if(!numericalVarianceIsCalculated)  {  numericalVariance  =  getNumberOfSuccesses()  *  Math.pow(10,  numberOfSuccesses);  }	      if(!numericalVarianceIsCalculated)    {    if(!numericalVarianceIsCalculated)    {    numericalVariance    =    calculateNumberOfSuccesses();    if(!numericalVarianceIsCalculated)    {    numericalVariance    	non-compiled	[CE]  illegal  start  of  expression	105	None
223	[BUG]  [BUGGY]  if(numberOfSuccesses  >  0)  {  if(!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumberOfSuccesses();  }  [CE]  illegal  start  of  expression  [CONTEXT]    public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }    [BUGGY]  if(numberOfSuccesses  >  0)  {  if(!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumberOfSuccesses();  }  [BUGGY]    return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	283	283	1	replace	if(numberOfSuccesses  >  0)  {  if(!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumberOfSuccesses();  }	      if(!numericalVarianceIsCalculated)    {    if(!numericalVarianceIsCalculated)    {    numericalVariance    =    calculateNumberOfSuccesses();    if(!numericalVarianceIsCalculated)    {    numericalVariance    	non-compiled	[CE]  illegal  start  of  expression	105	None
224	[BUG]  [BUGGY]  numericalVariance  =  getPopulationSize()  *  Math.pow(10,  numberOfSuccesses);  [CE]  missing  return  statement  [CONTEXT]    public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }    [BUGGY]  numericalVariance  =  getPopulationSize()  *  Math.pow(10,  numberOfSuccesses);  [BUGGY]    return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	283	283	1	replace	numericalVariance  =  getPopulationSize()  *  Math.pow(10,  numberOfSuccesses);	      if(!numericalVarianceIsCalculated)    {    if(!numericalVarianceIsCalculated)    {    numericalVariance    =    calculateNumberOfSuccesses();    if(!numericalVarianceIsCalculated)    {    numericalVariance    	non-compiled	[CE]  missing  return  statement	105	None
234	[BUG]  [BUGGY]  [FE]  AssertionError  testMath1021  [CONTEXT]    protected  double  calculateNumericalVariance()  {    [BUGGY]  final  double  N  =  getPopulationSize()  /  2.0  *  2;  [BUGGY]    final  double  m  =  getNumberOfSuccesses();  final  double  n  =  getSampleSize();  return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	292	292	1	add	final  double  N  =  getPopulationSize()  /  2.0  *  2;	  final    double    N    =    getPopulationSize()    /    2.0;    	compilable	  [FE]  AssertionError  testMath1021	195	1
235	[BUG]  [BUGGY]  final  double  N  =  getPopulationSize()  /  2.0  *  2;  [FE]  AssertionError  testMath1021  [CONTEXT]    protected  double  calculateNumericalVariance()  {    [BUGGY]  final  double  N  =  getPopulationSize()  /  2.0  *  2;  [BUGGY]    final  double  m  =  getNumberOfSuccesses();  final  double  n  =  getSampleSize();  return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	292	292	1	replace	final  double  N  =  getPopulationSize()  /  2.0  *  2;	  final    double    N    =    getPopulationSize()    /    2.0;    	compilable	  [FE]  AssertionError  testMath1021	195	1
241	[BUG]  [BUGGY]  final  double  m  =  getNumberOfSuccesses()  *  getNumberOfSuccesses();  [CE]  variable  m  is  already  defined  in  method  calculateNumericalVariance()  [CONTEXT]    protected  double  calculateNumericalVariance()  {    [BUGGY]  final  double  m  =  getNumberOfSuccesses()  *  getNumberOfSuccesses();  [BUGGY]    final  double  N  =  getPopulationSize();  final  double  m  =  getNumberOfSuccesses();  final  double  n  =  getSampleSize();  return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	292	292	1	replace	final  double  m  =  getNumberOfSuccesses()  *  getNumberOfSuccesses();	      final    double    N    =    getNumberOfSuccesses().doubleValue();    	non-compiled	[CE]  variable  m  is  already  defined  in  method  calculateNumericalVariance()	164	None
242	[BUG]  [BUGGY]  final  double  m  =  getNumberOfSuccesses()  *  getDecimalOfSuccesses();  [CE]  cannot  find  symbol  [CONTEXT]    protected  double  calculateNumericalVariance()  {    [BUGGY]  final  double  m  =  getNumberOfSuccesses()  *  getDecimalOfSuccesses();  [BUGGY]    final  double  N  =  getPopulationSize();  final  double  m  =  getNumberOfSuccesses();  final  double  n  =  getSampleSize();  return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	292	292	1	replace	final  double  m  =  getNumberOfSuccesses()  *  getDecimalOfSuccesses();	      final    double    N    =    getNumberOfSuccesses().doubleValue();    	non-compiled	[CE]  cannot  find  symbol	164	None
243	[BUG]  [BUGGY]  final  double  m  =  getNumberOfSuccesses()  *  getMeanOfSuccesses();  [CE]  cannot  find  symbol  [CONTEXT]    protected  double  calculateNumericalVariance()  {    [BUGGY]  final  double  m  =  getNumberOfSuccesses()  *  getMeanOfSuccesses();  [BUGGY]    final  double  N  =  getPopulationSize();  final  double  m  =  getNumberOfSuccesses();  final  double  n  =  getSampleSize();  return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	292	292	1	replace	final  double  m  =  getNumberOfSuccesses()  *  getMeanOfSuccesses();	      final    double    N    =    getNumberOfSuccesses().doubleValue();    	non-compiled	[CE]  cannot  find  symbol	164	None
244	[BUG]  [BUGGY]  final  double  m  =  getNumberOfSuccesses()  *  getMillisOfSuccesses();  [CE]  cannot  find  symbol  [CONTEXT]    protected  double  calculateNumericalVariance()  {    [BUGGY]  final  double  m  =  getNumberOfSuccesses()  *  getMillisOfSuccesses();  [BUGGY]    final  double  N  =  getPopulationSize();  final  double  m  =  getNumberOfSuccesses();  final  double  n  =  getSampleSize();  return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	292	292	1	replace	final  double  m  =  getNumberOfSuccesses()  *  getMillisOfSuccesses();	      final    double    N    =    getNumberOfSuccesses().doubleValue();    	non-compiled	[CE]  cannot  find  symbol	164	None
251	[BUG]  [BUGGY]  numericalVariance  =  getNumberOfSuccesses()  /(numberOfSuccesses  -  1));  [CE]  ';'  expected  [CONTEXT]    protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();    [BUGGY]  numericalVariance  =  getNumberOfSuccesses()  /(numberOfSuccesses  -  1));  [BUGGY]    final  double  m  =  getNumberOfSuccesses();  final  double  n  =  getSampleSize();  return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	293	293	1	replace	numericalVariance  =  getNumberOfSuccesses()  /(numberOfSuccesses  -  1));	      final    double    n    =    getNumberOfSuccesses();    	non-compiled	[CE]  ';'  expected	142	None
252	[BUG]  [BUGGY]  numericalVariance  =  getNumberOfSuccesses()  *(numberOfSuccesses  -  1));  [CE]  ';'  expected  [CONTEXT]    protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();    [BUGGY]  numericalVariance  =  getNumberOfSuccesses()  *(numberOfSuccesses  -  1));  [BUGGY]    final  double  m  =  getNumberOfSuccesses();  final  double  n  =  getSampleSize();  return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	293	293	1	replace	numericalVariance  =  getNumberOfSuccesses()  *(numberOfSuccesses  -  1));	      final    double    n    =    getNumberOfSuccesses();    	non-compiled	[CE]  ';'  expected	142	None
253	[BUG]  [BUGGY]  numericalVariance  =  getNumberOfSuccesses()  *(numberOfSuccesses  /  1));  [CE]  ';'  expected  [CONTEXT]    protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();    [BUGGY]  numericalVariance  =  getNumberOfSuccesses()  *(numberOfSuccesses  /  1));  [BUGGY]    final  double  m  =  getNumberOfSuccesses();  final  double  n  =  getSampleSize();  return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	293	293	1	replace	numericalVariance  =  getNumberOfSuccesses()  *(numberOfSuccesses  /  1));	      final    double    n    =    getNumberOfSuccesses();    	non-compiled	[CE]  ';'  expected	142	None
254	[BUG]  [BUGGY]  numericalVariance  =  getSampleSize()  *(numberOfSuccesses  -  1));  [CE]  ';'  expected  [CONTEXT]    protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();    [BUGGY]  numericalVariance  =  getSampleSize()  *(numberOfSuccesses  -  1));  [BUGGY]    final  double  m  =  getNumberOfSuccesses();  final  double  n  =  getSampleSize();  return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	293	293	1	replace	numericalVariance  =  getSampleSize()  *(numberOfSuccesses  -  1));	      final    double    n    =    getNumberOfSuccesses();    	non-compiled	[CE]  ';'  expected	142	None
261	[BUG]  [BUGGY]  numericalVarianceIsCalculated  =  false;  if(!numericalVarianceIsCalculated)  {  if(!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumberOfSuccesses();  }  [CE]  illegal  start  of  expression  [CONTEXT]    public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();    [BUGGY]  numericalVarianceIsCalculated  =  false;  if(!numericalVarianceIsCalculated)  {  if(!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumberOfSuccesses();  }  [BUGGY]    }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	281	281	1	replace	numericalVarianceIsCalculated    =    false;    if(!numericalVarianceIsCalculated)  {  if(!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumberOfSuccesses();  }	  	non-compiled	[CE]  illegal  start  of  expression	121	None
262	[BUG]  [BUGGY]  numericalVarianceIsCalculated  =  false;  if(!numericalVarianceIsCalculated)  {  if(!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();  }  [CE]  illegal  start  of  expression  [CONTEXT]    public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();    [BUGGY]  numericalVarianceIsCalculated  =  false;  if(!numericalVarianceIsCalculated)  {  if(!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();  }  [BUGGY]    }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	281	281	1	replace	numericalVarianceIsCalculated    =    false;    if(!numericalVarianceIsCalculated)  {  if(!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();  }	  	non-compiled	[CE]  illegal  start  of  expression	121	None
263	[BUG]  [BUGGY]  numericalVarianceIsCalculated  =  false;  if(numericalVariance!=  null)  {  if(!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumberOfSuccesses();  }  [CE]  illegal  start  of  expression  [CONTEXT]    public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();    [BUGGY]  numericalVarianceIsCalculated  =  false;  if(numericalVariance!=  null)  {  if(!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumberOfSuccesses();  }  [BUGGY]    }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	281	281	1	replace	numericalVarianceIsCalculated    =    false;    if(numericalVariance!=  null)  {  if(!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumberOfSuccesses();  }	  	non-compiled	[CE]  illegal  start  of  expression	121	None
264	[BUG]  [BUGGY]  numericalVarianceIsCalculated  =  false;  if(!numericalVarianceIsCalculated)  {  if(!numericalVarianceIsCalculated)  {  numericalVariance  =  null;  }  [CE]  illegal  start  of  expression  [CONTEXT]    public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();    [BUGGY]  numericalVarianceIsCalculated  =  false;  if(!numericalVarianceIsCalculated)  {  if(!numericalVarianceIsCalculated)  {  numericalVariance  =  null;  }  [BUGGY]    }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	281	281	1	replace	numericalVarianceIsCalculated    =    false;    if(!numericalVarianceIsCalculated)  {  if(!numericalVarianceIsCalculated)  {  numericalVariance  =  null;  }	  	non-compiled	[CE]  illegal  start  of  expression	121	None
265	[BUG]  [BUGGY]  numericalVarianceIsCalculated  =  false;  if(!numericalVarianceIsCalculated)  {  if(!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateStdNumericalVariance();  }  [CE]  illegal  start  of  expression  [CONTEXT]    public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();    [BUGGY]  numericalVarianceIsCalculated  =  false;  if(!numericalVarianceIsCalculated)  {  if(!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateStdNumericalVariance();  }  [BUGGY]    }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	281	281	1	replace	numericalVarianceIsCalculated    =    false;    if(!numericalVarianceIsCalculated)  {  if(!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateStdNumericalVariance();  }	  	non-compiled	[CE]  illegal  start  of  expression	121	None
271	[BUG]  [BUGGY]  int  k  =  getNumberOfSuccesses();  if(k  >  0)  {  return  getNumberOfSuccesses();  }  [CE]  missing  return  statement  [CONTEXT]    public  double  getNumericalMean()  {    [BUGGY]  int  k  =  getNumberOfSuccesses();  if(k  >  0)  {  return  getNumberOfSuccesses();  }  [BUGGY]    return  (double)  (getSampleSize()  *  getNumberOfSuccesses())  /  (double)  getPopulationSize();  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalMean  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	268	268	1	replace	int  k  =  getNumberOfSuccesses();  if(k  >  0)  {  return  getNumberOfSuccesses();  }	      if(getNumberOfSuccesses()    >    0)    {    int    k    =    getNumberOfSuccesses();    if(k    >    0)    {    return    getNumberOfSuccesses();    }    	non-compiled	[CE]  missing  return  statement	364	None
272	[BUG]  [BUGGY]  if(getPopulationSize()  >  0)  {  int  k  =  getNumberOfSuccesses();  if(k  >  0)  {  return  getNumberOfSuccesses();  }  [CE]  illegal  start  of  expression  [CONTEXT]    public  double  getNumericalMean()  {    [BUGGY]  if(getPopulationSize()  >  0)  {  int  k  =  getNumberOfSuccesses();  if(k  >  0)  {  return  getNumberOfSuccesses();  }  [BUGGY]    return  (double)  (getSampleSize()  *  getNumberOfSuccesses())  /  (double)  getPopulationSize();  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalMean  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	268	268	1	replace	if(getPopulationSize()  >  0)  {  int  k  =  getNumberOfSuccesses();  if(k  >  0)  {  return  getNumberOfSuccesses();  }	      if(getNumberOfSuccesses()    >    0)    {    int    k    =    getNumberOfSuccesses();    if(k    >    0)    {    return    getNumberOfSuccesses();    }    	non-compiled	[CE]  illegal  start  of  expression	364	None
291	[BUG]  [BUGGY]  numericalVariance  =  Math.max(numberOfSuccesses,  numberOfSuccesses  -  1);  [CE]  missing  return  statement  [CONTEXT]    public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }    [BUGGY]  numericalVariance  =  Math.max(numberOfSuccesses,  numberOfSuccesses  -  1);  [BUGGY]    }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	283	283	1	replace	numericalVariance  =  Math.max(numberOfSuccesses,  numberOfSuccesses  -  1);	  return    numericalVariance    /(numericalVariance    >    0)?    numericalVariance    :    null;    	non-compiled	[CE]  missing  return  statement	153	None
293	[BUG]  [BUGGY]  numericalVariance  =  Math.max(numberOfSuccesses,  this.populationSize);  [CE]  missing  return  statement  [CONTEXT]    public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }    [BUGGY]  numericalVariance  =  Math.max(numberOfSuccesses,  this.populationSize);  [BUGGY]    }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	283	283	1	replace	numericalVariance  =  Math.max(numberOfSuccesses,  this.populationSize);	  return    numericalVariance    /(numericalVariance    >    0)?    numericalVariance    :    null;    	non-compiled	[CE]  missing  return  statement	153	None
294	[BUG]  [BUGGY]  numericalVariance  =  Math.max(numberOfSuccesses,  0);  [CE]  missing  return  statement  [CONTEXT]    public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }    [BUGGY]  numericalVariance  =  Math.max(numberOfSuccesses,  0);  [BUGGY]    }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	283	283	1	replace	numericalVariance  =  Math.max(numberOfSuccesses,  0);	  return    numericalVariance    /(numericalVariance    >    0)?    numericalVariance    :    null;    	non-compiled	[CE]  missing  return  statement	153	None
301	[BUG]  [BUGGY]  final  double  m  =  getNumberOfSuccesses()  *  getMean();  [CE]  cannot  find  symbol  [CONTEXT]    protected  double  calculateNumericalVariance()  {    [BUGGY]  final  double  m  =  getNumberOfSuccesses()  *  getMean();  [BUGGY]    final  double  N  =  getPopulationSize();  final  double  m  =  getNumberOfSuccesses();  final  double  n  =  getSampleSize();  return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	292	292	1	replace	final  double  m  =  getNumberOfSuccesses()  *  getMean();	      final    double    N    =    getNumberOfSuccesses().doubleValue();    	non-compiled	[CE]  cannot  find  symbol	164	None
302	[BUG]  [BUGGY]  final  double  m  =  getNumberOfSuccesses()  *  getMethod();  [CE]  cannot  find  symbol  [CONTEXT]    protected  double  calculateNumericalVariance()  {    [BUGGY]  final  double  m  =  getNumberOfSuccesses()  *  getMethod();  [BUGGY]    final  double  N  =  getPopulationSize();  final  double  m  =  getNumberOfSuccesses();  final  double  n  =  getSampleSize();  return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	292	292	1	replace	final  double  m  =  getNumberOfSuccesses()  *  getMethod();	      final    double    N    =    getNumberOfSuccesses().doubleValue();    	non-compiled	[CE]  cannot  find  symbol	164	None
303	[BUG]  [BUGGY]  final  double  m  =  getNumberOfSuccesses()  /  getMean();  [CE]  cannot  find  symbol  [CONTEXT]    protected  double  calculateNumericalVariance()  {    [BUGGY]  final  double  m  =  getNumberOfSuccesses()  /  getMean();  [BUGGY]    final  double  N  =  getPopulationSize();  final  double  m  =  getNumberOfSuccesses();  final  double  n  =  getSampleSize();  return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	292	292	1	replace	final  double  m  =  getNumberOfSuccesses()  /  getMean();	      final    double    N    =    getNumberOfSuccesses().doubleValue();    	non-compiled	[CE]  cannot  find  symbol	164	None
304	[BUG]  [BUGGY]  final  double  m  =  getNumberOfSuccesses()  *  getHeaderMean();  [CE]  cannot  find  symbol  [CONTEXT]    protected  double  calculateNumericalVariance()  {    [BUGGY]  final  double  m  =  getNumberOfSuccesses()  *  getHeaderMean();  [BUGGY]    final  double  N  =  getPopulationSize();  final  double  m  =  getNumberOfSuccesses();  final  double  n  =  getSampleSize();  return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	292	292	1	replace	final  double  m  =  getNumberOfSuccesses()  *  getHeaderMean();	      final    double    N    =    getNumberOfSuccesses().doubleValue();    	non-compiled	[CE]  cannot  find  symbol	164	None
311	[BUG]  [BUGGY]  [FE]  AssertionError  testMath1021  [CONTEXT]    public  int  getSupportLowerBound()  {    [BUGGY]      getNumberOfSuccesses();  getPopulationSize();  [BUGGY]    return  FastMath.max(0,        getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  }  [CLASS]  HypergeometricDistribution  [METHOD]  getSupportLowerBound  [RETURN_TYPE]  int  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	308	309	1	add	        getNumberOfSuccesses();    getPopulationSize();	  	compilable	  [FE]  AssertionError  testMath1021	275	1
312	[BUG]  [BUGGY]      getNumberOfSuccesses();  getPopulationSize();  [FE]  AssertionError  testMath1021  [CONTEXT]    public  int  getSupportLowerBound()  {    [BUGGY]      getNumberOfSuccesses();  getPopulationSize();  [BUGGY]    return  FastMath.max(0,        getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  }  [CLASS]  HypergeometricDistribution  [METHOD]  getSupportLowerBound  [RETURN_TYPE]  int  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	308	309	1	replace	        getNumberOfSuccesses();    getPopulationSize();	  	compilable	  [FE]  AssertionError  testMath1021	275	1
312	[BUG]  [BUGGY]  [FE]  AssertionError  testMath1021  [CONTEXT]    public  int  getSupportLowerBound()  {    [BUGGY]      getNumberOfSuccesses();  getNumberOfSuccesses();  [BUGGY]    return  FastMath.max(0,        getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  }  [CLASS]  HypergeometricDistribution  [METHOD]  getSupportLowerBound  [RETURN_TYPE]  int  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	308	309	1	add	        getNumberOfSuccesses();    getNumberOfSuccesses();	  	compilable	  [FE]  AssertionError  testMath1021	275	1
313	[BUG]  [BUGGY]      getNumberOfSuccesses();  getNumberOfSuccesses();  [FE]  AssertionError  testMath1021  [CONTEXT]    public  int  getSupportLowerBound()  {    [BUGGY]      getNumberOfSuccesses();  getNumberOfSuccesses();  [BUGGY]    return  FastMath.max(0,        getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  }  [CLASS]  HypergeometricDistribution  [METHOD]  getSupportLowerBound  [RETURN_TYPE]  int  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	308	309	1	replace	        getNumberOfSuccesses();    getNumberOfSuccesses();	  	compilable	  [FE]  AssertionError  testMath1021	275	1
313	[BUG]  [BUGGY]      getNumberOfSuccesses();  getPopulationSize()  -  getNumberOfSuccesses();  [CE]  not  a  statement  [CONTEXT]    public  int  getSupportLowerBound()  {    [BUGGY]      getNumberOfSuccesses();  getPopulationSize()  -  getNumberOfSuccesses();  [BUGGY]    return  FastMath.max(0,        getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  }  [CLASS]  HypergeometricDistribution  [METHOD]  getSupportLowerBound  [RETURN_TYPE]  int  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	308	309	1	replace	        getNumberOfSuccesses();    getPopulationSize()  -  getNumberOfSuccesses();	  	non-compiled	[CE]  not  a  statement	275	None
314	[BUG]  [BUGGY]      getNumberOfSuccesses();  getNumberOfSuccesses()  -  getPopulationSize();  [CE]  not  a  statement  [CONTEXT]    public  int  getSupportLowerBound()  {    [BUGGY]      getNumberOfSuccesses();  getNumberOfSuccesses()  -  getPopulationSize();  [BUGGY]    return  FastMath.max(0,        getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  }  [CLASS]  HypergeometricDistribution  [METHOD]  getSupportLowerBound  [RETURN_TYPE]  int  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	308	309	1	replace	        getNumberOfSuccesses();    getNumberOfSuccesses()  -  getPopulationSize();	  	non-compiled	[CE]  not  a  statement	275	None
315	[BUG]  [BUGGY]      getNumberOfSuccesses();  getNumberOfSuccesses()  -  getPopulationSize());  [CE]  not  a  statement  [CONTEXT]    public  int  getSupportLowerBound()  {    [BUGGY]      getNumberOfSuccesses();  getNumberOfSuccesses()  -  getPopulationSize());  [BUGGY]    return  FastMath.max(0,        getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  }  [CLASS]  HypergeometricDistribution  [METHOD]  getSupportLowerBound  [RETURN_TYPE]  int  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	308	309	1	replace	        getNumberOfSuccesses();    getNumberOfSuccesses()  -  getPopulationSize());	  	non-compiled	[CE]  not  a  statement	275	None
322	[BUG]  [BUGGY]  double  numericalVariance  =  Math.floor(getMean(),  numberOfSuccesses);  [CE]  cannot  find  symbol  [CONTEXT]    public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {    [BUGGY]  double  numericalVariance  =  Math.floor(getMean(),  numberOfSuccesses);  [BUGGY]    numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	280	280	1	replace	double  numericalVariance  =  Math.floor(getMean(),  numberOfSuccesses);	      double    numericalVariance    =    Math.floor(getMean());    	non-compiled	[CE]  cannot  find  symbol	245	None
323	[BUG]  [BUGGY]  double  numericalVariance  =  Math.floor(getMean(),  getStandardDeviation());  [CE]  cannot  find  symbol  [CONTEXT]    public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {    [BUGGY]  double  numericalVariance  =  Math.floor(getMean(),  getStandardDeviation());  [BUGGY]    numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	280	280	1	replace	double  numericalVariance  =  Math.floor(getMean(),  getStandardDeviation());	      double    numericalVariance    =    Math.floor(getMean());    	non-compiled	[CE]  cannot  find  symbol	245	None
324	[BUG]  [BUGGY]  double  numericalVariance  =  Math.floor(getMean(),  getSize());  [CE]  cannot  find  symbol  [CONTEXT]    public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {    [BUGGY]  double  numericalVariance  =  Math.floor(getMean(),  getSize());  [BUGGY]    numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	280	280	1	replace	double  numericalVariance  =  Math.floor(getMean(),  getSize());	      double    numericalVariance    =    Math.floor(getMean());    	non-compiled	[CE]  cannot  find  symbol	245	None
333	[BUG]  [BUGGY]  final  double  n  is  getNumberOfSuccesses();  [CE]  ';'  expected  [CONTEXT]    protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();  final  double  m  =  getNumberOfSuccesses();  final  double  n  =  getSampleSize();    [BUGGY]  final  double  n  is  getNumberOfSuccesses();  [BUGGY]    return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	295	295	1	replace	final  double  n  is  getNumberOfSuccesses();	      final    double    n    =    getNumberOfSuccesses();    	non-compiled	[CE]  ';'  expected	92	None
341	[BUG]  [BUGGY]  if(!numberOfSuccessesIsCalculated)  {  [CE]  cannot  find  symbol  numberOfSuccessesIsCalculated  [CONTEXT]    public  double  getNumericalVariance()  {    [BUGGY]  if(!numberOfSuccessesIsCalculated)  {  [BUGGY]    numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	279	279	1	replace	if(!numberOfSuccessesIsCalculated)  {	  if(numericalVarianceIsCalculated)    {    	non-compiled	[CE]  cannot  find  symbol  numberOfSuccessesIsCalculated	23	None
343	[BUG]  [BUGGY]  if(!numberOfSuccesses)  {  [CE]  bad  operand  type  int  for  unary  operator  '!'  [CONTEXT]    public  double  getNumericalVariance()  {    [BUGGY]  if(!numberOfSuccesses)  {  [BUGGY]    numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	279	279	1	replace	if(!numberOfSuccesses)  {	  if(numericalVarianceIsCalculated)    {    	non-compiled	[CE]  bad  operand  type  int  for  unary  operator  '!'	23	None
353	[BUG]  [BUGGY]  [FE]  AssertionError  testMoments  [CONTEXT]    public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {    [BUGGY]  numericalVariance  =  getNumberOfSuccesses()  *  Math.pow(10,  numberOfSuccesses  -  1);  [BUGGY]    numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	280	280	1	add	numericalVariance  =  getNumberOfSuccesses()  *  Math.pow(10,  numberOfSuccesses  -  1);	      numericalVariance    =    getNumberOfSuccesses()    *    Math.pow(10,    numberOfSuccesses);    	compilable	  [FE]  AssertionError  testMoments	106	1
354	[BUG]  [BUGGY]  numericalVariance  =  getNumberOfSuccesses()  *  Math.pow(10,  numberOfSuccesses  -  1);  [FE]  AssertionError  testMoments  [CONTEXT]    public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {    [BUGGY]  numericalVariance  =  getNumberOfSuccesses()  *  Math.pow(10,  numberOfSuccesses  -  1);  [BUGGY]    numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	280	280	1	replace	numericalVariance  =  getNumberOfSuccesses()  *  Math.pow(10,  numberOfSuccesses  -  1);	      numericalVariance    =    getNumberOfSuccesses()    *    Math.pow(10,    numberOfSuccesses);    	compilable	  [FE]  AssertionError  testMoments	106	1
354	[BUG]  [BUGGY]  [FE]  AssertionError  testMoments  [CONTEXT]    public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {    [BUGGY]  numericalVariance  =  getNumberOfSuccesses()  *  Math.pow(10,  numberOfSuccesses  /  2);  [BUGGY]    numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	280	280	1	add	numericalVariance  =  getNumberOfSuccesses()  *  Math.pow(10,  numberOfSuccesses  /  2);	      numericalVariance    =    getNumberOfSuccesses()    *    Math.pow(10,    numberOfSuccesses);    	compilable	  [FE]  AssertionError  testMoments	106	1
355	[BUG]  [BUGGY]  numericalVariance  =  getNumberOfSuccesses()  *  Math.pow(10,  numberOfSuccesses  /  2);  [FE]  AssertionError  testMoments  [CONTEXT]    public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {    [BUGGY]  numericalVariance  =  getNumberOfSuccesses()  *  Math.pow(10,  numberOfSuccesses  /  2);  [BUGGY]    numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	280	280	1	replace	numericalVariance  =  getNumberOfSuccesses()  *  Math.pow(10,  numberOfSuccesses  /  2);	      numericalVariance    =    getNumberOfSuccesses()    *    Math.pow(10,    numberOfSuccesses);    	compilable	  [FE]  AssertionError  testMoments	106	1
363	[BUG]  [BUGGY]  [FE]  AssertionError  testMoments  [CONTEXT]    protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();  final  double  m  =  getNumberOfSuccesses();  final  double  n  =  getSampleSize();    [BUGGY]  return(N  *  m  *(N  *  n  +  1)*(N  *  m))  /(N  *  N  *  (N  -  1));  [BUGGY]    }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	295	295	1	add	return(N  *  m  *(N  *  n  +  1)*(N  *  m))  /(N  *  N  *  (N  -  1));	  return(N    *    m    *(N    *    n)*(N    *    m))    /(N    *    N    *    (N    -    1));    	compilable	  [FE]  AssertionError  testMoments	123	1
364	[BUG]  [BUGGY]  return(N  *  m  *(N  *  n  +  1)*(N  *  m))  /(N  *  N  *  (N  -  1));  [FE]  AssertionError  testMoments  [CONTEXT]    protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();  final  double  m  =  getNumberOfSuccesses();  final  double  n  =  getSampleSize();    [BUGGY]  return(N  *  m  *(N  *  n  +  1)*(N  *  m))  /(N  *  N  *  (N  -  1));  [BUGGY]    }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	295	295	1	replace	return(N  *  m  *(N  *  n  +  1)*(N  *  m))  /(N  *  N  *  (N  -  1));	  return(N    *    m    *(N    *    n)*(N    *    m))    /(N    *    N    *    (N    -    1));    	compilable	  [FE]  AssertionError  testMoments	123	1
364	[BUG]  [BUGGY]  return(N  *  m  *(N  *  n)+  1)*(N  *  m))  /(N  *  N  *  (N  -  1));  [CE]  ';'  expected  [CONTEXT]    protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();  final  double  m  =  getNumberOfSuccesses();  final  double  n  =  getSampleSize();    [BUGGY]  return(N  *  m  *(N  *  n)+  1)*(N  *  m))  /(N  *  N  *  (N  -  1));  [BUGGY]    }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	295	295	1	replace	return(N  *  m  *(N  *  n)+  1)*(N  *  m))  /(N  *  N  *  (N  -  1));	  return(N    *    m    *(N    *    n)*(N    *    m))    /(N    *    N    *    (N    -    1));    	non-compiled	[CE]  ';'  expected	123	None
371	[BUG]  [BUGGY]  numericalVariance  =  Math.max(numberOfSuccesses,  sampleSize);  [CE]  missing  return  statement  [CONTEXT]    public  int  getSupportLowerBound()  {    [BUGGY]  numericalVariance  =  Math.max(numberOfSuccesses,  sampleSize);  [BUGGY]    getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  }  [CLASS]  HypergeometricDistribution  [METHOD]  getSupportLowerBound  [RETURN_TYPE]  int  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	308	309	1	replace	numericalVariance  =  Math.max(numberOfSuccesses,  sampleSize);	  return    FastMath.max(0,    getNumberOfSuccesses()    +    getSampleSize()    -    getPopulationSize());    	non-compiled	[CE]  missing  return  statement	3	None
372	[BUG]  [BUGGY]  numericalVariance  =  Math.max(numberOfSuccesses,  populationSize);  [CE]  missing  return  statement  [CONTEXT]    public  int  getSupportLowerBound()  {    [BUGGY]  numericalVariance  =  Math.max(numberOfSuccesses,  populationSize);  [BUGGY]    getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  }  [CLASS]  HypergeometricDistribution  [METHOD]  getSupportLowerBound  [RETURN_TYPE]  int  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	308	309	1	replace	numericalVariance  =  Math.max(numberOfSuccesses,  populationSize);	  return    FastMath.max(0,    getNumberOfSuccesses()    +    getSampleSize()    -    getPopulationSize());    	non-compiled	[CE]  missing  return  statement	3	None
373	[BUG]  [BUGGY]  numericalVariance  =  Math.max(numberOfSuccesses,  size);  [CE]  cannot  find  symbol  size  [CONTEXT]    public  int  getSupportLowerBound()  {    [BUGGY]  numericalVariance  =  Math.max(numberOfSuccesses,  size);  [BUGGY]    getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  }  [CLASS]  HypergeometricDistribution  [METHOD]  getSupportLowerBound  [RETURN_TYPE]  int  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	308	309	1	replace	numericalVariance  =  Math.max(numberOfSuccesses,  size);	  return    FastMath.max(0,    getNumberOfSuccesses()    +    getSampleSize()    -    getPopulationSize());    	non-compiled	[CE]  cannot  find  symbol  size	3	None
374	[BUG]  [BUGGY]  numericalVariance  =  Math.max(numberOfSuccesses,  numberOfSuccesses);  [CE]  missing  return  statement  [CONTEXT]    public  int  getSupportLowerBound()  {    [BUGGY]  numericalVariance  =  Math.max(numberOfSuccesses,  numberOfSuccesses);  [BUGGY]    getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  }  [CLASS]  HypergeometricDistribution  [METHOD]  getSupportLowerBound  [RETURN_TYPE]  int  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	308	309	1	replace	numericalVariance  =  Math.max(numberOfSuccesses,  numberOfSuccesses);	  return    FastMath.max(0,    getNumberOfSuccesses()    +    getSampleSize()    -    getPopulationSize());    	non-compiled	[CE]  missing  return  statement	3	None
382	[BUG]  [BUGGY]  super.getNumberOfSuccesses(),  numberOfSuccesses;  [CE]  ';'  expected  [CONTEXT]    public  double  getNumericalVariance()  {    [BUGGY]  super.getNumberOfSuccesses(),  numberOfSuccesses;  [BUGGY]    if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	279	279	1	replace	super.getNumberOfSuccesses(),  numberOfSuccesses;	      super.getNumberOfSuccesses();    	non-compiled	[CE]  ';'  expected	541	None
383	[BUG]  [BUGGY]  super.setNumberOfSuccesses(n  -  1);  [CE]  illegal  start  of  type  [CONTEXT]    public  double  getNumericalVariance()  {    [BUGGY]  super.setNumberOfSuccesses(n  -  1);  [BUGGY]    if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	279	279	1	replace	super.setNumberOfSuccesses(n  -  1);	      super.getNumberOfSuccesses();    	non-compiled	[CE]  illegal  start  of  type	541	None
384	[BUG]  [BUGGY]  super.setNumberOfSuccesses(null);  [CE]  illegal  start  of  type  [CONTEXT]    public  double  getNumericalVariance()  {    [BUGGY]  super.setNumberOfSuccesses(null);  [BUGGY]    if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	279	279	1	replace	super.setNumberOfSuccesses(null);	      super.getNumberOfSuccesses();    	non-compiled	[CE]  illegal  start  of  type	541	None
391	[BUG]  [BUGGY]  double  numericalVariance  =  getNumberOfSuccesses()  /(numberOfSuccesses  -  1);  [CE]  illegal  start  of  type  [CONTEXT]    public  double  getNumericalVariance()  {    [BUGGY]  double  numericalVariance  =  getNumberOfSuccesses()  /(numberOfSuccesses  -  1);  [BUGGY]    if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	279	279	1	replace	double  numericalVariance  =  getNumberOfSuccesses()  /(numberOfSuccesses  -  1);	      double    numericalVariance    =    getNumberOfSuccesses()    *(numberOfSuccesses    -    1);    	non-compiled	[CE]  illegal  start  of  type	6	None
393	[BUG]  [BUGGY]  double  numericalVariance  =  getNumberOfSuccesses()  *(populationSize  -  1);  [CE]  illegal  start  of  type  [CONTEXT]    public  double  getNumericalVariance()  {    [BUGGY]  double  numericalVariance  =  getNumberOfSuccesses()  *(populationSize  -  1);  [BUGGY]    if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	279	279	1	replace	double  numericalVariance  =  getNumberOfSuccesses()  *(populationSize  -  1);	      double    numericalVariance    =    getNumberOfSuccesses()    *(numberOfSuccesses    -    1);    	non-compiled	[CE]  illegal  start  of  type	6	None
394	[BUG]  [BUGGY]  double  numericalVariance  =  getNumberOfSuccesses()  *(numberOfSuccesses  /  1);  [CE]  illegal  start  of  type  [CONTEXT]    public  double  getNumericalVariance()  {    [BUGGY]  double  numericalVariance  =  getNumberOfSuccesses()  *(numberOfSuccesses  /  1);  [BUGGY]    if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	279	279	1	replace	double  numericalVariance  =  getNumberOfSuccesses()  *(numberOfSuccesses  /  1);	      double    numericalVariance    =    getNumberOfSuccesses()    *(numberOfSuccesses    -    1);    	non-compiled	[CE]  illegal  start  of  type	6	None
401	[BUG]  [BUGGY]      numericalVariance  =  Math.abs(numberOfSuccesses);  if(numberOfSuccesses  >  0)  {  if(!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumberOfSuccesses();  }  [CE]  illegal  start  of  expression  [CONTEXT]    public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();    [BUGGY]      numericalVariance  =  Math.abs(numberOfSuccesses);  if(numberOfSuccesses  >  0)  {  if(!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumberOfSuccesses();  }  [BUGGY]    numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	281	281	1	replace	        numericalVariance    =    Math.abs(numberOfSuccesses);    if(numberOfSuccesses  >  0)  {  if(!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumberOfSuccesses();  }	  	non-compiled	[CE]  illegal  start  of  expression	325	None
402	[BUG]  [BUGGY]      numericalVariance  =  Math.abs(numberOfSuccesses);  if(numberOfSuccesses  >  0)  {  if(!numericalVarianceIsCalculated)  {  numericalVariance  =  Math.abs(numberOfSuccesses);  }  [CE]  illegal  start  of  expression  [CONTEXT]    public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();    [BUGGY]      numericalVariance  =  Math.abs(numberOfSuccesses);  if(numberOfSuccesses  >  0)  {  if(!numericalVarianceIsCalculated)  {  numericalVariance  =  Math.abs(numberOfSuccesses);  }  [BUGGY]    numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	281	281	1	replace	        numericalVariance    =    Math.abs(numberOfSuccesses);    if(numberOfSuccesses  >  0)  {  if(!numericalVarianceIsCalculated)  {  numericalVariance  =  Math.abs(numberOfSuccesses);  }	  	non-compiled	[CE]  illegal  start  of  expression	325	None
403	[BUG]  [BUGGY]      numericalVariance  =  Math.abs(numberOfSuccesses);  if(numberOfSuccesses  >  0)  {  if(!numericalVarianceIsCalculated)  {  numericalVariance  =  Math.rint(numberOfSuccesses);  }  [CE]  illegal  start  of  expression  [CONTEXT]    public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();    [BUGGY]      numericalVariance  =  Math.abs(numberOfSuccesses);  if(numberOfSuccesses  >  0)  {  if(!numericalVarianceIsCalculated)  {  numericalVariance  =  Math.rint(numberOfSuccesses);  }  [BUGGY]    numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	281	281	1	replace	        numericalVariance    =    Math.abs(numberOfSuccesses);    if(numberOfSuccesses  >  0)  {  if(!numericalVarianceIsCalculated)  {  numericalVariance  =  Math.rint(numberOfSuccesses);  }	  	non-compiled	[CE]  illegal  start  of  expression	325	None
404	[BUG]  [BUGGY]      numericalVariance  =  Math.abs(numberOfSuccesses);  if(numberOfSuccesses  >  0)  {  if(!numericalVarianceIsCalculated)  {  numericalVariance  =  Math.pow(10,  numberOfSuccesses);  }  [CE]  illegal  start  of  expression  [CONTEXT]    public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();    [BUGGY]      numericalVariance  =  Math.abs(numberOfSuccesses);  if(numberOfSuccesses  >  0)  {  if(!numericalVarianceIsCalculated)  {  numericalVariance  =  Math.pow(10,  numberOfSuccesses);  }  [BUGGY]    numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	281	281	1	replace	        numericalVariance    =    Math.abs(numberOfSuccesses);    if(numberOfSuccesses  >  0)  {  if(!numericalVarianceIsCalculated)  {  numericalVariance  =  Math.pow(10,  numberOfSuccesses);  }	  	non-compiled	[CE]  illegal  start  of  expression	325	None
405	[BUG]  [BUGGY]      numericalVariance  =  Math.abs(numberOfSuccesses);  if(numberOfSuccesses  >  0)  {  if(!numericalVarianceIsCalculated)  {  numericalVariance  =  Math.min(numberOfSuccesses,  numberOfSuccesses);  }  [CE]  illegal  start  of  expression  [CONTEXT]    public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();    [BUGGY]      numericalVariance  =  Math.abs(numberOfSuccesses);  if(numberOfSuccesses  >  0)  {  if(!numericalVarianceIsCalculated)  {  numericalVariance  =  Math.min(numberOfSuccesses,  numberOfSuccesses);  }  [BUGGY]    numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	281	281	1	replace	        numericalVariance    =    Math.abs(numberOfSuccesses);    if(numberOfSuccesses  >  0)  {  if(!numericalVarianceIsCalculated)  {  numericalVariance  =  Math.min(numberOfSuccesses,  numberOfSuccesses);  }	  	non-compiled	[CE]  illegal  start  of  expression	325	None
412	[BUG]  [BUGGY]  if(!numericalVarianceIsCalculated)  {  if(!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateStdNumericalVariance();  bodied  [CE]  not  a  statement  [CONTEXT]    public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();    [BUGGY]  if(!numericalVarianceIsCalculated)  {  if(!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateStdNumericalVariance();  bodied  [BUGGY]    numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	281	281	1	replace	if(!numericalVarianceIsCalculated)  {  if(!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateStdNumericalVariance();  bodied	      if(!numericalVarianceIsCalculated)    {    if(!numericalVarianceIsCalculated)    {    numericalVariance    =    calculateStdNumericalVariance();    }    	non-compiled	[CE]  not  a  statement	175	None
413	[BUG]  [BUGGY]  if(!numericalVarianceIsCalculated)  {  if(!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateStdNumericalVariance();  delt  [CE]  not  a  statement  [CONTEXT]    public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();    [BUGGY]  if(!numericalVarianceIsCalculated)  {  if(!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateStdNumericalVariance();  delt  [BUGGY]    numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	281	281	1	replace	if(!numericalVarianceIsCalculated)  {  if(!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateStdNumericalVariance();  delt	      if(!numericalVarianceIsCalculated)    {    if(!numericalVarianceIsCalculated)    {    numericalVariance    =    calculateStdNumericalVariance();    }    	non-compiled	[CE]  not  a  statement	175	None
414	[BUG]  [BUGGY]  if(!numericalVarianceIsCalculated)  {  if(!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateStdNumericalVariance();  toured  [CE]  not  a  statement  [CONTEXT]    public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();    [BUGGY]  if(!numericalVarianceIsCalculated)  {  if(!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateStdNumericalVariance();  toured  [BUGGY]    numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	281	281	1	replace	if(!numericalVarianceIsCalculated)  {  if(!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateStdNumericalVariance();  toured	      if(!numericalVarianceIsCalculated)    {    if(!numericalVarianceIsCalculated)    {    numericalVariance    =    calculateStdNumericalVariance();    }    	non-compiled	[CE]  not  a  statement	175	None
422	[BUG]  [BUGGY]  getNumberOfSuccesses()  -  getPopulationSize()  +  1);  [CE]  not  a  statement  [CONTEXT]    public  int  getSupportLowerBound()  {    [BUGGY]  getNumberOfSuccesses()  -  getPopulationSize()  +  1);  [BUGGY]    return  FastMath.max(0,        getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  }  [CLASS]  HypergeometricDistribution  [METHOD]  getSupportLowerBound  [RETURN_TYPE]  int  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	308	309	1	replace	getNumberOfSuccesses()  -  getPopulationSize()  +  1);	      getNumberOfSuccesses()    -    getPopulationSize());    	non-compiled	[CE]  not  a  statement	61	None
423	[BUG]  [BUGGY]  getNumberOfSuccesses()  *  getPopulationSize());  [CE]  not  a  statement  [CONTEXT]    public  int  getSupportLowerBound()  {    [BUGGY]  getNumberOfSuccesses()  *  getPopulationSize());  [BUGGY]    return  FastMath.max(0,        getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  }  [CLASS]  HypergeometricDistribution  [METHOD]  getSupportLowerBound  [RETURN_TYPE]  int  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	308	309	1	replace	getNumberOfSuccesses()  *  getPopulationSize());	      getNumberOfSuccesses()    -    getPopulationSize());    	non-compiled	[CE]  not  a  statement	61	None
424	[BUG]  [BUGGY]  getPopulationSize()  -  getNumberOfSuccesses());  [CE]  not  a  statement  [CONTEXT]    public  int  getSupportLowerBound()  {    [BUGGY]  getPopulationSize()  -  getNumberOfSuccesses());  [BUGGY]    return  FastMath.max(0,        getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  }  [CLASS]  HypergeometricDistribution  [METHOD]  getSupportLowerBound  [RETURN_TYPE]  int  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	308	309	1	replace	getPopulationSize()  -  getNumberOfSuccesses());	      getNumberOfSuccesses()    -    getPopulationSize());    	non-compiled	[CE]  not  a  statement	61	None
431	[BUG]  [BUGGY]      int  populationSize  =  getNumberOfSuccesses();  int  populationSize  =  getPopulationSize();  [CE]  variable  populationSize  is  already  defined  in  method  getSupportLowerBound()  [CONTEXT]    public  int  getSupportLowerBound()  {    [BUGGY]      int  populationSize  =  getNumberOfSuccesses();  int  populationSize  =  getPopulationSize();  [BUGGY]    return  FastMath.max(0,        getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  }  [CLASS]  HypergeometricDistribution  [METHOD]  getSupportLowerBound  [RETURN_TYPE]  int  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	308	309	1	replace	        int    populationSize    =    getNumberOfSuccesses();    int  populationSize  =  getPopulationSize();	  	non-compiled	[CE]  variable  populationSize  is  already  defined  in  method  getSupportLowerBound()	65	None
432	[BUG]  [BUGGY]      int  populationSize  =  getNumberOfSuccesses();  int  populationSize  =  getNumberOfSuccesses();  [CE]  variable  populationSize  is  already  defined  in  method  getSupportLowerBound()  [CONTEXT]    public  int  getSupportLowerBound()  {    [BUGGY]      int  populationSize  =  getNumberOfSuccesses();  int  populationSize  =  getNumberOfSuccesses();  [BUGGY]    return  FastMath.max(0,        getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  }  [CLASS]  HypergeometricDistribution  [METHOD]  getSupportLowerBound  [RETURN_TYPE]  int  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	308	309	1	replace	        int    populationSize    =    getNumberOfSuccesses();    int  populationSize  =  getNumberOfSuccesses();	  	non-compiled	[CE]  variable  populationSize  is  already  defined  in  method  getSupportLowerBound()	65	None
433	[BUG]  [BUGGY]  [FE]  AssertionError  testMath1021  [CONTEXT]    public  int  getSupportLowerBound()  {    [BUGGY]      int  populationSize  =  getNumberOfSuccesses();  int  numberOfSuccesses  =  getNumberOfSuccesses();  [BUGGY]    return  FastMath.max(0,        getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  }  [CLASS]  HypergeometricDistribution  [METHOD]  getSupportLowerBound  [RETURN_TYPE]  int  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	308	309	1	add	        int    populationSize    =    getNumberOfSuccesses();    int  numberOfSuccesses  =  getNumberOfSuccesses();	  	compilable	  [FE]  AssertionError  testMath1021	65	1
434	[BUG]  [BUGGY]      int  populationSize  =  getNumberOfSuccesses();  int  numberOfSuccesses  =  getNumberOfSuccesses();  [FE]  AssertionError  testMath1021  [CONTEXT]    public  int  getSupportLowerBound()  {    [BUGGY]      int  populationSize  =  getNumberOfSuccesses();  int  numberOfSuccesses  =  getNumberOfSuccesses();  [BUGGY]    return  FastMath.max(0,        getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  }  [CLASS]  HypergeometricDistribution  [METHOD]  getSupportLowerBound  [RETURN_TYPE]  int  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	308	309	1	replace	        int    populationSize    =    getNumberOfSuccesses();    int  numberOfSuccesses  =  getNumberOfSuccesses();	  	compilable	  [FE]  AssertionError  testMath1021	65	1
434	[BUG]  [BUGGY]  [FE]  AssertionError  testMath1021  [CONTEXT]    public  int  getSupportLowerBound()  {    [BUGGY]      int  populationSize  =  getNumberOfSuccesses();  int  numberOfSuccesses  =  getPopulationSize();  [BUGGY]    return  FastMath.max(0,        getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  }  [CLASS]  HypergeometricDistribution  [METHOD]  getSupportLowerBound  [RETURN_TYPE]  int  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	308	309	1	add	        int    populationSize    =    getNumberOfSuccesses();    int  numberOfSuccesses  =  getPopulationSize();	  	compilable	  [FE]  AssertionError  testMath1021	65	1
435	[BUG]  [BUGGY]      int  populationSize  =  getNumberOfSuccesses();  int  numberOfSuccesses  =  getPopulationSize();  [FE]  AssertionError  testMath1021  [CONTEXT]    public  int  getSupportLowerBound()  {    [BUGGY]      int  populationSize  =  getNumberOfSuccesses();  int  numberOfSuccesses  =  getPopulationSize();  [BUGGY]    return  FastMath.max(0,        getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  }  [CLASS]  HypergeometricDistribution  [METHOD]  getSupportLowerBound  [RETURN_TYPE]  int  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	308	309	1	replace	        int    populationSize    =    getNumberOfSuccesses();    int  numberOfSuccesses  =  getPopulationSize();	  	compilable	  [FE]  AssertionError  testMath1021	65	1
435	[BUG]  [BUGGY]      int  populationSize  =  getNumberOfSuccesses();  int  populationSize  =  getNumberOfSuccesses()  -  getPopulationSize();  [CE]  variable  populationSize  is  already  defined  in  method  getSupportLowerBound()  [CONTEXT]    public  int  getSupportLowerBound()  {    [BUGGY]      int  populationSize  =  getNumberOfSuccesses();  int  populationSize  =  getNumberOfSuccesses()  -  getPopulationSize();  [BUGGY]    return  FastMath.max(0,        getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  }  [CLASS]  HypergeometricDistribution  [METHOD]  getSupportLowerBound  [RETURN_TYPE]  int  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	308	309	1	replace	        int    populationSize    =    getNumberOfSuccesses();    int  populationSize  =  getNumberOfSuccesses()  -  getPopulationSize();	  	non-compiled	[CE]  variable  populationSize  is  already  defined  in  method  getSupportLowerBound()	65	None
443	[BUG]  [BUGGY]  [FE]  AssertionError  testMath1021  [CONTEXT]    public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();    [BUGGY]  numericalVarianceIsCalculated  =(numericalVariance!=  0)?  numericalVarianceIsCalculated  :  false;  [BUGGY]    }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	281	281	1	add	numericalVarianceIsCalculated  =(numericalVariance!=  0)?  numericalVarianceIsCalculated  :  false;	  numericalVarianceIsCalculated    =(numericalVariance    ==    0)?    numericalVarianceIsCalculated    :    false;    	compilable	  [FE]  AssertionError  testMath1021	394	1
444	[BUG]  [BUGGY]  numericalVarianceIsCalculated  =(numericalVariance!=  0)?  numericalVarianceIsCalculated  :  false;  [FE]  AssertionError  testMath1021  [CONTEXT]    public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();    [BUGGY]  numericalVarianceIsCalculated  =(numericalVariance!=  0)?  numericalVarianceIsCalculated  :  false;  [BUGGY]    }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	281	281	1	replace	numericalVarianceIsCalculated  =(numericalVariance!=  0)?  numericalVarianceIsCalculated  :  false;	  numericalVarianceIsCalculated    =(numericalVariance    ==    0)?    numericalVarianceIsCalculated    :    false;    	compilable	  [FE]  AssertionError  testMath1021	394	1
451	[BUG]  [BUGGY]  if(!numericalVarianceIsCalculated)  {  [CE]  illegal  start  of  expression  [CONTEXT]    public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }    [BUGGY]  if(!numericalVarianceIsCalculated)  {  [BUGGY]    return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	283	283	1	replace	if(!numericalVarianceIsCalculated)  {	      if(!numericalVarianceIsCalculated)    {    if(!numericalVarianceIsCalculated)    {    numericalVariance    =    calculateNumberOfSuccesses();    if(!numericalVarianceIsCalculated)    {    numericalVariance    	non-compiled	[CE]  illegal  start  of  expression	105	None
453	[BUG]  [BUGGY]  if(!numericalVarianceIsCalculated)  {  if(!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumberOfSuccesses();  if(!numericalVarianceIsCalculated)  {  [CE]  illegal  start  of  expression  [CONTEXT]    public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }    [BUGGY]  if(!numericalVarianceIsCalculated)  {  if(!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumberOfSuccesses();  if(!numericalVarianceIsCalculated)  {  [BUGGY]    return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	283	283	1	replace	if(!numericalVarianceIsCalculated)  {  if(!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumberOfSuccesses();  if(!numericalVarianceIsCalculated)  {	      if(!numericalVarianceIsCalculated)    {    if(!numericalVarianceIsCalculated)    {    numericalVariance    =    calculateNumberOfSuccesses();    if(!numericalVarianceIsCalculated)    {    numericalVariance    	non-compiled	[CE]  illegal  start  of  expression	105	None
454	[BUG]  [BUGGY]  if(!numericalVarianceIsCalculated)  {  if(!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumberOfSuccesses();  if(!numericalVarianceIsCalculated)  {  numericalV  [CE]  not  a  statement  [CONTEXT]    public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }    [BUGGY]  if(!numericalVarianceIsCalculated)  {  if(!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumberOfSuccesses();  if(!numericalVarianceIsCalculated)  {  numericalV  [BUGGY]    return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	283	283	1	replace	if(!numericalVarianceIsCalculated)  {  if(!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumberOfSuccesses();  if(!numericalVarianceIsCalculated)  {  numericalV	      if(!numericalVarianceIsCalculated)    {    if(!numericalVarianceIsCalculated)    {    numericalVariance    =    calculateNumberOfSuccesses();    if(!numericalVarianceIsCalculated)    {    numericalVariance    	non-compiled	[CE]  not  a  statement	105	None
461	[BUG]  [BUGGY]  if(numericalVarianceIsCalculated)  {  if(numericalVariance  ==  null)  {  [CE]  illegal  start  of  expression  [CONTEXT]    public  double  getNumericalVariance()  {    [BUGGY]  if(numericalVarianceIsCalculated)  {  if(numericalVariance  ==  null)  {  [BUGGY]    numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	279	279	1	replace	if(numericalVarianceIsCalculated)    {    if(numericalVariance  ==  null)  {	  	non-compiled	[CE]  illegal  start  of  expression	22	None
462	[BUG]  [BUGGY]  if(numericalVarianceIsCalculated)  {  if(!numericalVarianceIsCalculated)  {  [CE]  illegal  start  of  expression  [CONTEXT]    public  double  getNumericalVariance()  {    [BUGGY]  if(numericalVarianceIsCalculated)  {  if(!numericalVarianceIsCalculated)  {  [BUGGY]    numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	279	279	1	replace	if(numericalVarianceIsCalculated)    {    if(!numericalVarianceIsCalculated)  {	  	non-compiled	[CE]  illegal  start  of  expression	22	None
463	[BUG]  [BUGGY]  if(numericalVarianceIsCalculated)  {  if(numberOfSuccesses  >  0)  {  [CE]  illegal  start  of  expression  [CONTEXT]    public  double  getNumericalVariance()  {    [BUGGY]  if(numericalVarianceIsCalculated)  {  if(numberOfSuccesses  >  0)  {  [BUGGY]    numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	279	279	1	replace	if(numericalVarianceIsCalculated)    {    if(numberOfSuccesses  >  0)  {	  	non-compiled	[CE]  illegal  start  of  expression	22	None
464	[BUG]  [BUGGY]  if(numericalVarianceIsCalculated)  {  if(numericalVariance!=  null)  {  [CE]  illegal  start  of  expression  [CONTEXT]    public  double  getNumericalVariance()  {    [BUGGY]  if(numericalVarianceIsCalculated)  {  if(numericalVariance!=  null)  {  [BUGGY]    numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	279	279	1	replace	if(numericalVarianceIsCalculated)    {    if(numericalVariance!=  null)  {	  	non-compiled	[CE]  illegal  start  of  expression	22	None
465	[BUG]  [BUGGY]  if(numericalVarianceIsCalculated)  {  if(numericalVariance  <  null)  {  [CE]  illegal  start  of  expression  [CONTEXT]    public  double  getNumericalVariance()  {    [BUGGY]  if(numericalVarianceIsCalculated)  {  if(numericalVariance  <  null)  {  [BUGGY]    numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	279	279	1	replace	if(numericalVarianceIsCalculated)    {    if(numericalVariance  <  null)  {	  	non-compiled	[CE]  illegal  start  of  expression	22	None
474	[BUG]  [BUGGY]  if(!numericalVarianceIsCalculated)  {  if(!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateStdNumericVariance();  }  [CE]  illegal  start  of  expression  [CONTEXT]    public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();    [BUGGY]  if(!numericalVarianceIsCalculated)  {  if(!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateStdNumericVariance();  }  [BUGGY]    }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	281	281	1	replace	if(!numericalVarianceIsCalculated)  {  if(!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateStdNumericVariance();  }	      	non-compiled	[CE]  illegal  start  of  expression	126	None
481	[BUG]  [BUGGY]  numericalVariance  =  Math.max(numberOfSuccesses,  getSampleSize());  [CE]  missing  return  statement  [CONTEXT]    public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }    [BUGGY]  numericalVariance  =  Math.max(numberOfSuccesses,  getSampleSize());  [BUGGY]    }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	283	283	1	replace	numericalVariance  =  Math.max(numberOfSuccesses,  getSampleSize());	  return    numericalVariance    /(numericalVarianceIsCalculated));    	non-compiled	[CE]  missing  return  statement	154	None
482	[BUG]  [BUGGY]  numericalVariance  =  Math.max(numberOfSuccesses,  getPopulationSize()  -  1);  [CE]  missing  return  statement  [CONTEXT]    public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }    [BUGGY]  numericalVariance  =  Math.max(numberOfSuccesses,  getPopulationSize()  -  1);  [BUGGY]    }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	283	283	1	replace	numericalVariance  =  Math.max(numberOfSuccesses,  getPopulationSize()  -  1);	  return    numericalVariance    /(numericalVarianceIsCalculated));    	non-compiled	[CE]  missing  return  statement	154	None
483	[BUG]  [BUGGY]  numericalVariance  =  Math.max(numberOfSuccesses,  getPopulationSize()  /  2);  [CE]  missing  return  statement  [CONTEXT]    public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }    [BUGGY]  numericalVariance  =  Math.max(numberOfSuccesses,  getPopulationSize()  /  2);  [BUGGY]    }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	283	283	1	replace	numericalVariance  =  Math.max(numberOfSuccesses,  getPopulationSize()  /  2);	  return    numericalVariance    /(numericalVarianceIsCalculated));    	non-compiled	[CE]  missing  return  statement	154	None
484	[BUG]  [BUGGY]  numericalVariance  =  Math.max(numberOfSuccesses,  getPopulationSize()  /  2.0);  [CE]  missing  return  statement  [CONTEXT]    public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }    [BUGGY]  numericalVariance  =  Math.max(numberOfSuccesses,  getPopulationSize()  /  2.0);  [BUGGY]    }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	283	283	1	replace	numericalVariance  =  Math.max(numberOfSuccesses,  getPopulationSize()  /  2.0);	  return    numericalVariance    /(numericalVarianceIsCalculated));    	non-compiled	[CE]  missing  return  statement	154	None
491	[BUG]  [BUGGY]  [FE]  AssertionError  testMoments  [CONTEXT]    public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {    [BUGGY]  final  double  k  =  getNumberOfSuccesses();  [BUGGY]    numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	280	280	1	add	final  double  k  =  getNumberOfSuccesses();	      if(!numericalVarianceIsCalculated)    {    if(!numericalVarianceIsCalculated)    {    numericalVariance    =    calculateNumberOfSuccesses();    }    	compilable	  [FE]  AssertionError  testMoments	42	1
492	[BUG]  [BUGGY]  final  double  k  =  getNumberOfSuccesses();  [FE]  AssertionError  testMoments  [CONTEXT]    public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {    [BUGGY]  final  double  k  =  getNumberOfSuccesses();  [BUGGY]    numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	280	280	1	replace	final  double  k  =  getNumberOfSuccesses();	      if(!numericalVarianceIsCalculated)    {    if(!numericalVarianceIsCalculated)    {    numericalVariance    =    calculateNumberOfSuccesses();    }    	compilable	  [FE]  AssertionError  testMoments	42	1
492	[BUG]  [BUGGY]  [FE]  AssertionError  testMoments  [CONTEXT]    public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {    [BUGGY]  final  double  k  =  getPopulationSize();  [BUGGY]    numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	280	280	1	add	final  double  k  =  getPopulationSize();	      if(!numericalVarianceIsCalculated)    {    if(!numericalVarianceIsCalculated)    {    numericalVariance    =    calculateNumberOfSuccesses();    }    	compilable	  [FE]  AssertionError  testMoments	42	1
493	[BUG]  [BUGGY]  final  double  k  =  getPopulationSize();  [FE]  AssertionError  testMoments  [CONTEXT]    public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {    [BUGGY]  final  double  k  =  getPopulationSize();  [BUGGY]    numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	280	280	1	replace	final  double  k  =  getPopulationSize();	      if(!numericalVarianceIsCalculated)    {    if(!numericalVarianceIsCalculated)    {    numericalVariance    =    calculateNumberOfSuccesses();    }    	compilable	  [FE]  AssertionError  testMoments	42	1
493	[BUG]  [BUGGY]  final  double  k  =  getSize();  [CE]  cannot  find  symbol  [CONTEXT]    public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {    [BUGGY]  final  double  k  =  getSize();  [BUGGY]    numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	280	280	1	replace	final  double  k  =  getSize();	      if(!numericalVarianceIsCalculated)    {    if(!numericalVarianceIsCalculated)    {    numericalVariance    =    calculateNumberOfSuccesses();    }    	non-compiled	[CE]  cannot  find  symbol	42	None
494	[BUG]  [BUGGY]  final  double  k  =  getDecimalOfSuccesses();  [CE]  cannot  find  symbol  [CONTEXT]    public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {    [BUGGY]  final  double  k  =  getDecimalOfSuccesses();  [BUGGY]    numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	280	280	1	replace	final  double  k  =  getDecimalOfSuccesses();	      if(!numericalVarianceIsCalculated)    {    if(!numericalVarianceIsCalculated)    {    numericalVariance    =    calculateNumberOfSuccesses();    }    	non-compiled	[CE]  cannot  find  symbol	42	None
504	[BUG]  [BUGGY]  [FE]  AssertionError  testMoments  [CONTEXT]    protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();  final  double  m  =  getNumberOfSuccesses();    [BUGGY]  final  int  n  =  getPopulationSize();  [BUGGY]    final  double  n  =  getSampleSize();  return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	294	294	1	add	final  int  n  =  getPopulationSize();	      final    int    N    =    getPopulationSize();    	compilable	  [FE]  AssertionError  testMoments	54	1
505	[BUG]  [BUGGY]  final  int  n  =  getPopulationSize();  [FE]  AssertionError  testMoments  [CONTEXT]    protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();  final  double  m  =  getNumberOfSuccesses();    [BUGGY]  final  int  n  =  getPopulationSize();  [BUGGY]    final  double  n  =  getSampleSize();  return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	294	294	1	replace	final  int  n  =  getPopulationSize();	      final    int    N    =    getPopulationSize();    	compilable	  [FE]  AssertionError  testMoments	54	1
512	[BUG]  [BUGGY]  return  numericalVariance  *(numericalVarianceIsCalculated));  [CE]  ';'  expected  [CONTEXT]    public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }    [BUGGY]  return  numericalVariance  *(numericalVarianceIsCalculated));  [BUGGY]    }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	283	283	1	replace	return  numericalVariance  *(numericalVarianceIsCalculated));	  return    numericalVariance    /(numericalVarianceIsCalculated));    	non-compiled	[CE]  ';'  expected	154	None
513	[BUG]  [BUGGY]  return  numericalVariance  /(numericalVarianceIsCalculated)+  1;  [CE]  bad  operand  types  for  binary  operator  '/'  [CONTEXT]    public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }    [BUGGY]  return  numericalVariance  /(numericalVarianceIsCalculated)+  1;  [BUGGY]    }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	283	283	1	replace	return  numericalVariance  /(numericalVarianceIsCalculated)+  1;	  return    numericalVariance    /(numericalVarianceIsCalculated));    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '/'	154	None
514	[BUG]  [BUGGY]  return  numberOfSuccesses  /(numericalVarianceIsCalculated));  [CE]  ';'  expected  [CONTEXT]    public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }    [BUGGY]  return  numberOfSuccesses  /(numericalVarianceIsCalculated));  [BUGGY]    }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	283	283	1	replace	return  numberOfSuccesses  /(numericalVarianceIsCalculated));	  return    numericalVariance    /(numericalVarianceIsCalculated));    	non-compiled	[CE]  ';'  expected	154	None
523	[BUG]  [BUGGY]  if(!numericalVarianceIsCalculated)  {  if(!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();  if(!numericalVarianceIsCalculated)  {  numericalVariance  =  [CE]  illegal  start  of  expression  [CONTEXT]    public  double  getNumericalVariance()  {    [BUGGY]  if(!numericalVarianceIsCalculated)  {  if(!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();  if(!numericalVarianceIsCalculated)  {  numericalVariance  =  [BUGGY]    if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	279	279	1	replace	if(!numericalVarianceIsCalculated)  {  if(!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();  if(!numericalVarianceIsCalculated)  {  numericalVariance  =	      if(!numericalVarianceIsCalculated)    {    if(!numericalVarianceIsCalculated)    {    numericalVariance    =    calculateNumberOfSuccesses();    }    	non-compiled	[CE]  illegal  start  of  expression	13	None
524	[BUG]  [BUGGY]  if(!numericalVarianceIsCalculated)  {  if(!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumberOfSuccesses();  bodied  [CE]  illegal  start  of  expression  [CONTEXT]    public  double  getNumericalVariance()  {    [BUGGY]  if(!numericalVarianceIsCalculated)  {  if(!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumberOfSuccesses();  bodied  [BUGGY]    if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	279	279	1	replace	if(!numericalVarianceIsCalculated)  {  if(!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumberOfSuccesses();  bodied	      if(!numericalVarianceIsCalculated)    {    if(!numericalVarianceIsCalculated)    {    numericalVariance    =    calculateNumberOfSuccesses();    }    	non-compiled	[CE]  illegal  start  of  expression	13	None
532	[BUG]  [BUGGY]  N  =  getNumberOfSuccesses();  [CE]  cannot  assign  a  value  to  final  variable  N  [CONTEXT]    protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();  final  double  m  =  getNumberOfSuccesses();  final  double  n  =  getSampleSize();    [BUGGY]  N  =  getNumberOfSuccesses();  [BUGGY]    return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	295	295	1	replace	N  =  getNumberOfSuccesses();	      n    =    getNumberOfSuccesses();    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  N	361	None
541	[BUG]  [BUGGY]  double  numericalVariance  =  Math.max(getNumberOfSuccesses(),  1);  [CE]  illegal  start  of  type  [CONTEXT]    public  double  getNumericalVariance()  {    [BUGGY]  double  numericalVariance  =  Math.max(getNumberOfSuccesses(),  1);  [BUGGY]    if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	279	279	1	replace	double  numericalVariance  =  Math.max(getNumberOfSuccesses(),  1);	      double    numericalVariance    =    Math.max(getNumberOfSuccesses(),    numberOfSuccesses);    	non-compiled	[CE]  illegal  start  of  type	543	None
542	[BUG]  [BUGGY]  double  numericalVariance  =  Math.max(getNumberOfSuccesses(),  0);  [CE]  illegal  start  of  type  [CONTEXT]    public  double  getNumericalVariance()  {    [BUGGY]  double  numericalVariance  =  Math.max(getNumberOfSuccesses(),  0);  [BUGGY]    if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	279	279	1	replace	double  numericalVariance  =  Math.max(getNumberOfSuccesses(),  0);	      double    numericalVariance    =    Math.max(getNumberOfSuccesses(),    numberOfSuccesses);    	non-compiled	[CE]  illegal  start  of  type	543	None
543	[BUG]  [BUGGY]  double  numericalVariance  =  Math.max(getNumberOfSuccesses(),  numberOfSuccesses  -  1);  [CE]  illegal  start  of  type  [CONTEXT]    public  double  getNumericalVariance()  {    [BUGGY]  double  numericalVariance  =  Math.max(getNumberOfSuccesses(),  numberOfSuccesses  -  1);  [BUGGY]    if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	279	279	1	replace	double  numericalVariance  =  Math.max(getNumberOfSuccesses(),  numberOfSuccesses  -  1);	      double    numericalVariance    =    Math.max(getNumberOfSuccesses(),    numberOfSuccesses);    	non-compiled	[CE]  illegal  start  of  type	543	None
551	[BUG]  [BUGGY]  numericalVariance  =  getNumberOfSuccesses()  /(numberOfSuccesses  -  1));  [CE]  ';'  expected  [CONTEXT]    public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }    [BUGGY]  numericalVariance  =  getNumberOfSuccesses()  /(numberOfSuccesses  -  1));  [BUGGY]    return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	283	283	1	replace	numericalVariance  =  getNumberOfSuccesses()  /(numberOfSuccesses  -  1));	      if(!numericalVarianceIsCalculated)    {    if(!numericalVarianceIsCalculated)    {    numericalVariance    =    false;    }    	non-compiled	[CE]  ';'  expected	103	None
553	[BUG]  [BUGGY]  numericalVariance  =  getNumberOfSuccesses()  *(numberOfSuccesses  /  1));  [CE]  ';'  expected  [CONTEXT]    public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }    [BUGGY]  numericalVariance  =  getNumberOfSuccesses()  *(numberOfSuccesses  /  1));  [BUGGY]    return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	283	283	1	replace	numericalVariance  =  getNumberOfSuccesses()  *(numberOfSuccesses  /  1));	      if(!numericalVarianceIsCalculated)    {    if(!numericalVarianceIsCalculated)    {    numericalVariance    =    false;    }    	non-compiled	[CE]  ';'  expected	103	None
554	[BUG]  [BUGGY]  numericalVariance  =  calculateNumberOfSuccesses()  *(numberOfSuccesses  -  1));  [CE]  ';'  expected  [CONTEXT]    public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }    [BUGGY]  numericalVariance  =  calculateNumberOfSuccesses()  *(numberOfSuccesses  -  1));  [BUGGY]    return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	283	283	1	replace	numericalVariance  =  calculateNumberOfSuccesses()  *(numberOfSuccesses  -  1));	      if(!numericalVarianceIsCalculated)    {    if(!numericalVarianceIsCalculated)    {    numericalVariance    =    false;    }    	non-compiled	[CE]  ';'  expected	103	None
561	[BUG]  [BUGGY]  [FE]  AssertionError  testMoments  [CONTEXT]    public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {    [BUGGY]  final  double  dx  =  getNumberOfSuccesses();  [BUGGY]    numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	280	280	1	add	final  double  dx  =  getNumberOfSuccesses();	      if(!numericalVarianceIsCalculated)    {    if(!numericalVarianceIsCalculated)    {    throw    new    IllegalArgumentException(   "   ");    }    	compilable	  [FE]  AssertionError  testMoments	44	1
562	[BUG]  [BUGGY]  final  double  dx  =  getNumberOfSuccesses();  [FE]  AssertionError  testMoments  [CONTEXT]    public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {    [BUGGY]  final  double  dx  =  getNumberOfSuccesses();  [BUGGY]    numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	280	280	1	replace	final  double  dx  =  getNumberOfSuccesses();	      if(!numericalVarianceIsCalculated)    {    if(!numericalVarianceIsCalculated)    {    throw    new    IllegalArgumentException(   "   ");    }    	compilable	  [FE]  AssertionError  testMoments	44	1
562	[BUG]  [BUGGY]  final  double  dx  =  getDomainOfSuccesses();  [CE]  cannot  find  symbol  [CONTEXT]    public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {    [BUGGY]  final  double  dx  =  getDomainOfSuccesses();  [BUGGY]    numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	280	280	1	replace	final  double  dx  =  getDomainOfSuccesses();	      if(!numericalVarianceIsCalculated)    {    if(!numericalVarianceIsCalculated)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  cannot  find  symbol	44	None
563	[BUG]  [BUGGY]  final  double  dx  =  getDoubleOfSuccesses();  [CE]  cannot  find  symbol  [CONTEXT]    public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {    [BUGGY]  final  double  dx  =  getDoubleOfSuccesses();  [BUGGY]    numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	280	280	1	replace	final  double  dx  =  getDoubleOfSuccesses();	      if(!numericalVarianceIsCalculated)    {    if(!numericalVarianceIsCalculated)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  cannot  find  symbol	44	None
564	[BUG]  [BUGGY]  final  double  dx  =  getDomainSize();  [CE]  cannot  find  symbol  [CONTEXT]    public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {    [BUGGY]  final  double  dx  =  getDomainSize();  [BUGGY]    numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	280	280	1	replace	final  double  dx  =  getDomainSize();	      if(!numericalVarianceIsCalculated)    {    if(!numericalVarianceIsCalculated)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  cannot  find  symbol	44	None
573	[BUG]  [BUGGY]  final  double  dx  =  getDecimalSize();  [CE]  cannot  find  symbol  [CONTEXT]    protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();  final  double  m  =  getNumberOfSuccesses();    [BUGGY]  final  double  dx  =  getDecimalSize();  [BUGGY]    final  double  n  =  getSampleSize();  return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	294	294	1	replace	final  double  dx  =  getDecimalSize();	      final    double    k    =    getDecimalSize();    	non-compiled	[CE]  cannot  find  symbol	304	None
574	[BUG]  [BUGGY]  final  int  k  =  getDecimalSize();  [CE]  cannot  find  symbol  [CONTEXT]    protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();  final  double  m  =  getNumberOfSuccesses();    [BUGGY]  final  int  k  =  getDecimalSize();  [BUGGY]    final  double  n  =  getSampleSize();  return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	294	294	1	replace	final  int  k  =  getDecimalSize();	      final    double    k    =    getDecimalSize();    	non-compiled	[CE]  cannot  find  symbol	304	None
581	[BUG]  [BUGGY]  [FE]  AssertionError  testMath1021  [CONTEXT]    public  double  getNumericalVariance()  {    [BUGGY]  if(numberOfSuccesses  >  0)  {  if(!numericalVarianceIsCalculated)  {  numericalVariance  =  Math.abs(numberOfSuccesses  -  1);  }  [BUGGY]    if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	279	279	1	add	if(numberOfSuccesses  >  0)  {  if(!numericalVarianceIsCalculated)  {  numericalVariance  =  Math.abs(numberOfSuccesses  -  1);  }	      double    numericalVariance    =    getNumberOfSuccesses()    /    2.0;    	compilable	  [FE]  AssertionError  testMath1021	4	1
582	[BUG]  [BUGGY]  if(numberOfSuccesses  >  0)  {  if(!numericalVarianceIsCalculated)  {  numericalVariance  =  Math.abs(numberOfSuccesses  -  1);  }  [FE]  AssertionError  testMath1021  [CONTEXT]    public  double  getNumericalVariance()  {    [BUGGY]  if(numberOfSuccesses  >  0)  {  if(!numericalVarianceIsCalculated)  {  numericalVariance  =  Math.abs(numberOfSuccesses  -  1);  }  [BUGGY]    if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	279	279	1	replace	if(numberOfSuccesses  >  0)  {  if(!numericalVarianceIsCalculated)  {  numericalVariance  =  Math.abs(numberOfSuccesses  -  1);  }	      double    numericalVariance    =    getNumberOfSuccesses()    /    2.0;    	compilable	  [FE]  AssertionError  testMath1021	4	1
583	[BUG]  [BUGGY]  if(numberOfSuccesses  >  0)  {  if(!numericalVarianceIsCalculated)  {  numericalVariance  =  Math.min(numberOfSuccesses  -  1);  }  [CE]  no  suitable  method  found  for  min(int)  [CONTEXT]    public  double  getNumericalVariance()  {    [BUGGY]  if(numberOfSuccesses  >  0)  {  if(!numericalVarianceIsCalculated)  {  numericalVariance  =  Math.min(numberOfSuccesses  -  1);  }  [BUGGY]    if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	279	279	1	replace	if(numberOfSuccesses  >  0)  {  if(!numericalVarianceIsCalculated)  {  numericalVariance  =  Math.min(numberOfSuccesses  -  1);  }	      double    numericalVariance    =    getNumberOfSuccesses()    /    2.0;    	non-compiled	[CE]  no  suitable  method  found  for  min(int)	4	None
584	[BUG]  [BUGGY]  numericalVariance  =  Math.abs(numberOfSuccesses  -  1);  [CE]  illegal  start  of  type  [CONTEXT]    public  double  getNumericalVariance()  {    [BUGGY]  numericalVariance  =  Math.abs(numberOfSuccesses  -  1);  [BUGGY]    if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	279	279	1	replace	numericalVariance  =  Math.abs(numberOfSuccesses  -  1);	      double    numericalVariance    =    getNumberOfSuccesses()    /    2.0;    	non-compiled	[CE]  illegal  start  of  type	4	None
592	[BUG]  [BUGGY]  final  double  dx  =  getDecimalValue();  [CE]  cannot  find  symbol  [CONTEXT]    protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();  final  double  m  =  getNumberOfSuccesses();    [BUGGY]  final  double  dx  =  getDecimalValue();  [BUGGY]    final  double  n  =  getSampleSize();  return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	294	294	1	replace	final  double  dx  =  getDecimalValue();	      final    double    k    =    getDecimalValue();    	non-compiled	[CE]  cannot  find  symbol	484	None
593	[BUG]  [BUGGY]  final  double  n  =  getDecimalValue();  [CE]  cannot  find  symbol  [CONTEXT]    protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();  final  double  m  =  getNumberOfSuccesses();    [BUGGY]  final  double  n  =  getDecimalValue();  [BUGGY]    final  double  n  =  getSampleSize();  return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	294	294	1	replace	final  double  n  =  getDecimalValue();	      final    double    k    =    getDecimalValue();    	non-compiled	[CE]  cannot  find  symbol	484	None
594	[BUG]  [BUGGY]  final  int  k  =  getDecimalValue();  [CE]  cannot  find  symbol  [CONTEXT]    protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();  final  double  m  =  getNumberOfSuccesses();    [BUGGY]  final  int  k  =  getDecimalValue();  [BUGGY]    final  double  n  =  getSampleSize();  return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	294	294	1	replace	final  int  k  =  getDecimalValue();	      final    double    k    =    getDecimalValue();    	non-compiled	[CE]  cannot  find  symbol	484	None
602	[BUG]  [BUGGY]  numericalVariance  =  calculateNumberOfSuccesses(),  numberOfSuccesses;  [CE]  ';'  expected  [CONTEXT]    public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {    [BUGGY]  numericalVariance  =  calculateNumberOfSuccesses(),  numberOfSuccesses;  [BUGGY]    numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	280	280	1	replace	numericalVariance  =  calculateNumberOfSuccesses(),  numberOfSuccesses;	  numericalVariance    =    calculateNumberOfSuccesses();    	non-compiled	[CE]  ';'  expected	32	None
603	[BUG]  [BUGGY]  numericalVariance  =  calculateNumberOfSuccesses(),  sampleSize);  [CE]  ';'  expected  [CONTEXT]    public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {    [BUGGY]  numericalVariance  =  calculateNumberOfSuccesses(),  sampleSize);  [BUGGY]    numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	280	280	1	replace	numericalVariance  =  calculateNumberOfSuccesses(),  sampleSize);	  numericalVariance    =    calculateNumberOfSuccesses();    	non-compiled	[CE]  ';'  expected	32	None
604	[BUG]  [BUGGY]  numericalVariance  =  calculateNumberOfSuccesses(),  numberOfSuccesses);  [CE]  ';'  expected  [CONTEXT]    public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {    [BUGGY]  numericalVariance  =  calculateNumberOfSuccesses(),  numberOfSuccesses);  [BUGGY]    numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	280	280	1	replace	numericalVariance  =  calculateNumberOfSuccesses(),  numberOfSuccesses);	  numericalVariance    =    calculateNumberOfSuccesses();    	non-compiled	[CE]  ';'  expected	32	None
614	[BUG]  [BUGGY]  numericalVarianceiisCalculated  =  false;  [CE]  cannot  find  symbol  numericalVarianceiisCalculated  [CONTEXT]    public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();    [BUGGY]  numericalVarianceiisCalculated  =  false;  [BUGGY]    }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	281	281	1	replace	numericalVarianceiisCalculated  =  false;	  numericalVarianceIisCalculated    =    false;    	non-compiled	[CE]  cannot  find  symbol  numericalVarianceiisCalculated	124	None
622	[BUG]  [BUGGY]  checkSupportLowerOfSuccesses();  [CE]  cannot  find  symbol  [CONTEXT]    public  int  getSupportLowerBound()  {    [BUGGY]  checkSupportLowerOfSuccesses();  [BUGGY]    return  FastMath.max(0,        getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  }  [CLASS]  HypergeometricDistribution  [METHOD]  getSupportLowerBound  [RETURN_TYPE]  int  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	308	309	1	replace	checkSupportLowerOfSuccesses();	      getPopulationSize();    	non-compiled	[CE]  cannot  find  symbol	274	None
623	[BUG]  [BUGGY]  checkNumberOfSuccesses(n);  [CE]  cannot  find  symbol  n  [CONTEXT]    public  int  getSupportLowerBound()  {    [BUGGY]  checkNumberOfSuccesses(n);  [BUGGY]    return  FastMath.max(0,        getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  }  [CLASS]  HypergeometricDistribution  [METHOD]  getSupportLowerBound  [RETURN_TYPE]  int  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	308	309	1	replace	checkNumberOfSuccesses(n);	      getPopulationSize();    	non-compiled	[CE]  cannot  find  symbol  n	274	None
624	[BUG]  [BUGGY]  checkNumberOfSuccesses(),  m;  [CE]  ';'  expected  [CONTEXT]    public  int  getSupportLowerBound()  {    [BUGGY]  checkNumberOfSuccesses(),  m;  [BUGGY]    return  FastMath.max(0,        getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  }  [CLASS]  HypergeometricDistribution  [METHOD]  getSupportLowerBound  [RETURN_TYPE]  int  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	308	309	1	replace	checkNumberOfSuccesses(),  m;	      getPopulationSize();    	non-compiled	[CE]  ';'  expected	274	None
632	[BUG]  [BUGGY]  numericalVariance  =  calculateNumberOfSuccesses(),  numberOfSuccesses;  [CE]  ';'  expected  [CONTEXT]    public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();    [BUGGY]  numericalVariance  =  calculateNumberOfSuccesses(),  numberOfSuccesses;  [BUGGY]    numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	281	281	1	replace	numericalVariance  =  calculateNumberOfSuccesses(),  numberOfSuccesses;	      numericalVariance    =    calculateNumberOfSuccesses();    	non-compiled	[CE]  ';'  expected	324	None
633	[BUG]  [BUGGY]  numericalVariance  =  calculateNumberOfSuccesses(),  populationSize);  [CE]  ';'  expected  [CONTEXT]    public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();    [BUGGY]  numericalVariance  =  calculateNumberOfSuccesses(),  populationSize);  [BUGGY]    numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	281	281	1	replace	numericalVariance  =  calculateNumberOfSuccesses(),  populationSize);	      numericalVariance    =    calculateNumberOfSuccesses();    	non-compiled	[CE]  ';'  expected	324	None
634	[BUG]  [BUGGY]  numericalVariance  =  calculateNumberOfSuccesses(),  numberOfSuccesses);  [CE]  ';'  expected  [CONTEXT]    public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();    [BUGGY]  numericalVariance  =  calculateNumberOfSuccesses(),  numberOfSuccesses);  [BUGGY]    numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	281	281	1	replace	numericalVariance  =  calculateNumberOfSuccesses(),  numberOfSuccesses);	      numericalVariance    =    calculateNumberOfSuccesses();    	non-compiled	[CE]  ';'  expected	324	None
642	[BUG]  [BUGGY]  getNumberOfSuccesses()  /  getPopulationSize();  [CE]  not  a  statement  [CONTEXT]    public  double  getNumericalMean()  {    [BUGGY]  getNumberOfSuccesses()  /  getPopulationSize();  [BUGGY]    return  (double)  (getSampleSize()  *  getNumberOfSuccesses())  /  (double)  getPopulationSize();  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalMean  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	268	268	1	replace	getNumberOfSuccesses()  /  getPopulationSize();	      getNumberOfSuccesses()    *    getPopulationSize();    	non-compiled	[CE]  not  a  statement	424	None
643	[BUG]  [BUGGY]  getNumberOfSuccesses()  *  getPopulationSize()  /  2;  [CE]  not  a  statement  [CONTEXT]    public  double  getNumericalMean()  {    [BUGGY]  getNumberOfSuccesses()  *  getPopulationSize()  /  2;  [BUGGY]    return  (double)  (getSampleSize()  *  getNumberOfSuccesses())  /  (double)  getPopulationSize();  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalMean  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	268	268	1	replace	getNumberOfSuccesses()  *  getPopulationSize()  /  2;	      getNumberOfSuccesses()    *    getPopulationSize();    	non-compiled	[CE]  not  a  statement	424	None
644	[BUG]  [BUGGY]  getNumberOfSuccesses()  *  getPopulationSize()  /  2.0;  [CE]  not  a  statement  [CONTEXT]    public  double  getNumericalMean()  {    [BUGGY]  getNumberOfSuccesses()  *  getPopulationSize()  /  2.0;  [BUGGY]    return  (double)  (getSampleSize()  *  getNumberOfSuccesses())  /  (double)  getPopulationSize();  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalMean  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	268	268	1	replace	getNumberOfSuccesses()  *  getPopulationSize()  /  2.0;	      getNumberOfSuccesses()    *    getPopulationSize();    	non-compiled	[CE]  not  a  statement	424	None
652	[BUG]  [BUGGY]  numericalVariance  =  calculateVariance(),  numberOfSuccesses;  [CE]  ';'  expected  [CONTEXT]    public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {    [BUGGY]  numericalVariance  =  calculateVariance(),  numberOfSuccesses;  [BUGGY]    numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	280	280	1	replace	numericalVariance  =  calculateVariance(),  numberOfSuccesses;	  numericalVariance    =    calculateVariance();    	non-compiled	[CE]  ';'  expected	573	None
653	[BUG]  [BUGGY]  numericalVariance  =  calculateVariance(),  probabilityOfSuccesses;  [CE]  ';'  expected  [CONTEXT]    public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {    [BUGGY]  numericalVariance  =  calculateVariance(),  probabilityOfSuccesses;  [BUGGY]    numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	280	280	1	replace	numericalVariance  =  calculateVariance(),  probabilityOfSuccesses;	  numericalVariance    =    calculateVariance();    	non-compiled	[CE]  ';'  expected	573	None
654	[BUG]  [BUGGY]  numericalVariance  =  calculateVariance(),  probabilityOfSuccesses);  [CE]  ';'  expected  [CONTEXT]    public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {    [BUGGY]  numericalVariance  =  calculateVariance(),  probabilityOfSuccesses);  [BUGGY]    numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	280	280	1	replace	numericalVariance  =  calculateVariance(),  probabilityOfSuccesses);	  numericalVariance    =    calculateVariance();    	non-compiled	[CE]  ';'  expected	573	None
662	[BUG]  [BUGGY]  getNumberOfSuccesses()  -  getPopulationSize()  +  1;  [CE]  not  a  statement  [CONTEXT]    public  int  getSupportLowerBound()  {    [BUGGY]  getNumberOfSuccesses()  -  getPopulationSize()  +  1;  [BUGGY]    return  FastMath.max(0,        getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  }  [CLASS]  HypergeometricDistribution  [METHOD]  getSupportLowerBound  [RETURN_TYPE]  int  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	308	309	1	replace	getNumberOfSuccesses()  -  getPopulationSize()  +  1;	      getNumberOfSuccesses()    -    getPopulationSize();    	non-compiled	[CE]  not  a  statement	271	None
663	[BUG]  [BUGGY]  getNumberOfSuccesses()  *  getPopulationSize();  [CE]  not  a  statement  [CONTEXT]    public  int  getSupportLowerBound()  {    [BUGGY]  getNumberOfSuccesses()  *  getPopulationSize();  [BUGGY]    return  FastMath.max(0,        getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  }  [CLASS]  HypergeometricDistribution  [METHOD]  getSupportLowerBound  [RETURN_TYPE]  int  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	308	309	1	replace	getNumberOfSuccesses()  *  getPopulationSize();	      getNumberOfSuccesses()    -    getPopulationSize();    	non-compiled	[CE]  not  a  statement	271	None
672	[BUG]  [BUGGY]  super.setNumberOfSuccesses(numberOfSuccesses);  [CE]  cannot  find  symbol  [CONTEXT]    public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {    [BUGGY]  super.setNumberOfSuccesses(numberOfSuccesses);  [BUGGY]    numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	280	280	1	replace	super.setNumberOfSuccesses(numberOfSuccesses);	      super.getNumberOfSuccesses();    	non-compiled	[CE]  cannot  find  symbol	241	None
673	[BUG]  [BUGGY]  super.setNumberOfSuccesses(null);  [CE]  cannot  find  symbol  [CONTEXT]    public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {    [BUGGY]  super.setNumberOfSuccesses(null);  [BUGGY]    numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	280	280	1	replace	super.setNumberOfSuccesses(null);	      super.getNumberOfSuccesses();    	non-compiled	[CE]  cannot  find  symbol	241	None
674	[BUG]  [BUGGY]  super.setNumberOfSuccesses(n  -  1);  [CE]  cannot  find  symbol  n  [CONTEXT]    public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {    [BUGGY]  super.setNumberOfSuccesses(n  -  1);  [BUGGY]    numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	280	280	1	replace	super.setNumberOfSuccesses(n  -  1);	      super.getNumberOfSuccesses();    	non-compiled	[CE]  cannot  find  symbol  n	241	None
682	[BUG]  [BUGGY]  final  double  m  =  getPopulationSize();  [CE]  variable  m  is  already  defined  in  method  calculateNumericalVariance()  [CONTEXT]    protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();  final  double  m  =  getNumberOfSuccesses();    [BUGGY]  final  double  m  =  getPopulationSize();  [BUGGY]    final  double  n  =  getSampleSize();  return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	294	294	1	replace	final  double  m  =  getPopulationSize();	      final    double    n    =    getPopulationSize();    	non-compiled	[CE]  variable  m  is  already  defined  in  method  calculateNumericalVariance()	52	None
684	[BUG]  [BUGGY]  final  double  y  =  getPopulationSize();  [CE]  cannot  find  symbol  n  [CONTEXT]    protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();  final  double  m  =  getNumberOfSuccesses();    [BUGGY]  final  double  y  =  getPopulationSize();  [BUGGY]    final  double  n  =  getSampleSize();  return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	294	294	1	replace	final  double  y  =  getPopulationSize();	      final    double    n    =    getPopulationSize();    	non-compiled	[CE]  cannot  find  symbol  n	52	None
691	[BUG]  [BUGGY]  numericalVarianceIsCalculated  =  numericalVariance;  [CE]  incompatible  types  [CONTEXT]    public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();    [BUGGY]  numericalVarianceIsCalculated  =  numericalVariance;  [BUGGY]    }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	281	281	1	replace	numericalVarianceIsCalculated  =  numericalVariance;	  numericalVarianceIsCalculated    =    false;    	non-compiled	[CE]  incompatible  types	122	None
692	[BUG]  [BUGGY]  numericalVarianceIsCalculated  =  numericalVariance.isCalculated;  [CE]  double  cannot  be  dereferenced  [CONTEXT]    public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();    [BUGGY]  numericalVarianceIsCalculated  =  numericalVariance.isCalculated;  [BUGGY]    }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	281	281	1	replace	numericalVarianceIsCalculated  =  numericalVariance.isCalculated;	  numericalVarianceIsCalculated    =    false;    	non-compiled	[CE]  double  cannot  be  dereferenced	122	None
701	[BUG]  [BUGGY]  return(double)(getSampleSize()  *  getNumberOfSuccesses())/(double)getStandardDeviation();  [CE]  cannot  find  symbol  [CONTEXT]    public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();    [BUGGY]  return(double)(getSampleSize()  *  getNumberOfSuccesses())/(double)getStandardDeviation();  [BUGGY]    }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	281	281	1	replace	return(double)(getSampleSize()  *  getNumberOfSuccesses())/(double)getStandardDeviation();	  numericalVarianceIsCalculated    =    false;    	non-compiled	[CE]  cannot  find  symbol	122	None
703	[BUG]  [BUGGY]  return(double)(getNumberOfSuccesses()  *  getSampleSize())/(double)getStandardDeviation();  [CE]  cannot  find  symbol  [CONTEXT]    public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();    [BUGGY]  return(double)(getNumberOfSuccesses()  *  getSampleSize())/(double)getStandardDeviation();  [BUGGY]    }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	281	281	1	replace	return(double)(getNumberOfSuccesses()  *  getSampleSize())/(double)getStandardDeviation();	  numericalVarianceIsCalculated    =    false;    	non-compiled	[CE]  cannot  find  symbol	122	None
704	[BUG]  [BUGGY]  return(double)(getSampleSize()  /  getNumberOfSuccesses())/(double)getStandardDeviation();  [CE]  cannot  find  symbol  [CONTEXT]    public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();    [BUGGY]  return(double)(getSampleSize()  /  getNumberOfSuccesses())/(double)getStandardDeviation();  [BUGGY]    }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	281	281	1	replace	return(double)(getSampleSize()  /  getNumberOfSuccesses())/(double)getStandardDeviation();	  numericalVarianceIsCalculated    =    false;    	non-compiled	[CE]  cannot  find  symbol	122	None
713	[BUG]  [BUGGY]  if(getPopulationSize()  >  0)  {  if(getNumberOfSuccesses()  >  0)  {  return(double)getNumberOfSuccesses()  *  getNumberOfSuccesses();  }  [CE]  illegal  start  of  expression  [CONTEXT]    public  double  getNumericalMean()  {    [BUGGY]  if(getPopulationSize()  >  0)  {  if(getNumberOfSuccesses()  >  0)  {  return(double)getNumberOfSuccesses()  *  getNumberOfSuccesses();  }  [BUGGY]    return  (double)  (getSampleSize()  *  getNumberOfSuccesses())  /  (double)  getPopulationSize();  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalMean  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	268	268	1	replace	if(getPopulationSize()  >  0)  {  if(getNumberOfSuccesses()  >  0)  {  return(double)getNumberOfSuccesses()  *  getNumberOfSuccesses();  }	      if(getNumberOfSuccesses()    >    0)    {    if(getNumberOfSuccesses()    >    0)    {    return(double)getNumberOfSuccesses()    *    getNumberOfSuccesses();    }    	non-compiled	[CE]  illegal  start  of  expression	72	None
714	[BUG]  [BUGGY]  if(getNumberOfSuccesses()  >  1)  {  if(getNumberOfSuccesses()  >  2)  {  return(double)getNumberOfSuccesses()  *  getNumberOfSuccesses();  }  [CE]  illegal  start  of  expression  [CONTEXT]    public  double  getNumericalMean()  {    [BUGGY]  if(getNumberOfSuccesses()  >  1)  {  if(getNumberOfSuccesses()  >  2)  {  return(double)getNumberOfSuccesses()  *  getNumberOfSuccesses();  }  [BUGGY]    return  (double)  (getSampleSize()  *  getNumberOfSuccesses())  /  (double)  getPopulationSize();  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalMean  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	268	268	1	replace	if(getNumberOfSuccesses()  >  1)  {  if(getNumberOfSuccesses()  >  2)  {  return(double)getNumberOfSuccesses()  *  getNumberOfSuccesses();  }	      if(getNumberOfSuccesses()    >    0)    {    if(getNumberOfSuccesses()    >    0)    {    return(double)getNumberOfSuccesses()    *    getNumberOfSuccesses();    }    	non-compiled	[CE]  illegal  start  of  expression	72	None
721	[BUG]  [BUGGY]  return  FastMath.max(0,  getNumberOfSuccesses()  +  getSampleSize()  -  getPopulationSize());  getNumberOfSuccesses()  +  getPopulationSize());  [CE]  not  a  statement  [CONTEXT]    public  int  getSupportLowerBound()  {    [BUGGY]  return  FastMath.max(0,  getNumberOfSuccesses()  +  getSampleSize()  -  getPopulationSize());  getNumberOfSuccesses()  +  getPopulationSize());  [BUGGY]    getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  }  [CLASS]  HypergeometricDistribution  [METHOD]  getSupportLowerBound  [RETURN_TYPE]  int  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	308	309	1	replace	return    FastMath.max(0,    getNumberOfSuccesses()    +    getSampleSize()    -    getPopulationSize());    getNumberOfSuccesses()  +  getPopulationSize());	  	non-compiled	[CE]  not  a  statement	2	None
722	[BUG]  [BUGGY]  return  FastMath.max(0,  getNumberOfSuccesses()  +  getSampleSize()  -  getPopulationSize());  getNumberOfSuccesses()  -  getPopulationSize());  [CE]  not  a  statement  [CONTEXT]    public  int  getSupportLowerBound()  {    [BUGGY]  return  FastMath.max(0,  getNumberOfSuccesses()  +  getSampleSize()  -  getPopulationSize());  getNumberOfSuccesses()  -  getPopulationSize());  [BUGGY]    getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  }  [CLASS]  HypergeometricDistribution  [METHOD]  getSupportLowerBound  [RETURN_TYPE]  int  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	308	309	1	replace	return    FastMath.max(0,    getNumberOfSuccesses()    +    getSampleSize()    -    getPopulationSize());    getNumberOfSuccesses()  -  getPopulationSize());	  	non-compiled	[CE]  not  a  statement	2	None
723	[BUG]  [BUGGY]  return  FastMath.max(0,  getNumberOfSuccesses()  +  getSampleSize()  -  getPopulationSize());  getPopulationSize()  +  getNumberOfSuccesses();  [CE]  not  a  statement  [CONTEXT]    public  int  getSupportLowerBound()  {    [BUGGY]  return  FastMath.max(0,  getNumberOfSuccesses()  +  getSampleSize()  -  getPopulationSize());  getPopulationSize()  +  getNumberOfSuccesses();  [BUGGY]    getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  }  [CLASS]  HypergeometricDistribution  [METHOD]  getSupportLowerBound  [RETURN_TYPE]  int  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	308	309	1	replace	return    FastMath.max(0,    getNumberOfSuccesses()    +    getSampleSize()    -    getPopulationSize());    getPopulationSize()  +  getNumberOfSuccesses();	  	non-compiled	[CE]  not  a  statement	2	None
724	[BUG]  [BUGGY]  return  FastMath.max(0,  getNumberOfSuccesses()  +  getSampleSize()  -  getPopulationSize());  getNumberOfSuccesses()  *  getPopulationSize());  [CE]  not  a  statement  [CONTEXT]    public  int  getSupportLowerBound()  {    [BUGGY]  return  FastMath.max(0,  getNumberOfSuccesses()  +  getSampleSize()  -  getPopulationSize());  getNumberOfSuccesses()  *  getPopulationSize());  [BUGGY]    getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  }  [CLASS]  HypergeometricDistribution  [METHOD]  getSupportLowerBound  [RETURN_TYPE]  int  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	308	309	1	replace	return    FastMath.max(0,    getNumberOfSuccesses()    +    getSampleSize()    -    getPopulationSize());    getNumberOfSuccesses()  *  getPopulationSize());	  	non-compiled	[CE]  not  a  statement	2	None
725	[BUG]  [BUGGY]  return  FastMath.max(0,  getNumberOfSuccesses()  +  getSampleSize()  -  getPopulationSize());  getPopulationSize()  -  getNumberOfSuccesses();  [CE]  not  a  statement  [CONTEXT]    public  int  getSupportLowerBound()  {    [BUGGY]  return  FastMath.max(0,  getNumberOfSuccesses()  +  getSampleSize()  -  getPopulationSize());  getPopulationSize()  -  getNumberOfSuccesses();  [BUGGY]    getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  }  [CLASS]  HypergeometricDistribution  [METHOD]  getSupportLowerBound  [RETURN_TYPE]  int  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	308	309	1	replace	return    FastMath.max(0,    getNumberOfSuccesses()    +    getSampleSize()    -    getPopulationSize());    getPopulationSize()  -  getNumberOfSuccesses();	  	non-compiled	[CE]  not  a  statement	2	None
732	[BUG]  [BUGGY]  [FE]  AssertionError  testMoments  [CONTEXT]    public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }    [BUGGY]  return  numericalVariance  *  numberOfSuccesses  /  2;  [BUGGY]    }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	283	283	1	add	return  numericalVariance  *  numberOfSuccesses  /  2;	  return    numericalVariance    *    numberOfSuccesses;    	compilable	  [FE]  AssertionError  testMoments	343	1
733	[BUG]  [BUGGY]  return  numericalVariance  *  numberOfSuccesses  /  2;  [FE]  AssertionError  testMoments  [CONTEXT]    public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }    [BUGGY]  return  numericalVariance  *  numberOfSuccesses  /  2;  [BUGGY]    }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	283	283	1	replace	return  numericalVariance  *  numberOfSuccesses  /  2;	  return    numericalVariance    *    numberOfSuccesses;    	compilable	  [FE]  AssertionError  testMoments	343	1
733	[BUG]  [BUGGY]  [FE]  AssertionError  testMoments  [CONTEXT]    public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }    [BUGGY]  return  numberOfSuccesses  *  numericalVariance;  [BUGGY]    }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	283	283	1	add	return  numberOfSuccesses  *  numericalVariance;	  return    numericalVariance    *    numberOfSuccesses;    	compilable	  [FE]  AssertionError  testMoments	343	1
734	[BUG]  [BUGGY]  return  numberOfSuccesses  *  numericalVariance;  [FE]  AssertionError  testMoments  [CONTEXT]    public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }    [BUGGY]  return  numberOfSuccesses  *  numericalVariance;  [BUGGY]    }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	283	283	1	replace	return  numberOfSuccesses  *  numericalVariance;	  return    numericalVariance    *    numberOfSuccesses;    	compilable	  [FE]  AssertionError  testMoments	343	1
741	[BUG]  [BUGGY]  numericalVariance  =  getNumberOfSuccesses()  *(numberOfSuccesses  -  getSummarySize());  [CE]  cannot  find  symbol  [CONTEXT]    protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();    [BUGGY]  numericalVariance  =  getNumberOfSuccesses()  *(numberOfSuccesses  -  getSummarySize());  [BUGGY]    final  double  m  =  getNumberOfSuccesses();  final  double  n  =  getSampleSize();  return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	293	293	1	replace	numericalVariance  =  getNumberOfSuccesses()  *(numberOfSuccesses  -  getSummarySize());	      final    double    N    =    getSize();    	non-compiled	[CE]  cannot  find  symbol	145	None
742	[BUG]  [BUGGY]  numericalVariance  =  getNumberOfSuccesses()  /(numberOfSuccesses  -  getSummarySize());  [CE]  cannot  find  symbol  [CONTEXT]    protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();    [BUGGY]  numericalVariance  =  getNumberOfSuccesses()  /(numberOfSuccesses  -  getSummarySize());  [BUGGY]    final  double  m  =  getNumberOfSuccesses();  final  double  n  =  getSampleSize();  return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	293	293	1	replace	numericalVariance  =  getNumberOfSuccesses()  /(numberOfSuccesses  -  getSummarySize());	      final    double    N    =    getSize();    	non-compiled	[CE]  cannot  find  symbol	145	None
743	[BUG]  [BUGGY]  numericalVariance  =  getNumberOfSuccesses()  *(populationSize  -  getSummarySize());  [CE]  cannot  find  symbol  [CONTEXT]    protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();    [BUGGY]  numericalVariance  =  getNumberOfSuccesses()  *(populationSize  -  getSummarySize());  [BUGGY]    final  double  m  =  getNumberOfSuccesses();  final  double  n  =  getSampleSize();  return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	293	293	1	replace	numericalVariance  =  getNumberOfSuccesses()  *(populationSize  -  getSummarySize());	      final    double    N    =    getSize();    	non-compiled	[CE]  cannot  find  symbol	145	None
744	[BUG]  [BUGGY]  numericalVariance  =  getNumberOfSuccesses()  *(numberOfSuccesses  /  getSummarySize());  [CE]  cannot  find  symbol  [CONTEXT]    protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();    [BUGGY]  numericalVariance  =  getNumberOfSuccesses()  *(numberOfSuccesses  /  getSummarySize());  [BUGGY]    final  double  m  =  getNumberOfSuccesses();  final  double  n  =  getSampleSize();  return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	293	293	1	replace	numericalVariance  =  getNumberOfSuccesses()  *(numberOfSuccesses  /  getSummarySize());	      final    double    N    =    getSize();    	non-compiled	[CE]  cannot  find  symbol	145	None
751	[BUG]  [BUGGY]  numericalVariance  =  getPopulationSize()  *(numberOfSuccesses  -  getSampleSize());  [CE]  cannot  find  symbol  m  [CONTEXT]    protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();    [BUGGY]  numericalVariance  =  getPopulationSize()  *(numberOfSuccesses  -  getSampleSize());  [BUGGY]    final  double  m  =  getNumberOfSuccesses();  final  double  n  =  getSampleSize();  return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	293	293	1	replace	numericalVariance  =  getPopulationSize()  *(numberOfSuccesses  -  getSampleSize());	      final    double    N    =    getNumberOfSuccesses().doubleValue();    	non-compiled	[CE]  cannot  find  symbol  m	144	None
752	[BUG]  [BUGGY]  numericalVariance  =  getPopulationSize()  *(populationSize  -  getSampleSize());  [CE]  cannot  find  symbol  m  [CONTEXT]    protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();    [BUGGY]  numericalVariance  =  getPopulationSize()  *(populationSize  -  getSampleSize());  [BUGGY]    final  double  m  =  getNumberOfSuccesses();  final  double  n  =  getSampleSize();  return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	293	293	1	replace	numericalVariance  =  getPopulationSize()  *(populationSize  -  getSampleSize());	      final    double    N    =    getNumberOfSuccesses().doubleValue();    	non-compiled	[CE]  cannot  find  symbol  m	144	None
753	[BUG]  [BUGGY]  if(numberOfSuccesses  >  0)  {  if(!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumberOfSuccesses()  *(populationSize  -  getSampleSize());  }  [CE]  illegal  start  of  expression  [CONTEXT]    protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();    [BUGGY]  if(numberOfSuccesses  >  0)  {  if(!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumberOfSuccesses()  *(populationSize  -  getSampleSize());  }  [BUGGY]    final  double  m  =  getNumberOfSuccesses();  final  double  n  =  getSampleSize();  return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	293	293	1	replace	if(numberOfSuccesses  >  0)  {  if(!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumberOfSuccesses()  *(populationSize  -  getSampleSize());  }	      final    double    N    =    getNumberOfSuccesses().doubleValue();    	non-compiled	[CE]  illegal  start  of  expression	144	None
754	[BUG]  [BUGGY]  numberOfSuccesses  =  getPopulationSize()  *(numberOfSuccesses  -  getSampleSize());  [CE]  cannot  assign  a  value  to  final  variable  numberOfSuccesses  [CONTEXT]    protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();    [BUGGY]  numberOfSuccesses  =  getPopulationSize()  *(numberOfSuccesses  -  getSampleSize());  [BUGGY]    final  double  m  =  getNumberOfSuccesses();  final  double  n  =  getSampleSize();  return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	293	293	1	replace	numberOfSuccesses  =  getPopulationSize()  *(numberOfSuccesses  -  getSampleSize());	      final    double    N    =    getNumberOfSuccesses().doubleValue();    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  numberOfSuccesses	144	None
761	[BUG]  [BUGGY]  return  numericalVariance  /(numberOfSuccesses  -  1)*(populationSize  -  1));  [CE]  ';'  expected  [CONTEXT]    public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }    [BUGGY]  return  numericalVariance  /(numberOfSuccesses  -  1)*(populationSize  -  1));  [BUGGY]    }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	283	283	1	replace	return  numericalVariance  /(numberOfSuccesses  -  1)*(populationSize  -  1));	  return    numericalVariance    *    numberOfSuccesses;    	non-compiled	[CE]  ';'  expected	343	None
762	[BUG]  [BUGGY]  return  numericalVariance  *(numberOfSuccesses  -  1)*(numberOfSuccesses  -  1));  [CE]  ';'  expected  [CONTEXT]    public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }    [BUGGY]  return  numericalVariance  *(numberOfSuccesses  -  1)*(numberOfSuccesses  -  1));  [BUGGY]    }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	283	283	1	replace	return  numericalVariance  *(numberOfSuccesses  -  1)*(numberOfSuccesses  -  1));	  return    numericalVariance    *    numberOfSuccesses;    	non-compiled	[CE]  ';'  expected	343	None
763	[BUG]  [BUGGY]  return  numericalVariance  /(numberOfSuccesses  -  1)/(populationSize  -  1));  [CE]  ';'  expected  [CONTEXT]    public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }    [BUGGY]  return  numericalVariance  /(numberOfSuccesses  -  1)/(populationSize  -  1));  [BUGGY]    }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	283	283	1	replace	return  numericalVariance  /(numberOfSuccesses  -  1)/(populationSize  -  1));	  return    numericalVariance    *    numberOfSuccesses;    	non-compiled	[CE]  ';'  expected	343	None
771	[BUG]  [BUGGY]  if(!numericalVarianceIsCalculated  &&  Math.abs(numberOfSuccesses)>  0)  {  [CE]  illegal  start  of  expression  [CONTEXT]    public  int  getSupportLowerBound()  {    [BUGGY]  if(!numericalVarianceIsCalculated  &&  Math.abs(numberOfSuccesses)>  0)  {  [BUGGY]    return  FastMath.max(0,        getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  }  [CLASS]  HypergeometricDistribution  [METHOD]  getSupportLowerBound  [RETURN_TYPE]  int  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	308	309	1	replace	if(!numericalVarianceIsCalculated  &&  Math.abs(numberOfSuccesses)>  0)  {	      int    populationSize    =    getPopulationSize();    	non-compiled	[CE]  illegal  start  of  expression	64	None
772	[BUG]  [BUGGY]  if(numberOfSuccesses  >  0)  {  if(!numericalVarianceIsCalculated  &&  Math.abs(numberOfSuccesses)>  0)  {  [CE]  illegal  start  of  expression  [CONTEXT]    public  int  getSupportLowerBound()  {    [BUGGY]  if(numberOfSuccesses  >  0)  {  if(!numericalVarianceIsCalculated  &&  Math.abs(numberOfSuccesses)>  0)  {  [BUGGY]    return  FastMath.max(0,        getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  }  [CLASS]  HypergeometricDistribution  [METHOD]  getSupportLowerBound  [RETURN_TYPE]  int  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	308	309	1	replace	if(numberOfSuccesses  >  0)  {  if(!numericalVarianceIsCalculated  &&  Math.abs(numberOfSuccesses)>  0)  {	      int    populationSize    =    getPopulationSize();    	non-compiled	[CE]  illegal  start  of  expression	64	None
773	[BUG]  [BUGGY]  if(numberOfSuccesses  >  0)  {  [CE]  illegal  start  of  expression  [CONTEXT]    public  int  getSupportLowerBound()  {    [BUGGY]  if(numberOfSuccesses  >  0)  {  [BUGGY]    return  FastMath.max(0,        getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  }  [CLASS]  HypergeometricDistribution  [METHOD]  getSupportLowerBound  [RETURN_TYPE]  int  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	308	309	1	replace	if(numberOfSuccesses  >  0)  {	      int    populationSize    =    getPopulationSize();    	non-compiled	[CE]  illegal  start  of  expression	64	None
774	[BUG]  [BUGGY]  if(!numericalVarianceIsCalculated  &&  Math.abs(numberOfSuccesses)>  1)  {  [CE]  illegal  start  of  expression  [CONTEXT]    public  int  getSupportLowerBound()  {    [BUGGY]  if(!numericalVarianceIsCalculated  &&  Math.abs(numberOfSuccesses)>  1)  {  [BUGGY]    return  FastMath.max(0,        getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  }  [CLASS]  HypergeometricDistribution  [METHOD]  getSupportLowerBound  [RETURN_TYPE]  int  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	308	309	1	replace	if(!numericalVarianceIsCalculated  &&  Math.abs(numberOfSuccesses)>  1)  {	      int    populationSize    =    getPopulationSize();    	non-compiled	[CE]  illegal  start  of  expression	64	None
782	[BUG]  [BUGGY]  if(getSampleSize()  >  0)  {  if(getPopulationSize()  >  0)  {  return  FastMath.max(0,  getNumberOfSuccesses()  -  getPopulationSize());  }  [CE]  illegal  start  of  expression  [CONTEXT]    public  int  getSupportLowerBound()  {    [BUGGY]  if(getSampleSize()  >  0)  {  if(getPopulationSize()  >  0)  {  return  FastMath.max(0,  getNumberOfSuccesses()  -  getPopulationSize());  }  [BUGGY]    return  FastMath.max(0,        getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  }  [CLASS]  HypergeometricDistribution  [METHOD]  getSupportLowerBound  [RETURN_TYPE]  int  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	308	309	1	replace	if(getSampleSize()  >  0)  {  if(getPopulationSize()  >  0)  {  return  FastMath.max(0,  getNumberOfSuccesses()  -  getPopulationSize());  }	      int    populationSize    =    getPopulationSize();    	non-compiled	[CE]  illegal  start  of  expression	64	None
783	[BUG]  [BUGGY]  if(getPopulationSize()  >  0)  {  if(getNumberOfSuccesses()  >  0)  {  return  FastMath.max(0,  getNumberOfSuccesses()  -  getPopulationSize());  }  [CE]  illegal  start  of  expression  [CONTEXT]    public  int  getSupportLowerBound()  {    [BUGGY]  if(getPopulationSize()  >  0)  {  if(getNumberOfSuccesses()  >  0)  {  return  FastMath.max(0,  getNumberOfSuccesses()  -  getPopulationSize());  }  [BUGGY]    return  FastMath.max(0,        getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  }  [CLASS]  HypergeometricDistribution  [METHOD]  getSupportLowerBound  [RETURN_TYPE]  int  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	308	309	1	replace	if(getPopulationSize()  >  0)  {  if(getNumberOfSuccesses()  >  0)  {  return  FastMath.max(0,  getNumberOfSuccesses()  -  getPopulationSize());  }	      int    populationSize    =    getPopulationSize();    	non-compiled	[CE]  illegal  start  of  expression	64	None
784	[BUG]  [BUGGY]  if(getNumberOfSuccesses()  >  1)  {  if(getPopulationSize()  >  0)  {  return  FastMath.max(0,  getNumberOfSuccesses()  -  getPopulationSize());  }  [CE]  illegal  start  of  expression  [CONTEXT]    public  int  getSupportLowerBound()  {    [BUGGY]  if(getNumberOfSuccesses()  >  1)  {  if(getPopulationSize()  >  0)  {  return  FastMath.max(0,  getNumberOfSuccesses()  -  getPopulationSize());  }  [BUGGY]    return  FastMath.max(0,        getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  }  [CLASS]  HypergeometricDistribution  [METHOD]  getSupportLowerBound  [RETURN_TYPE]  int  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	308	309	1	replace	if(getNumberOfSuccesses()  >  1)  {  if(getPopulationSize()  >  0)  {  return  FastMath.max(0,  getNumberOfSuccesses()  -  getPopulationSize());  }	      int    populationSize    =    getPopulationSize();    	non-compiled	[CE]  illegal  start  of  expression	64	None
792	[BUG]  [BUGGY]  numericalVariance  =  calculateNumericalVariance()  *(numericalVarianceIsCalculated));  [CE]  ';'  expected  [CONTEXT]    public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {    [BUGGY]  numericalVariance  =  calculateNumericalVariance()  *(numericalVarianceIsCalculated));  [BUGGY]    numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	280	280	1	replace	numericalVariance  =  calculateNumericalVariance()  *(numericalVarianceIsCalculated));	  numericalVariance    =    calculateNumericalVariance()    /(numericalVarianceIsCalculated));    	non-compiled	[CE]  ';'  expected	34	None
793	[BUG]  [BUGGY]  numericalVariance  =  calculateNumbericalVariance()  /(numericalVarianceIsCalculated));  [CE]  ';'  expected  [CONTEXT]    public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {    [BUGGY]  numericalVariance  =  calculateNumbericalVariance()  /(numericalVarianceIsCalculated));  [BUGGY]    numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	280	280	1	replace	numericalVariance  =  calculateNumbericalVariance()  /(numericalVarianceIsCalculated));	  numericalVariance    =    calculateNumericalVariance()    /(numericalVarianceIsCalculated));    	non-compiled	[CE]  ';'  expected	34	None
794	[BUG]  [BUGGY]  numericalVariance  =  calculateNumericalVariance()  /(negativeVarianceIsCalculated));  [CE]  ';'  expected  [CONTEXT]    public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {    [BUGGY]  numericalVariance  =  calculateNumericalVariance()  /(negativeVarianceIsCalculated));  [BUGGY]    numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	280	280	1	replace	numericalVariance  =  calculateNumericalVariance()  /(negativeVarianceIsCalculated));	  numericalVariance    =    calculateNumericalVariance()    /(numericalVarianceIsCalculated));    	non-compiled	[CE]  ';'  expected	34	None
802	[BUG]  [BUGGY]  if(getPopulationSize()  >  0)  {  if(getNumberOfSuccesses()  >  0)  {  return  FastMath.min(10,  getNumberOfSuccesses()  -  getPopulationSize());  }  [CE]  illegal  start  of  expression  [CONTEXT]    public  int  getSupportLowerBound()  {    [BUGGY]  if(getPopulationSize()  >  0)  {  if(getNumberOfSuccesses()  >  0)  {  return  FastMath.min(10,  getNumberOfSuccesses()  -  getPopulationSize());  }  [BUGGY]    return  FastMath.max(0,        getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  }  [CLASS]  HypergeometricDistribution  [METHOD]  getSupportLowerBound  [RETURN_TYPE]  int  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	308	309	1	replace	if(getPopulationSize()  >  0)  {  if(getNumberOfSuccesses()  >  0)  {  return  FastMath.min(10,  getNumberOfSuccesses()  -  getPopulationSize());  }	      if(getNumberOfSuccesses()    >    0)    {    if(getPopulationSize()    >    0)    {    return    FastMath.min(10,    getNumberOfSuccesses()    -    getPopulationSize());    }    	non-compiled	[CE]  illegal  start  of  expression	62	None
803	[BUG]  [BUGGY]  if(getSampleSize()  >  0)  {  if(getPopulationSize()  >  0)  {  return  FastMath.min(10,  getNumberOfSuccesses()  -  getPopulationSize());  }  [CE]  illegal  start  of  expression  [CONTEXT]    public  int  getSupportLowerBound()  {    [BUGGY]  if(getSampleSize()  >  0)  {  if(getPopulationSize()  >  0)  {  return  FastMath.min(10,  getNumberOfSuccesses()  -  getPopulationSize());  }  [BUGGY]    return  FastMath.max(0,        getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  }  [CLASS]  HypergeometricDistribution  [METHOD]  getSupportLowerBound  [RETURN_TYPE]  int  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	308	309	1	replace	if(getSampleSize()  >  0)  {  if(getPopulationSize()  >  0)  {  return  FastMath.min(10,  getNumberOfSuccesses()  -  getPopulationSize());  }	      if(getNumberOfSuccesses()    >    0)    {    if(getPopulationSize()    >    0)    {    return    FastMath.min(10,    getNumberOfSuccesses()    -    getPopulationSize());    }    	non-compiled	[CE]  illegal  start  of  expression	62	None
804	[BUG]  [BUGGY]  if(getNumberOfSuccesses()  >  1)  {  if(getPopulationSize()  >  0)  {  return  FastMath.min(10,  getNumberOfSuccesses()  -  getPopulationSize());  }  [CE]  illegal  start  of  expression  [CONTEXT]    public  int  getSupportLowerBound()  {    [BUGGY]  if(getNumberOfSuccesses()  >  1)  {  if(getPopulationSize()  >  0)  {  return  FastMath.min(10,  getNumberOfSuccesses()  -  getPopulationSize());  }  [BUGGY]    return  FastMath.max(0,        getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  }  [CLASS]  HypergeometricDistribution  [METHOD]  getSupportLowerBound  [RETURN_TYPE]  int  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	308	309	1	replace	if(getNumberOfSuccesses()  >  1)  {  if(getPopulationSize()  >  0)  {  return  FastMath.min(10,  getNumberOfSuccesses()  -  getPopulationSize());  }	      if(getNumberOfSuccesses()    >    0)    {    if(getPopulationSize()    >    0)    {    return    FastMath.min(10,    getNumberOfSuccesses()    -    getPopulationSize());    }    	non-compiled	[CE]  illegal  start  of  expression	62	None
811	[BUG]  [BUGGY]  final  double  k  =  getNumberOfCase();  [CE]  cannot  find  symbol  [CONTEXT]    public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {    [BUGGY]  final  double  k  =  getNumberOfCase();  [BUGGY]    numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	280	280	1	replace	final  double  k  =  getNumberOfCase();	      if(!numericalVarianceIsCalculated)    {    if(!numericalVarianceIsCalculated)    {    return    -1;    }    	non-compiled	[CE]  cannot  find  symbol	45	None
812	[BUG]  [BUGGY]  final  int  k  =  getNumberOfCase();  [CE]  cannot  find  symbol  [CONTEXT]    public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {    [BUGGY]  final  int  k  =  getNumberOfCase();  [BUGGY]    numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	280	280	1	replace	final  int  k  =  getNumberOfCase();	      if(!numericalVarianceIsCalculated)    {    if(!numericalVarianceIsCalculated)    {    return    -1;    }    	non-compiled	[CE]  cannot  find  symbol	45	None
813	[BUG]  [BUGGY]  final  double  dx  =  getNumberOfCase();  [CE]  cannot  find  symbol  [CONTEXT]    public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {    [BUGGY]  final  double  dx  =  getNumberOfCase();  [BUGGY]    numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	280	280	1	replace	final  double  dx  =  getNumberOfCase();	      if(!numericalVarianceIsCalculated)    {    if(!numericalVarianceIsCalculated)    {    return    -1;    }    	non-compiled	[CE]  cannot  find  symbol	45	None
814	[BUG]  [BUGGY]  final  double  n  =  getNumberOfCase();  [CE]  cannot  find  symbol  [CONTEXT]    public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {    [BUGGY]  final  double  n  =  getNumberOfCase();  [BUGGY]    numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	280	280	1	replace	final  double  n  =  getNumberOfCase();	      if(!numericalVarianceIsCalculated)    {    if(!numericalVarianceIsCalculated)    {    return    -1;    }    	non-compiled	[CE]  cannot  find  symbol	45	None
821	[BUG]  [BUGGY]      double  numericalVariance  =  getNumberOfSuccesses();  if(numberOfSuccesses  >  0)  {  if(!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumberOfSuccesses();  }  [CE]  illegal  start  of  expression  [CONTEXT]    public  double  getNumericalVariance()  {    [BUGGY]      double  numericalVariance  =  getNumberOfSuccesses();  if(numberOfSuccesses  >  0)  {  if(!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumberOfSuccesses();  }  [BUGGY]    if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	279	279	1	replace	        double    numericalVariance    =    getNumberOfSuccesses();    if(numberOfSuccesses  >  0)  {  if(!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumberOfSuccesses();  }	  	non-compiled	[CE]  illegal  start  of  expression	1	None
822	[BUG]  [BUGGY]      double  numericalVariance  =  getNumberOfSuccesses();  if(numberOfSuccesses  >  0)  {  if(!numericalVarianceIsCalculated)  {  numericalVariance  =  Math.abs(numberOfSuccesses);  }  [CE]  illegal  start  of  expression  [CONTEXT]    public  double  getNumericalVariance()  {    [BUGGY]      double  numericalVariance  =  getNumberOfSuccesses();  if(numberOfSuccesses  >  0)  {  if(!numericalVarianceIsCalculated)  {  numericalVariance  =  Math.abs(numberOfSuccesses);  }  [BUGGY]    if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	279	279	1	replace	        double    numericalVariance    =    getNumberOfSuccesses();    if(numberOfSuccesses  >  0)  {  if(!numericalVarianceIsCalculated)  {  numericalVariance  =  Math.abs(numberOfSuccesses);  }	  	non-compiled	[CE]  illegal  start  of  expression	1	None
823	[BUG]  [BUGGY]      double  numericalVariance  =  getNumberOfSuccesses();  if(numberOfSuccesses  >  0)  {  if(!numericalVarianceIsCalculated)  {  numericalVariance  =  Math.rint(numberOfSuccesses);  }  [CE]  illegal  start  of  expression  [CONTEXT]    public  double  getNumericalVariance()  {    [BUGGY]      double  numericalVariance  =  getNumberOfSuccesses();  if(numberOfSuccesses  >  0)  {  if(!numericalVarianceIsCalculated)  {  numericalVariance  =  Math.rint(numberOfSuccesses);  }  [BUGGY]    if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	279	279	1	replace	        double    numericalVariance    =    getNumberOfSuccesses();    if(numberOfSuccesses  >  0)  {  if(!numericalVarianceIsCalculated)  {  numericalVariance  =  Math.rint(numberOfSuccesses);  }	  	non-compiled	[CE]  illegal  start  of  expression	1	None
824	[BUG]  [BUGGY]  [FE]  AssertionError  testMath1021  [CONTEXT]    public  double  getNumericalVariance()  {    [BUGGY]      double  numericalVariance  =  getNumberOfSuccesses();  numericalVariance  =  Math.sqrt(numberOfSuccesses);  [BUGGY]    if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	279	279	1	add	        double    numericalVariance    =    getNumberOfSuccesses();    numericalVariance  =  Math.sqrt(numberOfSuccesses);	  	compilable	  [FE]  AssertionError  testMath1021	1	1
825	[BUG]  [BUGGY]      double  numericalVariance  =  getNumberOfSuccesses();  numericalVariance  =  Math.sqrt(numberOfSuccesses);  [FE]  AssertionError  testMath1021  [CONTEXT]    public  double  getNumericalVariance()  {    [BUGGY]      double  numericalVariance  =  getNumberOfSuccesses();  numericalVariance  =  Math.sqrt(numberOfSuccesses);  [BUGGY]    if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	279	279	1	replace	        double    numericalVariance    =    getNumberOfSuccesses();    numericalVariance  =  Math.sqrt(numberOfSuccesses);	  	compilable	  [FE]  AssertionError  testMath1021	1	1
825	[BUG]  [BUGGY]      double  numericalVariance  =  getNumberOfSuccesses();  if(numberOfSuccesses  >  0)  {  if(!numericalVarianceIsCalculated)  {  numericalVariance  =  Math.min(numberOfSuccesses,  numberOfSuccesses);  }  [CE]  illegal  start  of  expression  [CONTEXT]    public  double  getNumericalVariance()  {    [BUGGY]      double  numericalVariance  =  getNumberOfSuccesses();  if(numberOfSuccesses  >  0)  {  if(!numericalVarianceIsCalculated)  {  numericalVariance  =  Math.min(numberOfSuccesses,  numberOfSuccesses);  }  [BUGGY]    if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	279	279	1	replace	        double    numericalVariance    =    getNumberOfSuccesses();    if(numberOfSuccesses  >  0)  {  if(!numericalVarianceIsCalculated)  {  numericalVariance  =  Math.min(numberOfSuccesses,  numberOfSuccesses);  }	  	non-compiled	[CE]  illegal  start  of  expression	1	None
831	[BUG]  [BUGGY]  final  double  k  =  getPopulationSize();  [CE]  cannot  find  symbol  n  [CONTEXT]    protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();  final  double  m  =  getNumberOfSuccesses();    [BUGGY]  final  double  k  =  getPopulationSize();  [BUGGY]    final  double  n  =  getSampleSize();  return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	294	294	1	replace	final  double  k  =  getPopulationSize();	      final    double    k    =    getNumberOfSuccesses();    	non-compiled	[CE]  cannot  find  symbol  n	303	None
832	[BUG]  [BUGGY]  final  double  k  =  getPopulationOfSuccesses();  [CE]  cannot  find  symbol  [CONTEXT]    protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();  final  double  m  =  getNumberOfSuccesses();    [BUGGY]  final  double  k  =  getPopulationOfSuccesses();  [BUGGY]    final  double  n  =  getSampleSize();  return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	294	294	1	replace	final  double  k  =  getPopulationOfSuccesses();	      final    double    k    =    getNumberOfSuccesses();    	non-compiled	[CE]  cannot  find  symbol	303	None
833	[BUG]  [BUGGY]  final  double  k  =  getDecimalOfSuccesses();  [CE]  cannot  find  symbol  [CONTEXT]    protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();  final  double  m  =  getNumberOfSuccesses();    [BUGGY]  final  double  k  =  getDecimalOfSuccesses();  [BUGGY]    final  double  n  =  getSampleSize();  return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	294	294	1	replace	final  double  k  =  getDecimalOfSuccesses();	      final    double    k    =    getNumberOfSuccesses();    	non-compiled	[CE]  cannot  find  symbol	303	None
834	[BUG]  [BUGGY]  final  double  k  =  getVolumeOfSuccesses();  [CE]  cannot  find  symbol  [CONTEXT]    protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();  final  double  m  =  getNumberOfSuccesses();    [BUGGY]  final  double  k  =  getVolumeOfSuccesses();  [BUGGY]    final  double  n  =  getSampleSize();  return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	294	294	1	replace	final  double  k  =  getVolumeOfSuccesses();	      final    double    k    =    getNumberOfSuccesses();    	non-compiled	[CE]  cannot  find  symbol	303	None
841	[BUG]  [BUGGY]  final  double  k  =  getNumberOfDay();  [CE]  cannot  find  symbol  [CONTEXT]    public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {    [BUGGY]  final  double  k  =  getNumberOfDay();  [BUGGY]    numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	280	280	1	replace	final  double  k  =  getNumberOfDay();	      if(!numericalVarianceIsCalculated)    {    if(!numericalVarianceIsCalculated)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  cannot  find  symbol	44	None
842	[BUG]  [BUGGY]  final  int  k  =  getNumberOfDay();  [CE]  cannot  find  symbol  [CONTEXT]    public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {    [BUGGY]  final  int  k  =  getNumberOfDay();  [BUGGY]    numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	280	280	1	replace	final  int  k  =  getNumberOfDay();	      if(!numericalVarianceIsCalculated)    {    if(!numericalVarianceIsCalculated)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  cannot  find  symbol	44	None
843	[BUG]  [BUGGY]  final  double  dx  =  getNumberOfDay();  [CE]  cannot  find  symbol  [CONTEXT]    public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {    [BUGGY]  final  double  dx  =  getNumberOfDay();  [BUGGY]    numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	280	280	1	replace	final  double  dx  =  getNumberOfDay();	      if(!numericalVarianceIsCalculated)    {    if(!numericalVarianceIsCalculated)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  cannot  find  symbol	44	None
844	[BUG]  [BUGGY]  final  double  n  =  getNumberOfDay();  [CE]  cannot  find  symbol  [CONTEXT]    public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {    [BUGGY]  final  double  n  =  getNumberOfDay();  [BUGGY]    numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	280	280	1	replace	final  double  n  =  getNumberOfDay();	      if(!numericalVarianceIsCalculated)    {    if(!numericalVarianceIsCalculated)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  cannot  find  symbol	44	None
851	[BUG]  [BUGGY]  numericalVariance  =  Math.min(numberOfSuccesses,  getSampleSize());  [CE]  missing  return  statement  [CONTEXT]    public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }    [BUGGY]  numericalVariance  =  Math.min(numberOfSuccesses,  getSampleSize());  [BUGGY]    }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	283	283	1	replace	numericalVariance  =  Math.min(numberOfSuccesses,  getSampleSize());	  return    numericalVariance    /(numericalVariance    >    0)?    numericalVariance    :    null;    	non-compiled	[CE]  missing  return  statement	153	None
852	[BUG]  [BUGGY]  if(numberOfSuccesses  >  0)  {  if(!numericalVarianceIsCalculated)  {  numericalVariance  =  Math.min(numberOfSuccesses,  getSampleSize());  }  [CE]  illegal  start  of  expression  [CONTEXT]    public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }    [BUGGY]  if(numberOfSuccesses  >  0)  {  if(!numericalVarianceIsCalculated)  {  numericalVariance  =  Math.min(numberOfSuccesses,  getSampleSize());  }  [BUGGY]    }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	283	283	1	replace	if(numberOfSuccesses  >  0)  {  if(!numericalVarianceIsCalculated)  {  numericalVariance  =  Math.min(numberOfSuccesses,  getSampleSize());  }	  return    numericalVariance    /(numericalVariance    >    0)?    numericalVariance    :    null;    	non-compiled	[CE]  illegal  start  of  expression	153	None
853	[BUG]  [BUGGY]  if(numberOfSuccesses  >  0)  {  if(!numericalVarianceIsCalculated)  {  numericalVariance  =  Math.max(numberOfSuccesses,  getSampleSize());  }  [CE]  illegal  start  of  expression  [CONTEXT]    public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }    [BUGGY]  if(numberOfSuccesses  >  0)  {  if(!numericalVarianceIsCalculated)  {  numericalVariance  =  Math.max(numberOfSuccesses,  getSampleSize());  }  [BUGGY]    }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	283	283	1	replace	if(numberOfSuccesses  >  0)  {  if(!numericalVarianceIsCalculated)  {  numericalVariance  =  Math.max(numberOfSuccesses,  getSampleSize());  }	  return    numericalVariance    /(numericalVariance    >    0)?    numericalVariance    :    null;    	non-compiled	[CE]  illegal  start  of  expression	153	None
854	[BUG]  [BUGGY]  if(numberOfSuccesses  >  0)  {  if(!numericalVarianceIsCalculated)  {  numericalVariance  =  Math.min(numberOfSuccesses,  getPopulationSize());  }  [CE]  illegal  start  of  expression  [CONTEXT]    public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }    [BUGGY]  if(numberOfSuccesses  >  0)  {  if(!numericalVarianceIsCalculated)  {  numericalVariance  =  Math.min(numberOfSuccesses,  getPopulationSize());  }  [BUGGY]    }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	283	283	1	replace	if(numberOfSuccesses  >  0)  {  if(!numericalVarianceIsCalculated)  {  numericalVariance  =  Math.min(numberOfSuccesses,  getPopulationSize());  }	  return    numericalVariance    /(numericalVariance    >    0)?    numericalVariance    :    null;    	non-compiled	[CE]  illegal  start  of  expression	153	None
861	[BUG]  [BUGGY]  double  numericalVariance  =  getNumberOfSuccesses();  [CE]  missing  return  statement  [CONTEXT]    public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }    [BUGGY]  double  numericalVariance  =  getNumberOfSuccesses();  [BUGGY]    return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	283	283	1	replace	double  numericalVariance  =  getNumberOfSuccesses();	      if(!numericalVarianceIsCalculated)    {    if(!numericalVarianceIsCalculated)    {    numericalVariance    =    calculateNumberOfSuccesses();    if(!numericalVarianceIsCalculated)    {    numericalVariance    	non-compiled	[CE]  missing  return  statement	105	None
862	[BUG]  [BUGGY]  double  numericalVariance  =  getNumberOfSuccesses()  -  1;  [CE]  missing  return  statement  [CONTEXT]    public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }    [BUGGY]  double  numericalVariance  =  getNumberOfSuccesses()  -  1;  [BUGGY]    return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	283	283	1	replace	double  numericalVariance  =  getNumberOfSuccesses()  -  1;	      if(!numericalVarianceIsCalculated)    {    if(!numericalVarianceIsCalculated)    {    numericalVariance    =    calculateNumberOfSuccesses();    if(!numericalVarianceIsCalculated)    {    numericalVariance    	non-compiled	[CE]  missing  return  statement	105	None
863	[BUG]  [BUGGY]  double  numericalVariance  =  getNumberOfSuccesses()  /  2;  [CE]  missing  return  statement  [CONTEXT]    public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }    [BUGGY]  double  numericalVariance  =  getNumberOfSuccesses()  /  2;  [BUGGY]    return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	283	283	1	replace	double  numericalVariance  =  getNumberOfSuccesses()  /  2;	      if(!numericalVarianceIsCalculated)    {    if(!numericalVarianceIsCalculated)    {    numericalVariance    =    calculateNumberOfSuccesses();    if(!numericalVarianceIsCalculated)    {    numericalVariance    	non-compiled	[CE]  missing  return  statement	105	None
864	[BUG]  [BUGGY]  double  numericalVariance  =  getNumberOfSuccesses()  /  2.0;  [CE]  missing  return  statement  [CONTEXT]    public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }    [BUGGY]  double  numericalVariance  =  getNumberOfSuccesses()  /  2.0;  [BUGGY]    return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	283	283	1	replace	double  numericalVariance  =  getNumberOfSuccesses()  /  2.0;	      if(!numericalVarianceIsCalculated)    {    if(!numericalVarianceIsCalculated)    {    numericalVariance    =    calculateNumberOfSuccesses();    if(!numericalVarianceIsCalculated)    {    numericalVariance    	non-compiled	[CE]  missing  return  statement	105	None
872	[BUG]  [BUGGY]  if(negativeVarianceIsCalculated)  {  [CE]  cannot  find  symbol  negativeVarianceIsCalculated  [CONTEXT]    public  double  getNumericalVariance()  {    [BUGGY]  if(negativeVarianceIsCalculated)  {  [BUGGY]    numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	279	279	1	replace	if(negativeVarianceIsCalculated)  {	  if(numericalVarianceIsCalculated)    {    	non-compiled	[CE]  cannot  find  symbol  negativeVarianceIsCalculated	23	None
891	[BUG]  [BUGGY]  int  numberOfSuccesses  =  getPopulationSize();  [CE]  missing  return  statement  [CONTEXT]    public  int  getSupportLowerBound()  {    [BUGGY]  int  numberOfSuccesses  =  getPopulationSize();  [BUGGY]    getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  }  [CLASS]  HypergeometricDistribution  [METHOD]  getSupportLowerBound  [RETURN_TYPE]  int  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	308	309	1	replace	int  numberOfSuccesses  =  getPopulationSize();	  return    FastMath.max(0,    getNumberOfSuccesses()    +    getSampleSize()    -    getPopulationSize());    	non-compiled	[CE]  missing  return  statement	3	None
892	[BUG]  [BUGGY]  double  numberOfSuccesses  =  getNumberOfSuccesses();  [CE]  missing  return  statement  [CONTEXT]    public  int  getSupportLowerBound()  {    [BUGGY]  double  numberOfSuccesses  =  getNumberOfSuccesses();  [BUGGY]    getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  }  [CLASS]  HypergeometricDistribution  [METHOD]  getSupportLowerBound  [RETURN_TYPE]  int  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	308	309	1	replace	double  numberOfSuccesses  =  getNumberOfSuccesses();	  return    FastMath.max(0,    getNumberOfSuccesses()    +    getSampleSize()    -    getPopulationSize());    	non-compiled	[CE]  missing  return  statement	3	None
894	[BUG]  [BUGGY]  int  numberOfSuccesses  =  getNumberOfSuccesses()  /  2.0;  [CE]  possible  loss  of  precision  [CONTEXT]    public  int  getSupportLowerBound()  {    [BUGGY]  int  numberOfSuccesses  =  getNumberOfSuccesses()  /  2.0;  [BUGGY]    getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  }  [CLASS]  HypergeometricDistribution  [METHOD]  getSupportLowerBound  [RETURN_TYPE]  int  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	308	309	1	replace	int  numberOfSuccesses  =  getNumberOfSuccesses()  /  2.0;	  return    FastMath.max(0,    getNumberOfSuccesses()    +    getSampleSize()    -    getPopulationSize());    	non-compiled	[CE]  possible  loss  of  precision	3	None
901	[BUG]  [BUGGY]  [FE]  AssertionError  testMath1021  [CONTEXT]    public  int  getSupportLowerBound()  {    [BUGGY]      getPopulationSize();  getNumberOfSuccesses();  [BUGGY]    return  FastMath.max(0,        getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  }  [CLASS]  HypergeometricDistribution  [METHOD]  getSupportLowerBound  [RETURN_TYPE]  int  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	308	309	1	add	        getPopulationSize();    getNumberOfSuccesses();	  	compilable	  [FE]  AssertionError  testMath1021	273	1
902	[BUG]  [BUGGY]      getPopulationSize();  getNumberOfSuccesses();  [FE]  AssertionError  testMath1021  [CONTEXT]    public  int  getSupportLowerBound()  {    [BUGGY]      getPopulationSize();  getNumberOfSuccesses();  [BUGGY]    return  FastMath.max(0,        getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  }  [CLASS]  HypergeometricDistribution  [METHOD]  getSupportLowerBound  [RETURN_TYPE]  int  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	308	309	1	replace	        getPopulationSize();    getNumberOfSuccesses();	  	compilable	  [FE]  AssertionError  testMath1021	273	1
902	[BUG]  [BUGGY]      getPopulationSize();  getNumberOfSuccesses()  -  getPopulationSize();  [CE]  not  a  statement  [CONTEXT]    public  int  getSupportLowerBound()  {    [BUGGY]      getPopulationSize();  getNumberOfSuccesses()  -  getPopulationSize();  [BUGGY]    return  FastMath.max(0,        getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  }  [CLASS]  HypergeometricDistribution  [METHOD]  getSupportLowerBound  [RETURN_TYPE]  int  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	308	309	1	replace	        getPopulationSize();    getNumberOfSuccesses()  -  getPopulationSize();	  	non-compiled	[CE]  not  a  statement	273	None
903	[BUG]  [BUGGY]      getPopulationSize();  getNumberOfSuccesses()  -  getPopulationSize());  [CE]  not  a  statement  [CONTEXT]    public  int  getSupportLowerBound()  {    [BUGGY]      getPopulationSize();  getNumberOfSuccesses()  -  getPopulationSize());  [BUGGY]    return  FastMath.max(0,        getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  }  [CLASS]  HypergeometricDistribution  [METHOD]  getSupportLowerBound  [RETURN_TYPE]  int  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	308	309	1	replace	        getPopulationSize();    getNumberOfSuccesses()  -  getPopulationSize());	  	non-compiled	[CE]  not  a  statement	273	None
904	[BUG]  [BUGGY]      getPopulationSize();  getNumberOfSuccesses()  +  getPopulationSize();  [CE]  not  a  statement  [CONTEXT]    public  int  getSupportLowerBound()  {    [BUGGY]      getPopulationSize();  getNumberOfSuccesses()  +  getPopulationSize();  [BUGGY]    return  FastMath.max(0,        getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  }  [CLASS]  HypergeometricDistribution  [METHOD]  getSupportLowerBound  [RETURN_TYPE]  int  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	308	309	1	replace	        getPopulationSize();    getNumberOfSuccesses()  +  getPopulationSize();	  	non-compiled	[CE]  not  a  statement	273	None
911	[BUG]  [BUGGY]  if(numericalVariance  >  0)  {  if(!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumberOfSuccesses();  }  [CE]  illegal  start  of  expression  [CONTEXT]    public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();    [BUGGY]  if(numericalVariance  >  0)  {  if(!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumberOfSuccesses();  }  [BUGGY]    }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	281	281	1	replace	if(numericalVariance  >  0)  {  if(!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumberOfSuccesses();  }	  numericalVarianceIsCalculated    =(numericalVariance    ==    0)?    numericalVarianceIsCalculated    :    false;    	non-compiled	[CE]  illegal  start  of  expression	394	None
913	[BUG]  [BUGGY]  if(numericalVariance!=  1)  {  if(!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumberOfSuccesses();  }  [CE]  illegal  start  of  expression  [CONTEXT]    public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();    [BUGGY]  if(numericalVariance!=  1)  {  if(!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumberOfSuccesses();  }  [BUGGY]    }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	281	281	1	replace	if(numericalVariance!=  1)  {  if(!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumberOfSuccesses();  }	  numericalVarianceIsCalculated    =(numericalVariance    ==    0)?    numericalVarianceIsCalculated    :    false;    	non-compiled	[CE]  illegal  start  of  expression	394	None
914	[BUG]  [BUGGY]  if(numericalVariance  >  0.0)  {  if(!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumberOfSuccesses();  }  [CE]  illegal  start  of  expression  [CONTEXT]    public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();    [BUGGY]  if(numericalVariance  >  0.0)  {  if(!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumberOfSuccesses();  }  [BUGGY]    }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	281	281	1	replace	if(numericalVariance  >  0.0)  {  if(!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumberOfSuccesses();  }	  numericalVarianceIsCalculated    =(numericalVariance    ==    0)?    numericalVarianceIsCalculated    :    false;    	non-compiled	[CE]  illegal  start  of  expression	394	None
921	[BUG]  [BUGGY]      int  k  =  getNumberOfSuccesses();  int  k  =  getPopulationSize();  [CE]  variable  k  is  already  defined  in  method  getNumericalMean()  [CONTEXT]    public  double  getNumericalMean()  {    [BUGGY]      int  k  =  getNumberOfSuccesses();  int  k  =  getPopulationSize();  [BUGGY]    return  (double)  (getSampleSize()  *  getNumberOfSuccesses())  /  (double)  getPopulationSize();  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalMean  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	268	268	1	replace	        int    k    =    getNumberOfSuccesses();    int  k  =  getPopulationSize();	  	non-compiled	[CE]  variable  k  is  already  defined  in  method  getNumericalMean()	362	None
922	[BUG]  [BUGGY]      int  k  =  getNumberOfSuccesses();  int  k  =  getNumberOfSuccesses();  [CE]  variable  k  is  already  defined  in  method  getNumericalMean()  [CONTEXT]    public  double  getNumericalMean()  {    [BUGGY]      int  k  =  getNumberOfSuccesses();  int  k  =  getNumberOfSuccesses();  [BUGGY]    return  (double)  (getSampleSize()  *  getNumberOfSuccesses())  /  (double)  getPopulationSize();  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalMean  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	268	268	1	replace	        int    k    =    getNumberOfSuccesses();    int  k  =  getNumberOfSuccesses();	  	non-compiled	[CE]  variable  k  is  already  defined  in  method  getNumericalMean()	362	None
923	[BUG]  [BUGGY]  [FE]  AssertionError  testMath1021  [CONTEXT]    public  double  getNumericalMean()  {    [BUGGY]      int  k  =  getNumberOfSuccesses();  int  m  =  getNumberOfSuccesses();  [BUGGY]    return  (double)  (getSampleSize()  *  getNumberOfSuccesses())  /  (double)  getPopulationSize();  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalMean  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	268	268	1	add	        int    k    =    getNumberOfSuccesses();    int  m  =  getNumberOfSuccesses();	  	compilable	  [FE]  AssertionError  testMath1021	362	1
924	[BUG]  [BUGGY]      int  k  =  getNumberOfSuccesses();  int  m  =  getNumberOfSuccesses();  [FE]  AssertionError  testMath1021  [CONTEXT]    public  double  getNumericalMean()  {    [BUGGY]      int  k  =  getNumberOfSuccesses();  int  m  =  getNumberOfSuccesses();  [BUGGY]    return  (double)  (getSampleSize()  *  getNumberOfSuccesses())  /  (double)  getPopulationSize();  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalMean  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	268	268	1	replace	        int    k    =    getNumberOfSuccesses();    int  m  =  getNumberOfSuccesses();	  	compilable	  [FE]  AssertionError  testMath1021	362	1
924	[BUG]  [BUGGY]      int  k  =  getNumberOfSuccesses();  int  k  =  getSampleSize();  [CE]  variable  k  is  already  defined  in  method  getNumericalMean()  [CONTEXT]    public  double  getNumericalMean()  {    [BUGGY]      int  k  =  getNumberOfSuccesses();  int  k  =  getSampleSize();  [BUGGY]    return  (double)  (getSampleSize()  *  getNumberOfSuccesses())  /  (double)  getPopulationSize();  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalMean  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	268	268	1	replace	        int    k    =    getNumberOfSuccesses();    int  k  =  getSampleSize();	  	non-compiled	[CE]  variable  k  is  already  defined  in  method  getNumericalMean()	362	None
925	[BUG]  [BUGGY]  [FE]  AssertionError  testMath1021  [CONTEXT]    public  double  getNumericalMean()  {    [BUGGY]      int  k  =  getNumberOfSuccesses();  int  m  =  getPopulationSize();  [BUGGY]    return  (double)  (getSampleSize()  *  getNumberOfSuccesses())  /  (double)  getPopulationSize();  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalMean  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	268	268	1	add	        int    k    =    getNumberOfSuccesses();    int  m  =  getPopulationSize();	  	compilable	  [FE]  AssertionError  testMath1021	362	1
926	[BUG]  [BUGGY]      int  k  =  getNumberOfSuccesses();  int  m  =  getPopulationSize();  [FE]  AssertionError  testMath1021  [CONTEXT]    public  double  getNumericalMean()  {    [BUGGY]      int  k  =  getNumberOfSuccesses();  int  m  =  getPopulationSize();  [BUGGY]    return  (double)  (getSampleSize()  *  getNumberOfSuccesses())  /  (double)  getPopulationSize();  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalMean  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	268	268	1	replace	        int    k    =    getNumberOfSuccesses();    int  m  =  getPopulationSize();	  	compilable	  [FE]  AssertionError  testMath1021	362	1
932	[BUG]  [BUGGY]  [FE]  AssertionError  testMath1021  [CONTEXT]    public  double  getNumericalVariance()  {    [BUGGY]  if(!numericalVarianceIsCalculated  &&  getNumberOfSuccesses()  >  1)  {  [BUGGY]    numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	279	279	1	add	if(!numericalVarianceIsCalculated  &&  getNumberOfSuccesses()  >  1)  {	  if(!numericalVarianceIsCalculated    &&    getNumberOfSuccesses()    >    0)    {    	compilable	  [FE]  AssertionError  testMath1021	205	1
933	[BUG]  [BUGGY]  if(!numericalVarianceIsCalculated  &&  getNumberOfSuccesses()  >  1)  {  [FE]  AssertionError  testMath1021  [CONTEXT]    public  double  getNumericalVariance()  {    [BUGGY]  if(!numericalVarianceIsCalculated  &&  getNumberOfSuccesses()  >  1)  {  [BUGGY]    numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	279	279	1	replace	if(!numericalVarianceIsCalculated  &&  getNumberOfSuccesses()  >  1)  {	  if(!numericalVarianceIsCalculated    &&    getNumberOfSuccesses()    >    0)    {    	compilable	  [FE]  AssertionError  testMath1021	205	1
933	[BUG]  [BUGGY]  [FE]  AssertionError  testMath1021  [CONTEXT]    public  double  getNumericalVariance()  {    [BUGGY]  if(!numericalVarianceIsCalculated  &&  getNumberOfSuccesses()  >  0  ||!numericalVarianceIsCalculated  &&  getNumberOfSuccesses()  >  0)  {  [BUGGY]    numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	279	279	1	add	if(!numericalVarianceIsCalculated  &&  getNumberOfSuccesses()  >  0  ||!numericalVarianceIsCalculated  &&  getNumberOfSuccesses()  >  0)  {	  if(!numericalVarianceIsCalculated    &&    getNumberOfSuccesses()    >    0)    {    	compilable	  [FE]  AssertionError  testMath1021	205	1
934	[BUG]  [BUGGY]  if(!numericalVarianceIsCalculated  &&  getNumberOfSuccesses()  >  0  ||!numericalVarianceIsCalculated  &&  getNumberOfSuccesses()  >  0)  {  [FE]  AssertionError  testMath1021  [CONTEXT]    public  double  getNumericalVariance()  {    [BUGGY]  if(!numericalVarianceIsCalculated  &&  getNumberOfSuccesses()  >  0  ||!numericalVarianceIsCalculated  &&  getNumberOfSuccesses()  >  0)  {  [BUGGY]    numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	279	279	1	replace	if(!numericalVarianceIsCalculated  &&  getNumberOfSuccesses()  >  0  ||!numericalVarianceIsCalculated  &&  getNumberOfSuccesses()  >  0)  {	  if(!numericalVarianceIsCalculated    &&    getNumberOfSuccesses()    >    0)    {    	compilable	  [FE]  AssertionError  testMath1021	205	1
934	[BUG]  [BUGGY]  [FE]  AssertionError  testMoments  [CONTEXT]    public  double  getNumericalVariance()  {    [BUGGY]  if(numericalVarianceIsCalculated  &&  getNumberOfSuccesses()  >  0)  {  [BUGGY]    numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	279	279	1	add	if(numericalVarianceIsCalculated  &&  getNumberOfSuccesses()  >  0)  {	  if(!numericalVarianceIsCalculated    &&    getNumberOfSuccesses()    >    0)    {    	compilable	  [FE]  AssertionError  testMoments	205	1
935	[BUG]  [BUGGY]  if(numericalVarianceIsCalculated  &&  getNumberOfSuccesses()  >  0)  {  [FE]  AssertionError  testMoments  [CONTEXT]    public  double  getNumericalVariance()  {    [BUGGY]  if(numericalVarianceIsCalculated  &&  getNumberOfSuccesses()  >  0)  {  [BUGGY]    numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	279	279	1	replace	if(numericalVarianceIsCalculated  &&  getNumberOfSuccesses()  >  0)  {	  if(!numericalVarianceIsCalculated    &&    getNumberOfSuccesses()    >    0)    {    	compilable	  [FE]  AssertionError  testMoments	205	1
941	[BUG]  [BUGGY]      int  populationSize  =  getNumberOfSuccesses();  if(!numericalVarianceIsCalculated  &&  Math.abs(numberOfSuccesses)>  1)  {  [CE]  illegal  start  of  expression  [CONTEXT]    public  int  getSupportLowerBound()  {    [BUGGY]      int  populationSize  =  getNumberOfSuccesses();  if(!numericalVarianceIsCalculated  &&  Math.abs(numberOfSuccesses)>  1)  {  [BUGGY]    return  FastMath.max(0,        getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  }  [CLASS]  HypergeometricDistribution  [METHOD]  getSupportLowerBound  [RETURN_TYPE]  int  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	308	309	1	replace	        int    populationSize    =    getNumberOfSuccesses();    if(!numericalVarianceIsCalculated  &&  Math.abs(numberOfSuccesses)>  1)  {	  	non-compiled	[CE]  illegal  start  of  expression	65	None
942	[BUG]  [BUGGY]      int  populationSize  =  getNumberOfSuccesses();  if(!numericalVarianceIsCalculated  &&  Math.abs(numberOfSuccesses)>  0)  {  [CE]  illegal  start  of  expression  [CONTEXT]    public  int  getSupportLowerBound()  {    [BUGGY]      int  populationSize  =  getNumberOfSuccesses();  if(!numericalVarianceIsCalculated  &&  Math.abs(numberOfSuccesses)>  0)  {  [BUGGY]    return  FastMath.max(0,        getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  }  [CLASS]  HypergeometricDistribution  [METHOD]  getSupportLowerBound  [RETURN_TYPE]  int  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	308	309	1	replace	        int    populationSize    =    getNumberOfSuccesses();    if(!numericalVarianceIsCalculated  &&  Math.abs(numberOfSuccesses)>  0)  {	  	non-compiled	[CE]  illegal  start  of  expression	65	None
945	[BUG]  [BUGGY]      int  populationSize  =  getNumberOfSuccesses();  if(!numericalVarianceIsCalculated  &&  Math.rint(numberOfSuccesses)>  0)  {  [CE]  illegal  start  of  expression  [CONTEXT]    public  int  getSupportLowerBound()  {    [BUGGY]      int  populationSize  =  getNumberOfSuccesses();  if(!numericalVarianceIsCalculated  &&  Math.rint(numberOfSuccesses)>  0)  {  [BUGGY]    return  FastMath.max(0,        getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  }  [CLASS]  HypergeometricDistribution  [METHOD]  getSupportLowerBound  [RETURN_TYPE]  int  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	308	309	1	replace	        int    populationSize    =    getNumberOfSuccesses();    if(!numericalVarianceIsCalculated  &&  Math.rint(numberOfSuccesses)>  0)  {	  	non-compiled	[CE]  illegal  start  of  expression	65	None
952	[BUG]  [BUGGY]  int  numberOfSuccesses  =  getNumberOfSuccesses()  /  getPopulationSize();  [CE]  missing  return  statement  [CONTEXT]    public  int  getSupportLowerBound()  {    [BUGGY]  int  numberOfSuccesses  =  getNumberOfSuccesses()  /  getPopulationSize();  [BUGGY]    return  FastMath.max(0,        getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  }  [CLASS]  HypergeometricDistribution  [METHOD]  getSupportLowerBound  [RETURN_TYPE]  int  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	308	309	1	replace	int  numberOfSuccesses  =  getNumberOfSuccesses()  /  getPopulationSize();	      int    numberOfSuccesses    =    getNumberOfSuccesses()    -    getPopulationSize();    	non-compiled	[CE]  missing  return  statement	84	None
953	[BUG]  [BUGGY]  int  numberOfSuccesses  =  getPopulationSize()  -  getNumberOfSuccesses();  [CE]  missing  return  statement  [CONTEXT]    public  int  getSupportLowerBound()  {    [BUGGY]  int  numberOfSuccesses  =  getPopulationSize()  -  getNumberOfSuccesses();  [BUGGY]    return  FastMath.max(0,        getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  }  [CLASS]  HypergeometricDistribution  [METHOD]  getSupportLowerBound  [RETURN_TYPE]  int  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	308	309	1	replace	int  numberOfSuccesses  =  getPopulationSize()  -  getNumberOfSuccesses();	      int    numberOfSuccesses    =    getNumberOfSuccesses()    -    getPopulationSize();    	non-compiled	[CE]  missing  return  statement	84	None
954	[BUG]  [BUGGY]  int  numberOfSuccesses  =  getNumberOfSuccesses()  -  getPopulationSize()  +  1;  [CE]  missing  return  statement  [CONTEXT]    public  int  getSupportLowerBound()  {    [BUGGY]  int  numberOfSuccesses  =  getNumberOfSuccesses()  -  getPopulationSize()  +  1;  [BUGGY]    return  FastMath.max(0,        getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  }  [CLASS]  HypergeometricDistribution  [METHOD]  getSupportLowerBound  [RETURN_TYPE]  int  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	308	309	1	replace	int  numberOfSuccesses  =  getNumberOfSuccesses()  -  getPopulationSize()  +  1;	      int    numberOfSuccesses    =    getNumberOfSuccesses()    -    getPopulationSize();    	non-compiled	[CE]  missing  return  statement	84	None
964	[BUG]  [BUGGY]  if(!numericalVarianceIsCalculated)  {  if(!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumberOfSuccesses();  if(!numericalVarianceIsCalculated)  {  numericalVari  [CE]  not  a  statement  [CONTEXT]    public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }    [BUGGY]  if(!numericalVarianceIsCalculated)  {  if(!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumberOfSuccesses();  if(!numericalVarianceIsCalculated)  {  numericalVari  [BUGGY]    return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	283	283	1	replace	if(!numericalVarianceIsCalculated)  {  if(!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumberOfSuccesses();  if(!numericalVarianceIsCalculated)  {  numericalVari	      if(!numericalVarianceIsCalculated)    {    if(!numericalVarianceIsCalculated)    {    numericalVariance    =    calculateNumberOfSuccesses();    if(!numericalVarianceIsCalculated)    {    numericalVariance    =    	non-compiled	[CE]  not  a  statement	104	None
971	[BUG]  [BUGGY]  [FE]  AssertionError  testMath1021  [CONTEXT]    public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();    [BUGGY]  final  double  n  =  getPopulationSize();  [BUGGY]    }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	281	281	1	add	final  double  n  =  getPopulationSize();	  numericalVarianceIsCalculated    =    false;    	compilable	  [FE]  AssertionError  testMath1021	122	1
972	[BUG]  [BUGGY]  final  double  n  =  getPopulationSize();  [FE]  AssertionError  testMath1021  [CONTEXT]    public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();    [BUGGY]  final  double  n  =  getPopulationSize();  [BUGGY]    }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	281	281	1	replace	final  double  n  =  getPopulationSize();	  numericalVarianceIsCalculated    =    false;    	compilable	  [FE]  AssertionError  testMath1021	122	1
972	[BUG]  [BUGGY]  [FE]  AssertionError  testMath1021  [CONTEXT]    public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();    [BUGGY]  final  double  n  =  getNumberOfSuccesses();  [BUGGY]    }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	281	281	1	add	final  double  n  =  getNumberOfSuccesses();	  numericalVarianceIsCalculated    =    false;    	compilable	  [FE]  AssertionError  testMath1021	122	1
973	[BUG]  [BUGGY]  final  double  n  =  getNumberOfSuccesses();  [FE]  AssertionError  testMath1021  [CONTEXT]    public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();    [BUGGY]  final  double  n  =  getNumberOfSuccesses();  [BUGGY]    }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	281	281	1	replace	final  double  n  =  getNumberOfSuccesses();	  numericalVarianceIsCalculated    =    false;    	compilable	  [FE]  AssertionError  testMath1021	122	1
973	[BUG]  [BUGGY]  final  double  n  =  getNumberOfSuccesses();  return(N  *  m  *(N  *  n)*(N  *  m))  /(N  *  N  *(N  -  1));  [CE]  cannot  find  symbol  N  [CONTEXT]    public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();    [BUGGY]  final  double  n  =  getNumberOfSuccesses();  return(N  *  m  *(N  *  n)*(N  *  m))  /(N  *  N  *(N  -  1));  [BUGGY]    }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	281	281	1	replace	final  double  n  =  getNumberOfSuccesses();  return(N  *  m  *(N  *  n)*(N  *  m))  /(N  *  N  *(N  -  1));	  numericalVarianceIsCalculated    =    false;    	non-compiled	[CE]  cannot  find  symbol  N	122	None
981	[BUG]  [BUGGY]  [FE]  AssertionError  testMath1021  [CONTEXT]    public  int  getSupportLowerBound()  {    [BUGGY]      int  numberOfSuccesses  =  getNumberOfSuccesses();  int  populationSize  =  getPopulationSize();  [BUGGY]    return  FastMath.max(0,        getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  }  [CLASS]  HypergeometricDistribution  [METHOD]  getSupportLowerBound  [RETURN_TYPE]  int  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	308	309	1	add	        int    numberOfSuccesses    =    getNumberOfSuccesses();    int  populationSize  =  getPopulationSize();	  	compilable	  [FE]  AssertionError  testMath1021	81	1
982	[BUG]  [BUGGY]      int  numberOfSuccesses  =  getNumberOfSuccesses();  int  populationSize  =  getPopulationSize();  [FE]  AssertionError  testMath1021  [CONTEXT]    public  int  getSupportLowerBound()  {    [BUGGY]      int  numberOfSuccesses  =  getNumberOfSuccesses();  int  populationSize  =  getPopulationSize();  [BUGGY]    return  FastMath.max(0,        getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  }  [CLASS]  HypergeometricDistribution  [METHOD]  getSupportLowerBound  [RETURN_TYPE]  int  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	308	309	1	replace	        int    numberOfSuccesses    =    getNumberOfSuccesses();    int  populationSize  =  getPopulationSize();	  	compilable	  [FE]  AssertionError  testMath1021	81	1
982	[BUG]  [BUGGY]  [FE]  AssertionError  testMath1021  [CONTEXT]    public  int  getSupportLowerBound()  {    [BUGGY]      int  numberOfSuccesses  =  getNumberOfSuccesses();  int  populationSize  =  getNumberOfSuccesses();  [BUGGY]    return  FastMath.max(0,        getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  }  [CLASS]  HypergeometricDistribution  [METHOD]  getSupportLowerBound  [RETURN_TYPE]  int  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	308	309	1	add	        int    numberOfSuccesses    =    getNumberOfSuccesses();    int  populationSize  =  getNumberOfSuccesses();	  	compilable	  [FE]  AssertionError  testMath1021	81	1
983	[BUG]  [BUGGY]      int  numberOfSuccesses  =  getNumberOfSuccesses();  int  populationSize  =  getNumberOfSuccesses();  [FE]  AssertionError  testMath1021  [CONTEXT]    public  int  getSupportLowerBound()  {    [BUGGY]      int  numberOfSuccesses  =  getNumberOfSuccesses();  int  populationSize  =  getNumberOfSuccesses();  [BUGGY]    return  FastMath.max(0,        getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  }  [CLASS]  HypergeometricDistribution  [METHOD]  getSupportLowerBound  [RETURN_TYPE]  int  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	308	309	1	replace	        int    numberOfSuccesses    =    getNumberOfSuccesses();    int  populationSize  =  getNumberOfSuccesses();	  	compilable	  [FE]  AssertionError  testMath1021	81	1
983	[BUG]  [BUGGY]  [FE]  AssertionError  testMath1021  [CONTEXT]    public  int  getSupportLowerBound()  {    [BUGGY]      int  numberOfSuccesses  =  getNumberOfSuccesses();  int  populationSize  =  getPopulationSize()  -  getPopulationSize();  [BUGGY]    return  FastMath.max(0,        getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  }  [CLASS]  HypergeometricDistribution  [METHOD]  getSupportLowerBound  [RETURN_TYPE]  int  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	308	309	1	add	        int    numberOfSuccesses    =    getNumberOfSuccesses();    int  populationSize  =  getPopulationSize()  -  getPopulationSize();	  	compilable	  [FE]  AssertionError  testMath1021	81	1
984	[BUG]  [BUGGY]      int  numberOfSuccesses  =  getNumberOfSuccesses();  int  populationSize  =  getPopulationSize()  -  getPopulationSize();  [FE]  AssertionError  testMath1021  [CONTEXT]    public  int  getSupportLowerBound()  {    [BUGGY]      int  numberOfSuccesses  =  getNumberOfSuccesses();  int  populationSize  =  getPopulationSize()  -  getPopulationSize();  [BUGGY]    return  FastMath.max(0,        getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  }  [CLASS]  HypergeometricDistribution  [METHOD]  getSupportLowerBound  [RETURN_TYPE]  int  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	308	309	1	replace	        int    numberOfSuccesses    =    getNumberOfSuccesses();    int  populationSize  =  getPopulationSize()  -  getPopulationSize();	  	compilable	  [FE]  AssertionError  testMath1021	81	1
984	[BUG]  [BUGGY]      int  numberOfSuccesses  =  getNumberOfSuccesses();  super.getSupportLowerBound();  [CE]  abstract  method  getSupportLowerBound()  in  IntegerDistribution  cannot  be  accessed  directly  [CONTEXT]    public  int  getSupportLowerBound()  {    [BUGGY]      int  numberOfSuccesses  =  getNumberOfSuccesses();  super.getSupportLowerBound();  [BUGGY]    return  FastMath.max(0,        getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  }  [CLASS]  HypergeometricDistribution  [METHOD]  getSupportLowerBound  [RETURN_TYPE]  int  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	308	309	1	replace	        int    numberOfSuccesses    =    getNumberOfSuccesses();    super.getSupportLowerBound();	  	non-compiled	[CE]  abstract  method  getSupportLowerBound()  in  IntegerDistribution  cannot  be  accessed  directly	81	None
985	[BUG]  [BUGGY]      int  numberOfSuccesses  =  getNumberOfSuccesses();  int  populationSize  =  getPopulationSize().getPopulationSize();  [CE]  int  cannot  be  dereferenced  [CONTEXT]    public  int  getSupportLowerBound()  {    [BUGGY]      int  numberOfSuccesses  =  getNumberOfSuccesses();  int  populationSize  =  getPopulationSize().getPopulationSize();  [BUGGY]    return  FastMath.max(0,        getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  }  [CLASS]  HypergeometricDistribution  [METHOD]  getSupportLowerBound  [RETURN_TYPE]  int  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	308	309	1	replace	        int    numberOfSuccesses    =    getNumberOfSuccesses();    int  populationSize  =  getPopulationSize().getPopulationSize();	  	non-compiled	[CE]  int  cannot  be  dereferenced	81	None
993	[BUG]  [BUGGY]  int  numberOfSuccesses  =  getNumberOfSuccesses()  -  1;  [CE]  missing  return  statement  [CONTEXT]    public  int  getSupportLowerBound()  {    [BUGGY]  int  numberOfSuccesses  =  getNumberOfSuccesses()  -  1;  [BUGGY]    return  FastMath.max(0,        getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  }  [CLASS]  HypergeometricDistribution  [METHOD]  getSupportLowerBound  [RETURN_TYPE]  int  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	308	309	1	replace	int  numberOfSuccesses  =  getNumberOfSuccesses()  -  1;	      int    numberOfSuccesses    =    getNumberOfSuccesses();    	non-compiled	[CE]  missing  return  statement	82	None
994	[BUG]  [BUGGY]  int  numberOfSuccesses  =  getNumberOfSuccesses()  +  1;  [CE]  missing  return  statement  [CONTEXT]    public  int  getSupportLowerBound()  {    [BUGGY]  int  numberOfSuccesses  =  getNumberOfSuccesses()  +  1;  [BUGGY]    return  FastMath.max(0,        getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  }  [CLASS]  HypergeometricDistribution  [METHOD]  getSupportLowerBound  [RETURN_TYPE]  int  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	308	309	1	replace	int  numberOfSuccesses  =  getNumberOfSuccesses()  +  1;	      int    numberOfSuccesses    =    getNumberOfSuccesses();    	non-compiled	[CE]  missing  return  statement	82	None
1001	[BUG]  [BUGGY]  if(numericalVarianceIsCalculated)  {  if(!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumberOfSuccesses();  }  [CE]  illegal  start  of  expression  [CONTEXT]    protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();    [BUGGY]  if(numericalVarianceIsCalculated)  {  if(!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumberOfSuccesses();  }  [BUGGY]    final  double  m  =  getNumberOfSuccesses();  final  double  n  =  getSampleSize();  return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	293	293	1	replace	if(numericalVarianceIsCalculated)  {  if(!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumberOfSuccesses();  }	      final    double    N    =    getNumberOfSuccesses();    	non-compiled	[CE]  illegal  start  of  expression	141	None
1004	[BUG]  [BUGGY]  if(numericalVarianceIsCalculated)  {  if(!numericalVarianceIsCalculated)  {  numericalVariance  =  getNumberOfSuccesses();  }  [CE]  illegal  start  of  expression  [CONTEXT]    protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();    [BUGGY]  if(numericalVarianceIsCalculated)  {  if(!numericalVarianceIsCalculated)  {  numericalVariance  =  getNumberOfSuccesses();  }  [BUGGY]    final  double  m  =  getNumberOfSuccesses();  final  double  n  =  getSampleSize();  return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	293	293	1	replace	if(numericalVarianceIsCalculated)  {  if(!numericalVarianceIsCalculated)  {  numericalVariance  =  getNumberOfSuccesses();  }	      final    double    N    =    getNumberOfSuccesses();    	non-compiled	[CE]  illegal  start  of  expression	141	None
1012	[BUG]  [BUGGY]  if(getPopulationSize()  >  0)  {  int  k  =  getNumberOfSuccesses();  if(k  >  0)  {  return  getNumberOfSuccesses()  *  getNumberOfSuccesses();  }  [CE]  illegal  start  of  expression  [CONTEXT]    public  double  getNumericalMean()  {    [BUGGY]  if(getPopulationSize()  >  0)  {  int  k  =  getNumberOfSuccesses();  if(k  >  0)  {  return  getNumberOfSuccesses()  *  getNumberOfSuccesses();  }  [BUGGY]    return  (double)  (getSampleSize()  *  getNumberOfSuccesses())  /  (double)  getPopulationSize();  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalMean  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	268	268	1	replace	if(getPopulationSize()  >  0)  {  int  k  =  getNumberOfSuccesses();  if(k  >  0)  {  return  getNumberOfSuccesses()  *  getNumberOfSuccesses();  }	      if(getNumberOfSuccesses()    >    0)    {    int    k    =    getNumberOfSuccesses();    if(k    >    0)    {    return    getNumberOfSuccesses()    *    getNumberOfSuccesses();    }    	non-compiled	[CE]  illegal  start  of  expression	365	None
1013	[BUG]  [BUGGY]  if(getNumberOfSuccesses()  >  1)  {  int  k  =  getNumberOfSuccesses();  if(k  >  0)  {  return  getNumberOfSuccesses()  *  getNumberOfSuccesses();  }  [CE]  illegal  start  of  expression  [CONTEXT]    public  double  getNumericalMean()  {    [BUGGY]  if(getNumberOfSuccesses()  >  1)  {  int  k  =  getNumberOfSuccesses();  if(k  >  0)  {  return  getNumberOfSuccesses()  *  getNumberOfSuccesses();  }  [BUGGY]    return  (double)  (getSampleSize()  *  getNumberOfSuccesses())  /  (double)  getPopulationSize();  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalMean  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	268	268	1	replace	if(getNumberOfSuccesses()  >  1)  {  int  k  =  getNumberOfSuccesses();  if(k  >  0)  {  return  getNumberOfSuccesses()  *  getNumberOfSuccesses();  }	      if(getNumberOfSuccesses()    >    0)    {    int    k    =    getNumberOfSuccesses();    if(k    >    0)    {    return    getNumberOfSuccesses()    *    getNumberOfSuccesses();    }    	non-compiled	[CE]  illegal  start  of  expression	365	None
1024	[BUG]  [BUGGY]  if(!numberativeVarianceIsCalculated)  {  [CE]  cannot  find  symbol  numberativeVarianceIsCalculated  [CONTEXT]    public  double  getNumericalVariance()  {    [BUGGY]  if(!numberativeVarianceIsCalculated)  {  [BUGGY]    numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	279	279	1	replace	if(!numberativeVarianceIsCalculated)  {	  if(!nativeVarianceIsCalculated)    {    	non-compiled	[CE]  cannot  find  symbol  numberativeVarianceIsCalculated	24	None
1035	[BUG]  [BUGGY]      if(!numericalVarianceIsCalculated)  {  if(!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateScaledNumericalVariance();  }  [CE]  illegal  start  of  expression  [CONTEXT]    public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();    [BUGGY]      if(!numericalVarianceIsCalculated)  {  if(!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateScaledNumericalVariance();  }  [BUGGY]    }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	281	281	1	replace	        if(!numericalVarianceIsCalculated)  {  if(!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateScaledNumericalVariance();  }	  	non-compiled	[CE]  illegal  start  of  expression	125	None
1043	[BUG]  [BUGGY]  final  double  n  N  =  getNumberOfSuccesses();  [CE]  ';'  expected  [CONTEXT]    protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();  final  double  m  =  getNumberOfSuccesses();    [BUGGY]  final  double  n  N  =  getNumberOfSuccesses();  [BUGGY]    final  double  n  =  getSampleSize();  return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	294	294	1	replace	final  double  n  N  =  getNumberOfSuccesses();	      final    double    N    =    getNumberOfSuccesses();    	non-compiled	[CE]  ';'  expected	53	None
1053	[BUG]  [BUGGY]  [FE]  AssertionError  testMoments  [CONTEXT]    protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();    [BUGGY]  final  double  m  =  getNumberOfSuccesses()  *  N  +  1;  [BUGGY]    final  double  n  =  getSampleSize();  return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	293	293	1	add	final  double  m  =  getNumberOfSuccesses()  *  N  +  1;	  final    double    m    =    getNumberOfSuccesses()    *    N;    	compilable	  [FE]  AssertionError  testMoments	454	1
1054	[BUG]  [BUGGY]  final  double  m  =  getNumberOfSuccesses()  *  N  +  1;  [FE]  AssertionError  testMoments  [CONTEXT]    protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();    [BUGGY]  final  double  m  =  getNumberOfSuccesses()  *  N  +  1;  [BUGGY]    final  double  n  =  getSampleSize();  return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	293	293	1	replace	final  double  m  =  getNumberOfSuccesses()  *  N  +  1;	  final    double    m    =    getNumberOfSuccesses()    *    N;    	compilable	  [FE]  AssertionError  testMoments	454	1
1054	[BUG]  [BUGGY]  [FE]  AssertionError  testMoments  [CONTEXT]    protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();    [BUGGY]  final  double  m  =  getNumberOfSuccesses()  *  N  +  2;  [BUGGY]    final  double  n  =  getSampleSize();  return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	293	293	1	add	final  double  m  =  getNumberOfSuccesses()  *  N  +  2;	  final    double    m    =    getNumberOfSuccesses()    *    N;    	compilable	  [FE]  AssertionError  testMoments	454	1
1055	[BUG]  [BUGGY]  final  double  m  =  getNumberOfSuccesses()  *  N  +  2;  [FE]  AssertionError  testMoments  [CONTEXT]    protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();    [BUGGY]  final  double  m  =  getNumberOfSuccesses()  *  N  +  2;  [BUGGY]    final  double  n  =  getSampleSize();  return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	293	293	1	replace	final  double  m  =  getNumberOfSuccesses()  *  N  +  2;	  final    double    m    =    getNumberOfSuccesses()    *    N;    	compilable	  [FE]  AssertionError  testMoments	454	1
1061	[BUG]  [BUGGY]  if(!numericalVarianceIsCalculated  &&  getNumberOfSuccesses()  >  0)  {  if(!numericalVarianceIsCalculated  &&  getNumberOfSuccesses()  >  0)  {  [CE]  illegal  start  of  expression  [CONTEXT]    public  double  getNumericalVariance()  {    [BUGGY]  if(!numericalVarianceIsCalculated  &&  getNumberOfSuccesses()  >  0)  {  if(!numericalVarianceIsCalculated  &&  getNumberOfSuccesses()  >  0)  {  [BUGGY]    numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	279	279	1	replace	if(!numericalVarianceIsCalculated    &&    getNumberOfSuccesses()    >    0)    {    if(!numericalVarianceIsCalculated  &&  getNumberOfSuccesses()  >  0)  {	  	non-compiled	[CE]  illegal  start  of  expression	204	None
1062	[BUG]  [BUGGY]  if(!numericalVarianceIsCalculated  &&  getNumberOfSuccesses()  >  0)  {  if(!numericalVarianceIsCalculated  &&  getSampleSize()  >  0)  {  [CE]  illegal  start  of  expression  [CONTEXT]    public  double  getNumericalVariance()  {    [BUGGY]  if(!numericalVarianceIsCalculated  &&  getNumberOfSuccesses()  >  0)  {  if(!numericalVarianceIsCalculated  &&  getSampleSize()  >  0)  {  [BUGGY]    numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	279	279	1	replace	if(!numericalVarianceIsCalculated    &&    getNumberOfSuccesses()    >    0)    {    if(!numericalVarianceIsCalculated  &&  getSampleSize()  >  0)  {	  	non-compiled	[CE]  illegal  start  of  expression	204	None
1063	[BUG]  [BUGGY]  if(!numericalVarianceIsCalculated  &&  getNumberOfSuccesses()  >  0)  {  if(numericalVariance  ==  0)  {  if(!numericalVarianceIsCalculated  &&  getNumberOfSuccesses()  >  0)  {  [CE]  illegal  start  of  expression  [CONTEXT]    public  double  getNumericalVariance()  {    [BUGGY]  if(!numericalVarianceIsCalculated  &&  getNumberOfSuccesses()  >  0)  {  if(numericalVariance  ==  0)  {  if(!numericalVarianceIsCalculated  &&  getNumberOfSuccesses()  >  0)  {  [BUGGY]    numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	279	279	1	replace	if(!numericalVarianceIsCalculated    &&    getNumberOfSuccesses()    >    0)    {    if(numericalVariance  ==  0)  {  if(!numericalVarianceIsCalculated  &&  getNumberOfSuccesses()  >  0)  {	  	non-compiled	[CE]  illegal  start  of  expression	204	None
1064	[BUG]  [BUGGY]  if(!numericalVarianceIsCalculated  &&  getNumberOfSuccesses()  >  0)  {  if(!numericalVarianceIsCalculated  &&  getNumberOfSuccesses()  >  1)  {  [CE]  illegal  start  of  expression  [CONTEXT]    public  double  getNumericalVariance()  {    [BUGGY]  if(!numericalVarianceIsCalculated  &&  getNumberOfSuccesses()  >  0)  {  if(!numericalVarianceIsCalculated  &&  getNumberOfSuccesses()  >  1)  {  [BUGGY]    numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	279	279	1	replace	if(!numericalVarianceIsCalculated    &&    getNumberOfSuccesses()    >    0)    {    if(!numericalVarianceIsCalculated  &&  getNumberOfSuccesses()  >  1)  {	  	non-compiled	[CE]  illegal  start  of  expression	204	None
1065	[BUG]  [BUGGY]  if(!numericalVarianceIsCalculated  &&  getNumberOfSuccesses()  >  0)  {  if(getNumberOfSuccesses()  >  1)  {  if(!numericalVarianceIsCalculated  &&  getNumberOfSuccesses()  >  0)  {  [CE]  illegal  start  of  expression  [CONTEXT]    public  double  getNumericalVariance()  {    [BUGGY]  if(!numericalVarianceIsCalculated  &&  getNumberOfSuccesses()  >  0)  {  if(getNumberOfSuccesses()  >  1)  {  if(!numericalVarianceIsCalculated  &&  getNumberOfSuccesses()  >  0)  {  [BUGGY]    numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	279	279	1	replace	if(!numericalVarianceIsCalculated    &&    getNumberOfSuccesses()    >    0)    {    if(getNumberOfSuccesses()  >  1)  {  if(!numericalVarianceIsCalculated  &&  getNumberOfSuccesses()  >  0)  {	  	non-compiled	[CE]  illegal  start  of  expression	204	None
1072	[BUG]  [BUGGY]  numericalVariance  =  getNumberOfSuccesses()  -  1;  [CE]  missing  return  statement  [CONTEXT]    public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }    [BUGGY]  numericalVariance  =  getNumberOfSuccesses()  -  1;  [BUGGY]    return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	283	283	1	replace	numericalVariance  =  getNumberOfSuccesses()  -  1;	      if(!numericalVarianceIsCalculated)    {    if(!numericalVarianceIsCalculated)    {    numericalVariance    =    null;    }    	non-compiled	[CE]  missing  return  statement	102	None
1073	[BUG]  [BUGGY]  numericalVariance  =  calculateNumberOfSuccesses();  [CE]  cannot  find  symbol  [CONTEXT]    public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }    [BUGGY]  numericalVariance  =  calculateNumberOfSuccesses();  [BUGGY]    return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	283	283	1	replace	numericalVariance  =  calculateNumberOfSuccesses();	      if(!numericalVarianceIsCalculated)    {    if(!numericalVarianceIsCalculated)    {    numericalVariance    =    null;    }    	non-compiled	[CE]  cannot  find  symbol	102	None
1074	[BUG]  [BUGGY]  numericalVariance  =  getNumberOfSuccesses()  +  1;  [CE]  missing  return  statement  [CONTEXT]    public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }    [BUGGY]  numericalVariance  =  getNumberOfSuccesses()  +  1;  [BUGGY]    return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	283	283	1	replace	numericalVariance  =  getNumberOfSuccesses()  +  1;	      if(!numericalVarianceIsCalculated)    {    if(!numericalVarianceIsCalculated)    {    numericalVariance    =    null;    }    	non-compiled	[CE]  missing  return  statement	102	None
1081	[BUG]  [BUGGY]  if(!numericalVarianceIsCalculated)  {  if(!numericalVarianceIsCalculated)  {  numericalVariance  =  true;  toured  [CE]  not  a  statement  [CONTEXT]    public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();    [BUGGY]  if(!numericalVarianceIsCalculated)  {  if(!numericalVarianceIsCalculated)  {  numericalVariance  =  true;  toured  [BUGGY]    numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	281	281	1	replace	if(!numericalVarianceIsCalculated)  {  if(!numericalVarianceIsCalculated)  {  numericalVariance  =  true;  toured	      if(!numericalVarianceIsCalculated)    {    if(!numericalVarianceIsCalculated)    {    numericalVariance    =    true;    }    	non-compiled	[CE]  not  a  statement	174	None
1083	[BUG]  [BUGGY]  if(!numericalVarianceIsCalculated)  {  if(!numericalVarianceIsCalculated)  {  numericalVariance  =  true;  bodied  [CE]  not  a  statement  [CONTEXT]    public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();    [BUGGY]  if(!numericalVarianceIsCalculated)  {  if(!numericalVarianceIsCalculated)  {  numericalVariance  =  true;  bodied  [BUGGY]    numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	281	281	1	replace	if(!numericalVarianceIsCalculated)  {  if(!numericalVarianceIsCalculated)  {  numericalVariance  =  true;  bodied	      if(!numericalVarianceIsCalculated)    {    if(!numericalVarianceIsCalculated)    {    numericalVariance    =    true;    }    	non-compiled	[CE]  not  a  statement	174	None
1084	[BUG]  [BUGGY]  if(!numericalVarianceIsCalculated)  {  if(!numericalVarianceIsCalculated)  {  numericalVariance  =  true;  mapped  [CE]  not  a  statement  [CONTEXT]    public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();    [BUGGY]  if(!numericalVarianceIsCalculated)  {  if(!numericalVarianceIsCalculated)  {  numericalVariance  =  true;  mapped  [BUGGY]    numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	281	281	1	replace	if(!numericalVarianceIsCalculated)  {  if(!numericalVarianceIsCalculated)  {  numericalVariance  =  true;  mapped	      if(!numericalVarianceIsCalculated)    {    if(!numericalVarianceIsCalculated)    {    numericalVariance    =    true;    }    	non-compiled	[CE]  not  a  statement	174	None
1092	[BUG]  [BUGGY]  [FE]  AssertionError  testMath1021  [CONTEXT]    public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();    [BUGGY]  numericalVarianceIsCalculated  =(numericalVariance  >  0)?  numericalVarianceIsCalculated  :  false;  [BUGGY]    }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	281	281	1	add	numericalVarianceIsCalculated  =(numericalVariance  >  0)?  numericalVarianceIsCalculated  :  false;	  numericalVarianceIsCalculated    =(numericalVariance    <    0)?    numericalVarianceIsCalculated    :    false;    	compilable	  [FE]  AssertionError  testMath1021	393	1
1093	[BUG]  [BUGGY]  numericalVarianceIsCalculated  =(numericalVariance  >  0)?  numericalVarianceIsCalculated  :  false;  [FE]  AssertionError  testMath1021  [CONTEXT]    public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();    [BUGGY]  numericalVarianceIsCalculated  =(numericalVariance  >  0)?  numericalVarianceIsCalculated  :  false;  [BUGGY]    }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	281	281	1	replace	numericalVarianceIsCalculated  =(numericalVariance  >  0)?  numericalVarianceIsCalculated  :  false;	  numericalVarianceIsCalculated    =(numericalVariance    <    0)?    numericalVarianceIsCalculated    :    false;    	compilable	  [FE]  AssertionError  testMath1021	393	1
1093	[BUG]  [BUGGY]  [FE]  AssertionError  testMath1021  [CONTEXT]    public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();    [BUGGY]  numericalVarianceIsCalculated  =(numericalVariance  <  1)?  numericalVarianceIsCalculated  :  false;  [BUGGY]    }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	281	281	1	add	numericalVarianceIsCalculated  =(numericalVariance  <  1)?  numericalVarianceIsCalculated  :  false;	  numericalVarianceIsCalculated    =(numericalVariance    <    0)?    numericalVarianceIsCalculated    :    false;    	compilable	  [FE]  AssertionError  testMath1021	393	1
1094	[BUG]  [BUGGY]  numericalVarianceIsCalculated  =(numericalVariance  <  1)?  numericalVarianceIsCalculated  :  false;  [FE]  AssertionError  testMath1021  [CONTEXT]    public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();    [BUGGY]  numericalVarianceIsCalculated  =(numericalVariance  <  1)?  numericalVarianceIsCalculated  :  false;  [BUGGY]    }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	281	281	1	replace	numericalVarianceIsCalculated  =(numericalVariance  <  1)?  numericalVarianceIsCalculated  :  false;	  numericalVarianceIsCalculated    =(numericalVariance    <    0)?    numericalVarianceIsCalculated    :    false;    	compilable	  [FE]  AssertionError  testMath1021	393	1
1101	[BUG]  [BUGGY]  final  double  k  =  getPopulationSize();  [CE]  missing  return  statement  [CONTEXT]    protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();  final  double  m  =  getNumberOfSuccesses();  final  double  n  =  getSampleSize();    [BUGGY]  final  double  k  =  getPopulationSize();  [BUGGY]    return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	295	295	1	replace	final  double  k  =  getPopulationSize();	      final    double    k    =    getNumberOfSuccesses();    	non-compiled	[CE]  missing  return  statement	384	None
1102	[BUG]  [BUGGY]  final  double  k  =  getKnowNumberOfSuccesses();  [CE]  cannot  find  symbol  [CONTEXT]    protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();  final  double  m  =  getNumberOfSuccesses();  final  double  n  =  getSampleSize();    [BUGGY]  final  double  k  =  getKnowNumberOfSuccesses();  [BUGGY]    return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	295	295	1	replace	final  double  k  =  getKnowNumberOfSuccesses();	      final    double    k    =    getNumberOfSuccesses();    	non-compiled	[CE]  cannot  find  symbol	384	None
1104	[BUG]  [BUGGY]  final  double  k  =  getDecimalSize();  [CE]  cannot  find  symbol  [CONTEXT]    protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();  final  double  m  =  getNumberOfSuccesses();  final  double  n  =  getSampleSize();    [BUGGY]  final  double  k  =  getDecimalSize();  [BUGGY]    return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	295	295	1	replace	final  double  k  =  getDecimalSize();	      final    double    k    =    getNumberOfSuccesses();    	non-compiled	[CE]  cannot  find  symbol	384	None
1111	[BUG]  [BUGGY]  numericalVariance  =  Math.abs(numberOfSuccesses  /  2);  [CE]  illegal  start  of  type  [CONTEXT]    public  double  getNumericalVariance()  {    [BUGGY]  numericalVariance  =  Math.abs(numberOfSuccesses  /  2);  [BUGGY]    if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	279	279	1	replace	numericalVariance  =  Math.abs(numberOfSuccesses  /  2);	      double    numericalVariance    =    getNumberOfSuccesses()    *(numberOfSuccesses    -    1);    	non-compiled	[CE]  illegal  start  of  type	6	None
1112	[BUG]  [BUGGY]  numericalVariance  =  Math.abs(numberOfSuccesses  /  2  +  1);  [CE]  illegal  start  of  type  [CONTEXT]    public  double  getNumericalVariance()  {    [BUGGY]  numericalVariance  =  Math.abs(numberOfSuccesses  /  2  +  1);  [BUGGY]    if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	279	279	1	replace	numericalVariance  =  Math.abs(numberOfSuccesses  /  2  +  1);	      double    numericalVariance    =    getNumberOfSuccesses()    *(numberOfSuccesses    -    1);    	non-compiled	[CE]  illegal  start  of  type	6	None
1113	[BUG]  [BUGGY]  numericalVariance  =  Math.abs(numberOfSuccesses  *  2);  [CE]  illegal  start  of  type  [CONTEXT]    public  double  getNumericalVariance()  {    [BUGGY]  numericalVariance  =  Math.abs(numberOfSuccesses  *  2);  [BUGGY]    if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	279	279	1	replace	numericalVariance  =  Math.abs(numberOfSuccesses  *  2);	      double    numericalVariance    =    getNumberOfSuccesses()    *(numberOfSuccesses    -    1);    	non-compiled	[CE]  illegal  start  of  type	6	None
1114	[BUG]  [BUGGY]  numericalVariance  =  Math.abs(numberOfSuccesses  /  2  *  1);  [CE]  illegal  start  of  type  [CONTEXT]    public  double  getNumericalVariance()  {    [BUGGY]  numericalVariance  =  Math.abs(numberOfSuccesses  /  2  *  1);  [BUGGY]    if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	279	279	1	replace	numericalVariance  =  Math.abs(numberOfSuccesses  /  2  *  1);	      double    numericalVariance    =    getNumberOfSuccesses()    *(numberOfSuccesses    -    1);    	non-compiled	[CE]  illegal  start  of  type	6	None
1122	[BUG]  [BUGGY]  final  double  n  =  getNumberOfSuccesses().doubleValue();  [CE]  int  cannot  be  dereferenced  [CONTEXT]    protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();    [BUGGY]  final  double  n  =  getNumberOfSuccesses().doubleValue();  [BUGGY]    final  double  m  =  getNumberOfSuccesses();  final  double  n  =  getSampleSize();  return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	293	293	1	replace	final  double  n  =  getNumberOfSuccesses().doubleValue();	      final    double    N    =    getNumberOfSuccesses().doubleValue();    	non-compiled	[CE]  int  cannot  be  dereferenced	144	None
1123	[BUG]  [BUGGY]  final  double  N  =  getNumberOfSuccesses().doubleValue()  -  1;  [CE]  variable  N  is  already  defined  in  method  calculateNumericalVariance()  [CONTEXT]    protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();    [BUGGY]  final  double  N  =  getNumberOfSuccesses().doubleValue()  -  1;  [BUGGY]    final  double  m  =  getNumberOfSuccesses();  final  double  n  =  getSampleSize();  return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	293	293	1	replace	final  double  N  =  getNumberOfSuccesses().doubleValue()  -  1;	      final    double    N    =    getNumberOfSuccesses().doubleValue();    	non-compiled	[CE]  variable  N  is  already  defined  in  method  calculateNumericalVariance()	144	None
1124	[BUG]  [BUGGY]  final  double  N  =  getNumberOfSuccesses().doubleValue()  /  2;  [CE]  variable  N  is  already  defined  in  method  calculateNumericalVariance()  [CONTEXT]    protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();    [BUGGY]  final  double  N  =  getNumberOfSuccesses().doubleValue()  /  2;  [BUGGY]    final  double  m  =  getNumberOfSuccesses();  final  double  n  =  getSampleSize();  return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	293	293	1	replace	final  double  N  =  getNumberOfSuccesses().doubleValue()  /  2;	      final    double    N    =    getNumberOfSuccesses().doubleValue();    	non-compiled	[CE]  variable  N  is  already  defined  in  method  calculateNumericalVariance()	144	None
1131	[BUG]  [BUGGY]  final  double  n  =  getNumericalVariance();  [CE]  variable  n  is  already  defined  in  method  calculateNumericalVariance()  [CONTEXT]    protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();  final  double  m  =  getNumberOfSuccesses();  final  double  n  =  getSampleSize();    [BUGGY]  final  double  n  =  getNumericalVariance();  [BUGGY]    return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	295	295	1	replace	final  double  n  =  getNumericalVariance();	      final    double    m    =    getNumericalVariance();    	non-compiled	[CE]  variable  n  is  already  defined  in  method  calculateNumericalVariance()	382	None
1133	[BUG]  [BUGGY]  final  double  dx  =  getNumericalVariance();  [CE]  missing  return  statement  [CONTEXT]    protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();  final  double  m  =  getNumberOfSuccesses();  final  double  n  =  getSampleSize();    [BUGGY]  final  double  dx  =  getNumericalVariance();  [BUGGY]    return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	295	295	1	replace	final  double  dx  =  getNumericalVariance();	      final    double    m    =    getNumericalVariance();    	non-compiled	[CE]  missing  return  statement	382	None
1134	[BUG]  [BUGGY]  final  double  y  =  getNumericalVariance();  [CE]  missing  return  statement  [CONTEXT]    protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();  final  double  m  =  getNumberOfSuccesses();  final  double  n  =  getSampleSize();    [BUGGY]  final  double  y  =  getNumericalVariance();  [BUGGY]    return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	295	295	1	replace	final  double  y  =  getNumericalVariance();	      final    double    m    =    getNumericalVariance();    	non-compiled	[CE]  missing  return  statement	382	None
1143	[BUG]  [BUGGY]  final  double  numberOfSuccesses  =  getNumberOfSuccesses();  [CE]  cannot  find  symbol  N  [CONTEXT]    protected  double  calculateNumericalVariance()  {    [BUGGY]  final  double  numberOfSuccesses  =  getNumberOfSuccesses();  [BUGGY]    final  double  N  =  getPopulationSize();  final  double  m  =  getNumberOfSuccesses();  final  double  n  =  getSampleSize();  return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	292	292	1	replace	final  double  numberOfSuccesses  =  getNumberOfSuccesses();	      final    int    N    =    getNumberOfSuccesses();    	non-compiled	[CE]  cannot  find  symbol  N	162	None
1144	[BUG]  [BUGGY]  final  char  N  =  getNumberOfSuccesses();  [CE]  possible  loss  of  precision  [CONTEXT]    protected  double  calculateNumericalVariance()  {    [BUGGY]  final  char  N  =  getNumberOfSuccesses();  [BUGGY]    final  double  N  =  getPopulationSize();  final  double  m  =  getNumberOfSuccesses();  final  double  n  =  getSampleSize();  return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	292	292	1	replace	final  char  N  =  getNumberOfSuccesses();	      final    int    N    =    getNumberOfSuccesses();    	non-compiled	[CE]  possible  loss  of  precision	162	None
1151	[BUG]  [BUGGY]  final  double  n  =  getSampleSize(n,  m);  [CE]  method  getSampleSize  in  class  HypergeometricDistribution  cannot  be  applied  to  given  types;  [CONTEXT]    protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();  final  double  m  =  getNumberOfSuccesses();    [BUGGY]  final  double  n  =  getSampleSize(n,  m);  [BUGGY]    return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	294	294	1	replace	final  double  n  =  getSampleSize(n,  m);	  final    double    n    =    getSampleSize(n);    	non-compiled	[CE]  method  getSampleSize  in  class  HypergeometricDistribution  cannot  be  applied  to  given  types;	334	None
1152	[BUG]  [BUGGY]  final  double  n  =  getSampleSize(m,  n);  [CE]  method  getSampleSize  in  class  HypergeometricDistribution  cannot  be  applied  to  given  types;  [CONTEXT]    protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();  final  double  m  =  getNumberOfSuccesses();    [BUGGY]  final  double  n  =  getSampleSize(m,  n);  [BUGGY]    return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	294	294	1	replace	final  double  n  =  getSampleSize(m,  n);	  final    double    n    =    getSampleSize(n);    	non-compiled	[CE]  method  getSampleSize  in  class  HypergeometricDistribution  cannot  be  applied  to  given  types;	334	None
1153	[BUG]  [BUGGY]  final  double  n  =  getSampleSize(m);  [CE]  method  getSampleSize  in  class  HypergeometricDistribution  cannot  be  applied  to  given  types;  [CONTEXT]    protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();  final  double  m  =  getNumberOfSuccesses();    [BUGGY]  final  double  n  =  getSampleSize(m);  [BUGGY]    return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	294	294	1	replace	final  double  n  =  getSampleSize(m);	  final    double    n    =    getSampleSize(n);    	non-compiled	[CE]  method  getSampleSize  in  class  HypergeometricDistribution  cannot  be  applied  to  given  types;	334	None
1154	[BUG]  [BUGGY]  final  double  n  =  getSampleSize(n,  populationSize);  [CE]  method  getSampleSize  in  class  HypergeometricDistribution  cannot  be  applied  to  given  types;  [CONTEXT]    protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();  final  double  m  =  getNumberOfSuccesses();    [BUGGY]  final  double  n  =  getSampleSize(n,  populationSize);  [BUGGY]    return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	294	294	1	replace	final  double  n  =  getSampleSize(n,  populationSize);	  final    double    n    =    getSampleSize(n);    	non-compiled	[CE]  method  getSampleSize  in  class  HypergeometricDistribution  cannot  be  applied  to  given  types;	334	None
1162	[BUG]  [BUGGY]  final  double  N  =  getSampleNumberOfSuccesses();  [CE]  variable  N  is  already  defined  in  method  calculateNumericalVariance()  [CONTEXT]    protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();  final  double  m  =  getNumberOfSuccesses();    [BUGGY]  final  double  N  =  getSampleNumberOfSuccesses();  [BUGGY]    return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	294	294	1	replace	final  double  N  =  getSampleNumberOfSuccesses();	  final    double    n    =    getSampleNumberOfSuccesses();    	non-compiled	[CE]  variable  N  is  already  defined  in  method  calculateNumericalVariance()	333	None
1163	[BUG]  [BUGGY]  final  double  n  is  getSampleNumberOfSuccesses();  [CE]  ';'  expected  [CONTEXT]    protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();  final  double  m  =  getNumberOfSuccesses();    [BUGGY]  final  double  n  is  getSampleNumberOfSuccesses();  [BUGGY]    return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	294	294	1	replace	final  double  n  is  getSampleNumberOfSuccesses();	  final    double    n    =    getSampleNumberOfSuccesses();    	non-compiled	[CE]  ';'  expected	333	None
1164	[BUG]  [BUGGY]  final  Double  n  =  getSampleNumberOfSuccesses();  [CE]  cannot  find  symbol  [CONTEXT]    protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();  final  double  m  =  getNumberOfSuccesses();    [BUGGY]  final  Double  n  =  getSampleNumberOfSuccesses();  [BUGGY]    return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	294	294	1	replace	final  Double  n  =  getSampleNumberOfSuccesses();	  final    double    n    =    getSampleNumberOfSuccesses();    	non-compiled	[CE]  cannot  find  symbol	333	None
1172	[BUG]  [BUGGY]  if(getNumberOfSuccesses()  >  1)  {  if(getNumberOfSuccesses()  >  1)  {  return(double)getNumberOfSuccesses()  *  getPopulationSize();  }  [CE]  illegal  start  of  expression  [CONTEXT]    public  double  getNumericalMean()  {    [BUGGY]  if(getNumberOfSuccesses()  >  1)  {  if(getNumberOfSuccesses()  >  1)  {  return(double)getNumberOfSuccesses()  *  getPopulationSize();  }  [BUGGY]    return  (double)  (getSampleSize()  *  getNumberOfSuccesses())  /  (double)  getPopulationSize();  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalMean  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	268	268	1	replace	if(getNumberOfSuccesses()  >  1)  {  if(getNumberOfSuccesses()  >  1)  {  return(double)getNumberOfSuccesses()  *  getPopulationSize();  }	      if(getNumberOfSuccesses()    >    0)    {    if(getNumberOfSuccesses()    >    0)    {    return(double)getNumberOfSuccesses()    *    getPopulationSize();    }    	non-compiled	[CE]  illegal  start  of  expression	73	None
1173	[BUG]  [BUGGY]  if(getNumberOfSuccesses()  >  1)  {  if(getNumberOfSuccesses()  >  2)  {  return(double)getNumberOfSuccesses()  *  getPopulationSize();  }  [CE]  illegal  start  of  expression  [CONTEXT]    public  double  getNumericalMean()  {    [BUGGY]  if(getNumberOfSuccesses()  >  1)  {  if(getNumberOfSuccesses()  >  2)  {  return(double)getNumberOfSuccesses()  *  getPopulationSize();  }  [BUGGY]    return  (double)  (getSampleSize()  *  getNumberOfSuccesses())  /  (double)  getPopulationSize();  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalMean  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	268	268	1	replace	if(getNumberOfSuccesses()  >  1)  {  if(getNumberOfSuccesses()  >  2)  {  return(double)getNumberOfSuccesses()  *  getPopulationSize();  }	      if(getNumberOfSuccesses()    >    0)    {    if(getNumberOfSuccesses()    >    0)    {    return(double)getNumberOfSuccesses()    *    getPopulationSize();    }    	non-compiled	[CE]  illegal  start  of  expression	73	None
1181	[BUG]  [BUGGY]  if(numberOfSuccesses  >  0)  {  if(!numericalVarianceIsCalculated)  {  numericalVariance  =  Math.abs(numberOfSuccesses  /  2);  }  [CE]  illegal  start  of  expression  [CONTEXT]    public  int  getSupportLowerBound()  {    [BUGGY]  if(numberOfSuccesses  >  0)  {  if(!numericalVarianceIsCalculated)  {  numericalVariance  =  Math.abs(numberOfSuccesses  /  2);  }  [BUGGY]    getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  }  [CLASS]  HypergeometricDistribution  [METHOD]  getSupportLowerBound  [RETURN_TYPE]  int  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	308	309	1	replace	if(numberOfSuccesses  >  0)  {  if(!numericalVarianceIsCalculated)  {  numericalVariance  =  Math.abs(numberOfSuccesses  /  2);  }	      	non-compiled	[CE]  illegal  start  of  expression	5	None
1182	[BUG]  [BUGGY]  numericalVariance  =  Math.abs(numberOfSuccesses  /  2);  [CE]  missing  return  statement  [CONTEXT]    public  int  getSupportLowerBound()  {    [BUGGY]  numericalVariance  =  Math.abs(numberOfSuccesses  /  2);  [BUGGY]    getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  }  [CLASS]  HypergeometricDistribution  [METHOD]  getSupportLowerBound  [RETURN_TYPE]  int  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	308	309	1	replace	numericalVariance  =  Math.abs(numberOfSuccesses  /  2);	      	non-compiled	[CE]  missing  return  statement	5	None
1184	[BUG]  [BUGGY]  if(numberOfSuccesses  >  0)  {  if(!numericalVarianceIsCalculated)  {  numericalVariance  =  Math.min(numberOfSuccesses  /  2);  }  [CE]  illegal  start  of  expression  [CONTEXT]    public  int  getSupportLowerBound()  {    [BUGGY]  if(numberOfSuccesses  >  0)  {  if(!numericalVarianceIsCalculated)  {  numericalVariance  =  Math.min(numberOfSuccesses  /  2);  }  [BUGGY]    getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  }  [CLASS]  HypergeometricDistribution  [METHOD]  getSupportLowerBound  [RETURN_TYPE]  int  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	308	309	1	replace	if(numberOfSuccesses  >  0)  {  if(!numericalVarianceIsCalculated)  {  numericalVariance  =  Math.min(numberOfSuccesses  /  2);  }	      	non-compiled	[CE]  illegal  start  of  expression	5	None
1194	[BUG]  [BUGGY]  final  double  n  =  getSize();  [CE]  cannot  find  symbol  [CONTEXT]    protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();    [BUGGY]  final  double  n  =  getSize();  [BUGGY]    final  double  m  =  getNumberOfSuccesses();  final  double  n  =  getSampleSize();  return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	293	293	1	replace	final  double  n  =  getSize();	      final    double    N    =    getSize();    	non-compiled	[CE]  cannot  find  symbol	145	None
1204	[BUG]  [BUGGY]  final  char  N  =  getPopulationSize();  [CE]  possible  loss  of  precision  [CONTEXT]    protected  double  calculateNumericalVariance()  {    [BUGGY]  final  char  N  =  getPopulationSize();  [BUGGY]    final  double  N  =  getPopulationSize();  final  double  m  =  getNumberOfSuccesses();  final  double  n  =  getSampleSize();  return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	292	292	1	replace	final  char  N  =  getPopulationSize();	      final    int    N    =    getPopulationSize();    	non-compiled	[CE]  possible  loss  of  precision	165	None
1213	[BUG]  [BUGGY]  if(getPopulationSize()  >  0)  {  if(getNumberOfSuccesses()  >  0)  {  return  getNumberOfSuccesses()  *  getNumberOfSuccesses();  }  [CE]  illegal  start  of  expression  [CONTEXT]    public  double  getNumericalMean()  {    [BUGGY]  if(getPopulationSize()  >  0)  {  if(getNumberOfSuccesses()  >  0)  {  return  getNumberOfSuccesses()  *  getNumberOfSuccesses();  }  [BUGGY]    return  (double)  (getSampleSize()  *  getNumberOfSuccesses())  /  (double)  getPopulationSize();  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalMean  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	268	268	1	replace	if(getPopulationSize()  >  0)  {  if(getNumberOfSuccesses()  >  0)  {  return  getNumberOfSuccesses()  *  getNumberOfSuccesses();  }	      if(getNumberOfSuccesses()    >    0)    {    if(getNumberOfSuccesses()    >    0)    {    return    getNumberOfSuccesses()    *    getNumberOfSuccesses();    }    	non-compiled	[CE]  illegal  start  of  expression	74	None
1214	[BUG]  [BUGGY]  if(getNumberOfSuccesses()  >  1)  {  if(getNumberOfSuccesses()  >  2)  {  return  getNumberOfSuccesses()  *  getNumberOfSuccesses();  }  [CE]  illegal  start  of  expression  [CONTEXT]    public  double  getNumericalMean()  {    [BUGGY]  if(getNumberOfSuccesses()  >  1)  {  if(getNumberOfSuccesses()  >  2)  {  return  getNumberOfSuccesses()  *  getNumberOfSuccesses();  }  [BUGGY]    return  (double)  (getSampleSize()  *  getNumberOfSuccesses())  /  (double)  getPopulationSize();  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalMean  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	268	268	1	replace	if(getNumberOfSuccesses()  >  1)  {  if(getNumberOfSuccesses()  >  2)  {  return  getNumberOfSuccesses()  *  getNumberOfSuccesses();  }	      if(getNumberOfSuccesses()    >    0)    {    if(getNumberOfSuccesses()    >    0)    {    return    getNumberOfSuccesses()    *    getNumberOfSuccesses();    }    	non-compiled	[CE]  illegal  start  of  expression	74	None
1221	[BUG]  [BUGGY]  double  numericalVariance  =  getPopulationSize()  /  2.0;  [CE]  missing  return  statement  [CONTEXT]    public  int  getSupportLowerBound()  {    [BUGGY]  double  numericalVariance  =  getPopulationSize()  /  2.0;  [BUGGY]    getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  }  [CLASS]  HypergeometricDistribution  [METHOD]  getSupportLowerBound  [RETURN_TYPE]  int  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	308	309	1	replace	double  numericalVariance  =  getPopulationSize()  /  2.0;	  return    FastMath.max(0,    getNumberOfSuccesses()    +    getSampleSize()    -    getPopulationSize());    	non-compiled	[CE]  missing  return  statement	3	None
1223	[BUG]  [BUGGY]  if(numericalVariance  ==  0.0)  {  if(!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumberOfSuccesses();  }  [CE]  illegal  start  of  expression  [CONTEXT]    public  int  getSupportLowerBound()  {    [BUGGY]  if(numericalVariance  ==  0.0)  {  if(!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumberOfSuccesses();  }  [BUGGY]    getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  }  [CLASS]  HypergeometricDistribution  [METHOD]  getSupportLowerBound  [RETURN_TYPE]  int  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	308	309	1	replace	if(numericalVariance  ==  0.0)  {  if(!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumberOfSuccesses();  }	  return    FastMath.max(0,    getNumberOfSuccesses()    +    getSampleSize()    -    getPopulationSize());    	non-compiled	[CE]  illegal  start  of  expression	3	None
1224	[BUG]  [BUGGY]  if(numericalVariance  <  0.0)  {  if(!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumberOfSuccesses();  }  [CE]  illegal  start  of  expression  [CONTEXT]    public  int  getSupportLowerBound()  {    [BUGGY]  if(numericalVariance  <  0.0)  {  if(!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumberOfSuccesses();  }  [BUGGY]    getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  }  [CLASS]  HypergeometricDistribution  [METHOD]  getSupportLowerBound  [RETURN_TYPE]  int  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	308	309	1	replace	if(numericalVariance  <  0.0)  {  if(!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumberOfSuccesses();  }	  return    FastMath.max(0,    getNumberOfSuccesses()    +    getSampleSize()    -    getPopulationSize());    	non-compiled	[CE]  illegal  start  of  expression	3	None
1231	[BUG]  [BUGGY]      numericalVariance  =  getNumberOfSuccesses();  if(!numericalVarianceIsCalculated)  {  if(!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumberOfSuccesses();  }  [CE]  illegal  start  of  expression  [CONTEXT]    public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();    [BUGGY]      numericalVariance  =  getNumberOfSuccesses();  if(!numericalVarianceIsCalculated)  {  if(!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumberOfSuccesses();  }  [BUGGY]    numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	281	281	1	replace	        numericalVariance    =    getNumberOfSuccesses();    if(!numericalVarianceIsCalculated)  {  if(!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumberOfSuccesses();  }	  	non-compiled	[CE]  illegal  start  of  expression	321	None
1232	[BUG]  [BUGGY]      numericalVariance  =  getNumberOfSuccesses();  if(numericalVariance  ==  null)  {  if(!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumberOfSuccesses();  }  [CE]  illegal  start  of  expression  [CONTEXT]    public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();    [BUGGY]      numericalVariance  =  getNumberOfSuccesses();  if(numericalVariance  ==  null)  {  if(!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumberOfSuccesses();  }  [BUGGY]    numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	281	281	1	replace	        numericalVariance    =    getNumberOfSuccesses();    if(numericalVariance  ==  null)  {  if(!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumberOfSuccesses();  }	  	non-compiled	[CE]  illegal  start  of  expression	321	None
1233	[BUG]  [BUGGY]      numericalVariance  =  getNumberOfSuccesses();  if(!numericalVarianceIsCalculated)  {  if(!numericalVarianceIsCalculated)  {  numericalVariance  =  getNumberOfSuccesses();  }  [CE]  illegal  start  of  expression  [CONTEXT]    public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();    [BUGGY]      numericalVariance  =  getNumberOfSuccesses();  if(!numericalVarianceIsCalculated)  {  if(!numericalVarianceIsCalculated)  {  numericalVariance  =  getNumberOfSuccesses();  }  [BUGGY]    numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	281	281	1	replace	        numericalVariance    =    getNumberOfSuccesses();    if(!numericalVarianceIsCalculated)  {  if(!numericalVarianceIsCalculated)  {  numericalVariance  =  getNumberOfSuccesses();  }	  	non-compiled	[CE]  illegal  start  of  expression	321	None
1234	[BUG]  [BUGGY]      numericalVariance  =  getNumberOfSuccesses();  if(!numericalVarianceIsCalculated)  {  if(!numberOfSuccesses)  {  numericalVariance  =  calculateNumberOfSuccesses();  }  [CE]  illegal  start  of  expression  [CONTEXT]    public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();    [BUGGY]      numericalVariance  =  getNumberOfSuccesses();  if(!numericalVarianceIsCalculated)  {  if(!numberOfSuccesses)  {  numericalVariance  =  calculateNumberOfSuccesses();  }  [BUGGY]    numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	281	281	1	replace	        numericalVariance    =    getNumberOfSuccesses();    if(!numericalVarianceIsCalculated)  {  if(!numberOfSuccesses)  {  numericalVariance  =  calculateNumberOfSuccesses();  }	  	non-compiled	[CE]  illegal  start  of  expression	321	None
1235	[BUG]  [BUGGY]      numericalVariance  =  getNumberOfSuccesses();  if(!numericalVarianceIsCalculated)  {  if(!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateStdNumericVariance();  }  [CE]  illegal  start  of  expression  [CONTEXT]    public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();    [BUGGY]      numericalVariance  =  getNumberOfSuccesses();  if(!numericalVarianceIsCalculated)  {  if(!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateStdNumericVariance();  }  [BUGGY]    numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	281	281	1	replace	        numericalVariance    =    getNumberOfSuccesses();    if(!numericalVarianceIsCalculated)  {  if(!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateStdNumericVariance();  }	  	non-compiled	[CE]  illegal  start  of  expression	321	None
1242	[BUG]  [BUGGY]  final  double  n  =  getSampleSize()  *  getMeanSize();  [CE]  cannot  find  symbol  [CONTEXT]    protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();  final  double  m  =  getNumberOfSuccesses();    [BUGGY]  final  double  n  =  getSampleSize()  *  getMeanSize();  [BUGGY]    return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	294	294	1	replace	final  double  n  =  getSampleSize()  *  getMeanSize();	  final    double    n    =    getSampleSize()    *    getNumberOfSuccesses();    	non-compiled	[CE]  cannot  find  symbol	264	None
1243	[BUG]  [BUGGY]  [FE]  AssertionError  testMoments  [CONTEXT]    protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();  final  double  m  =  getNumberOfSuccesses();    [BUGGY]  final  double  n  =  getSampleSize()  *  getPopulationSize();  [BUGGY]    return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	294	294	1	add	final  double  n  =  getSampleSize()  *  getPopulationSize();	  final    double    n    =    getSampleSize()    *    getNumberOfSuccesses();    	compilable	  [FE]  AssertionError  testMoments	264	1
1244	[BUG]  [BUGGY]  final  double  n  =  getSampleSize()  *  getPopulationSize();  [FE]  AssertionError  testMoments  [CONTEXT]    protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();  final  double  m  =  getNumberOfSuccesses();    [BUGGY]  final  double  n  =  getSampleSize()  *  getPopulationSize();  [BUGGY]    return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	294	294	1	replace	final  double  n  =  getSampleSize()  *  getPopulationSize();	  final    double    n    =    getSampleSize()    *    getNumberOfSuccesses();    	compilable	  [FE]  AssertionError  testMoments	264	1
1244	[BUG]  [BUGGY]  final  double  n  =  getSampleSize()  *  getPrimarySize();  [CE]  cannot  find  symbol  [CONTEXT]    protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();  final  double  m  =  getNumberOfSuccesses();    [BUGGY]  final  double  n  =  getSampleSize()  *  getPrimarySize();  [BUGGY]    return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	294	294	1	replace	final  double  n  =  getSampleSize()  *  getPrimarySize();	  final    double    n    =    getSampleSize()    *    getNumberOfSuccesses();    	non-compiled	[CE]  cannot  find  symbol	264	None
1251	[BUG]  [BUGGY]  final  double  m  =  getNumberOfSuccesses()  *  2;  final  double  n  =  getNumberOfSuccesses()  *  2;  [CE]  variable  m  is  already  defined  in  method  calculateNumericalVariance()  [CONTEXT]    protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();    [BUGGY]  final  double  m  =  getNumberOfSuccesses()  *  2;  final  double  n  =  getNumberOfSuccesses()  *  2;  [BUGGY]    final  double  n  =  getSampleSize();  return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	293	293	1	replace	final    double    m    =    getNumberOfSuccesses()    *    2;    final  double  n  =  getNumberOfSuccesses()  *  2;	  	non-compiled	[CE]  variable  m  is  already  defined  in  method  calculateNumericalVariance()	183	None
1252	[BUG]  [BUGGY]  final  double  m  =  getNumberOfSuccesses()  *  2;  final  double  n  =  getPopulationSize()  *  2;  [CE]  variable  m  is  already  defined  in  method  calculateNumericalVariance()  [CONTEXT]    protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();    [BUGGY]  final  double  m  =  getNumberOfSuccesses()  *  2;  final  double  n  =  getPopulationSize()  *  2;  [BUGGY]    final  double  n  =  getSampleSize();  return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	293	293	1	replace	final    double    m    =    getNumberOfSuccesses()    *    2;    final  double  n  =  getPopulationSize()  *  2;	  	non-compiled	[CE]  variable  m  is  already  defined  in  method  calculateNumericalVariance()	183	None
1253	[BUG]  [BUGGY]  final  double  m  =  getNumberOfSuccesses()  *  2;  final  double  k  =  getNumberOfSuccesses()  *  2;  [CE]  variable  m  is  already  defined  in  method  calculateNumericalVariance()  [CONTEXT]    protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();    [BUGGY]  final  double  m  =  getNumberOfSuccesses()  *  2;  final  double  k  =  getNumberOfSuccesses()  *  2;  [BUGGY]    final  double  n  =  getSampleSize();  return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	293	293	1	replace	final    double    m    =    getNumberOfSuccesses()    *    2;    final  double  k  =  getNumberOfSuccesses()  *  2;	  	non-compiled	[CE]  variable  m  is  already  defined  in  method  calculateNumericalVariance()	183	None
1254	[BUG]  [BUGGY]  final  double  m  =  getNumberOfSuccesses()  *  2;  final  double  N  =  getNumberOfSuccesses()  *  2;  [CE]  variable  N  is  already  defined  in  method  calculateNumericalVariance()  [CONTEXT]    protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();    [BUGGY]  final  double  m  =  getNumberOfSuccesses()  *  2;  final  double  N  =  getNumberOfSuccesses()  *  2;  [BUGGY]    final  double  n  =  getSampleSize();  return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	293	293	1	replace	final    double    m    =    getNumberOfSuccesses()    *    2;    final  double  N  =  getNumberOfSuccesses()  *  2;	  	non-compiled	[CE]  variable  N  is  already  defined  in  method  calculateNumericalVariance()	183	None
1255	[BUG]  [BUGGY]  final  double  m  =  getNumberOfSuccesses()  *  2;  final  double  n  =  getNumberOfSuccesses()  *  3;  [CE]  variable  m  is  already  defined  in  method  calculateNumericalVariance()  [CONTEXT]    protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();    [BUGGY]  final  double  m  =  getNumberOfSuccesses()  *  2;  final  double  n  =  getNumberOfSuccesses()  *  3;  [BUGGY]    final  double  n  =  getSampleSize();  return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	293	293	1	replace	final    double    m    =    getNumberOfSuccesses()    *    2;    final  double  n  =  getNumberOfSuccesses()  *  3;	  	non-compiled	[CE]  variable  m  is  already  defined  in  method  calculateNumericalVariance()	183	None
1261	[BUG]  [BUGGY]  numericalVariance  =  Math.max(numberOfSuccesses,  numberOfSuccesses  -  1);  [CE]  missing  return  statement  [CONTEXT]    public  int  getSupportLowerBound()  {    [BUGGY]  numericalVariance  =  Math.max(numberOfSuccesses,  numberOfSuccesses  -  1);  [BUGGY]    getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  }  [CLASS]  HypergeometricDistribution  [METHOD]  getSupportLowerBound  [RETURN_TYPE]  int  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	308	309	1	replace	numericalVariance  =  Math.max(numberOfSuccesses,  numberOfSuccesses  -  1);	  return    FastMath.max(0,    getNumberOfSuccesses()    +    getSampleSize()    -    getPopulationSize());    	non-compiled	[CE]  missing  return  statement	3	None
1263	[BUG]  [BUGGY]  numericalVariance  =  Math.max(numberOfSuccesses,  this.populationSize);  [CE]  missing  return  statement  [CONTEXT]    public  int  getSupportLowerBound()  {    [BUGGY]  numericalVariance  =  Math.max(numberOfSuccesses,  this.populationSize);  [BUGGY]    getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  }  [CLASS]  HypergeometricDistribution  [METHOD]  getSupportLowerBound  [RETURN_TYPE]  int  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	308	309	1	replace	numericalVariance  =  Math.max(numberOfSuccesses,  this.populationSize);	  return    FastMath.max(0,    getNumberOfSuccesses()    +    getSampleSize()    -    getPopulationSize());    	non-compiled	[CE]  missing  return  statement	3	None
1264	[BUG]  [BUGGY]  numericalVariance  =  Math.max(numberOfSuccesses,  0);  [CE]  missing  return  statement  [CONTEXT]    public  int  getSupportLowerBound()  {    [BUGGY]  numericalVariance  =  Math.max(numberOfSuccesses,  0);  [BUGGY]    getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  }  [CLASS]  HypergeometricDistribution  [METHOD]  getSupportLowerBound  [RETURN_TYPE]  int  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	308	309	1	replace	numericalVariance  =  Math.max(numberOfSuccesses,  0);	  return    FastMath.max(0,    getNumberOfSuccesses()    +    getSampleSize()    -    getPopulationSize());    	non-compiled	[CE]  missing  return  statement	3	None
1271	[BUG]  [BUGGY]  if(!numericalVarianceIsCalculated  &&!super.getNumericalVariance())  {  [CE]  illegal  start  of  expression  [CONTEXT]    public  int  getSupportLowerBound()  {    [BUGGY]  if(!numericalVarianceIsCalculated  &&!super.getNumericalVariance())  {  [BUGGY]    return  FastMath.max(0,        getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  }  [CLASS]  HypergeometricDistribution  [METHOD]  getSupportLowerBound  [RETURN_TYPE]  int  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	308	309	1	replace	if(!numericalVarianceIsCalculated  &&!super.getNumericalVariance())  {	      getNumberOfSuccesses()    -    getPopulationSize());    	non-compiled	[CE]  illegal  start  of  expression	61	None
1272	[BUG]  [BUGGY]  if(!numericalVarianceIsCalculated  &&!super.getNumericalVariance()  ||!numericalVarianceIsCalculated)  {  [CE]  illegal  start  of  expression  [CONTEXT]    public  int  getSupportLowerBound()  {    [BUGGY]  if(!numericalVarianceIsCalculated  &&!super.getNumericalVariance()  ||!numericalVarianceIsCalculated)  {  [BUGGY]    return  FastMath.max(0,        getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  }  [CLASS]  HypergeometricDistribution  [METHOD]  getSupportLowerBound  [RETURN_TYPE]  int  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	308	309	1	replace	if(!numericalVarianceIsCalculated  &&!super.getNumericalVariance()  ||!numericalVarianceIsCalculated)  {	      getNumberOfSuccesses()    -    getPopulationSize());    	non-compiled	[CE]  illegal  start  of  expression	61	None
1273	[BUG]  [BUGGY]  if(!numericalVarianceIsCalculated  &&!super.getNumericalVariance()),  {  [CE]  illegal  start  of  expression  [CONTEXT]    public  int  getSupportLowerBound()  {    [BUGGY]  if(!numericalVarianceIsCalculated  &&!super.getNumericalVariance()),  {  [BUGGY]    return  FastMath.max(0,        getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  }  [CLASS]  HypergeometricDistribution  [METHOD]  getSupportLowerBound  [RETURN_TYPE]  int  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	308	309	1	replace	if(!numericalVarianceIsCalculated  &&!super.getNumericalVariance()),  {	      getNumberOfSuccesses()    -    getPopulationSize());    	non-compiled	[CE]  illegal  start  of  expression	61	None
1274	[BUG]  [BUGGY]  if(!numericalVarianceIsCalculated  &&!super.getNumericalVariance()  ||  super.getNumberOfSuccesses())  {  [CE]  illegal  start  of  expression  [CONTEXT]    public  int  getSupportLowerBound()  {    [BUGGY]  if(!numericalVarianceIsCalculated  &&!super.getNumericalVariance()  ||  super.getNumberOfSuccesses())  {  [BUGGY]    return  FastMath.max(0,        getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  }  [CLASS]  HypergeometricDistribution  [METHOD]  getSupportLowerBound  [RETURN_TYPE]  int  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	308	309	1	replace	if(!numericalVarianceIsCalculated  &&!super.getNumericalVariance()  ||  super.getNumberOfSuccesses())  {	      getNumberOfSuccesses()    -    getPopulationSize());    	non-compiled	[CE]  illegal  start  of  expression	61	None
1283	[BUG]  [BUGGY]  final  double  N  =  getPopulationSize()  -  1;  [CE]  variable  N  is  already  defined  in  method  calculateNumericalVariance()  [CONTEXT]    protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();  final  double  m  =  getNumberOfSuccesses();    [BUGGY]  final  double  N  =  getPopulationSize()  -  1;  [BUGGY]    final  double  n  =  getSampleSize();  return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	294	294	1	replace	final  double  N  =  getPopulationSize()  -  1;	      final    double    N    =    getPopulationSize();    	non-compiled	[CE]  variable  N  is  already  defined  in  method  calculateNumericalVariance()	51	None
1284	[BUG]  [BUGGY]  final  double  n  N  =  getPopulationSize();  [CE]  ';'  expected  [CONTEXT]    protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();  final  double  m  =  getNumberOfSuccesses();    [BUGGY]  final  double  n  N  =  getPopulationSize();  [BUGGY]    final  double  n  =  getSampleSize();  return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	294	294	1	replace	final  double  n  N  =  getPopulationSize();	      final    double    N    =    getPopulationSize();    	non-compiled	[CE]  ';'  expected	51	None
1291	[BUG]  [BUGGY]  numericalVariance  =  getNumberOfSuccesses().doubleValue();  [CE]  int  cannot  be  dereferenced  [CONTEXT]    protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();    [BUGGY]  numericalVariance  =  getNumberOfSuccesses().doubleValue();  [BUGGY]    final  double  m  =  getNumberOfSuccesses();  final  double  n  =  getSampleSize();  return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	293	293	1	replace	numericalVariance  =  getNumberOfSuccesses().doubleValue();	      final    int    N    =    getNumberOfSuccesses();    	non-compiled	[CE]  int  cannot  be  dereferenced	143	None
1293	[BUG]  [BUGGY]  numericalVariance  =  getNumberOfSuccesses(),  doubleValue();  [CE]  ';'  expected  [CONTEXT]    protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();    [BUGGY]  numericalVariance  =  getNumberOfSuccesses(),  doubleValue();  [BUGGY]    final  double  m  =  getNumberOfSuccesses();  final  double  n  =  getSampleSize();  return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	293	293	1	replace	numericalVariance  =  getNumberOfSuccesses(),  doubleValue();	      final    int    N    =    getNumberOfSuccesses();    	non-compiled	[CE]  ';'  expected	143	None
1294	[BUG]  [BUGGY]  numericalVariance  =  getNumberOfSuccesses().doubleValue(),  numberOfSuccesses;  [CE]  ';'  expected  [CONTEXT]    protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();    [BUGGY]  numericalVariance  =  getNumberOfSuccesses().doubleValue(),  numberOfSuccesses;  [BUGGY]    final  double  m  =  getNumberOfSuccesses();  final  double  n  =  getSampleSize();  return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	293	293	1	replace	numericalVariance  =  getNumberOfSuccesses().doubleValue(),  numberOfSuccesses;	      final    int    N    =    getNumberOfSuccesses();    	non-compiled	[CE]  ';'  expected	143	None
1301	[BUG]  [BUGGY]  final  double  dx  =  getDomainOfSuccesses();  [CE]  cannot  find  symbol  [CONTEXT]    protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();    [BUGGY]  final  double  dx  =  getDomainOfSuccesses();  [BUGGY]    final  double  n  =  getSampleSize();  return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	293	293	1	replace	final  double  dx  =  getDomainOfSuccesses();	  final    double    m    =    getNumberOfSuccesses()    *    2;    	non-compiled	[CE]  cannot  find  symbol	184	None
1303	[BUG]  [BUGGY]  final  double  dx  =  getDoubleOfSuccesses();  [CE]  cannot  find  symbol  [CONTEXT]    protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();    [BUGGY]  final  double  dx  =  getDoubleOfSuccesses();  [BUGGY]    final  double  n  =  getSampleSize();  return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	293	293	1	replace	final  double  dx  =  getDoubleOfSuccesses();	  final    double    m    =    getNumberOfSuccesses()    *    2;    	non-compiled	[CE]  cannot  find  symbol	184	None
1304	[BUG]  [BUGGY]  final  double  dx  =  getDomainSize();  [CE]  cannot  find  symbol  [CONTEXT]    protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();    [BUGGY]  final  double  dx  =  getDomainSize();  [BUGGY]    final  double  n  =  getSampleSize();  return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	293	293	1	replace	final  double  dx  =  getDomainSize();	  final    double    m    =    getNumberOfSuccesses()    *    2;    	non-compiled	[CE]  cannot  find  symbol	184	None
1311	[BUG]  [BUGGY]  double  numericalVariance  =  Math.max(getNumberOfSuccesses(),  populationSize  -  1);  [CE]  illegal  start  of  type  [CONTEXT]    public  double  getNumericalVariance()  {    [BUGGY]  double  numericalVariance  =  Math.max(getNumberOfSuccesses(),  populationSize  -  1);  [BUGGY]    if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	279	279	1	replace	double  numericalVariance  =  Math.max(getNumberOfSuccesses(),  populationSize  -  1);	      double    numericalVariance    =    Math.max(getNumberOfSuccesses()    -    1);    	non-compiled	[CE]  illegal  start  of  type	545	None
1313	[BUG]  [BUGGY]  double  numericalVariance  =  Math.max(getNumberOfSuccesses(),  sampleSize  -  1);  [CE]  illegal  start  of  type  [CONTEXT]    public  double  getNumericalVariance()  {    [BUGGY]  double  numericalVariance  =  Math.max(getNumberOfSuccesses(),  sampleSize  -  1);  [BUGGY]    if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	279	279	1	replace	double  numericalVariance  =  Math.max(getNumberOfSuccesses(),  sampleSize  -  1);	      double    numericalVariance    =    Math.max(getNumberOfSuccesses()    -    1);    	non-compiled	[CE]  illegal  start  of  type	545	None
1314	[BUG]  [BUGGY]  double  numericalVariance  =  Math.max(getNumberOfSuccesses(),  size  -  1);  [CE]  illegal  start  of  type  [CONTEXT]    public  double  getNumericalVariance()  {    [BUGGY]  double  numericalVariance  =  Math.max(getNumberOfSuccesses(),  size  -  1);  [BUGGY]    if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	279	279	1	replace	double  numericalVariance  =  Math.max(getNumberOfSuccesses(),  size  -  1);	      double    numericalVariance    =    Math.max(getNumberOfSuccesses()    -    1);    	non-compiled	[CE]  illegal  start  of  type	545	None
1321	[BUG]  [BUGGY]  return(double)(getNumberOfSuccesses()  *  getSampleSize())/(double)getPopulationSize();  return(double)(getNumberOfSuccesses()  *  getSampleSize())/(double)getPopulationSize();  [CE]  unreachable  statement  [CONTEXT]    public  double  getNumericalMean()  {    [BUGGY]  return(double)(getNumberOfSuccesses()  *  getSampleSize())/(double)getPopulationSize();  return(double)(getNumberOfSuccesses()  *  getSampleSize())/(double)getPopulationSize();  [BUGGY]    }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalMean  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	268	268	1	replace	return(double)(getNumberOfSuccesses()    *    getSampleSize())/(double)getPopulationSize();    return(double)(getNumberOfSuccesses()  *  getSampleSize())/(double)getPopulationSize();	  	non-compiled	[CE]  unreachable  statement	112	None
1322	[BUG]  [BUGGY]  return(double)(getNumberOfSuccesses()  *  getSampleSize())/(double)getPopulationSize();  if(getNumberOfSuccesses()  >  0)  {  if(getNumberOfSuccesses()  >  0)  {  return(double)getNumberOfSuccesses()  *  getSampleSize();  }  [CE]  illegal  start  of  expression  [CONTEXT]    public  double  getNumericalMean()  {    [BUGGY]  return(double)(getNumberOfSuccesses()  *  getSampleSize())/(double)getPopulationSize();  if(getNumberOfSuccesses()  >  0)  {  if(getNumberOfSuccesses()  >  0)  {  return(double)getNumberOfSuccesses()  *  getSampleSize();  }  [BUGGY]    }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalMean  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	268	268	1	replace	return(double)(getNumberOfSuccesses()    *    getSampleSize())/(double)getPopulationSize();    if(getNumberOfSuccesses()  >  0)  {  if(getNumberOfSuccesses()  >  0)  {  return(double)getNumberOfSuccesses()  *  getSampleSize();  }	  	non-compiled	[CE]  illegal  start  of  expression	112	None
1323	[BUG]  [BUGGY]  return(double)(getNumberOfSuccesses()  *  getSampleSize())/(double)getPopulationSize();  if(getNumberOfSuccesses()  >  0)  {  if(getNumberOfSuccesses()  >  getPopulationSize())  {  return(double)getNumberOfSuccesses()  *  getSampleSize();  }  [CE]  illegal  start  of  expression  [CONTEXT]    public  double  getNumericalMean()  {    [BUGGY]  return(double)(getNumberOfSuccesses()  *  getSampleSize())/(double)getPopulationSize();  if(getNumberOfSuccesses()  >  0)  {  if(getNumberOfSuccesses()  >  getPopulationSize())  {  return(double)getNumberOfSuccesses()  *  getSampleSize();  }  [BUGGY]    }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalMean  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	268	268	1	replace	return(double)(getNumberOfSuccesses()    *    getSampleSize())/(double)getPopulationSize();    if(getNumberOfSuccesses()  >  0)  {  if(getNumberOfSuccesses()  >  getPopulationSize())  {  return(double)getNumberOfSuccesses()  *  getSampleSize();  }	  	non-compiled	[CE]  illegal  start  of  expression	112	None
1324	[BUG]  [BUGGY]  return(double)(getNumberOfSuccesses()  *  getSampleSize())/(double)getPopulationSize();  if(getNumberOfSuccesses()  >  0)  {  int  k  =  getNumberOfSuccesses();  if(k  >  0)  {  return(double)(getNumberOfSuccesses()  *  getSampleSize())/(double)  [CE]  illegal  start  of  expression  [CONTEXT]    public  double  getNumericalMean()  {    [BUGGY]  return(double)(getNumberOfSuccesses()  *  getSampleSize())/(double)getPopulationSize();  if(getNumberOfSuccesses()  >  0)  {  int  k  =  getNumberOfSuccesses();  if(k  >  0)  {  return(double)(getNumberOfSuccesses()  *  getSampleSize())/(double)  [BUGGY]    }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalMean  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	268	268	1	replace	return(double)(getNumberOfSuccesses()    *    getSampleSize())/(double)getPopulationSize();    if(getNumberOfSuccesses()  >  0)  {  int  k  =  getNumberOfSuccesses();  if(k  >  0)  {  return(double)(getNumberOfSuccesses()  *  getSampleSize())/(double)	  	non-compiled	[CE]  illegal  start  of  expression	112	None
1325	[BUG]  [BUGGY]  return(double)(getNumberOfSuccesses()  *  getSampleSize())/(double)getPopulationSize();  if(getNumberOfSuccesses()  >  0)  {  int  k  =  getNumberOfSuccesses();  if(k  >  0)  {  return(double)(getNumberOfSuccesses()  *  getSampleSize());  }  [CE]  illegal  start  of  expression  [CONTEXT]    public  double  getNumericalMean()  {    [BUGGY]  return(double)(getNumberOfSuccesses()  *  getSampleSize())/(double)getPopulationSize();  if(getNumberOfSuccesses()  >  0)  {  int  k  =  getNumberOfSuccesses();  if(k  >  0)  {  return(double)(getNumberOfSuccesses()  *  getSampleSize());  }  [BUGGY]    }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalMean  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	268	268	1	replace	return(double)(getNumberOfSuccesses()    *    getSampleSize())/(double)getPopulationSize();    if(getNumberOfSuccesses()  >  0)  {  int  k  =  getNumberOfSuccesses();  if(k  >  0)  {  return(double)(getNumberOfSuccesses()  *  getSampleSize());  }	  	non-compiled	[CE]  illegal  start  of  expression	112	None
1331	[BUG]  [BUGGY]  final  double  m  =  getNumberOfSuccesses()  *  N;  final  double  n  =  getNumberOfSuccesses()  *  N;  [CE]  variable  m  is  already  defined  in  method  calculateNumericalVariance()  [CONTEXT]    protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();    [BUGGY]  final  double  m  =  getNumberOfSuccesses()  *  N;  final  double  n  =  getNumberOfSuccesses()  *  N;  [BUGGY]    final  double  n  =  getSampleSize();  return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	293	293	1	replace	final    double    m    =    getNumberOfSuccesses()    *    N;    final  double  n  =  getNumberOfSuccesses()  *  N;	  	non-compiled	[CE]  variable  m  is  already  defined  in  method  calculateNumericalVariance()	453	None
1332	[BUG]  [BUGGY]  final  double  m  =  getNumberOfSuccesses()  *  N;  final  double  k  =  getNumberOfSuccesses()  *  N;  [CE]  variable  m  is  already  defined  in  method  calculateNumericalVariance()  [CONTEXT]    protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();    [BUGGY]  final  double  m  =  getNumberOfSuccesses()  *  N;  final  double  k  =  getNumberOfSuccesses()  *  N;  [BUGGY]    final  double  n  =  getSampleSize();  return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	293	293	1	replace	final    double    m    =    getNumberOfSuccesses()    *    N;    final  double  k  =  getNumberOfSuccesses()  *  N;	  	non-compiled	[CE]  variable  m  is  already  defined  in  method  calculateNumericalVariance()	453	None
1333	[BUG]  [BUGGY]  final  double  m  =  getNumberOfSuccesses()  *  N;  final  double  n  =  getPopulationSize();  [CE]  variable  m  is  already  defined  in  method  calculateNumericalVariance()  [CONTEXT]    protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();    [BUGGY]  final  double  m  =  getNumberOfSuccesses()  *  N;  final  double  n  =  getPopulationSize();  [BUGGY]    final  double  n  =  getSampleSize();  return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	293	293	1	replace	final    double    m    =    getNumberOfSuccesses()    *    N;    final  double  n  =  getPopulationSize();	  	non-compiled	[CE]  variable  m  is  already  defined  in  method  calculateNumericalVariance()	453	None
1334	[BUG]  [BUGGY]  final  double  m  =  getNumberOfSuccesses()  *  N;  final  double  k  =  getKnowNumberOfSuccesses();  [CE]  cannot  find  symbol  [CONTEXT]    protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();    [BUGGY]  final  double  m  =  getNumberOfSuccesses()  *  N;  final  double  k  =  getKnowNumberOfSuccesses();  [BUGGY]    final  double  n  =  getSampleSize();  return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	293	293	1	replace	final    double    m    =    getNumberOfSuccesses()    *    N;    final  double  k  =  getKnowNumberOfSuccesses();	  	non-compiled	[CE]  cannot  find  symbol	453	None
1335	[BUG]  [BUGGY]  final  double  m  =  getNumberOfSuccesses()  *  N;  final  double  k  =  getKnowNumberOfSuccesses()  *  N;  [CE]  cannot  find  symbol  [CONTEXT]    protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();    [BUGGY]  final  double  m  =  getNumberOfSuccesses()  *  N;  final  double  k  =  getKnowNumberOfSuccesses()  *  N;  [BUGGY]    final  double  n  =  getSampleSize();  return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	293	293	1	replace	final    double    m    =    getNumberOfSuccesses()    *    N;    final  double  k  =  getKnowNumberOfSuccesses()  *  N;	  	non-compiled	[CE]  cannot  find  symbol	453	None
1342	[BUG]  [BUGGY]  final  double  n  =  getKind();  [CE]  variable  n  is  already  defined  in  method  calculateNumericalVariance()  [CONTEXT]    protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();  final  double  m  =  getNumberOfSuccesses();  final  double  n  =  getSampleSize();    [BUGGY]  final  double  n  =  getKind();  [BUGGY]    return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	295	295	1	replace	final  double  n  =  getKind();	      final    double    k    =    getNumberOfSuccesses();    	non-compiled	[CE]  variable  n  is  already  defined  in  method  calculateNumericalVariance()	384	None
1343	[BUG]  [BUGGY]  final  int  k  =  getKind();  [CE]  cannot  find  symbol  [CONTEXT]    protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();  final  double  m  =  getNumberOfSuccesses();  final  double  n  =  getSampleSize();    [BUGGY]  final  int  k  =  getKind();  [BUGGY]    return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	295	295	1	replace	final  int  k  =  getKind();	      final    double    k    =    getNumberOfSuccesses();    	non-compiled	[CE]  cannot  find  symbol	384	None
1344	[BUG]  [BUGGY]  final  double  m  =  getKind();  [CE]  variable  m  is  already  defined  in  method  calculateNumericalVariance()  [CONTEXT]    protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();  final  double  m  =  getNumberOfSuccesses();  final  double  n  =  getSampleSize();    [BUGGY]  final  double  m  =  getKind();  [BUGGY]    return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	295	295	1	replace	final  double  m  =  getKind();	      final    double    k    =    getNumberOfSuccesses();    	non-compiled	[CE]  variable  m  is  already  defined  in  method  calculateNumericalVariance()	384	None
1353	[BUG]  [BUGGY]  final  double  dx  =  getDimensions();  [CE]  cannot  find  symbol  [CONTEXT]    protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();    [BUGGY]  final  double  dx  =  getDimensions();  [BUGGY]    final  double  n  =  getSampleSize();  return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	293	293	1	replace	final  double  dx  =  getDimensions();	  final    double    m    =    getNumberOfSuccesses()    *    2;    	non-compiled	[CE]  cannot  find  symbol	184	None
1354	[BUG]  [BUGGY]  final  double  dx  =  getDateTimeZone();  [CE]  cannot  find  symbol  [CONTEXT]    protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();    [BUGGY]  final  double  dx  =  getDateTimeZone();  [BUGGY]    final  double  n  =  getSampleSize();  return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	293	293	1	replace	final  double  dx  =  getDateTimeZone();	  final    double    m    =    getNumberOfSuccesses()    *    2;    	non-compiled	[CE]  cannot  find  symbol	184	None
1362	[BUG]  [BUGGY]  double  numericalVariance  =  getNumberOfSuccesses()  *  2.0;  [CE]  illegal  start  of  type  [CONTEXT]    public  double  getNumericalVariance()  {    [BUGGY]  double  numericalVariance  =  getNumberOfSuccesses()  *  2.0;  [BUGGY]    if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	279	279	1	replace	double  numericalVariance  =  getNumberOfSuccesses()  *  2.0;	      double    numericalVariance    =    getNumberOfSuccesses()    /    2.0;    	non-compiled	[CE]  illegal  start  of  type	4	None
1363	[BUG]  [BUGGY]  double  numericalVariance  =  getNumberOfSuccesses()  /  2.0  +  1;  [CE]  illegal  start  of  type  [CONTEXT]    public  double  getNumericalVariance()  {    [BUGGY]  double  numericalVariance  =  getNumberOfSuccesses()  /  2.0  +  1;  [BUGGY]    if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	279	279	1	replace	double  numericalVariance  =  getNumberOfSuccesses()  /  2.0  +  1;	      double    numericalVariance    =    getNumberOfSuccesses()    /    2.0;    	non-compiled	[CE]  illegal  start  of  type	4	None
1364	[BUG]  [BUGGY]  double  numericalVariance  =  getNumberOfSuccesses()  /  20.0;  [CE]  illegal  start  of  type  [CONTEXT]    public  double  getNumericalVariance()  {    [BUGGY]  double  numericalVariance  =  getNumberOfSuccesses()  /  20.0;  [BUGGY]    if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	279	279	1	replace	double  numericalVariance  =  getNumberOfSuccesses()  /  20.0;	      double    numericalVariance    =    getNumberOfSuccesses()    /    2.0;    	non-compiled	[CE]  illegal  start  of  type	4	None
1371	[BUG]  [BUGGY]  if(numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumbericalVariance();  [CE]  illegal  start  of  expression  [CONTEXT]    public  double  getNumericalVariance()  {    [BUGGY]  if(numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumbericalVariance();  [BUGGY]    numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	279	279	1	replace	if(numericalVarianceIsCalculated)    {    numericalVariance  =  calculateNumbericalVariance();	  	non-compiled	[CE]  illegal  start  of  expression	22	None
1372	[BUG]  [BUGGY]  if(numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumbericalVariance(),  numberOfSuccesses;  [CE]  ';'  expected  [CONTEXT]    public  double  getNumericalVariance()  {    [BUGGY]  if(numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumbericalVariance(),  numberOfSuccesses;  [BUGGY]    numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	279	279	1	replace	if(numericalVarianceIsCalculated)    {    numericalVariance  =  calculateNumbericalVariance(),  numberOfSuccesses;	  	non-compiled	[CE]  ';'  expected	22	None
1373	[BUG]  [BUGGY]  if(numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumbericalVariance(),  numberOfSuccesses);  [CE]  ';'  expected  [CONTEXT]    public  double  getNumericalVariance()  {    [BUGGY]  if(numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumbericalVariance(),  numberOfSuccesses);  [BUGGY]    numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	279	279	1	replace	if(numericalVarianceIsCalculated)    {    numericalVariance  =  calculateNumbericalVariance(),  numberOfSuccesses);	  	non-compiled	[CE]  ';'  expected	22	None
1374	[BUG]  [BUGGY]  if(numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumbericalVariance()  -  1;  [CE]  illegal  start  of  expression  [CONTEXT]    public  double  getNumericalVariance()  {    [BUGGY]  if(numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumbericalVariance()  -  1;  [BUGGY]    numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	279	279	1	replace	if(numericalVarianceIsCalculated)    {    numericalVariance  =  calculateNumbericalVariance()  -  1;	  	non-compiled	[CE]  illegal  start  of  expression	22	None
1375	[BUG]  [BUGGY]  if(numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumbericalVariance(),  sampleSize);  [CE]  ';'  expected  [CONTEXT]    public  double  getNumericalVariance()  {    [BUGGY]  if(numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumbericalVariance(),  sampleSize);  [BUGGY]    numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	279	279	1	replace	if(numericalVarianceIsCalculated)    {    numericalVariance  =  calculateNumbericalVariance(),  sampleSize);	  	non-compiled	[CE]  ';'  expected	22	None
1382	[BUG]  [BUGGY]  if(!numericalVarianceIsCalculated)  {  [CE]  illegal  start  of  expression  [CONTEXT]    public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {    [BUGGY]  if(!numericalVarianceIsCalculated)  {  [BUGGY]    numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	280	280	1	replace	if(!numericalVarianceIsCalculated)  {	      if(!numericalVarianceIsCalculated)    {    if(!numericalVarianceIsCalculated)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	44	None
1384	[BUG]  [BUGGY]  if(numericalVarianceIsCalculated)  {  if(!numericalVarianceIsCalculated)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [CONTEXT]    public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {    [BUGGY]  if(numericalVarianceIsCalculated)  {  if(!numericalVarianceIsCalculated)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	280	280	1	replace	if(numericalVarianceIsCalculated)  {  if(!numericalVarianceIsCalculated)  {  throw  new  IllegalArgumentException( " ");  }	      if(!numericalVarianceIsCalculated)    {    if(!numericalVarianceIsCalculated)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	44	None
1391	[BUG]  [BUGGY]  if(numericalVarianceIsCalculated  &&!numericalVarianceIsCalculated)  {  [CE]  illegal  start  of  expression  [CONTEXT]    public  int  getSupportLowerBound()  {    [BUGGY]  if(numericalVarianceIsCalculated  &&!numericalVarianceIsCalculated)  {  [BUGGY]    return  FastMath.max(0,        getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  }  [CLASS]  HypergeometricDistribution  [METHOD]  getSupportLowerBound  [RETURN_TYPE]  int  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	308	309	1	replace	if(numericalVarianceIsCalculated  &&!numericalVarianceIsCalculated)  {	      int    populationSize    =    getPopulationSize();    	non-compiled	[CE]  illegal  start  of  expression	64	None
1392	[BUG]  [BUGGY]  if(!numericalVarianceIsCalculated  &&!numericalVarianceIsCalculated)  {  [CE]  illegal  start  of  expression  [CONTEXT]    public  int  getSupportLowerBound()  {    [BUGGY]  if(!numericalVarianceIsCalculated  &&!numericalVarianceIsCalculated)  {  [BUGGY]    return  FastMath.max(0,        getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  }  [CLASS]  HypergeometricDistribution  [METHOD]  getSupportLowerBound  [RETURN_TYPE]  int  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	308	309	1	replace	if(!numericalVarianceIsCalculated  &&!numericalVarianceIsCalculated)  {	      int    populationSize    =    getPopulationSize();    	non-compiled	[CE]  illegal  start  of  expression	64	None
1394	[BUG]  [BUGGY]  if(negativeVarianceIsCalculated  &&!numericalVarianceIsCalculated)  {  [CE]  illegal  start  of  expression  [CONTEXT]    public  int  getSupportLowerBound()  {    [BUGGY]  if(negativeVarianceIsCalculated  &&!numericalVarianceIsCalculated)  {  [BUGGY]    return  FastMath.max(0,        getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  }  [CLASS]  HypergeometricDistribution  [METHOD]  getSupportLowerBound  [RETURN_TYPE]  int  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	308	309	1	replace	if(negativeVarianceIsCalculated  &&!numericalVarianceIsCalculated)  {	      int    populationSize    =    getPopulationSize();    	non-compiled	[CE]  illegal  start  of  expression	64	None
1401	[BUG]  [BUGGY]  getNumberOfSuccesses()  *  getPopulationOfSuccesses();  [CE]  not  a  statement  [CONTEXT]    public  double  getNumericalMean()  {    [BUGGY]  getNumberOfSuccesses()  *  getPopulationOfSuccesses();  [BUGGY]    return  (double)  (getSampleSize()  *  getNumberOfSuccesses())  /  (double)  getPopulationSize();  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalMean  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	268	268	1	replace	getNumberOfSuccesses()  *  getPopulationOfSuccesses();	      getNumberOfSuccesses()    *    getNumberOfSuccesses();    	non-compiled	[CE]  not  a  statement	75	None
1402	[BUG]  [BUGGY]  getNumberOfSuccesses()  /  getNumberOfSuccesses();  [CE]  not  a  statement  [CONTEXT]    public  double  getNumericalMean()  {    [BUGGY]  getNumberOfSuccesses()  /  getNumberOfSuccesses();  [BUGGY]    return  (double)  (getSampleSize()  *  getNumberOfSuccesses())  /  (double)  getPopulationSize();  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalMean  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	268	268	1	replace	getNumberOfSuccesses()  /  getNumberOfSuccesses();	      getNumberOfSuccesses()    *    getNumberOfSuccesses();    	non-compiled	[CE]  not  a  statement	75	None
1403	[BUG]  [BUGGY]  getNumberOfSuccesses()  *  getPopulationOfSize();  [CE]  not  a  statement  [CONTEXT]    public  double  getNumericalMean()  {    [BUGGY]  getNumberOfSuccesses()  *  getPopulationOfSize();  [BUGGY]    return  (double)  (getSampleSize()  *  getNumberOfSuccesses())  /  (double)  getPopulationSize();  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalMean  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	268	268	1	replace	getNumberOfSuccesses()  *  getPopulationOfSize();	      getNumberOfSuccesses()    *    getNumberOfSuccesses();    	non-compiled	[CE]  not  a  statement	75	None
1404	[BUG]  [BUGGY]  getNumberOfSuccesses()  *  getGlobalNumberOfSuccesses();  [CE]  not  a  statement  [CONTEXT]    public  double  getNumericalMean()  {    [BUGGY]  getNumberOfSuccesses()  *  getGlobalNumberOfSuccesses();  [BUGGY]    return  (double)  (getSampleSize()  *  getNumberOfSuccesses())  /  (double)  getPopulationSize();  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalMean  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	268	268	1	replace	getNumberOfSuccesses()  *  getGlobalNumberOfSuccesses();	      getNumberOfSuccesses()    *    getNumberOfSuccesses();    	non-compiled	[CE]  not  a  statement	75	None
1412	[BUG]  [BUGGY]  if(!numericalVarianceIsCalculated)  {  if(!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateStdNumericalVariance();  figured  [CE]  illegal  start  of  expression  [CONTEXT]    public  double  getNumericalVariance()  {    [BUGGY]  if(!numericalVarianceIsCalculated)  {  if(!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateStdNumericalVariance();  figured  [BUGGY]    if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	279	279	1	replace	if(!numericalVarianceIsCalculated)  {  if(!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateStdNumericalVariance();  figured	      if(!numericalVarianceIsCalculated)    {    if(!numericalVarianceIsCalculated)    {    numericalVariance    =    calculateStdNumericalVariance();    }    	non-compiled	[CE]  illegal  start  of  expression	15	None
1413	[BUG]  [BUGGY]  if(!numericalVarianceIsCalculated)  {  if(!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateStdNumericalVariance();  bodied  [CE]  illegal  start  of  expression  [CONTEXT]    public  double  getNumericalVariance()  {    [BUGGY]  if(!numericalVarianceIsCalculated)  {  if(!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateStdNumericalVariance();  bodied  [BUGGY]    if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	279	279	1	replace	if(!numericalVarianceIsCalculated)  {  if(!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateStdNumericalVariance();  bodied	      if(!numericalVarianceIsCalculated)    {    if(!numericalVarianceIsCalculated)    {    numericalVariance    =    calculateStdNumericalVariance();    }    	non-compiled	[CE]  illegal  start  of  expression	15	None
1414	[BUG]  [BUGGY]  if(!numericalVarianceIsCalculated)  {  if(!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateStdNumericalVariance();  delt  [CE]  illegal  start  of  expression  [CONTEXT]    public  double  getNumericalVariance()  {    [BUGGY]  if(!numericalVarianceIsCalculated)  {  if(!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateStdNumericalVariance();  delt  [BUGGY]    if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	279	279	1	replace	if(!numericalVarianceIsCalculated)  {  if(!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateStdNumericalVariance();  delt	      if(!numericalVarianceIsCalculated)    {    if(!numericalVarianceIsCalculated)    {    numericalVariance    =    calculateStdNumericalVariance();    }    	non-compiled	[CE]  illegal  start  of  expression	15	None
1421	[BUG]  [BUGGY]  numericalVarianceIsCalculated  =(numericalVariance  <  0)?  numericalVarianceIsCalculated  :  false;  if(numericalVariance  >  0)  {  if(!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumberOfSuccesses();  }  [CE]  illegal  start  of  expression  [CONTEXT]    public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();    [BUGGY]  numericalVarianceIsCalculated  =(numericalVariance  <  0)?  numericalVarianceIsCalculated  :  false;  if(numericalVariance  >  0)  {  if(!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumberOfSuccesses();  }  [BUGGY]    }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	281	281	1	replace	numericalVarianceIsCalculated    =(numericalVariance    <    0)?    numericalVarianceIsCalculated    :    false;    if(numericalVariance  >  0)  {  if(!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumberOfSuccesses();  }	  	non-compiled	[CE]  illegal  start  of  expression	392	None
1422	[BUG]  [BUGGY]  numericalVarianceIsCalculated  =(numericalVariance  <  0)?  numericalVarianceIsCalculated  :  false;  if(!numericalVarianceIsCalculated)  {  if(!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumberOfSuccesses();  }  [CE]  illegal  start  of  expression  [CONTEXT]    public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();    [BUGGY]  numericalVarianceIsCalculated  =(numericalVariance  <  0)?  numericalVarianceIsCalculated  :  false;  if(!numericalVarianceIsCalculated)  {  if(!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumberOfSuccesses();  }  [BUGGY]    }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	281	281	1	replace	numericalVarianceIsCalculated    =(numericalVariance    <    0)?    numericalVarianceIsCalculated    :    false;    if(!numericalVarianceIsCalculated)  {  if(!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumberOfSuccesses();  }	  	non-compiled	[CE]  illegal  start  of  expression	392	None
1423	[BUG]  [BUGGY]  numericalVarianceIsCalculated  =(numericalVariance  <  0)?  numericalVarianceIsCalculated  :  false;  if(numericalVariance!=  0)  {  if(!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumberOfSuccesses();  }  [CE]  illegal  start  of  expression  [CONTEXT]    public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();    [BUGGY]  numericalVarianceIsCalculated  =(numericalVariance  <  0)?  numericalVarianceIsCalculated  :  false;  if(numericalVariance!=  0)  {  if(!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumberOfSuccesses();  }  [BUGGY]    }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	281	281	1	replace	numericalVarianceIsCalculated    =(numericalVariance    <    0)?    numericalVarianceIsCalculated    :    false;    if(numericalVariance!=  0)  {  if(!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumberOfSuccesses();  }	  	non-compiled	[CE]  illegal  start  of  expression	392	None
1424	[BUG]  [BUGGY]  numericalVarianceIsCalculated  =(numericalVariance  <  0)?  numericalVarianceIsCalculated  :  false;  if(numericalVariance  <  0)  {  if(!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumberOfSuccesses();  }  [CE]  illegal  start  of  expression  [CONTEXT]    public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();    [BUGGY]  numericalVarianceIsCalculated  =(numericalVariance  <  0)?  numericalVarianceIsCalculated  :  false;  if(numericalVariance  <  0)  {  if(!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumberOfSuccesses();  }  [BUGGY]    }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	281	281	1	replace	numericalVarianceIsCalculated    =(numericalVariance    <    0)?    numericalVarianceIsCalculated    :    false;    if(numericalVariance  <  0)  {  if(!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumberOfSuccesses();  }	  	non-compiled	[CE]  illegal  start  of  expression	392	None
1425	[BUG]  [BUGGY]  numericalVarianceIsCalculated  =(numericalVariance  <  0)?  numericalVarianceIsCalculated  :  false;  if(!numericalVarianceIsCalculated)  {  if(!numericalVarianceIsCalculated)  {  numericalVariance  =  false;  }  [CE]  illegal  start  of  expression  [CONTEXT]    public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();    [BUGGY]  numericalVarianceIsCalculated  =(numericalVariance  <  0)?  numericalVarianceIsCalculated  :  false;  if(!numericalVarianceIsCalculated)  {  if(!numericalVarianceIsCalculated)  {  numericalVariance  =  false;  }  [BUGGY]    }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	281	281	1	replace	numericalVarianceIsCalculated    =(numericalVariance    <    0)?    numericalVarianceIsCalculated    :    false;    if(!numericalVarianceIsCalculated)  {  if(!numericalVarianceIsCalculated)  {  numericalVariance  =  false;  }	  	non-compiled	[CE]  illegal  start  of  expression	392	None
1431	[BUG]  [BUGGY]  final  double  m  =  getNumberOfSuccesses()  *  2;  final  double  k  =  getKnowNumberOfSuccesses();  [CE]  cannot  find  symbol  [CONTEXT]    protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();    [BUGGY]  final  double  m  =  getNumberOfSuccesses()  *  2;  final  double  k  =  getKnowNumberOfSuccesses();  [BUGGY]    final  double  n  =  getSampleSize();  return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	293	293	1	replace	final    double    m    =    getNumberOfSuccesses()    *    2;    final  double  k  =  getKnowNumberOfSuccesses();	  	non-compiled	[CE]  cannot  find  symbol	183	None
1432	[BUG]  [BUGGY]  final  double  m  =  getNumberOfSuccesses()  *  2;  final  double  k  =  getKnowledge();  [CE]  cannot  find  symbol  [CONTEXT]    protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();    [BUGGY]  final  double  m  =  getNumberOfSuccesses()  *  2;  final  double  k  =  getKnowledge();  [BUGGY]    final  double  n  =  getSampleSize();  return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	293	293	1	replace	final    double    m    =    getNumberOfSuccesses()    *    2;    final  double  k  =  getKnowledge();	  	non-compiled	[CE]  cannot  find  symbol	183	None
1433	[BUG]  [BUGGY]  final  double  m  =  getNumberOfSuccesses()  *  2;  final  double  k  =  getPopulationSize();  [CE]  variable  m  is  already  defined  in  method  calculateNumericalVariance()  [CONTEXT]    protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();    [BUGGY]  final  double  m  =  getNumberOfSuccesses()  *  2;  final  double  k  =  getPopulationSize();  [BUGGY]    final  double  n  =  getSampleSize();  return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	293	293	1	replace	final    double    m    =    getNumberOfSuccesses()    *    2;    final  double  k  =  getPopulationSize();	  	non-compiled	[CE]  variable  m  is  already  defined  in  method  calculateNumericalVariance()	183	None
1434	[BUG]  [BUGGY]  final  double  m  =  getNumberOfSuccesses()  *  2;  final  double  k  =  getSampleSize();  [CE]  variable  m  is  already  defined  in  method  calculateNumericalVariance()  [CONTEXT]    protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();    [BUGGY]  final  double  m  =  getNumberOfSuccesses()  *  2;  final  double  k  =  getSampleSize();  [BUGGY]    final  double  n  =  getSampleSize();  return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	293	293	1	replace	final    double    m    =    getNumberOfSuccesses()    *    2;    final  double  k  =  getSampleSize();	  	non-compiled	[CE]  variable  m  is  already  defined  in  method  calculateNumericalVariance()	183	None
1435	[BUG]  [BUGGY]  final  double  m  =  getNumberOfSuccesses()  *  2;  final  double  n  =  getPopulationSize();  [CE]  variable  m  is  already  defined  in  method  calculateNumericalVariance()  [CONTEXT]    protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();    [BUGGY]  final  double  m  =  getNumberOfSuccesses()  *  2;  final  double  n  =  getPopulationSize();  [BUGGY]    final  double  n  =  getSampleSize();  return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	293	293	1	replace	final    double    m    =    getNumberOfSuccesses()    *    2;    final  double  n  =  getPopulationSize();	  	non-compiled	[CE]  variable  m  is  already  defined  in  method  calculateNumericalVariance()	183	None
1444	[BUG]  [BUGGY]  if(numericalVariance  ==  null)  {  if(!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumberOfSuccesses();  bodied  [CE]  illegal  start  of  expression  [CONTEXT]    public  double  getNumericalVariance()  {    [BUGGY]  if(numericalVariance  ==  null)  {  if(!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumberOfSuccesses();  bodied  [BUGGY]    if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	279	279	1	replace	if(numericalVariance  ==  null)  {  if(!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumberOfSuccesses();  bodied	      if(numericalVariance!=    null)    {    if(!numericalVarianceIsCalculated)    {    numericalVariance    =    calculateNumberOfSuccesses();    }    	non-compiled	[CE]  illegal  start  of  expression	14	None
1451	[BUG]  [BUGGY]  double  numericalVariance  =  getPopulationSize();  [CE]  missing  return  statement  [CONTEXT]    public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }    [BUGGY]  double  numericalVariance  =  getPopulationSize();  [BUGGY]    return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	283	283	1	replace	double  numericalVariance  =  getPopulationSize();	      if(!numericalVarianceIsCalculated)    {    if(!numericalVarianceIsCalculated)    {    numericalVariance    =    calculateNumberOfSuccesses();    if(!numericalVarianceIsCalculated)    {    numericalVariance    =    	non-compiled	[CE]  missing  return  statement	104	None
1452	[BUG]  [BUGGY]  double  numericalVariance  =  calculateNumberOfSuccesses();  [CE]  cannot  find  symbol  [CONTEXT]    public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }    [BUGGY]  double  numericalVariance  =  calculateNumberOfSuccesses();  [BUGGY]    return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	283	283	1	replace	double  numericalVariance  =  calculateNumberOfSuccesses();	      if(!numericalVarianceIsCalculated)    {    if(!numericalVarianceIsCalculated)    {    numericalVariance    =    calculateNumberOfSuccesses();    if(!numericalVarianceIsCalculated)    {    numericalVariance    =    	non-compiled	[CE]  cannot  find  symbol	104	None
1453	[BUG]  [BUGGY]  double  numberOfSuccesses  =  getPopulationSize();  [CE]  missing  return  statement  [CONTEXT]    public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }    [BUGGY]  double  numberOfSuccesses  =  getPopulationSize();  [BUGGY]    return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	283	283	1	replace	double  numberOfSuccesses  =  getPopulationSize();	      if(!numericalVarianceIsCalculated)    {    if(!numericalVarianceIsCalculated)    {    numericalVariance    =    calculateNumberOfSuccesses();    if(!numericalVarianceIsCalculated)    {    numericalVariance    =    	non-compiled	[CE]  missing  return  statement	104	None
1462	[BUG]  [BUGGY]  final  double  M  =  getNumberOfSuccesses().doubleValue();  [CE]  int  cannot  be  dereferenced  [CONTEXT]    protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();    [BUGGY]  final  double  M  =  getNumberOfSuccesses().doubleValue();  [BUGGY]    final  double  n  =  getSampleSize();  return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	293	293	1	replace	final  double  M  =  getNumberOfSuccesses().doubleValue();	  final    double    m    =    getNumberOfSuccesses()    *    2;    	non-compiled	[CE]  int  cannot  be  dereferenced	184	None
1463	[BUG]  [BUGGY]  final  int  m  =  getNumberOfSuccesses().doubleValue();  [CE]  int  cannot  be  dereferenced  [CONTEXT]    protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();    [BUGGY]  final  int  m  =  getNumberOfSuccesses().doubleValue();  [BUGGY]    final  double  n  =  getSampleSize();  return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	293	293	1	replace	final  int  m  =  getNumberOfSuccesses().doubleValue();	  final    double    m    =    getNumberOfSuccesses()    *    2;    	non-compiled	[CE]  int  cannot  be  dereferenced	184	None
1464	[BUG]  [BUGGY]  final  double  m  =  getNumberOfSuccesses(),  N.doubleValue();  [CE]  ';'  expected  [CONTEXT]    protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();    [BUGGY]  final  double  m  =  getNumberOfSuccesses(),  N.doubleValue();  [BUGGY]    final  double  n  =  getSampleSize();  return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	293	293	1	replace	final  double  m  =  getNumberOfSuccesses(),  N.doubleValue();	  final    double    m    =    getNumberOfSuccesses()    *    2;    	non-compiled	[CE]  ';'  expected	184	None
1471	[BUG]  [BUGGY]      final  double  k  =  getNumberOfSuccesses();  final  double  n  =  getPopulationSize();  [CE]  variable  n  is  already  defined  in  method  calculateNumericalVariance()  [CONTEXT]    protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();  final  double  m  =  getNumberOfSuccesses();    [BUGGY]      final  double  k  =  getNumberOfSuccesses();  final  double  n  =  getPopulationSize();  [BUGGY]    final  double  n  =  getSampleSize();  return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	294	294	1	replace	        final    double    k    =    getNumberOfSuccesses();    final  double  n  =  getPopulationSize();	  	non-compiled	[CE]  variable  n  is  already  defined  in  method  calculateNumericalVariance()	302	None
1472	[BUG]  [BUGGY]      final  double  k  =  getNumberOfSuccesses();  final  double  dx  =  getDomainSize();  [CE]  cannot  find  symbol  [CONTEXT]    protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();  final  double  m  =  getNumberOfSuccesses();    [BUGGY]      final  double  k  =  getNumberOfSuccesses();  final  double  dx  =  getDomainSize();  [BUGGY]    final  double  n  =  getSampleSize();  return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	294	294	1	replace	        final    double    k    =    getNumberOfSuccesses();    final  double  dx  =  getDomainSize();	  	non-compiled	[CE]  cannot  find  symbol	302	None
1473	[BUG]  [BUGGY]      final  double  k  =  getNumberOfSuccesses();  final  double  k  =  getPopulationSize();  [CE]  variable  k  is  already  defined  in  method  calculateNumericalVariance()  [CONTEXT]    protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();  final  double  m  =  getNumberOfSuccesses();    [BUGGY]      final  double  k  =  getNumberOfSuccesses();  final  double  k  =  getPopulationSize();  [BUGGY]    final  double  n  =  getSampleSize();  return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	294	294	1	replace	        final    double    k    =    getNumberOfSuccesses();    final  double  k  =  getPopulationSize();	  	non-compiled	[CE]  variable  k  is  already  defined  in  method  calculateNumericalVariance()	302	None
1474	[BUG]  [BUGGY]      final  double  k  =  getNumberOfSuccesses();  final  double  dx  =  getDx();  [CE]  cannot  find  symbol  [CONTEXT]    protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();  final  double  m  =  getNumberOfSuccesses();    [BUGGY]      final  double  k  =  getNumberOfSuccesses();  final  double  dx  =  getDx();  [BUGGY]    final  double  n  =  getSampleSize();  return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	294	294	1	replace	        final    double    k    =    getNumberOfSuccesses();    final  double  dx  =  getDx();	  	non-compiled	[CE]  cannot  find  symbol	302	None
1475	[BUG]  [BUGGY]      final  double  k  =  getNumberOfSuccesses();  final  double  dx  =  getDateTimeZone();  [CE]  cannot  find  symbol  [CONTEXT]    protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();  final  double  m  =  getNumberOfSuccesses();    [BUGGY]      final  double  k  =  getNumberOfSuccesses();  final  double  dx  =  getDateTimeZone();  [BUGGY]    final  double  n  =  getSampleSize();  return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	294	294	1	replace	        final    double    k    =    getNumberOfSuccesses();    final  double  dx  =  getDateTimeZone();	  	non-compiled	[CE]  cannot  find  symbol	302	None
1482	[BUG]  [BUGGY]  final  double  n  =  getKnowNumberOfSuccesses();  [CE]  cannot  find  symbol  [CONTEXT]    protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();  final  double  m  =  getNumberOfSuccesses();    [BUGGY]  final  double  n  =  getKnowNumberOfSuccesses();  [BUGGY]    final  double  n  =  getSampleSize();  return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	294	294	1	replace	final  double  n  =  getKnowNumberOfSuccesses();	      final    double    k    =    getNumberOfSuccesses();    	non-compiled	[CE]  cannot  find  symbol	303	None
1483	[BUG]  [BUGGY]  final  double  dx  =  getKnowNumberOfSuccesses();  [CE]  cannot  find  symbol  [CONTEXT]    protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();  final  double  m  =  getNumberOfSuccesses();    [BUGGY]  final  double  dx  =  getKnowNumberOfSuccesses();  [BUGGY]    final  double  n  =  getSampleSize();  return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	294	294	1	replace	final  double  dx  =  getKnowNumberOfSuccesses();	      final    double    k    =    getNumberOfSuccesses();    	non-compiled	[CE]  cannot  find  symbol	303	None
1484	[BUG]  [BUGGY]  final  int  k  =  getKnowNumberOfSuccesses();  [CE]  cannot  find  symbol  [CONTEXT]    protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();  final  double  m  =  getNumberOfSuccesses();    [BUGGY]  final  int  k  =  getKnowNumberOfSuccesses();  [BUGGY]    final  double  n  =  getSampleSize();  return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	294	294	1	replace	final  int  k  =  getKnowNumberOfSuccesses();	      final    double    k    =    getNumberOfSuccesses();    	non-compiled	[CE]  cannot  find  symbol	303	None
1494	[BUG]  [BUGGY]  if(!numericalVarianceIsCalculated)  {  if(!numericalVarianceIsCalculated)  {  numericalVariance  =  false;  toured  [CE]  not  a  statement  [CONTEXT]    public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }    [BUGGY]  if(!numericalVarianceIsCalculated)  {  if(!numericalVarianceIsCalculated)  {  numericalVariance  =  false;  toured  [BUGGY]    return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	283	283	1	replace	if(!numericalVarianceIsCalculated)  {  if(!numericalVarianceIsCalculated)  {  numericalVariance  =  false;  toured	      if(!numericalVarianceIsCalculated)    {    if(!numericalVarianceIsCalculated)    {    numericalVariance    =    false;    }    	non-compiled	[CE]  not  a  statement	103	None
1503	[BUG]  [BUGGY]  if(!numericalVarianceIsCalculated)  {  if(!numericalVarianceIsCalculated)  {  numericalVariance  =  null;  bodied  [CE]  not  a  statement  [CONTEXT]    public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();    [BUGGY]  if(!numericalVarianceIsCalculated)  {  if(!numericalVarianceIsCalculated)  {  numericalVariance  =  null;  bodied  [BUGGY]    numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	281	281	1	replace	if(!numericalVarianceIsCalculated)  {  if(!numericalVarianceIsCalculated)  {  numericalVariance  =  null;  bodied	      if(!numericalVarianceIsCalculated)    {    if(!numericalVarianceIsCalculated)    {    numericalVariance    =    null;    }    	non-compiled	[CE]  not  a  statement	173	None
1504	[BUG]  [BUGGY]  if(!numericalVarianceIsCalculated)  {  if(!numericalVarianceIsCalculated)  {  numericalVariance  =  null;  toured  [CE]  not  a  statement  [CONTEXT]    public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();    [BUGGY]  if(!numericalVarianceIsCalculated)  {  if(!numericalVarianceIsCalculated)  {  numericalVariance  =  null;  toured  [BUGGY]    numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	281	281	1	replace	if(!numericalVarianceIsCalculated)  {  if(!numericalVarianceIsCalculated)  {  numericalVariance  =  null;  toured	      if(!numericalVarianceIsCalculated)    {    if(!numericalVarianceIsCalculated)    {    numericalVariance    =    null;    }    	non-compiled	[CE]  not  a  statement	173	None
1513	[BUG]  [BUGGY]  if(!numericalVarianceIsCalculated)  {  if(!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumberOfSuccesses();  delt  [CE]  not  a  statement  [CONTEXT]    public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();    [BUGGY]  if(!numericalVarianceIsCalculated)  {  if(!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumberOfSuccesses();  delt  [BUGGY]    numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	281	281	1	replace	if(!numericalVarianceIsCalculated)  {  if(!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumberOfSuccesses();  delt	      if(!numericalVarianceIsCalculated)    {    if(!numericalVarianceIsCalculated)    {    numericalVariance    =    calculateNumberOfSuccesses();    }    	non-compiled	[CE]  not  a  statement	171	None
1514	[BUG]  [BUGGY]  if(!numericalVarianceIsCalculated)  {  if(!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumberOfSuccesses();  bodied  [CE]  not  a  statement  [CONTEXT]    public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();    [BUGGY]  if(!numericalVarianceIsCalculated)  {  if(!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumberOfSuccesses();  bodied  [BUGGY]    numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	281	281	1	replace	if(!numericalVarianceIsCalculated)  {  if(!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumberOfSuccesses();  bodied	      if(!numericalVarianceIsCalculated)    {    if(!numericalVarianceIsCalculated)    {    numericalVariance    =    calculateNumberOfSuccesses();    }    	non-compiled	[CE]  not  a  statement	171	None
1522	[BUG]  [BUGGY]  final  double  n  =  getKnowledge();  [CE]  variable  n  is  already  defined  in  method  calculateNumericalVariance()  [CONTEXT]    protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();  final  double  m  =  getNumberOfSuccesses();  final  double  n  =  getSampleSize();    [BUGGY]  final  double  n  =  getKnowledge();  [BUGGY]    return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	295	295	1	replace	final  double  n  =  getKnowledge();	      final    double    k    =    getKnowledge();    	non-compiled	[CE]  variable  n  is  already  defined  in  method  calculateNumericalVariance()	95	None
1523	[BUG]  [BUGGY]  final  double  m  =  getKnowledge();  [CE]  variable  m  is  already  defined  in  method  calculateNumericalVariance()  [CONTEXT]    protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();  final  double  m  =  getNumberOfSuccesses();  final  double  n  =  getSampleSize();    [BUGGY]  final  double  m  =  getKnowledge();  [BUGGY]    return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	295	295	1	replace	final  double  m  =  getKnowledge();	      final    double    k    =    getKnowledge();    	non-compiled	[CE]  variable  m  is  already  defined  in  method  calculateNumericalVariance()	95	None
1524	[BUG]  [BUGGY]  final  double  dx  =  getKnowledge();  [CE]  cannot  find  symbol  [CONTEXT]    protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();  final  double  m  =  getNumberOfSuccesses();  final  double  n  =  getSampleSize();    [BUGGY]  final  double  dx  =  getKnowledge();  [BUGGY]    return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	295	295	1	replace	final  double  dx  =  getKnowledge();	      final    double    k    =    getKnowledge();    	non-compiled	[CE]  cannot  find  symbol	95	None
1531	[BUG]  [BUGGY]  return  numericalVariance  /(numericalVariance  *  getSummarySize())*  populationSize;  [CE]  cannot  find  symbol  [CONTEXT]    public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }    [BUGGY]  return  numericalVariance  /(numericalVariance  *  getSummarySize())*  populationSize;  [BUGGY]    }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	283	283	1	replace	return  numericalVariance  /(numericalVariance  *  getSummarySize())*  populationSize;	  return    numericalVariance    /(numericalVariance    *    getSummarySize())*    numberOfSuccesses;    	non-compiled	[CE]  cannot  find  symbol	344	None
1532	[BUG]  [BUGGY]  return  numberOfSuccesses  /(numericalVariance  *  getSummarySize())*  numericalVariance;  [CE]  cannot  find  symbol  [CONTEXT]    public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }    [BUGGY]  return  numberOfSuccesses  /(numericalVariance  *  getSummarySize())*  numericalVariance;  [BUGGY]    }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	283	283	1	replace	return  numberOfSuccesses  /(numericalVariance  *  getSummarySize())*  numericalVariance;	  return    numericalVariance    /(numericalVariance    *    getSummarySize())*    numberOfSuccesses;    	non-compiled	[CE]  cannot  find  symbol	344	None
1534	[BUG]  [BUGGY]  return  numericalVariance  /(numericalVariance  *  getSummarySize())*  sampleSize;  [CE]  cannot  find  symbol  [CONTEXT]    public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }    [BUGGY]  return  numericalVariance  /(numericalVariance  *  getSummarySize())*  sampleSize;  [BUGGY]    }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	283	283	1	replace	return  numericalVariance  /(numericalVariance  *  getSummarySize())*  sampleSize;	  return    numericalVariance    /(numericalVariance    *    getSummarySize())*    numberOfSuccesses;    	non-compiled	[CE]  cannot  find  symbol	344	None
1542	[BUG]  [BUGGY]  final  double  n  =  getDayOfMonth();  [CE]  cannot  find  symbol  [CONTEXT]    protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();  final  double  m  =  getNumberOfSuccesses();    [BUGGY]  final  double  n  =  getDayOfMonth();  [BUGGY]    final  double  n  =  getSampleSize();  return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	294	294	1	replace	final  double  n  =  getDayOfMonth();	      final    double    k    =    getDayOfMonth();    	non-compiled	[CE]  cannot  find  symbol	483	None
1543	[BUG]  [BUGGY]  final  double  dx  =  getDayOfMonth();  [CE]  cannot  find  symbol  [CONTEXT]    protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();  final  double  m  =  getNumberOfSuccesses();    [BUGGY]  final  double  dx  =  getDayOfMonth();  [BUGGY]    final  double  n  =  getSampleSize();  return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	294	294	1	replace	final  double  dx  =  getDayOfMonth();	      final    double    k    =    getDayOfMonth();    	non-compiled	[CE]  cannot  find  symbol	483	None
1544	[BUG]  [BUGGY]  final  double  y  =  getDayOfMonth();  [CE]  cannot  find  symbol  [CONTEXT]    protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();  final  double  m  =  getNumberOfSuccesses();    [BUGGY]  final  double  y  =  getDayOfMonth();  [BUGGY]    final  double  n  =  getSampleSize();  return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	294	294	1	replace	final  double  y  =  getDayOfMonth();	      final    double    k    =    getDayOfMonth();    	non-compiled	[CE]  cannot  find  symbol	483	None
1551	[BUG]  [BUGGY]  return  FastMath.max(0,  getNumberOfSuccesses()  +  getSampleSize()  -  getPopulationSize());  numericalVariance  =  Math.abs(numberOfSuccesses  -  1);  [CE]  unreachable  statement  [CONTEXT]    public  int  getSupportLowerBound()  {    [BUGGY]  return  FastMath.max(0,  getNumberOfSuccesses()  +  getSampleSize()  -  getPopulationSize());  numericalVariance  =  Math.abs(numberOfSuccesses  -  1);  [BUGGY]    getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  }  [CLASS]  HypergeometricDistribution  [METHOD]  getSupportLowerBound  [RETURN_TYPE]  int  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	308	309	1	replace	return    FastMath.max(0,    getNumberOfSuccesses()    +    getSampleSize()    -    getPopulationSize());    numericalVariance  =  Math.abs(numberOfSuccesses  -  1);	  	non-compiled	[CE]  unreachable  statement	2	None
1552	[BUG]  [BUGGY]  return  FastMath.max(0,  getNumberOfSuccesses()  +  getSampleSize()  -  getPopulationSize());  numericalVariance  =  Math.abs(numberOfSuccesses);  [CE]  unreachable  statement  [CONTEXT]    public  int  getSupportLowerBound()  {    [BUGGY]  return  FastMath.max(0,  getNumberOfSuccesses()  +  getSampleSize()  -  getPopulationSize());  numericalVariance  =  Math.abs(numberOfSuccesses);  [BUGGY]    getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  }  [CLASS]  HypergeometricDistribution  [METHOD]  getSupportLowerBound  [RETURN_TYPE]  int  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	308	309	1	replace	return    FastMath.max(0,    getNumberOfSuccesses()    +    getSampleSize()    -    getPopulationSize());    numericalVariance  =  Math.abs(numberOfSuccesses);	  	non-compiled	[CE]  unreachable  statement	2	None
1553	[BUG]  [BUGGY]  return  FastMath.max(0,  getNumberOfSuccesses()  +  getSampleSize()  -  getPopulationSize());  numericalVariance  =  Math.abs(numberOfSuccesses  +  1);  [CE]  unreachable  statement  [CONTEXT]    public  int  getSupportLowerBound()  {    [BUGGY]  return  FastMath.max(0,  getNumberOfSuccesses()  +  getSampleSize()  -  getPopulationSize());  numericalVariance  =  Math.abs(numberOfSuccesses  +  1);  [BUGGY]    getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  }  [CLASS]  HypergeometricDistribution  [METHOD]  getSupportLowerBound  [RETURN_TYPE]  int  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	308	309	1	replace	return    FastMath.max(0,    getNumberOfSuccesses()    +    getSampleSize()    -    getPopulationSize());    numericalVariance  =  Math.abs(numberOfSuccesses  +  1);	  	non-compiled	[CE]  unreachable  statement	2	None
1554	[BUG]  [BUGGY]  return  FastMath.max(0,  getNumberOfSuccesses()  +  getSampleSize()  -  getPopulationSize());  numericalVariance  =  Math.abs(numberOfSuccesses)>  0;  [CE]  incompatible  types  [CONTEXT]    public  int  getSupportLowerBound()  {    [BUGGY]  return  FastMath.max(0,  getNumberOfSuccesses()  +  getSampleSize()  -  getPopulationSize());  numericalVariance  =  Math.abs(numberOfSuccesses)>  0;  [BUGGY]    getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  }  [CLASS]  HypergeometricDistribution  [METHOD]  getSupportLowerBound  [RETURN_TYPE]  int  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	308	309	1	replace	return    FastMath.max(0,    getNumberOfSuccesses()    +    getSampleSize()    -    getPopulationSize());    numericalVariance  =  Math.abs(numberOfSuccesses)>  0;	  	non-compiled	[CE]  incompatible  types	2	None
1555	[BUG]  [BUGGY]  return  FastMath.max(0,  getNumberOfSuccesses()  +  getSampleSize()  -  getPopulationSize());  numericalVariance  =  Math.abs(numberOfSuccesses  /  2);  [CE]  unreachable  statement  [CONTEXT]    public  int  getSupportLowerBound()  {    [BUGGY]  return  FastMath.max(0,  getNumberOfSuccesses()  +  getSampleSize()  -  getPopulationSize());  numericalVariance  =  Math.abs(numberOfSuccesses  /  2);  [BUGGY]    getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  }  [CLASS]  HypergeometricDistribution  [METHOD]  getSupportLowerBound  [RETURN_TYPE]  int  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	308	309	1	replace	return    FastMath.max(0,    getNumberOfSuccesses()    +    getSampleSize()    -    getPopulationSize());    numericalVariance  =  Math.abs(numberOfSuccesses  /  2);	  	non-compiled	[CE]  unreachable  statement	2	None
1563	[BUG]  [BUGGY]  setNumberOfSuccesses(populationSize  -  1);  [CE]  cannot  find  symbol  [CONTEXT]    public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {    [BUGGY]  setNumberOfSuccesses(populationSize  -  1);  [BUGGY]    numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	280	280	1	replace	setNumberOfSuccesses(populationSize  -  1);	      setNumberOfSuccesses(n    -    1);    	non-compiled	[CE]  cannot  find  symbol	244	None
1564	[BUG]  [BUGGY]  setNumberOfSuccesses(numberOfSuccesses  /  1);  [CE]  cannot  find  symbol  [CONTEXT]    public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {    [BUGGY]  setNumberOfSuccesses(numberOfSuccesses  /  1);  [BUGGY]    numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	280	280	1	replace	setNumberOfSuccesses(numberOfSuccesses  /  1);	      setNumberOfSuccesses(n    -    1);    	non-compiled	[CE]  cannot  find  symbol	244	None
1571	[BUG]  [BUGGY]  if(getPopulationSize()  >  0)  {  if(getNumberOfSuccesses()  >  0)  {  return(double)getNumberOfSuccesses();  }  [CE]  illegal  start  of  expression  [CONTEXT]    public  double  getNumericalMean()  {    [BUGGY]  if(getPopulationSize()  >  0)  {  if(getNumberOfSuccesses()  >  0)  {  return(double)getNumberOfSuccesses();  }  [BUGGY]    return  (double)  (getSampleSize()  *  getNumberOfSuccesses())  /  (double)  getPopulationSize();  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalMean  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	268	268	1	replace	if(getPopulationSize()  >  0)  {  if(getNumberOfSuccesses()  >  0)  {  return(double)getNumberOfSuccesses();  }	      if(getNumberOfSuccesses()    >    0)    {    if(getNumberOfSuccesses()    >    0)    {    return(double)getNumberOfSuccesses();    }    	non-compiled	[CE]  illegal  start  of  expression	71	None
1581	[BUG]  [BUGGY]      int  populationSize  =  getPopulationSize();  if(!numericalVarianceIsCalculated)  {  [CE]  illegal  start  of  expression  [CONTEXT]    public  int  getSupportLowerBound()  {    [BUGGY]      int  populationSize  =  getPopulationSize();  if(!numericalVarianceIsCalculated)  {  [BUGGY]    return  FastMath.max(0,        getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  }  [CLASS]  HypergeometricDistribution  [METHOD]  getSupportLowerBound  [RETURN_TYPE]  int  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	308	309	1	replace	        int    populationSize    =    getPopulationSize();    if(!numericalVarianceIsCalculated)  {	  	non-compiled	[CE]  illegal  start  of  expression	63	None
1582	[BUG]  [BUGGY]      int  populationSize  =  getPopulationSize();  if(numericalVariance  ==  0)  {  [CE]  illegal  start  of  expression  [CONTEXT]    public  int  getSupportLowerBound()  {    [BUGGY]      int  populationSize  =  getPopulationSize();  if(numericalVariance  ==  0)  {  [BUGGY]    return  FastMath.max(0,        getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  }  [CLASS]  HypergeometricDistribution  [METHOD]  getSupportLowerBound  [RETURN_TYPE]  int  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	308	309	1	replace	        int    populationSize    =    getPopulationSize();    if(numericalVariance  ==  0)  {	  	non-compiled	[CE]  illegal  start  of  expression	63	None
1583	[BUG]  [BUGGY]      int  populationSize  =  getPopulationSize();  if(numericalVariance!=  0)  {  [CE]  illegal  start  of  expression  [CONTEXT]    public  int  getSupportLowerBound()  {    [BUGGY]      int  populationSize  =  getPopulationSize();  if(numericalVariance!=  0)  {  [BUGGY]    return  FastMath.max(0,        getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  }  [CLASS]  HypergeometricDistribution  [METHOD]  getSupportLowerBound  [RETURN_TYPE]  int  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	308	309	1	replace	        int    populationSize    =    getPopulationSize();    if(numericalVariance!=  0)  {	  	non-compiled	[CE]  illegal  start  of  expression	63	None
1584	[BUG]  [BUGGY]      int  populationSize  =  getPopulationSize();  if(numericalVariance  <  0)  {  [CE]  illegal  start  of  expression  [CONTEXT]    public  int  getSupportLowerBound()  {    [BUGGY]      int  populationSize  =  getPopulationSize();  if(numericalVariance  <  0)  {  [BUGGY]    return  FastMath.max(0,        getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  }  [CLASS]  HypergeometricDistribution  [METHOD]  getSupportLowerBound  [RETURN_TYPE]  int  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	308	309	1	replace	        int    populationSize    =    getPopulationSize();    if(numericalVariance  <  0)  {	  	non-compiled	[CE]  illegal  start  of  expression	63	None
1585	[BUG]  [BUGGY]      int  populationSize  =  getPopulationSize();  if(numericalVariance  ==  null)  {  [CE]  illegal  start  of  expression  [CONTEXT]    public  int  getSupportLowerBound()  {    [BUGGY]      int  populationSize  =  getPopulationSize();  if(numericalVariance  ==  null)  {  [BUGGY]    return  FastMath.max(0,        getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  }  [CLASS]  HypergeometricDistribution  [METHOD]  getSupportLowerBound  [RETURN_TYPE]  int  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	308	309	1	replace	        int    populationSize    =    getPopulationSize();    if(numericalVariance  ==  null)  {	  	non-compiled	[CE]  illegal  start  of  expression	63	None
1591	[BUG]  [BUGGY]      final  double  k  =  getNumberOfSuccesses();  final  double  dx  =  getDomainSize();  [CE]  cannot  find  symbol  [CONTEXT]    protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();    [BUGGY]      final  double  k  =  getNumberOfSuccesses();  final  double  dx  =  getDomainSize();  [BUGGY]    final  double  m  =  getNumberOfSuccesses();  final  double  n  =  getSampleSize();  return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	293	293	1	replace	        final    double    k    =    getNumberOfSuccesses();    final  double  dx  =  getDomainSize();	  	non-compiled	[CE]  cannot  find  symbol	181	None
1592	[BUG]  [BUGGY]      final  double  k  =  getNumberOfSuccesses();  final  double  dx  =  getDimensions();  [CE]  cannot  find  symbol  [CONTEXT]    protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();    [BUGGY]      final  double  k  =  getNumberOfSuccesses();  final  double  dx  =  getDimensions();  [BUGGY]    final  double  m  =  getNumberOfSuccesses();  final  double  n  =  getSampleSize();  return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	293	293	1	replace	        final    double    k    =    getNumberOfSuccesses();    final  double  dx  =  getDimensions();	  	non-compiled	[CE]  cannot  find  symbol	181	None
1593	[BUG]  [BUGGY]      final  double  k  =  getNumberOfSuccesses();  final  double  n  =  getPopulationSize();  [CE]  variable  n  is  already  defined  in  method  calculateNumericalVariance()  [CONTEXT]    protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();    [BUGGY]      final  double  k  =  getNumberOfSuccesses();  final  double  n  =  getPopulationSize();  [BUGGY]    final  double  m  =  getNumberOfSuccesses();  final  double  n  =  getSampleSize();  return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	293	293	1	replace	        final    double    k    =    getNumberOfSuccesses();    final  double  n  =  getPopulationSize();	  	non-compiled	[CE]  variable  n  is  already  defined  in  method  calculateNumericalVariance()	181	None
1594	[BUG]  [BUGGY]      final  double  k  =  getNumberOfSuccesses();  final  double  dx  =  getDateTimeZone();  [CE]  cannot  find  symbol  [CONTEXT]    protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();    [BUGGY]      final  double  k  =  getNumberOfSuccesses();  final  double  dx  =  getDateTimeZone();  [BUGGY]    final  double  m  =  getNumberOfSuccesses();  final  double  n  =  getSampleSize();  return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	293	293	1	replace	        final    double    k    =    getNumberOfSuccesses();    final  double  dx  =  getDateTimeZone();	  	non-compiled	[CE]  cannot  find  symbol	181	None
1595	[BUG]  [BUGGY]      final  double  k  =  getNumberOfSuccesses();  final  double  dx  =  getDimensionSize();  [CE]  cannot  find  symbol  [CONTEXT]    protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();    [BUGGY]      final  double  k  =  getNumberOfSuccesses();  final  double  dx  =  getDimensionSize();  [BUGGY]    final  double  m  =  getNumberOfSuccesses();  final  double  n  =  getSampleSize();  return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	293	293	1	replace	        final    double    k    =    getNumberOfSuccesses();    final  double  dx  =  getDimensionSize();	  	non-compiled	[CE]  cannot  find  symbol	181	None
1603	[BUG]  [BUGGY]  final  double  n  N  =  getNumberOfSuccesses();  [CE]  ';'  expected  [CONTEXT]    protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();  final  double  m  =  getNumberOfSuccesses();  final  double  n  =  getSampleSize();    [BUGGY]  final  double  n  N  =  getNumberOfSuccesses();  [BUGGY]    return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	295	295	1	replace	final  double  n  N  =  getNumberOfSuccesses();	      final    double    N    =    getNumberOfSuccesses();    	non-compiled	[CE]  ';'  expected	93	None
1611	[BUG]  [BUGGY]  double  numericalVariance  =  getNumberOfSuccesses()  /(numberOfSuccesses  -  1));  [CE]  ';'  expected  [CONTEXT]    public  double  getNumericalVariance()  {    [BUGGY]  double  numericalVariance  =  getNumberOfSuccesses()  /(numberOfSuccesses  -  1));  [BUGGY]    if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	279	279	1	replace	double  numericalVariance  =  getNumberOfSuccesses()  /(numberOfSuccesses  -  1));	      double    numericalVariance    =    getNumberOfSuccesses()    /    2.0;    	non-compiled	[CE]  ';'  expected	4	None
1613	[BUG]  [BUGGY]  double  numericalVariance  =  getNumberOfSuccesses()  *(numberOfSuccesses  /  1));  [CE]  ';'  expected  [CONTEXT]    public  double  getNumericalVariance()  {    [BUGGY]  double  numericalVariance  =  getNumberOfSuccesses()  *(numberOfSuccesses  /  1));  [BUGGY]    if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	279	279	1	replace	double  numericalVariance  =  getNumberOfSuccesses()  *(numberOfSuccesses  /  1));	      double    numericalVariance    =    getNumberOfSuccesses()    /    2.0;    	non-compiled	[CE]  ';'  expected	4	None
1614	[BUG]  [BUGGY]  double  numericalVariance  =  getNumberOfSuccesses()  *(populationSize  -  1));  [CE]  ';'  expected  [CONTEXT]    public  double  getNumericalVariance()  {    [BUGGY]  double  numericalVariance  =  getNumberOfSuccesses()  *(populationSize  -  1));  [BUGGY]    if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	279	279	1	replace	double  numericalVariance  =  getNumberOfSuccesses()  *(populationSize  -  1));	      double    numericalVariance    =    getNumberOfSuccesses()    /    2.0;    	non-compiled	[CE]  ';'  expected	4	None
1623	[BUG]  [BUGGY]  final  char  N  =  getNumberOfSuccesses();  [CE]  variable  N  is  already  defined  in  method  calculateNumericalVariance()  [CONTEXT]    protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();    [BUGGY]  final  char  N  =  getNumberOfSuccesses();  [BUGGY]    final  double  m  =  getNumberOfSuccesses();  final  double  n  =  getSampleSize();  return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	293	293	1	replace	final  char  N  =  getNumberOfSuccesses();	      final    int    N    =    getNumberOfSuccesses();    	non-compiled	[CE]  variable  N  is  already  defined  in  method  calculateNumericalVariance()	143	None
1624	[BUG]  [BUGGY]  final  long  N  =  getNumberOfSuccesses();  [CE]  variable  N  is  already  defined  in  method  calculateNumericalVariance()  [CONTEXT]    protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();    [BUGGY]  final  long  N  =  getNumberOfSuccesses();  [BUGGY]    final  double  m  =  getNumberOfSuccesses();  final  double  n  =  getSampleSize();  return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	293	293	1	replace	final  long  N  =  getNumberOfSuccesses();	      final    int    N    =    getNumberOfSuccesses();    	non-compiled	[CE]  variable  N  is  already  defined  in  method  calculateNumericalVariance()	143	None
1632	[BUG]  [BUGGY]  if(!numericalVarianceIsCalculated  &&!negativeVarianceIsCalculated)  {  [CE]  illegal  start  of  expression  [CONTEXT]    public  int  getSupportLowerBound()  {    [BUGGY]  if(!numericalVarianceIsCalculated  &&!negativeVarianceIsCalculated)  {  [BUGGY]    return  FastMath.max(0,        getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  }  [CLASS]  HypergeometricDistribution  [METHOD]  getSupportLowerBound  [RETURN_TYPE]  int  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	308	309	1	replace	if(!numericalVarianceIsCalculated  &&!negativeVarianceIsCalculated)  {	      if(getNumberOfSuccesses()    >    0)    {    if(getPopulationSize()    >    0)    {    return    FastMath.min(10,    getNumberOfSuccesses()    -    getPopulationSize());    }    	non-compiled	[CE]  illegal  start  of  expression	62	None
1633	[BUG]  [BUGGY]  if(!numericalVarianceIsCalculated  &&!nativeVarianceIsCalculated)  {  [CE]  illegal  start  of  expression  [CONTEXT]    public  int  getSupportLowerBound()  {    [BUGGY]  if(!numericalVarianceIsCalculated  &&!nativeVarianceIsCalculated)  {  [BUGGY]    return  FastMath.max(0,        getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  }  [CLASS]  HypergeometricDistribution  [METHOD]  getSupportLowerBound  [RETURN_TYPE]  int  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	308	309	1	replace	if(!numericalVarianceIsCalculated  &&!nativeVarianceIsCalculated)  {	      if(getNumberOfSuccesses()    >    0)    {    if(getPopulationSize()    >    0)    {    return    FastMath.min(10,    getNumberOfSuccesses()    -    getPopulationSize());    }    	non-compiled	[CE]  illegal  start  of  expression	62	None
1634	[BUG]  [BUGGY]  if(!numericalVarianceIsCalculated  &&!dynamicVarianceIsCalculated)  {  [CE]  illegal  start  of  expression  [CONTEXT]    public  int  getSupportLowerBound()  {    [BUGGY]  if(!numericalVarianceIsCalculated  &&!dynamicVarianceIsCalculated)  {  [BUGGY]    return  FastMath.max(0,        getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  }  [CLASS]  HypergeometricDistribution  [METHOD]  getSupportLowerBound  [RETURN_TYPE]  int  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	308	309	1	replace	if(!numericalVarianceIsCalculated  &&!dynamicVarianceIsCalculated)  {	      if(getNumberOfSuccesses()    >    0)    {    if(getPopulationSize()    >    0)    {    return    FastMath.min(10,    getNumberOfSuccesses()    -    getPopulationSize());    }    	non-compiled	[CE]  illegal  start  of  expression	62	None
1641	[BUG]  [BUGGY]  if(!numericalVarianceIsCalculated)  {  if(!numericalVarianceIsCalculated)  {  return  0;  }  [CE]  illegal  start  of  expression  [CONTEXT]    public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }    [BUGGY]  if(!numericalVarianceIsCalculated)  {  if(!numericalVarianceIsCalculated)  {  return  0;  }  [BUGGY]    return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	283	283	1	replace	if(!numericalVarianceIsCalculated)  {  if(!numericalVarianceIsCalculated)  {  return  0;  }	      if(!numericalVarianceIsCalculated)    {    if(!numericalVarianceIsCalculated)    {    numericalVariance    =    calculateNumberOfSuccesses();    }    	non-compiled	[CE]  illegal  start  of  expression	101	None
1642	[BUG]  [BUGGY]  if(!numericalVarianceIsCalculated)  {  if(!numericalVarianceIsCalculated)  {  return  false;  }  [CE]  illegal  start  of  expression  [CONTEXT]    public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }    [BUGGY]  if(!numericalVarianceIsCalculated)  {  if(!numericalVarianceIsCalculated)  {  return  false;  }  [BUGGY]    return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	283	283	1	replace	if(!numericalVarianceIsCalculated)  {  if(!numericalVarianceIsCalculated)  {  return  false;  }	      if(!numericalVarianceIsCalculated)    {    if(!numericalVarianceIsCalculated)    {    numericalVariance    =    calculateNumberOfSuccesses();    }    	non-compiled	[CE]  illegal  start  of  expression	101	None
1643	[BUG]  [BUGGY]  if(!numericalVarianceIsCalculated)  {  if(!numericalVarianceIsCalculated)  {  return  -1;  }  [CE]  illegal  start  of  expression  [CONTEXT]    public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }    [BUGGY]  if(!numericalVarianceIsCalculated)  {  if(!numericalVarianceIsCalculated)  {  return  -1;  }  [BUGGY]    return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	283	283	1	replace	if(!numericalVarianceIsCalculated)  {  if(!numericalVarianceIsCalculated)  {  return  -1;  }	      if(!numericalVarianceIsCalculated)    {    if(!numericalVarianceIsCalculated)    {    numericalVariance    =    calculateNumberOfSuccesses();    }    	non-compiled	[CE]  illegal  start  of  expression	101	None
1651	[BUG]  [BUGGY]      double  numericalVariance  =  getNumberOfSuccesses();  double  numericalVariance  =  getPopulationSize();  [CE]  variable  numericalVariance  is  already  defined  in  method  getNumericalVariance()  [CONTEXT]    public  double  getNumericalVariance()  {    [BUGGY]      double  numericalVariance  =  getNumberOfSuccesses();  double  numericalVariance  =  getPopulationSize();  [BUGGY]    if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	279	279	1	replace	        double    numericalVariance    =    getNumberOfSuccesses();    double  numericalVariance  =  getPopulationSize();	  	non-compiled	[CE]  variable  numericalVariance  is  already  defined  in  method  getNumericalVariance()	1	None
1653	[BUG]  [BUGGY]      double  numericalVariance  =  getNumberOfSuccesses();  if(numericalVariance  ==  0)  {  if(!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumberOfSuccesses();  }  [CE]  illegal  start  of  expression  [CONTEXT]    public  double  getNumericalVariance()  {    [BUGGY]      double  numericalVariance  =  getNumberOfSuccesses();  if(numericalVariance  ==  0)  {  if(!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumberOfSuccesses();  }  [BUGGY]    if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	279	279	1	replace	        double    numericalVariance    =    getNumberOfSuccesses();    if(numericalVariance  ==  0)  {  if(!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumberOfSuccesses();  }	  	non-compiled	[CE]  illegal  start  of  expression	1	None
1654	[BUG]  [BUGGY]      double  numericalVariance  =  getNumberOfSuccesses();  if(numberOfSuccesses  >  0)  {  if(!numericalVarianceIsCalculated)  {  numericalVariance  =  getNumberOfSuccesses();  }  [CE]  illegal  start  of  expression  [CONTEXT]    public  double  getNumericalVariance()  {    [BUGGY]      double  numericalVariance  =  getNumberOfSuccesses();  if(numberOfSuccesses  >  0)  {  if(!numericalVarianceIsCalculated)  {  numericalVariance  =  getNumberOfSuccesses();  }  [BUGGY]    if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	279	279	1	replace	        double    numericalVariance    =    getNumberOfSuccesses();    if(numberOfSuccesses  >  0)  {  if(!numericalVarianceIsCalculated)  {  numericalVariance  =  getNumberOfSuccesses();  }	  	non-compiled	[CE]  illegal  start  of  expression	1	None
1655	[BUG]  [BUGGY]      double  numericalVariance  =  getNumberOfSuccesses();  if(numberOfSuccesses  >  0)  {  if(!numericalVarianceIsCalculated)  {  return  null;  }  [CE]  illegal  start  of  expression  [CONTEXT]    public  double  getNumericalVariance()  {    [BUGGY]      double  numericalVariance  =  getNumberOfSuccesses();  if(numberOfSuccesses  >  0)  {  if(!numericalVarianceIsCalculated)  {  return  null;  }  [BUGGY]    if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	279	279	1	replace	        double    numericalVariance    =    getNumberOfSuccesses();    if(numberOfSuccesses  >  0)  {  if(!numericalVarianceIsCalculated)  {  return  null;  }	  	non-compiled	[CE]  illegal  start  of  expression	1	None
1661	[BUG]  [BUGGY]      double  numericalVariance  =  Math.max(getNumberOfSuccesses(),  numberOfSuccesses);  double  numericalVariance  =  Math.min(getNumberOfSuccesses(),  numberOfSuccesses);  [CE]  variable  numericalVariance  is  already  defined  in  method  getNumericalVariance()  [CONTEXT]    public  double  getNumericalVariance()  {    [BUGGY]      double  numericalVariance  =  Math.max(getNumberOfSuccesses(),  numberOfSuccesses);  double  numericalVariance  =  Math.min(getNumberOfSuccesses(),  numberOfSuccesses);  [BUGGY]    if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	279	279	1	replace	        double    numericalVariance    =    Math.max(getNumberOfSuccesses(),    numberOfSuccesses);    double  numericalVariance  =  Math.min(getNumberOfSuccesses(),  numberOfSuccesses);	  	non-compiled	[CE]  variable  numericalVariance  is  already  defined  in  method  getNumericalVariance()	542	None
1662	[BUG]  [BUGGY]      double  numericalVariance  =  Math.max(getNumberOfSuccesses(),  numberOfSuccesses);  double  numericalVariance  =  Math.min(getPopulationSize(),  numberOfSuccesses);  [CE]  variable  numericalVariance  is  already  defined  in  method  getNumericalVariance()  [CONTEXT]    public  double  getNumericalVariance()  {    [BUGGY]      double  numericalVariance  =  Math.max(getNumberOfSuccesses(),  numberOfSuccesses);  double  numericalVariance  =  Math.min(getPopulationSize(),  numberOfSuccesses);  [BUGGY]    if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	279	279	1	replace	        double    numericalVariance    =    Math.max(getNumberOfSuccesses(),    numberOfSuccesses);    double  numericalVariance  =  Math.min(getPopulationSize(),  numberOfSuccesses);	  	non-compiled	[CE]  variable  numericalVariance  is  already  defined  in  method  getNumericalVariance()	542	None
1663	[BUG]  [BUGGY]      double  numericalVariance  =  Math.max(getNumberOfSuccesses(),  numberOfSuccesses);  double  numericalVariance  =  Math.min(getSampleSize(),  numberOfSuccesses);  [CE]  variable  numericalVariance  is  already  defined  in  method  getNumericalVariance()  [CONTEXT]    public  double  getNumericalVariance()  {    [BUGGY]      double  numericalVariance  =  Math.max(getNumberOfSuccesses(),  numberOfSuccesses);  double  numericalVariance  =  Math.min(getSampleSize(),  numberOfSuccesses);  [BUGGY]    if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	279	279	1	replace	        double    numericalVariance    =    Math.max(getNumberOfSuccesses(),    numberOfSuccesses);    double  numericalVariance  =  Math.min(getSampleSize(),  numberOfSuccesses);	  	non-compiled	[CE]  variable  numericalVariance  is  already  defined  in  method  getNumericalVariance()	542	None
1664	[BUG]  [BUGGY]      double  numericalVariance  =  Math.max(getNumberOfSuccesses(),  numberOfSuccesses);  double  numericalVariance  =  Math.min(getPopulationSize(),  getNumberOfSuccesses());  [CE]  variable  numericalVariance  is  already  defined  in  method  getNumericalVariance()  [CONTEXT]    public  double  getNumericalVariance()  {    [BUGGY]      double  numericalVariance  =  Math.max(getNumberOfSuccesses(),  numberOfSuccesses);  double  numericalVariance  =  Math.min(getPopulationSize(),  getNumberOfSuccesses());  [BUGGY]    if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	279	279	1	replace	        double    numericalVariance    =    Math.max(getNumberOfSuccesses(),    numberOfSuccesses);    double  numericalVariance  =  Math.min(getPopulationSize(),  getNumberOfSuccesses());	  	non-compiled	[CE]  variable  numericalVariance  is  already  defined  in  method  getNumericalVariance()	542	None
1665	[BUG]  [BUGGY]      double  numericalVariance  =  Math.max(getNumberOfSuccesses(),  numberOfSuccesses);  double  numericalVariance  =  Math.min(getPopulationSize(),  getSampleSize());  [CE]  variable  numericalVariance  is  already  defined  in  method  getNumericalVariance()  [CONTEXT]    public  double  getNumericalVariance()  {    [BUGGY]      double  numericalVariance  =  Math.max(getNumberOfSuccesses(),  numberOfSuccesses);  double  numericalVariance  =  Math.min(getPopulationSize(),  getSampleSize());  [BUGGY]    if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	279	279	1	replace	        double    numericalVariance    =    Math.max(getNumberOfSuccesses(),    numberOfSuccesses);    double  numericalVariance  =  Math.min(getPopulationSize(),  getSampleSize());	  	non-compiled	[CE]  variable  numericalVariance  is  already  defined  in  method  getNumericalVariance()	542	None
1671	[BUG]  [BUGGY]  [FE]  AssertionError  testMoments  [CONTEXT]    public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();    [BUGGY]  numericalVariance  =  Math.max(numberOfSuccesses,  sampleSize  -  1);  [BUGGY]    numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	281	281	1	add	numericalVariance  =  Math.max(numberOfSuccesses,  sampleSize  -  1);	      numericalVariance    =    Math.max(numberOfSuccesses,    x    -    1);    	compilable	  [FE]  AssertionError  testMoments	155	1
1672	[BUG]  [BUGGY]  numericalVariance  =  Math.max(numberOfSuccesses,  sampleSize  -  1);  [FE]  AssertionError  testMoments  [CONTEXT]    public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();    [BUGGY]  numericalVariance  =  Math.max(numberOfSuccesses,  sampleSize  -  1);  [BUGGY]    numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	281	281	1	replace	numericalVariance  =  Math.max(numberOfSuccesses,  sampleSize  -  1);	      numericalVariance    =    Math.max(numberOfSuccesses,    x    -    1);    	compilable	  [FE]  AssertionError  testMoments	155	1
1672	[BUG]  [BUGGY]  [FE]  AssertionError  testMoments  [CONTEXT]    public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();    [BUGGY]  numericalVariance  =  Math.max(numberOfSuccesses,  populationSize  -  1);  [BUGGY]    numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	281	281	1	add	numericalVariance  =  Math.max(numberOfSuccesses,  populationSize  -  1);	      numericalVariance    =    Math.max(numberOfSuccesses,    x    -    1);    	compilable	  [FE]  AssertionError  testMoments	155	1
1673	[BUG]  [BUGGY]  numericalVariance  =  Math.max(numberOfSuccesses,  populationSize  -  1);  [FE]  AssertionError  testMoments  [CONTEXT]    public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();    [BUGGY]  numericalVariance  =  Math.max(numberOfSuccesses,  populationSize  -  1);  [BUGGY]    numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	281	281	1	replace	numericalVariance  =  Math.max(numberOfSuccesses,  populationSize  -  1);	      numericalVariance    =    Math.max(numberOfSuccesses,    x    -    1);    	compilable	  [FE]  AssertionError  testMoments	155	1
1673	[BUG]  [BUGGY]  numericalVariance  =  Math.max(numberOfSuccesses,  size  -  1);  [CE]  cannot  find  symbol  size  [CONTEXT]    public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();    [BUGGY]  numericalVariance  =  Math.max(numberOfSuccesses,  size  -  1);  [BUGGY]    numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	281	281	1	replace	numericalVariance  =  Math.max(numberOfSuccesses,  size  -  1);	      numericalVariance    =    Math.max(numberOfSuccesses,    x    -    1);    	non-compiled	[CE]  cannot  find  symbol  size	155	None
1674	[BUG]  [BUGGY]  numericalVariance  =  Math.max(numberOfSuccesses,  samplingSize  -  1);  [CE]  cannot  find  symbol  samplingSize  [CONTEXT]    public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();    [BUGGY]  numericalVariance  =  Math.max(numberOfSuccesses,  samplingSize  -  1);  [BUGGY]    numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	281	281	1	replace	numericalVariance  =  Math.max(numberOfSuccesses,  samplingSize  -  1);	      numericalVariance    =    Math.max(numberOfSuccesses,    x    -    1);    	non-compiled	[CE]  cannot  find  symbol  samplingSize	155	None
1682	[BUG]  [BUGGY]  getPopulationSize()  -  getNumberOfSuccesses();  [CE]  not  a  statement  [CONTEXT]    public  int  getSupportLowerBound()  {    [BUGGY]  getPopulationSize()  -  getNumberOfSuccesses();  [BUGGY]    getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  }  [CLASS]  HypergeometricDistribution  [METHOD]  getSupportLowerBound  [RETURN_TYPE]  int  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	308	309	1	replace	getPopulationSize()  -  getNumberOfSuccesses();	      	non-compiled	[CE]  not  a  statement	5	None
1683	[BUG]  [BUGGY]  getPopulationSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  [CE]  not  a  statement  [CONTEXT]    public  int  getSupportLowerBound()  {    [BUGGY]  getPopulationSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  [BUGGY]    getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  }  [CLASS]  HypergeometricDistribution  [METHOD]  getSupportLowerBound  [RETURN_TYPE]  int  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	308	309	1	replace	getPopulationSize()  +  getNumberOfSuccesses()  -  getPopulationSize());	      	non-compiled	[CE]  not  a  statement	5	None
1691	[BUG]  [BUGGY]  final  double  n  =  getNumberOfSuccesses()  *  getNumberOfSuccesses();  [CE]  variable  n  is  already  defined  in  method  calculateNumericalVariance()  [CONTEXT]    protected  double  calculateNumericalVariance()  {    [BUGGY]  final  double  n  =  getNumberOfSuccesses()  *  getNumberOfSuccesses();  [BUGGY]    final  double  N  =  getPopulationSize();  final  double  m  =  getNumberOfSuccesses();  final  double  n  =  getSampleSize();  return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	292	292	1	replace	final  double  n  =  getNumberOfSuccesses()  *  getNumberOfSuccesses();	      double    N    =    getNumberOfSuccesses();    	non-compiled	[CE]  variable  n  is  already  defined  in  method  calculateNumericalVariance()	163	None
1692	[BUG]  [BUGGY]  final  double  k  =  getNumberOfSuccesses()  *  getKnowNumberOfSuccesses();  [CE]  cannot  find  symbol  [CONTEXT]    protected  double  calculateNumericalVariance()  {    [BUGGY]  final  double  k  =  getNumberOfSuccesses()  *  getKnowNumberOfSuccesses();  [BUGGY]    final  double  N  =  getPopulationSize();  final  double  m  =  getNumberOfSuccesses();  final  double  n  =  getSampleSize();  return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	292	292	1	replace	final  double  k  =  getNumberOfSuccesses()  *  getKnowNumberOfSuccesses();	      double    N    =    getNumberOfSuccesses();    	non-compiled	[CE]  cannot  find  symbol	163	None
1693	[BUG]  [BUGGY]  final  double  n  =  getPopulationSize()  *  getNumberOfSuccesses();  [CE]  variable  n  is  already  defined  in  method  calculateNumericalVariance()  [CONTEXT]    protected  double  calculateNumericalVariance()  {    [BUGGY]  final  double  n  =  getPopulationSize()  *  getNumberOfSuccesses();  [BUGGY]    final  double  N  =  getPopulationSize();  final  double  m  =  getNumberOfSuccesses();  final  double  n  =  getSampleSize();  return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	292	292	1	replace	final  double  n  =  getPopulationSize()  *  getNumberOfSuccesses();	      double    N    =    getNumberOfSuccesses();    	non-compiled	[CE]  variable  n  is  already  defined  in  method  calculateNumericalVariance()	163	None
1694	[BUG]  [BUGGY]  final  double  k  =  getNumberOfSuccesses()  *  getKnowledge();  [CE]  cannot  find  symbol  [CONTEXT]    protected  double  calculateNumericalVariance()  {    [BUGGY]  final  double  k  =  getNumberOfSuccesses()  *  getKnowledge();  [BUGGY]    final  double  N  =  getPopulationSize();  final  double  m  =  getNumberOfSuccesses();  final  double  n  =  getSampleSize();  return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	292	292	1	replace	final  double  k  =  getNumberOfSuccesses()  *  getKnowledge();	      double    N    =    getNumberOfSuccesses();    	non-compiled	[CE]  cannot  find  symbol	163	None
1701	[BUG]  [BUGGY]  final  double  N  =  getPopulationSize()  /  2.0;  final  double  N  =  getNumberOfSuccesses();  [CE]  variable  N  is  already  defined  in  method  calculateNumericalVariance()  [CONTEXT]    protected  double  calculateNumericalVariance()  {    [BUGGY]  final  double  N  =  getPopulationSize()  /  2.0;  final  double  N  =  getNumberOfSuccesses();  [BUGGY]    final  double  m  =  getNumberOfSuccesses();  final  double  n  =  getSampleSize();  return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	292	292	1	replace	final    double    N    =    getPopulationSize()    /    2.0;    final  double  N  =  getNumberOfSuccesses();	  	non-compiled	[CE]  variable  N  is  already  defined  in  method  calculateNumericalVariance()	194	None
1702	[BUG]  [BUGGY]  final  double  N  =  getPopulationSize()  /  2.0;  final  double  N  =  getNumberOfSuccesses()  /  2.0;  [CE]  variable  N  is  already  defined  in  method  calculateNumericalVariance()  [CONTEXT]    protected  double  calculateNumericalVariance()  {    [BUGGY]  final  double  N  =  getPopulationSize()  /  2.0;  final  double  N  =  getNumberOfSuccesses()  /  2.0;  [BUGGY]    final  double  m  =  getNumberOfSuccesses();  final  double  n  =  getSampleSize();  return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	292	292	1	replace	final    double    N    =    getPopulationSize()    /    2.0;    final  double  N  =  getNumberOfSuccesses()  /  2.0;	  	non-compiled	[CE]  variable  N  is  already  defined  in  method  calculateNumericalVariance()	194	None
1703	[BUG]  [BUGGY]  final  double  N  =  getPopulationSize()  /  2.0;  final  double  N  =  getPopulationSize()  /  2.0;  [CE]  variable  N  is  already  defined  in  method  calculateNumericalVariance()  [CONTEXT]    protected  double  calculateNumericalVariance()  {    [BUGGY]  final  double  N  =  getPopulationSize()  /  2.0;  final  double  N  =  getPopulationSize()  /  2.0;  [BUGGY]    final  double  m  =  getNumberOfSuccesses();  final  double  n  =  getSampleSize();  return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	292	292	1	replace	final    double    N    =    getPopulationSize()    /    2.0;    final  double  N  =  getPopulationSize()  /  2.0;	  	non-compiled	[CE]  variable  N  is  already  defined  in  method  calculateNumericalVariance()	194	None
1704	[BUG]  [BUGGY]  final  double  N  =  getPopulationSize()  /  2.0;  final  double  N  =  getNumberOfSuccesses()  *  2.0;  [CE]  variable  N  is  already  defined  in  method  calculateNumericalVariance()  [CONTEXT]    protected  double  calculateNumericalVariance()  {    [BUGGY]  final  double  N  =  getPopulationSize()  /  2.0;  final  double  N  =  getNumberOfSuccesses()  *  2.0;  [BUGGY]    final  double  m  =  getNumberOfSuccesses();  final  double  n  =  getSampleSize();  return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	292	292	1	replace	final    double    N    =    getPopulationSize()    /    2.0;    final  double  N  =  getNumberOfSuccesses()  *  2.0;	  	non-compiled	[CE]  variable  N  is  already  defined  in  method  calculateNumericalVariance()	194	None
1705	[BUG]  [BUGGY]  final  double  N  =  getPopulationSize()  /  2.0;  final  double  N  =  getNumberOfSuccesses()  *  1.0;  [CE]  variable  N  is  already  defined  in  method  calculateNumericalVariance()  [CONTEXT]    protected  double  calculateNumericalVariance()  {    [BUGGY]  final  double  N  =  getPopulationSize()  /  2.0;  final  double  N  =  getNumberOfSuccesses()  *  1.0;  [BUGGY]    final  double  m  =  getNumberOfSuccesses();  final  double  n  =  getSampleSize();  return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	292	292	1	replace	final    double    N    =    getPopulationSize()    /    2.0;    final  double  N  =  getNumberOfSuccesses()  *  1.0;	  	non-compiled	[CE]  variable  N  is  already  defined  in  method  calculateNumericalVariance()	194	None
1712	[BUG]  [BUGGY]  final  double  N  =  getNumberOfSuccesses(),  numberOfSuccesses.doubleValue();  [CE]  ';'  expected  [CONTEXT]    protected  double  calculateNumericalVariance()  {    [BUGGY]  final  double  N  =  getNumberOfSuccesses(),  numberOfSuccesses.doubleValue();  [BUGGY]    final  double  N  =  getPopulationSize();  final  double  m  =  getNumberOfSuccesses();  final  double  n  =  getSampleSize();  return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	292	292	1	replace	final  double  N  =  getNumberOfSuccesses(),  numberOfSuccesses.doubleValue();	      final    double    N    =    getNumberOfSuccesses().doubleValue();    	non-compiled	[CE]  ';'  expected	164	None
1714	[BUG]  [BUGGY]  final  double  N  =  getNumberOfSuccesses().doubleValue(),  numberOfSuccesses;  [CE]  int  cannot  be  dereferenced  [CONTEXT]    protected  double  calculateNumericalVariance()  {    [BUGGY]  final  double  N  =  getNumberOfSuccesses().doubleValue(),  numberOfSuccesses;  [BUGGY]    final  double  N  =  getPopulationSize();  final  double  m  =  getNumberOfSuccesses();  final  double  n  =  getSampleSize();  return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	292	292	1	replace	final  double  N  =  getNumberOfSuccesses().doubleValue(),  numberOfSuccesses;	      final    double    N    =    getNumberOfSuccesses().doubleValue();    	non-compiled	[CE]  int  cannot  be  dereferenced	164	None
1722	[BUG]  [BUGGY]  final  double  n  =  getNumberOfKind();  [CE]  cannot  find  symbol  [CONTEXT]    protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();  final  double  m  =  getNumberOfSuccesses();    [BUGGY]  final  double  n  =  getNumberOfKind();  [BUGGY]    final  double  n  =  getSampleSize();  return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	294	294	1	replace	final  double  n  =  getNumberOfKind();	      final    double    k    =    getNumberOfKind();    	non-compiled	[CE]  cannot  find  symbol	305	None
1723	[BUG]  [BUGGY]  final  double  dx  =  getNumberOfKind();  [CE]  cannot  find  symbol  [CONTEXT]    protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();  final  double  m  =  getNumberOfSuccesses();    [BUGGY]  final  double  dx  =  getNumberOfKind();  [BUGGY]    final  double  n  =  getSampleSize();  return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	294	294	1	replace	final  double  dx  =  getNumberOfKind();	      final    double    k    =    getNumberOfKind();    	non-compiled	[CE]  cannot  find  symbol	305	None
1724	[BUG]  [BUGGY]  final  int  k  =  getNumberOfKind();  [CE]  cannot  find  symbol  [CONTEXT]    protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();  final  double  m  =  getNumberOfSuccesses();    [BUGGY]  final  int  k  =  getNumberOfKind();  [BUGGY]    final  double  n  =  getSampleSize();  return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	294	294	1	replace	final  int  k  =  getNumberOfKind();	      final    double    k    =    getNumberOfKind();    	non-compiled	[CE]  cannot  find  symbol	305	None
1732	[BUG]  [BUGGY]  double  numericalVariance  =  Math.ceil(getMean()  /  numberOfSuccesses);  [CE]  illegal  start  of  type  [CONTEXT]    public  double  getNumericalVariance()  {    [BUGGY]  double  numericalVariance  =  Math.ceil(getMean()  /  numberOfSuccesses);  [BUGGY]    if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	279	279	1	replace	double  numericalVariance  =  Math.ceil(getMean()  /  numberOfSuccesses);	      double    numericalVariance    =    Math.floor(getMean()    /    numberOfSuccesses);    	non-compiled	[CE]  illegal  start  of  type	544	None
1733	[BUG]  [BUGGY]  double  numericalVariance  =  Math.floor(getMean()  /  size);  [CE]  illegal  start  of  type  [CONTEXT]    public  double  getNumericalVariance()  {    [BUGGY]  double  numericalVariance  =  Math.floor(getMean()  /  size);  [BUGGY]    if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	279	279	1	replace	double  numericalVariance  =  Math.floor(getMean()  /  size);	      double    numericalVariance    =    Math.floor(getMean()    /    numberOfSuccesses);    	non-compiled	[CE]  illegal  start  of  type	544	None
1734	[BUG]  [BUGGY]  double  numericalVariance  =  Math.floor(getMean()  /  numberOfSuccesses)-  1;  [CE]  illegal  start  of  type  [CONTEXT]    public  double  getNumericalVariance()  {    [BUGGY]  double  numericalVariance  =  Math.floor(getMean()  /  numberOfSuccesses)-  1;  [BUGGY]    if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	279	279	1	replace	double  numericalVariance  =  Math.floor(getMean()  /  numberOfSuccesses)-  1;	      double    numericalVariance    =    Math.floor(getMean()    /    numberOfSuccesses);    	non-compiled	[CE]  illegal  start  of  type	544	None
1742	[BUG]  [BUGGY]  super.calculateNumberOfSuccesses(),  numericalVarianceIsCalculated);  [CE]  ';'  expected  [CONTEXT]    protected  double  calculateNumericalVariance()  {    [BUGGY]  super.calculateNumberOfSuccesses(),  numericalVarianceIsCalculated);  [BUGGY]    final  double  N  =  getPopulationSize();  final  double  m  =  getNumberOfSuccesses();  final  double  n  =  getSampleSize();  return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	292	292	1	replace	super.calculateNumberOfSuccesses(),  numericalVarianceIsCalculated);	      super.calculateNumberOfSuccesses();    	non-compiled	[CE]  ';'  expected	215	None
1743	[BUG]  [BUGGY]  super.calculateNumberOfSuccesses(),  numberOfSuccesses);  [CE]  ';'  expected  [CONTEXT]    protected  double  calculateNumericalVariance()  {    [BUGGY]  super.calculateNumberOfSuccesses(),  numberOfSuccesses);  [BUGGY]    final  double  N  =  getPopulationSize();  final  double  m  =  getNumberOfSuccesses();  final  double  n  =  getSampleSize();  return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	292	292	1	replace	super.calculateNumberOfSuccesses(),  numberOfSuccesses);	      super.calculateNumberOfSuccesses();    	non-compiled	[CE]  ';'  expected	215	None
1744	[BUG]  [BUGGY]  super.calculateNumberOfSuccesses(),  numericalVarianceIsCalculated;  [CE]  ';'  expected  [CONTEXT]    protected  double  calculateNumericalVariance()  {    [BUGGY]  super.calculateNumberOfSuccesses(),  numericalVarianceIsCalculated;  [BUGGY]    final  double  N  =  getPopulationSize();  final  double  m  =  getNumberOfSuccesses();  final  double  n  =  getSampleSize();  return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	292	292	1	replace	super.calculateNumberOfSuccesses(),  numericalVarianceIsCalculated;	      super.calculateNumberOfSuccesses();    	non-compiled	[CE]  ';'  expected	215	None
1752	[BUG]  [BUGGY]  numericalVariance  =  calculateStandardVariance(),  numberOfSuccesses;  [CE]  ';'  expected  [CONTEXT]    public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {    [BUGGY]  numericalVariance  =  calculateStandardVariance(),  numberOfSuccesses;  [BUGGY]    numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	280	280	1	replace	numericalVariance  =  calculateStandardVariance(),  numberOfSuccesses;	  numericalVariance    =    calculateStandardVariance();    	non-compiled	[CE]  ';'  expected	574	None
1753	[BUG]  [BUGGY]  numericalVariance  =  calculateStandardVariance(),  numberOfSuccesses);  [CE]  ';'  expected  [CONTEXT]    public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {    [BUGGY]  numericalVariance  =  calculateStandardVariance(),  numberOfSuccesses);  [BUGGY]    numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	280	280	1	replace	numericalVariance  =  calculateStandardVariance(),  numberOfSuccesses);	  numericalVariance    =    calculateStandardVariance();    	non-compiled	[CE]  ';'  expected	574	None
1754	[BUG]  [BUGGY]  numericalVariance  =  calculateStandardVariance(),  probabilityOfSuccesses;  [CE]  ';'  expected  [CONTEXT]    public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {    [BUGGY]  numericalVariance  =  calculateStandardVariance(),  probabilityOfSuccesses;  [BUGGY]    numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	280	280	1	replace	numericalVariance  =  calculateStandardVariance(),  probabilityOfSuccesses;	  numericalVariance    =    calculateStandardVariance();    	non-compiled	[CE]  ';'  expected	574	None
1762	[BUG]  [BUGGY]  checkNumberOfSuccesses(numberOfSuccesses);  [CE]  cannot  find  symbol  [CONTEXT]    public  double  getNumericalMean()  {    [BUGGY]  checkNumberOfSuccesses(numberOfSuccesses);  [BUGGY]    return  (double)  (getSampleSize()  *  getNumberOfSuccesses())  /  (double)  getPopulationSize();  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalMean  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	268	268	1	replace	checkNumberOfSuccesses(numberOfSuccesses);	      getNumberOfSuccesses();    	non-compiled	[CE]  cannot  find  symbol	422	None
1763	[BUG]  [BUGGY]  checkNumberOfSuccesses(),  numberOfSuccesses;  [CE]  ';'  expected  [CONTEXT]    public  double  getNumericalMean()  {    [BUGGY]  checkNumberOfSuccesses(),  numberOfSuccesses;  [BUGGY]    return  (double)  (getSampleSize()  *  getNumberOfSuccesses())  /  (double)  getPopulationSize();  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalMean  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	268	268	1	replace	checkNumberOfSuccesses(),  numberOfSuccesses;	      getNumberOfSuccesses();    	non-compiled	[CE]  ';'  expected	422	None
1772	[BUG]  [BUGGY]  int  populationSize  =  getPopulationSize()  -  1;  [CE]  missing  return  statement  [CONTEXT]    public  int  getSupportLowerBound()  {    [BUGGY]  int  populationSize  =  getPopulationSize()  -  1;  [BUGGY]    return  FastMath.max(0,        getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  }  [CLASS]  HypergeometricDistribution  [METHOD]  getSupportLowerBound  [RETURN_TYPE]  int  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	308	309	1	replace	int  populationSize  =  getPopulationSize()  -  1;	      int    populationSize    =    getPopulationSize();    	non-compiled	[CE]  missing  return  statement	64	None
1773	[BUG]  [BUGGY]  int  populationSize  =  getPopulationSize()  /  2;  [CE]  missing  return  statement  [CONTEXT]    public  int  getSupportLowerBound()  {    [BUGGY]  int  populationSize  =  getPopulationSize()  /  2;  [BUGGY]    return  FastMath.max(0,        getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  }  [CLASS]  HypergeometricDistribution  [METHOD]  getSupportLowerBound  [RETURN_TYPE]  int  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	308	309	1	replace	int  populationSize  =  getPopulationSize()  /  2;	      int    populationSize    =    getPopulationSize();    	non-compiled	[CE]  missing  return  statement	64	None
1774	[BUG]  [BUGGY]  int  populationSize  =  getPopulationSize()  /  2.0;  [CE]  possible  loss  of  precision  [CONTEXT]    public  int  getSupportLowerBound()  {    [BUGGY]  int  populationSize  =  getPopulationSize()  /  2.0;  [BUGGY]    return  FastMath.max(0,        getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  }  [CLASS]  HypergeometricDistribution  [METHOD]  getSupportLowerBound  [RETURN_TYPE]  int  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	308	309	1	replace	int  populationSize  =  getPopulationSize()  /  2.0;	      int    populationSize    =    getPopulationSize();    	non-compiled	[CE]  possible  loss  of  precision	64	None
1781	[BUG]  [BUGGY]  numericalVariance  =  Math.abs(numberOfSuccesses  /  1);  [CE]  missing  return  statement  [CONTEXT]    public  int  getSupportLowerBound()  {    [BUGGY]  numericalVariance  =  Math.abs(numberOfSuccesses  /  1);  [BUGGY]    getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  }  [CLASS]  HypergeometricDistribution  [METHOD]  getSupportLowerBound  [RETURN_TYPE]  int  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	308	309	1	replace	numericalVariance  =  Math.abs(numberOfSuccesses  /  1);	      	non-compiled	[CE]  missing  return  statement	5	None
1782	[BUG]  [BUGGY]  numericalVariance  =  Math.abs(numberOfSuccesses  -  1);  [CE]  missing  return  statement  [CONTEXT]    public  int  getSupportLowerBound()  {    [BUGGY]  numericalVariance  =  Math.abs(numberOfSuccesses  -  1);  [BUGGY]    getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  }  [CLASS]  HypergeometricDistribution  [METHOD]  getSupportLowerBound  [RETURN_TYPE]  int  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	308	309	1	replace	numericalVariance  =  Math.abs(numberOfSuccesses  -  1);	      	non-compiled	[CE]  missing  return  statement	5	None
1783	[BUG]  [BUGGY]  numericalVariance  =  Math.abs(numberOfSuccesses  *  1);  [CE]  missing  return  statement  [CONTEXT]    public  int  getSupportLowerBound()  {    [BUGGY]  numericalVariance  =  Math.abs(numberOfSuccesses  *  1);  [BUGGY]    getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  }  [CLASS]  HypergeometricDistribution  [METHOD]  getSupportLowerBound  [RETURN_TYPE]  int  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	308	309	1	replace	numericalVariance  =  Math.abs(numberOfSuccesses  *  1);	      	non-compiled	[CE]  missing  return  statement	5	None
1793	[BUG]  [BUGGY]  [FE]  AssertionError  testMath1021  [CONTEXT]    public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();    [BUGGY]  numericalVarianceIsCalculated  =(numericalVariance  >  0)?  numericalVarianceIsCalculated  :  true;  [BUGGY]    }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	281	281	1	add	numericalVarianceIsCalculated  =(numericalVariance  >  0)?  numericalVarianceIsCalculated  :  true;	  numericalVarianceIsCalculated    =(numericalVariance    ==    0)?    numericalVarianceIsCalculated    :    true;    	compilable	  [FE]  AssertionError  testMath1021	395	1
1794	[BUG]  [BUGGY]  numericalVarianceIsCalculated  =(numericalVariance  >  0)?  numericalVarianceIsCalculated  :  true;  [FE]  AssertionError  testMath1021  [CONTEXT]    public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();    [BUGGY]  numericalVarianceIsCalculated  =(numericalVariance  >  0)?  numericalVarianceIsCalculated  :  true;  [BUGGY]    }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	281	281	1	replace	numericalVarianceIsCalculated  =(numericalVariance  >  0)?  numericalVarianceIsCalculated  :  true;	  numericalVarianceIsCalculated    =(numericalVariance    ==    0)?    numericalVarianceIsCalculated    :    true;    	compilable	  [FE]  AssertionError  testMath1021	395	1
1794	[BUG]  [BUGGY]  [FE]  AssertionError  testMath1021  [CONTEXT]    public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();    [BUGGY]  numericalVarianceIsCalculated  =(numericalVariance  ==  1)?  numericalVarianceIsCalculated  :  true;  [BUGGY]    }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	281	281	1	add	numericalVarianceIsCalculated  =(numericalVariance  ==  1)?  numericalVarianceIsCalculated  :  true;	  numericalVarianceIsCalculated    =(numericalVariance    ==    0)?    numericalVarianceIsCalculated    :    true;    	compilable	  [FE]  AssertionError  testMath1021	395	1
1795	[BUG]  [BUGGY]  numericalVarianceIsCalculated  =(numericalVariance  ==  1)?  numericalVarianceIsCalculated  :  true;  [FE]  AssertionError  testMath1021  [CONTEXT]    public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();    [BUGGY]  numericalVarianceIsCalculated  =(numericalVariance  ==  1)?  numericalVarianceIsCalculated  :  true;  [BUGGY]    }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	281	281	1	replace	numericalVarianceIsCalculated  =(numericalVariance  ==  1)?  numericalVarianceIsCalculated  :  true;	  numericalVarianceIsCalculated    =(numericalVariance    ==    0)?    numericalVarianceIsCalculated    :    true;    	compilable	  [FE]  AssertionError  testMath1021	395	1
1801	[BUG]  [BUGGY]  final  double  n  =  getNumberOfEscapes();  [CE]  variable  n  is  already  defined  in  method  calculateNumericalVariance()  [CONTEXT]    protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();  final  double  m  =  getNumberOfSuccesses();  final  double  n  =  getSampleSize();    [BUGGY]  final  double  n  =  getNumberOfEscapes();  [BUGGY]    return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	295	295	1	replace	final  double  n  =  getNumberOfEscapes();	      final    double    m    =    getNumberOfEscapes();    	non-compiled	[CE]  variable  n  is  already  defined  in  method  calculateNumericalVariance()	385	None
1803	[BUG]  [BUGGY]  final  double  dx  =  getNumberOfEscapes();  [CE]  cannot  find  symbol  [CONTEXT]    protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();  final  double  m  =  getNumberOfSuccesses();  final  double  n  =  getSampleSize();    [BUGGY]  final  double  dx  =  getNumberOfEscapes();  [BUGGY]    return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	295	295	1	replace	final  double  dx  =  getNumberOfEscapes();	      final    double    m    =    getNumberOfEscapes();    	non-compiled	[CE]  cannot  find  symbol	385	None
1804	[BUG]  [BUGGY]  final  double  y  =  getNumberOfEscapes();  [CE]  cannot  find  symbol  [CONTEXT]    protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();  final  double  m  =  getNumberOfSuccesses();  final  double  n  =  getSampleSize();    [BUGGY]  final  double  y  =  getNumberOfEscapes();  [BUGGY]    return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	295	295	1	replace	final  double  y  =  getNumberOfEscapes();	      final    double    m    =    getNumberOfEscapes();    	non-compiled	[CE]  cannot  find  symbol	385	None
1812	[BUG]  [BUGGY]  final  double  n  =  getDecimalVariance();  [CE]  cannot  find  symbol  [CONTEXT]    protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();  final  double  m  =  getNumberOfSuccesses();    [BUGGY]  final  double  n  =  getDecimalVariance();  [BUGGY]    final  double  n  =  getSampleSize();  return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	294	294	1	replace	final  double  n  =  getDecimalVariance();	      final    double    k    =    getDecimalVariance();    	non-compiled	[CE]  cannot  find  symbol	482	None
1813	[BUG]  [BUGGY]  final  double  dx  =  getDecimalVariance();  [CE]  cannot  find  symbol  [CONTEXT]    protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();  final  double  m  =  getNumberOfSuccesses();    [BUGGY]  final  double  dx  =  getDecimalVariance();  [BUGGY]    final  double  n  =  getSampleSize();  return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	294	294	1	replace	final  double  dx  =  getDecimalVariance();	      final    double    k    =    getDecimalVariance();    	non-compiled	[CE]  cannot  find  symbol	482	None
1814	[BUG]  [BUGGY]  final  int  k  =  getDecimalVariance();  [CE]  cannot  find  symbol  [CONTEXT]    protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();  final  double  m  =  getNumberOfSuccesses();    [BUGGY]  final  int  k  =  getDecimalVariance();  [BUGGY]    final  double  n  =  getSampleSize();  return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	294	294	1	replace	final  int  k  =  getDecimalVariance();	      final    double    k    =    getDecimalVariance();    	non-compiled	[CE]  cannot  find  symbol	482	None
1821	[BUG]  [BUGGY]  final  double  n  =  getSize();  [CE]  cannot  find  symbol  [CONTEXT]    protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();  final  double  m  =  getNumberOfSuccesses();    [BUGGY]  final  double  n  =  getSize();  [BUGGY]    final  double  n  =  getSampleSize();  return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	294	294	1	replace	final  double  n  =  getSize();	      final    double    N    =    getSize();    	non-compiled	[CE]  cannot  find  symbol	55	None
1831	[BUG]  [BUGGY]  [FE]  AssertionError  testMath1021  [CONTEXT]    public  int  getSupportLowerBound()  {    [BUGGY]      int  populationSize  =  getPopulationSize();  int  numberOfSuccesses  =  getNumberOfSuccesses();  [BUGGY]    return  FastMath.max(0,        getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  }  [CLASS]  HypergeometricDistribution  [METHOD]  getSupportLowerBound  [RETURN_TYPE]  int  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	308	309	1	add	        int    populationSize    =    getPopulationSize();    int  numberOfSuccesses  =  getNumberOfSuccesses();	  	compilable	  [FE]  AssertionError  testMath1021	63	1
1832	[BUG]  [BUGGY]      int  populationSize  =  getPopulationSize();  int  numberOfSuccesses  =  getNumberOfSuccesses();  [FE]  AssertionError  testMath1021  [CONTEXT]    public  int  getSupportLowerBound()  {    [BUGGY]      int  populationSize  =  getPopulationSize();  int  numberOfSuccesses  =  getNumberOfSuccesses();  [BUGGY]    return  FastMath.max(0,        getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  }  [CLASS]  HypergeometricDistribution  [METHOD]  getSupportLowerBound  [RETURN_TYPE]  int  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	308	309	1	replace	        int    populationSize    =    getPopulationSize();    int  numberOfSuccesses  =  getNumberOfSuccesses();	  	compilable	  [FE]  AssertionError  testMath1021	63	1
1832	[BUG]  [BUGGY]      int  populationSize  =  getPopulationSize();  int  populationSize  =  getNumberOfSuccesses();  [CE]  variable  populationSize  is  already  defined  in  method  getSupportLowerBound()  [CONTEXT]    public  int  getSupportLowerBound()  {    [BUGGY]      int  populationSize  =  getPopulationSize();  int  populationSize  =  getNumberOfSuccesses();  [BUGGY]    return  FastMath.max(0,        getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  }  [CLASS]  HypergeometricDistribution  [METHOD]  getSupportLowerBound  [RETURN_TYPE]  int  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	308	309	1	replace	        int    populationSize    =    getPopulationSize();    int  populationSize  =  getNumberOfSuccesses();	  	non-compiled	[CE]  variable  populationSize  is  already  defined  in  method  getSupportLowerBound()	63	None
1833	[BUG]  [BUGGY]  [FE]  AssertionError  testMath1021  [CONTEXT]    public  int  getSupportLowerBound()  {    [BUGGY]      int  populationSize  =  getPopulationSize();  int  numberOfSuccesses  =  getNumberOfSuccesses()  -  getPopulationSize();  [BUGGY]    return  FastMath.max(0,        getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  }  [CLASS]  HypergeometricDistribution  [METHOD]  getSupportLowerBound  [RETURN_TYPE]  int  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	308	309	1	add	        int    populationSize    =    getPopulationSize();    int  numberOfSuccesses  =  getNumberOfSuccesses()  -  getPopulationSize();	  	compilable	  [FE]  AssertionError  testMath1021	63	1
1834	[BUG]  [BUGGY]      int  populationSize  =  getPopulationSize();  int  numberOfSuccesses  =  getNumberOfSuccesses()  -  getPopulationSize();  [FE]  AssertionError  testMath1021  [CONTEXT]    public  int  getSupportLowerBound()  {    [BUGGY]      int  populationSize  =  getPopulationSize();  int  numberOfSuccesses  =  getNumberOfSuccesses()  -  getPopulationSize();  [BUGGY]    return  FastMath.max(0,        getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  }  [CLASS]  HypergeometricDistribution  [METHOD]  getSupportLowerBound  [RETURN_TYPE]  int  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	308	309	1	replace	        int    populationSize    =    getPopulationSize();    int  numberOfSuccesses  =  getNumberOfSuccesses()  -  getPopulationSize();	  	compilable	  [FE]  AssertionError  testMath1021	63	1
1834	[BUG]  [BUGGY]      int  populationSize  =  getPopulationSize();  int  populationSize  =  getNumberOfSuccesses()  -  getPopulationSize();  [CE]  variable  populationSize  is  already  defined  in  method  getSupportLowerBound()  [CONTEXT]    public  int  getSupportLowerBound()  {    [BUGGY]      int  populationSize  =  getPopulationSize();  int  populationSize  =  getNumberOfSuccesses()  -  getPopulationSize();  [BUGGY]    return  FastMath.max(0,        getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  }  [CLASS]  HypergeometricDistribution  [METHOD]  getSupportLowerBound  [RETURN_TYPE]  int  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	308	309	1	replace	        int    populationSize    =    getPopulationSize();    int  populationSize  =  getNumberOfSuccesses()  -  getPopulationSize();	  	non-compiled	[CE]  variable  populationSize  is  already  defined  in  method  getSupportLowerBound()	63	None
1835	[BUG]  [BUGGY]  [FE]  AssertionError  testMath1021  [CONTEXT]    public  int  getSupportLowerBound()  {    [BUGGY]      int  populationSize  =  getPopulationSize();  int  n  =  getNumberOfSuccesses();  [BUGGY]    return  FastMath.max(0,        getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  }  [CLASS]  HypergeometricDistribution  [METHOD]  getSupportLowerBound  [RETURN_TYPE]  int  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	308	309	1	add	        int    populationSize    =    getPopulationSize();    int  n  =  getNumberOfSuccesses();	  	compilable	  [FE]  AssertionError  testMath1021	63	1
1836	[BUG]  [BUGGY]      int  populationSize  =  getPopulationSize();  int  n  =  getNumberOfSuccesses();  [FE]  AssertionError  testMath1021  [CONTEXT]    public  int  getSupportLowerBound()  {    [BUGGY]      int  populationSize  =  getPopulationSize();  int  n  =  getNumberOfSuccesses();  [BUGGY]    return  FastMath.max(0,        getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  }  [CLASS]  HypergeometricDistribution  [METHOD]  getSupportLowerBound  [RETURN_TYPE]  int  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	308	309	1	replace	        int    populationSize    =    getPopulationSize();    int  n  =  getNumberOfSuccesses();	  	compilable	  [FE]  AssertionError  testMath1021	63	1
1841	[BUG]  [BUGGY]  return  FastMath.max(0,  getVariance()  +  getNumberOfSuccesses()  -  getPopulationSize());  [CE]  cannot  find  symbol  [CONTEXT]    public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {    [BUGGY]  return  FastMath.max(0,  getVariance()  +  getNumberOfSuccesses()  -  getPopulationSize());  [BUGGY]    numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	280	280	1	replace	return  FastMath.max(0,  getVariance()  +  getNumberOfSuccesses()  -  getPopulationSize());	  numericalVariance    =    calculateNumericalVariance()    /(numericalVarianceIsCalculated));    	non-compiled	[CE]  cannot  find  symbol	34	None
1842	[BUG]  [BUGGY]  return  FastMath.max(10,  getVariance()  +  getNumberOfSuccesses()  -  getPopulationSize());  [CE]  cannot  find  symbol  [CONTEXT]    public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {    [BUGGY]  return  FastMath.max(10,  getVariance()  +  getNumberOfSuccesses()  -  getPopulationSize());  [BUGGY]    numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	280	280	1	replace	return  FastMath.max(10,  getVariance()  +  getNumberOfSuccesses()  -  getPopulationSize());	  numericalVariance    =    calculateNumericalVariance()    /(numericalVarianceIsCalculated));    	non-compiled	[CE]  cannot  find  symbol	34	None
1843	[BUG]  [BUGGY]  return  FASTMath.max(0,  getVariance()  +  getNumberOfSuccesses()  -  getPopulationSize());  [CE]  cannot  find  symbol  [CONTEXT]    public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {    [BUGGY]  return  FASTMath.max(0,  getVariance()  +  getNumberOfSuccesses()  -  getPopulationSize());  [BUGGY]    numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	280	280	1	replace	return  FASTMath.max(0,  getVariance()  +  getNumberOfSuccesses()  -  getPopulationSize());	  numericalVariance    =    calculateNumericalVariance()    /(numericalVarianceIsCalculated));    	non-compiled	[CE]  cannot  find  symbol	34	None
1844	[BUG]  [BUGGY]  return  FastMath.max(1,  getVariance()  +  getNumberOfSuccesses()  -  getPopulationSize());  [CE]  cannot  find  symbol  [CONTEXT]    public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {    [BUGGY]  return  FastMath.max(1,  getVariance()  +  getNumberOfSuccesses()  -  getPopulationSize());  [BUGGY]    numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	280	280	1	replace	return  FastMath.max(1,  getVariance()  +  getNumberOfSuccesses()  -  getPopulationSize());	  numericalVariance    =    calculateNumericalVariance()    /(numericalVarianceIsCalculated));    	non-compiled	[CE]  cannot  find  symbol	34	None
1851	[BUG]  [BUGGY]  final  int  k  =  getPopulationSize();  [CE]  cannot  find  symbol  N  [CONTEXT]    protected  double  calculateNumericalVariance()  {    [BUGGY]  final  int  k  =  getPopulationSize();  [BUGGY]    final  double  N  =  getPopulationSize();  final  double  m  =  getNumberOfSuccesses();  final  double  n  =  getSampleSize();  return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	292	292	1	replace	final  int  k  =  getPopulationSize();	      final    int    k    =    getNumberOfSuccesses();    	non-compiled	[CE]  cannot  find  symbol  N	213	None
1854	[BUG]  [BUGGY]  final  int  k  =  getSize();  [CE]  cannot  find  symbol  [CONTEXT]    protected  double  calculateNumericalVariance()  {    [BUGGY]  final  int  k  =  getSize();  [BUGGY]    final  double  N  =  getPopulationSize();  final  double  m  =  getNumberOfSuccesses();  final  double  n  =  getSampleSize();  return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	292	292	1	replace	final  int  k  =  getSize();	      final    int    k    =    getNumberOfSuccesses();    	non-compiled	[CE]  cannot  find  symbol	213	None
1861	[BUG]  [BUGGY]  return  FastMath.max(0,  getNumberOfSuccesses()  +  getSampleSize()  -  getPopulationSize());  double  numericalVariance  =  getNumberOfSuccesses();  [CE]  unreachable  statement  [CONTEXT]    public  int  getSupportLowerBound()  {    [BUGGY]  return  FastMath.max(0,  getNumberOfSuccesses()  +  getSampleSize()  -  getPopulationSize());  double  numericalVariance  =  getNumberOfSuccesses();  [BUGGY]    getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  }  [CLASS]  HypergeometricDistribution  [METHOD]  getSupportLowerBound  [RETURN_TYPE]  int  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	308	309	1	replace	return    FastMath.max(0,    getNumberOfSuccesses()    +    getSampleSize()    -    getPopulationSize());    double  numericalVariance  =  getNumberOfSuccesses();	  	non-compiled	[CE]  unreachable  statement	2	None
1862	[BUG]  [BUGGY]  return  FastMath.max(0,  getNumberOfSuccesses()  +  getSampleSize()  -  getPopulationSize());  double  numericalVariance  =  getNumberOfSuccesses()  -  1;  [CE]  unreachable  statement  [CONTEXT]    public  int  getSupportLowerBound()  {    [BUGGY]  return  FastMath.max(0,  getNumberOfSuccesses()  +  getSampleSize()  -  getPopulationSize());  double  numericalVariance  =  getNumberOfSuccesses()  -  1;  [BUGGY]    getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  }  [CLASS]  HypergeometricDistribution  [METHOD]  getSupportLowerBound  [RETURN_TYPE]  int  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	308	309	1	replace	return    FastMath.max(0,    getNumberOfSuccesses()    +    getSampleSize()    -    getPopulationSize());    double  numericalVariance  =  getNumberOfSuccesses()  -  1;	  	non-compiled	[CE]  unreachable  statement	2	None
1863	[BUG]  [BUGGY]  return  FastMath.max(0,  getNumberOfSuccesses()  +  getSampleSize()  -  getPopulationSize());  double  numericalVariance  =  getNumberOfSuccesses()  /  2.0;  [CE]  unreachable  statement  [CONTEXT]    public  int  getSupportLowerBound()  {    [BUGGY]  return  FastMath.max(0,  getNumberOfSuccesses()  +  getSampleSize()  -  getPopulationSize());  double  numericalVariance  =  getNumberOfSuccesses()  /  2.0;  [BUGGY]    getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  }  [CLASS]  HypergeometricDistribution  [METHOD]  getSupportLowerBound  [RETURN_TYPE]  int  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	308	309	1	replace	return    FastMath.max(0,    getNumberOfSuccesses()    +    getSampleSize()    -    getPopulationSize());    double  numericalVariance  =  getNumberOfSuccesses()  /  2.0;	  	non-compiled	[CE]  unreachable  statement	2	None
1864	[BUG]  [BUGGY]  return  FastMath.max(0,  getNumberOfSuccesses()  +  getSampleSize()  -  getPopulationSize());  double  numericalVariance  =  getNumberOfSuccesses()  /  2;  [CE]  unreachable  statement  [CONTEXT]    public  int  getSupportLowerBound()  {    [BUGGY]  return  FastMath.max(0,  getNumberOfSuccesses()  +  getSampleSize()  -  getPopulationSize());  double  numericalVariance  =  getNumberOfSuccesses()  /  2;  [BUGGY]    getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  }  [CLASS]  HypergeometricDistribution  [METHOD]  getSupportLowerBound  [RETURN_TYPE]  int  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	308	309	1	replace	return    FastMath.max(0,    getNumberOfSuccesses()    +    getSampleSize()    -    getPopulationSize());    double  numericalVariance  =  getNumberOfSuccesses()  /  2;	  	non-compiled	[CE]  unreachable  statement	2	None
1865	[BUG]  [BUGGY]  return  FastMath.max(0,  getNumberOfSuccesses()  +  getSampleSize()  -  getPopulationSize());  double  numericalVariance  =  getNumberOfSuccesses()  *  2;  [CE]  unreachable  statement  [CONTEXT]    public  int  getSupportLowerBound()  {    [BUGGY]  return  FastMath.max(0,  getNumberOfSuccesses()  +  getSampleSize()  -  getPopulationSize());  double  numericalVariance  =  getNumberOfSuccesses()  *  2;  [BUGGY]    getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  }  [CLASS]  HypergeometricDistribution  [METHOD]  getSupportLowerBound  [RETURN_TYPE]  int  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	308	309	1	replace	return    FastMath.max(0,    getNumberOfSuccesses()    +    getSampleSize()    -    getPopulationSize());    double  numericalVariance  =  getNumberOfSuccesses()  *  2;	  	non-compiled	[CE]  unreachable  statement	2	None
1872	[BUG]  [BUGGY]  final  double  N  =  getNumberOfHyphens()  -  1;  [CE]  cannot  find  symbol  [CONTEXT]    protected  double  calculateNumericalVariance()  {    [BUGGY]  final  double  N  =  getNumberOfHyphens()  -  1;  [BUGGY]    final  double  m  =  getNumberOfSuccesses();  final  double  n  =  getSampleSize();  return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	292	292	1	replace	final  double  N  =  getNumberOfHyphens()  -  1;	  final    double    N    =    getNumberOfHyphens();    	non-compiled	[CE]  cannot  find  symbol	283	None
1873	[BUG]  [BUGGY]  final  double  N  =  getNumberOfHyphens().doubleValue;  [CE]  cannot  find  symbol  [CONTEXT]    protected  double  calculateNumericalVariance()  {    [BUGGY]  final  double  N  =  getNumberOfHyphens().doubleValue;  [BUGGY]    final  double  m  =  getNumberOfSuccesses();  final  double  n  =  getSampleSize();  return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	292	292	1	replace	final  double  N  =  getNumberOfHyphens().doubleValue;	  final    double    N    =    getNumberOfHyphens();    	non-compiled	[CE]  cannot  find  symbol	283	None
1874	[BUG]  [BUGGY]  final  double  n  =  getNumberOfHyphens();  [CE]  cannot  find  symbol  [CONTEXT]    protected  double  calculateNumericalVariance()  {    [BUGGY]  final  double  n  =  getNumberOfHyphens();  [BUGGY]    final  double  m  =  getNumberOfSuccesses();  final  double  n  =  getSampleSize();  return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	292	292	1	replace	final  double  n  =  getNumberOfHyphens();	  final    double    N    =    getNumberOfHyphens();    	non-compiled	[CE]  cannot  find  symbol	283	None
1882	[BUG]  [BUGGY]  final  int  k  =  getKind();  [CE]  cannot  find  symbol  [CONTEXT]    protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();    [BUGGY]  final  int  k  =  getKind();  [BUGGY]    final  double  n  =  getSampleSize();  return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	293	293	1	replace	final  int  k  =  getKind();	  final    double    m    =    getNumberOfSuccesses()    *    2;    	non-compiled	[CE]  cannot  find  symbol	184	None
1883	[BUG]  [BUGGY]  final  double  dx  =  getKind();  [CE]  cannot  find  symbol  [CONTEXT]    protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();    [BUGGY]  final  double  dx  =  getKind();  [BUGGY]    final  double  n  =  getSampleSize();  return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	293	293	1	replace	final  double  dx  =  getKind();	  final    double    m    =    getNumberOfSuccesses()    *    2;    	non-compiled	[CE]  cannot  find  symbol	184	None
1884	[BUG]  [BUGGY]  final  double  n  =  getKind();  [CE]  cannot  find  symbol  [CONTEXT]    protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();    [BUGGY]  final  double  n  =  getKind();  [BUGGY]    final  double  n  =  getSampleSize();  return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	293	293	1	replace	final  double  n  =  getKind();	  final    double    m    =    getNumberOfSuccesses()    *    2;    	non-compiled	[CE]  cannot  find  symbol	184	None
1891	[BUG]  [BUGGY]  [FE]  AssertionError  testMoments  [CONTEXT]    protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();  final  double  m  =  getNumberOfSuccesses();    [BUGGY]  int  n  =  getPopulationSize();  [BUGGY]    return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	294	294	1	add	int  n  =  getPopulationSize();	  final    double    n    =    getDecimalSize();    	compilable	  [FE]  AssertionError  testMoments	83	1
1892	[BUG]  [BUGGY]  int  n  =  getPopulationSize();  [FE]  AssertionError  testMoments  [CONTEXT]    protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();  final  double  m  =  getNumberOfSuccesses();    [BUGGY]  int  n  =  getPopulationSize();  [BUGGY]    return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	294	294	1	replace	int  n  =  getPopulationSize();	  final    double    n    =    getDecimalSize();    	compilable	  [FE]  AssertionError  testMoments	83	1
1901	[BUG]  [BUGGY]  [FE]  AssertionError  testMath1021  [CONTEXT]    protected  double  calculateNumericalVariance()  {    [BUGGY]      final  int  k  =  getNumberOfSuccesses();  final  int  dx  =  getNumberOfSuccesses();  [BUGGY]    final  double  N  =  getPopulationSize();  final  double  m  =  getNumberOfSuccesses();  final  double  n  =  getSampleSize();  return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	292	292	1	add	        final    int    k    =    getNumberOfSuccesses();    final  int  dx  =  getNumberOfSuccesses();	  	compilable	  [FE]  AssertionError  testMath1021	212	1
1902	[BUG]  [BUGGY]      final  int  k  =  getNumberOfSuccesses();  final  int  dx  =  getNumberOfSuccesses();  [FE]  AssertionError  testMath1021  [CONTEXT]    protected  double  calculateNumericalVariance()  {    [BUGGY]      final  int  k  =  getNumberOfSuccesses();  final  int  dx  =  getNumberOfSuccesses();  [BUGGY]    final  double  N  =  getPopulationSize();  final  double  m  =  getNumberOfSuccesses();  final  double  n  =  getSampleSize();  return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	292	292	1	replace	        final    int    k    =    getNumberOfSuccesses();    final  int  dx  =  getNumberOfSuccesses();	  	compilable	  [FE]  AssertionError  testMath1021	212	1
1902	[BUG]  [BUGGY]      final  int  k  =  getNumberOfSuccesses();  final  int  n  =  getNumberOfSuccesses();  [CE]  variable  n  is  already  defined  in  method  calculateNumericalVariance()  [CONTEXT]    protected  double  calculateNumericalVariance()  {    [BUGGY]      final  int  k  =  getNumberOfSuccesses();  final  int  n  =  getNumberOfSuccesses();  [BUGGY]    final  double  N  =  getPopulationSize();  final  double  m  =  getNumberOfSuccesses();  final  double  n  =  getSampleSize();  return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	292	292	1	replace	        final    int    k    =    getNumberOfSuccesses();    final  int  n  =  getNumberOfSuccesses();	  	non-compiled	[CE]  variable  n  is  already  defined  in  method  calculateNumericalVariance()	212	None
1903	[BUG]  [BUGGY]      final  int  k  =  getNumberOfSuccesses();  final  int  N  =  getNumberOfSuccesses();  [CE]  variable  N  is  already  defined  in  method  calculateNumericalVariance()  [CONTEXT]    protected  double  calculateNumericalVariance()  {    [BUGGY]      final  int  k  =  getNumberOfSuccesses();  final  int  N  =  getNumberOfSuccesses();  [BUGGY]    final  double  N  =  getPopulationSize();  final  double  m  =  getNumberOfSuccesses();  final  double  n  =  getSampleSize();  return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	292	292	1	replace	        final    int    k    =    getNumberOfSuccesses();    final  int  N  =  getNumberOfSuccesses();	  	non-compiled	[CE]  variable  N  is  already  defined  in  method  calculateNumericalVariance()	212	None
1904	[BUG]  [BUGGY]      final  int  k  =  getNumberOfSuccesses();  final  int  dx  =  getNumericalSize();  [CE]  cannot  find  symbol  [CONTEXT]    protected  double  calculateNumericalVariance()  {    [BUGGY]      final  int  k  =  getNumberOfSuccesses();  final  int  dx  =  getNumericalSize();  [BUGGY]    final  double  N  =  getPopulationSize();  final  double  m  =  getNumberOfSuccesses();  final  double  n  =  getSampleSize();  return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	292	292	1	replace	        final    int    k    =    getNumberOfSuccesses();    final  int  dx  =  getNumericalSize();	  	non-compiled	[CE]  cannot  find  symbol	212	None
1905	[BUG]  [BUGGY]      final  int  k  =  getNumberOfSuccesses();  final  int  dx  =  getDateTimeZone();  [CE]  cannot  find  symbol  [CONTEXT]    protected  double  calculateNumericalVariance()  {    [BUGGY]      final  int  k  =  getNumberOfSuccesses();  final  int  dx  =  getDateTimeZone();  [BUGGY]    final  double  N  =  getPopulationSize();  final  double  m  =  getNumberOfSuccesses();  final  double  n  =  getSampleSize();  return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	292	292	1	replace	        final    int    k    =    getNumberOfSuccesses();    final  int  dx  =  getDateTimeZone();	  	non-compiled	[CE]  cannot  find  symbol	212	None
1912	[BUG]  [BUGGY]  numericalVariance  =  getNumberOfSuccesses()  /(numberOfSuccesses  -  getSampleSize());  [CE]  cannot  find  symbol  m  [CONTEXT]    protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();    [BUGGY]  numericalVariance  =  getNumberOfSuccesses()  /(numberOfSuccesses  -  getSampleSize());  [BUGGY]    final  double  m  =  getNumberOfSuccesses();  final  double  n  =  getSampleSize();  return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	293	293	1	replace	numericalVariance  =  getNumberOfSuccesses()  /(numberOfSuccesses  -  getSampleSize());	      final    double    N    =    getSize();    	non-compiled	[CE]  cannot  find  symbol  m	145	None
1913	[BUG]  [BUGGY]  numericalVariance  =  getNumberOfSuccesses()  *(populationSize  -  getSampleSize());  [CE]  cannot  find  symbol  m  [CONTEXT]    protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();    [BUGGY]  numericalVariance  =  getNumberOfSuccesses()  *(populationSize  -  getSampleSize());  [BUGGY]    final  double  m  =  getNumberOfSuccesses();  final  double  n  =  getSampleSize();  return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	293	293	1	replace	numericalVariance  =  getNumberOfSuccesses()  *(populationSize  -  getSampleSize());	      final    double    N    =    getSize();    	non-compiled	[CE]  cannot  find  symbol  m	145	None
1914	[BUG]  [BUGGY]  numericalVariance  =  getSampleSize()  *(numberOfSuccesses  -  getSampleSize());  [CE]  cannot  find  symbol  m  [CONTEXT]    protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();    [BUGGY]  numericalVariance  =  getSampleSize()  *(numberOfSuccesses  -  getSampleSize());  [BUGGY]    final  double  m  =  getNumberOfSuccesses();  final  double  n  =  getSampleSize();  return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	293	293	1	replace	numericalVariance  =  getSampleSize()  *(numberOfSuccesses  -  getSampleSize());	      final    double    N    =    getSize();    	non-compiled	[CE]  cannot  find  symbol  m	145	None
1932	[BUG]  [BUGGY]  getSupportLowerBound();  [CE]  missing  return  statement  [CONTEXT]    public  int  getSupportLowerBound()  {    [BUGGY]  getSupportLowerBound();  [BUGGY]    return  FastMath.max(0,        getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  }  [CLASS]  HypergeometricDistribution  [METHOD]  getSupportLowerBound  [RETURN_TYPE]  int  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	308	309	1	replace	getSupportLowerBound();	      getPopulationSize();    	non-compiled	[CE]  missing  return  statement	274	None
1933	[BUG]  [BUGGY]  getSupportedLowerBound();  [CE]  cannot  find  symbol  [CONTEXT]    public  int  getSupportLowerBound()  {    [BUGGY]  getSupportedLowerBound();  [BUGGY]    return  FastMath.max(0,        getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  }  [CLASS]  HypergeometricDistribution  [METHOD]  getSupportLowerBound  [RETURN_TYPE]  int  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	308	309	1	replace	getSupportedLowerBound();	      getPopulationSize();    	non-compiled	[CE]  cannot  find  symbol	274	None
1944	[BUG]  [BUGGY]  if(numericalVarianceIsCalculated)  {  if(!numericalVarianceIsCalculated)  {  return  false;  }  [CE]  illegal  start  of  expression  [CONTEXT]    public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {    [BUGGY]  if(numericalVarianceIsCalculated)  {  if(!numericalVarianceIsCalculated)  {  return  false;  }  [BUGGY]    numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	280	280	1	replace	if(numericalVarianceIsCalculated)  {  if(!numericalVarianceIsCalculated)  {  return  false;  }	      if(!numericalVarianceIsCalculated)    {    if(!numericalVarianceIsCalculated)    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	43	None
1953	[BUG]  [BUGGY]  if(numericalVarianceIsCalculated)  {  if(!numericalVarianceIsCalculated)  {  return  0;  }  [CE]  illegal  start  of  expression  [CONTEXT]    public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {    [BUGGY]  if(numericalVarianceIsCalculated)  {  if(!numericalVarianceIsCalculated)  {  return  0;  }  [BUGGY]    numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	280	280	1	replace	if(numericalVarianceIsCalculated)  {  if(!numericalVarianceIsCalculated)  {  return  0;  }	      if(!numericalVarianceIsCalculated)    {    if(!numericalVarianceIsCalculated)    {    return    0;    }    	non-compiled	[CE]  illegal  start  of  expression	41	None
1954	[BUG]  [BUGGY]  if(!numericalVarianceIsCalculated)  {  if(!numericalVarianceIsCalculated)  {  return  1;  }  [CE]  illegal  start  of  expression  [CONTEXT]    public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {    [BUGGY]  if(!numericalVarianceIsCalculated)  {  if(!numericalVarianceIsCalculated)  {  return  1;  }  [BUGGY]    numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	280	280	1	replace	if(!numericalVarianceIsCalculated)  {  if(!numericalVarianceIsCalculated)  {  return  1;  }	      if(!numericalVarianceIsCalculated)    {    if(!numericalVarianceIsCalculated)    {    return    0;    }    	non-compiled	[CE]  illegal  start  of  expression	41	None
1961	[BUG]  [BUGGY]  double  getNumberOfSuccesses();  if(getNumberOfSuccesses()  >  1)  {  return  getNumberOfSuccesses()  *  getPopulationOfSize()  [CE]  ';'  expected  [CONTEXT]    public  double  getNumericalMean()  {    [BUGGY]  double  getNumberOfSuccesses();  if(getNumberOfSuccesses()  >  1)  {  return  getNumberOfSuccesses()  *  getPopulationOfSize()  [BUGGY]    return  (double)  (getSampleSize()  *  getNumberOfSuccesses())  /  (double)  getPopulationSize();  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalMean  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	268	268	1	replace	double  getNumberOfSuccesses();  if(getNumberOfSuccesses()  >  1)  {  return  getNumberOfSuccesses()  *  getPopulationOfSize()	      int    k    =    getNumberOfSuccesses();    	non-compiled	[CE]  ';'  expected	363	None
1962	[BUG]  [BUGGY]  if(getNumberOfSuccesses()  >  0)  {  double  getNumberOfSuccesses();  if(getNumberOfSuccesses()  >  1)  {  return  getNumberOfSuccesses()  *  getPopulationOfSize()  [CE]  ';'  expected  [CONTEXT]    public  double  getNumericalMean()  {    [BUGGY]  if(getNumberOfSuccesses()  >  0)  {  double  getNumberOfSuccesses();  if(getNumberOfSuccesses()  >  1)  {  return  getNumberOfSuccesses()  *  getPopulationOfSize()  [BUGGY]    return  (double)  (getSampleSize()  *  getNumberOfSuccesses())  /  (double)  getPopulationSize();  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalMean  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	268	268	1	replace	if(getNumberOfSuccesses()  >  0)  {  double  getNumberOfSuccesses();  if(getNumberOfSuccesses()  >  1)  {  return  getNumberOfSuccesses()  *  getPopulationOfSize()	      int    k    =    getNumberOfSuccesses();    	non-compiled	[CE]  ';'  expected	363	None
1963	[BUG]  [BUGGY]  if(getNumberOfSuccesses()  >  0)  {  double  getNumberOfSuccesses();  if(getNumberOfSuccesses()  >  1)  {  return  getNumberOfSuccesses()  *  getPopulationOf  [CE]  ';'  expected  [CONTEXT]    public  double  getNumericalMean()  {    [BUGGY]  if(getNumberOfSuccesses()  >  0)  {  double  getNumberOfSuccesses();  if(getNumberOfSuccesses()  >  1)  {  return  getNumberOfSuccesses()  *  getPopulationOf  [BUGGY]    return  (double)  (getSampleSize()  *  getNumberOfSuccesses())  /  (double)  getPopulationSize();  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalMean  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	268	268	1	replace	if(getNumberOfSuccesses()  >  0)  {  double  getNumberOfSuccesses();  if(getNumberOfSuccesses()  >  1)  {  return  getNumberOfSuccesses()  *  getPopulationOf	      int    k    =    getNumberOfSuccesses();    	non-compiled	[CE]  ';'  expected	363	None
1964	[BUG]  [BUGGY]  if(getPopulationSize()  >  0)  {  double  getNumberOfSuccesses();  if(getNumberOfSuccesses()  >  1)  {  return  getNumberOfSuccesses()  *  getNumberOf  [CE]  ';'  expected  [CONTEXT]    public  double  getNumericalMean()  {    [BUGGY]  if(getPopulationSize()  >  0)  {  double  getNumberOfSuccesses();  if(getNumberOfSuccesses()  >  1)  {  return  getNumberOfSuccesses()  *  getNumberOf  [BUGGY]    return  (double)  (getSampleSize()  *  getNumberOfSuccesses())  /  (double)  getPopulationSize();  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalMean  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	268	268	1	replace	if(getPopulationSize()  >  0)  {  double  getNumberOfSuccesses();  if(getNumberOfSuccesses()  >  1)  {  return  getNumberOfSuccesses()  *  getNumberOf	      int    k    =    getNumberOfSuccesses();    	non-compiled	[CE]  ';'  expected	363	None
1972	[BUG]  [BUGGY]  getNumberOfSuccesses()  /  2.0;  [CE]  not  a  statement  [CONTEXT]    public  double  getNumericalMean()  {    [BUGGY]  getNumberOfSuccesses()  /  2.0;  [BUGGY]    return  (double)  (getSampleSize()  *  getNumberOfSuccesses())  /  (double)  getPopulationSize();  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalMean  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	268	268	1	replace	getNumberOfSuccesses()  /  2.0;	      getNumberOfSuccesses();    	non-compiled	[CE]  not  a  statement	422	None
1973	[BUG]  [BUGGY]  getNumberOfSuccesses()  *(getPopulationSize()  *  getNumberOfSuccesses());  [CE]  not  a  statement  [CONTEXT]    public  double  getNumericalMean()  {    [BUGGY]  getNumberOfSuccesses()  *(getPopulationSize()  *  getNumberOfSuccesses());  [BUGGY]    return  (double)  (getSampleSize()  *  getNumberOfSuccesses())  /  (double)  getPopulationSize();  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalMean  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	268	268	1	replace	getNumberOfSuccesses()  *(getPopulationSize()  *  getNumberOfSuccesses());	      getNumberOfSuccesses();    	non-compiled	[CE]  not  a  statement	422	None
1974	[BUG]  [BUGGY]  getNumberOfSuccesses()  +  1;  [CE]  not  a  statement  [CONTEXT]    public  double  getNumericalMean()  {    [BUGGY]  getNumberOfSuccesses()  +  1;  [BUGGY]    return  (double)  (getSampleSize()  *  getNumberOfSuccesses())  /  (double)  getPopulationSize();  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalMean  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	268	268	1	replace	getNumberOfSuccesses()  +  1;	      getNumberOfSuccesses();    	non-compiled	[CE]  not  a  statement	422	None
1984	[BUG]  [BUGGY]  if(!numericalVarianceIsCalculated)  {  if(!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumberOfSuccesses();  bodied  [CE]  illegal  start  of  expression  [CONTEXT]    public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {    [BUGGY]  if(!numericalVarianceIsCalculated)  {  if(!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumberOfSuccesses();  bodied  [BUGGY]    numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	280	280	1	replace	if(!numericalVarianceIsCalculated)  {  if(!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumberOfSuccesses();  bodied	      if(!numericalVarianceIsCalculated)    {    if(!numericalVarianceIsCalculated)    {    numericalVariance    =    calculateNumberOfSuccesses();    }    	non-compiled	[CE]  illegal  start  of  expression	42	None
1992	[BUG]  [BUGGY]  [FE]  AssertionError  testMoments  [CONTEXT]    public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();    [BUGGY]  numericalVariance  =  getPopulationSize();  [BUGGY]    numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	281	281	1	add	numericalVariance  =  getPopulationSize();	      numericalVariance    =    getNumberOfSuccesses();    	compilable	  [FE]  AssertionError  testMoments	322	1
1993	[BUG]  [BUGGY]  numericalVariance  =  getPopulationSize();  [FE]  AssertionError  testMoments  [CONTEXT]    public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();    [BUGGY]  numericalVariance  =  getPopulationSize();  [BUGGY]    numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	281	281	1	replace	numericalVariance  =  getPopulationSize();	      numericalVariance    =    getNumberOfSuccesses();    	compilable	  [FE]  AssertionError  testMoments	322	1
2002	[BUG]  [BUGGY]  if(numericalVarianceIsCalculated)  {  if(!numericalVarianceIsCalculated)  {  numericalVariance  =  null;  }  [CE]  illegal  start  of  expression  [CONTEXT]    public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }    [BUGGY]  if(numericalVarianceIsCalculated)  {  if(!numericalVarianceIsCalculated)  {  numericalVariance  =  null;  }  [BUGGY]    return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	283	283	1	replace	if(numericalVarianceIsCalculated)  {  if(!numericalVarianceIsCalculated)  {  numericalVariance  =  null;  }	      if(!numericalVarianceIsCalculated)    {    if(!numericalVarianceIsCalculated)    {    numericalVariance    =    null;    }    	non-compiled	[CE]  illegal  start  of  expression	102	None
2003	[BUG]  [BUGGY]  if(!numericalVarianceIsCalculated)  {  if(!numbericalVarianceIsCalculated)  {  numericalVariance  =  null;  }  [CE]  illegal  start  of  expression  [CONTEXT]    public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }    [BUGGY]  if(!numericalVarianceIsCalculated)  {  if(!numbericalVarianceIsCalculated)  {  numericalVariance  =  null;  }  [BUGGY]    return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	283	283	1	replace	if(!numericalVarianceIsCalculated)  {  if(!numbericalVarianceIsCalculated)  {  numericalVariance  =  null;  }	      if(!numericalVarianceIsCalculated)    {    if(!numericalVarianceIsCalculated)    {    numericalVariance    =    null;    }    	non-compiled	[CE]  illegal  start  of  expression	102	None
2004	[BUG]  [BUGGY]  if(!numbericalVarianceIsCalculated)  {  if(!numericalVarianceIsCalculated)  {  numericalVariance  =  null;  }  [CE]  illegal  start  of  expression  [CONTEXT]    public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }    [BUGGY]  if(!numbericalVarianceIsCalculated)  {  if(!numericalVarianceIsCalculated)  {  numericalVariance  =  null;  }  [BUGGY]    return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	283	283	1	replace	if(!numbericalVarianceIsCalculated)  {  if(!numericalVarianceIsCalculated)  {  numericalVariance  =  null;  }	      if(!numericalVarianceIsCalculated)    {    if(!numericalVarianceIsCalculated)    {    numericalVariance    =    null;    }    	non-compiled	[CE]  illegal  start  of  expression	102	None
2011	[BUG]  [BUGGY]  [FE]  AssertionError  testMoments  [CONTEXT]    public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();    [BUGGY]  numericalVariance  =  Math.abs(numberOfSuccesses  -  1);  [BUGGY]    numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	281	281	1	add	numericalVariance  =  Math.abs(numberOfSuccesses  -  1);	      numericalVariance    =    Math.abs(numberOfSuccesses);    	compilable	  [FE]  AssertionError  testMoments	326	1
2012	[BUG]  [BUGGY]  numericalVariance  =  Math.abs(numberOfSuccesses  -  1);  [FE]  AssertionError  testMoments  [CONTEXT]    public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();    [BUGGY]  numericalVariance  =  Math.abs(numberOfSuccesses  -  1);  [BUGGY]    numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	281	281	1	replace	numericalVariance  =  Math.abs(numberOfSuccesses  -  1);	      numericalVariance    =    Math.abs(numberOfSuccesses);    	compilable	  [FE]  AssertionError  testMoments	326	1
2013	[BUG]  [BUGGY]  [FE]  AssertionError  testMoments  [CONTEXT]    public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();    [BUGGY]  numericalVariance  =  Math.abs(numberOfSuccesses  +  1);  [BUGGY]    numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	281	281	1	add	numericalVariance  =  Math.abs(numberOfSuccesses  +  1);	      numericalVariance    =    Math.abs(numberOfSuccesses);    	compilable	  [FE]  AssertionError  testMoments	326	1
2014	[BUG]  [BUGGY]  numericalVariance  =  Math.abs(numberOfSuccesses  +  1);  [FE]  AssertionError  testMoments  [CONTEXT]    public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();    [BUGGY]  numericalVariance  =  Math.abs(numberOfSuccesses  +  1);  [BUGGY]    numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	281	281	1	replace	numericalVariance  =  Math.abs(numberOfSuccesses  +  1);	      numericalVariance    =    Math.abs(numberOfSuccesses);    	compilable	  [FE]  AssertionError  testMoments	326	1
2014	[BUG]  [BUGGY]  numericalVariance  =  Math.abs(numberOfSuccesses)>  0;  [CE]  incompatible  types  [CONTEXT]    public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();    [BUGGY]  numericalVariance  =  Math.abs(numberOfSuccesses)>  0;  [BUGGY]    numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	281	281	1	replace	numericalVariance  =  Math.abs(numberOfSuccesses)>  0;	      numericalVariance    =    Math.abs(numberOfSuccesses);    	non-compiled	[CE]  incompatible  types	326	None
2022	[BUG]  [BUGGY]  final  double  n  =  getKind();  [CE]  cannot  find  symbol  [CONTEXT]    protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();  final  double  m  =  getNumberOfSuccesses();    [BUGGY]  final  double  n  =  getKind();  [BUGGY]    final  double  n  =  getSampleSize();  return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	294	294	1	replace	final  double  n  =  getKind();	      final    double    k    =    getKind();    	non-compiled	[CE]  cannot  find  symbol	301	None
2023	[BUG]  [BUGGY]  final  int  k  =  getKind();  [CE]  cannot  find  symbol  [CONTEXT]    protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();  final  double  m  =  getNumberOfSuccesses();    [BUGGY]  final  int  k  =  getKind();  [BUGGY]    final  double  n  =  getSampleSize();  return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	294	294	1	replace	final  int  k  =  getKind();	      final    double    k    =    getKind();    	non-compiled	[CE]  cannot  find  symbol	301	None
2024	[BUG]  [BUGGY]  final  double  dx  =  getKind();  [CE]  cannot  find  symbol  [CONTEXT]    protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();  final  double  m  =  getNumberOfSuccesses();    [BUGGY]  final  double  dx  =  getKind();  [BUGGY]    final  double  n  =  getSampleSize();  return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	294	294	1	replace	final  double  dx  =  getKind();	      final    double    k    =    getKind();    	non-compiled	[CE]  cannot  find  symbol	301	None
2035	[BUG]  [BUGGY]      if(!numericalVarianceIsCalculated)  {  if(!numericalVarianceIsCalculated)  {  return  null;  }  [CE]  illegal  start  of  expression  [CONTEXT]    public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {    [BUGGY]      if(!numericalVarianceIsCalculated)  {  if(!numericalVarianceIsCalculated)  {  return  null;  }  [BUGGY]    numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	280	280	1	replace	        if(!numericalVarianceIsCalculated)  {  if(!numericalVarianceIsCalculated)  {  return  null;  }	  	non-compiled	[CE]  illegal  start  of  expression	35	None
2043	[BUG]  [BUGGY]  if(!numericalVarianceIsCalculated)  {  if(!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumberOfSuccesses();  delt  [CE]  not  a  statement  [CONTEXT]    public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }    [BUGGY]  if(!numericalVarianceIsCalculated)  {  if(!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumberOfSuccesses();  delt  [BUGGY]    return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	283	283	1	replace	if(!numericalVarianceIsCalculated)  {  if(!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumberOfSuccesses();  delt	      if(!numericalVarianceIsCalculated)    {    if(!numericalVarianceIsCalculated)    {    numericalVariance    =    calculateNumberOfSuccesses();    }    	non-compiled	[CE]  not  a  statement	101	None
2044	[BUG]  [BUGGY]  if(!numericalVarianceIsCalculated)  {  if(!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumberOfSuccesses();  bodied  [CE]  not  a  statement  [CONTEXT]    public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }    [BUGGY]  if(!numericalVarianceIsCalculated)  {  if(!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumberOfSuccesses();  bodied  [BUGGY]    return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	283	283	1	replace	if(!numericalVarianceIsCalculated)  {  if(!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumberOfSuccesses();  bodied	      if(!numericalVarianceIsCalculated)    {    if(!numericalVarianceIsCalculated)    {    numericalVariance    =    calculateNumberOfSuccesses();    }    	non-compiled	[CE]  not  a  statement	101	None
2052	[BUG]  [BUGGY]  [FE]  AssertionError  testMoments  [CONTEXT]    public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {    [BUGGY]  final  double  n  =  getNumberOfSuccesses();  [BUGGY]    numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	280	280	1	add	final  double  n  =  getNumberOfSuccesses();	      if(!numericalVarianceIsCalculated)    {    if(!numericalVarianceIsCalculated)    {    return    0;    }    	compilable	  [FE]  AssertionError  testMoments	41	1
2053	[BUG]  [BUGGY]  final  double  n  =  getNumberOfSuccesses();  [FE]  AssertionError  testMoments  [CONTEXT]    public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {    [BUGGY]  final  double  n  =  getNumberOfSuccesses();  [BUGGY]    numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	280	280	1	replace	final  double  n  =  getNumberOfSuccesses();	      if(!numericalVarianceIsCalculated)    {    if(!numericalVarianceIsCalculated)    {    return    0;    }    	compilable	  [FE]  AssertionError  testMoments	41	1
2053	[BUG]  [BUGGY]  final  double  dx  =  getDimensions();  [CE]  cannot  find  symbol  [CONTEXT]    public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {    [BUGGY]  final  double  dx  =  getDimensions();  [BUGGY]    numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	280	280	1	replace	final  double  dx  =  getDimensions();	      if(!numericalVarianceIsCalculated)    {    if(!numericalVarianceIsCalculated)    {    return    0;    }    	non-compiled	[CE]  cannot  find  symbol	41	None
2062	[BUG]  [BUGGY]  final  double  k  =  getKnowNumberOfSuccesses();  [CE]  cannot  find  symbol  [CONTEXT]    protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();    [BUGGY]  final  double  k  =  getKnowNumberOfSuccesses();  [BUGGY]    final  double  m  =  getNumberOfSuccesses();  final  double  n  =  getSampleSize();  return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	293	293	1	replace	final  double  k  =  getKnowNumberOfSuccesses();	      final    double    k    =    getNumberOfSuccesses();    	non-compiled	[CE]  cannot  find  symbol	182	None
2064	[BUG]  [BUGGY]  final  double  k  =  getSize();  [CE]  cannot  find  symbol  [CONTEXT]    protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();    [BUGGY]  final  double  k  =  getSize();  [BUGGY]    final  double  m  =  getNumberOfSuccesses();  final  double  n  =  getSampleSize();  return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	293	293	1	replace	final  double  k  =  getSize();	      final    double    k    =    getNumberOfSuccesses();    	non-compiled	[CE]  cannot  find  symbol	182	None
2072	[BUG]  [BUGGY]  getNumberOfSuccesses()  /  Math.random();  [CE]  not  a  statement  [CONTEXT]    public  double  getNumericalMean()  {    [BUGGY]  getNumberOfSuccesses()  /  Math.random();  [BUGGY]    return  (double)  (getSampleSize()  *  getNumberOfSuccesses())  /  (double)  getPopulationSize();  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalMean  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	268	268	1	replace	getNumberOfSuccesses()  /  Math.random();	      getNumberOfSuccesses()    *    Math.random();    	non-compiled	[CE]  not  a  statement	425	None
2073	[BUG]  [BUGGY]  getNumberOfSuccesses()  *  Math.rint();  [CE]  not  a  statement  [CONTEXT]    public  double  getNumericalMean()  {    [BUGGY]  getNumberOfSuccesses()  *  Math.rint();  [BUGGY]    return  (double)  (getSampleSize()  *  getNumberOfSuccesses())  /  (double)  getPopulationSize();  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalMean  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	268	268	1	replace	getNumberOfSuccesses()  *  Math.rint();	      getNumberOfSuccesses()    *    Math.random();    	non-compiled	[CE]  not  a  statement	425	None
2074	[BUG]  [BUGGY]  getNumberOfSuccesses()  *  Math.PI  /(Math.random());  [CE]  not  a  statement  [CONTEXT]    public  double  getNumericalMean()  {    [BUGGY]  getNumberOfSuccesses()  *  Math.PI  /(Math.random());  [BUGGY]    return  (double)  (getSampleSize()  *  getNumberOfSuccesses())  /  (double)  getPopulationSize();  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalMean  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	268	268	1	replace	getNumberOfSuccesses()  *  Math.PI  /(Math.random());	      getNumberOfSuccesses()    *    Math.random();    	non-compiled	[CE]  not  a  statement	425	None
2081	[BUG]  [BUGGY]  final  double  m  =  getNumberOfSuccesses()  *  2;  final  double  k  =  getNumberOfDays();  [CE]  cannot  find  symbol  [CONTEXT]    protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();    [BUGGY]  final  double  m  =  getNumberOfSuccesses()  *  2;  final  double  k  =  getNumberOfDays();  [BUGGY]    final  double  n  =  getSampleSize();  return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	293	293	1	replace	final    double    m    =    getNumberOfSuccesses()    *    2;    final  double  k  =  getNumberOfDays();	  	non-compiled	[CE]  cannot  find  symbol	183	None
2082	[BUG]  [BUGGY]  final  double  m  =  getNumberOfSuccesses()  *  2;  final  double  dx  =  getNumberOfDays();  [CE]  cannot  find  symbol  [CONTEXT]    protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();    [BUGGY]  final  double  m  =  getNumberOfSuccesses()  *  2;  final  double  dx  =  getNumberOfDays();  [BUGGY]    final  double  n  =  getSampleSize();  return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	293	293	1	replace	final    double    m    =    getNumberOfSuccesses()    *    2;    final  double  dx  =  getNumberOfDays();	  	non-compiled	[CE]  cannot  find  symbol	183	None
2083	[BUG]  [BUGGY]  final  double  m  =  getNumberOfSuccesses()  *  2;  final  int  k  =  getNumberOfDays();  [CE]  cannot  find  symbol  [CONTEXT]    protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();    [BUGGY]  final  double  m  =  getNumberOfSuccesses()  *  2;  final  int  k  =  getNumberOfDays();  [BUGGY]    final  double  n  =  getSampleSize();  return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	293	293	1	replace	final    double    m    =    getNumberOfSuccesses()    *    2;    final  int  k  =  getNumberOfDays();	  	non-compiled	[CE]  cannot  find  symbol	183	None
2084	[BUG]  [BUGGY]  final  double  m  =  getNumberOfSuccesses()  *  2;  final  double  n  =  getNumberOfDays();  [CE]  cannot  find  symbol  [CONTEXT]    protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();    [BUGGY]  final  double  m  =  getNumberOfSuccesses()  *  2;  final  double  n  =  getNumberOfDays();  [BUGGY]    final  double  n  =  getSampleSize();  return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	293	293	1	replace	final    double    m    =    getNumberOfSuccesses()    *    2;    final  double  n  =  getNumberOfDays();	  	non-compiled	[CE]  cannot  find  symbol	183	None
2085	[BUG]  [BUGGY]  final  double  m  =  getNumberOfSuccesses()  *  2;  final  double  y  =  getNumberOfDays();  [CE]  cannot  find  symbol  [CONTEXT]    protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();    [BUGGY]  final  double  m  =  getNumberOfSuccesses()  *  2;  final  double  y  =  getNumberOfDays();  [BUGGY]    final  double  n  =  getSampleSize();  return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	293	293	1	replace	final    double    m    =    getNumberOfSuccesses()    *    2;    final  double  y  =  getNumberOfDays();	  	non-compiled	[CE]  cannot  find  symbol	183	None
2091	[BUG]  [BUGGY]  return  numericalVariance  *  numberOfSuccesses;  if(numberOfSuccesses  >  0)  {  if(!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumberOfSuccesses();  }  [CE]  illegal  start  of  expression  [CONTEXT]    public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }    [BUGGY]  return  numericalVariance  *  numberOfSuccesses;  if(numberOfSuccesses  >  0)  {  if(!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumberOfSuccesses();  }  [BUGGY]    }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	283	283	1	replace	return    numericalVariance    *    numberOfSuccesses;    if(numberOfSuccesses  >  0)  {  if(!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumberOfSuccesses();  }	  	non-compiled	[CE]  illegal  start  of  expression	342	None
2092	[BUG]  [BUGGY]  return  numericalVariance  *  numberOfSuccesses;  if(!numericalVarianceIsCalculated)  {  if(!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumberOfSuccesses();  }  [CE]  illegal  start  of  expression  [CONTEXT]    public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }    [BUGGY]  return  numericalVariance  *  numberOfSuccesses;  if(!numericalVarianceIsCalculated)  {  if(!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumberOfSuccesses();  }  [BUGGY]    }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	283	283	1	replace	return    numericalVariance    *    numberOfSuccesses;    if(!numericalVarianceIsCalculated)  {  if(!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumberOfSuccesses();  }	  	non-compiled	[CE]  illegal  start  of  expression	342	None
2093	[BUG]  [BUGGY]  return  numericalVariance  *  numberOfSuccesses;  if(numericalVariance!=  null)  {  if(!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumberOfSuccesses();  }  [CE]  illegal  start  of  expression  [CONTEXT]    public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }    [BUGGY]  return  numericalVariance  *  numberOfSuccesses;  if(numericalVariance!=  null)  {  if(!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumberOfSuccesses();  }  [BUGGY]    }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	283	283	1	replace	return    numericalVariance    *    numberOfSuccesses;    if(numericalVariance!=  null)  {  if(!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumberOfSuccesses();  }	  	non-compiled	[CE]  illegal  start  of  expression	342	None
2094	[BUG]  [BUGGY]  return  numericalVariance  *  numberOfSuccesses;  if(numericalVariance  >  0)  {  if(!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumberOfSuccesses();  }  [CE]  illegal  start  of  expression  [CONTEXT]    public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }    [BUGGY]  return  numericalVariance  *  numberOfSuccesses;  if(numericalVariance  >  0)  {  if(!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumberOfSuccesses();  }  [BUGGY]    }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	283	283	1	replace	return    numericalVariance    *    numberOfSuccesses;    if(numericalVariance  >  0)  {  if(!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumberOfSuccesses();  }	  	non-compiled	[CE]  illegal  start  of  expression	342	None
2095	[BUG]  [BUGGY]  return  numericalVariance  *  numberOfSuccesses;  if(numberOfSuccesses  >  0)  {  if(!numericalVarianceIsCalculated)  {  numericalVariance  =  null;  }  [CE]  illegal  start  of  expression  [CONTEXT]    public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }    [BUGGY]  return  numericalVariance  *  numberOfSuccesses;  if(numberOfSuccesses  >  0)  {  if(!numericalVarianceIsCalculated)  {  numericalVariance  =  null;  }  [BUGGY]    }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	283	283	1	replace	return    numericalVariance    *    numberOfSuccesses;    if(numberOfSuccesses  >  0)  {  if(!numericalVarianceIsCalculated)  {  numericalVariance  =  null;  }	  	non-compiled	[CE]  illegal  start  of  expression	342	None
2101	[BUG]  [BUGGY]  final  double  k  =  getKnowNumberOfSuccesses();  [CE]  cannot  find  symbol  [CONTEXT]    public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {    [BUGGY]  final  double  k  =  getKnowNumberOfSuccesses();  [BUGGY]    numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	280	280	1	replace	final  double  k  =  getKnowNumberOfSuccesses();	      if(!numericalVarianceIsCalculated)    {    if(!numericalVarianceIsCalculated)    {    return    false;    }    	non-compiled	[CE]  cannot  find  symbol	43	None
2103	[BUG]  [BUGGY]  final  double  k  =  getKnowledge();  [CE]  cannot  find  symbol  [CONTEXT]    public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {    [BUGGY]  final  double  k  =  getKnowledge();  [BUGGY]    numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	280	280	1	replace	final  double  k  =  getKnowledge();	      if(!numericalVarianceIsCalculated)    {    if(!numericalVarianceIsCalculated)    {    return    false;    }    	non-compiled	[CE]  cannot  find  symbol	43	None
2111	[BUG]  [BUGGY]      final  double  k  =  getNumberOfSuccesses();  final  double  k  =  getPopulationSize();  [CE]  variable  k  is  already  defined  in  method  calculateNumericalVariance()  [CONTEXT]    protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();  final  double  m  =  getNumberOfSuccesses();  final  double  n  =  getSampleSize();    [BUGGY]      final  double  k  =  getNumberOfSuccesses();  final  double  k  =  getPopulationSize();  [BUGGY]    return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	295	295	1	replace	        final    double    k    =    getNumberOfSuccesses();    final  double  k  =  getPopulationSize();	  	non-compiled	[CE]  variable  k  is  already  defined  in  method  calculateNumericalVariance()	383	None
2112	[BUG]  [BUGGY]      final  double  k  =  getNumberOfSuccesses();  final  double  n  =  getPopulationSize();  [CE]  variable  n  is  already  defined  in  method  calculateNumericalVariance()  [CONTEXT]    protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();  final  double  m  =  getNumberOfSuccesses();  final  double  n  =  getSampleSize();    [BUGGY]      final  double  k  =  getNumberOfSuccesses();  final  double  n  =  getPopulationSize();  [BUGGY]    return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	295	295	1	replace	        final    double    k    =    getNumberOfSuccesses();    final  double  n  =  getPopulationSize();	  	non-compiled	[CE]  variable  n  is  already  defined  in  method  calculateNumericalVariance()	383	None
2113	[BUG]  [BUGGY]      final  double  k  =  getNumberOfSuccesses();  final  double  k  =  getSampleSize();  [CE]  variable  k  is  already  defined  in  method  calculateNumericalVariance()  [CONTEXT]    protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();  final  double  m  =  getNumberOfSuccesses();  final  double  n  =  getSampleSize();    [BUGGY]      final  double  k  =  getNumberOfSuccesses();  final  double  k  =  getSampleSize();  [BUGGY]    return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	295	295	1	replace	        final    double    k    =    getNumberOfSuccesses();    final  double  k  =  getSampleSize();	  	non-compiled	[CE]  variable  k  is  already  defined  in  method  calculateNumericalVariance()	383	None
2114	[BUG]  [BUGGY]      final  double  k  =  getNumberOfSuccesses();  final  double  dx  =  getDomainSize();  [CE]  cannot  find  symbol  [CONTEXT]    protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();  final  double  m  =  getNumberOfSuccesses();  final  double  n  =  getSampleSize();    [BUGGY]      final  double  k  =  getNumberOfSuccesses();  final  double  dx  =  getDomainSize();  [BUGGY]    return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	295	295	1	replace	        final    double    k    =    getNumberOfSuccesses();    final  double  dx  =  getDomainSize();	  	non-compiled	[CE]  cannot  find  symbol	383	None
2115	[BUG]  [BUGGY]      final  double  k  =  getNumberOfSuccesses();  final  double  dx  =  getDx();  [CE]  cannot  find  symbol  [CONTEXT]    protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();  final  double  m  =  getNumberOfSuccesses();  final  double  n  =  getSampleSize();    [BUGGY]      final  double  k  =  getNumberOfSuccesses();  final  double  dx  =  getDx();  [BUGGY]    return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	295	295	1	replace	        final    double    k    =    getNumberOfSuccesses();    final  double  dx  =  getDx();	  	non-compiled	[CE]  cannot  find  symbol	383	None
2122	[BUG]  [BUGGY]  setNumberOfSuccesses(getNumberOfSuccesses()  /  1);  [CE]  cannot  find  symbol  [CONTEXT]    protected  double  calculateNumericalVariance()  {    [BUGGY]  setNumberOfSuccesses(getNumberOfSuccesses()  /  1);  [BUGGY]    final  double  N  =  getPopulationSize();  final  double  m  =  getNumberOfSuccesses();  final  double  n  =  getSampleSize();  return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	292	292	1	replace	setNumberOfSuccesses(getNumberOfSuccesses()  /  1);	      setNumberOfSuccesses(getNumberOfSuccesses()    -    1);    	non-compiled	[CE]  cannot  find  symbol	211	None
2124	[BUG]  [BUGGY]  setNumberOfSuccesses(getNumberOfSuccesses()  +  1);  [CE]  cannot  find  symbol  [CONTEXT]    protected  double  calculateNumericalVariance()  {    [BUGGY]  setNumberOfSuccesses(getNumberOfSuccesses()  +  1);  [BUGGY]    final  double  N  =  getPopulationSize();  final  double  m  =  getNumberOfSuccesses();  final  double  n  =  getSampleSize();  return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	292	292	1	replace	setNumberOfSuccesses(getNumberOfSuccesses()  +  1);	      setNumberOfSuccesses(getNumberOfSuccesses()    -    1);    	non-compiled	[CE]  cannot  find  symbol	211	None
2131	[BUG]  [BUGGY]  n  =  getNumberOfSuccesses()  +  Math.abs(m  /  k);  [CE]  cannot  find  symbol  n  [CONTEXT]    public  double  getNumericalMean()  {    [BUGGY]  n  =  getNumberOfSuccesses()  +  Math.abs(m  /  k);  [BUGGY]    return  (double)  (getSampleSize()  *  getNumberOfSuccesses())  /  (double)  getPopulationSize();  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalMean  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	268	268	1	replace	n  =  getNumberOfSuccesses()  +  Math.abs(m  /  k);	      if(getNumberOfSuccesses()    >    0)    {    int    k    =    getNumberOfSuccesses();    if(k    >    0)    {    return    getNumberOfSuccesses();    }    	non-compiled	[CE]  cannot  find  symbol  n	364	None
2132	[BUG]  [BUGGY]  N  =  getNumberOfSuccesses()  +  Math.abs(m  /  k);  [CE]  cannot  find  symbol  N  [CONTEXT]    public  double  getNumericalMean()  {    [BUGGY]  N  =  getNumberOfSuccesses()  +  Math.abs(m  /  k);  [BUGGY]    return  (double)  (getSampleSize()  *  getNumberOfSuccesses())  /  (double)  getPopulationSize();  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalMean  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	268	268	1	replace	N  =  getNumberOfSuccesses()  +  Math.abs(m  /  k);	      if(getNumberOfSuccesses()    >    0)    {    int    k    =    getNumberOfSuccesses();    if(k    >    0)    {    return    getNumberOfSuccesses();    }    	non-compiled	[CE]  cannot  find  symbol  N	364	None
2133	[BUG]  [BUGGY]  m  =  getNumberOfSuccesses()  +  Math.abs(m  /  k);  [CE]  cannot  find  symbol  m  [CONTEXT]    public  double  getNumericalMean()  {    [BUGGY]  m  =  getNumberOfSuccesses()  +  Math.abs(m  /  k);  [BUGGY]    return  (double)  (getSampleSize()  *  getNumberOfSuccesses())  /  (double)  getPopulationSize();  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalMean  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	268	268	1	replace	m  =  getNumberOfSuccesses()  +  Math.abs(m  /  k);	      if(getNumberOfSuccesses()    >    0)    {    int    k    =    getNumberOfSuccesses();    if(k    >    0)    {    return    getNumberOfSuccesses();    }    	non-compiled	[CE]  cannot  find  symbol  m	364	None
2134	[BUG]  [BUGGY]  n  =  getNumberOfSuccesses()  +  Math.abs(m  /  n);  [CE]  cannot  find  symbol  n  [CONTEXT]    public  double  getNumericalMean()  {    [BUGGY]  n  =  getNumberOfSuccesses()  +  Math.abs(m  /  n);  [BUGGY]    return  (double)  (getSampleSize()  *  getNumberOfSuccesses())  /  (double)  getPopulationSize();  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalMean  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	268	268	1	replace	n  =  getNumberOfSuccesses()  +  Math.abs(m  /  n);	      if(getNumberOfSuccesses()    >    0)    {    int    k    =    getNumberOfSuccesses();    if(k    >    0)    {    return    getNumberOfSuccesses();    }    	non-compiled	[CE]  cannot  find  symbol  n	364	None
2141	[BUG]  [BUGGY]  [FE]  AssertionError  testMath1021  [CONTEXT]    public  double  getNumericalVariance()  {    [BUGGY]  if(numberOfSuccesses  >  0)  {  [BUGGY]    if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	279	279	1	add	if(numberOfSuccesses  >  0)  {	      if(numberOfSuccesses    >    0)    {    if(!numericalVarianceIsCalculated)    {    numericalVariance    =    calculateNumberOfSuccesses();    }    	compilable	  [FE]  AssertionError  testMath1021	11	1
2142	[BUG]  [BUGGY]  if(numberOfSuccesses  >  0)  {  [FE]  AssertionError  testMath1021  [CONTEXT]    public  double  getNumericalVariance()  {    [BUGGY]  if(numberOfSuccesses  >  0)  {  [BUGGY]    if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	279	279	1	replace	if(numberOfSuccesses  >  0)  {	      if(numberOfSuccesses    >    0)    {    if(!numericalVarianceIsCalculated)    {    numericalVariance    =    calculateNumberOfSuccesses();    }    	compilable	  [FE]  AssertionError  testMath1021	11	1
2144	[BUG]  [BUGGY]  if(numericalVariance  <  0)  {  if(!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumberOfSuccesses();  }  [CE]  cannot  find  symbol  [CONTEXT]    public  double  getNumericalVariance()  {    [BUGGY]  if(numericalVariance  <  0)  {  if(!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumberOfSuccesses();  }  [BUGGY]    if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	279	279	1	replace	if(numericalVariance  <  0)  {  if(!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumberOfSuccesses();  }	      if(numberOfSuccesses    >    0)    {    if(!numericalVarianceIsCalculated)    {    numericalVariance    =    calculateNumberOfSuccesses();    }    	non-compiled	[CE]  cannot  find  symbol	11	None
2162	[BUG]  [BUGGY]  final  double  n  =  getNumberOfSuccesses();  [CE]  variable  n  is  already  defined  in  method  calculateNumericalVariance()  [CONTEXT]    protected  double  calculateNumericalVariance()  {    [BUGGY]  final  double  n  =  getNumberOfSuccesses();  [BUGGY]    final  double  N  =  getPopulationSize();  final  double  m  =  getNumberOfSuccesses();  final  double  n  =  getSampleSize();  return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	292	292	1	replace	final  double  n  =  getNumberOfSuccesses();	      final    double    N    =    getNumberOfSuccesses();    	non-compiled	[CE]  variable  n  is  already  defined  in  method  calculateNumericalVariance()	161	None
2163	[BUG]  [BUGGY]  [FE]  AssertionError  testMoments  [CONTEXT]    protected  double  calculateNumericalVariance()  {    [BUGGY]  final  double  N  =  getNumberOfSuccesses()  -  1;  [BUGGY]    final  double  N  =  getPopulationSize();  final  double  m  =  getNumberOfSuccesses();  final  double  n  =  getSampleSize();  return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	292	292	1	add	final  double  N  =  getNumberOfSuccesses()  -  1;	      final    double    N    =    getNumberOfSuccesses();    	compilable	  [FE]  AssertionError  testMoments	161	1
2164	[BUG]  [BUGGY]  final  double  N  =  getNumberOfSuccesses()  -  1;  [FE]  AssertionError  testMoments  [CONTEXT]    protected  double  calculateNumericalVariance()  {    [BUGGY]  final  double  N  =  getNumberOfSuccesses()  -  1;  [BUGGY]    final  double  N  =  getPopulationSize();  final  double  m  =  getNumberOfSuccesses();  final  double  n  =  getSampleSize();  return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	292	292	1	replace	final  double  N  =  getNumberOfSuccesses()  -  1;	      final    double    N    =    getNumberOfSuccesses();    	compilable	  [FE]  AssertionError  testMoments	161	1
2164	[BUG]  [BUGGY]  [FE]  AssertionError  testMoments  [CONTEXT]    protected  double  calculateNumericalVariance()  {    [BUGGY]  final  double  N  =  getNumberOfSuccesses()  /  2;  [BUGGY]    final  double  N  =  getPopulationSize();  final  double  m  =  getNumberOfSuccesses();  final  double  n  =  getSampleSize();  return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	292	292	1	add	final  double  N  =  getNumberOfSuccesses()  /  2;	      final    double    N    =    getNumberOfSuccesses();    	compilable	  [FE]  AssertionError  testMoments	161	1
2165	[BUG]  [BUGGY]  final  double  N  =  getNumberOfSuccesses()  /  2;  [FE]  AssertionError  testMoments  [CONTEXT]    protected  double  calculateNumericalVariance()  {    [BUGGY]  final  double  N  =  getNumberOfSuccesses()  /  2;  [BUGGY]    final  double  N  =  getPopulationSize();  final  double  m  =  getNumberOfSuccesses();  final  double  n  =  getSampleSize();  return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	292	292	1	replace	final  double  N  =  getNumberOfSuccesses()  /  2;	      final    double    N    =    getNumberOfSuccesses();    	compilable	  [FE]  AssertionError  testMoments	161	1
2171	[BUG]  [BUGGY]  return  FastMath.max(0,  getNumberOfSuccesses()  +  getSampleSize()  -  getPopulationSize());  numericalVariance  =  Math.min(numberOfSuccesses,  numberOfSuccesses);  [CE]  unreachable  statement  [CONTEXT]    public  int  getSupportLowerBound()  {    [BUGGY]  return  FastMath.max(0,  getNumberOfSuccesses()  +  getSampleSize()  -  getPopulationSize());  numericalVariance  =  Math.min(numberOfSuccesses,  numberOfSuccesses);  [BUGGY]    getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  }  [CLASS]  HypergeometricDistribution  [METHOD]  getSupportLowerBound  [RETURN_TYPE]  int  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	308	309	1	replace	return    FastMath.max(0,    getNumberOfSuccesses()    +    getSampleSize()    -    getPopulationSize());    numericalVariance  =  Math.min(numberOfSuccesses,  numberOfSuccesses);	  	non-compiled	[CE]  unreachable  statement	2	None
2172	[BUG]  [BUGGY]  return  FastMath.max(0,  getNumberOfSuccesses()  +  getSampleSize()  -  getPopulationSize());  if(numberOfSuccesses  >  0)  {  if(!numericalVarianceIsCalculated)  {  numericalVariance  =  Math.min(numberOfSuccesses,  numberOfSuccesses);  }  [CE]  illegal  start  of  expression  [CONTEXT]    public  int  getSupportLowerBound()  {    [BUGGY]  return  FastMath.max(0,  getNumberOfSuccesses()  +  getSampleSize()  -  getPopulationSize());  if(numberOfSuccesses  >  0)  {  if(!numericalVarianceIsCalculated)  {  numericalVariance  =  Math.min(numberOfSuccesses,  numberOfSuccesses);  }  [BUGGY]    getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  }  [CLASS]  HypergeometricDistribution  [METHOD]  getSupportLowerBound  [RETURN_TYPE]  int  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	308	309	1	replace	return    FastMath.max(0,    getNumberOfSuccesses()    +    getSampleSize()    -    getPopulationSize());    if(numberOfSuccesses  >  0)  {  if(!numericalVarianceIsCalculated)  {  numericalVariance  =  Math.min(numberOfSuccesses,  numberOfSuccesses);  }	  	non-compiled	[CE]  illegal  start  of  expression	2	None
2173	[BUG]  [BUGGY]  return  FastMath.max(0,  getNumberOfSuccesses()  +  getSampleSize()  -  getPopulationSize());  if(numberOfSuccesses  >  0)  {  if(!numericalVarianceIsCalculated)  {  numericalVariance  =  Math.max(numberOfSuccesses,  numberOfSuccesses);  }  [CE]  illegal  start  of  expression  [CONTEXT]    public  int  getSupportLowerBound()  {    [BUGGY]  return  FastMath.max(0,  getNumberOfSuccesses()  +  getSampleSize()  -  getPopulationSize());  if(numberOfSuccesses  >  0)  {  if(!numericalVarianceIsCalculated)  {  numericalVariance  =  Math.max(numberOfSuccesses,  numberOfSuccesses);  }  [BUGGY]    getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  }  [CLASS]  HypergeometricDistribution  [METHOD]  getSupportLowerBound  [RETURN_TYPE]  int  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	308	309	1	replace	return    FastMath.max(0,    getNumberOfSuccesses()    +    getSampleSize()    -    getPopulationSize());    if(numberOfSuccesses  >  0)  {  if(!numericalVarianceIsCalculated)  {  numericalVariance  =  Math.max(numberOfSuccesses,  numberOfSuccesses);  }	  	non-compiled	[CE]  illegal  start  of  expression	2	None
2174	[BUG]  [BUGGY]  return  FastMath.max(0,  getNumberOfSuccesses()  +  getSampleSize()  -  getPopulationSize());  numericalVariance  =  Math.max(numberOfSuccesses,  numberOfSuccesses);  [CE]  unreachable  statement  [CONTEXT]    public  int  getSupportLowerBound()  {    [BUGGY]  return  FastMath.max(0,  getNumberOfSuccesses()  +  getSampleSize()  -  getPopulationSize());  numericalVariance  =  Math.max(numberOfSuccesses,  numberOfSuccesses);  [BUGGY]    getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  }  [CLASS]  HypergeometricDistribution  [METHOD]  getSupportLowerBound  [RETURN_TYPE]  int  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	308	309	1	replace	return    FastMath.max(0,    getNumberOfSuccesses()    +    getSampleSize()    -    getPopulationSize());    numericalVariance  =  Math.max(numberOfSuccesses,  numberOfSuccesses);	  	non-compiled	[CE]  unreachable  statement	2	None
2175	[BUG]  [BUGGY]  return  FastMath.max(0,  getNumberOfSuccesses()  +  getSampleSize()  -  getPopulationSize());  numberOfSuccesses  =  Math.min(numberOfSuccesses,  numberOfSuccesses);  [CE]  cannot  assign  a  value  to  final  variable  numberOfSuccesses  [CONTEXT]    public  int  getSupportLowerBound()  {    [BUGGY]  return  FastMath.max(0,  getNumberOfSuccesses()  +  getSampleSize()  -  getPopulationSize());  numberOfSuccesses  =  Math.min(numberOfSuccesses,  numberOfSuccesses);  [BUGGY]    getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  }  [CLASS]  HypergeometricDistribution  [METHOD]  getSupportLowerBound  [RETURN_TYPE]  int  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	308	309	1	replace	return    FastMath.max(0,    getNumberOfSuccesses()    +    getSampleSize()    -    getPopulationSize());    numberOfSuccesses  =  Math.min(numberOfSuccesses,  numberOfSuccesses);	  	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  numberOfSuccesses	2	None
2183	[BUG]  [BUGGY]  final  double  dx  =  getNumberOfSuccesses();  [CE]  missing  return  statement  [CONTEXT]    protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();  final  double  m  =  getNumberOfSuccesses();  final  double  n  =  getSampleSize();    [BUGGY]  final  double  dx  =  getNumberOfSuccesses();  [BUGGY]    return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	295	295	1	replace	final  double  dx  =  getNumberOfSuccesses();	      final    double    m    =    getNumberOfSuccesses();    	non-compiled	[CE]  missing  return  statement	381	None
2184	[BUG]  [BUGGY]  final  double  y  =  getNumberOfSuccesses();  [CE]  missing  return  statement  [CONTEXT]    protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();  final  double  m  =  getNumberOfSuccesses();  final  double  n  =  getSampleSize();    [BUGGY]  final  double  y  =  getNumberOfSuccesses();  [BUGGY]    return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	295	295	1	replace	final  double  y  =  getNumberOfSuccesses();	      final    double    m    =    getNumberOfSuccesses();    	non-compiled	[CE]  missing  return  statement	381	None
2202	[BUG]  [BUGGY]  double  numericalVariance  =  Math.ceil(getSlope());  [CE]  illegal  start  of  type  [CONTEXT]    public  double  getNumericalVariance()  {    [BUGGY]  double  numericalVariance  =  Math.ceil(getSlope());  [BUGGY]    if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	279	279	1	replace	double  numericalVariance  =  Math.ceil(getSlope());	      double    numericalVariance    =    Math.max(getNumberOfSuccesses(),    numberOfSuccesses);    	non-compiled	[CE]  illegal  start  of  type	543	None
2203	[BUG]  [BUGGY]  double  numericalVariance  =  Math.floor(getSlope(),  getSlope());  [CE]  illegal  start  of  type  [CONTEXT]    public  double  getNumericalVariance()  {    [BUGGY]  double  numericalVariance  =  Math.floor(getSlope(),  getSlope());  [BUGGY]    if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	279	279	1	replace	double  numericalVariance  =  Math.floor(getSlope(),  getSlope());	      double    numericalVariance    =    Math.max(getNumberOfSuccesses(),    numberOfSuccesses);    	non-compiled	[CE]  illegal  start  of  type	543	None
2204	[BUG]  [BUGGY]  double  numericalVariance  =  Math.floor(getSlope(),  getHeight());  [CE]  illegal  start  of  type  [CONTEXT]    public  double  getNumericalVariance()  {    [BUGGY]  double  numericalVariance  =  Math.floor(getSlope(),  getHeight());  [BUGGY]    if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	279	279	1	replace	double  numericalVariance  =  Math.floor(getSlope(),  getHeight());	      double    numericalVariance    =    Math.max(getNumberOfSuccesses(),    numberOfSuccesses);    	non-compiled	[CE]  illegal  start  of  type	543	None
2211	[BUG]  [BUGGY]  [FE]  AssertionError  testMath1021  [CONTEXT]    public  double  getNumericalMean()  {    [BUGGY]      getNumberOfSuccesses();  getNumberOfSuccesses();  [BUGGY]    return  (double)  (getSampleSize()  *  getNumberOfSuccesses())  /  (double)  getPopulationSize();  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalMean  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	268	268	1	add	        getNumberOfSuccesses();    getNumberOfSuccesses();	  	compilable	  [FE]  AssertionError  testMath1021	421	1
2212	[BUG]  [BUGGY]      getNumberOfSuccesses();  getNumberOfSuccesses();  [FE]  AssertionError  testMath1021  [CONTEXT]    public  double  getNumericalMean()  {    [BUGGY]      getNumberOfSuccesses();  getNumberOfSuccesses();  [BUGGY]    return  (double)  (getSampleSize()  *  getNumberOfSuccesses())  /  (double)  getPopulationSize();  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalMean  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	268	268	1	replace	        getNumberOfSuccesses();    getNumberOfSuccesses();	  	compilable	  [FE]  AssertionError  testMath1021	421	1
2212	[BUG]  [BUGGY]      getNumberOfSuccesses();  getSampleSize()  *  getNumberOfSuccesses();  [CE]  not  a  statement  [CONTEXT]    public  double  getNumericalMean()  {    [BUGGY]      getNumberOfSuccesses();  getSampleSize()  *  getNumberOfSuccesses();  [BUGGY]    return  (double)  (getSampleSize()  *  getNumberOfSuccesses())  /  (double)  getPopulationSize();  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalMean  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	268	268	1	replace	        getNumberOfSuccesses();    getSampleSize()  *  getNumberOfSuccesses();	  	non-compiled	[CE]  not  a  statement	421	None
2213	[BUG]  [BUGGY]  [FE]  AssertionError  testMath1021  [CONTEXT]    public  double  getNumericalMean()  {    [BUGGY]      getNumberOfSuccesses();  getPopulationSize();  [BUGGY]    return  (double)  (getSampleSize()  *  getNumberOfSuccesses())  /  (double)  getPopulationSize();  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalMean  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	268	268	1	add	        getNumberOfSuccesses();    getPopulationSize();	  	compilable	  [FE]  AssertionError  testMath1021	421	1
2214	[BUG]  [BUGGY]      getNumberOfSuccesses();  getPopulationSize();  [FE]  AssertionError  testMath1021  [CONTEXT]    public  double  getNumericalMean()  {    [BUGGY]      getNumberOfSuccesses();  getPopulationSize();  [BUGGY]    return  (double)  (getSampleSize()  *  getNumberOfSuccesses())  /  (double)  getPopulationSize();  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalMean  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	268	268	1	replace	        getNumberOfSuccesses();    getPopulationSize();	  	compilable	  [FE]  AssertionError  testMath1021	421	1
2214	[BUG]  [BUGGY]      getNumberOfSuccesses();  getNumberOfSuccesses()  /(double)getPopulationSize();  [CE]  not  a  statement  [CONTEXT]    public  double  getNumericalMean()  {    [BUGGY]      getNumberOfSuccesses();  getNumberOfSuccesses()  /(double)getPopulationSize();  [BUGGY]    return  (double)  (getSampleSize()  *  getNumberOfSuccesses())  /  (double)  getPopulationSize();  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalMean  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	268	268	1	replace	        getNumberOfSuccesses();    getNumberOfSuccesses()  /(double)getPopulationSize();	  	non-compiled	[CE]  not  a  statement	421	None
2215	[BUG]  [BUGGY]      getNumberOfSuccesses();  getNumberOfSuccesses()  /(double)getSampleSize();  [CE]  not  a  statement  [CONTEXT]    public  double  getNumericalMean()  {    [BUGGY]      getNumberOfSuccesses();  getNumberOfSuccesses()  /(double)getSampleSize();  [BUGGY]    return  (double)  (getSampleSize()  *  getNumberOfSuccesses())  /  (double)  getPopulationSize();  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalMean  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	268	268	1	replace	        getNumberOfSuccesses();    getNumberOfSuccesses()  /(double)getSampleSize();	  	non-compiled	[CE]  not  a  statement	421	None
2221	[BUG]  [BUGGY]  return  FastMath.max(0,  getNumberOfSuccesses()  +  getSampleSize()  -  getPopulationSize());  int  numberOfSuccesses  =  getPopulationSize();  [CE]  unreachable  statement  [CONTEXT]    public  int  getSupportLowerBound()  {    [BUGGY]  return  FastMath.max(0,  getNumberOfSuccesses()  +  getSampleSize()  -  getPopulationSize());  int  numberOfSuccesses  =  getPopulationSize();  [BUGGY]    getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  }  [CLASS]  HypergeometricDistribution  [METHOD]  getSupportLowerBound  [RETURN_TYPE]  int  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	308	309	1	replace	return    FastMath.max(0,    getNumberOfSuccesses()    +    getSampleSize()    -    getPopulationSize());    int  numberOfSuccesses  =  getPopulationSize();	  	non-compiled	[CE]  unreachable  statement	2	None
2222	[BUG]  [BUGGY]  return  FastMath.max(0,  getNumberOfSuccesses()  +  getSampleSize()  -  getPopulationSize());  int  populationSize  =  getPopulationSize();  [CE]  unreachable  statement  [CONTEXT]    public  int  getSupportLowerBound()  {    [BUGGY]  return  FastMath.max(0,  getNumberOfSuccesses()  +  getSampleSize()  -  getPopulationSize());  int  populationSize  =  getPopulationSize();  [BUGGY]    getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  }  [CLASS]  HypergeometricDistribution  [METHOD]  getSupportLowerBound  [RETURN_TYPE]  int  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	308	309	1	replace	return    FastMath.max(0,    getNumberOfSuccesses()    +    getSampleSize()    -    getPopulationSize());    int  populationSize  =  getPopulationSize();	  	non-compiled	[CE]  unreachable  statement	2	None
2223	[BUG]  [BUGGY]  return  FastMath.max(0,  getNumberOfSuccesses()  +  getSampleSize()  -  getPopulationSize());  double  numberOfSuccesses  =  getPopulationSize();  [CE]  unreachable  statement  [CONTEXT]    public  int  getSupportLowerBound()  {    [BUGGY]  return  FastMath.max(0,  getNumberOfSuccesses()  +  getSampleSize()  -  getPopulationSize());  double  numberOfSuccesses  =  getPopulationSize();  [BUGGY]    getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  }  [CLASS]  HypergeometricDistribution  [METHOD]  getSupportLowerBound  [RETURN_TYPE]  int  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	308	309	1	replace	return    FastMath.max(0,    getNumberOfSuccesses()    +    getSampleSize()    -    getPopulationSize());    double  numberOfSuccesses  =  getPopulationSize();	  	non-compiled	[CE]  unreachable  statement	2	None
2224	[BUG]  [BUGGY]  return  FastMath.max(0,  getNumberOfSuccesses()  +  getSampleSize()  -  getPopulationSize());  int  numberOfSuccesses  =  getPopulationSize().getNumberOfSuccesses();  [CE]  int  cannot  be  dereferenced  [CONTEXT]    public  int  getSupportLowerBound()  {    [BUGGY]  return  FastMath.max(0,  getNumberOfSuccesses()  +  getSampleSize()  -  getPopulationSize());  int  numberOfSuccesses  =  getPopulationSize().getNumberOfSuccesses();  [BUGGY]    getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  }  [CLASS]  HypergeometricDistribution  [METHOD]  getSupportLowerBound  [RETURN_TYPE]  int  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	308	309	1	replace	return    FastMath.max(0,    getNumberOfSuccesses()    +    getSampleSize()    -    getPopulationSize());    int  numberOfSuccesses  =  getPopulationSize().getNumberOfSuccesses();	  	non-compiled	[CE]  int  cannot  be  dereferenced	2	None
2225	[BUG]  [BUGGY]  return  FastMath.max(0,  getNumberOfSuccesses()  +  getSampleSize()  -  getPopulationSize());  int  numberOfSuccesses  =  getPopulationSize().doubleValue();  [CE]  int  cannot  be  dereferenced  [CONTEXT]    public  int  getSupportLowerBound()  {    [BUGGY]  return  FastMath.max(0,  getNumberOfSuccesses()  +  getSampleSize()  -  getPopulationSize());  int  numberOfSuccesses  =  getPopulationSize().doubleValue();  [BUGGY]    getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  }  [CLASS]  HypergeometricDistribution  [METHOD]  getSupportLowerBound  [RETURN_TYPE]  int  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	308	309	1	replace	return    FastMath.max(0,    getNumberOfSuccesses()    +    getSampleSize()    -    getPopulationSize());    int  numberOfSuccesses  =  getPopulationSize().doubleValue();	  	non-compiled	[CE]  int  cannot  be  dereferenced	2	None
2232	[BUG]  [BUGGY]  getNumberOfSuccesses()  -  1;  [CE]  not  a  statement  [CONTEXT]    public  int  getSupportLowerBound()  {    [BUGGY]  getNumberOfSuccesses()  -  1;  [BUGGY]    return  FastMath.max(0,        getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  }  [CLASS]  HypergeometricDistribution  [METHOD]  getSupportLowerBound  [RETURN_TYPE]  int  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	308	309	1	replace	getNumberOfSuccesses()  -  1;	      getNumberOfSuccesses();    	non-compiled	[CE]  not  a  statement	276	None
2243	[BUG]  [BUGGY]  if(numericalVarianceIsCalculated)  {  if(!numericalVarianceIsCalculated)  {  return  -1;  }  [CE]  illegal  start  of  expression  [CONTEXT]    public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {    [BUGGY]  if(numericalVarianceIsCalculated)  {  if(!numericalVarianceIsCalculated)  {  return  -1;  }  [BUGGY]    numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	280	280	1	replace	if(numericalVarianceIsCalculated)  {  if(!numericalVarianceIsCalculated)  {  return  -1;  }	      if(!numericalVarianceIsCalculated)    {    if(!numericalVarianceIsCalculated)    {    return    -1;    }    	non-compiled	[CE]  illegal  start  of  expression	45	None
2244	[BUG]  [BUGGY]  if(!numbericalVarianceIsCalculated)  {  if(!numericalVarianceIsCalculated)  {  return  -1;  }  [CE]  illegal  start  of  expression  [CONTEXT]    public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {    [BUGGY]  if(!numbericalVarianceIsCalculated)  {  if(!numericalVarianceIsCalculated)  {  return  -1;  }  [BUGGY]    numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	280	280	1	replace	if(!numbericalVarianceIsCalculated)  {  if(!numericalVarianceIsCalculated)  {  return  -1;  }	      if(!numericalVarianceIsCalculated)    {    if(!numericalVarianceIsCalculated)    {    return    -1;    }    	non-compiled	[CE]  illegal  start  of  expression	45	None
2253	[BUG]  [BUGGY]  final  double  numberOfSuccesses  =  getNumberOfSuccesses();  [CE]  cannot  find  symbol  m  [CONTEXT]    protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();    [BUGGY]  final  double  numberOfSuccesses  =  getNumberOfSuccesses();  [BUGGY]    final  double  m  =  getNumberOfSuccesses();  final  double  n  =  getSampleSize();  return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	293	293	1	replace	final  double  numberOfSuccesses  =  getNumberOfSuccesses();	      final    double    n    =    getNumberOfSuccesses();    	non-compiled	[CE]  cannot  find  symbol  m	142	None
2254	[BUG]  [BUGGY]  final  double  y  =  getNumberOfSuccesses();  [CE]  cannot  find  symbol  m  [CONTEXT]    protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();    [BUGGY]  final  double  y  =  getNumberOfSuccesses();  [BUGGY]    final  double  m  =  getNumberOfSuccesses();  final  double  n  =  getSampleSize();  return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	293	293	1	replace	final  double  y  =  getNumberOfSuccesses();	      final    double    n    =    getNumberOfSuccesses();    	non-compiled	[CE]  cannot  find  symbol  m	142	None
2261	[BUG]  [BUGGY]  numericalVariance  =  Math.max(numberOfSuccesses,  sampleSize);  [CE]  missing  return  statement  [CONTEXT]    public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }    [BUGGY]  numericalVariance  =  Math.max(numberOfSuccesses,  sampleSize);  [BUGGY]    }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	283	283	1	replace	numericalVariance  =  Math.max(numberOfSuccesses,  sampleSize);	  return    numericalVariance    /(numericalVarianceIsCalculated));    	non-compiled	[CE]  missing  return  statement	154	None
2262	[BUG]  [BUGGY]  numericalVariance  =  Math.max(numberOfSuccesses,  populationSize);  [CE]  missing  return  statement  [CONTEXT]    public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }    [BUGGY]  numericalVariance  =  Math.max(numberOfSuccesses,  populationSize);  [BUGGY]    }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	283	283	1	replace	numericalVariance  =  Math.max(numberOfSuccesses,  populationSize);	  return    numericalVariance    /(numericalVarianceIsCalculated));    	non-compiled	[CE]  missing  return  statement	154	None
2263	[BUG]  [BUGGY]  numericalVariance  =  Math.max(numberOfSuccesses,  size);  [CE]  cannot  find  symbol  size  [CONTEXT]    public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }    [BUGGY]  numericalVariance  =  Math.max(numberOfSuccesses,  size);  [BUGGY]    }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	283	283	1	replace	numericalVariance  =  Math.max(numberOfSuccesses,  size);	  return    numericalVariance    /(numericalVarianceIsCalculated));    	non-compiled	[CE]  cannot  find  symbol  size	154	None
2282	[BUG]  [BUGGY]  setNumberOfSuccesses(getNumberOfSuccesses(),  N);  [CE]  cannot  find  symbol  N  [CONTEXT]    protected  double  calculateNumericalVariance()  {    [BUGGY]  setNumberOfSuccesses(getNumberOfSuccesses(),  N);  [BUGGY]    final  double  N  =  getPopulationSize();  final  double  m  =  getNumberOfSuccesses();  final  double  n  =  getSampleSize();  return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	292	292	1	replace	setNumberOfSuccesses(getNumberOfSuccesses(),  N);	      final    int    k    =    getNumberOfSuccesses();    	non-compiled	[CE]  cannot  find  symbol  N	213	None
2283	[BUG]  [BUGGY]  setNumberOfSuccesses(getNumberOfSuccesses(),  getNumberOfSuccesses());  [CE]  cannot  find  symbol  [CONTEXT]    protected  double  calculateNumericalVariance()  {    [BUGGY]  setNumberOfSuccesses(getNumberOfSuccesses(),  getNumberOfSuccesses());  [BUGGY]    final  double  N  =  getPopulationSize();  final  double  m  =  getNumberOfSuccesses();  final  double  n  =  getSampleSize();  return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	292	292	1	replace	setNumberOfSuccesses(getNumberOfSuccesses(),  getNumberOfSuccesses());	      final    int    k    =    getNumberOfSuccesses();    	non-compiled	[CE]  cannot  find  symbol	213	None
2284	[BUG]  [BUGGY]  setNumberOfSuccesses(getNumberOfSuccesses(),  n);  [CE]  cannot  find  symbol  n  [CONTEXT]    protected  double  calculateNumericalVariance()  {    [BUGGY]  setNumberOfSuccesses(getNumberOfSuccesses(),  n);  [BUGGY]    final  double  N  =  getPopulationSize();  final  double  m  =  getNumberOfSuccesses();  final  double  n  =  getSampleSize();  return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	292	292	1	replace	setNumberOfSuccesses(getNumberOfSuccesses(),  n);	      final    int    k    =    getNumberOfSuccesses();    	non-compiled	[CE]  cannot  find  symbol  n	213	None
2291	[BUG]  [BUGGY]  n  =  getNumberOfSuccesses()  *  Math.pow(m,  n);  [CE]  cannot  find  symbol  n  [CONTEXT]    public  double  getNumericalMean()  {    [BUGGY]  n  =  getNumberOfSuccesses()  *  Math.pow(m,  n);  [BUGGY]    return  (double)  (getSampleSize()  *  getNumberOfSuccesses())  /  (double)  getPopulationSize();  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalMean  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	268	268	1	replace	n  =  getNumberOfSuccesses()  *  Math.pow(m,  n);	      if(getNumberOfSuccesses()    >    0)    {    int    k    =    getNumberOfSuccesses();    if(k    >    0)    {    return    getNumberOfSuccesses()    *    getNumberOfSuccesses();    }    	non-compiled	[CE]  cannot  find  symbol  n	365	None
2292	[BUG]  [BUGGY]  N  =  getNumberOfSuccesses()  *  Math.pow(m,  n);  [CE]  cannot  find  symbol  N  [CONTEXT]    public  double  getNumericalMean()  {    [BUGGY]  N  =  getNumberOfSuccesses()  *  Math.pow(m,  n);  [BUGGY]    return  (double)  (getSampleSize()  *  getNumberOfSuccesses())  /  (double)  getPopulationSize();  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalMean  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	268	268	1	replace	N  =  getNumberOfSuccesses()  *  Math.pow(m,  n);	      if(getNumberOfSuccesses()    >    0)    {    int    k    =    getNumberOfSuccesses();    if(k    >    0)    {    return    getNumberOfSuccesses()    *    getNumberOfSuccesses();    }    	non-compiled	[CE]  cannot  find  symbol  N	365	None
2293	[BUG]  [BUGGY]  m  =  getNumberOfSuccesses()  *  Math.pow(m,  n);  [CE]  cannot  find  symbol  m  [CONTEXT]    public  double  getNumericalMean()  {    [BUGGY]  m  =  getNumberOfSuccesses()  *  Math.pow(m,  n);  [BUGGY]    return  (double)  (getSampleSize()  *  getNumberOfSuccesses())  /  (double)  getPopulationSize();  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalMean  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	268	268	1	replace	m  =  getNumberOfSuccesses()  *  Math.pow(m,  n);	      if(getNumberOfSuccesses()    >    0)    {    int    k    =    getNumberOfSuccesses();    if(k    >    0)    {    return    getNumberOfSuccesses()    *    getNumberOfSuccesses();    }    	non-compiled	[CE]  cannot  find  symbol  m	365	None
2294	[BUG]  [BUGGY]  n  =  getNumberOfSuccesses()  *  Math.pow(m,  N);  [CE]  cannot  find  symbol  n  [CONTEXT]    public  double  getNumericalMean()  {    [BUGGY]  n  =  getNumberOfSuccesses()  *  Math.pow(m,  N);  [BUGGY]    return  (double)  (getSampleSize()  *  getNumberOfSuccesses())  /  (double)  getPopulationSize();  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalMean  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	268	268	1	replace	n  =  getNumberOfSuccesses()  *  Math.pow(m,  N);	      if(getNumberOfSuccesses()    >    0)    {    int    k    =    getNumberOfSuccesses();    if(k    >    0)    {    return    getNumberOfSuccesses()    *    getNumberOfSuccesses();    }    	non-compiled	[CE]  cannot  find  symbol  n	365	None
2301	[BUG]  [BUGGY]  numericalVariance  =  calculateStdDevVariance();  [CE]  illegal  start  of  type  [CONTEXT]    public  double  getNumericalVariance()  {    [BUGGY]  numericalVariance  =  calculateStdDevVariance();  [BUGGY]    numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	279	279	1	replace	numericalVariance  =  calculateStdDevVariance();	  if(!nativeVarianceIsCalculated)    {    	non-compiled	[CE]  illegal  start  of  type	24	None
2302	[BUG]  [BUGGY]  numericalVariance  =  calculateStdDevVariance(),  numberOfSuccesses;  [CE]  ';'  expected  [CONTEXT]    public  double  getNumericalVariance()  {    [BUGGY]  numericalVariance  =  calculateStdDevVariance(),  numberOfSuccesses;  [BUGGY]    numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	279	279	1	replace	numericalVariance  =  calculateStdDevVariance(),  numberOfSuccesses;	  if(!nativeVarianceIsCalculated)    {    	non-compiled	[CE]  ';'  expected	24	None
2303	[BUG]  [BUGGY]  numericalVariance  =  calculateStdDevVariance(),  probabilityOfSuccesses;  [CE]  ';'  expected  [CONTEXT]    public  double  getNumericalVariance()  {    [BUGGY]  numericalVariance  =  calculateStdDevVariance(),  probabilityOfSuccesses;  [BUGGY]    numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	279	279	1	replace	numericalVariance  =  calculateStdDevVariance(),  probabilityOfSuccesses;	  if(!nativeVarianceIsCalculated)    {    	non-compiled	[CE]  ';'  expected	24	None
2304	[BUG]  [BUGGY]  numericalVariance  =  calculateStdDevVariance(),  numberOfSuccesses);  [CE]  ';'  expected  [CONTEXT]    public  double  getNumericalVariance()  {    [BUGGY]  numericalVariance  =  calculateStdDevVariance(),  numberOfSuccesses);  [BUGGY]    numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	279	279	1	replace	numericalVariance  =  calculateStdDevVariance(),  numberOfSuccesses);	  if(!nativeVarianceIsCalculated)    {    	non-compiled	[CE]  ';'  expected	24	None
2311	[BUG]  [BUGGY]  numericalVariance  =  getNumberOfSuccesses()  /(numberOfSuccesses  -  1));  [CE]  ';'  expected  [CONTEXT]    public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();    [BUGGY]  numericalVariance  =  getNumberOfSuccesses()  /(numberOfSuccesses  -  1));  [BUGGY]    numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	281	281	1	replace	numericalVariance  =  getNumberOfSuccesses()  /(numberOfSuccesses  -  1));	      numericalVariance    =    getNumberOfSuccesses();    	non-compiled	[CE]  ';'  expected	322	None
2313	[BUG]  [BUGGY]  numericalVariance  =  getNumberOfSuccesses()  *(numberOfSuccesses  /  1));  [CE]  ';'  expected  [CONTEXT]    public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();    [BUGGY]  numericalVariance  =  getNumberOfSuccesses()  *(numberOfSuccesses  /  1));  [BUGGY]    numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	281	281	1	replace	numericalVariance  =  getNumberOfSuccesses()  *(numberOfSuccesses  /  1));	      numericalVariance    =    getNumberOfSuccesses();    	non-compiled	[CE]  ';'  expected	322	None
2314	[BUG]  [BUGGY]  numericalVariance  =  calculateNumberOfSuccesses()  *(numberOfSuccesses  -  1));  [CE]  ';'  expected  [CONTEXT]    public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();    [BUGGY]  numericalVariance  =  calculateNumberOfSuccesses()  *(numberOfSuccesses  -  1));  [BUGGY]    numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	281	281	1	replace	numericalVariance  =  calculateNumberOfSuccesses()  *(numberOfSuccesses  -  1));	      numericalVariance    =    getNumberOfSuccesses();    	non-compiled	[CE]  ';'  expected	322	None
2321	[BUG]  [BUGGY]  final  double  n  =  getSampleSize()  *  getNumberOfSuccesses();  final  double  n  =  getPopulationSize()  *  getNumberOfSuccesses();  [CE]  variable  n  is  already  defined  in  method  calculateNumericalVariance()  [CONTEXT]    protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();  final  double  m  =  getNumberOfSuccesses();    [BUGGY]  final  double  n  =  getSampleSize()  *  getNumberOfSuccesses();  final  double  n  =  getPopulationSize()  *  getNumberOfSuccesses();  [BUGGY]    return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	294	294	1	replace	final    double    n    =    getSampleSize()    *    getNumberOfSuccesses();    final  double  n  =  getPopulationSize()  *  getNumberOfSuccesses();	  	non-compiled	[CE]  variable  n  is  already  defined  in  method  calculateNumericalVariance()	263	None
2322	[BUG]  [BUGGY]  final  double  n  =  getSampleSize()  *  getNumberOfSuccesses();  final  double  n  =  getSampleSize()  *  getNumberOfSuccesses();  [CE]  variable  n  is  already  defined  in  method  calculateNumericalVariance()  [CONTEXT]    protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();  final  double  m  =  getNumberOfSuccesses();    [BUGGY]  final  double  n  =  getSampleSize()  *  getNumberOfSuccesses();  final  double  n  =  getSampleSize()  *  getNumberOfSuccesses();  [BUGGY]    return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	294	294	1	replace	final    double    n    =    getSampleSize()    *    getNumberOfSuccesses();    final  double  n  =  getSampleSize()  *  getNumberOfSuccesses();	  	non-compiled	[CE]  variable  n  is  already  defined  in  method  calculateNumericalVariance()	263	None
2323	[BUG]  [BUGGY]  final  double  n  =  getSampleSize()  *  getNumberOfSuccesses();  final  double  N  =  getSampleSize()  *  getNumberOfSuccesses();  [CE]  variable  N  is  already  defined  in  method  calculateNumericalVariance()  [CONTEXT]    protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();  final  double  m  =  getNumberOfSuccesses();    [BUGGY]  final  double  n  =  getSampleSize()  *  getNumberOfSuccesses();  final  double  N  =  getSampleSize()  *  getNumberOfSuccesses();  [BUGGY]    return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	294	294	1	replace	final    double    n    =    getSampleSize()    *    getNumberOfSuccesses();    final  double  N  =  getSampleSize()  *  getNumberOfSuccesses();	  	non-compiled	[CE]  variable  N  is  already  defined  in  method  calculateNumericalVariance()	263	None
2324	[BUG]  [BUGGY]  final  double  n  =  getSampleSize()  *  getNumberOfSuccesses();  final  double  N  =  getPopulationSize()  *  getNumberOfSuccesses();  [CE]  variable  N  is  already  defined  in  method  calculateNumericalVariance()  [CONTEXT]    protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();  final  double  m  =  getNumberOfSuccesses();    [BUGGY]  final  double  n  =  getSampleSize()  *  getNumberOfSuccesses();  final  double  N  =  getPopulationSize()  *  getNumberOfSuccesses();  [BUGGY]    return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	294	294	1	replace	final    double    n    =    getSampleSize()    *    getNumberOfSuccesses();    final  double  N  =  getPopulationSize()  *  getNumberOfSuccesses();	  	non-compiled	[CE]  variable  N  is  already  defined  in  method  calculateNumericalVariance()	263	None
2325	[BUG]  [BUGGY]  final  double  n  =  getSampleSize()  *  getNumberOfSuccesses();  final  double  k  =  getSampleSize()  *  getKnowNumberOfSuccesses();  [CE]  cannot  find  symbol  [CONTEXT]    protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();  final  double  m  =  getNumberOfSuccesses();    [BUGGY]  final  double  n  =  getSampleSize()  *  getNumberOfSuccesses();  final  double  k  =  getSampleSize()  *  getKnowNumberOfSuccesses();  [BUGGY]    return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	294	294	1	replace	final    double    n    =    getSampleSize()    *    getNumberOfSuccesses();    final  double  k  =  getSampleSize()  *  getKnowNumberOfSuccesses();	  	non-compiled	[CE]  cannot  find  symbol	263	None
2332	[BUG]  [BUGGY]  final  double  N  =  getDecimalSize();  [CE]  variable  N  is  already  defined  in  method  calculateNumericalVariance()  [CONTEXT]    protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();  final  double  m  =  getNumberOfSuccesses();    [BUGGY]  final  double  N  =  getDecimalSize();  [BUGGY]    return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	294	294	1	replace	final  double  N  =  getDecimalSize();	  final    double    n    =    getDecimalSize();    	non-compiled	[CE]  variable  N  is  already  defined  in  method  calculateNumericalVariance()	83	None
2333	[BUG]  [BUGGY]  final  double  n  =  getDecimalSize(n);  [CE]  cannot  find  symbol  [CONTEXT]    protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();  final  double  m  =  getNumberOfSuccesses();    [BUGGY]  final  double  n  =  getDecimalSize(n);  [BUGGY]    return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	294	294	1	replace	final  double  n  =  getDecimalSize(n);	  final    double    n    =    getDecimalSize();    	non-compiled	[CE]  cannot  find  symbol	83	None
2334	[BUG]  [BUGGY]  final  Double  n  =  getDecimalSize();  [CE]  cannot  find  symbol  [CONTEXT]    protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();  final  double  m  =  getNumberOfSuccesses();    [BUGGY]  final  Double  n  =  getDecimalSize();  [BUGGY]    return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	294	294	1	replace	final  Double  n  =  getDecimalSize();	  final    double    n    =    getDecimalSize();    	non-compiled	[CE]  cannot  find  symbol	83	None
2344	[BUG]  [BUGGY]  final  double  N  =  getNumberOfSuccesses()  -  1;  [CE]  variable  N  is  already  defined  in  method  calculateNumericalVariance()  [CONTEXT]    protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();    [BUGGY]  final  double  N  =  getNumberOfSuccesses()  -  1;  [BUGGY]    final  double  m  =  getNumberOfSuccesses();  final  double  n  =  getSampleSize();  return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	293	293	1	replace	final  double  N  =  getNumberOfSuccesses()  -  1;	      final    double    N    =    getNumberOfSuccesses();    	non-compiled	[CE]  variable  N  is  already  defined  in  method  calculateNumericalVariance()	141	None
2352	[BUG]  [BUGGY]  int  populationSize  =  getNumberOfSuccesses()  -  1;  [CE]  missing  return  statement  [CONTEXT]    public  int  getSupportLowerBound()  {    [BUGGY]  int  populationSize  =  getNumberOfSuccesses()  -  1;  [BUGGY]    return  FastMath.max(0,        getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  }  [CLASS]  HypergeometricDistribution  [METHOD]  getSupportLowerBound  [RETURN_TYPE]  int  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	308	309	1	replace	int  populationSize  =  getNumberOfSuccesses()  -  1;	      int    populationSize    =    getNumberOfSuccesses();    	non-compiled	[CE]  missing  return  statement	66	None
2354	[BUG]  [BUGGY]  int  populationSize  =  getNumberOfSuccesses()  +  1;  [CE]  missing  return  statement  [CONTEXT]    public  int  getSupportLowerBound()  {    [BUGGY]  int  populationSize  =  getNumberOfSuccesses()  +  1;  [BUGGY]    return  FastMath.max(0,        getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  }  [CLASS]  HypergeometricDistribution  [METHOD]  getSupportLowerBound  [RETURN_TYPE]  int  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	308	309	1	replace	int  populationSize  =  getNumberOfSuccesses()  +  1;	      int    populationSize    =    getNumberOfSuccesses();    	non-compiled	[CE]  missing  return  statement	66	None
2363	[BUG]  [BUGGY]  final  double  k  =  getSampleSize();  [CE]  cannot  find  symbol  m  [CONTEXT]    protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();    [BUGGY]  final  double  k  =  getSampleSize();  [BUGGY]    final  double  m  =  getNumberOfSuccesses();  final  double  n  =  getSampleSize();  return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	293	293	1	replace	final  double  k  =  getSampleSize();	      final    double    k    =    getNumberOfDay();    	non-compiled	[CE]  cannot  find  symbol  m	185	None
2364	[BUG]  [BUGGY]  final  double  k  =  getDecimalSize();  [CE]  cannot  find  symbol  [CONTEXT]    protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();    [BUGGY]  final  double  k  =  getDecimalSize();  [BUGGY]    final  double  m  =  getNumberOfSuccesses();  final  double  n  =  getSampleSize();  return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	293	293	1	replace	final  double  k  =  getDecimalSize();	      final    double    k    =    getNumberOfDay();    	non-compiled	[CE]  cannot  find  symbol	185	None
2371	[BUG]  [BUGGY]  numericalVariance  =  calculatePositiveVariance();  [CE]  illegal  start  of  type  [CONTEXT]    public  double  getNumericalVariance()  {    [BUGGY]  numericalVariance  =  calculatePositiveVariance();  [BUGGY]    numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	279	279	1	replace	numericalVariance  =  calculatePositiveVariance();	  if(numericalVarianceIsCalculated)    {    	non-compiled	[CE]  illegal  start  of  type	23	None
2372	[BUG]  [BUGGY]  numericalVariance  =  calculatePositiveVariance(),  numberOfSuccesses;  [CE]  ';'  expected  [CONTEXT]    public  double  getNumericalVariance()  {    [BUGGY]  numericalVariance  =  calculatePositiveVariance(),  numberOfSuccesses;  [BUGGY]    numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	279	279	1	replace	numericalVariance  =  calculatePositiveVariance(),  numberOfSuccesses;	  if(numericalVarianceIsCalculated)    {    	non-compiled	[CE]  ';'  expected	23	None
2373	[BUG]  [BUGGY]  numericalVariance  =  calculatePositiveVariance(),  numberOfSuccesses);  [CE]  ';'  expected  [CONTEXT]    public  double  getNumericalVariance()  {    [BUGGY]  numericalVariance  =  calculatePositiveVariance(),  numberOfSuccesses);  [BUGGY]    numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	279	279	1	replace	numericalVariance  =  calculatePositiveVariance(),  numberOfSuccesses);	  if(numericalVarianceIsCalculated)    {    	non-compiled	[CE]  ';'  expected	23	None
2374	[BUG]  [BUGGY]  numericalVariance  =  calculatePositiveVariance()  -  1;  [CE]  illegal  start  of  type  [CONTEXT]    public  double  getNumericalVariance()  {    [BUGGY]  numericalVariance  =  calculatePositiveVariance()  -  1;  [BUGGY]    numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	279	279	1	replace	numericalVariance  =  calculatePositiveVariance()  -  1;	  if(numericalVarianceIsCalculated)    {    	non-compiled	[CE]  illegal  start  of  type	23	None
2384	[BUG]  [BUGGY]  if(negalativeVarianceIsCalculated)  {  [CE]  cannot  find  symbol  negalativeVarianceIsCalculated  [CONTEXT]    public  double  getNumericalVariance()  {    [BUGGY]  if(negalativeVarianceIsCalculated)  {  [BUGGY]    numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	279	279	1	replace	if(negalativeVarianceIsCalculated)  {	  if(numbericalVarianceIsCalculated)    {    	non-compiled	[CE]  cannot  find  symbol  negalativeVarianceIsCalculated	203	None
2	[BUG]  [BUGGY]  return(double)(getSampleSize()  *  getNumberOfSuccesses()  /(double)getSummarySize();  [CE]  ')'  expected  [CONTEXT]    public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();    [BUGGY]  return(double)(getSampleSize()  *  getNumberOfSuccesses()  /(double)getSummarySize();  [BUGGY]    }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	281	281	1	replace	return(double)(getSampleSize()  *  getNumberOfSuccesses()  /(double)getSummarySize();	  numericalVarianceIisCalculated    =    false;    	non-compiled	[CE]  ')'  expected	124	None
24	[BUG]  [BUGGY]  setNumberOfSuccesses(getNumberOfSuccesses()  *  1);  [CE]  cannot  find  symbol  [CONTEXT]    protected  double  calculateNumericalVariance()  {    [BUGGY]  setNumberOfSuccesses(getNumberOfSuccesses()  *  1);  [BUGGY]    final  double  N  =  getPopulationSize();  final  double  m  =  getNumberOfSuccesses();  final  double  n  =  getSampleSize();  return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	292	292	1	replace	setNumberOfSuccesses(getNumberOfSuccesses()  *  1);	      setNumberOfSuccesses(getNumberOfSuccesses()    -    1);    	non-compiled	[CE]  cannot  find  symbol	211	None
43	[BUG]  [BUGGY]  getNumberOfSuccesses()  +  getPopulationSize()  -  1;  [CE]  not  a  statement  [CONTEXT]    public  int  getSupportLowerBound()  {    [BUGGY]  getNumberOfSuccesses()  +  getPopulationSize()  -  1;  [BUGGY]    return  FastMath.max(0,        getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  }  [CLASS]  HypergeometricDistribution  [METHOD]  getSupportLowerBound  [RETURN_TYPE]  int  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	308	309	1	replace	getNumberOfSuccesses()  +  getPopulationSize()  -  1;	      getNumberOfSuccesses()    +    getPopulationSize();    	non-compiled	[CE]  not  a  statement	272	None
62	[BUG]  [BUGGY]      final  double  k  =  getNumberOfSuccesses();  final  double  dx  =  getDouble();  [CE]  cannot  find  symbol  [CONTEXT]    protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();  final  double  m  =  getNumberOfSuccesses();    [BUGGY]      final  double  k  =  getNumberOfSuccesses();  final  double  dx  =  getDouble();  [BUGGY]    final  double  n  =  getSampleSize();  return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	294	294	1	replace	        final    double    k    =    getNumberOfSuccesses();    final  double  dx  =  getDouble();	  	non-compiled	[CE]  cannot  find  symbol	302	None
63	[BUG]  [BUGGY]      final  double  k  =  getNumberOfSuccesses();  final  double  dx  =  getDecimalSize();  [CE]  cannot  find  symbol  [CONTEXT]    protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();  final  double  m  =  getNumberOfSuccesses();    [BUGGY]      final  double  k  =  getNumberOfSuccesses();  final  double  dx  =  getDecimalSize();  [BUGGY]    final  double  n  =  getSampleSize();  return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	294	294	1	replace	        final    double    k    =    getNumberOfSuccesses();    final  double  dx  =  getDecimalSize();	  	non-compiled	[CE]  cannot  find  symbol	302	None
64	[BUG]  [BUGGY]      final  double  k  =  getNumberOfSuccesses();  final  double  dx  =  getDimensions();  [CE]  cannot  find  symbol  [CONTEXT]    protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();  final  double  m  =  getNumberOfSuccesses();    [BUGGY]      final  double  k  =  getNumberOfSuccesses();  final  double  dx  =  getDimensions();  [BUGGY]    final  double  n  =  getSampleSize();  return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	294	294	1	replace	        final    double    k    =    getNumberOfSuccesses();    final  double  dx  =  getDimensions();	  	non-compiled	[CE]  cannot  find  symbol	302	None
65	[BUG]  [BUGGY]      final  double  k  =  getNumberOfSuccesses();  final  double  dx  =  getDegree();  [CE]  cannot  find  symbol  [CONTEXT]    protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();  final  double  m  =  getNumberOfSuccesses();    [BUGGY]      final  double  k  =  getNumberOfSuccesses();  final  double  dx  =  getDegree();  [BUGGY]    final  double  n  =  getSampleSize();  return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	294	294	1	replace	        final    double    k    =    getNumberOfSuccesses();    final  double  dx  =  getDegree();	  	non-compiled	[CE]  cannot  find  symbol	302	None
83	[BUG]  [BUGGY]  final  double  dx  =  getSampleSize();  [CE]  missing  return  statement  [CONTEXT]    protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();  final  double  m  =  getNumberOfSuccesses();  final  double  n  =  getSampleSize();    [BUGGY]  final  double  dx  =  getSampleSize();  [BUGGY]    return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	295	295	1	replace	final  double  dx  =  getSampleSize();	      final    double    n    =    getSampleSize();    	non-compiled	[CE]  missing  return  statement	94	None
84	[BUG]  [BUGGY]  final  double  k  =  getSampleSize();  [CE]  missing  return  statement  [CONTEXT]    protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();  final  double  m  =  getNumberOfSuccesses();  final  double  n  =  getSampleSize();    [BUGGY]  final  double  k  =  getSampleSize();  [BUGGY]    return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	295	295	1	replace	final  double  k  =  getSampleSize();	      final    double    n    =    getSampleSize();    	non-compiled	[CE]  missing  return  statement	94	None
102	[BUG]  [BUGGY]  final  double  k  =  getNumberOfKind().doubleValue();  [CE]  cannot  find  symbol  [CONTEXT]    protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();  final  double  m  =  getNumberOfSuccesses();    [BUGGY]  final  double  k  =  getNumberOfKind().doubleValue();  [BUGGY]    final  double  n  =  getSampleSize();  return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	294	294	1	replace	final  double  k  =  getNumberOfKind().doubleValue();	      final    double    k    =    getNumberOfKind();    	non-compiled	[CE]  cannot  find  symbol	305	None
104	[BUG]  [BUGGY]  final  double  k  =  getNumberOfKind()  +  1;  [CE]  cannot  find  symbol  [CONTEXT]    protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();  final  double  m  =  getNumberOfSuccesses();    [BUGGY]  final  double  k  =  getNumberOfKind()  +  1;  [BUGGY]    final  double  n  =  getSampleSize();  return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	294	294	1	replace	final  double  k  =  getNumberOfKind()  +  1;	      final    double    k    =    getNumberOfKind();    	non-compiled	[CE]  cannot  find  symbol	305	None
122	[BUG]  [BUGGY]  final  double  n  =  getSampleSize()  *  getNumberOfSuccesses();  final  double  m  =  getSampleSize()  *  getNumberOfSuccesses();  [CE]  variable  m  is  already  defined  in  method  calculateNumericalVariance()  [CONTEXT]    protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();  final  double  m  =  getNumberOfSuccesses();    [BUGGY]  final  double  n  =  getSampleSize()  *  getNumberOfSuccesses();  final  double  m  =  getSampleSize()  *  getNumberOfSuccesses();  [BUGGY]    return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	294	294	1	replace	final    double    n    =    getSampleSize()    *    getNumberOfSuccesses();    final  double  m  =  getSampleSize()  *  getNumberOfSuccesses();	  	non-compiled	[CE]  variable  m  is  already  defined  in  method  calculateNumericalVariance()	263	None
123	[BUG]  [BUGGY]  final  double  n  =  getSampleSize()  *  getNumberOfSuccesses();  final  double  n  =  getNumberOfSuccesses()  *  getSampleSize();  [CE]  variable  n  is  already  defined  in  method  calculateNumericalVariance()  [CONTEXT]    protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();  final  double  m  =  getNumberOfSuccesses();    [BUGGY]  final  double  n  =  getSampleSize()  *  getNumberOfSuccesses();  final  double  n  =  getNumberOfSuccesses()  *  getSampleSize();  [BUGGY]    return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	294	294	1	replace	final    double    n    =    getSampleSize()    *    getNumberOfSuccesses();    final  double  n  =  getNumberOfSuccesses()  *  getSampleSize();	  	non-compiled	[CE]  variable  n  is  already  defined  in  method  calculateNumericalVariance()	263	None
124	[BUG]  [BUGGY]  final  double  n  =  getSampleSize()  *  getNumberOfSuccesses();  final  double  k  =  getSampleSize()  *  getNumberOfSuccesses();  [CE]  variable  n  is  already  defined  in  method  calculateNumericalVariance()  [CONTEXT]    protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();  final  double  m  =  getNumberOfSuccesses();    [BUGGY]  final  double  n  =  getSampleSize()  *  getNumberOfSuccesses();  final  double  k  =  getSampleSize()  *  getNumberOfSuccesses();  [BUGGY]    return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	294	294	1	replace	final    double    n    =    getSampleSize()    *    getNumberOfSuccesses();    final  double  k  =  getSampleSize()  *  getNumberOfSuccesses();	  	non-compiled	[CE]  variable  n  is  already  defined  in  method  calculateNumericalVariance()	263	None
125	[BUG]  [BUGGY]  final  double  n  =  getSampleSize()  *  getNumberOfSuccesses();  final  double  n  =  getSampleSize()  *  getNumberOfSuccesses()  +  1;  [CE]  variable  n  is  already  defined  in  method  calculateNumericalVariance()  [CONTEXT]    protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();  final  double  m  =  getNumberOfSuccesses();    [BUGGY]  final  double  n  =  getSampleSize()  *  getNumberOfSuccesses();  final  double  n  =  getSampleSize()  *  getNumberOfSuccesses()  +  1;  [BUGGY]    return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	294	294	1	replace	final    double    n    =    getSampleSize()    *    getNumberOfSuccesses();    final  double  n  =  getSampleSize()  *  getNumberOfSuccesses()  +  1;	  	non-compiled	[CE]  variable  n  is  already  defined  in  method  calculateNumericalVariance()	263	None
144	[BUG]  [BUGGY]  final  int  N  =  getNumberOfSuccesses()  -  1;  [CE]  variable  N  is  already  defined  in  method  calculateNumericalVariance()  [CONTEXT]    protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();    [BUGGY]  final  int  N  =  getNumberOfSuccesses()  -  1;  [BUGGY]    final  double  m  =  getNumberOfSuccesses();  final  double  n  =  getSampleSize();  return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	293	293	1	replace	final  int  N  =  getNumberOfSuccesses()  -  1;	      final    int    N    =    getNumberOfSuccesses();    	non-compiled	[CE]  variable  N  is  already  defined  in  method  calculateNumericalVariance()	143	None
163	[BUG]  [BUGGY]  if(!numericalVarianceIsCalculated)  {  while(!numericalVarianceIsCalculated)  {  return  false;  }  [CE]  illegal  start  of  expression  [CONTEXT]    public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {    [BUGGY]  if(!numericalVarianceIsCalculated)  {  while(!numericalVarianceIsCalculated)  {  return  false;  }  [BUGGY]    numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	280	280	1	replace	if(!numericalVarianceIsCalculated)  {  while(!numericalVarianceIsCalculated)  {  return  false;  }	      if(!numericalVarianceIsCalculated)    {    if(!numericalVarianceIsCalculated)    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	43	None
164	[BUG]  [BUGGY]  if(!numericalVarianceIsCalculated)  {  if(!numericalVarianceIsCalculated)  {  return  false;  >>  [CE]  illegal  start  of  expression  [CONTEXT]    public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {    [BUGGY]  if(!numericalVarianceIsCalculated)  {  if(!numericalVarianceIsCalculated)  {  return  false;  >>  [BUGGY]    numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	280	280	1	replace	if(!numericalVarianceIsCalculated)  {  if(!numericalVarianceIsCalculated)  {  return  false;  >>	      if(!numericalVarianceIsCalculated)    {    if(!numericalVarianceIsCalculated)    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	43	None
184	[BUG]  [BUGGY]  numericalVariance  =  getSummarySize();  [CE]  cannot  find  symbol  [CONTEXT]    protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();    [BUGGY]  numericalVariance  =  getSummarySize();  [BUGGY]    final  double  m  =  getNumberOfSuccesses();  final  double  n  =  getSampleSize();  return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	293	293	1	replace	numericalVariance  =  getSummarySize();	      final    double    N    =    getNumberOfSuccesses();    	non-compiled	[CE]  cannot  find  symbol	141	None
223	[BUG]  [BUGGY]  numericalVariance  =  getNumberOfSuccesses()  *(numberOfSuccesses  -  1)/(numberOfSuccesses  -  1));  [CE]  ';'  expected  [CONTEXT]    public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();    [BUGGY]  numericalVariance  =  getNumberOfSuccesses()  *(numberOfSuccesses  -  1)/(numberOfSuccesses  -  1));  [BUGGY]    numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	281	281	1	replace	numericalVariance  =  getNumberOfSuccesses()  *(numberOfSuccesses  -  1)/(numberOfSuccesses  -  1));	      numericalVariance    =    getNumberOfSuccesses();    	non-compiled	[CE]  ';'  expected	322	None
224	[BUG]  [BUGGY]  numericalVariance  =  getNumberOfSuccesses()  *(numberOfSuccesses  /  2));  [CE]  ';'  expected  [CONTEXT]    public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();    [BUGGY]  numericalVariance  =  getNumberOfSuccesses()  *(numberOfSuccesses  /  2));  [BUGGY]    numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	281	281	1	replace	numericalVariance  =  getNumberOfSuccesses()  *(numberOfSuccesses  /  2));	      numericalVariance    =    getNumberOfSuccesses();    	non-compiled	[CE]  ';'  expected	322	None
243	[BUG]  [BUGGY]  if(getNumberOfSuccesses()  >  0)  {  if(getPopulationSize()  >  0)  {  return  FastMath.min(10,  getNumberOfSuccesses()  +  getPopulationSize());  }  [CE]  illegal  start  of  expression  [CONTEXT]    public  int  getSupportLowerBound()  {    [BUGGY]  if(getNumberOfSuccesses()  >  0)  {  if(getPopulationSize()  >  0)  {  return  FastMath.min(10,  getNumberOfSuccesses()  +  getPopulationSize());  }  [BUGGY]    return  FastMath.max(0,        getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  }  [CLASS]  HypergeometricDistribution  [METHOD]  getSupportLowerBound  [RETURN_TYPE]  int  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	308	309	1	replace	if(getNumberOfSuccesses()  >  0)  {  if(getPopulationSize()  >  0)  {  return  FastMath.min(10,  getNumberOfSuccesses()  +  getPopulationSize());  }	      if(getNumberOfSuccesses()    >    0)    {    if(getPopulationSize()    >    0)    {    return    FastMath.min(10,    getNumberOfSuccesses()    -    getPopulationSize());    }    	non-compiled	[CE]  illegal  start  of  expression	62	None
262	[BUG]  [BUGGY]  if(!numericalVarianceIsCalculated)  {  if(!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateStdNumericalVariance();  meanwhile  [CE]  not  a  statement  [CONTEXT]    public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();    [BUGGY]  if(!numericalVarianceIsCalculated)  {  if(!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateStdNumericalVariance();  meanwhile  [BUGGY]    numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	281	281	1	replace	if(!numericalVarianceIsCalculated)  {  if(!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateStdNumericalVariance();  meanwhile	      if(!numericalVarianceIsCalculated)    {    if(!numericalVarianceIsCalculated)    {    numericalVariance    =    calculateStdNumericalVariance();    }    	non-compiled	[CE]  not  a  statement	175	None
263	[BUG]  [BUGGY]  if(!numericalVarianceIsCalculated)  {  if(!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateStdNumericalVariance();  figured  [CE]  not  a  statement  [CONTEXT]    public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();    [BUGGY]  if(!numericalVarianceIsCalculated)  {  if(!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateStdNumericalVariance();  figured  [BUGGY]    numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	281	281	1	replace	if(!numericalVarianceIsCalculated)  {  if(!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateStdNumericalVariance();  figured	      if(!numericalVarianceIsCalculated)    {    if(!numericalVarianceIsCalculated)    {    numericalVariance    =    calculateStdNumericalVariance();    }    	non-compiled	[CE]  not  a  statement	175	None
264	[BUG]  [BUGGY]  if(!numericalVarianceIsCalculated)  {  if(!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateStdNumericalVariance();  presumably  [CE]  not  a  statement  [CONTEXT]    public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();    [BUGGY]  if(!numericalVarianceIsCalculated)  {  if(!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateStdNumericalVariance();  presumably  [BUGGY]    numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	281	281	1	replace	if(!numericalVarianceIsCalculated)  {  if(!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateStdNumericalVariance();  presumably	      if(!numericalVarianceIsCalculated)    {    if(!numericalVarianceIsCalculated)    {    numericalVariance    =    calculateStdNumericalVariance();    }    	non-compiled	[CE]  not  a  statement	175	None
282	[BUG]  [BUGGY]  setNumberOfSuccesses(getNumberOfSuccesses(),  getPopulationSize());  [CE]  cannot  find  symbol  [CONTEXT]    protected  double  calculateNumericalVariance()  {    [BUGGY]  setNumberOfSuccesses(getNumberOfSuccesses(),  getPopulationSize());  [BUGGY]    final  double  N  =  getPopulationSize();  final  double  m  =  getNumberOfSuccesses();  final  double  n  =  getSampleSize();  return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	292	292	1	replace	setNumberOfSuccesses(getNumberOfSuccesses(),  getPopulationSize());	      final    int    k    =    getNumberOfSuccesses();    	non-compiled	[CE]  cannot  find  symbol	213	None
284	[BUG]  [BUGGY]  setNumberOfSuccesses(getNumberOfSuccesses(),  false);  [CE]  cannot  find  symbol  [CONTEXT]    protected  double  calculateNumericalVariance()  {    [BUGGY]  setNumberOfSuccesses(getNumberOfSuccesses(),  false);  [BUGGY]    final  double  N  =  getPopulationSize();  final  double  m  =  getNumberOfSuccesses();  final  double  n  =  getSampleSize();  return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	292	292	1	replace	setNumberOfSuccesses(getNumberOfSuccesses(),  false);	      final    int    k    =    getNumberOfSuccesses();    	non-compiled	[CE]  cannot  find  symbol	213	None
302	[BUG]  [BUGGY]  [FE]  AssertionError  testMoments  [CONTEXT]    public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();    [BUGGY]      numericalVariance  =  getNumberOfSuccesses();  numericalVariance  =  getNumberOfSuccesses();  [BUGGY]    numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	281	281	1	add	        numericalVariance    =    getNumberOfSuccesses();    numericalVariance  =  getNumberOfSuccesses();	  	compilable	  [FE]  AssertionError  testMoments	321	1
303	[BUG]  [BUGGY]      numericalVariance  =  getNumberOfSuccesses();  numericalVariance  =  getNumberOfSuccesses();  [FE]  AssertionError  testMoments  [CONTEXT]    public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();    [BUGGY]      numericalVariance  =  getNumberOfSuccesses();  numericalVariance  =  getNumberOfSuccesses();  [BUGGY]    numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	281	281	1	replace	        numericalVariance    =    getNumberOfSuccesses();    numericalVariance  =  getNumberOfSuccesses();	  	compilable	  [FE]  AssertionError  testMoments	321	1
303	[BUG]  [BUGGY]  [FE]  AssertionError  testMoments  [CONTEXT]    public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();    [BUGGY]      numericalVariance  =  getNumberOfSuccesses();  numericalVariance  =  getPopulationSize();  [BUGGY]    numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	281	281	1	add	        numericalVariance    =    getNumberOfSuccesses();    numericalVariance  =  getPopulationSize();	  	compilable	  [FE]  AssertionError  testMoments	321	1
304	[BUG]  [BUGGY]      numericalVariance  =  getNumberOfSuccesses();  numericalVariance  =  getPopulationSize();  [FE]  AssertionError  testMoments  [CONTEXT]    public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();    [BUGGY]      numericalVariance  =  getNumberOfSuccesses();  numericalVariance  =  getPopulationSize();  [BUGGY]    numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	281	281	1	replace	        numericalVariance    =    getNumberOfSuccesses();    numericalVariance  =  getPopulationSize();	  	compilable	  [FE]  AssertionError  testMoments	321	1
304	[BUG]  [BUGGY]      numericalVariance  =  getNumberOfSuccesses();  numericalVariance  =  getStandardDeviation();  [CE]  cannot  find  symbol  [CONTEXT]    public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();    [BUGGY]      numericalVariance  =  getNumberOfSuccesses();  numericalVariance  =  getStandardDeviation();  [BUGGY]    numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	281	281	1	replace	        numericalVariance    =    getNumberOfSuccesses();    numericalVariance  =  getStandardDeviation();	  	non-compiled	[CE]  cannot  find  symbol	321	None
305	[BUG]  [BUGGY]      numericalVariance  =  getNumberOfSuccesses();  numericalVariance  =  getSummarySize();  [CE]  cannot  find  symbol  [CONTEXT]    public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();    [BUGGY]      numericalVariance  =  getNumberOfSuccesses();  numericalVariance  =  getSummarySize();  [BUGGY]    numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	281	281	1	replace	        numericalVariance    =    getNumberOfSuccesses();    numericalVariance  =  getSummarySize();	  	non-compiled	[CE]  cannot  find  symbol	321	None
324	[BUG]  [BUGGY]  setNumberOfSuccesses(numberOfSuccesses,  populationSize  -  1);  [CE]  cannot  find  symbol  [CONTEXT]    public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {    [BUGGY]  setNumberOfSuccesses(numberOfSuccesses,  populationSize  -  1);  [BUGGY]    numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	280	280	1	replace	setNumberOfSuccesses(numberOfSuccesses,  populationSize  -  1);	      setNumberOfSuccesses(n    -    1);    	non-compiled	[CE]  cannot  find  symbol	244	None
344	[BUG]  [BUGGY]  return  numericalVariance  *  numberOfSuccesses  /(numberOfSuccesses  -  1));  [CE]  ';'  expected  [CONTEXT]    public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }    [BUGGY]  return  numericalVariance  *  numberOfSuccesses  /(numberOfSuccesses  -  1));  [BUGGY]    }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	283	283	1	replace	return  numericalVariance  *  numberOfSuccesses  /(numberOfSuccesses  -  1));	  return    numericalVariance    *    numberOfSuccesses;    	non-compiled	[CE]  ';'  expected	343	None
364	[BUG]  [BUGGY]  getNumberOfSuccesses());  [CE]  ';'  expected  [CONTEXT]    public  int  getSupportLowerBound()  {    [BUGGY]  getNumberOfSuccesses());  [BUGGY]    return  FastMath.max(0,        getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  }  [CLASS]  HypergeometricDistribution  [METHOD]  getSupportLowerBound  [RETURN_TYPE]  int  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	308	309	1	replace	getNumberOfSuccesses());	      getPopulationSize();    	non-compiled	[CE]  ';'  expected	274	None
382	[BUG]  [BUGGY]  numericalVariance  =  false;  [CE]  incompatible  types  [CONTEXT]    public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }    [BUGGY]  numericalVariance  =  false;  [BUGGY]    return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	283	283	1	replace	numericalVariance  =  false;	      if(!numericalVarianceIsCalculated)    {    if(!numericalVarianceIsCalculated)    {    numericalVariance    =    false;    }    	non-compiled	[CE]  incompatible  types	103	None
383	[BUG]  [BUGGY]  numericalVariance  =  false;  if(!numericalVarianceIsCalculated)  {  if(!numericalVarianceIsCalculated)  {  numericalVariance  =  false;  }  [CE]  illegal  start  of  expression  [CONTEXT]    public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }    [BUGGY]  numericalVariance  =  false;  if(!numericalVarianceIsCalculated)  {  if(!numericalVarianceIsCalculated)  {  numericalVariance  =  false;  }  [BUGGY]    return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	283	283	1	replace	numericalVariance  =  false;  if(!numericalVarianceIsCalculated)  {  if(!numericalVarianceIsCalculated)  {  numericalVariance  =  false;  }	      if(!numericalVarianceIsCalculated)    {    if(!numericalVarianceIsCalculated)    {    numericalVariance    =    false;    }    	non-compiled	[CE]  illegal  start  of  expression	103	None
384	[BUG]  [BUGGY]  if(numericalVarianceIsCalculated)  {  if(!numericalVarianceIsCalculated)  {  numericalVariance  =  false;  }  [CE]  illegal  start  of  expression  [CONTEXT]    public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }    [BUGGY]  if(numericalVarianceIsCalculated)  {  if(!numericalVarianceIsCalculated)  {  numericalVariance  =  false;  }  [BUGGY]    return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	283	283	1	replace	if(numericalVarianceIsCalculated)  {  if(!numericalVarianceIsCalculated)  {  numericalVariance  =  false;  }	      if(!numericalVarianceIsCalculated)    {    if(!numericalVarianceIsCalculated)    {    numericalVariance    =    false;    }    	non-compiled	[CE]  illegal  start  of  expression	103	None
403	[BUG]  [BUGGY]  getNumberOfSuccesses()  -  getPopulationSize()  -  1;  [CE]  not  a  statement  [CONTEXT]    public  int  getSupportLowerBound()  {    [BUGGY]  getNumberOfSuccesses()  -  getPopulationSize()  -  1;  [BUGGY]    return  FastMath.max(0,        getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  }  [CLASS]  HypergeometricDistribution  [METHOD]  getSupportLowerBound  [RETURN_TYPE]  int  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	308	309	1	replace	getNumberOfSuccesses()  -  getPopulationSize()  -  1;	      getNumberOfSuccesses()    -    getPopulationSize();    	non-compiled	[CE]  not  a  statement	271	None
421	[BUG]  [BUGGY]  if(numberOfSuccesses  >  1)  {  if(!numericalVarianceIsCalculated)  {  numericalVariance  =  getNumberOfSuccesses();  }  [CE]  illegal  start  of  expression  [CONTEXT]    public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }    [BUGGY]  if(numberOfSuccesses  >  1)  {  if(!numericalVarianceIsCalculated)  {  numericalVariance  =  getNumberOfSuccesses();  }  [BUGGY]    return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	283	283	1	replace	if(numberOfSuccesses  >  1)  {  if(!numericalVarianceIsCalculated)  {  numericalVariance  =  getNumberOfSuccesses();  }	      if(!numericalVarianceIsCalculated)    {    if(!numericalVarianceIsCalculated)    {    numericalVariance    =    calculateNumberOfSuccesses();    if(!numericalVarianceIsCalculated)    {    numericalVariance    =    	non-compiled	[CE]  illegal  start  of  expression	104	None
422	[BUG]  [BUGGY]  double  numericalVariance  =  getSampleSize();  [CE]  missing  return  statement  [CONTEXT]    public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }    [BUGGY]  double  numericalVariance  =  getSampleSize();  [BUGGY]    return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	283	283	1	replace	double  numericalVariance  =  getSampleSize();	      if(!numericalVarianceIsCalculated)    {    if(!numericalVarianceIsCalculated)    {    numericalVariance    =    calculateNumberOfSuccesses();    if(!numericalVarianceIsCalculated)    {    numericalVariance    =    	non-compiled	[CE]  missing  return  statement	104	None
424	[BUG]  [BUGGY]  if(numberOfSuccesses  >  1)  {  if(!numericalVarianceIsCalculated)  {  return  getNumberOfSuccesses();  }  [CE]  illegal  start  of  expression  [CONTEXT]    public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }    [BUGGY]  if(numberOfSuccesses  >  1)  {  if(!numericalVarianceIsCalculated)  {  return  getNumberOfSuccesses();  }  [BUGGY]    return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	283	283	1	replace	if(numberOfSuccesses  >  1)  {  if(!numericalVarianceIsCalculated)  {  return  getNumberOfSuccesses();  }	      if(!numericalVarianceIsCalculated)    {    if(!numericalVarianceIsCalculated)    {    numericalVariance    =    calculateNumberOfSuccesses();    if(!numericalVarianceIsCalculated)    {    numericalVariance    =    	non-compiled	[CE]  illegal  start  of  expression	104	None
442	[BUG]  [BUGGY]  double  numericalVariance  =  getNumberOfSuccesses()  *(numberOfSuccesses  -  1)/(numberOfSuccesses  -  1));  [CE]  ';'  expected  [CONTEXT]    public  double  getNumericalVariance()  {    [BUGGY]  double  numericalVariance  =  getNumberOfSuccesses()  *(numberOfSuccesses  -  1)/(numberOfSuccesses  -  1));  [BUGGY]    if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	279	279	1	replace	double  numericalVariance  =  getNumberOfSuccesses()  *(numberOfSuccesses  -  1)/(numberOfSuccesses  -  1));	      double    numericalVariance    =    getNumberOfSuccesses()    /    2.0;    	non-compiled	[CE]  ';'  expected	4	None
444	[BUG]  [BUGGY]  double  numericalVariance  =  getNumberOfSuccesses()  *(numberOfSuccesses  -  1)/(numberOfSuccesses  -  1);  [CE]  illegal  start  of  type  [CONTEXT]    public  double  getNumericalVariance()  {    [BUGGY]  double  numericalVariance  =  getNumberOfSuccesses()  *(numberOfSuccesses  -  1)/(numberOfSuccesses  -  1);  [BUGGY]    if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	279	279	1	replace	double  numericalVariance  =  getNumberOfSuccesses()  *(numberOfSuccesses  -  1)/(numberOfSuccesses  -  1);	      double    numericalVariance    =    getNumberOfSuccesses()    /    2.0;    	non-compiled	[CE]  illegal  start  of  type	4	None
464	[BUG]  [BUGGY]  numericalVariance  =  calculatePositiveVariance()  /(numericalVarianceIsCalculated);  [CE]  illegal  start  of  type  [CONTEXT]    public  double  getNumericalVariance()  {    [BUGGY]  numericalVariance  =  calculatePositiveVariance()  /(numericalVarianceIsCalculated);  [BUGGY]    numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	279	279	1	replace	numericalVariance  =  calculatePositiveVariance()  /(numericalVarianceIsCalculated);	  if(numericalVarianceIsCalculated)    {    	non-compiled	[CE]  illegal  start  of  type	23	None
481	[BUG]  [BUGGY]  numericalVariance  =  true;  [CE]  incompatible  types  [CONTEXT]    public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();    [BUGGY]  numericalVariance  =  true;  [BUGGY]    numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	281	281	1	replace	numericalVariance  =  true;	      if(!numericalVarianceIsCalculated)    {    if(!numericalVarianceIsCalculated)    {    numericalVariance    =    true;    }    	non-compiled	[CE]  incompatible  types	174	None
483	[BUG]  [BUGGY]  if(!numericalVarianceIsCalculated)  {  if(!numericalVarianceIsCalculated)  {  numericalVariance  =  true;  guessed  [CE]  not  a  statement  [CONTEXT]    public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();    [BUGGY]  if(!numericalVarianceIsCalculated)  {  if(!numericalVarianceIsCalculated)  {  numericalVariance  =  true;  guessed  [BUGGY]    numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	281	281	1	replace	if(!numericalVarianceIsCalculated)  {  if(!numericalVarianceIsCalculated)  {  numericalVariance  =  true;  guessed	      if(!numericalVarianceIsCalculated)    {    if(!numericalVarianceIsCalculated)    {    numericalVariance    =    true;    }    	non-compiled	[CE]  not  a  statement	174	None
484	[BUG]  [BUGGY]  if(!numericalVarianceIsCalculated)  {  if(!numericalVarianceIsCalculated)  {  numericalVariance  =  true;  presumably  [CE]  not  a  statement  [CONTEXT]    public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();    [BUGGY]  if(!numericalVarianceIsCalculated)  {  if(!numericalVarianceIsCalculated)  {  numericalVariance  =  true;  presumably  [BUGGY]    numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	281	281	1	replace	if(!numericalVarianceIsCalculated)  {  if(!numericalVarianceIsCalculated)  {  numericalVariance  =  true;  presumably	      if(!numericalVarianceIsCalculated)    {    if(!numericalVarianceIsCalculated)    {    numericalVariance    =    true;    }    	non-compiled	[CE]  not  a  statement	174	None
503	[BUG]  [BUGGY]  if(getNumberOfSuccesses()  >  1)  {  if(getNumberOfSuccesses()  >  0)  {  return(double)getNumberOfSuccesses();  }  [CE]  illegal  start  of  expression  [CONTEXT]    public  double  getNumericalMean()  {    [BUGGY]  if(getNumberOfSuccesses()  >  1)  {  if(getNumberOfSuccesses()  >  0)  {  return(double)getNumberOfSuccesses();  }  [BUGGY]    return  (double)  (getSampleSize()  *  getNumberOfSuccesses())  /  (double)  getPopulationSize();  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalMean  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	268	268	1	replace	if(getNumberOfSuccesses()  >  1)  {  if(getNumberOfSuccesses()  >  0)  {  return(double)getNumberOfSuccesses();  }	      if(getNumberOfSuccesses()    >    0)    {    if(getNumberOfSuccesses()    >    0)    {    return(double)getNumberOfSuccesses();    }    	non-compiled	[CE]  illegal  start  of  expression	71	None
504	[BUG]  [BUGGY]  return(double)getNumberOfSuccesses();  if(getNumberOfSuccesses()  >  0)  {  return(double)getNumberOfSuccesses();  }  [CE]  unreachable  statement  [CONTEXT]    public  double  getNumericalMean()  {    [BUGGY]  return(double)getNumberOfSuccesses();  if(getNumberOfSuccesses()  >  0)  {  return(double)getNumberOfSuccesses();  }  [BUGGY]    return  (double)  (getSampleSize()  *  getNumberOfSuccesses())  /  (double)  getPopulationSize();  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalMean  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	268	268	1	replace	return(double)getNumberOfSuccesses();  if(getNumberOfSuccesses()  >  0)  {  return(double)getNumberOfSuccesses();  }	      if(getNumberOfSuccesses()    >    0)    {    if(getNumberOfSuccesses()    >    0)    {    return(double)getNumberOfSuccesses();    }    	non-compiled	[CE]  unreachable  statement	71	None
521	[BUG]  [BUGGY]  [FE]  AssertionError  testMath1021  [CONTEXT]    public  int  getSupportLowerBound()  {    [BUGGY]      getNumberOfSuccesses();  int  numberOfSuccesses  =  getNumberOfSuccesses();  [BUGGY]    return  FastMath.max(0,        getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  }  [CLASS]  HypergeometricDistribution  [METHOD]  getSupportLowerBound  [RETURN_TYPE]  int  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	308	309	1	add	        getNumberOfSuccesses();    int  numberOfSuccesses  =  getNumberOfSuccesses();	  	compilable	  [FE]  AssertionError  testMath1021	275	1
522	[BUG]  [BUGGY]      getNumberOfSuccesses();  int  numberOfSuccesses  =  getNumberOfSuccesses();  [FE]  AssertionError  testMath1021  [CONTEXT]    public  int  getSupportLowerBound()  {    [BUGGY]      getNumberOfSuccesses();  int  numberOfSuccesses  =  getNumberOfSuccesses();  [BUGGY]    return  FastMath.max(0,        getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  }  [CLASS]  HypergeometricDistribution  [METHOD]  getSupportLowerBound  [RETURN_TYPE]  int  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	308	309	1	replace	        getNumberOfSuccesses();    int  numberOfSuccesses  =  getNumberOfSuccesses();	  	compilable	  [FE]  AssertionError  testMath1021	275	1
523	[BUG]  [BUGGY]  [FE]  AssertionError  testMath1021  [CONTEXT]    public  int  getSupportLowerBound()  {    [BUGGY]      getNumberOfSuccesses();  int  numberOfSuccesses  =  getNumberOfSuccesses()  -  1;  [BUGGY]    return  FastMath.max(0,        getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  }  [CLASS]  HypergeometricDistribution  [METHOD]  getSupportLowerBound  [RETURN_TYPE]  int  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	308	309	1	add	        getNumberOfSuccesses();    int  numberOfSuccesses  =  getNumberOfSuccesses()  -  1;	  	compilable	  [FE]  AssertionError  testMath1021	275	1
524	[BUG]  [BUGGY]      getNumberOfSuccesses();  int  numberOfSuccesses  =  getNumberOfSuccesses()  -  1;  [FE]  AssertionError  testMath1021  [CONTEXT]    public  int  getSupportLowerBound()  {    [BUGGY]      getNumberOfSuccesses();  int  numberOfSuccesses  =  getNumberOfSuccesses()  -  1;  [BUGGY]    return  FastMath.max(0,        getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  }  [CLASS]  HypergeometricDistribution  [METHOD]  getSupportLowerBound  [RETURN_TYPE]  int  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	308	309	1	replace	        getNumberOfSuccesses();    int  numberOfSuccesses  =  getNumberOfSuccesses()  -  1;	  	compilable	  [FE]  AssertionError  testMath1021	275	1
524	[BUG]  [BUGGY]  [FE]  AssertionError  testMath1021  [CONTEXT]    public  int  getSupportLowerBound()  {    [BUGGY]      getNumberOfSuccesses();  int  numberOfSuccesses  =  getNumberOfSuccesses()  +  1;  [BUGGY]    return  FastMath.max(0,        getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  }  [CLASS]  HypergeometricDistribution  [METHOD]  getSupportLowerBound  [RETURN_TYPE]  int  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	308	309	1	add	        getNumberOfSuccesses();    int  numberOfSuccesses  =  getNumberOfSuccesses()  +  1;	  	compilable	  [FE]  AssertionError  testMath1021	275	1
525	[BUG]  [BUGGY]      getNumberOfSuccesses();  int  numberOfSuccesses  =  getNumberOfSuccesses()  +  1;  [FE]  AssertionError  testMath1021  [CONTEXT]    public  int  getSupportLowerBound()  {    [BUGGY]      getNumberOfSuccesses();  int  numberOfSuccesses  =  getNumberOfSuccesses()  +  1;  [BUGGY]    return  FastMath.max(0,        getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  }  [CLASS]  HypergeometricDistribution  [METHOD]  getSupportLowerBound  [RETURN_TYPE]  int  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	308	309	1	replace	        getNumberOfSuccesses();    int  numberOfSuccesses  =  getNumberOfSuccesses()  +  1;	  	compilable	  [FE]  AssertionError  testMath1021	275	1
525	[BUG]  [BUGGY]  [FE]  AssertionError  testMath1021  [CONTEXT]    public  int  getSupportLowerBound()  {    [BUGGY]      getNumberOfSuccesses();  int  numberOfSuccesses  =  getNumberOfSuccesses()  /  2;  [BUGGY]    return  FastMath.max(0,        getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  }  [CLASS]  HypergeometricDistribution  [METHOD]  getSupportLowerBound  [RETURN_TYPE]  int  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	308	309	1	add	        getNumberOfSuccesses();    int  numberOfSuccesses  =  getNumberOfSuccesses()  /  2;	  	compilable	  [FE]  AssertionError  testMath1021	275	1
526	[BUG]  [BUGGY]      getNumberOfSuccesses();  int  numberOfSuccesses  =  getNumberOfSuccesses()  /  2;  [FE]  AssertionError  testMath1021  [CONTEXT]    public  int  getSupportLowerBound()  {    [BUGGY]      getNumberOfSuccesses();  int  numberOfSuccesses  =  getNumberOfSuccesses()  /  2;  [BUGGY]    return  FastMath.max(0,        getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  }  [CLASS]  HypergeometricDistribution  [METHOD]  getSupportLowerBound  [RETURN_TYPE]  int  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	308	309	1	replace	        getNumberOfSuccesses();    int  numberOfSuccesses  =  getNumberOfSuccesses()  /  2;	  	compilable	  [FE]  AssertionError  testMath1021	275	1
542	[BUG]  [BUGGY]  final  double  dx  =  getKind();  [CE]  cannot  find  symbol  [CONTEXT]    protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();  final  double  m  =  getNumberOfSuccesses();  final  double  n  =  getSampleSize();    [BUGGY]  final  double  dx  =  getKind();  [BUGGY]    return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	295	295	1	replace	final  double  dx  =  getKind();	      final    double    k    =    getNumberOfSuccesses();    	non-compiled	[CE]  cannot  find  symbol	384	None
543	[BUG]  [BUGGY]  final  double  k  =  getKind()  /(n  -  m);  [CE]  cannot  find  symbol  [CONTEXT]    protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();  final  double  m  =  getNumberOfSuccesses();  final  double  n  =  getSampleSize();    [BUGGY]  final  double  k  =  getKind()  /(n  -  m);  [BUGGY]    return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	295	295	1	replace	final  double  k  =  getKind()  /(n  -  m);	      final    double    k    =    getNumberOfSuccesses();    	non-compiled	[CE]  cannot  find  symbol	384	None
544	[BUG]  [BUGGY]  final  double  k  =  getKind()  /  dx;  [CE]  cannot  find  symbol  [CONTEXT]    protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();  final  double  m  =  getNumberOfSuccesses();  final  double  n  =  getSampleSize();    [BUGGY]  final  double  k  =  getKind()  /  dx;  [BUGGY]    return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	295	295	1	replace	final  double  k  =  getKind()  /  dx;	      final    double    k    =    getNumberOfSuccesses();    	non-compiled	[CE]  cannot  find  symbol	384	None
561	[BUG]  [BUGGY]  double  numericalVariance  =  Math.floor(getMean(),  getSlope());  [CE]  cannot  find  symbol  [CONTEXT]    public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {    [BUGGY]  double  numericalVariance  =  Math.floor(getMean(),  getSlope());  [BUGGY]    numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	280	280	1	replace	double  numericalVariance  =  Math.floor(getMean(),  getSlope());	      double    numericalVariance    =    Math.floor(getMean());    	non-compiled	[CE]  cannot  find  symbol	245	None
562	[BUG]  [BUGGY]  double  numericalVariance  =  Math.floor(getMean(),  getNumberOfSuccesses());  [CE]  cannot  find  symbol  [CONTEXT]    public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {    [BUGGY]  double  numericalVariance  =  Math.floor(getMean(),  getNumberOfSuccesses());  [BUGGY]    numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	280	280	1	replace	double  numericalVariance  =  Math.floor(getMean(),  getNumberOfSuccesses());	      double    numericalVariance    =    Math.floor(getMean());    	non-compiled	[CE]  cannot  find  symbol	245	None
564	[BUG]  [BUGGY]  double  numericalVariance  =  Math.floor(getMean(),  getHorizontalVariance());  [CE]  cannot  find  symbol  [CONTEXT]    public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {    [BUGGY]  double  numericalVariance  =  Math.floor(getMean(),  getHorizontalVariance());  [BUGGY]    numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	280	280	1	replace	double  numericalVariance  =  Math.floor(getMean(),  getHorizontalVariance());	      double    numericalVariance    =    Math.floor(getMean());    	non-compiled	[CE]  cannot  find  symbol	245	None
583	[BUG]  [BUGGY]  if(numericVarianceIsCalculated)  {  [CE]  cannot  find  symbol  numericVarianceIsCalculated  [CONTEXT]    public  double  getNumericalVariance()  {    [BUGGY]  if(numericVarianceIsCalculated)  {  [BUGGY]    numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	279	279	1	replace	if(numericVarianceIsCalculated)  {	  if(numericalVarianceIsCalculated)    {    	non-compiled	[CE]  cannot  find  symbol  numericVarianceIsCalculated	23	None
602	[BUG]  [BUGGY]  final  double  n  =  getSampleNumberOfSuccesses().doubleValue();  [CE]  cannot  find  symbol  [CONTEXT]    protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();  final  double  m  =  getNumberOfSuccesses();    [BUGGY]  final  double  n  =  getSampleNumberOfSuccesses().doubleValue();  [BUGGY]    return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	294	294	1	replace	final  double  n  =  getSampleNumberOfSuccesses().doubleValue();	  final    double    n    =    getSampleNumberOfSuccesses();    	non-compiled	[CE]  cannot  find  symbol	333	None
603	[BUG]  [BUGGY]  final  double  n  =  getSampleNumberOfSuccesses()  +  1;  [CE]  cannot  find  symbol  [CONTEXT]    protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();  final  double  m  =  getNumberOfSuccesses();    [BUGGY]  final  double  n  =  getSampleNumberOfSuccesses()  +  1;  [BUGGY]    return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	294	294	1	replace	final  double  n  =  getSampleNumberOfSuccesses()  +  1;	  final    double    n    =    getSampleNumberOfSuccesses();    	non-compiled	[CE]  cannot  find  symbol	333	None
604	[BUG]  [BUGGY]  final  double  n  =  getSampleNumberOfSuccesses()  *  N;  [CE]  cannot  find  symbol  [CONTEXT]    protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();  final  double  m  =  getNumberOfSuccesses();    [BUGGY]  final  double  n  =  getSampleNumberOfSuccesses()  *  N;  [BUGGY]    return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	294	294	1	replace	final  double  n  =  getSampleNumberOfSuccesses()  *  N;	  final    double    n    =    getSampleNumberOfSuccesses();    	non-compiled	[CE]  cannot  find  symbol	333	None
623	[BUG]  [BUGGY]  final  double  k  =  getKind()  /  K;  [CE]  cannot  find  symbol  [CONTEXT]    protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();    [BUGGY]  final  double  k  =  getKind()  /  K;  [BUGGY]    final  double  n  =  getSampleSize();  return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	293	293	1	replace	final  double  k  =  getKind()  /  K;	  final    double    m    =    getNumberOfSuccesses()    *    2;    	non-compiled	[CE]  cannot  find  symbol	184	None
624	[BUG]  [BUGGY]  final  double  k  =  getKind()  /  2.0;  [CE]  cannot  find  symbol  [CONTEXT]    protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();    [BUGGY]  final  double  k  =  getKind()  /  2.0;  [BUGGY]    final  double  n  =  getSampleSize();  return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	293	293	1	replace	final  double  k  =  getKind()  /  2.0;	  final    double    m    =    getNumberOfSuccesses()    *    2;    	non-compiled	[CE]  cannot  find  symbol	184	None
641	[BUG]  [BUGGY]  numericalVariance  =  getNumberOfSuccesses()  /  2;  [CE]  missing  return  statement  [CONTEXT]    public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }    [BUGGY]  numericalVariance  =  getNumberOfSuccesses()  /  2;  [BUGGY]    return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	283	283	1	replace	numericalVariance  =  getNumberOfSuccesses()  /  2;	      if(!numericalVarianceIsCalculated)    {    if(!numericalVarianceIsCalculated)    {    numericalVariance    =    null;    }    	non-compiled	[CE]  missing  return  statement	102	None
643	[BUG]  [BUGGY]  numericalVariance  =  getNumberOfSuccesses()  /  2.0;  [CE]  missing  return  statement  [CONTEXT]    public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }    [BUGGY]  numericalVariance  =  getNumberOfSuccesses()  /  2.0;  [BUGGY]    return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	283	283	1	replace	numericalVariance  =  getNumberOfSuccesses()  /  2.0;	      if(!numericalVarianceIsCalculated)    {    if(!numericalVarianceIsCalculated)    {    numericalVariance    =    null;    }    	non-compiled	[CE]  missing  return  statement	102	None
661	[BUG]  [BUGGY]  final  double  k  =  getKind()  *  getNumberOfSuccesses();  [CE]  cannot  find  symbol  [CONTEXT]    protected  double  calculateNumericalVariance()  {    [BUGGY]  final  double  k  =  getKind()  *  getNumberOfSuccesses();  [BUGGY]    final  double  N  =  getPopulationSize();  final  double  m  =  getNumberOfSuccesses();  final  double  n  =  getSampleSize();  return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	292	292	1	replace	final  double  k  =  getKind()  *  getNumberOfSuccesses();	      double    N    =    getNumberOfSuccesses();    	non-compiled	[CE]  cannot  find  symbol	163	None
662	[BUG]  [BUGGY]  final  double  k  =  getNumericalVariance()  *  getNumberOfSuccesses();  [CE]  cannot  find  symbol  N  [CONTEXT]    protected  double  calculateNumericalVariance()  {    [BUGGY]  final  double  k  =  getNumericalVariance()  *  getNumberOfSuccesses();  [BUGGY]    final  double  N  =  getPopulationSize();  final  double  m  =  getNumberOfSuccesses();  final  double  n  =  getSampleSize();  return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	292	292	1	replace	final  double  k  =  getNumericalVariance()  *  getNumberOfSuccesses();	      double    N    =    getNumberOfSuccesses();    	non-compiled	[CE]  cannot  find  symbol  N	163	None
663	[BUG]  [BUGGY]  final  double  k  =  getNumberOfSuccesses()  *  getKind();  [CE]  cannot  find  symbol  [CONTEXT]    protected  double  calculateNumericalVariance()  {    [BUGGY]  final  double  k  =  getNumberOfSuccesses()  *  getKind();  [BUGGY]    final  double  N  =  getPopulationSize();  final  double  m  =  getNumberOfSuccesses();  final  double  n  =  getSampleSize();  return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	292	292	1	replace	final  double  k  =  getNumberOfSuccesses()  *  getKind();	      double    N    =    getNumberOfSuccesses();    	non-compiled	[CE]  cannot  find  symbol	163	None
664	[BUG]  [BUGGY]  final  double  k  =  getNumberOfSuccesses()  *  getKindCount();  [CE]  cannot  find  symbol  [CONTEXT]    protected  double  calculateNumericalVariance()  {    [BUGGY]  final  double  k  =  getNumberOfSuccesses()  *  getKindCount();  [BUGGY]    final  double  N  =  getPopulationSize();  final  double  m  =  getNumberOfSuccesses();  final  double  n  =  getSampleSize();  return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	292	292	1	replace	final  double  k  =  getNumberOfSuccesses()  *  getKindCount();	      double    N    =    getNumberOfSuccesses();    	non-compiled	[CE]  cannot  find  symbol	163	None
684	[BUG]  [BUGGY]  if(!numericalVarianceIsCalculated  &&!super.getNumericalVariance()  ||!numericalVarianceIsCalculated  &&!numericalVarianceIsCalculated)  {  [CE]  illegal  start  of  expression  [CONTEXT]    public  int  getSupportLowerBound()  {    [BUGGY]  if(!numericalVarianceIsCalculated  &&!super.getNumericalVariance()  ||!numericalVarianceIsCalculated  &&!numericalVarianceIsCalculated)  {  [BUGGY]    return  FastMath.max(0,        getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  }  [CLASS]  HypergeometricDistribution  [METHOD]  getSupportLowerBound  [RETURN_TYPE]  int  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	308	309	1	replace	if(!numericalVarianceIsCalculated  &&!super.getNumericalVariance()  ||!numericalVarianceIsCalculated  &&!numericalVarianceIsCalculated)  {	      getNumberOfSuccesses()    -    getPopulationSize());    	non-compiled	[CE]  illegal  start  of  expression	61	None
701	[BUG]  [BUGGY]  return  numericalVariance  *  numberOfSuccesses;  if(numberOfSuccesses  >  0)  {  int  numberOfSuccesses  =  getNumberOfSuccesses();  if(numberOfSuccesses  >  1)  {  return  numericalVariance  *  numberOfSuccesses;  }  [CE]  illegal  start  of  expression  [CONTEXT]    public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }    [BUGGY]  return  numericalVariance  *  numberOfSuccesses;  if(numberOfSuccesses  >  0)  {  int  numberOfSuccesses  =  getNumberOfSuccesses();  if(numberOfSuccesses  >  1)  {  return  numericalVariance  *  numberOfSuccesses;  }  [BUGGY]    }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	283	283	1	replace	return    numericalVariance    *    numberOfSuccesses;    if(numberOfSuccesses  >  0)  {  int  numberOfSuccesses  =  getNumberOfSuccesses();  if(numberOfSuccesses  >  1)  {  return  numericalVariance  *  numberOfSuccesses;  }	  	non-compiled	[CE]  illegal  start  of  expression	342	None
702	[BUG]  [BUGGY]  return  numericalVariance  *  numberOfSuccesses;  int  numberOfSuccesses  =  getNumberOfSuccesses();  [CE]  unreachable  statement  [CONTEXT]    public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }    [BUGGY]  return  numericalVariance  *  numberOfSuccesses;  int  numberOfSuccesses  =  getNumberOfSuccesses();  [BUGGY]    }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	283	283	1	replace	return    numericalVariance    *    numberOfSuccesses;    int  numberOfSuccesses  =  getNumberOfSuccesses();	  	non-compiled	[CE]  unreachable  statement	342	None
703	[BUG]  [BUGGY]  return  numericalVariance  *  numberOfSuccesses;  if(numberOfSuccesses  >  0)  {  int  numberOfSuccesses  =  getNumberOfSuccesses();  if(numberOfSuccesses  >  1)  {  return  numericalVariance  *  numberOfSuccesses  +  1;  }  [CE]  illegal  start  of  expression  [CONTEXT]    public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }    [BUGGY]  return  numericalVariance  *  numberOfSuccesses;  if(numberOfSuccesses  >  0)  {  int  numberOfSuccesses  =  getNumberOfSuccesses();  if(numberOfSuccesses  >  1)  {  return  numericalVariance  *  numberOfSuccesses  +  1;  }  [BUGGY]    }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	283	283	1	replace	return    numericalVariance    *    numberOfSuccesses;    if(numberOfSuccesses  >  0)  {  int  numberOfSuccesses  =  getNumberOfSuccesses();  if(numberOfSuccesses  >  1)  {  return  numericalVariance  *  numberOfSuccesses  +  1;  }	  	non-compiled	[CE]  illegal  start  of  expression	342	None
704	[BUG]  [BUGGY]  return  numericalVariance  *  numberOfSuccesses;  if(numberOfSuccesses  >  0)  {  int  numberOfSuccesses  =  getNumberOfSuccesses();  if(numberOfSuccesses  >  1)  {  return  numericalVariance  /  numberOfSuccesses;  }  [CE]  illegal  start  of  expression  [CONTEXT]    public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }    [BUGGY]  return  numericalVariance  *  numberOfSuccesses;  if(numberOfSuccesses  >  0)  {  int  numberOfSuccesses  =  getNumberOfSuccesses();  if(numberOfSuccesses  >  1)  {  return  numericalVariance  /  numberOfSuccesses;  }  [BUGGY]    }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	283	283	1	replace	return    numericalVariance    *    numberOfSuccesses;    if(numberOfSuccesses  >  0)  {  int  numberOfSuccesses  =  getNumberOfSuccesses();  if(numberOfSuccesses  >  1)  {  return  numericalVariance  /  numberOfSuccesses;  }	  	non-compiled	[CE]  illegal  start  of  expression	342	None
705	[BUG]  [BUGGY]  return  numericalVariance  *  numberOfSuccesses;  if(numberOfSuccesses  >  0)  {  int  numberOfSuccesses  =  getNumberOfSuccesses();  if(numberOfSuccesses  >  0)  {  return  numericalVariance  *  numberOfSuccesses;  }  [CE]  illegal  start  of  expression  [CONTEXT]    public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }    [BUGGY]  return  numericalVariance  *  numberOfSuccesses;  if(numberOfSuccesses  >  0)  {  int  numberOfSuccesses  =  getNumberOfSuccesses();  if(numberOfSuccesses  >  0)  {  return  numericalVariance  *  numberOfSuccesses;  }  [BUGGY]    }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	283	283	1	replace	return    numericalVariance    *    numberOfSuccesses;    if(numberOfSuccesses  >  0)  {  int  numberOfSuccesses  =  getNumberOfSuccesses();  if(numberOfSuccesses  >  0)  {  return  numericalVariance  *  numberOfSuccesses;  }	  	non-compiled	[CE]  illegal  start  of  expression	342	None
724	[BUG]  [BUGGY]  numericalVariance  =  getNumberOfSuccesses()  /(double)numberOfSuccesses);  [CE]  ';'  expected  [CONTEXT]    public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();    [BUGGY]  numericalVariance  =  getNumberOfSuccesses()  /(double)numberOfSuccesses);  [BUGGY]    }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	281	281	1	replace	numericalVariance  =  getNumberOfSuccesses()  /(double)numberOfSuccesses);	      	non-compiled	[CE]  ';'  expected	126	None
762	[BUG]  [BUGGY]  checkNumberOfSuccesses(),  numericVariance;  [CE]  ';'  expected  [CONTEXT]    public  double  getNumericalMean()  {    [BUGGY]  checkNumberOfSuccesses(),  numericVariance;  [BUGGY]    return  (double)  (getSampleSize()  *  getNumberOfSuccesses())  /  (double)  getPopulationSize();  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalMean  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	268	268	1	replace	checkNumberOfSuccesses(),  numericVariance;	      getNumberOfSuccesses();    	non-compiled	[CE]  ';'  expected	422	None
763	[BUG]  [BUGGY]  checkNumberOfSuccesses()  /(numberOfSuccesses);  [CE]  not  a  statement  [CONTEXT]    public  double  getNumericalMean()  {    [BUGGY]  checkNumberOfSuccesses()  /(numberOfSuccesses);  [BUGGY]    return  (double)  (getSampleSize()  *  getNumberOfSuccesses())  /  (double)  getPopulationSize();  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalMean  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	268	268	1	replace	checkNumberOfSuccesses()  /(numberOfSuccesses);	      getNumberOfSuccesses();    	non-compiled	[CE]  not  a  statement	422	None
764	[BUG]  [BUGGY]  checkNumberOfSuccesses(),  numericVariance);  [CE]  ';'  expected  [CONTEXT]    public  double  getNumericalMean()  {    [BUGGY]  checkNumberOfSuccesses(),  numericVariance);  [BUGGY]    return  (double)  (getSampleSize()  *  getNumberOfSuccesses())  /  (double)  getPopulationSize();  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalMean  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	268	268	1	replace	checkNumberOfSuccesses(),  numericVariance);	      getNumberOfSuccesses();    	non-compiled	[CE]  ';'  expected	422	None
781	[BUG]  [BUGGY]  numericalVariance  =  getNumberOfSuccesses();  [CE]  missing  return  statement  [CONTEXT]    public  int  getSupportLowerBound()  {    [BUGGY]  numericalVariance  =  getNumberOfSuccesses();  [BUGGY]    getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  }  [CLASS]  HypergeometricDistribution  [METHOD]  getSupportLowerBound  [RETURN_TYPE]  int  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	308	309	1	replace	numericalVariance  =  getNumberOfSuccesses();	      	non-compiled	[CE]  missing  return  statement	5	None
782	[BUG]  [BUGGY]  numericalVariance  =  Math.max(numberOfSuccesses  /  2);  [CE]  no  suitable  method  found  for  max(int)  [CONTEXT]    public  int  getSupportLowerBound()  {    [BUGGY]  numericalVariance  =  Math.max(numberOfSuccesses  /  2);  [BUGGY]    getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  }  [CLASS]  HypergeometricDistribution  [METHOD]  getSupportLowerBound  [RETURN_TYPE]  int  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	308	309	1	replace	numericalVariance  =  Math.max(numberOfSuccesses  /  2);	      	non-compiled	[CE]  no  suitable  method  found  for  max(int)	5	None
783	[BUG]  [BUGGY]  numericalVariance  =  Math.sqrt(numberOfSuccesses  /  2);  [CE]  missing  return  statement  [CONTEXT]    public  int  getSupportLowerBound()  {    [BUGGY]  numericalVariance  =  Math.sqrt(numberOfSuccesses  /  2);  [BUGGY]    getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  }  [CLASS]  HypergeometricDistribution  [METHOD]  getSupportLowerBound  [RETURN_TYPE]  int  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	308	309	1	replace	numericalVariance  =  Math.sqrt(numberOfSuccesses  /  2);	      	non-compiled	[CE]  missing  return  statement	5	None
784	[BUG]  [BUGGY]  numericalVariance  =  getNumberOfSuccesses()  /  2;  [CE]  missing  return  statement  [CONTEXT]    public  int  getSupportLowerBound()  {    [BUGGY]  numericalVariance  =  getNumberOfSuccesses()  /  2;  [BUGGY]    getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  }  [CLASS]  HypergeometricDistribution  [METHOD]  getSupportLowerBound  [RETURN_TYPE]  int  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	308	309	1	replace	numericalVariance  =  getNumberOfSuccesses()  /  2;	      	non-compiled	[CE]  missing  return  statement	5	None
804	[BUG]  [BUGGY]  final  double  k  =  getNumberOfCase()  +  1;  [CE]  cannot  find  symbol  [CONTEXT]    public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {    [BUGGY]  final  double  k  =  getNumberOfCase()  +  1;  [BUGGY]    numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	280	280	1	replace	final  double  k  =  getNumberOfCase()  +  1;	      if(!numericalVarianceIsCalculated)    {    if(!numericalVarianceIsCalculated)    {    return    -1;    }    	non-compiled	[CE]  cannot  find  symbol	45	None
821	[BUG]  [BUGGY]  [FE]  AssertionError  testMoments  [CONTEXT]    public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();    [BUGGY]  numericalVarianceIsCalculated  =  false;  numericalVariance  =  getNumberOfSuccesses();  [BUGGY]    }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	281	281	1	add	numericalVarianceIsCalculated    =    false;    numericalVariance  =  getNumberOfSuccesses();	  	compilable	  [FE]  AssertionError  testMoments	121	1
822	[BUG]  [BUGGY]  numericalVarianceIsCalculated  =  false;  numericalVariance  =  getNumberOfSuccesses();  [FE]  AssertionError  testMoments  [CONTEXT]    public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();    [BUGGY]  numericalVarianceIsCalculated  =  false;  numericalVariance  =  getNumberOfSuccesses();  [BUGGY]    }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	281	281	1	replace	numericalVarianceIsCalculated    =    false;    numericalVariance  =  getNumberOfSuccesses();	  	compilable	  [FE]  AssertionError  testMoments	121	1
822	[BUG]  [BUGGY]  numericalVarianceIsCalculated  =  false;  numericalVariance  =  getNumberOfSuccesses()  *(numberOfSuccesses  -  1));  [CE]  ';'  expected  [CONTEXT]    public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();    [BUGGY]  numericalVarianceIsCalculated  =  false;  numericalVariance  =  getNumberOfSuccesses()  *(numberOfSuccesses  -  1));  [BUGGY]    }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	281	281	1	replace	numericalVarianceIsCalculated    =    false;    numericalVariance  =  getNumberOfSuccesses()  *(numberOfSuccesses  -  1));	  	non-compiled	[CE]  ';'  expected	121	None
823	[BUG]  [BUGGY]  numericalVarianceIsCalculated  =  false;  numericalVariance  =  calculateNumberOfSuccesses();  [CE]  cannot  find  symbol  [CONTEXT]    public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();    [BUGGY]  numericalVarianceIsCalculated  =  false;  numericalVariance  =  calculateNumberOfSuccesses();  [BUGGY]    }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	281	281	1	replace	numericalVarianceIsCalculated    =    false;    numericalVariance  =  calculateNumberOfSuccesses();	  	non-compiled	[CE]  cannot  find  symbol	121	None
825	[BUG]  [BUGGY]  [FE]  AssertionError  testMoments  [CONTEXT]    public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();    [BUGGY]  numericalVarianceIsCalculated  =  false;  numericalVariance  =  getNumberOfSuccesses()  *(numberOfSuccesses  /  10);  [BUGGY]    }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	281	281	1	add	numericalVarianceIsCalculated    =    false;    numericalVariance  =  getNumberOfSuccesses()  *(numberOfSuccesses  /  10);	  	compilable	  [FE]  AssertionError  testMoments	121	1
826	[BUG]  [BUGGY]  numericalVarianceIsCalculated  =  false;  numericalVariance  =  getNumberOfSuccesses()  *(numberOfSuccesses  /  10);  [FE]  AssertionError  testMoments  [CONTEXT]    public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();    [BUGGY]  numericalVarianceIsCalculated  =  false;  numericalVariance  =  getNumberOfSuccesses()  *(numberOfSuccesses  /  10);  [BUGGY]    }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	281	281	1	replace	numericalVarianceIsCalculated    =    false;    numericalVariance  =  getNumberOfSuccesses()  *(numberOfSuccesses  /  10);	  	compilable	  [FE]  AssertionError  testMoments	121	1
842	[BUG]  [BUGGY]  numericalVarianceIsCalculated  =(numbericalVariance  ==  0)?  false  :  numericalVariance.doubleValue();  [CE]  cannot  find  symbol  numbericalVariance  [CONTEXT]    public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();    [BUGGY]  numericalVarianceIsCalculated  =(numbericalVariance  ==  0)?  false  :  numericalVariance.doubleValue();  [BUGGY]    }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	281	281	1	replace	numericalVarianceIsCalculated  =(numbericalVariance  ==  0)?  false  :  numericalVariance.doubleValue();	  numericalVarianceIsCalculated    =    false;    	non-compiled	[CE]  cannot  find  symbol  numbericalVariance	122	None
843	[BUG]  [BUGGY]  numericalVarianceIsCalculated  =(numbericalVariance  ==  0)?  null  :  numericalVariance.doubleValue();  [CE]  cannot  find  symbol  numbericalVariance  [CONTEXT]    public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();    [BUGGY]  numericalVarianceIsCalculated  =(numbericalVariance  ==  0)?  null  :  numericalVariance.doubleValue();  [BUGGY]    }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	281	281	1	replace	numericalVarianceIsCalculated  =(numbericalVariance  ==  0)?  null  :  numericalVariance.doubleValue();	  numericalVarianceIsCalculated    =    false;    	non-compiled	[CE]  cannot  find  symbol  numbericalVariance	122	None
844	[BUG]  [BUGGY]  numericalVarianceIsCalculated  =(numbericalVariance  <  0)?  null  :  numericalVariance.doubleValue();  [CE]  cannot  find  symbol  numbericalVariance  [CONTEXT]    public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();    [BUGGY]  numericalVarianceIsCalculated  =(numbericalVariance  <  0)?  null  :  numericalVariance.doubleValue();  [BUGGY]    }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	281	281	1	replace	numericalVarianceIsCalculated  =(numbericalVariance  <  0)?  null  :  numericalVariance.doubleValue();	  numericalVarianceIsCalculated    =    false;    	non-compiled	[CE]  cannot  find  symbol  numbericalVariance	122	None
863	[BUG]  [BUGGY]  if(numericalVarianceIsCalculated  &&  numericalVarianceIsCalculated)  {  [CE]  illegal  start  of  expression  [CONTEXT]    public  int  getSupportLowerBound()  {    [BUGGY]  if(numericalVarianceIsCalculated  &&  numericalVarianceIsCalculated)  {  [BUGGY]    return  FastMath.max(0,        getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  }  [CLASS]  HypergeometricDistribution  [METHOD]  getSupportLowerBound  [RETURN_TYPE]  int  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	308	309	1	replace	if(numericalVarianceIsCalculated  &&  numericalVarianceIsCalculated)  {	      int    populationSize    =    getPopulationSize();    	non-compiled	[CE]  illegal  start  of  expression	64	None
864	[BUG]  [BUGGY]  if(numbericalVarianceIsCalculated  &&!numericalVarianceIsCalculated)  {  [CE]  illegal  start  of  expression  [CONTEXT]    public  int  getSupportLowerBound()  {    [BUGGY]  if(numbericalVarianceIsCalculated  &&!numericalVarianceIsCalculated)  {  [BUGGY]    return  FastMath.max(0,        getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  }  [CLASS]  HypergeometricDistribution  [METHOD]  getSupportLowerBound  [RETURN_TYPE]  int  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	308	309	1	replace	if(numbericalVarianceIsCalculated  &&!numericalVarianceIsCalculated)  {	      int    populationSize    =    getPopulationSize();    	non-compiled	[CE]  illegal  start  of  expression	64	None
881	[BUG]  [BUGGY]  [FE]  AssertionError  testMoments  [CONTEXT]    public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {    [BUGGY]  numericalVariance  =  getNumberOfSuccesses()  *  Math.pow(10,  0);  [BUGGY]    numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	280	280	1	add	numericalVariance  =  getNumberOfSuccesses()  *  Math.pow(10,  0);	      numericalVariance    =    getNumberOfSuccesses()    *    Math.pow(10,    numberOfSuccesses);    	compilable	  [FE]  AssertionError  testMoments	106	1
882	[BUG]  [BUGGY]  numericalVariance  =  getNumberOfSuccesses()  *  Math.pow(10,  0);  [FE]  AssertionError  testMoments  [CONTEXT]    public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {    [BUGGY]  numericalVariance  =  getNumberOfSuccesses()  *  Math.pow(10,  0);  [BUGGY]    numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	280	280	1	replace	numericalVariance  =  getNumberOfSuccesses()  *  Math.pow(10,  0);	      numericalVariance    =    getNumberOfSuccesses()    *    Math.pow(10,    numberOfSuccesses);    	compilable	  [FE]  AssertionError  testMoments	106	1
903	[BUG]  [BUGGY]  numericalVariance  =  getNumberOfSuccesses()  *(numberOfSuccesses  -  1)/(numberOfSuccesses  -  1));  [CE]  ';'  expected  [CONTEXT]    public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }    [BUGGY]  numericalVariance  =  getNumberOfSuccesses()  *(numberOfSuccesses  -  1)/(numberOfSuccesses  -  1));  [BUGGY]    return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	283	283	1	replace	numericalVariance  =  getNumberOfSuccesses()  *(numberOfSuccesses  -  1)/(numberOfSuccesses  -  1));	      if(!numericalVarianceIsCalculated)    {    if(!numericalVarianceIsCalculated)    {    numericalVariance    =    false;    }    	non-compiled	[CE]  ';'  expected	103	None
904	[BUG]  [BUGGY]  numericalVariance  =  getNumberOfSuccesses()  *(numberOfSuccesses  -  1)/(numberOfSuccesses  -  1);  [CE]  missing  return  statement  [CONTEXT]    public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }    [BUGGY]  numericalVariance  =  getNumberOfSuccesses()  *(numberOfSuccesses  -  1)/(numberOfSuccesses  -  1);  [BUGGY]    return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	283	283	1	replace	numericalVariance  =  getNumberOfSuccesses()  *(numberOfSuccesses  -  1)/(numberOfSuccesses  -  1);	      if(!numericalVarianceIsCalculated)    {    if(!numericalVarianceIsCalculated)    {    numericalVariance    =    false;    }    	non-compiled	[CE]  missing  return  statement	103	None
922	[BUG]  [BUGGY]  double  numericalVariance  =  Math.floor(getMean()  /  numberOfSuccesses  -  1);  [CE]  illegal  start  of  type  [CONTEXT]    public  double  getNumericalVariance()  {    [BUGGY]  double  numericalVariance  =  Math.floor(getMean()  /  numberOfSuccesses  -  1);  [BUGGY]    if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	279	279	1	replace	double  numericalVariance  =  Math.floor(getMean()  /  numberOfSuccesses  -  1);	      double    numericalVariance    =    Math.floor(getMean()    /    numberOfSuccesses);    	non-compiled	[CE]  illegal  start  of  type	544	None
923	[BUG]  [BUGGY]  double  numericalVariance  =  Math.floor(getMean()  /  numberOfSuccesses  +  1);  [CE]  illegal  start  of  type  [CONTEXT]    public  double  getNumericalVariance()  {    [BUGGY]  double  numericalVariance  =  Math.floor(getMean()  /  numberOfSuccesses  +  1);  [BUGGY]    if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	279	279	1	replace	double  numericalVariance  =  Math.floor(getMean()  /  numberOfSuccesses  +  1);	      double    numericalVariance    =    Math.floor(getMean()    /    numberOfSuccesses);    	non-compiled	[CE]  illegal  start  of  type	544	None
924	[BUG]  [BUGGY]  double  numericalVariance  =  Math.floor(getMean()  /  numberOfSuccesses  *  getSize());  [CE]  illegal  start  of  type  [CONTEXT]    public  double  getNumericalVariance()  {    [BUGGY]  double  numericalVariance  =  Math.floor(getMean()  /  numberOfSuccesses  *  getSize());  [BUGGY]    if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	279	279	1	replace	double  numericalVariance  =  Math.floor(getMean()  /  numberOfSuccesses  *  getSize());	      double    numericalVariance    =    Math.floor(getMean()    /    numberOfSuccesses);    	non-compiled	[CE]  illegal  start  of  type	544	None
943	[BUG]  [BUGGY]  [FE]  AssertionError  testMoments  [CONTEXT]    public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();    [BUGGY]  numericalVariance  =  Math.max(numberOfSuccesses,  numberOfSuccesses  -  1);  [BUGGY]    numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	281	281	1	add	numericalVariance  =  Math.max(numberOfSuccesses,  numberOfSuccesses  -  1);	      numericalVariance    =    Math.max(numberOfSuccesses,    x    -    1);    	compilable	  [FE]  AssertionError  testMoments	155	1
944	[BUG]  [BUGGY]  numericalVariance  =  Math.max(numberOfSuccesses,  numberOfSuccesses  -  1);  [FE]  AssertionError  testMoments  [CONTEXT]    public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();    [BUGGY]  numericalVariance  =  Math.max(numberOfSuccesses,  numberOfSuccesses  -  1);  [BUGGY]    numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	281	281	1	replace	numericalVariance  =  Math.max(numberOfSuccesses,  numberOfSuccesses  -  1);	      numericalVariance    =    Math.max(numberOfSuccesses,    x    -    1);    	compilable	  [FE]  AssertionError  testMoments	155	1
983	[BUG]  [BUGGY]  [FE]  AssertionError  testMath1021  [CONTEXT]    public  int  getSupportLowerBound()  {    [BUGGY]      int  populationSize  =  getNumberOfSuccesses();  int  numberOfSuccesses  =  getNumberOfSuccesses()  -  1;  [BUGGY]    return  FastMath.max(0,        getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  }  [CLASS]  HypergeometricDistribution  [METHOD]  getSupportLowerBound  [RETURN_TYPE]  int  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	308	309	1	add	        int    populationSize    =    getNumberOfSuccesses();    int  numberOfSuccesses  =  getNumberOfSuccesses()  -  1;	  	compilable	  [FE]  AssertionError  testMath1021	65	1
984	[BUG]  [BUGGY]      int  populationSize  =  getNumberOfSuccesses();  int  numberOfSuccesses  =  getNumberOfSuccesses()  -  1;  [FE]  AssertionError  testMath1021  [CONTEXT]    public  int  getSupportLowerBound()  {    [BUGGY]      int  populationSize  =  getNumberOfSuccesses();  int  numberOfSuccesses  =  getNumberOfSuccesses()  -  1;  [BUGGY]    return  FastMath.max(0,        getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  }  [CLASS]  HypergeometricDistribution  [METHOD]  getSupportLowerBound  [RETURN_TYPE]  int  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	308	309	1	replace	        int    populationSize    =    getNumberOfSuccesses();    int  numberOfSuccesses  =  getNumberOfSuccesses()  -  1;	  	compilable	  [FE]  AssertionError  testMath1021	65	1
984	[BUG]  [BUGGY]  [FE]  AssertionError  testMath1021  [CONTEXT]    public  int  getSupportLowerBound()  {    [BUGGY]      int  populationSize  =  getNumberOfSuccesses();  int  numberOfSuccesses  =  getPopulationSize()  -  1;  [BUGGY]    return  FastMath.max(0,        getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  }  [CLASS]  HypergeometricDistribution  [METHOD]  getSupportLowerBound  [RETURN_TYPE]  int  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	308	309	1	add	        int    populationSize    =    getNumberOfSuccesses();    int  numberOfSuccesses  =  getPopulationSize()  -  1;	  	compilable	  [FE]  AssertionError  testMath1021	65	1
985	[BUG]  [BUGGY]      int  populationSize  =  getNumberOfSuccesses();  int  numberOfSuccesses  =  getPopulationSize()  -  1;  [FE]  AssertionError  testMath1021  [CONTEXT]    public  int  getSupportLowerBound()  {    [BUGGY]      int  populationSize  =  getNumberOfSuccesses();  int  numberOfSuccesses  =  getPopulationSize()  -  1;  [BUGGY]    return  FastMath.max(0,        getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  }  [CLASS]  HypergeometricDistribution  [METHOD]  getSupportLowerBound  [RETURN_TYPE]  int  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	308	309	1	replace	        int    populationSize    =    getNumberOfSuccesses();    int  numberOfSuccesses  =  getPopulationSize()  -  1;	  	compilable	  [FE]  AssertionError  testMath1021	65	1
1002	[BUG]  [BUGGY]  if(numericalVarianceIsCalculated)  {  if(!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateStdNumericalVariance();  }  [CE]  cannot  find  symbol  [CONTEXT]    public  double  getNumericalVariance()  {    [BUGGY]  if(numericalVarianceIsCalculated)  {  if(!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateStdNumericalVariance();  }  [BUGGY]    if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	279	279	1	replace	if(numericalVarianceIsCalculated)  {  if(!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateStdNumericalVariance();  }	      if(!numericalVarianceIsCalculated)    {    if(!numericalVarianceIsCalculated)    {    numericalVariance    =    calculateStdNumericalVariance();    }    	non-compiled	[CE]  cannot  find  symbol	15	None
1003	[BUG]  [BUGGY]  if(!numericalVarianceIsCalculated)  {  if(!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateStdNumericalVariance();  meanwhile  [CE]  illegal  start  of  expression  [CONTEXT]    public  double  getNumericalVariance()  {    [BUGGY]  if(!numericalVarianceIsCalculated)  {  if(!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateStdNumericalVariance();  meanwhile  [BUGGY]    if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	279	279	1	replace	if(!numericalVarianceIsCalculated)  {  if(!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateStdNumericalVariance();  meanwhile	      if(!numericalVarianceIsCalculated)    {    if(!numericalVarianceIsCalculated)    {    numericalVariance    =    calculateStdNumericalVariance();    }    	non-compiled	[CE]  illegal  start  of  expression	15	None
1004	[BUG]  [BUGGY]  numericalVariance  =  calculateStdNumericalVariance();  [CE]  illegal  start  of  type  [CONTEXT]    public  double  getNumericalVariance()  {    [BUGGY]  numericalVariance  =  calculateStdNumericalVariance();  [BUGGY]    if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	279	279	1	replace	numericalVariance  =  calculateStdNumericalVariance();	      if(!numericalVarianceIsCalculated)    {    if(!numericalVarianceIsCalculated)    {    numericalVariance    =    calculateStdNumericalVariance();    }    	non-compiled	[CE]  illegal  start  of  type	15	None
1021	[BUG]  [BUGGY]  return  FastMath.max(0,  getNumberOfSuccesses()  +  getSampleSize()  -  getPopulationSize());  int  numberOfSuccesses  =  getNumberOfSuccesses();  [CE]  unreachable  statement  [CONTEXT]    public  int  getSupportLowerBound()  {    [BUGGY]  return  FastMath.max(0,  getNumberOfSuccesses()  +  getSampleSize()  -  getPopulationSize());  int  numberOfSuccesses  =  getNumberOfSuccesses();  [BUGGY]    getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  }  [CLASS]  HypergeometricDistribution  [METHOD]  getSupportLowerBound  [RETURN_TYPE]  int  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	308	309	1	replace	return    FastMath.max(0,    getNumberOfSuccesses()    +    getSampleSize()    -    getPopulationSize());    int  numberOfSuccesses  =  getNumberOfSuccesses();	  	non-compiled	[CE]  unreachable  statement	2	None
1022	[BUG]  [BUGGY]  return  FastMath.max(0,  getNumberOfSuccesses()  +  getSampleSize()  -  getPopulationSize());  getNumberOfSuccesses()  +  getSampleSize()  -  getPopulationSize());  [CE]  not  a  statement  [CONTEXT]    public  int  getSupportLowerBound()  {    [BUGGY]  return  FastMath.max(0,  getNumberOfSuccesses()  +  getSampleSize()  -  getPopulationSize());  getNumberOfSuccesses()  +  getSampleSize()  -  getPopulationSize());  [BUGGY]    getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  }  [CLASS]  HypergeometricDistribution  [METHOD]  getSupportLowerBound  [RETURN_TYPE]  int  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	308	309	1	replace	return    FastMath.max(0,    getNumberOfSuccesses()    +    getSampleSize()    -    getPopulationSize());    getNumberOfSuccesses()  +  getSampleSize()  -  getPopulationSize());	  	non-compiled	[CE]  not  a  statement	2	None
1023	[BUG]  [BUGGY]  return  FastMath.max(0,  getNumberOfSuccesses()  +  getSampleSize()  -  getPopulationSize());  int  n  =  getNumberOfSuccesses();  [CE]  unreachable  statement  [CONTEXT]    public  int  getSupportLowerBound()  {    [BUGGY]  return  FastMath.max(0,  getNumberOfSuccesses()  +  getSampleSize()  -  getPopulationSize());  int  n  =  getNumberOfSuccesses();  [BUGGY]    getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  }  [CLASS]  HypergeometricDistribution  [METHOD]  getSupportLowerBound  [RETURN_TYPE]  int  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	308	309	1	replace	return    FastMath.max(0,    getNumberOfSuccesses()    +    getSampleSize()    -    getPopulationSize());    int  n  =  getNumberOfSuccesses();	  	non-compiled	[CE]  unreachable  statement	2	None
1024	[BUG]  [BUGGY]  return  FastMath.max(0,  getNumberOfSuccesses()  +  getSampleSize()  -  getPopulationSize());  int  numberOfSuccesses  =  getNumberOfSuccesses()  -  getPopulationSize();  [CE]  unreachable  statement  [CONTEXT]    public  int  getSupportLowerBound()  {    [BUGGY]  return  FastMath.max(0,  getNumberOfSuccesses()  +  getSampleSize()  -  getPopulationSize());  int  numberOfSuccesses  =  getNumberOfSuccesses()  -  getPopulationSize();  [BUGGY]    getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  }  [CLASS]  HypergeometricDistribution  [METHOD]  getSupportLowerBound  [RETURN_TYPE]  int  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	308	309	1	replace	return    FastMath.max(0,    getNumberOfSuccesses()    +    getSampleSize()    -    getPopulationSize());    int  numberOfSuccesses  =  getNumberOfSuccesses()  -  getPopulationSize();	  	non-compiled	[CE]  unreachable  statement	2	None
1042	[BUG]  [BUGGY]  n  =  getNumberOfSuccesses()  +  Math.max(n,  N);  [CE]  cannot  find  symbol  n  [CONTEXT]    public  double  getNumericalMean()  {    [BUGGY]  n  =  getNumberOfSuccesses()  +  Math.max(n,  N);  [BUGGY]    return  (double)  (getSampleSize()  *  getNumberOfSuccesses())  /  (double)  getPopulationSize();  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalMean  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	268	268	1	replace	n  =  getNumberOfSuccesses()  +  Math.max(n,  N);	      int    k    =    getNumberOfSuccesses();    	non-compiled	[CE]  cannot  find  symbol  n	363	None
1061	[BUG]  [BUGGY]  [FE]  AssertionError  testMath1021  [CONTEXT]    public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();    [BUGGY]  numericalVarianceIsCalculated  =(numericalVariance  <  0)?  numericalVarianceIsCalculated  :  true;  [BUGGY]    }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	281	281	1	add	numericalVarianceIsCalculated  =(numericalVariance  <  0)?  numericalVarianceIsCalculated  :  true;	  numericalVarianceIsCalculated    =(numericalVariance    <    0)?    numericalVarianceIsCalculated    :    false;    	compilable	  [FE]  AssertionError  testMath1021	393	1
1062	[BUG]  [BUGGY]  numericalVarianceIsCalculated  =(numericalVariance  <  0)?  numericalVarianceIsCalculated  :  true;  [FE]  AssertionError  testMath1021  [CONTEXT]    public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();    [BUGGY]  numericalVarianceIsCalculated  =(numericalVariance  <  0)?  numericalVarianceIsCalculated  :  true;  [BUGGY]    }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	281	281	1	replace	numericalVarianceIsCalculated  =(numericalVariance  <  0)?  numericalVarianceIsCalculated  :  true;	  numericalVarianceIsCalculated    =(numericalVariance    <    0)?    numericalVarianceIsCalculated    :    false;    	compilable	  [FE]  AssertionError  testMath1021	393	1
1063	[BUG]  [BUGGY]  numericalVarianceIsCalculated  =(numbericalVariance  <  0)?  numericalVarianceIsCalculated  :  true;  [CE]  cannot  find  symbol  numbericalVariance  [CONTEXT]    public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();    [BUGGY]  numericalVarianceIsCalculated  =(numbericalVariance  <  0)?  numericalVarianceIsCalculated  :  true;  [BUGGY]    }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	281	281	1	replace	numericalVarianceIsCalculated  =(numbericalVariance  <  0)?  numericalVarianceIsCalculated  :  true;	  numericalVarianceIsCalculated    =(numericalVariance    <    0)?    numericalVarianceIsCalculated    :    false;    	non-compiled	[CE]  cannot  find  symbol  numbericalVariance	393	None
1081	[BUG]  [BUGGY]  [FE]  AssertionError  testMath1021  [CONTEXT]    public  double  getNumericalVariance()  {    [BUGGY]      double  numericalVariance  =  Math.max(getNumberOfSuccesses(),  numberOfSuccesses);  int  numberOfSuccesses  =  getNumberOfSuccesses();  [BUGGY]    if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	279	279	1	add	        double    numericalVariance    =    Math.max(getNumberOfSuccesses(),    numberOfSuccesses);    int  numberOfSuccesses  =  getNumberOfSuccesses();	  	compilable	  [FE]  AssertionError  testMath1021	542	1
1082	[BUG]  [BUGGY]      double  numericalVariance  =  Math.max(getNumberOfSuccesses(),  numberOfSuccesses);  int  numberOfSuccesses  =  getNumberOfSuccesses();  [FE]  AssertionError  testMath1021  [CONTEXT]    public  double  getNumericalVariance()  {    [BUGGY]      double  numericalVariance  =  Math.max(getNumberOfSuccesses(),  numberOfSuccesses);  int  numberOfSuccesses  =  getNumberOfSuccesses();  [BUGGY]    if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	279	279	1	replace	        double    numericalVariance    =    Math.max(getNumberOfSuccesses(),    numberOfSuccesses);    int  numberOfSuccesses  =  getNumberOfSuccesses();	  	compilable	  [FE]  AssertionError  testMath1021	542	1
1082	[BUG]  [BUGGY]      double  numericalVariance  =  Math.max(getNumberOfSuccesses(),  numberOfSuccesses);  double  numericalVariance  =  Math.min(getSampleSize(),  getNumberOfSuccesses());  [CE]  variable  numericalVariance  is  already  defined  in  method  getNumericalVariance()  [CONTEXT]    public  double  getNumericalVariance()  {    [BUGGY]      double  numericalVariance  =  Math.max(getNumberOfSuccesses(),  numberOfSuccesses);  double  numericalVariance  =  Math.min(getSampleSize(),  getNumberOfSuccesses());  [BUGGY]    if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	279	279	1	replace	        double    numericalVariance    =    Math.max(getNumberOfSuccesses(),    numberOfSuccesses);    double  numericalVariance  =  Math.min(getSampleSize(),  getNumberOfSuccesses());	  	non-compiled	[CE]  variable  numericalVariance  is  already  defined  in  method  getNumericalVariance()	542	None
1083	[BUG]  [BUGGY]      double  numericalVariance  =  Math.max(getNumberOfSuccesses(),  numberOfSuccesses);  if(numberOfSuccesses  >  1)  {  if(numberOfSuccesses  >  1)  {  numericalVariance  =  Math.min(getNumberOfSuccesses(),  numberOfSuccesses);  }  [CE]  illegal  start  of  expression  [CONTEXT]    public  double  getNumericalVariance()  {    [BUGGY]      double  numericalVariance  =  Math.max(getNumberOfSuccesses(),  numberOfSuccesses);  if(numberOfSuccesses  >  1)  {  if(numberOfSuccesses  >  1)  {  numericalVariance  =  Math.min(getNumberOfSuccesses(),  numberOfSuccesses);  }  [BUGGY]    if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	279	279	1	replace	        double    numericalVariance    =    Math.max(getNumberOfSuccesses(),    numberOfSuccesses);    if(numberOfSuccesses  >  1)  {  if(numberOfSuccesses  >  1)  {  numericalVariance  =  Math.min(getNumberOfSuccesses(),  numberOfSuccesses);  }	  	non-compiled	[CE]  illegal  start  of  expression	542	None
1084	[BUG]  [BUGGY]      double  numericalVariance  =  Math.max(getNumberOfSuccesses(),  numberOfSuccesses);  if(numberOfSuccesses  >  1)  {  if(!numberOfSuccesses.isEmpty())  {  numericalVariance  =  Math.min(getNumberOfSuccesses(),  numberOfSuccesses);  }  [CE]  illegal  start  of  expression  [CONTEXT]    public  double  getNumericalVariance()  {    [BUGGY]      double  numericalVariance  =  Math.max(getNumberOfSuccesses(),  numberOfSuccesses);  if(numberOfSuccesses  >  1)  {  if(!numberOfSuccesses.isEmpty())  {  numericalVariance  =  Math.min(getNumberOfSuccesses(),  numberOfSuccesses);  }  [BUGGY]    if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	279	279	1	replace	        double    numericalVariance    =    Math.max(getNumberOfSuccesses(),    numberOfSuccesses);    if(numberOfSuccesses  >  1)  {  if(!numberOfSuccesses.isEmpty())  {  numericalVariance  =  Math.min(getNumberOfSuccesses(),  numberOfSuccesses);  }	  	non-compiled	[CE]  illegal  start  of  expression	542	None
1085	[BUG]  [BUGGY]      double  numericalVariance  =  Math.max(getNumberOfSuccesses(),  numberOfSuccesses);  if(numberOfSuccesses  >  1)  {  if(!numberOfSuccesses.isEmpty())  {  numericalVariance  =  Math.min(getNumberOfSuccesses(),  getSampleSize());  }  [CE]  illegal  start  of  expression  [CONTEXT]    public  double  getNumericalVariance()  {    [BUGGY]      double  numericalVariance  =  Math.max(getNumberOfSuccesses(),  numberOfSuccesses);  if(numberOfSuccesses  >  1)  {  if(!numberOfSuccesses.isEmpty())  {  numericalVariance  =  Math.min(getNumberOfSuccesses(),  getSampleSize());  }  [BUGGY]    if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	279	279	1	replace	        double    numericalVariance    =    Math.max(getNumberOfSuccesses(),    numberOfSuccesses);    if(numberOfSuccesses  >  1)  {  if(!numberOfSuccesses.isEmpty())  {  numericalVariance  =  Math.min(getNumberOfSuccesses(),  getSampleSize());  }	  	non-compiled	[CE]  illegal  start  of  expression	542	None
1123	[BUG]  [BUGGY]  final  double  N  =  getNumberOfHyphens()  /  2;  [CE]  cannot  find  symbol  [CONTEXT]    protected  double  calculateNumericalVariance()  {    [BUGGY]  final  double  N  =  getNumberOfHyphens()  /  2;  [BUGGY]    final  double  m  =  getNumberOfSuccesses();  final  double  n  =  getSampleSize();  return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	292	292	1	replace	final  double  N  =  getNumberOfHyphens()  /  2;	  final    double    N    =    getNumberOfHyphens();    	non-compiled	[CE]  cannot  find  symbol	283	None
1124	[BUG]  [BUGGY]  final  double  N  =  getNumberOfHyphens()  +  1;  [CE]  cannot  find  symbol  [CONTEXT]    protected  double  calculateNumericalVariance()  {    [BUGGY]  final  double  N  =  getNumberOfHyphens()  +  1;  [BUGGY]    final  double  m  =  getNumberOfSuccesses();  final  double  n  =  getSampleSize();  return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	292	292	1	replace	final  double  N  =  getNumberOfHyphens()  +  1;	  final    double    N    =    getNumberOfHyphens();    	non-compiled	[CE]  cannot  find  symbol	283	None
1162	[BUG]  [BUGGY]  final  double  k  =  getDecimalOfKind();  [CE]  cannot  find  symbol  [CONTEXT]    protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();  final  double  m  =  getNumberOfSuccesses();    [BUGGY]  final  double  k  =  getDecimalOfKind();  [BUGGY]    final  double  n  =  getSampleSize();  return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	294	294	1	replace	final  double  k  =  getDecimalOfKind();	      final    double    k    =    getNumberOfSuccesses();    	non-compiled	[CE]  cannot  find  symbol	303	None
1164	[BUG]  [BUGGY]  final  double  k  =  getKindOfMethod();  [CE]  cannot  find  symbol  [CONTEXT]    protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();  final  double  m  =  getNumberOfSuccesses();    [BUGGY]  final  double  k  =  getKindOfMethod();  [BUGGY]    final  double  n  =  getSampleSize();  return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	294	294	1	replace	final  double  k  =  getKindOfMethod();	      final    double    k    =    getNumberOfSuccesses();    	non-compiled	[CE]  cannot  find  symbol	303	None
1183	[BUG]  [BUGGY]  if(numericalVariance  ==  null)  {  if(!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();  }  [CE]  incomparable  types:  double  and  <null>  [CONTEXT]    public  double  getNumericalVariance()  {    [BUGGY]  if(numericalVariance  ==  null)  {  if(!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();  }  [BUGGY]    if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	279	279	1	replace	if(numericalVariance  ==  null)  {  if(!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();  }	      if(numericalVariance!=    null)    {    if(!numericalVarianceIsCalculated)    {    numericalVariance    =    calculateNumberOfSuccesses();    }    	non-compiled	[CE]  incomparable  types:  double  and  <null>	14	None
1184	[BUG]  [BUGGY]  if(numericalVariance!=  null)  {  if(!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();  }  [CE]  incomparable  types:  double  and  <null>  [CONTEXT]    public  double  getNumericalVariance()  {    [BUGGY]  if(numericalVariance!=  null)  {  if(!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();  }  [BUGGY]    if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	279	279	1	replace	if(numericalVariance!=  null)  {  if(!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();  }	      if(numericalVariance!=    null)    {    if(!numericalVarianceIsCalculated)    {    numericalVariance    =    calculateNumberOfSuccesses();    }    	non-compiled	[CE]  incomparable  types:  double  and  <null>	14	None
1222	[BUG]  [BUGGY]  n  =  getNumberOfSuccesses()  *  Math.pow(Math.PI,  n);  [CE]  cannot  find  symbol  n  [CONTEXT]    public  double  getNumericalMean()  {    [BUGGY]  n  =  getNumberOfSuccesses()  *  Math.pow(Math.PI,  n);  [BUGGY]    return  (double)  (getSampleSize()  *  getNumberOfSuccesses())  /  (double)  getPopulationSize();  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalMean  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	268	268	1	replace	n  =  getNumberOfSuccesses()  *  Math.pow(Math.PI,  n);	      if(getNumberOfSuccesses()    >    0)    {    int    k    =    getNumberOfSuccesses();    if(k    >    0)    {    return    getNumberOfSuccesses()    *    getNumberOfSuccesses();    }    	non-compiled	[CE]  cannot  find  symbol  n	365	None
1243	[BUG]  [BUGGY]  final  double  k  =  getNumericalVariance();  [CE]  missing  return  statement  [CONTEXT]    protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();  final  double  m  =  getNumberOfSuccesses();  final  double  n  =  getSampleSize();    [BUGGY]  final  double  k  =  getNumericalVariance();  [BUGGY]    return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	295	295	1	replace	final  double  k  =  getNumericalVariance();	      final    double    m    =    getNumericalVariance();    	non-compiled	[CE]  missing  return  statement	382	None
1262	[BUG]  [BUGGY]  final  double  n  =  getDecimalNumberOfSuccesses();  [CE]  cannot  find  symbol  [CONTEXT]    protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();  final  double  m  =  getNumberOfSuccesses();    [BUGGY]  final  double  n  =  getDecimalNumberOfSuccesses();  [BUGGY]    return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	294	294	1	replace	final  double  n  =  getDecimalNumberOfSuccesses();	  final    double    n    =    getDecimalSize();    	non-compiled	[CE]  cannot  find  symbol	83	None
1263	[BUG]  [BUGGY]  final  double  n  =  getDecimalSize()  +  sampleSize;  [CE]  cannot  find  symbol  [CONTEXT]    protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();  final  double  m  =  getNumberOfSuccesses();    [BUGGY]  final  double  n  =  getDecimalSize()  +  sampleSize;  [BUGGY]    return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	294	294	1	replace	final  double  n  =  getDecimalSize()  +  sampleSize;	  final    double    n    =    getDecimalSize();    	non-compiled	[CE]  cannot  find  symbol	83	None
1264	[BUG]  [BUGGY]  final  double  n  =  getDecimalNumber();  [CE]  cannot  find  symbol  [CONTEXT]    protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();  final  double  m  =  getNumberOfSuccesses();    [BUGGY]  final  double  n  =  getDecimalNumber();  [BUGGY]    return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	294	294	1	replace	final  double  n  =  getDecimalNumber();	  final    double    n    =    getDecimalSize();    	non-compiled	[CE]  cannot  find  symbol	83	None
1282	[BUG]  [BUGGY]  int  numberOfSuccesses  =  getPopulationSize()  /(numberOfSuccesses  -  1);  [CE]  variable  numberOfSuccesses  might  not  have  been  initialized  [CONTEXT]    public  int  getSupportLowerBound()  {    [BUGGY]  int  numberOfSuccesses  =  getPopulationSize()  /(numberOfSuccesses  -  1);  [BUGGY]    getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  }  [CLASS]  HypergeometricDistribution  [METHOD]  getSupportLowerBound  [RETURN_TYPE]  int  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	308	309	1	replace	int  numberOfSuccesses  =  getPopulationSize()  /(numberOfSuccesses  -  1);	      	non-compiled	[CE]  variable  numberOfSuccesses  might  not  have  been  initialized	5	None
1284	[BUG]  [BUGGY]  int  numberOfSuccesses  =  getNumberOfSuccesses()  /(numberOfSuccesses  -  1);  [CE]  variable  numberOfSuccesses  might  not  have  been  initialized  [CONTEXT]    public  int  getSupportLowerBound()  {    [BUGGY]  int  numberOfSuccesses  =  getNumberOfSuccesses()  /(numberOfSuccesses  -  1);  [BUGGY]    getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  }  [CLASS]  HypergeometricDistribution  [METHOD]  getSupportLowerBound  [RETURN_TYPE]  int  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	308	309	1	replace	int  numberOfSuccesses  =  getNumberOfSuccesses()  /(numberOfSuccesses  -  1);	      	non-compiled	[CE]  variable  numberOfSuccesses  might  not  have  been  initialized	5	None
1303	[BUG]  [BUGGY]  getNumberOfSuccesses()  /(double)getPopulationSize();  [CE]  not  a  statement  [CONTEXT]    public  double  getNumericalMean()  {    [BUGGY]  getNumberOfSuccesses()  /(double)getPopulationSize();  [BUGGY]    return  (double)  (getSampleSize()  *  getNumberOfSuccesses())  /  (double)  getPopulationSize();  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalMean  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	268	268	1	replace	getNumberOfSuccesses()  /(double)getPopulationSize();	      getNumberOfSuccesses();    	non-compiled	[CE]  not  a  statement	422	None
1304	[BUG]  [BUGGY]  getNumberOfSuccesses()  /(double)getSampleSize();  [CE]  not  a  statement  [CONTEXT]    public  double  getNumericalMean()  {    [BUGGY]  getNumberOfSuccesses()  /(double)getSampleSize();  [BUGGY]    return  (double)  (getSampleSize()  *  getNumberOfSuccesses())  /  (double)  getPopulationSize();  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalMean  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	268	268	1	replace	getNumberOfSuccesses()  /(double)getSampleSize();	      getNumberOfSuccesses();    	non-compiled	[CE]  not  a  statement	422	None
1322	[BUG]  [BUGGY]  numericalVariance  =  calculateVariance(),  numberOfSuccesses);  [CE]  ';'  expected  [CONTEXT]    public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {    [BUGGY]  numericalVariance  =  calculateVariance(),  numberOfSuccesses);  [BUGGY]    numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	280	280	1	replace	numericalVariance  =  calculateVariance(),  numberOfSuccesses);	  numericalVariance    =    calculateVariance();    	non-compiled	[CE]  ';'  expected	573	None
1324	[BUG]  [BUGGY]  numericalVariance  =  calculateVariance()  /(numberOfSuccesses  -  1));  [CE]  ';'  expected  [CONTEXT]    public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {    [BUGGY]  numericalVariance  =  calculateVariance()  /(numberOfSuccesses  -  1));  [BUGGY]    numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	280	280	1	replace	numericalVariance  =  calculateVariance()  /(numberOfSuccesses  -  1));	  numericalVariance    =    calculateVariance();    	non-compiled	[CE]  ';'  expected	573	None
1341	[BUG]  [BUGGY]  int  numberOfSuccesses  =  getPopulationSize()  /  2.0;  [CE]  possible  loss  of  precision  [CONTEXT]    public  int  getSupportLowerBound()  {    [BUGGY]  int  numberOfSuccesses  =  getPopulationSize()  /  2.0;  [BUGGY]    getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  }  [CLASS]  HypergeometricDistribution  [METHOD]  getSupportLowerBound  [RETURN_TYPE]  int  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	308	309	1	replace	int  numberOfSuccesses  =  getPopulationSize()  /  2.0;	  return    FastMath.max(0,    getNumberOfSuccesses()    +    getSampleSize()    -    getPopulationSize());    	non-compiled	[CE]  possible  loss  of  precision	3	None
1342	[BUG]  [BUGGY]  double  numericalVariance  =  getNumberOfSuccesses()  /  2.0;  [CE]  missing  return  statement  [CONTEXT]    public  int  getSupportLowerBound()  {    [BUGGY]  double  numericalVariance  =  getNumberOfSuccesses()  /  2.0;  [BUGGY]    getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  }  [CLASS]  HypergeometricDistribution  [METHOD]  getSupportLowerBound  [RETURN_TYPE]  int  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	308	309	1	replace	double  numericalVariance  =  getNumberOfSuccesses()  /  2.0;	  return    FastMath.max(0,    getNumberOfSuccesses()    +    getSampleSize()    -    getPopulationSize());    	non-compiled	[CE]  missing  return  statement	3	None
1343	[BUG]  [BUGGY]  if(numberOfSuccesses  >  1)  {  if(!numericalVarianceIsCalculated)  {  numericalVariance  =  getNumberOfSuccesses()  /  2.0;  }  [CE]  illegal  start  of  expression  [CONTEXT]    public  int  getSupportLowerBound()  {    [BUGGY]  if(numberOfSuccesses  >  1)  {  if(!numericalVarianceIsCalculated)  {  numericalVariance  =  getNumberOfSuccesses()  /  2.0;  }  [BUGGY]    getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  }  [CLASS]  HypergeometricDistribution  [METHOD]  getSupportLowerBound  [RETURN_TYPE]  int  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	308	309	1	replace	if(numberOfSuccesses  >  1)  {  if(!numericalVarianceIsCalculated)  {  numericalVariance  =  getNumberOfSuccesses()  /  2.0;  }	  return    FastMath.max(0,    getNumberOfSuccesses()    +    getSampleSize()    -    getPopulationSize());    	non-compiled	[CE]  illegal  start  of  expression	3	None
1344	[BUG]  [BUGGY]  if(numberOfSuccesses  >  1)  {  if(!numericalVarianceIsCalculated)  {  numericalVariance  =  getNumberOfSuccesses();  }  [CE]  illegal  start  of  expression  [CONTEXT]    public  int  getSupportLowerBound()  {    [BUGGY]  if(numberOfSuccesses  >  1)  {  if(!numericalVarianceIsCalculated)  {  numericalVariance  =  getNumberOfSuccesses();  }  [BUGGY]    getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  }  [CLASS]  HypergeometricDistribution  [METHOD]  getSupportLowerBound  [RETURN_TYPE]  int  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	308	309	1	replace	if(numberOfSuccesses  >  1)  {  if(!numericalVarianceIsCalculated)  {  numericalVariance  =  getNumberOfSuccesses();  }	  return    FastMath.max(0,    getNumberOfSuccesses()    +    getSampleSize()    -    getPopulationSize());    	non-compiled	[CE]  illegal  start  of  expression	3	None
1361	[BUG]  [BUGGY]  int  k  =  getNumberOfSuccesses()  -  1;  [CE]  missing  return  statement  [CONTEXT]    public  double  getNumericalMean()  {    [BUGGY]  int  k  =  getNumberOfSuccesses()  -  1;  [BUGGY]    return  (double)  (getSampleSize()  *  getNumberOfSuccesses())  /  (double)  getPopulationSize();  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalMean  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	268	268	1	replace	int  k  =  getNumberOfSuccesses()  -  1;	      int    k    =    getNumberOfSuccesses();    	non-compiled	[CE]  missing  return  statement	363	None
1362	[BUG]  [BUGGY]  int  k  =  getNumberOfSuccesses()  /  2;  [CE]  missing  return  statement  [CONTEXT]    public  double  getNumericalMean()  {    [BUGGY]  int  k  =  getNumberOfSuccesses()  /  2;  [BUGGY]    return  (double)  (getSampleSize()  *  getNumberOfSuccesses())  /  (double)  getPopulationSize();  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalMean  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	268	268	1	replace	int  k  =  getNumberOfSuccesses()  /  2;	      int    k    =    getNumberOfSuccesses();    	non-compiled	[CE]  missing  return  statement	363	None
1364	[BUG]  [BUGGY]  int  k  =  getNumberOfSuccesses()  /(numberOfSuccesses);  [CE]  missing  return  statement  [CONTEXT]    public  double  getNumericalMean()  {    [BUGGY]  int  k  =  getNumberOfSuccesses()  /(numberOfSuccesses);  [BUGGY]    return  (double)  (getSampleSize()  *  getNumberOfSuccesses())  /  (double)  getPopulationSize();  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalMean  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	268	268	1	replace	int  k  =  getNumberOfSuccesses()  /(numberOfSuccesses);	      int    k    =    getNumberOfSuccesses();    	non-compiled	[CE]  missing  return  statement	363	None
1404	[BUG]  [BUGGY]  final  double  k  =  getNumberOfDay()  -  1;  [CE]  cannot  find  symbol  [CONTEXT]    public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {    [BUGGY]  final  double  k  =  getNumberOfDay()  -  1;  [BUGGY]    numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	280	280	1	replace	final  double  k  =  getNumberOfDay()  -  1;	      if(!numericalVarianceIsCalculated)    {    if(!numericalVarianceIsCalculated)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  cannot  find  symbol	44	None
1422	[BUG]  [BUGGY]      int  numberOfSuccesses  =  getNumberOfSuccesses();  int  numberOfSuccesses  =  getNumberOfSuccesses()  -  1;  [CE]  variable  numberOfSuccesses  is  already  defined  in  method  getSupportLowerBound()  [CONTEXT]    public  int  getSupportLowerBound()  {    [BUGGY]      int  numberOfSuccesses  =  getNumberOfSuccesses();  int  numberOfSuccesses  =  getNumberOfSuccesses()  -  1;  [BUGGY]    return  FastMath.max(0,        getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  }  [CLASS]  HypergeometricDistribution  [METHOD]  getSupportLowerBound  [RETURN_TYPE]  int  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	308	309	1	replace	        int    numberOfSuccesses    =    getNumberOfSuccesses();    int  numberOfSuccesses  =  getNumberOfSuccesses()  -  1;	  	non-compiled	[CE]  variable  numberOfSuccesses  is  already  defined  in  method  getSupportLowerBound()	81	None
1423	[BUG]  [BUGGY]      int  numberOfSuccesses  =  getNumberOfSuccesses();  int  numberOfSuccesses  =  getNumberOfSuccesses();  [CE]  variable  numberOfSuccesses  is  already  defined  in  method  getSupportLowerBound()  [CONTEXT]    public  int  getSupportLowerBound()  {    [BUGGY]      int  numberOfSuccesses  =  getNumberOfSuccesses();  int  numberOfSuccesses  =  getNumberOfSuccesses();  [BUGGY]    return  FastMath.max(0,        getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  }  [CLASS]  HypergeometricDistribution  [METHOD]  getSupportLowerBound  [RETURN_TYPE]  int  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	308	309	1	replace	        int    numberOfSuccesses    =    getNumberOfSuccesses();    int  numberOfSuccesses  =  getNumberOfSuccesses();	  	non-compiled	[CE]  variable  numberOfSuccesses  is  already  defined  in  method  getSupportLowerBound()	81	None
1424	[BUG]  [BUGGY]      int  numberOfSuccesses  =  getNumberOfSuccesses();  int  numberOfSuccesses  =  getNumberOfSuccesses()  +  1;  [CE]  variable  numberOfSuccesses  is  already  defined  in  method  getSupportLowerBound()  [CONTEXT]    public  int  getSupportLowerBound()  {    [BUGGY]      int  numberOfSuccesses  =  getNumberOfSuccesses();  int  numberOfSuccesses  =  getNumberOfSuccesses()  +  1;  [BUGGY]    return  FastMath.max(0,        getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  }  [CLASS]  HypergeometricDistribution  [METHOD]  getSupportLowerBound  [RETURN_TYPE]  int  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	308	309	1	replace	        int    numberOfSuccesses    =    getNumberOfSuccesses();    int  numberOfSuccesses  =  getNumberOfSuccesses()  +  1;	  	non-compiled	[CE]  variable  numberOfSuccesses  is  already  defined  in  method  getSupportLowerBound()	81	None
1425	[BUG]  [BUGGY]      int  numberOfSuccesses  =  getNumberOfSuccesses();  int  numberOfSuccesses  =  getNumberOfSuccesses()  /  2;  [CE]  variable  numberOfSuccesses  is  already  defined  in  method  getSupportLowerBound()  [CONTEXT]    public  int  getSupportLowerBound()  {    [BUGGY]      int  numberOfSuccesses  =  getNumberOfSuccesses();  int  numberOfSuccesses  =  getNumberOfSuccesses()  /  2;  [BUGGY]    return  FastMath.max(0,        getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  }  [CLASS]  HypergeometricDistribution  [METHOD]  getSupportLowerBound  [RETURN_TYPE]  int  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	308	309	1	replace	        int    numberOfSuccesses    =    getNumberOfSuccesses();    int  numberOfSuccesses  =  getNumberOfSuccesses()  /  2;	  	non-compiled	[CE]  variable  numberOfSuccesses  is  already  defined  in  method  getSupportLowerBound()	81	None
1461	[BUG]  [BUGGY]  [FE]  AssertionError  testMoments  [CONTEXT]    public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {    [BUGGY]  final  double  dx  =  getNumberOfSuccesses()  +  1;  [BUGGY]    numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	280	280	1	add	final  double  dx  =  getNumberOfSuccesses()  +  1;	      if(!numericalVarianceIsCalculated)    {    if(!numericalVarianceIsCalculated)    {    throw    new    IllegalArgumentException(   "   ");    }    	compilable	  [FE]  AssertionError  testMoments	44	1
1462	[BUG]  [BUGGY]  final  double  dx  =  getNumberOfSuccesses()  +  1;  [FE]  AssertionError  testMoments  [CONTEXT]    public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {    [BUGGY]  final  double  dx  =  getNumberOfSuccesses()  +  1;  [BUGGY]    numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	280	280	1	replace	final  double  dx  =  getNumberOfSuccesses()  +  1;	      if(!numericalVarianceIsCalculated)    {    if(!numericalVarianceIsCalculated)    {    throw    new    IllegalArgumentException(   "   ");    }    	compilable	  [FE]  AssertionError  testMoments	44	1
1462	[BUG]  [BUGGY]  final  double  dx  =  getDate();  [CE]  cannot  find  symbol  [CONTEXT]    public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {    [BUGGY]  final  double  dx  =  getDate();  [BUGGY]    numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	280	280	1	replace	final  double  dx  =  getDate();	      if(!numericalVarianceIsCalculated)    {    if(!numericalVarianceIsCalculated)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  cannot  find  symbol	44	None
1464	[BUG]  [BUGGY]  final  double  dx  =  getDouble();  [CE]  cannot  find  symbol  [CONTEXT]    public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {    [BUGGY]  final  double  dx  =  getDouble();  [BUGGY]    numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	280	280	1	replace	final  double  dx  =  getDouble();	      if(!numericalVarianceIsCalculated)    {    if(!numericalVarianceIsCalculated)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  cannot  find  symbol	44	None
1483	[BUG]  [BUGGY]  [FE]  AssertionError  testMath1021  [CONTEXT]    public  double  getNumericalVariance()  {    [BUGGY]  if(numberOfSuccesses  >  0  &&!numericalVarianceIsCalculated  &&  getNumberOfSuccesses()  >  0)  {  [BUGGY]    numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	279	279	1	add	if(numberOfSuccesses  >  0  &&!numericalVarianceIsCalculated  &&  getNumberOfSuccesses()  >  0)  {	  if(!numericalVarianceIsCalculated    &&    getNumberOfSuccesses()    >    0)    {    	compilable	  [FE]  AssertionError  testMath1021	205	1
1484	[BUG]  [BUGGY]  if(numberOfSuccesses  >  0  &&!numericalVarianceIsCalculated  &&  getNumberOfSuccesses()  >  0)  {  [FE]  AssertionError  testMath1021  [CONTEXT]    public  double  getNumericalVariance()  {    [BUGGY]  if(numberOfSuccesses  >  0  &&!numericalVarianceIsCalculated  &&  getNumberOfSuccesses()  >  0)  {  [BUGGY]    numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	279	279	1	replace	if(numberOfSuccesses  >  0  &&!numericalVarianceIsCalculated  &&  getNumberOfSuccesses()  >  0)  {	  if(!numericalVarianceIsCalculated    &&    getNumberOfSuccesses()    >    0)    {    	compilable	  [FE]  AssertionError  testMath1021	205	1
1501	[BUG]  [BUGGY]  final  double  dx  =  getDate();  [CE]  cannot  find  symbol  [CONTEXT]    protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();    [BUGGY]  final  double  dx  =  getDate();  [BUGGY]    final  double  n  =  getSampleSize();  return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	293	293	1	replace	final  double  dx  =  getDate();	  final    double    m    =    getNumberOfSuccesses()    *    2;    	non-compiled	[CE]  cannot  find  symbol	184	None
1502	[BUG]  [BUGGY]  final  double  dx  =  getDouble();  [CE]  cannot  find  symbol  [CONTEXT]    protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();    [BUGGY]  final  double  dx  =  getDouble();  [BUGGY]    final  double  n  =  getSampleSize();  return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	293	293	1	replace	final  double  dx  =  getDouble();	  final    double    m    =    getNumberOfSuccesses()    *    2;    	non-compiled	[CE]  cannot  find  symbol	184	None
1503	[BUG]  [BUGGY]  final  double  dx  =  getNumberOfSuccesses()  +  1;  [CE]  cannot  find  symbol  m  [CONTEXT]    protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();    [BUGGY]  final  double  dx  =  getNumberOfSuccesses()  +  1;  [BUGGY]    final  double  n  =  getSampleSize();  return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	293	293	1	replace	final  double  dx  =  getNumberOfSuccesses()  +  1;	  final    double    m    =    getNumberOfSuccesses()    *    2;    	non-compiled	[CE]  cannot  find  symbol  m	184	None
1521	[BUG]  [BUGGY]  final  double  m  =  getNumberOfSuccesses()  *  2;  final  double  k  =  getKind();  [CE]  cannot  find  symbol  [CONTEXT]    protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();    [BUGGY]  final  double  m  =  getNumberOfSuccesses()  *  2;  final  double  k  =  getKind();  [BUGGY]    final  double  n  =  getSampleSize();  return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	293	293	1	replace	final    double    m    =    getNumberOfSuccesses()    *    2;    final  double  k  =  getKind();	  	non-compiled	[CE]  cannot  find  symbol	183	None
1522	[BUG]  [BUGGY]  final  double  m  =  getNumberOfSuccesses()  *  2;  final  double  k  =  getNumberOfSuccesses();  [CE]  variable  m  is  already  defined  in  method  calculateNumericalVariance()  [CONTEXT]    protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();    [BUGGY]  final  double  m  =  getNumberOfSuccesses()  *  2;  final  double  k  =  getNumberOfSuccesses();  [BUGGY]    final  double  n  =  getSampleSize();  return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	293	293	1	replace	final    double    m    =    getNumberOfSuccesses()    *    2;    final  double  k  =  getNumberOfSuccesses();	  	non-compiled	[CE]  variable  m  is  already  defined  in  method  calculateNumericalVariance()	183	None
1524	[BUG]  [BUGGY]  final  double  m  =  getNumberOfSuccesses()  *  2;  final  double  k  =  getNumericalVariance();  [CE]  variable  m  is  already  defined  in  method  calculateNumericalVariance()  [CONTEXT]    protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();    [BUGGY]  final  double  m  =  getNumberOfSuccesses()  *  2;  final  double  k  =  getNumericalVariance();  [BUGGY]    final  double  n  =  getSampleSize();  return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	293	293	1	replace	final    double    m    =    getNumberOfSuccesses()    *    2;    final  double  k  =  getNumericalVariance();	  	non-compiled	[CE]  variable  m  is  already  defined  in  method  calculateNumericalVariance()	183	None
1525	[BUG]  [BUGGY]  final  double  m  =  getNumberOfSuccesses()  *  2;  final  double  k  =  getKnowNumber();  [CE]  cannot  find  symbol  [CONTEXT]    protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();    [BUGGY]  final  double  m  =  getNumberOfSuccesses()  *  2;  final  double  k  =  getKnowNumber();  [BUGGY]    final  double  n  =  getSampleSize();  return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	293	293	1	replace	final    double    m    =    getNumberOfSuccesses()    *    2;    final  double  k  =  getKnowNumber();	  	non-compiled	[CE]  cannot  find  symbol	183	None
1542	[BUG]  [BUGGY]  final  double  m  =  getNumberOfSuccesses()  *  2;  final  double  k  =  getNumberOfSuccesses()  *  2  +  1;  [CE]  variable  m  is  already  defined  in  method  calculateNumericalVariance()  [CONTEXT]    protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();    [BUGGY]  final  double  m  =  getNumberOfSuccesses()  *  2;  final  double  k  =  getNumberOfSuccesses()  *  2  +  1;  [BUGGY]    final  double  n  =  getSampleSize();  return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	293	293	1	replace	final    double    m    =    getNumberOfSuccesses()    *    2;    final  double  k  =  getNumberOfSuccesses()  *  2  +  1;	  	non-compiled	[CE]  variable  m  is  already  defined  in  method  calculateNumericalVariance()	183	None
1543	[BUG]  [BUGGY]  final  double  m  =  getNumberOfSuccesses()  *  2;  final  double  m  =  getNumberOfSuccesses()  *  2;  [CE]  variable  m  is  already  defined  in  method  calculateNumericalVariance()  [CONTEXT]    protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();    [BUGGY]  final  double  m  =  getNumberOfSuccesses()  *  2;  final  double  m  =  getNumberOfSuccesses()  *  2;  [BUGGY]    final  double  n  =  getSampleSize();  return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	293	293	1	replace	final    double    m    =    getNumberOfSuccesses()    *    2;    final  double  m  =  getNumberOfSuccesses()  *  2;	  	non-compiled	[CE]  variable  m  is  already  defined  in  method  calculateNumericalVariance()	183	None
1544	[BUG]  [BUGGY]  final  double  m  =  getNumberOfSuccesses()  *  2;  final  double  k  =  getNumberOfSuccesses()  *  3;  [CE]  variable  m  is  already  defined  in  method  calculateNumericalVariance()  [CONTEXT]    protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();    [BUGGY]  final  double  m  =  getNumberOfSuccesses()  *  2;  final  double  k  =  getNumberOfSuccesses()  *  3;  [BUGGY]    final  double  n  =  getSampleSize();  return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	293	293	1	replace	final    double    m    =    getNumberOfSuccesses()    *    2;    final  double  k  =  getNumberOfSuccesses()  *  3;	  	non-compiled	[CE]  variable  m  is  already  defined  in  method  calculateNumericalVariance()	183	None
1545	[BUG]  [BUGGY]  final  double  m  =  getNumberOfSuccesses()  *  2;  final  double  k  =  getNumberOfSuccesses()  *  1;  [CE]  variable  m  is  already  defined  in  method  calculateNumericalVariance()  [CONTEXT]    protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();    [BUGGY]  final  double  m  =  getNumberOfSuccesses()  *  2;  final  double  k  =  getNumberOfSuccesses()  *  1;  [BUGGY]    final  double  n  =  getSampleSize();  return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	293	293	1	replace	final    double    m    =    getNumberOfSuccesses()    *    2;    final  double  k  =  getNumberOfSuccesses()  *  1;	  	non-compiled	[CE]  variable  m  is  already  defined  in  method  calculateNumericalVariance()	183	None
1564	[BUG]  [BUGGY]  int  numberOfSuccesses  =  getNumberOfSuccesses()  *  getPopulationSize();  [CE]  missing  return  statement  [CONTEXT]    public  int  getSupportLowerBound()  {    [BUGGY]  int  numberOfSuccesses  =  getNumberOfSuccesses()  *  getPopulationSize();  [BUGGY]    return  FastMath.max(0,        getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  }  [CLASS]  HypergeometricDistribution  [METHOD]  getSupportLowerBound  [RETURN_TYPE]  int  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	308	309	1	replace	int  numberOfSuccesses  =  getNumberOfSuccesses()  *  getPopulationSize();	      int    numberOfSuccesses    =    getNumberOfSuccesses()    -    getPopulationSize();    	non-compiled	[CE]  missing  return  statement	84	None
1582	[BUG]  [BUGGY]  final  double  m  =  getNumberOfSuccesses()  *  N;  final  double  k  =  getNumberOfSuccesses()  *  N  +  1;  [CE]  variable  m  is  already  defined  in  method  calculateNumericalVariance()  [CONTEXT]    protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();    [BUGGY]  final  double  m  =  getNumberOfSuccesses()  *  N;  final  double  k  =  getNumberOfSuccesses()  *  N  +  1;  [BUGGY]    final  double  n  =  getSampleSize();  return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	293	293	1	replace	final    double    m    =    getNumberOfSuccesses()    *    N;    final  double  k  =  getNumberOfSuccesses()  *  N  +  1;	  	non-compiled	[CE]  variable  m  is  already  defined  in  method  calculateNumericalVariance()	453	None
1584	[BUG]  [BUGGY]  final  double  m  =  getNumberOfSuccesses()  *  N;  final  double  k  =  getNumericalVariance()  *  N;  [CE]  variable  m  is  already  defined  in  method  calculateNumericalVariance()  [CONTEXT]    protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();    [BUGGY]  final  double  m  =  getNumberOfSuccesses()  *  N;  final  double  k  =  getNumericalVariance()  *  N;  [BUGGY]    final  double  n  =  getSampleSize();  return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	293	293	1	replace	final    double    m    =    getNumberOfSuccesses()    *    N;    final  double  k  =  getNumericalVariance()  *  N;	  	non-compiled	[CE]  variable  m  is  already  defined  in  method  calculateNumericalVariance()	453	None
1585	[BUG]  [BUGGY]  final  double  m  =  getNumberOfSuccesses()  *  N;  final  double  k  =  getKind()  *  N;  [CE]  cannot  find  symbol  [CONTEXT]    protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();    [BUGGY]  final  double  m  =  getNumberOfSuccesses()  *  N;  final  double  k  =  getKind()  *  N;  [BUGGY]    final  double  n  =  getSampleSize();  return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	293	293	1	replace	final    double    m    =    getNumberOfSuccesses()    *    N;    final  double  k  =  getKind()  *  N;	  	non-compiled	[CE]  cannot  find  symbol	453	None
1601	[BUG]  [BUGGY]  final  double  k  =  getNumberOfKind();  [CE]  cannot  find  symbol  [CONTEXT]    protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();  final  double  m  =  getNumberOfSuccesses();  final  double  n  =  getSampleSize();    [BUGGY]  final  double  k  =  getNumberOfKind();  [BUGGY]    return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	295	295	1	replace	final  double  k  =  getNumberOfKind();	      final    double    k    =    getNumberOfSuccesses();    	non-compiled	[CE]  cannot  find  symbol	384	None
1603	[BUG]  [BUGGY]  final  double  k  =  getDecimalOfKind();  [CE]  cannot  find  symbol  [CONTEXT]    protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();  final  double  m  =  getNumberOfSuccesses();  final  double  n  =  getSampleSize();    [BUGGY]  final  double  k  =  getDecimalOfKind();  [BUGGY]    return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	295	295	1	replace	final  double  k  =  getDecimalOfKind();	      final    double    k    =    getNumberOfSuccesses();    	non-compiled	[CE]  cannot  find  symbol	384	None
1604	[BUG]  [BUGGY]  final  double  k  =  getNumberOfKits();  [CE]  cannot  find  symbol  [CONTEXT]    protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();  final  double  m  =  getNumberOfSuccesses();  final  double  n  =  getSampleSize();    [BUGGY]  final  double  k  =  getNumberOfKits();  [BUGGY]    return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	295	295	1	replace	final  double  k  =  getNumberOfKits();	      final    double    k    =    getNumberOfSuccesses();    	non-compiled	[CE]  cannot  find  symbol	384	None
1622	[BUG]  [BUGGY]      final  double  k  =  getNumberOfSuccesses();  final  double  dx  =  getDouble();  [CE]  cannot  find  symbol  [CONTEXT]    protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();  final  double  m  =  getNumberOfSuccesses();  final  double  n  =  getSampleSize();    [BUGGY]      final  double  k  =  getNumberOfSuccesses();  final  double  dx  =  getDouble();  [BUGGY]    return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	295	295	1	replace	        final    double    k    =    getNumberOfSuccesses();    final  double  dx  =  getDouble();	  	non-compiled	[CE]  cannot  find  symbol	383	None
1623	[BUG]  [BUGGY]      final  double  k  =  getNumberOfSuccesses();  final  double  dx  =  getDecimalSize();  [CE]  cannot  find  symbol  [CONTEXT]    protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();  final  double  m  =  getNumberOfSuccesses();  final  double  n  =  getSampleSize();    [BUGGY]      final  double  k  =  getNumberOfSuccesses();  final  double  dx  =  getDecimalSize();  [BUGGY]    return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	295	295	1	replace	        final    double    k    =    getNumberOfSuccesses();    final  double  dx  =  getDecimalSize();	  	non-compiled	[CE]  cannot  find  symbol	383	None
1624	[BUG]  [BUGGY]  [FE]  AssertionError  testMath1021  [CONTEXT]    protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();  final  double  m  =  getNumberOfSuccesses();  final  double  n  =  getSampleSize();    [BUGGY]      final  double  k  =  getNumberOfSuccesses();  final  double  dx  =  getNumberOfSuccesses();  [BUGGY]    return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	295	295	1	add	        final    double    k    =    getNumberOfSuccesses();    final  double  dx  =  getNumberOfSuccesses();	  	compilable	  [FE]  AssertionError  testMath1021	383	1
1625	[BUG]  [BUGGY]      final  double  k  =  getNumberOfSuccesses();  final  double  dx  =  getNumberOfSuccesses();  [FE]  AssertionError  testMath1021  [CONTEXT]    protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();  final  double  m  =  getNumberOfSuccesses();  final  double  n  =  getSampleSize();    [BUGGY]      final  double  k  =  getNumberOfSuccesses();  final  double  dx  =  getNumberOfSuccesses();  [BUGGY]    return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	295	295	1	replace	        final    double    k    =    getNumberOfSuccesses();    final  double  dx  =  getNumberOfSuccesses();	  	compilable	  [FE]  AssertionError  testMath1021	383	1
1625	[BUG]  [BUGGY]      final  double  k  =  getNumberOfSuccesses();  final  double  dx  =  getDegree();  [CE]  cannot  find  symbol  [CONTEXT]    protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();  final  double  m  =  getNumberOfSuccesses();  final  double  n  =  getSampleSize();    [BUGGY]      final  double  k  =  getNumberOfSuccesses();  final  double  dx  =  getDegree();  [BUGGY]    return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	295	295	1	replace	        final    double    k    =    getNumberOfSuccesses();    final  double  dx  =  getDegree();	  	non-compiled	[CE]  cannot  find  symbol	383	None
1641	[BUG]  [BUGGY]  [FE]  AssertionError  testMath1021  [CONTEXT]    public  double  getNumericalMean()  {    [BUGGY]      int  k  =  getNumberOfSuccesses();  int  n  =  getNumberOfSuccesses();  [BUGGY]    return  (double)  (getSampleSize()  *  getNumberOfSuccesses())  /  (double)  getPopulationSize();  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalMean  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	268	268	1	add	        int    k    =    getNumberOfSuccesses();    int  n  =  getNumberOfSuccesses();	  	compilable	  [FE]  AssertionError  testMath1021	362	1
1642	[BUG]  [BUGGY]      int  k  =  getNumberOfSuccesses();  int  n  =  getNumberOfSuccesses();  [FE]  AssertionError  testMath1021  [CONTEXT]    public  double  getNumericalMean()  {    [BUGGY]      int  k  =  getNumberOfSuccesses();  int  n  =  getNumberOfSuccesses();  [BUGGY]    return  (double)  (getSampleSize()  *  getNumberOfSuccesses())  /  (double)  getPopulationSize();  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalMean  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	268	268	1	replace	        int    k    =    getNumberOfSuccesses();    int  n  =  getNumberOfSuccesses();	  	compilable	  [FE]  AssertionError  testMath1021	362	1
1642	[BUG]  [BUGGY]      int  k  =  getNumberOfSuccesses();  int  k  =  getNumberOfSuccesses()  -  1;  [CE]  variable  k  is  already  defined  in  method  getNumericalMean()  [CONTEXT]    public  double  getNumericalMean()  {    [BUGGY]      int  k  =  getNumberOfSuccesses();  int  k  =  getNumberOfSuccesses()  -  1;  [BUGGY]    return  (double)  (getSampleSize()  *  getNumberOfSuccesses())  /  (double)  getPopulationSize();  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalMean  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	268	268	1	replace	        int    k    =    getNumberOfSuccesses();    int  k  =  getNumberOfSuccesses()  -  1;	  	non-compiled	[CE]  variable  k  is  already  defined  in  method  getNumericalMean()	362	None
1644	[BUG]  [BUGGY]      int  k  =  getNumberOfSuccesses();  int  k  =  getNumberOfSuccesses()  +  1;  [CE]  variable  k  is  already  defined  in  method  getNumericalMean()  [CONTEXT]    public  double  getNumericalMean()  {    [BUGGY]      int  k  =  getNumberOfSuccesses();  int  k  =  getNumberOfSuccesses()  +  1;  [BUGGY]    return  (double)  (getSampleSize()  *  getNumberOfSuccesses())  /  (double)  getPopulationSize();  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalMean  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	268	268	1	replace	        int    k    =    getNumberOfSuccesses();    int  k  =  getNumberOfSuccesses()  +  1;	  	non-compiled	[CE]  variable  k  is  already  defined  in  method  getNumericalMean()	362	None
1645	[BUG]  [BUGGY]  [FE]  AssertionError  testMath1021  [CONTEXT]    public  double  getNumericalMean()  {    [BUGGY]      int  k  =  getNumberOfSuccesses();  int  m  =  getSampleSize();  [BUGGY]    return  (double)  (getSampleSize()  *  getNumberOfSuccesses())  /  (double)  getPopulationSize();  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalMean  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	268	268	1	add	        int    k    =    getNumberOfSuccesses();    int  m  =  getSampleSize();	  	compilable	  [FE]  AssertionError  testMath1021	362	1
1646	[BUG]  [BUGGY]      int  k  =  getNumberOfSuccesses();  int  m  =  getSampleSize();  [FE]  AssertionError  testMath1021  [CONTEXT]    public  double  getNumericalMean()  {    [BUGGY]      int  k  =  getNumberOfSuccesses();  int  m  =  getSampleSize();  [BUGGY]    return  (double)  (getSampleSize()  *  getNumberOfSuccesses())  /  (double)  getPopulationSize();  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalMean  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	268	268	1	replace	        int    k    =    getNumberOfSuccesses();    int  m  =  getSampleSize();	  	compilable	  [FE]  AssertionError  testMath1021	362	1
1662	[BUG]  [BUGGY]  numericalVariance  =(numericalVariance  ==  1)?  numericalVarianceIsCalculated  :  false;  [CE]  incompatible  types  [CONTEXT]    public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();    [BUGGY]  numericalVariance  =(numericalVariance  ==  1)?  numericalVarianceIsCalculated  :  false;  [BUGGY]    }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	281	281	1	replace	numericalVariance  =(numericalVariance  ==  1)?  numericalVarianceIsCalculated  :  false;	  numericalVarianceIsCalculated    =(numericalVariance    ==    0)?    numericalVarianceIsCalculated    :    false;    	non-compiled	[CE]  incompatible  types	394	None
1664	[BUG]  [BUGGY]  numericalVariance  =(numericalVariance  ==  1)?  numericalVarianceIsCalculated  :  true;  [CE]  incompatible  types  [CONTEXT]    public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();    [BUGGY]  numericalVariance  =(numericalVariance  ==  1)?  numericalVarianceIsCalculated  :  true;  [BUGGY]    }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	281	281	1	replace	numericalVariance  =(numericalVariance  ==  1)?  numericalVarianceIsCalculated  :  true;	  numericalVarianceIsCalculated    =(numericalVariance    ==    0)?    numericalVarianceIsCalculated    :    false;    	non-compiled	[CE]  incompatible  types	394	None
1681	[BUG]  [BUGGY]  [FE]  AssertionError  testMath1021  [CONTEXT]    public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();    [BUGGY]  final  double  k  =  getNumberOfSuccesses();  [BUGGY]    }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	281	281	1	add	final  double  k  =  getNumberOfSuccesses();	  numericalVarianceIsCalculated    =    false;    	compilable	  [FE]  AssertionError  testMath1021	122	1
1682	[BUG]  [BUGGY]  final  double  k  =  getNumberOfSuccesses();  [FE]  AssertionError  testMath1021  [CONTEXT]    public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();    [BUGGY]  final  double  k  =  getNumberOfSuccesses();  [BUGGY]    }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	281	281	1	replace	final  double  k  =  getNumberOfSuccesses();	  numericalVarianceIsCalculated    =    false;    	compilable	  [FE]  AssertionError  testMath1021	122	1
1682	[BUG]  [BUGGY]  final  double  k  =  getKind();  [CE]  cannot  find  symbol  [CONTEXT]    public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();    [BUGGY]  final  double  k  =  getKind();  [BUGGY]    }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	281	281	1	replace	final  double  k  =  getKind();	  numericalVarianceIsCalculated    =    false;    	non-compiled	[CE]  cannot  find  symbol	122	None
1684	[BUG]  [BUGGY]  final  double  k  =  getNumberOfSuccesses().doubleValue();  [CE]  int  cannot  be  dereferenced  [CONTEXT]    public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();    [BUGGY]  final  double  k  =  getNumberOfSuccesses().doubleValue();  [BUGGY]    }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	281	281	1	replace	final  double  k  =  getNumberOfSuccesses().doubleValue();	  numericalVarianceIsCalculated    =    false;    	non-compiled	[CE]  int  cannot  be  dereferenced	122	None
1703	[BUG]  [BUGGY]  final  double  k  =  getDecimalVariance()  *  Math.pow(10,  m);  [CE]  cannot  find  symbol  [CONTEXT]    protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();  final  double  m  =  getNumberOfSuccesses();    [BUGGY]  final  double  k  =  getDecimalVariance()  *  Math.pow(10,  m);  [BUGGY]    final  double  n  =  getSampleSize();  return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	294	294	1	replace	final  double  k  =  getDecimalVariance()  *  Math.pow(10,  m);	      final    double    k    =    getDecimalVariance();    	non-compiled	[CE]  cannot  find  symbol	482	None
1704	[BUG]  [BUGGY]  final  double  k  =  getDecimalVariance()  -  1;  [CE]  cannot  find  symbol  [CONTEXT]    protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();  final  double  m  =  getNumberOfSuccesses();    [BUGGY]  final  double  k  =  getDecimalVariance()  -  1;  [BUGGY]    final  double  n  =  getSampleSize();  return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	294	294	1	replace	final  double  k  =  getDecimalVariance()  -  1;	      final    double    k    =    getDecimalVariance();    	non-compiled	[CE]  cannot  find  symbol	482	None
1724	[BUG]  [BUGGY]  double  numericalVariance  =  getNumberOfSuccesses()  /  2.0  *  2;  [CE]  illegal  start  of  type  [CONTEXT]    public  double  getNumericalVariance()  {    [BUGGY]  double  numericalVariance  =  getNumberOfSuccesses()  /  2.0  *  2;  [BUGGY]    if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	279	279	1	replace	double  numericalVariance  =  getNumberOfSuccesses()  /  2.0  *  2;	      double    numericalVariance    =    getNumberOfSuccesses()    /    2.0;    	non-compiled	[CE]  illegal  start  of  type	4	None
1744	[BUG]  [BUGGY]  numericalVariance  =  calculateStandardVariance()  /(numberOfSuccesses  -  1));  [CE]  ';'  expected  [CONTEXT]    public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {    [BUGGY]  numericalVariance  =  calculateStandardVariance()  /(numberOfSuccesses  -  1));  [BUGGY]    numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	280	280	1	replace	numericalVariance  =  calculateStandardVariance()  /(numberOfSuccesses  -  1));	  numericalVariance    =    calculateStandardVariance();    	non-compiled	[CE]  ';'  expected	574	None
1762	[BUG]  [BUGGY]  numericalVariance  =  calculateNumberOfSuccesses();  if(!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumberOfSuccesses();  if(!numericalVarianceIsCalculated)  {  numericalVariance  =  [CE]  illegal  start  of  expression  [CONTEXT]    public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }    [BUGGY]  numericalVariance  =  calculateNumberOfSuccesses();  if(!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumberOfSuccesses();  if(!numericalVarianceIsCalculated)  {  numericalVariance  =  [BUGGY]    return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	283	283	1	replace	numericalVariance  =  calculateNumberOfSuccesses();  if(!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumberOfSuccesses();  if(!numericalVarianceIsCalculated)  {  numericalVariance  =	      if(!numericalVarianceIsCalculated)    {    if(!numericalVarianceIsCalculated)    {    numericalVariance    =    calculateNumberOfSuccesses();    if(!numericalVarianceIsCalculated)    {    numericalVariance    =    	non-compiled	[CE]  illegal  start  of  expression	104	None
1781	[BUG]  [BUGGY]  final  double  k  =  getNumberOfKind();  [CE]  cannot  find  symbol  [CONTEXT]    protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();    [BUGGY]  final  double  k  =  getNumberOfKind();  [BUGGY]    final  double  m  =  getNumberOfSuccesses();  final  double  n  =  getSampleSize();  return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	293	293	1	replace	final  double  k  =  getNumberOfKind();	      final    double    k    =    getNumberOfSuccesses();    	non-compiled	[CE]  cannot  find  symbol	182	None
1783	[BUG]  [BUGGY]  final  double  k  =  getNumberOfKits();  [CE]  cannot  find  symbol  [CONTEXT]    protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();    [BUGGY]  final  double  k  =  getNumberOfKits();  [BUGGY]    final  double  m  =  getNumberOfSuccesses();  final  double  n  =  getSampleSize();  return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	293	293	1	replace	final  double  k  =  getNumberOfKits();	      final    double    k    =    getNumberOfSuccesses();    	non-compiled	[CE]  cannot  find  symbol	182	None
1784	[BUG]  [BUGGY]  final  double  k  =  getNumberOfKins();  [CE]  cannot  find  symbol  [CONTEXT]    protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();    [BUGGY]  final  double  k  =  getNumberOfKins();  [BUGGY]    final  double  m  =  getNumberOfSuccesses();  final  double  n  =  getSampleSize();  return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	293	293	1	replace	final  double  k  =  getNumberOfKins();	      final    double    k    =    getNumberOfSuccesses();    	non-compiled	[CE]  cannot  find  symbol	182	None
1822	[BUG]  [BUGGY]  super.calculateNumberOfSuccesses(),  numericVarianceIsCalculated;  [CE]  ';'  expected  [CONTEXT]    protected  double  calculateNumericalVariance()  {    [BUGGY]  super.calculateNumberOfSuccesses(),  numericVarianceIsCalculated;  [BUGGY]    final  double  N  =  getPopulationSize();  final  double  m  =  getNumberOfSuccesses();  final  double  n  =  getSampleSize();  return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	292	292	1	replace	super.calculateNumberOfSuccesses(),  numericVarianceIsCalculated;	      super.calculateNumberOfSuccesses();    	non-compiled	[CE]  ';'  expected	215	None
1842	[BUG]  [BUGGY]  return  FastMath.max(0,  getNumberOfSuccesses()  +  getSampleSize()  -  getPopulationSize());  int  numberOfSuccesses  =  Math.min(numberOfSuccesses,  numberOfSuccesses);  [CE]  unreachable  statement  [CONTEXT]    public  int  getSupportLowerBound()  {    [BUGGY]  return  FastMath.max(0,  getNumberOfSuccesses()  +  getSampleSize()  -  getPopulationSize());  int  numberOfSuccesses  =  Math.min(numberOfSuccesses,  numberOfSuccesses);  [BUGGY]    getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  }  [CLASS]  HypergeometricDistribution  [METHOD]  getSupportLowerBound  [RETURN_TYPE]  int  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	308	309	1	replace	return    FastMath.max(0,    getNumberOfSuccesses()    +    getSampleSize()    -    getPopulationSize());    int  numberOfSuccesses  =  Math.min(numberOfSuccesses,  numberOfSuccesses);	  	non-compiled	[CE]  unreachable  statement	2	None
1843	[BUG]  [BUGGY]  return  FastMath.max(0,  getNumberOfSuccesses()  +  getSampleSize()  -  getPopulationSize());  numericalVariance  =  Math.min(numberOfSuccesses,  0);  [CE]  unreachable  statement  [CONTEXT]    public  int  getSupportLowerBound()  {    [BUGGY]  return  FastMath.max(0,  getNumberOfSuccesses()  +  getSampleSize()  -  getPopulationSize());  numericalVariance  =  Math.min(numberOfSuccesses,  0);  [BUGGY]    getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  }  [CLASS]  HypergeometricDistribution  [METHOD]  getSupportLowerBound  [RETURN_TYPE]  int  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	308	309	1	replace	return    FastMath.max(0,    getNumberOfSuccesses()    +    getSampleSize()    -    getPopulationSize());    numericalVariance  =  Math.min(numberOfSuccesses,  0);	  	non-compiled	[CE]  unreachable  statement	2	None
1844	[BUG]  [BUGGY]  return  FastMath.max(0,  getNumberOfSuccesses()  +  getSampleSize()  -  getPopulationSize());  numericalVariance  =  Math.min(numberOfSuccesses,  m);  [CE]  cannot  find  symbol  m  [CONTEXT]    public  int  getSupportLowerBound()  {    [BUGGY]  return  FastMath.max(0,  getNumberOfSuccesses()  +  getSampleSize()  -  getPopulationSize());  numericalVariance  =  Math.min(numberOfSuccesses,  m);  [BUGGY]    getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  }  [CLASS]  HypergeometricDistribution  [METHOD]  getSupportLowerBound  [RETURN_TYPE]  int  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	308	309	1	replace	return    FastMath.max(0,    getNumberOfSuccesses()    +    getSampleSize()    -    getPopulationSize());    numericalVariance  =  Math.min(numberOfSuccesses,  m);	  	non-compiled	[CE]  cannot  find  symbol  m	2	None
1845	[BUG]  [BUGGY]  return  FastMath.max(0,  getNumberOfSuccesses()  +  getSampleSize()  -  getPopulationSize());  int  numberOfSuccesses  =  Math.min(numberOfSuccesses,  numberOfSuccesses  -  1);  [CE]  unreachable  statement  [CONTEXT]    public  int  getSupportLowerBound()  {    [BUGGY]  return  FastMath.max(0,  getNumberOfSuccesses()  +  getSampleSize()  -  getPopulationSize());  int  numberOfSuccesses  =  Math.min(numberOfSuccesses,  numberOfSuccesses  -  1);  [BUGGY]    getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  }  [CLASS]  HypergeometricDistribution  [METHOD]  getSupportLowerBound  [RETURN_TYPE]  int  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	308	309	1	replace	return    FastMath.max(0,    getNumberOfSuccesses()    +    getSampleSize()    -    getPopulationSize());    int  numberOfSuccesses  =  Math.min(numberOfSuccesses,  numberOfSuccesses  -  1);	  	non-compiled	[CE]  unreachable  statement	2	None
1862	[BUG]  [BUGGY]  return  numericalVariance  /(numbericalVariance  >  0)?  numericalVariance  :  null;  [CE]  cannot  find  symbol  numbericalVariance  [CONTEXT]    public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }    [BUGGY]  return  numericalVariance  /(numbericalVariance  >  0)?  numericalVariance  :  null;  [BUGGY]    }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	283	283	1	replace	return  numericalVariance  /(numbericalVariance  >  0)?  numericalVariance  :  null;	  return    numericalVariance    /(numericalVariance    >    0)?    numericalVariance    :    null;    	non-compiled	[CE]  cannot  find  symbol  numbericalVariance	153	None
1863	[BUG]  [BUGGY]  return  numericalVariance  /(numericalVariance  >  0)?  numericalVariance  :  getNumberOfSuccesses();  [CE]  bad  operand  types  for  binary  operator  '/'  [CONTEXT]    public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }    [BUGGY]  return  numericalVariance  /(numericalVariance  >  0)?  numericalVariance  :  getNumberOfSuccesses();  [BUGGY]    }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	283	283	1	replace	return  numericalVariance  /(numericalVariance  >  0)?  numericalVariance  :  getNumberOfSuccesses();	  return    numericalVariance    /(numericalVariance    >    0)?    numericalVariance    :    null;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '/'	153	None
1864	[BUG]  [BUGGY]  return  numericalVariance  /(numericalVariance  >  0)?  numericalVariance  :  summaryVariance;  [CE]  bad  operand  types  for  binary  operator  '/'  [CONTEXT]    public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }    [BUGGY]  return  numericalVariance  /(numericalVariance  >  0)?  numericalVariance  :  summaryVariance;  [BUGGY]    }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	283	283	1	replace	return  numericalVariance  /(numericalVariance  >  0)?  numericalVariance  :  summaryVariance;	  return    numericalVariance    /(numericalVariance    >    0)?    numericalVariance    :    null;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '/'	153	None
1882	[BUG]  [BUGGY]  numericalVariance  =  getNumberOfSuccesses()  *(numberOfSuccesses  /  getSampleSize());  [CE]  cannot  find  symbol  m  [CONTEXT]    protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();    [BUGGY]  numericalVariance  =  getNumberOfSuccesses()  *(numberOfSuccesses  /  getSampleSize());  [BUGGY]    final  double  m  =  getNumberOfSuccesses();  final  double  n  =  getSampleSize();  return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	293	293	1	replace	numericalVariance  =  getNumberOfSuccesses()  *(numberOfSuccesses  /  getSampleSize());	      final    double    N    =    getSize();    	non-compiled	[CE]  cannot  find  symbol  m	145	None
1883	[BUG]  [BUGGY]  numericalVariance  =  getNumberOfSuccesses()  *(numberOfSuccesses  -  getPopulationSize());  [CE]  cannot  find  symbol  m  [CONTEXT]    protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();    [BUGGY]  numericalVariance  =  getNumberOfSuccesses()  *(numberOfSuccesses  -  getPopulationSize());  [BUGGY]    final  double  m  =  getNumberOfSuccesses();  final  double  n  =  getSampleSize();  return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	293	293	1	replace	numericalVariance  =  getNumberOfSuccesses()  *(numberOfSuccesses  -  getPopulationSize());	      final    double    N    =    getSize();    	non-compiled	[CE]  cannot  find  symbol  m	145	None
1884	[BUG]  [BUGGY]  numericalVariance  =  getNumberOfSuccesses()  *(numberOfSuccesses  -  getSampleSize());  [CE]  cannot  find  symbol  m  [CONTEXT]    protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();    [BUGGY]  numericalVariance  =  getNumberOfSuccesses()  *(numberOfSuccesses  -  getSampleSize());  [BUGGY]    final  double  m  =  getNumberOfSuccesses();  final  double  n  =  getSampleSize();  return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	293	293	1	replace	numericalVariance  =  getNumberOfSuccesses()  *(numberOfSuccesses  -  getSampleSize());	      final    double    N    =    getSize();    	non-compiled	[CE]  cannot  find  symbol  m	145	None
1901	[BUG]  [BUGGY]  [FE]  AssertionError  testMoments  [CONTEXT]    public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();    [BUGGY]      numericalVariance  =  Math.abs(numberOfSuccesses);  numericalVariance  =  getNumberOfSuccesses();  [BUGGY]    numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	281	281	1	add	        numericalVariance    =    Math.abs(numberOfSuccesses);    numericalVariance  =  getNumberOfSuccesses();	  	compilable	  [FE]  AssertionError  testMoments	325	1
1902	[BUG]  [BUGGY]      numericalVariance  =  Math.abs(numberOfSuccesses);  numericalVariance  =  getNumberOfSuccesses();  [FE]  AssertionError  testMoments  [CONTEXT]    public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();    [BUGGY]      numericalVariance  =  Math.abs(numberOfSuccesses);  numericalVariance  =  getNumberOfSuccesses();  [BUGGY]    numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	281	281	1	replace	        numericalVariance    =    Math.abs(numberOfSuccesses);    numericalVariance  =  getNumberOfSuccesses();	  	compilable	  [FE]  AssertionError  testMoments	325	1
1903	[BUG]  [BUGGY]      numericalVariance  =  Math.abs(numberOfSuccesses);  numericalVariance  =  getNumberOfSuccesses()  *(numberOfSuccesses  -  1));  [CE]  ';'  expected  [CONTEXT]    public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();    [BUGGY]      numericalVariance  =  Math.abs(numberOfSuccesses);  numericalVariance  =  getNumberOfSuccesses()  *(numberOfSuccesses  -  1));  [BUGGY]    numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	281	281	1	replace	        numericalVariance    =    Math.abs(numberOfSuccesses);    numericalVariance  =  getNumberOfSuccesses()  *(numberOfSuccesses  -  1));	  	non-compiled	[CE]  ';'  expected	325	None
1905	[BUG]  [BUGGY]      numericalVariance  =  Math.abs(numberOfSuccesses);  numericalVariance  =  getNumberOfSuccesses()  /(numberOfSuccesses  -  1)/(numberOfSuccesses  -  1));  [CE]  ';'  expected  [CONTEXT]    public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();    [BUGGY]      numericalVariance  =  Math.abs(numberOfSuccesses);  numericalVariance  =  getNumberOfSuccesses()  /(numberOfSuccesses  -  1)/(numberOfSuccesses  -  1));  [BUGGY]    numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	281	281	1	replace	        numericalVariance    =    Math.abs(numberOfSuccesses);    numericalVariance  =  getNumberOfSuccesses()  /(numberOfSuccesses  -  1)/(numberOfSuccesses  -  1));	  	non-compiled	[CE]  ';'  expected	325	None
1921	[BUG]  [BUGGY]      int  populationSize  =  getNumberOfSuccesses();  if(!numericalVarianceIsCalculated  &&  Math.abs(numberOfSuccesses)  <  0)  {  [CE]  illegal  start  of  expression  [CONTEXT]    public  int  getSupportLowerBound()  {    [BUGGY]      int  populationSize  =  getNumberOfSuccesses();  if(!numericalVarianceIsCalculated  &&  Math.abs(numberOfSuccesses)  <  0)  {  [BUGGY]    return  FastMath.max(0,        getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  }  [CLASS]  HypergeometricDistribution  [METHOD]  getSupportLowerBound  [RETURN_TYPE]  int  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	308	309	1	replace	        int    populationSize    =    getNumberOfSuccesses();    if(!numericalVarianceIsCalculated  &&  Math.abs(numberOfSuccesses)  <  0)  {	  	non-compiled	[CE]  illegal  start  of  expression	65	None
1924	[BUG]  [BUGGY]      int  populationSize  =  getNumberOfSuccesses();  if(!numericalVarianceIsCalculated  &&  Math.pow(10,  numberOfSuccesses)>  0)  {  [CE]  illegal  start  of  expression  [CONTEXT]    public  int  getSupportLowerBound()  {    [BUGGY]      int  populationSize  =  getNumberOfSuccesses();  if(!numericalVarianceIsCalculated  &&  Math.pow(10,  numberOfSuccesses)>  0)  {  [BUGGY]    return  FastMath.max(0,        getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  }  [CLASS]  HypergeometricDistribution  [METHOD]  getSupportLowerBound  [RETURN_TYPE]  int  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	308	309	1	replace	        int    populationSize    =    getNumberOfSuccesses();    if(!numericalVarianceIsCalculated  &&  Math.pow(10,  numberOfSuccesses)>  0)  {	  	non-compiled	[CE]  illegal  start  of  expression	65	None
1925	[BUG]  [BUGGY]      int  populationSize  =  getNumberOfSuccesses();  if(!numericalVarianceIsCalculated  &&  Math.abs(numberOfSuccesses)  <=  0)  {  [CE]  illegal  start  of  expression  [CONTEXT]    public  int  getSupportLowerBound()  {    [BUGGY]      int  populationSize  =  getNumberOfSuccesses();  if(!numericalVarianceIsCalculated  &&  Math.abs(numberOfSuccesses)  <=  0)  {  [BUGGY]    return  FastMath.max(0,        getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  }  [CLASS]  HypergeometricDistribution  [METHOD]  getSupportLowerBound  [RETURN_TYPE]  int  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	308	309	1	replace	        int    populationSize    =    getNumberOfSuccesses();    if(!numericalVarianceIsCalculated  &&  Math.abs(numberOfSuccesses)  <=  0)  {	  	non-compiled	[CE]  illegal  start  of  expression	65	None
1943	[BUG]  [BUGGY]  if(!numbericalVarianceIsCalculated)  {  if(!numericalVarianceIsCalculated)  {  return  0;  }  [CE]  illegal  start  of  expression  [CONTEXT]    public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {    [BUGGY]  if(!numbericalVarianceIsCalculated)  {  if(!numericalVarianceIsCalculated)  {  return  0;  }  [BUGGY]    numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	280	280	1	replace	if(!numbericalVarianceIsCalculated)  {  if(!numericalVarianceIsCalculated)  {  return  0;  }	      if(!numericalVarianceIsCalculated)    {    if(!numericalVarianceIsCalculated)    {    return    0;    }    	non-compiled	[CE]  illegal  start  of  expression	41	None
1944	[BUG]  [BUGGY]  if(!numericalVarianceIsCalculated)  {  while(!numericalVarianceIsCalculated)  {  return  0;  }  [CE]  illegal  start  of  expression  [CONTEXT]    public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {    [BUGGY]  if(!numericalVarianceIsCalculated)  {  while(!numericalVarianceIsCalculated)  {  return  0;  }  [BUGGY]    numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	280	280	1	replace	if(!numericalVarianceIsCalculated)  {  while(!numericalVarianceIsCalculated)  {  return  0;  }	      if(!numericalVarianceIsCalculated)    {    if(!numericalVarianceIsCalculated)    {    return    0;    }    	non-compiled	[CE]  illegal  start  of  expression	41	None
1963	[BUG]  [BUGGY]  [FE]  AssertionError  testMath1021  [CONTEXT]    public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {    [BUGGY]      numericalVariance  =  Math.min(numberOfSuccesses,  numberOfSuccesses);  [BUGGY]    numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	280	280	1	add	        numericalVariance  =  Math.min(numberOfSuccesses,  numberOfSuccesses);	  	compilable	  [FE]  AssertionError  testMath1021	35	1
1964	[BUG]  [BUGGY]      numericalVariance  =  Math.min(numberOfSuccesses,  numberOfSuccesses);  [FE]  AssertionError  testMath1021  [CONTEXT]    public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {    [BUGGY]      numericalVariance  =  Math.min(numberOfSuccesses,  numberOfSuccesses);  [BUGGY]    numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	280	280	1	replace	        numericalVariance  =  Math.min(numberOfSuccesses,  numberOfSuccesses);	  	compilable	  [FE]  AssertionError  testMath1021	35	1
1965	[BUG]  [BUGGY]      numericalVariance  =  getNumberOfSuccesses()  /(numberOfSuccesses  -  1));  [CE]  ';'  expected  [CONTEXT]    public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {    [BUGGY]      numericalVariance  =  getNumberOfSuccesses()  /(numberOfSuccesses  -  1));  [BUGGY]    numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	280	280	1	replace	        numericalVariance  =  getNumberOfSuccesses()  /(numberOfSuccesses  -  1));	  	non-compiled	[CE]  ';'  expected	35	None
1981	[BUG]  [BUGGY]  return  numericalVariance  /(numberOfSuccesses  *  getSummarySize())*  numberOfSuccesses;  [CE]  cannot  find  symbol  [CONTEXT]    public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }    [BUGGY]  return  numericalVariance  /(numberOfSuccesses  *  getSummarySize())*  numberOfSuccesses;  [BUGGY]    }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	283	283	1	replace	return  numericalVariance  /(numberOfSuccesses  *  getSummarySize())*  numberOfSuccesses;	  return    numericalVariance    /(numericalVariance    *    getSummarySize())*    numberOfSuccesses;    	non-compiled	[CE]  cannot  find  symbol	344	None
1983	[BUG]  [BUGGY]  return  numberOfSuccesses  /(numbericalVariance  *  getSummarySize())*  numericalVariance;  [CE]  cannot  find  symbol  numbericalVariance  [CONTEXT]    public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }    [BUGGY]  return  numberOfSuccesses  /(numbericalVariance  *  getSummarySize())*  numericalVariance;  [BUGGY]    }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	283	283	1	replace	return  numberOfSuccesses  /(numbericalVariance  *  getSummarySize())*  numericalVariance;	  return    numericalVariance    /(numericalVariance    *    getSummarySize())*    numberOfSuccesses;    	non-compiled	[CE]  cannot  find  symbol  numbericalVariance	344	None
2004	[BUG]  [BUGGY]      int  k  =  getNumberOfSuccesses();  m  =  getNumberOfSuccesses().doubleValue();  [CE]  cannot  find  symbol  m  [CONTEXT]    public  double  getNumericalMean()  {    [BUGGY]      int  k  =  getNumberOfSuccesses();  m  =  getNumberOfSuccesses().doubleValue();  [BUGGY]    return  (double)  (getSampleSize()  *  getNumberOfSuccesses())  /  (double)  getPopulationSize();  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalMean  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	268	268	1	replace	        int    k    =    getNumberOfSuccesses();    m  =  getNumberOfSuccesses().doubleValue();	  	non-compiled	[CE]  cannot  find  symbol  m	362	None
2005	[BUG]  [BUGGY]      int  k  =  getNumberOfSuccesses();  m  =  getNumberOfSuccesses()  +  1;  [CE]  cannot  find  symbol  m  [CONTEXT]    public  double  getNumericalMean()  {    [BUGGY]      int  k  =  getNumberOfSuccesses();  m  =  getNumberOfSuccesses()  +  1;  [BUGGY]    return  (double)  (getSampleSize()  *  getNumberOfSuccesses())  /  (double)  getPopulationSize();  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalMean  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	268	268	1	replace	        int    k    =    getNumberOfSuccesses();    m  =  getNumberOfSuccesses()  +  1;	  	non-compiled	[CE]  cannot  find  symbol  m	362	None
2081	[BUG]  [BUGGY]  [FE]  AssertionError  testMoments  [CONTEXT]    protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();  final  double  m  =  getNumberOfSuccesses();  final  double  n  =  getSampleSize();    [BUGGY]  return(N  *  m  *(N  *  n)*(N  *  m))  /(N  *  N  *(n  *  1));  [BUGGY]    }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	295	295	1	add	return(N  *  m  *(N  *  n)*(N  *  m))  /(N  *  N  *(n  *  1));	  return(N    *    m    *(N    *    n)*(N    *    m))    /(N    *    N    *    (N    -    1));    	compilable	  [FE]  AssertionError  testMoments	123	1
2082	[BUG]  [BUGGY]  return(N  *  m  *(N  *  n)*(N  *  m))  /(N  *  N  *(n  *  1));  [FE]  AssertionError  testMoments  [CONTEXT]    protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();  final  double  m  =  getNumberOfSuccesses();  final  double  n  =  getSampleSize();    [BUGGY]  return(N  *  m  *(N  *  n)*(N  *  m))  /(N  *  N  *(n  *  1));  [BUGGY]    }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	295	295	1	replace	return(N  *  m  *(N  *  n)*(N  *  m))  /(N  *  N  *(n  *  1));	  return(N    *    m    *(N    *    n)*(N    *    m))    /(N    *    N    *    (N    -    1));    	compilable	  [FE]  AssertionError  testMoments	123	1
2082	[BUG]  [BUGGY]  return(M  *  m  *(N  *  n)*(N  *  m))  /(N  *  N  *(N  *  N  -  1));  [CE]  cannot  find  symbol  M  [CONTEXT]    protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();  final  double  m  =  getNumberOfSuccesses();  final  double  n  =  getSampleSize();    [BUGGY]  return(M  *  m  *(N  *  n)*(N  *  m))  /(N  *  N  *(N  *  N  -  1));  [BUGGY]    }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	295	295	1	replace	return(M  *  m  *(N  *  n)*(N  *  m))  /(N  *  N  *(N  *  N  -  1));	  return(N    *    m    *(N    *    n)*(N    *    m))    /(N    *    N    *    (N    -    1));    	non-compiled	[CE]  cannot  find  symbol  M	123	None
2083	[BUG]  [BUGGY]  [FE]  AssertionError  testMoments  [CONTEXT]    protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();  final  double  m  =  getNumberOfSuccesses();  final  double  n  =  getSampleSize();    [BUGGY]  return(N  *  m  *(1  *  n)*(1  *  m))  /(N  *  N  *(n  -  1));  [BUGGY]    }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	295	295	1	add	return(N  *  m  *(1  *  n)*(1  *  m))  /(N  *  N  *(n  -  1));	  return(N    *    m    *(N    *    n)*(N    *    m))    /(N    *    N    *    (N    -    1));    	compilable	  [FE]  AssertionError  testMoments	123	1
2084	[BUG]  [BUGGY]  return(N  *  m  *(1  *  n)*(1  *  m))  /(N  *  N  *(n  -  1));  [FE]  AssertionError  testMoments  [CONTEXT]    protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();  final  double  m  =  getNumberOfSuccesses();  final  double  n  =  getSampleSize();    [BUGGY]  return(N  *  m  *(1  *  n)*(1  *  m))  /(N  *  N  *(n  -  1));  [BUGGY]    }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	295	295	1	replace	return(N  *  m  *(1  *  n)*(1  *  m))  /(N  *  N  *(n  -  1));	  return(N    *    m    *(N    *    n)*(N    *    m))    /(N    *    N    *    (N    -    1));    	compilable	  [FE]  AssertionError  testMoments	123	1
2084	[BUG]  [BUGGY]  [FE]  AssertionError  testMoments  [CONTEXT]    protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();  final  double  m  =  getNumberOfSuccesses();  final  double  n  =  getSampleSize();    [BUGGY]  return(N  *  m  *(N  *  n  +  1)*(N  *  m))  /(N  *  N  *(n  *  1));  [BUGGY]    }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	295	295	1	add	return(N  *  m  *(N  *  n  +  1)*(N  *  m))  /(N  *  N  *(n  *  1));	  return(N    *    m    *(N    *    n)*(N    *    m))    /(N    *    N    *    (N    -    1));    	compilable	  [FE]  AssertionError  testMoments	123	1
2085	[BUG]  [BUGGY]  return(N  *  m  *(N  *  n  +  1)*(N  *  m))  /(N  *  N  *(n  *  1));  [FE]  AssertionError  testMoments  [CONTEXT]    protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();  final  double  m  =  getNumberOfSuccesses();  final  double  n  =  getSampleSize();    [BUGGY]  return(N  *  m  *(N  *  n  +  1)*(N  *  m))  /(N  *  N  *(n  *  1));  [BUGGY]    }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	295	295	1	replace	return(N  *  m  *(N  *  n  +  1)*(N  *  m))  /(N  *  N  *(n  *  1));	  return(N    *    m    *(N    *    n)*(N    *    m))    /(N    *    N    *    (N    -    1));    	compilable	  [FE]  AssertionError  testMoments	123	1
2102	[BUG]  [BUGGY]  if(numberOfSuccesses  >  1)  {  if(!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumberOfSuccesses();  }  [CE]  cannot  find  symbol  [CONTEXT]    public  double  getNumericalVariance()  {    [BUGGY]  if(numberOfSuccesses  >  1)  {  if(!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumberOfSuccesses();  }  [BUGGY]    if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	279	279	1	replace	if(numberOfSuccesses  >  1)  {  if(!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumberOfSuccesses();  }	      if(numberOfSuccesses    >    0)    {    if(!numericalVarianceIsCalculated)    {    numericalVariance    =    calculateNumberOfSuccesses();    }    	non-compiled	[CE]  cannot  find  symbol	11	None
2103	[BUG]  [BUGGY]  numericalVariance  =  calculateNumberOfSuccesses();  [CE]  illegal  start  of  type  [CONTEXT]    public  double  getNumericalVariance()  {    [BUGGY]  numericalVariance  =  calculateNumberOfSuccesses();  [BUGGY]    if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	279	279	1	replace	numericalVariance  =  calculateNumberOfSuccesses();	      if(numberOfSuccesses    >    0)    {    if(!numericalVarianceIsCalculated)    {    numericalVariance    =    calculateNumberOfSuccesses();    }    	non-compiled	[CE]  illegal  start  of  type	11	None
2104	[BUG]  [BUGGY]  if(numberOfSuccesses  >  2)  {  if(!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumberOfSuccesses();  }  [CE]  cannot  find  symbol  [CONTEXT]    public  double  getNumericalVariance()  {    [BUGGY]  if(numberOfSuccesses  >  2)  {  if(!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumberOfSuccesses();  }  [BUGGY]    if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	279	279	1	replace	if(numberOfSuccesses  >  2)  {  if(!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumberOfSuccesses();  }	      if(numberOfSuccesses    >    0)    {    if(!numericalVarianceIsCalculated)    {    numericalVariance    =    calculateNumberOfSuccesses();    }    	non-compiled	[CE]  cannot  find  symbol	11	None
2122	[BUG]  [BUGGY]  [FE]  AssertionError  testMoments  [CONTEXT]    protected  double  calculateNumericalVariance()  {    [BUGGY]  final  double  N  =  getNumberOfSuccesses()  /  2.0;  [BUGGY]    final  double  m  =  getNumberOfSuccesses();  final  double  n  =  getSampleSize();  return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	292	292	1	add	final  double  N  =  getNumberOfSuccesses()  /  2.0;	  final    double    N    =    getPopulationSize()    /    2.0;    	compilable	  [FE]  AssertionError  testMoments	195	1
2123	[BUG]  [BUGGY]  final  double  N  =  getNumberOfSuccesses()  /  2.0;  [FE]  AssertionError  testMoments  [CONTEXT]    protected  double  calculateNumericalVariance()  {    [BUGGY]  final  double  N  =  getNumberOfSuccesses()  /  2.0;  [BUGGY]    final  double  m  =  getNumberOfSuccesses();  final  double  n  =  getSampleSize();  return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	292	292	1	replace	final  double  N  =  getNumberOfSuccesses()  /  2.0;	  final    double    N    =    getPopulationSize()    /    2.0;    	compilable	  [FE]  AssertionError  testMoments	195	1
2141	[BUG]  [BUGGY]  double  numericalVariance  =  Math.max(getNumberOfSuccesses(),  getSampleSize());  [CE]  illegal  start  of  type  [CONTEXT]    public  double  getNumericalVariance()  {    [BUGGY]  double  numericalVariance  =  Math.max(getNumberOfSuccesses(),  getSampleSize());  [BUGGY]    if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	279	279	1	replace	double  numericalVariance  =  Math.max(getNumberOfSuccesses(),  getSampleSize());	      double    numericalVariance    =    Math.max(getNumberOfSuccesses(),    numberOfSuccesses);    	non-compiled	[CE]  illegal  start  of  type	543	None
2143	[BUG]  [BUGGY]  double  numericalVariance  =  Math.max(getNumberOfSuccesses(),  this.numberOfSuccesses);  [CE]  illegal  start  of  type  [CONTEXT]    public  double  getNumericalVariance()  {    [BUGGY]  double  numericalVariance  =  Math.max(getNumberOfSuccesses(),  this.numberOfSuccesses);  [BUGGY]    if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	279	279	1	replace	double  numericalVariance  =  Math.max(getNumberOfSuccesses(),  this.numberOfSuccesses);	      double    numericalVariance    =    Math.max(getNumberOfSuccesses(),    numberOfSuccesses);    	non-compiled	[CE]  illegal  start  of  type	543	None
2144	[BUG]  [BUGGY]  double  numericalVariance  =  Math.max(getNumberOfSuccesses(),  getSummarySize());  [CE]  illegal  start  of  type  [CONTEXT]    public  double  getNumericalVariance()  {    [BUGGY]  double  numericalVariance  =  Math.max(getNumberOfSuccesses(),  getSummarySize());  [BUGGY]    if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	279	279	1	replace	double  numericalVariance  =  Math.max(getNumberOfSuccesses(),  getSummarySize());	      double    numericalVariance    =    Math.max(getNumberOfSuccesses(),    numberOfSuccesses);    	non-compiled	[CE]  illegal  start  of  type	543	None
2181	[BUG]  [BUGGY]  numericalVariance  =  getNumberOfSuccesses()  *  Math.pow(10,  numberOfSuccesses);  [CE]  missing  return  statement  [CONTEXT]    public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }    [BUGGY]  numericalVariance  =  getNumberOfSuccesses()  *  Math.pow(10,  numberOfSuccesses);  [BUGGY]    return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	283	283	1	replace	numericalVariance  =  getNumberOfSuccesses()  *  Math.pow(10,  numberOfSuccesses);	      if(!numericalVarianceIsCalculated)    {    if(!numericalVarianceIsCalculated)    {    numericalVariance    =    calculateNumberOfSuccesses();    if(!numericalVarianceIsCalculated)    {    numericalVariance    	non-compiled	[CE]  missing  return  statement	105	None
2182	[BUG]  [BUGGY]  numericalVariance  =  getNumberOfSuccesses()  /  Math.pow(10,  numberOfSuccesses);  [CE]  missing  return  statement  [CONTEXT]    public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }    [BUGGY]  numericalVariance  =  getNumberOfSuccesses()  /  Math.pow(10,  numberOfSuccesses);  [BUGGY]    return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	283	283	1	replace	numericalVariance  =  getNumberOfSuccesses()  /  Math.pow(10,  numberOfSuccesses);	      if(!numericalVarianceIsCalculated)    {    if(!numericalVarianceIsCalculated)    {    numericalVariance    =    calculateNumberOfSuccesses();    if(!numericalVarianceIsCalculated)    {    numericalVariance    	non-compiled	[CE]  missing  return  statement	105	None
2183	[BUG]  [BUGGY]  numericalVariance  =  getSampleSize()  *  Math.pow(10,  numberOfSuccesses);  [CE]  missing  return  statement  [CONTEXT]    public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }    [BUGGY]  numericalVariance  =  getSampleSize()  *  Math.pow(10,  numberOfSuccesses);  [BUGGY]    return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	283	283	1	replace	numericalVariance  =  getSampleSize()  *  Math.pow(10,  numberOfSuccesses);	      if(!numericalVarianceIsCalculated)    {    if(!numericalVarianceIsCalculated)    {    numericalVariance    =    calculateNumberOfSuccesses();    if(!numericalVarianceIsCalculated)    {    numericalVariance    	non-compiled	[CE]  missing  return  statement	105	None
2184	[BUG]  [BUGGY]  numericalVariance  =  getStandardDeviation()  *  Math.pow(10,  numberOfSuccesses);  [CE]  cannot  find  symbol  [CONTEXT]    public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }    [BUGGY]  numericalVariance  =  getStandardDeviation()  *  Math.pow(10,  numberOfSuccesses);  [BUGGY]    return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	283	283	1	replace	numericalVariance  =  getStandardDeviation()  *  Math.pow(10,  numberOfSuccesses);	      if(!numericalVarianceIsCalculated)    {    if(!numericalVarianceIsCalculated)    {    numericalVariance    =    calculateNumberOfSuccesses();    if(!numericalVarianceIsCalculated)    {    numericalVariance    	non-compiled	[CE]  cannot  find  symbol	105	None
2202	[BUG]  [BUGGY]  numericalVarianceIsCalculated  =  numericalVariance.getNumberOfSuccesses();  [CE]  double  cannot  be  dereferenced  [CONTEXT]    public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();    [BUGGY]  numericalVarianceIsCalculated  =  numericalVariance.getNumberOfSuccesses();  [BUGGY]    }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	281	281	1	replace	numericalVarianceIsCalculated  =  numericalVariance.getNumberOfSuccesses();	  numericalVarianceIsCalculated    =    false;    	non-compiled	[CE]  double  cannot  be  dereferenced	122	None
2203	[BUG]  [BUGGY]  numericalVarianceIsCalculated  =  numericalVariance.numericalVariance;  [CE]  double  cannot  be  dereferenced  [CONTEXT]    public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();    [BUGGY]  numericalVarianceIsCalculated  =  numericalVariance.numericalVariance;  [BUGGY]    }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	281	281	1	replace	numericalVarianceIsCalculated  =  numericalVariance.numericalVariance;	  numericalVarianceIsCalculated    =    false;    	non-compiled	[CE]  double  cannot  be  dereferenced	122	None
2204	[BUG]  [BUGGY]  numericalVarianceIsCalculated  =  numericalVariance.getStandardDeviation();  [CE]  double  cannot  be  dereferenced  [CONTEXT]    public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();    [BUGGY]  numericalVarianceIsCalculated  =  numericalVariance.getStandardDeviation();  [BUGGY]    }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	281	281	1	replace	numericalVarianceIsCalculated  =  numericalVariance.getStandardDeviation();	  numericalVarianceIsCalculated    =    false;    	non-compiled	[CE]  double  cannot  be  dereferenced	122	None
2223	[BUG]  [BUGGY]  getNumberOfSuccesses()  *  getNumberOfEscapes();  [CE]  not  a  statement  [CONTEXT]    public  double  getNumericalMean()  {    [BUGGY]  getNumberOfSuccesses()  *  getNumberOfEscapes();  [BUGGY]    return  (double)  (getSampleSize()  *  getNumberOfSuccesses())  /  (double)  getPopulationSize();  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalMean  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	268	268	1	replace	getNumberOfSuccesses()  *  getNumberOfEscapes();	      getNumberOfSuccesses()    *    getNumberOfSuccesses();    	non-compiled	[CE]  not  a  statement	75	None
2224	[BUG]  [BUGGY]  getNumberOfSuccesses()  *  getNumberOfElements();  [CE]  not  a  statement  [CONTEXT]    public  double  getNumericalMean()  {    [BUGGY]  getNumberOfSuccesses()  *  getNumberOfElements();  [BUGGY]    return  (double)  (getSampleSize()  *  getNumberOfSuccesses())  /  (double)  getPopulationSize();  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalMean  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	268	268	1	replace	getNumberOfSuccesses()  *  getNumberOfElements();	      getNumberOfSuccesses()    *    getNumberOfSuccesses();    	non-compiled	[CE]  not  a  statement	75	None
2262	[BUG]  [BUGGY]  numericalVariance  =  getNumberOfSuccesses()  *  Math.min(numberOfSuccesses,  getSampleSize());  [CE]  missing  return  statement  [CONTEXT]    public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }    [BUGGY]  numericalVariance  =  getNumberOfSuccesses()  *  Math.min(numberOfSuccesses,  getSampleSize());  [BUGGY]    }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	283	283	1	replace	numericalVariance  =  getNumberOfSuccesses()  *  Math.min(numberOfSuccesses,  getSampleSize());	  return    numericalVariance    /(numericalVariance    >    0)?    numericalVariance    :    null;    	non-compiled	[CE]  missing  return  statement	153	None
2263	[BUG]  [BUGGY]  numericalVariance  =  getSampleSize();  [CE]  missing  return  statement  [CONTEXT]    public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }    [BUGGY]  numericalVariance  =  getSampleSize();  [BUGGY]    }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	283	283	1	replace	numericalVariance  =  getSampleSize();	  return    numericalVariance    /(numericalVariance    >    0)?    numericalVariance    :    null;    	non-compiled	[CE]  missing  return  statement	153	None
2264	[BUG]  [BUGGY]  numericalVariance  =  Math.min(numberOfSuccesses  /  getSampleSize());  [CE]  no  suitable  method  found  for  min(int)  [CONTEXT]    public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }    [BUGGY]  numericalVariance  =  Math.min(numberOfSuccesses  /  getSampleSize());  [BUGGY]    }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	283	283	1	replace	numericalVariance  =  Math.min(numberOfSuccesses  /  getSampleSize());	  return    numericalVariance    /(numericalVariance    >    0)?    numericalVariance    :    null;    	non-compiled	[CE]  no  suitable  method  found  for  min(int)	153	None
2284	[BUG]  [BUGGY]  super.getNumberOfSuccesses(),  numberOfSuccesses);  [CE]  ';'  expected  [CONTEXT]    public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {    [BUGGY]  super.getNumberOfSuccesses(),  numberOfSuccesses);  [BUGGY]    numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	280	280	1	replace	super.getNumberOfSuccesses(),  numberOfSuccesses);	      super.getNumberOfSuccesses();    	non-compiled	[CE]  ';'  expected	241	None
2301	[BUG]  [BUGGY]  [FE]  AssertionError  testMoments  [CONTEXT]    protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();  final  double  m  =  getNumberOfSuccesses();    [BUGGY]  final  double  n  =  getSampleSize()  *  getNumberOfSuccesses()  +  1;  [BUGGY]    return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	294	294	1	add	final  double  n  =  getSampleSize()  *  getNumberOfSuccesses()  +  1;	  final    double    n    =    getSampleSize()    *    getNumberOfSuccesses();    	compilable	  [FE]  AssertionError  testMoments	264	1
2302	[BUG]  [BUGGY]  final  double  n  =  getSampleSize()  *  getNumberOfSuccesses()  +  1;  [FE]  AssertionError  testMoments  [CONTEXT]    protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();  final  double  m  =  getNumberOfSuccesses();    [BUGGY]  final  double  n  =  getSampleSize()  *  getNumberOfSuccesses()  +  1;  [BUGGY]    return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	294	294	1	replace	final  double  n  =  getSampleSize()  *  getNumberOfSuccesses()  +  1;	  final    double    n    =    getSampleSize()    *    getNumberOfSuccesses();    	compilable	  [FE]  AssertionError  testMoments	264	1
2304	[BUG]  [BUGGY]  final  double  n  =  getSampleSize()  *  getMeanSuffix();  [CE]  cannot  find  symbol  [CONTEXT]    protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();  final  double  m  =  getNumberOfSuccesses();    [BUGGY]  final  double  n  =  getSampleSize()  *  getMeanSuffix();  [BUGGY]    return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	294	294	1	replace	final  double  n  =  getSampleSize()  *  getMeanSuffix();	  final    double    n    =    getSampleSize()    *    getNumberOfSuccesses();    	non-compiled	[CE]  cannot  find  symbol	264	None
2342	[BUG]  [BUGGY]  numericalVariance  =  getNumberOfSuccesses().doubleValue()  -  1;  [CE]  int  cannot  be  dereferenced  [CONTEXT]    protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();    [BUGGY]  numericalVariance  =  getNumberOfSuccesses().doubleValue()  -  1;  [BUGGY]    final  double  m  =  getNumberOfSuccesses();  final  double  n  =  getSampleSize();  return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	293	293	1	replace	numericalVariance  =  getNumberOfSuccesses().doubleValue()  -  1;	      final    int    N    =    getNumberOfSuccesses();    	non-compiled	[CE]  int  cannot  be  dereferenced	143	None
2343	[BUG]  [BUGGY]  numericalVariance  =  getNumberOfSuccesses().doubleValue(),  sampleSize);  [CE]  ';'  expected  [CONTEXT]    protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();    [BUGGY]  numericalVariance  =  getNumberOfSuccesses().doubleValue(),  sampleSize);  [BUGGY]    final  double  m  =  getNumberOfSuccesses();  final  double  n  =  getSampleSize();  return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	293	293	1	replace	numericalVariance  =  getNumberOfSuccesses().doubleValue(),  sampleSize);	      final    int    N    =    getNumberOfSuccesses();    	non-compiled	[CE]  ';'  expected	143	None
2344	[BUG]  [BUGGY]  numericalVariance  =  getNumberOfSuccesses().doubleValue(),  numberOfSuccesses);  [CE]  ';'  expected  [CONTEXT]    protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();    [BUGGY]  numericalVariance  =  getNumberOfSuccesses().doubleValue(),  numberOfSuccesses);  [BUGGY]    final  double  m  =  getNumberOfSuccesses();  final  double  n  =  getSampleSize();  return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	293	293	1	replace	numericalVariance  =  getNumberOfSuccesses().doubleValue(),  numberOfSuccesses);	      final    int    N    =    getNumberOfSuccesses();    	non-compiled	[CE]  ';'  expected	143	None
2361	[BUG]  [BUGGY]  final  double  m  =  getNumberOfSuccesses()  *  getNumberOfMean();  [CE]  cannot  find  symbol  [CONTEXT]    protected  double  calculateNumericalVariance()  {    [BUGGY]  final  double  m  =  getNumberOfSuccesses()  *  getNumberOfMean();  [BUGGY]    final  double  N  =  getPopulationSize();  final  double  m  =  getNumberOfSuccesses();  final  double  n  =  getSampleSize();  return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	292	292	1	replace	final  double  m  =  getNumberOfSuccesses()  *  getNumberOfMean();	      final    double    N    =    getNumberOfSuccesses().doubleValue();    	non-compiled	[CE]  cannot  find  symbol	164	None
2362	[BUG]  [BUGGY]  final  double  m  =  getNumberOfSuccesses()  *  getNumberOfMethod();  [CE]  cannot  find  symbol  [CONTEXT]    protected  double  calculateNumericalVariance()  {    [BUGGY]  final  double  m  =  getNumberOfSuccesses()  *  getNumberOfMethod();  [BUGGY]    final  double  N  =  getPopulationSize();  final  double  m  =  getNumberOfSuccesses();  final  double  n  =  getSampleSize();  return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	292	292	1	replace	final  double  m  =  getNumberOfSuccesses()  *  getNumberOfMethod();	      final    double    N    =    getNumberOfSuccesses().doubleValue();    	non-compiled	[CE]  cannot  find  symbol	164	None
2364	[BUG]  [BUGGY]  final  double  m  =  getNumberOfSuccesses()  *  getNumberOfMinimumSize();  [CE]  cannot  find  symbol  [CONTEXT]    protected  double  calculateNumericalVariance()  {    [BUGGY]  final  double  m  =  getNumberOfSuccesses()  *  getNumberOfMinimumSize();  [BUGGY]    final  double  N  =  getPopulationSize();  final  double  m  =  getNumberOfSuccesses();  final  double  n  =  getSampleSize();  return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	292	292	1	replace	final  double  m  =  getNumberOfSuccesses()  *  getNumberOfMinimumSize();	      final    double    N    =    getNumberOfSuccesses().doubleValue();    	non-compiled	[CE]  cannot  find  symbol	164	None
2402	[BUG]  [BUGGY]  final  double  N  =  getPopulationSize()  /  2.0;  final  double  N  =  getNumberOfHyphens()  /  2.0;  [CE]  variable  N  is  already  defined  in  method  calculateNumericalVariance()  [CONTEXT]    protected  double  calculateNumericalVariance()  {    [BUGGY]  final  double  N  =  getPopulationSize()  /  2.0;  final  double  N  =  getNumberOfHyphens()  /  2.0;  [BUGGY]    final  double  m  =  getNumberOfSuccesses();  final  double  n  =  getSampleSize();  return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	292	292	1	replace	final    double    N    =    getPopulationSize()    /    2.0;    final  double  N  =  getNumberOfHyphens()  /  2.0;	  	non-compiled	[CE]  variable  N  is  already  defined  in  method  calculateNumericalVariance()	194	None
2403	[BUG]  [BUGGY]  final  double  N  =  getPopulationSize()  /  2.0;  final  double  N  =  getNumberOfElement()  /  2.0;  [CE]  variable  N  is  already  defined  in  method  calculateNumericalVariance()  [CONTEXT]    protected  double  calculateNumericalVariance()  {    [BUGGY]  final  double  N  =  getPopulationSize()  /  2.0;  final  double  N  =  getNumberOfElement()  /  2.0;  [BUGGY]    final  double  m  =  getNumberOfSuccesses();  final  double  n  =  getSampleSize();  return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	292	292	1	replace	final    double    N    =    getPopulationSize()    /    2.0;    final  double  N  =  getNumberOfElement()  /  2.0;	  	non-compiled	[CE]  variable  N  is  already  defined  in  method  calculateNumericalVariance()	194	None
2404	[BUG]  [BUGGY]  final  double  N  =  getPopulationSize()  /  2.0;  final  double  N  =  getNumberOfDays()  /  2.0;  [CE]  variable  N  is  already  defined  in  method  calculateNumericalVariance()  [CONTEXT]    protected  double  calculateNumericalVariance()  {    [BUGGY]  final  double  N  =  getPopulationSize()  /  2.0;  final  double  N  =  getNumberOfDays()  /  2.0;  [BUGGY]    final  double  m  =  getNumberOfSuccesses();  final  double  n  =  getSampleSize();  return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	292	292	1	replace	final    double    N    =    getPopulationSize()    /    2.0;    final  double  N  =  getNumberOfDays()  /  2.0;	  	non-compiled	[CE]  variable  N  is  already  defined  in  method  calculateNumericalVariance()	194	None
2405	[BUG]  [BUGGY]  final  double  N  =  getPopulationSize()  /  2.0;  final  double  N  =  getNumberOfAst()  /  2.0;  [CE]  variable  N  is  already  defined  in  method  calculateNumericalVariance()  [CONTEXT]    protected  double  calculateNumericalVariance()  {    [BUGGY]  final  double  N  =  getPopulationSize()  /  2.0;  final  double  N  =  getNumberOfAst()  /  2.0;  [BUGGY]    final  double  m  =  getNumberOfSuccesses();  final  double  n  =  getSampleSize();  return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	292	292	1	replace	final    double    N    =    getPopulationSize()    /    2.0;    final  double  N  =  getNumberOfAst()  /  2.0;	  	non-compiled	[CE]  variable  N  is  already  defined  in  method  calculateNumericalVariance()	194	None
2422	[BUG]  [BUGGY]  int  k  =  getNumberOfSuccesses();  if(k  >  0)  {  return  getNumberOfSuccesses()  *  getNumberOfSuccesses();  meanwhile  [CE]  not  a  statement  [CONTEXT]    public  double  getNumericalMean()  {    [BUGGY]  int  k  =  getNumberOfSuccesses();  if(k  >  0)  {  return  getNumberOfSuccesses()  *  getNumberOfSuccesses();  meanwhile  [BUGGY]    return  (double)  (getSampleSize()  *  getNumberOfSuccesses())  /  (double)  getPopulationSize();  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalMean  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	268	268	1	replace	int  k  =  getNumberOfSuccesses();  if(k  >  0)  {  return  getNumberOfSuccesses()  *  getNumberOfSuccesses();  meanwhile	      if(getNumberOfSuccesses()    >    0)    {    int    k    =    getNumberOfSuccesses();    if(k    >    0)    {    return    getNumberOfSuccesses()    *    getNumberOfSuccesses();    }    	non-compiled	[CE]  not  a  statement	365	None
2423	[BUG]  [BUGGY]  int  k  =  getNumberOfSuccesses();  if(k  >  0)  {  return  getNumberOfSuccesses()  *  getNumberOfSuccesses();  presumably  [CE]  not  a  statement  [CONTEXT]    public  double  getNumericalMean()  {    [BUGGY]  int  k  =  getNumberOfSuccesses();  if(k  >  0)  {  return  getNumberOfSuccesses()  *  getNumberOfSuccesses();  presumably  [BUGGY]    return  (double)  (getSampleSize()  *  getNumberOfSuccesses())  /  (double)  getPopulationSize();  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalMean  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	268	268	1	replace	int  k  =  getNumberOfSuccesses();  if(k  >  0)  {  return  getNumberOfSuccesses()  *  getNumberOfSuccesses();  presumably	      if(getNumberOfSuccesses()    >    0)    {    int    k    =    getNumberOfSuccesses();    if(k    >    0)    {    return    getNumberOfSuccesses()    *    getNumberOfSuccesses();    }    	non-compiled	[CE]  not  a  statement	365	None
2424	[BUG]  [BUGGY]  int  k  =  getNumberOfSuccesses();  if(k  >  0)  {  return  getNumberOfSuccesses()  *  getNumberOfSuccesses();  figured  [CE]  not  a  statement  [CONTEXT]    public  double  getNumericalMean()  {    [BUGGY]  int  k  =  getNumberOfSuccesses();  if(k  >  0)  {  return  getNumberOfSuccesses()  *  getNumberOfSuccesses();  figured  [BUGGY]    return  (double)  (getSampleSize()  *  getNumberOfSuccesses())  /  (double)  getPopulationSize();  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalMean  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	268	268	1	replace	int  k  =  getNumberOfSuccesses();  if(k  >  0)  {  return  getNumberOfSuccesses()  *  getNumberOfSuccesses();  figured	      if(getNumberOfSuccesses()    >    0)    {    int    k    =    getNumberOfSuccesses();    if(k    >    0)    {    return    getNumberOfSuccesses()    *    getNumberOfSuccesses();    }    	non-compiled	[CE]  not  a  statement	365	None
2442	[BUG]  [BUGGY]  numericalVariance  =  null;  [CE]  incompatible  types  [CONTEXT]    public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();    [BUGGY]  numericalVariance  =  null;  [BUGGY]    numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	281	281	1	replace	numericalVariance  =  null;	      if(!numericalVarianceIsCalculated)    {    if(!numericalVarianceIsCalculated)    {    numericalVariance    =    null;    }    	non-compiled	[CE]  incompatible  types	173	None
2443	[BUG]  [BUGGY]  numericalVariance  =  null;  if(!numericalVarianceIsCalculated)  {  if(!numericalVarianceIsCalculated)  {  numericalVariance  =  null;  }  [CE]  illegal  start  of  expression  [CONTEXT]    public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();    [BUGGY]  numericalVariance  =  null;  if(!numericalVarianceIsCalculated)  {  if(!numericalVarianceIsCalculated)  {  numericalVariance  =  null;  }  [BUGGY]    numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	281	281	1	replace	numericalVariance  =  null;  if(!numericalVarianceIsCalculated)  {  if(!numericalVarianceIsCalculated)  {  numericalVariance  =  null;  }	      if(!numericalVarianceIsCalculated)    {    if(!numericalVarianceIsCalculated)    {    numericalVariance    =    null;    }    	non-compiled	[CE]  illegal  start  of  expression	173	None
2444	[BUG]  [BUGGY]  numericalVariance  =  getNumberOfSuccesses();  if(!numericalVarianceIsCalculated)  {  if(!numericalVarianceIsCalculated)  {  numericalVariance  =  null;  }  [CE]  illegal  start  of  expression  [CONTEXT]    public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();    [BUGGY]  numericalVariance  =  getNumberOfSuccesses();  if(!numericalVarianceIsCalculated)  {  if(!numericalVarianceIsCalculated)  {  numericalVariance  =  null;  }  [BUGGY]    numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	281	281	1	replace	numericalVariance  =  getNumberOfSuccesses();  if(!numericalVarianceIsCalculated)  {  if(!numericalVarianceIsCalculated)  {  numericalVariance  =  null;  }	      if(!numericalVarianceIsCalculated)    {    if(!numericalVarianceIsCalculated)    {    numericalVariance    =    null;    }    	non-compiled	[CE]  illegal  start  of  expression	173	None
2463	[BUG]  [BUGGY]  getNumberOfSuccesses()  +  1;  [CE]  not  a  statement  [CONTEXT]    public  int  getSupportLowerBound()  {    [BUGGY]  getNumberOfSuccesses()  +  1;  [BUGGY]    return  FastMath.max(0,        getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  }  [CLASS]  HypergeometricDistribution  [METHOD]  getSupportLowerBound  [RETURN_TYPE]  int  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	308	309	1	replace	getNumberOfSuccesses()  +  1;	      getNumberOfSuccesses();    	non-compiled	[CE]  not  a  statement	276	None
2484	[BUG]  [BUGGY]  if(!numeticVarianceIsCalculated)  {  [CE]  cannot  find  symbol  numeticVarianceIsCalculated  [CONTEXT]    public  double  getNumericalVariance()  {    [BUGGY]  if(!numeticVarianceIsCalculated)  {  [BUGGY]    numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	279	279	1	replace	if(!numeticVarianceIsCalculated)  {	  if(numericalVarianceIsCalculated)    {    	non-compiled	[CE]  cannot  find  symbol  numeticVarianceIsCalculated	23	None
2503	[BUG]  [BUGGY]  final  double  k  =  getDecimalSize().negativeVarianceIsCalculated();  [CE]  cannot  find  symbol  [CONTEXT]    protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();  final  double  m  =  getNumberOfSuccesses();    [BUGGY]  final  double  k  =  getDecimalSize().negativeVarianceIsCalculated();  [BUGGY]    final  double  n  =  getSampleSize();  return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	294	294	1	replace	final  double  k  =  getDecimalSize().negativeVarianceIsCalculated();	      final    double    k    =    getDecimalSize();    	non-compiled	[CE]  cannot  find  symbol	304	None
2504	[BUG]  [BUGGY]  final  double  k  =  getDecimalSize().negativeVariance;  [CE]  cannot  find  symbol  [CONTEXT]    protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();  final  double  m  =  getNumberOfSuccesses();    [BUGGY]  final  double  k  =  getDecimalSize().negativeVariance;  [BUGGY]    final  double  n  =  getSampleSize();  return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	294	294	1	replace	final  double  k  =  getDecimalSize().negativeVariance;	      final    double    k    =    getDecimalSize();    	non-compiled	[CE]  cannot  find  symbol	304	None
2544	[BUG]  [BUGGY]  int  dx  =  getNumberOfSuccesses();  [CE]  missing  return  statement  [CONTEXT]    public  int  getSupportLowerBound()  {    [BUGGY]  int  dx  =  getNumberOfSuccesses();  [BUGGY]    getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  }  [CLASS]  HypergeometricDistribution  [METHOD]  getSupportLowerBound  [RETURN_TYPE]  int  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	308	309	1	replace	int  dx  =  getNumberOfSuccesses();	      	non-compiled	[CE]  missing  return  statement	5	None
2563	[BUG]  [BUGGY]  [FE]  AssertionError  testMoments  [CONTEXT]    public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();    [BUGGY]  numericalVariance  =  getNumberOfSuccesses()  /  2.0;  [BUGGY]    numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	281	281	1	add	numericalVariance  =  getNumberOfSuccesses()  /  2.0;	      numericalVariance    =    getNumberOfSuccesses();    	compilable	  [FE]  AssertionError  testMoments	322	1
2564	[BUG]  [BUGGY]  numericalVariance  =  getNumberOfSuccesses()  /  2.0;  [FE]  AssertionError  testMoments  [CONTEXT]    public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();    [BUGGY]  numericalVariance  =  getNumberOfSuccesses()  /  2.0;  [BUGGY]    numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	281	281	1	replace	numericalVariance  =  getNumberOfSuccesses()  /  2.0;	      numericalVariance    =    getNumberOfSuccesses();    	compilable	  [FE]  AssertionError  testMoments	322	1
2564	[BUG]  [BUGGY]  [FE]  AssertionError  testMoments  [CONTEXT]    public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();    [BUGGY]  numericalVariance  =  getNumberOfSuccesses()  /  2;  [BUGGY]    numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	281	281	1	add	numericalVariance  =  getNumberOfSuccesses()  /  2;	      numericalVariance    =    getNumberOfSuccesses();    	compilable	  [FE]  AssertionError  testMoments	322	1
2565	[BUG]  [BUGGY]  numericalVariance  =  getNumberOfSuccesses()  /  2;  [FE]  AssertionError  testMoments  [CONTEXT]    public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();    [BUGGY]  numericalVariance  =  getNumberOfSuccesses()  /  2;  [BUGGY]    numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	281	281	1	replace	numericalVariance  =  getNumberOfSuccesses()  /  2;	      numericalVariance    =    getNumberOfSuccesses();    	compilable	  [FE]  AssertionError  testMoments	322	1
2584	[BUG]  [BUGGY]  [FE]  AssertionError  testMath1021  [CONTEXT]    public  int  getSupportLowerBound()  {    [BUGGY]      int  populationSize  =  getPopulationSize();  int  numberOfSuccesses  =  getNumberOfSuccesses()  -  getNumberOfSuccesses();  [BUGGY]    return  FastMath.max(0,        getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  }  [CLASS]  HypergeometricDistribution  [METHOD]  getSupportLowerBound  [RETURN_TYPE]  int  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	308	309	1	add	        int    populationSize    =    getPopulationSize();    int  numberOfSuccesses  =  getNumberOfSuccesses()  -  getNumberOfSuccesses();	  	compilable	  [FE]  AssertionError  testMath1021	63	1
2585	[BUG]  [BUGGY]      int  populationSize  =  getPopulationSize();  int  numberOfSuccesses  =  getNumberOfSuccesses()  -  getNumberOfSuccesses();  [FE]  AssertionError  testMath1021  [CONTEXT]    public  int  getSupportLowerBound()  {    [BUGGY]      int  populationSize  =  getPopulationSize();  int  numberOfSuccesses  =  getNumberOfSuccesses()  -  getNumberOfSuccesses();  [BUGGY]    return  FastMath.max(0,        getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  }  [CLASS]  HypergeometricDistribution  [METHOD]  getSupportLowerBound  [RETURN_TYPE]  int  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	308	309	1	replace	        int    populationSize    =    getPopulationSize();    int  numberOfSuccesses  =  getNumberOfSuccesses()  -  getNumberOfSuccesses();	  	compilable	  [FE]  AssertionError  testMath1021	63	1
2585	[BUG]  [BUGGY]      int  populationSize  =  getPopulationSize();  int  populationSize  =  getNumberOfSuccesses()  -  getNumberOfSuccesses();  [CE]  variable  populationSize  is  already  defined  in  method  getSupportLowerBound()  [CONTEXT]    public  int  getSupportLowerBound()  {    [BUGGY]      int  populationSize  =  getPopulationSize();  int  populationSize  =  getNumberOfSuccesses()  -  getNumberOfSuccesses();  [BUGGY]    return  FastMath.max(0,        getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  }  [CLASS]  HypergeometricDistribution  [METHOD]  getSupportLowerBound  [RETURN_TYPE]  int  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	308	309	1	replace	        int    populationSize    =    getPopulationSize();    int  populationSize  =  getNumberOfSuccesses()  -  getNumberOfSuccesses();	  	non-compiled	[CE]  variable  populationSize  is  already  defined  in  method  getSupportLowerBound()	63	None
2601	[BUG]  [BUGGY]  final  double  dx  =  getDx();  [CE]  cannot  find  symbol  [CONTEXT]    protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();    [BUGGY]  final  double  dx  =  getDx();  [BUGGY]    final  double  n  =  getSampleSize();  return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	293	293	1	replace	final  double  dx  =  getDx();	  final    double    m    =    getNumberOfSuccesses()    *    2;    	non-compiled	[CE]  cannot  find  symbol	184	None
2603	[BUG]  [BUGGY]  final  double  dx  =  getDegree();  [CE]  cannot  find  symbol  [CONTEXT]    protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();    [BUGGY]  final  double  dx  =  getDegree();  [BUGGY]    final  double  n  =  getSampleSize();  return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	293	293	1	replace	final  double  dx  =  getDegree();	  final    double    m    =    getNumberOfSuccesses()    *    2;    	non-compiled	[CE]  cannot  find  symbol	184	None
2622	[BUG]  [BUGGY]  numericalVariance  =  null;  [CE]  incompatible  types  [CONTEXT]    public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }    [BUGGY]  numericalVariance  =  null;  [BUGGY]    return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	283	283	1	replace	numericalVariance  =  null;	      if(!numericalVarianceIsCalculated)    {    if(!numericalVarianceIsCalculated)    {    numericalVariance    =    null;    }    	non-compiled	[CE]  incompatible  types	102	None
2623	[BUG]  [BUGGY]  numericalVariance  =!numericalVarianceIsCalculated)  {  if(!numericalVarianceIsCalculated)  {  numericalVariance  =  null;  }  [CE]  ';'  expected  [CONTEXT]    public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }    [BUGGY]  numericalVariance  =!numericalVarianceIsCalculated)  {  if(!numericalVarianceIsCalculated)  {  numericalVariance  =  null;  }  [BUGGY]    return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	283	283	1	replace	numericalVariance  =!numericalVarianceIsCalculated)  {  if(!numericalVarianceIsCalculated)  {  numericalVariance  =  null;  }	      if(!numericalVarianceIsCalculated)    {    if(!numericalVarianceIsCalculated)    {    numericalVariance    =    null;    }    	non-compiled	[CE]  ';'  expected	102	None
2624	[BUG]  [BUGGY]  numericalVariance  =  null;  if(!numericalVarianceIsCalculated)  {  if(!numericalVarianceIsCalculated)  {  numericalVariance  =  null;  }  [CE]  illegal  start  of  expression  [CONTEXT]    public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }    [BUGGY]  numericalVariance  =  null;  if(!numericalVarianceIsCalculated)  {  if(!numericalVarianceIsCalculated)  {  numericalVariance  =  null;  }  [BUGGY]    return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	283	283	1	replace	numericalVariance  =  null;  if(!numericalVarianceIsCalculated)  {  if(!numericalVarianceIsCalculated)  {  numericalVariance  =  null;  }	      if(!numericalVarianceIsCalculated)    {    if(!numericalVarianceIsCalculated)    {    numericalVariance    =    null;    }    	non-compiled	[CE]  illegal  start  of  expression	102	None
2643	[BUG]  [BUGGY]  [FE]  AssertionError  testMoments  [CONTEXT]    protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();    [BUGGY]  final  double  m  =  getNumberOfSuccesses()  *  2  +  1;  [BUGGY]    final  double  n  =  getSampleSize();  return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	293	293	1	add	final  double  m  =  getNumberOfSuccesses()  *  2  +  1;	  final    double    m    =    getNumberOfSuccesses()    *    2;    	compilable	  [FE]  AssertionError  testMoments	184	1
2644	[BUG]  [BUGGY]  final  double  m  =  getNumberOfSuccesses()  *  2  +  1;  [FE]  AssertionError  testMoments  [CONTEXT]    protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();    [BUGGY]  final  double  m  =  getNumberOfSuccesses()  *  2  +  1;  [BUGGY]    final  double  n  =  getSampleSize();  return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	293	293	1	replace	final  double  m  =  getNumberOfSuccesses()  *  2  +  1;	  final    double    m    =    getNumberOfSuccesses()    *    2;    	compilable	  [FE]  AssertionError  testMoments	184	1
2644	[BUG]  [BUGGY]  [FE]  AssertionError  testMath1021  [CONTEXT]    protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();    [BUGGY]  final  double  m  =  getNumberOfSuccesses()  *  1;  [BUGGY]    final  double  n  =  getSampleSize();  return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	293	293	1	add	final  double  m  =  getNumberOfSuccesses()  *  1;	  final    double    m    =    getNumberOfSuccesses()    *    2;    	compilable	  [FE]  AssertionError  testMath1021	184	1
2645	[BUG]  [BUGGY]  final  double  m  =  getNumberOfSuccesses()  *  1;  [FE]  AssertionError  testMath1021  [CONTEXT]    protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();    [BUGGY]  final  double  m  =  getNumberOfSuccesses()  *  1;  [BUGGY]    final  double  n  =  getSampleSize();  return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	293	293	1	replace	final  double  m  =  getNumberOfSuccesses()  *  1;	  final    double    m    =    getNumberOfSuccesses()    *    2;    	compilable	  [FE]  AssertionError  testMath1021	184	1
2661	[BUG]  [BUGGY]  numericalVariance  =  getNumberOfSuccesses()  /  2.0;  [CE]  cannot  find  symbol  m  [CONTEXT]    protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();    [BUGGY]  numericalVariance  =  getNumberOfSuccesses()  /  2.0;  [BUGGY]    final  double  m  =  getNumberOfSuccesses();  final  double  n  =  getSampleSize();  return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	293	293	1	replace	numericalVariance  =  getNumberOfSuccesses()  /  2.0;	      final    double    n    =    getNumberOfSuccesses();    	non-compiled	[CE]  cannot  find  symbol  m	142	None
2663	[BUG]  [BUGGY]  numericalVariance  =  getNumberOfSuccesses()  /  2;  [CE]  cannot  find  symbol  m  [CONTEXT]    protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();    [BUGGY]  numericalVariance  =  getNumberOfSuccesses()  /  2;  [BUGGY]    final  double  m  =  getNumberOfSuccesses();  final  double  n  =  getSampleSize();  return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	293	293	1	replace	numericalVariance  =  getNumberOfSuccesses()  /  2;	      final    double    n    =    getNumberOfSuccesses();    	non-compiled	[CE]  cannot  find  symbol  m	142	None
2681	[BUG]  [BUGGY]  final  double  dx  =  getDx();  [CE]  cannot  find  symbol  [CONTEXT]    public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {    [BUGGY]  final  double  dx  =  getDx();  [BUGGY]    numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	280	280	1	replace	final  double  dx  =  getDx();	      if(!numericalVarianceIsCalculated)    {    if(!numericalVarianceIsCalculated)    {    return    0;    }    	non-compiled	[CE]  cannot  find  symbol	41	None
2703	[BUG]  [BUGGY]  if(getNumberOfSuccesses()  >  1)  {  if(getNumberOfSuccesses()  >  0)  {  return(double)getNumberOfSuccesses()  *  getNumberOfSuccesses();  }  [CE]  illegal  start  of  expression  [CONTEXT]    public  double  getNumericalMean()  {    [BUGGY]  if(getNumberOfSuccesses()  >  1)  {  if(getNumberOfSuccesses()  >  0)  {  return(double)getNumberOfSuccesses()  *  getNumberOfSuccesses();  }  [BUGGY]    return  (double)  (getSampleSize()  *  getNumberOfSuccesses())  /  (double)  getPopulationSize();  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalMean  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	268	268	1	replace	if(getNumberOfSuccesses()  >  1)  {  if(getNumberOfSuccesses()  >  0)  {  return(double)getNumberOfSuccesses()  *  getNumberOfSuccesses();  }	      if(getNumberOfSuccesses()    >    0)    {    if(getNumberOfSuccesses()    >    0)    {    return(double)getNumberOfSuccesses()    *    getNumberOfSuccesses();    }    	non-compiled	[CE]  illegal  start  of  expression	72	None
2704	[BUG]  [BUGGY]  if(getNumberOfPrecess()  >  0)  {  if(getNumberOfSuccesses()  >  0)  {  return(double)getNumberOfSuccesses()  *  getNumberOfSuccesses();  }  [CE]  illegal  start  of  expression  [CONTEXT]    public  double  getNumericalMean()  {    [BUGGY]  if(getNumberOfPrecess()  >  0)  {  if(getNumberOfSuccesses()  >  0)  {  return(double)getNumberOfSuccesses()  *  getNumberOfSuccesses();  }  [BUGGY]    return  (double)  (getSampleSize()  *  getNumberOfSuccesses())  /  (double)  getPopulationSize();  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalMean  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	268	268	1	replace	if(getNumberOfPrecess()  >  0)  {  if(getNumberOfSuccesses()  >  0)  {  return(double)getNumberOfSuccesses()  *  getNumberOfSuccesses();  }	      if(getNumberOfSuccesses()    >    0)    {    if(getNumberOfSuccesses()    >    0)    {    return(double)getNumberOfSuccesses()    *    getNumberOfSuccesses();    }    	non-compiled	[CE]  illegal  start  of  expression	72	None
2724	[BUG]  [BUGGY]  return  FastMath.max(0,  getNumberOfSuccesses()  +  getSampleSize()  -  getPopulationSize());  double  numericalVariance  =  getNumberOfSuccesses()  /(numberOfSuccesses  -  1));  [CE]  ';'  expected  [CONTEXT]    public  int  getSupportLowerBound()  {    [BUGGY]  return  FastMath.max(0,  getNumberOfSuccesses()  +  getSampleSize()  -  getPopulationSize());  double  numericalVariance  =  getNumberOfSuccesses()  /(numberOfSuccesses  -  1));  [BUGGY]    getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  }  [CLASS]  HypergeometricDistribution  [METHOD]  getSupportLowerBound  [RETURN_TYPE]  int  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	308	309	1	replace	return    FastMath.max(0,    getNumberOfSuccesses()    +    getSampleSize()    -    getPopulationSize());    double  numericalVariance  =  getNumberOfSuccesses()  /(numberOfSuccesses  -  1));	  	non-compiled	[CE]  ';'  expected	2	None
2725	[BUG]  [BUGGY]  return  FastMath.max(0,  getNumberOfSuccesses()  +  getSampleSize()  -  getPopulationSize());  double  numericalVariance  =  getNumberOfSuccesses()  /  10;  [CE]  unreachable  statement  [CONTEXT]    public  int  getSupportLowerBound()  {    [BUGGY]  return  FastMath.max(0,  getNumberOfSuccesses()  +  getSampleSize()  -  getPopulationSize());  double  numericalVariance  =  getNumberOfSuccesses()  /  10;  [BUGGY]    getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  }  [CLASS]  HypergeometricDistribution  [METHOD]  getSupportLowerBound  [RETURN_TYPE]  int  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	308	309	1	replace	return    FastMath.max(0,    getNumberOfSuccesses()    +    getSampleSize()    -    getPopulationSize());    double  numericalVariance  =  getNumberOfSuccesses()  /  10;	  	non-compiled	[CE]  unreachable  statement	2	None
2742	[BUG]  [BUGGY]  numericalVariance  =  false;  [CE]  incompatible  types  [CONTEXT]    public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();    [BUGGY]  numericalVariance  =  false;  [BUGGY]    numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	281	281	1	replace	numericalVariance  =  false;	      if(!numericalVarianceIsCalculated)    {    if(!numericalVarianceIsCalculated)    {    numericalVariance    =    false;    }    	non-compiled	[CE]  incompatible  types	172	None
2743	[BUG]  [BUGGY]  numericalVariance  =  false;  if(!numericalVarianceIsCalculated)  {  [CE]  illegal  start  of  expression  [CONTEXT]    public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();    [BUGGY]  numericalVariance  =  false;  if(!numericalVarianceIsCalculated)  {  [BUGGY]    numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	281	281	1	replace	numericalVariance  =  false;  if(!numericalVarianceIsCalculated)  {	      if(!numericalVarianceIsCalculated)    {    if(!numericalVarianceIsCalculated)    {    numericalVariance    =    false;    }    	non-compiled	[CE]  illegal  start  of  expression	172	None
2744	[BUG]  [BUGGY]  if(numericalVarianceIsCalculated)  {  if(!numericalVarianceIsCalculated)  {  numericalVariance  =  false;  }  [CE]  illegal  start  of  expression  [CONTEXT]    public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();    [BUGGY]  if(numericalVarianceIsCalculated)  {  if(!numericalVarianceIsCalculated)  {  numericalVariance  =  false;  }  [BUGGY]    numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	281	281	1	replace	if(numericalVarianceIsCalculated)  {  if(!numericalVarianceIsCalculated)  {  numericalVariance  =  false;  }	      if(!numericalVarianceIsCalculated)    {    if(!numericalVarianceIsCalculated)    {    numericalVariance    =    false;    }    	non-compiled	[CE]  illegal  start  of  expression	172	None
2761	[BUG]  [BUGGY]  return  numericalVariance  /(numberOfSuccesses  -  1)/(numberOfSuccesses  -  1)*(numberOfSuccesses  -  1));  [CE]  ';'  expected  [CONTEXT]    public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }    [BUGGY]  return  numericalVariance  /(numberOfSuccesses  -  1)/(numberOfSuccesses  -  1)*(numberOfSuccesses  -  1));  [BUGGY]    }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	283	283	1	replace	return  numericalVariance  /(numberOfSuccesses  -  1)/(numberOfSuccesses  -  1)*(numberOfSuccesses  -  1));	  return    numericalVariance    *    numberOfSuccesses;    	non-compiled	[CE]  ';'  expected	343	None
2762	[BUG]  [BUGGY]  return  numericalVariance  /(numberOfSuccesses  -  1)/(populationSize  -  1)*(numberOfSuccesses  -  1));  [CE]  ';'  expected  [CONTEXT]    public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }    [BUGGY]  return  numericalVariance  /(numberOfSuccesses  -  1)/(populationSize  -  1)*(numberOfSuccesses  -  1));  [BUGGY]    }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	283	283	1	replace	return  numericalVariance  /(numberOfSuccesses  -  1)/(populationSize  -  1)*(numberOfSuccesses  -  1));	  return    numericalVariance    *    numberOfSuccesses;    	non-compiled	[CE]  ';'  expected	343	None
2763	[BUG]  [BUGGY]  return  numericalVariance  /(numberOfSuccesses  -  1)/(numberOfSuccesses  -  1));  [CE]  ';'  expected  [CONTEXT]    public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }    [BUGGY]  return  numericalVariance  /(numberOfSuccesses  -  1)/(numberOfSuccesses  -  1));  [BUGGY]    }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	283	283	1	replace	return  numericalVariance  /(numberOfSuccesses  -  1)/(numberOfSuccesses  -  1));	  return    numericalVariance    *    numberOfSuccesses;    	non-compiled	[CE]  ';'  expected	343	None
2764	[BUG]  [BUGGY]  return  numericalVariance  /(numberOfSuccesses  -  1)/(numberOfSuccesses  -  1)*(populationSize  -  1));  [CE]  ';'  expected  [CONTEXT]    public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }    [BUGGY]  return  numericalVariance  /(numberOfSuccesses  -  1)/(numberOfSuccesses  -  1)*(populationSize  -  1));  [BUGGY]    }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	283	283	1	replace	return  numericalVariance  /(numberOfSuccesses  -  1)/(numberOfSuccesses  -  1)*(populationSize  -  1));	  return    numericalVariance    *    numberOfSuccesses;    	non-compiled	[CE]  ';'  expected	343	None
2783	[BUG]  [BUGGY]  numericalVarianceIsCalculated  =(numbericalVariance  ==  0)?  numericalVarianceIsCalculated  :  false;  [CE]  cannot  find  symbol  numbericalVariance  [CONTEXT]    public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();    [BUGGY]  numericalVarianceIsCalculated  =(numbericalVariance  ==  0)?  numericalVarianceIsCalculated  :  false;  [BUGGY]    }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	281	281	1	replace	numericalVarianceIsCalculated  =(numbericalVariance  ==  0)?  numericalVarianceIsCalculated  :  false;	  numericalVarianceIsCalculated    =(numericalVariance    ==    0)?    numericalVarianceIsCalculated    :    true;    	non-compiled	[CE]  cannot  find  symbol  numbericalVariance	395	None
2784	[BUG]  [BUGGY]  numericalVarianceIsCalculated  =(numbericalVariance  <  0)?  numericalVarianceIsCalculated  :  false;  [CE]  cannot  find  symbol  numbericalVariance  [CONTEXT]    public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();    [BUGGY]  numericalVarianceIsCalculated  =(numbericalVariance  <  0)?  numericalVarianceIsCalculated  :  false;  [BUGGY]    }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	281	281	1	replace	numericalVarianceIsCalculated  =(numbericalVariance  <  0)?  numericalVarianceIsCalculated  :  false;	  numericalVarianceIsCalculated    =(numericalVariance    ==    0)?    numericalVarianceIsCalculated    :    true;    	non-compiled	[CE]  cannot  find  symbol  numbericalVariance	395	None
2803	[BUG]  [BUGGY]  numericalVariance  =  getPopulationSize();  [CE]  missing  return  statement  [CONTEXT]    public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }    [BUGGY]  numericalVariance  =  getPopulationSize();  [BUGGY]    return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	283	283	1	replace	numericalVariance  =  getPopulationSize();	      if(!numericalVarianceIsCalculated)    {    if(!numericalVarianceIsCalculated)    {    numericalVariance    =    calculateNumberOfSuccesses();    }    	non-compiled	[CE]  missing  return  statement	101	None
2804	[BUG]  [BUGGY]  numericalVariance  =  getNumberOfSuccesses()  *  getSampleSize();  [CE]  missing  return  statement  [CONTEXT]    public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }    [BUGGY]  numericalVariance  =  getNumberOfSuccesses()  *  getSampleSize();  [BUGGY]    return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	283	283	1	replace	numericalVariance  =  getNumberOfSuccesses()  *  getSampleSize();	      if(!numericalVarianceIsCalculated)    {    if(!numericalVarianceIsCalculated)    {    numericalVariance    =    calculateNumberOfSuccesses();    }    	non-compiled	[CE]  missing  return  statement	101	None
2822	[BUG]  [BUGGY]  final  double  k  =  getDayOfMonth()  -  1;  [CE]  cannot  find  symbol  [CONTEXT]    protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();  final  double  m  =  getNumberOfSuccesses();    [BUGGY]  final  double  k  =  getDayOfMonth()  -  1;  [BUGGY]    final  double  n  =  getSampleSize();  return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	294	294	1	replace	final  double  k  =  getDayOfMonth()  -  1;	      final    double    k    =    getDayOfMonth();    	non-compiled	[CE]  cannot  find  symbol	483	None
2824	[BUG]  [BUGGY]  final  double  k  =  getDayOfMonth()  +  1;  [CE]  cannot  find  symbol  [CONTEXT]    protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();  final  double  m  =  getNumberOfSuccesses();    [BUGGY]  final  double  k  =  getDayOfMonth()  +  1;  [BUGGY]    final  double  n  =  getSampleSize();  return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	294	294	1	replace	final  double  k  =  getDayOfMonth()  +  1;	      final    double    k    =    getDayOfMonth();    	non-compiled	[CE]  cannot  find  symbol	483	None
2844	[BUG]  [BUGGY]  int  populationSize  =  getPopulationSize()  +  1;  [CE]  missing  return  statement  [CONTEXT]    public  int  getSupportLowerBound()  {    [BUGGY]  int  populationSize  =  getPopulationSize()  +  1;  [BUGGY]    return  FastMath.max(0,        getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  }  [CLASS]  HypergeometricDistribution  [METHOD]  getSupportLowerBound  [RETURN_TYPE]  int  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	308	309	1	replace	int  populationSize  =  getPopulationSize()  +  1;	      int    populationSize    =    getPopulationSize();    	non-compiled	[CE]  missing  return  statement	64	None
2862	[BUG]  [BUGGY]  if(numericalVarianceIsCalculated)  {  if(!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumberOfSuccesses();  }  [CE]  illegal  start  of  expression  [CONTEXT]    public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();    [BUGGY]  if(numericalVarianceIsCalculated)  {  if(!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumberOfSuccesses();  }  [BUGGY]    numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	281	281	1	replace	if(numericalVarianceIsCalculated)  {  if(!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumberOfSuccesses();  }	      if(!numericalVarianceIsCalculated)    {    if(!numericalVarianceIsCalculated)    {    numericalVariance    =    calculateNumberOfSuccesses();    }    	non-compiled	[CE]  illegal  start  of  expression	171	None
2863	[BUG]  [BUGGY]  if(!numericalVarianceIsCalculated)  {  if(!numericalVarianceIsCalculated)  {  numericalVariance  =  computeNumberOfSuccesses();  }  [CE]  illegal  start  of  expression  [CONTEXT]    public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();    [BUGGY]  if(!numericalVarianceIsCalculated)  {  if(!numericalVarianceIsCalculated)  {  numericalVariance  =  computeNumberOfSuccesses();  }  [BUGGY]    numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	281	281	1	replace	if(!numericalVarianceIsCalculated)  {  if(!numericalVarianceIsCalculated)  {  numericalVariance  =  computeNumberOfSuccesses();  }	      if(!numericalVarianceIsCalculated)    {    if(!numericalVarianceIsCalculated)    {    numericalVariance    =    calculateNumberOfSuccesses();    }    	non-compiled	[CE]  illegal  start  of  expression	171	None
2864	[BUG]  [BUGGY]  if(!numericalVarianceIsCalculated)  {  if(!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumberOfSuccesses();  else  {  [CE]  'else'  without  'if'  [CONTEXT]    public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();    [BUGGY]  if(!numericalVarianceIsCalculated)  {  if(!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumberOfSuccesses();  else  {  [BUGGY]    numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	281	281	1	replace	if(!numericalVarianceIsCalculated)  {  if(!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumberOfSuccesses();  else  {	      if(!numericalVarianceIsCalculated)    {    if(!numericalVarianceIsCalculated)    {    numericalVariance    =    calculateNumberOfSuccesses();    }    	non-compiled	[CE]  'else'  without  'if'	171	None
2884	[BUG]  [BUGGY]  numericalVariance  =  calculateStdDevVariance()  /(numberOfSuccesses  -  1));  [CE]  ';'  expected  [CONTEXT]    public  double  getNumericalVariance()  {    [BUGGY]  numericalVariance  =  calculateStdDevVariance()  /(numberOfSuccesses  -  1));  [BUGGY]    numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	279	279	1	replace	numericalVariance  =  calculateStdDevVariance()  /(numberOfSuccesses  -  1));	  if(!nativeVarianceIsCalculated)    {    	non-compiled	[CE]  ';'  expected	24	None
2923	[BUG]  [BUGGY]  final  double  k  =  getKnowNumberOfSuccesses()  -  1;  [CE]  cannot  find  symbol  [CONTEXT]    protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();  final  double  m  =  getNumberOfSuccesses();    [BUGGY]  final  double  k  =  getKnowNumberOfSuccesses()  -  1;  [BUGGY]    final  double  n  =  getSampleSize();  return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	294	294	1	replace	final  double  k  =  getKnowNumberOfSuccesses()  -  1;	      final    double    k    =    getNumberOfSuccesses();    	non-compiled	[CE]  cannot  find  symbol	303	None
2924	[BUG]  [BUGGY]  final  double  k  =  getKnowNumberOfSuccesses().length;  [CE]  cannot  find  symbol  [CONTEXT]    protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();  final  double  m  =  getNumberOfSuccesses();    [BUGGY]  final  double  k  =  getKnowNumberOfSuccesses().length;  [BUGGY]    final  double  n  =  getSampleSize();  return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	294	294	1	replace	final  double  k  =  getKnowNumberOfSuccesses().length;	      final    double    k    =    getNumberOfSuccesses();    	non-compiled	[CE]  cannot  find  symbol	303	None
2942	[BUG]  [BUGGY]      int  populationSize  =  getPopulationSize();  if(numericalVariance!=  0)  {  if(numericalVarianceIsCalculated)  {  [CE]  illegal  start  of  expression  [CONTEXT]    public  int  getSupportLowerBound()  {    [BUGGY]      int  populationSize  =  getPopulationSize();  if(numericalVariance!=  0)  {  if(numericalVarianceIsCalculated)  {  [BUGGY]    return  FastMath.max(0,        getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  }  [CLASS]  HypergeometricDistribution  [METHOD]  getSupportLowerBound  [RETURN_TYPE]  int  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	308	309	1	replace	        int    populationSize    =    getPopulationSize();    if(numericalVariance!=  0)  {  if(numericalVarianceIsCalculated)  {	  	non-compiled	[CE]  illegal  start  of  expression	63	None
2943	[BUG]  [BUGGY]      int  populationSize  =  getPopulationSize();  if(numbericalVariance!=  0)  {  if(numericalVarianceIsCalculated)  {  [CE]  illegal  start  of  expression  [CONTEXT]    public  int  getSupportLowerBound()  {    [BUGGY]      int  populationSize  =  getPopulationSize();  if(numbericalVariance!=  0)  {  if(numericalVarianceIsCalculated)  {  [BUGGY]    return  FastMath.max(0,        getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  }  [CLASS]  HypergeometricDistribution  [METHOD]  getSupportLowerBound  [RETURN_TYPE]  int  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	308	309	1	replace	        int    populationSize    =    getPopulationSize();    if(numbericalVariance!=  0)  {  if(numericalVarianceIsCalculated)  {	  	non-compiled	[CE]  illegal  start  of  expression	63	None
2944	[BUG]  [BUGGY]      int  populationSize  =  getPopulationSize();  if(numbericalVariance  ==  0)  {  if(numericalVarianceIsCalculated)  {  [CE]  illegal  start  of  expression  [CONTEXT]    public  int  getSupportLowerBound()  {    [BUGGY]      int  populationSize  =  getPopulationSize();  if(numbericalVariance  ==  0)  {  if(numericalVarianceIsCalculated)  {  [BUGGY]    return  FastMath.max(0,        getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  }  [CLASS]  HypergeometricDistribution  [METHOD]  getSupportLowerBound  [RETURN_TYPE]  int  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	308	309	1	replace	        int    populationSize    =    getPopulationSize();    if(numbericalVariance  ==  0)  {  if(numericalVarianceIsCalculated)  {	  	non-compiled	[CE]  illegal  start  of  expression	63	None
2945	[BUG]  [BUGGY]      int  populationSize  =  getPopulationSize();  if(numericalVariance!=  0.0)  {  [CE]  illegal  start  of  expression  [CONTEXT]    public  int  getSupportLowerBound()  {    [BUGGY]      int  populationSize  =  getPopulationSize();  if(numericalVariance!=  0.0)  {  [BUGGY]    return  FastMath.max(0,        getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  }  [CLASS]  HypergeometricDistribution  [METHOD]  getSupportLowerBound  [RETURN_TYPE]  int  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	308	309	1	replace	        int    populationSize    =    getPopulationSize();    if(numericalVariance!=  0.0)  {	  	non-compiled	[CE]  illegal  start  of  expression	63	None
2961	[BUG]  [BUGGY]  if(!numericalVarianceIsCalculated  &&  getNumberOfSuccesses()  >  0)  {  if(numberOfSuccesses  >  1)  {  if(!numericalVarianceIsCalculated  &&  getNumberOfSuccesses()  >  0)  {  [CE]  illegal  start  of  expression  [CONTEXT]    public  double  getNumericalVariance()  {    [BUGGY]  if(!numericalVarianceIsCalculated  &&  getNumberOfSuccesses()  >  0)  {  if(numberOfSuccesses  >  1)  {  if(!numericalVarianceIsCalculated  &&  getNumberOfSuccesses()  >  0)  {  [BUGGY]    numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	279	279	1	replace	if(!numericalVarianceIsCalculated    &&    getNumberOfSuccesses()    >    0)    {    if(numberOfSuccesses  >  1)  {  if(!numericalVarianceIsCalculated  &&  getNumberOfSuccesses()  >  0)  {	  	non-compiled	[CE]  illegal  start  of  expression	204	None
2962	[BUG]  [BUGGY]  if(!numericalVarianceIsCalculated  &&  getNumberOfSuccesses()  >  0)  {  if(numberOfSuccesses  >  0)  {  if(!numericalVarianceIsCalculated  &&  getNumberOfSuccesses()  >  0)  {  [CE]  illegal  start  of  expression  [CONTEXT]    public  double  getNumericalVariance()  {    [BUGGY]  if(!numericalVarianceIsCalculated  &&  getNumberOfSuccesses()  >  0)  {  if(numberOfSuccesses  >  0)  {  if(!numericalVarianceIsCalculated  &&  getNumberOfSuccesses()  >  0)  {  [BUGGY]    numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	279	279	1	replace	if(!numericalVarianceIsCalculated    &&    getNumberOfSuccesses()    >    0)    {    if(numberOfSuccesses  >  0)  {  if(!numericalVarianceIsCalculated  &&  getNumberOfSuccesses()  >  0)  {	  	non-compiled	[CE]  illegal  start  of  expression	204	None
2964	[BUG]  [BUGGY]  if(!numericalVarianceIsCalculated  &&  getNumberOfSuccesses()  >  0)  {  if(numberOfSuccesses  >  0)  {  if(getNumberOfSuccesses()  >  1)  {  return  getNumberOfSuccesses();  }  [CE]  illegal  start  of  expression  [CONTEXT]    public  double  getNumericalVariance()  {    [BUGGY]  if(!numericalVarianceIsCalculated  &&  getNumberOfSuccesses()  >  0)  {  if(numberOfSuccesses  >  0)  {  if(getNumberOfSuccesses()  >  1)  {  return  getNumberOfSuccesses();  }  [BUGGY]    numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	279	279	1	replace	if(!numericalVarianceIsCalculated    &&    getNumberOfSuccesses()    >    0)    {    if(numberOfSuccesses  >  0)  {  if(getNumberOfSuccesses()  >  1)  {  return  getNumberOfSuccesses();  }	  	non-compiled	[CE]  illegal  start  of  expression	204	None
2965	[BUG]  [BUGGY]  if(!numericalVarianceIsCalculated  &&  getNumberOfSuccesses()  >  0)  {  if(numberOfSuccesses  >  0)  {  if(!numericalVarianceIsCalculated  &&  getNumberOfSuccesses()  >  1)  {  [CE]  illegal  start  of  expression  [CONTEXT]    public  double  getNumericalVariance()  {    [BUGGY]  if(!numericalVarianceIsCalculated  &&  getNumberOfSuccesses()  >  0)  {  if(numberOfSuccesses  >  0)  {  if(!numericalVarianceIsCalculated  &&  getNumberOfSuccesses()  >  1)  {  [BUGGY]    numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	279	279	1	replace	if(!numericalVarianceIsCalculated    &&    getNumberOfSuccesses()    >    0)    {    if(numberOfSuccesses  >  0)  {  if(!numericalVarianceIsCalculated  &&  getNumberOfSuccesses()  >  1)  {	  	non-compiled	[CE]  illegal  start  of  expression	204	None
2981	[BUG]  [BUGGY]  [FE]  AssertionError  testMoments  [CONTEXT]    public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();    [BUGGY]  numericalVarianceIsCalculated  =(numericalVariance  <  0)?  numericalVarianceIsCalculated  :  false;  numericalVariance  =  getNumberOfSuccesses();  [BUGGY]    }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	281	281	1	add	numericalVarianceIsCalculated    =(numericalVariance    <    0)?    numericalVarianceIsCalculated    :    false;    numericalVariance  =  getNumberOfSuccesses();	  	compilable	  [FE]  AssertionError  testMoments	392	1
2982	[BUG]  [BUGGY]  numericalVarianceIsCalculated  =(numericalVariance  <  0)?  numericalVarianceIsCalculated  :  false;  numericalVariance  =  getNumberOfSuccesses();  [FE]  AssertionError  testMoments  [CONTEXT]    public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();    [BUGGY]  numericalVarianceIsCalculated  =(numericalVariance  <  0)?  numericalVarianceIsCalculated  :  false;  numericalVariance  =  getNumberOfSuccesses();  [BUGGY]    }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	281	281	1	replace	numericalVarianceIsCalculated    =(numericalVariance    <    0)?    numericalVarianceIsCalculated    :    false;    numericalVariance  =  getNumberOfSuccesses();	  	compilable	  [FE]  AssertionError  testMoments	392	1
2982	[BUG]  [BUGGY]  numericalVarianceIsCalculated  =(numericalVariance  <  0)?  numericalVarianceIsCalculated  :  false;  numericalVariance  =  calculateNumberOfSuccesses();  [CE]  cannot  find  symbol  [CONTEXT]    public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();    [BUGGY]  numericalVarianceIsCalculated  =(numericalVariance  <  0)?  numericalVarianceIsCalculated  :  false;  numericalVariance  =  calculateNumberOfSuccesses();  [BUGGY]    }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	281	281	1	replace	numericalVarianceIsCalculated    =(numericalVariance    <    0)?    numericalVarianceIsCalculated    :    false;    numericalVariance  =  calculateNumberOfSuccesses();	  	non-compiled	[CE]  cannot  find  symbol	392	None
2983	[BUG]  [BUGGY]  numericalVarianceIsCalculated  =(numericalVariance  <  0)?  numericalVarianceIsCalculated  :  false;  numericalVariance  =  getNumberOfSuccesses()  *(numberOfSuccesses  -  1));  [CE]  ';'  expected  [CONTEXT]    public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();    [BUGGY]  numericalVarianceIsCalculated  =(numericalVariance  <  0)?  numericalVarianceIsCalculated  :  false;  numericalVariance  =  getNumberOfSuccesses()  *(numberOfSuccesses  -  1));  [BUGGY]    }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	281	281	1	replace	numericalVarianceIsCalculated    =(numericalVariance    <    0)?    numericalVarianceIsCalculated    :    false;    numericalVariance  =  getNumberOfSuccesses()  *(numberOfSuccesses  -  1));	  	non-compiled	[CE]  ';'  expected	392	None
2984	[BUG]  [BUGGY]  numericalVarianceIsCalculated  =(numericalVariance  <  0)?  numericalVarianceIsCalculated  :  false;  numericalVariance  =  computeNumberOfSuccesses();  [CE]  cannot  find  symbol  [CONTEXT]    public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();    [BUGGY]  numericalVarianceIsCalculated  =(numericalVariance  <  0)?  numericalVarianceIsCalculated  :  false;  numericalVariance  =  computeNumberOfSuccesses();  [BUGGY]    }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	281	281	1	replace	numericalVarianceIsCalculated    =(numericalVariance    <    0)?    numericalVarianceIsCalculated    :    false;    numericalVariance  =  computeNumberOfSuccesses();	  	non-compiled	[CE]  cannot  find  symbol	392	None
2985	[BUG]  [BUGGY]  numericalVarianceIsCalculated  =(numericalVariance  <  0)?  numericalVarianceIsCalculated  :  false;  numericalVariance  =  getNumberOfSuccesses()  /(numberOfSuccesses  -  1));  [CE]  ';'  expected  [CONTEXT]    public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();    [BUGGY]  numericalVarianceIsCalculated  =(numericalVariance  <  0)?  numericalVarianceIsCalculated  :  false;  numericalVariance  =  getNumberOfSuccesses()  /(numberOfSuccesses  -  1));  [BUGGY]    }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	281	281	1	replace	numericalVarianceIsCalculated    =(numericalVariance    <    0)?    numericalVarianceIsCalculated    :    false;    numericalVariance  =  getNumberOfSuccesses()  /(numberOfSuccesses  -  1));	  	non-compiled	[CE]  ';'  expected	392	None
3004	[BUG]  [BUGGY]  if(getNumberOfSuccesses()  >  0)  {  if(getPopulationSize()  >  0)  {  return  FastMath.max(0,  getNumberOfSuccesses()  +  getPopulationSize());  }  [CE]  illegal  start  of  expression  [CONTEXT]    public  int  getSupportLowerBound()  {    [BUGGY]  if(getNumberOfSuccesses()  >  0)  {  if(getPopulationSize()  >  0)  {  return  FastMath.max(0,  getNumberOfSuccesses()  +  getPopulationSize());  }  [BUGGY]    return  FastMath.max(0,        getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  }  [CLASS]  HypergeometricDistribution  [METHOD]  getSupportLowerBound  [RETURN_TYPE]  int  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	308	309	1	replace	if(getNumberOfSuccesses()  >  0)  {  if(getPopulationSize()  >  0)  {  return  FastMath.max(0,  getNumberOfSuccesses()  +  getPopulationSize());  }	      int    populationSize    =    getPopulationSize();    	non-compiled	[CE]  illegal  start  of  expression	64	None
3022	[BUG]  [BUGGY]  return  FastMath.max(0,  getVariance()  +  getNumberOfSuccesses()  *  getPopulationSize());  [CE]  cannot  find  symbol  [CONTEXT]    public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {    [BUGGY]  return  FastMath.max(0,  getVariance()  +  getNumberOfSuccesses()  *  getPopulationSize());  [BUGGY]    numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	280	280	1	replace	return  FastMath.max(0,  getVariance()  +  getNumberOfSuccesses()  *  getPopulationSize());	  numericalVariance    =    calculateNumericalVariance()    /(numericalVarianceIsCalculated));    	non-compiled	[CE]  cannot  find  symbol	34	None
3023	[BUG]  [BUGGY]  return  FastMath.max(0,  getVariance()  /  getNumberOfSuccesses()  +  getNumberOfSuccesses()  -  getPopulationSize());  [CE]  cannot  find  symbol  [CONTEXT]    public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {    [BUGGY]  return  FastMath.max(0,  getVariance()  /  getNumberOfSuccesses()  +  getNumberOfSuccesses()  -  getPopulationSize());  [BUGGY]    numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	280	280	1	replace	return  FastMath.max(0,  getVariance()  /  getNumberOfSuccesses()  +  getNumberOfSuccesses()  -  getPopulationSize());	  numericalVariance    =    calculateNumericalVariance()    /(numericalVarianceIsCalculated));    	non-compiled	[CE]  cannot  find  symbol	34	None
3024	[BUG]  [BUGGY]  return  FastMath.max(0,  getVariance()  -  getNumberOfSuccesses()  -  getPopulationSize());  [CE]  cannot  find  symbol  [CONTEXT]    public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {    [BUGGY]  return  FastMath.max(0,  getVariance()  -  getNumberOfSuccesses()  -  getPopulationSize());  [BUGGY]    numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	280	280	1	replace	return  FastMath.max(0,  getVariance()  -  getNumberOfSuccesses()  -  getPopulationSize());	  numericalVariance    =    calculateNumericalVariance()    /(numericalVarianceIsCalculated));    	non-compiled	[CE]  cannot  find  symbol	34	None
3042	[BUG]  [BUGGY]  if(numericalVarianceIsCalculated)  {  if(!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumberOfSuccesses();  }  [CE]  illegal  start  of  expression  [CONTEXT]    public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {    [BUGGY]  if(numericalVarianceIsCalculated)  {  if(!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumberOfSuccesses();  }  [BUGGY]    numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	280	280	1	replace	if(numericalVarianceIsCalculated)  {  if(!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumberOfSuccesses();  }	      if(!numericalVarianceIsCalculated)    {    if(!numericalVarianceIsCalculated)    {    numericalVariance    =    calculateNumberOfSuccesses();    }    	non-compiled	[CE]  illegal  start  of  expression	42	None
3043	[BUG]  [BUGGY]  if(!numericalVarianceIsCalculated)  {  if(!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumberOfSuccesses();  [Delete]  [CE]  illegal  start  of  expression  [CONTEXT]    public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {    [BUGGY]  if(!numericalVarianceIsCalculated)  {  if(!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumberOfSuccesses();  [Delete]  [BUGGY]    numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	280	280	1	replace	if(!numericalVarianceIsCalculated)  {  if(!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumberOfSuccesses();  [Delete]	      if(!numericalVarianceIsCalculated)    {    if(!numericalVarianceIsCalculated)    {    numericalVariance    =    calculateNumberOfSuccesses();    }    	non-compiled	[CE]  illegal  start  of  expression	42	None
3044	[BUG]  [BUGGY]  if(!numericalVarianceIsCalculated)  {  if(!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumberOfSuccesses();  else  {  [CE]  'else'  without  'if'  [CONTEXT]    public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {    [BUGGY]  if(!numericalVarianceIsCalculated)  {  if(!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumberOfSuccesses();  else  {  [BUGGY]    numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	280	280	1	replace	if(!numericalVarianceIsCalculated)  {  if(!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumberOfSuccesses();  else  {	      if(!numericalVarianceIsCalculated)    {    if(!numericalVarianceIsCalculated)    {    numericalVariance    =    calculateNumberOfSuccesses();    }    	non-compiled	[CE]  'else'  without  'if'	42	None
3062	[BUG]  [BUGGY]  checkNumberOfSuccesses(),  populationSize);  [CE]  ';'  expected  [CONTEXT]    public  int  getSupportLowerBound()  {    [BUGGY]  checkNumberOfSuccesses(),  populationSize);  [BUGGY]    return  FastMath.max(0,        getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  }  [CLASS]  HypergeometricDistribution  [METHOD]  getSupportLowerBound  [RETURN_TYPE]  int  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	308	309	1	replace	checkNumberOfSuccesses(),  populationSize);	      getPopulationSize();    	non-compiled	[CE]  ';'  expected	274	None
3063	[BUG]  [BUGGY]  checkNumberOfSuccesses()  -  1;  [CE]  not  a  statement  [CONTEXT]    public  int  getSupportLowerBound()  {    [BUGGY]  checkNumberOfSuccesses()  -  1;  [BUGGY]    return  FastMath.max(0,        getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  }  [CLASS]  HypergeometricDistribution  [METHOD]  getSupportLowerBound  [RETURN_TYPE]  int  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	308	309	1	replace	checkNumberOfSuccesses()  -  1;	      getPopulationSize();    	non-compiled	[CE]  not  a  statement	274	None
3064	[BUG]  [BUGGY]  checkNumberOfSuccesses(),  n);  [CE]  ';'  expected  [CONTEXT]    public  int  getSupportLowerBound()  {    [BUGGY]  checkNumberOfSuccesses(),  n);  [BUGGY]    return  FastMath.max(0,        getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  }  [CLASS]  HypergeometricDistribution  [METHOD]  getSupportLowerBound  [RETURN_TYPE]  int  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	308	309	1	replace	checkNumberOfSuccesses(),  n);	      getPopulationSize();    	non-compiled	[CE]  ';'  expected	274	None
3082	[BUG]  [BUGGY]  super.getNumberOfSuccesses(),  sampleSize;  [CE]  ';'  expected  [CONTEXT]    public  double  getNumericalVariance()  {    [BUGGY]  super.getNumberOfSuccesses(),  sampleSize;  [BUGGY]    if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	279	279	1	replace	super.getNumberOfSuccesses(),  sampleSize;	      super.getNumberOfSuccesses();    	non-compiled	[CE]  ';'  expected	541	None
3083	[BUG]  [BUGGY]  super.getNumberOfSuccesses(),  sampleSize);  [CE]  ';'  expected  [CONTEXT]    public  double  getNumericalVariance()  {    [BUGGY]  super.getNumberOfSuccesses(),  sampleSize);  [BUGGY]    if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	279	279	1	replace	super.getNumberOfSuccesses(),  sampleSize);	      super.getNumberOfSuccesses();    	non-compiled	[CE]  ';'  expected	541	None
3084	[BUG]  [BUGGY]  super.getNumberOfSuccesses(),  numberOfSuccesses);  [CE]  ';'  expected  [CONTEXT]    public  double  getNumericalVariance()  {    [BUGGY]  super.getNumberOfSuccesses(),  numberOfSuccesses);  [BUGGY]    if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	279	279	1	replace	super.getNumberOfSuccesses(),  numberOfSuccesses);	      super.getNumberOfSuccesses();    	non-compiled	[CE]  ';'  expected	541	None
3122	[BUG]  [BUGGY]  final  double  k  =  getNumberOfSuccesses().doubleValue();  [CE]  int  cannot  be  dereferenced  [CONTEXT]    protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();    [BUGGY]  final  double  k  =  getNumberOfSuccesses().doubleValue();  [BUGGY]    final  double  m  =  getNumberOfSuccesses();  final  double  n  =  getSampleSize();  return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	293	293	1	replace	final  double  k  =  getNumberOfSuccesses().doubleValue();	      final    double    N    =    getNumberOfSuccesses().doubleValue();    	non-compiled	[CE]  int  cannot  be  dereferenced	144	None
3141	[BUG]  [BUGGY]  final  double  k  =  getNumberOfKind();  [CE]  cannot  find  symbol  [CONTEXT]    public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {    [BUGGY]  final  double  k  =  getNumberOfKind();  [BUGGY]    numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	280	280	1	replace	final  double  k  =  getNumberOfKind();	      if(!numericalVarianceIsCalculated)    {    if(!numericalVarianceIsCalculated)    {    numericalVariance    =    calculateNumberOfSuccesses();    }    	non-compiled	[CE]  cannot  find  symbol	42	None
3143	[BUG]  [BUGGY]  final  double  k  =  getNumberOfKits();  [CE]  cannot  find  symbol  [CONTEXT]    public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {    [BUGGY]  final  double  k  =  getNumberOfKits();  [BUGGY]    numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	280	280	1	replace	final  double  k  =  getNumberOfKits();	      if(!numericalVarianceIsCalculated)    {    if(!numericalVarianceIsCalculated)    {    numericalVariance    =    calculateNumberOfSuccesses();    }    	non-compiled	[CE]  cannot  find  symbol	42	None
3144	[BUG]  [BUGGY]  final  double  k  =  getNumberOfKins();  [CE]  cannot  find  symbol  [CONTEXT]    public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {    [BUGGY]  final  double  k  =  getNumberOfKins();  [BUGGY]    numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	280	280	1	replace	final  double  k  =  getNumberOfKins();	      if(!numericalVarianceIsCalculated)    {    if(!numericalVarianceIsCalculated)    {    numericalVariance    =    calculateNumberOfSuccesses();    }    	non-compiled	[CE]  cannot  find  symbol	42	None
3161	[BUG]  [BUGGY]  return  FastMath.max(0,  getNumberOfSuccesses()  +  getSampleSize()  -  getPopulationSize());  numericalVariance  =  Math.abs(numberOfSuccesses  /  numberOfSuccesses);  [CE]  unreachable  statement  [CONTEXT]    public  int  getSupportLowerBound()  {    [BUGGY]  return  FastMath.max(0,  getNumberOfSuccesses()  +  getSampleSize()  -  getPopulationSize());  numericalVariance  =  Math.abs(numberOfSuccesses  /  numberOfSuccesses);  [BUGGY]    getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  }  [CLASS]  HypergeometricDistribution  [METHOD]  getSupportLowerBound  [RETURN_TYPE]  int  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	308	309	1	replace	return    FastMath.max(0,    getNumberOfSuccesses()    +    getSampleSize()    -    getPopulationSize());    numericalVariance  =  Math.abs(numberOfSuccesses  /  numberOfSuccesses);	  	non-compiled	[CE]  unreachable  statement	2	None
3163	[BUG]  [BUGGY]  return  FastMath.max(0,  getNumberOfSuccesses()  +  getSampleSize()  -  getPopulationSize());  numericalVariance  =  Math.abs(numberOfSuccesses  /  10);  [CE]  unreachable  statement  [CONTEXT]    public  int  getSupportLowerBound()  {    [BUGGY]  return  FastMath.max(0,  getNumberOfSuccesses()  +  getSampleSize()  -  getPopulationSize());  numericalVariance  =  Math.abs(numberOfSuccesses  /  10);  [BUGGY]    getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  }  [CLASS]  HypergeometricDistribution  [METHOD]  getSupportLowerBound  [RETURN_TYPE]  int  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	308	309	1	replace	return    FastMath.max(0,    getNumberOfSuccesses()    +    getSampleSize()    -    getPopulationSize());    numericalVariance  =  Math.abs(numberOfSuccesses  /  10);	  	non-compiled	[CE]  unreachable  statement	2	None
3164	[BUG]  [BUGGY]  return  FastMath.max(0,  getNumberOfSuccesses()  +  getSampleSize()  -  getPopulationSize());  numericalVariance  =  Math.abs(numberOfSuccesses  /  100);  [CE]  unreachable  statement  [CONTEXT]    public  int  getSupportLowerBound()  {    [BUGGY]  return  FastMath.max(0,  getNumberOfSuccesses()  +  getSampleSize()  -  getPopulationSize());  numericalVariance  =  Math.abs(numberOfSuccesses  /  100);  [BUGGY]    getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  }  [CLASS]  HypergeometricDistribution  [METHOD]  getSupportLowerBound  [RETURN_TYPE]  int  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	308	309	1	replace	return    FastMath.max(0,    getNumberOfSuccesses()    +    getSampleSize()    -    getPopulationSize());    numericalVariance  =  Math.abs(numberOfSuccesses  /  100);	  	non-compiled	[CE]  unreachable  statement	2	None
3182	[BUG]  [BUGGY]  if(numericalVarianceIsCalculated)  {  if(!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumberOfSuccesses();  }  [CE]  illegal  start  of  expression  [CONTEXT]    public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }    [BUGGY]  if(numericalVarianceIsCalculated)  {  if(!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumberOfSuccesses();  }  [BUGGY]    return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	283	283	1	replace	if(numericalVarianceIsCalculated)  {  if(!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumberOfSuccesses();  }	      if(!numericalVarianceIsCalculated)    {    if(!numericalVarianceIsCalculated)    {    numericalVariance    =    calculateNumberOfSuccesses();    }    	non-compiled	[CE]  illegal  start  of  expression	101	None
3184	[BUG]  [BUGGY]  if(!numericalVarianceIsCalculated)  {  if(!numericalVarianceIsCalculated)  {  numericalVariance  =  computeNumberOfSuccesses();  }  [CE]  illegal  start  of  expression  [CONTEXT]    public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }    [BUGGY]  if(!numericalVarianceIsCalculated)  {  if(!numericalVarianceIsCalculated)  {  numericalVariance  =  computeNumberOfSuccesses();  }  [BUGGY]    return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	283	283	1	replace	if(!numericalVarianceIsCalculated)  {  if(!numericalVarianceIsCalculated)  {  numericalVariance  =  computeNumberOfSuccesses();  }	      if(!numericalVarianceIsCalculated)    {    if(!numericalVarianceIsCalculated)    {    numericalVariance    =    calculateNumberOfSuccesses();    }    	non-compiled	[CE]  illegal  start  of  expression	101	None
3202	[BUG]  [BUGGY]  [FE]  AssertionError  testMoments  [CONTEXT]    public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();    [BUGGY]      numericalVariance  =  Math.max(numberOfSuccesses,  numberOfSuccesses);  numericalVariance  =  Math.min(numberOfSuccesses,  0);  [BUGGY]    numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	281	281	1	add	        numericalVariance    =    Math.max(numberOfSuccesses,    numberOfSuccesses);    numericalVariance  =  Math.min(numberOfSuccesses,  0);	  	compilable	  [FE]  AssertionError  testMoments	152	1
3203	[BUG]  [BUGGY]      numericalVariance  =  Math.max(numberOfSuccesses,  numberOfSuccesses);  numericalVariance  =  Math.min(numberOfSuccesses,  0);  [FE]  AssertionError  testMoments  [CONTEXT]    public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();    [BUGGY]      numericalVariance  =  Math.max(numberOfSuccesses,  numberOfSuccesses);  numericalVariance  =  Math.min(numberOfSuccesses,  0);  [BUGGY]    numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	281	281	1	replace	        numericalVariance    =    Math.max(numberOfSuccesses,    numberOfSuccesses);    numericalVariance  =  Math.min(numberOfSuccesses,  0);	  	compilable	  [FE]  AssertionError  testMoments	152	1
3203	[BUG]  [BUGGY]      numericalVariance  =  Math.max(numberOfSuccesses,  numberOfSuccesses);  numericalVariance  =  Math.min(numberOfSuccesses,  m);  [CE]  cannot  find  symbol  m  [CONTEXT]    public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();    [BUGGY]      numericalVariance  =  Math.max(numberOfSuccesses,  numberOfSuccesses);  numericalVariance  =  Math.min(numberOfSuccesses,  m);  [BUGGY]    numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	281	281	1	replace	        numericalVariance    =    Math.max(numberOfSuccesses,    numberOfSuccesses);    numericalVariance  =  Math.min(numberOfSuccesses,  m);	  	non-compiled	[CE]  cannot  find  symbol  m	152	None
3204	[BUG]  [BUGGY]  [FE]  AssertionError  testMoments  [CONTEXT]    public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();    [BUGGY]      numericalVariance  =  Math.max(numberOfSuccesses,  numberOfSuccesses);  numericalVariance  =  Math.min(numberOfSuccesses,  numberOfSuccesses  -  1);  [BUGGY]    numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	281	281	1	add	        numericalVariance    =    Math.max(numberOfSuccesses,    numberOfSuccesses);    numericalVariance  =  Math.min(numberOfSuccesses,  numberOfSuccesses  -  1);	  	compilable	  [FE]  AssertionError  testMoments	152	1
3205	[BUG]  [BUGGY]      numericalVariance  =  Math.max(numberOfSuccesses,  numberOfSuccesses);  numericalVariance  =  Math.min(numberOfSuccesses,  numberOfSuccesses  -  1);  [FE]  AssertionError  testMoments  [CONTEXT]    public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();    [BUGGY]      numericalVariance  =  Math.max(numberOfSuccesses,  numberOfSuccesses);  numericalVariance  =  Math.min(numberOfSuccesses,  numberOfSuccesses  -  1);  [BUGGY]    numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	281	281	1	replace	        numericalVariance    =    Math.max(numberOfSuccesses,    numberOfSuccesses);    numericalVariance  =  Math.min(numberOfSuccesses,  numberOfSuccesses  -  1);	  	compilable	  [FE]  AssertionError  testMoments	152	1
3205	[BUG]  [BUGGY]  [FE]  AssertionError  testMoments  [CONTEXT]    public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();    [BUGGY]      numericalVariance  =  Math.max(numberOfSuccesses,  numberOfSuccesses);  numericalVariance  =  Math.min(numberOfSuccesses,  this.populationSize);  [BUGGY]    numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	281	281	1	add	        numericalVariance    =    Math.max(numberOfSuccesses,    numberOfSuccesses);    numericalVariance  =  Math.min(numberOfSuccesses,  this.populationSize);	  	compilable	  [FE]  AssertionError  testMoments	152	1
3206	[BUG]  [BUGGY]      numericalVariance  =  Math.max(numberOfSuccesses,  numberOfSuccesses);  numericalVariance  =  Math.min(numberOfSuccesses,  this.populationSize);  [FE]  AssertionError  testMoments  [CONTEXT]    public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();    [BUGGY]      numericalVariance  =  Math.max(numberOfSuccesses,  numberOfSuccesses);  numericalVariance  =  Math.min(numberOfSuccesses,  this.populationSize);  [BUGGY]    numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	281	281	1	replace	        numericalVariance    =    Math.max(numberOfSuccesses,    numberOfSuccesses);    numericalVariance  =  Math.min(numberOfSuccesses,  this.populationSize);	  	compilable	  [FE]  AssertionError  testMoments	152	1
3222	[BUG]  [BUGGY]  numericalVariance  =  Math.max(numberOfSuccesses  /  getPopulationSize());  [CE]  no  suitable  method  found  for  max(int)  [CONTEXT]    public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }    [BUGGY]  numericalVariance  =  Math.max(numberOfSuccesses  /  getPopulationSize());  [BUGGY]    }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	283	283	1	replace	numericalVariance  =  Math.max(numberOfSuccesses  /  getPopulationSize());	  return    numericalVariance    /(numericalVarianceIsCalculated));    	non-compiled	[CE]  no  suitable  method  found  for  max(int)	154	None
3223	[BUG]  [BUGGY]  numericalVariance  =  Math.min(numberOfSuccesses,  getPopulationSize());  [CE]  missing  return  statement  [CONTEXT]    public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }    [BUGGY]  numericalVariance  =  Math.min(numberOfSuccesses,  getPopulationSize());  [BUGGY]    }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	283	283	1	replace	numericalVariance  =  Math.min(numberOfSuccesses,  getPopulationSize());	  return    numericalVariance    /(numericalVarianceIsCalculated));    	non-compiled	[CE]  missing  return  statement	154	None
3224	[BUG]  [BUGGY]  numericalVariance  =  Math.max(numberOfSuccesses,  getSummarySize());  [CE]  cannot  find  symbol  [CONTEXT]    public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }    [BUGGY]  numericalVariance  =  Math.max(numberOfSuccesses,  getSummarySize());  [BUGGY]    }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	283	283	1	replace	numericalVariance  =  Math.max(numberOfSuccesses,  getSummarySize());	  return    numericalVariance    /(numericalVarianceIsCalculated));    	non-compiled	[CE]  cannot  find  symbol	154	None
3282	[BUG]  [BUGGY]  numericalVariance  =  calculateNumberOfSuccesses()  -  1;  [CE]  cannot  find  symbol  [CONTEXT]    public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();    [BUGGY]  numericalVariance  =  calculateNumberOfSuccesses()  -  1;  [BUGGY]    numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	281	281	1	replace	numericalVariance  =  calculateNumberOfSuccesses()  -  1;	      numericalVariance    =    calculateNumberOfSuccesses();    	non-compiled	[CE]  cannot  find  symbol	324	None
3283	[BUG]  [BUGGY]  numericalVariance  =  calculateNumberOfSuccesses()  /  2;  [CE]  cannot  find  symbol  [CONTEXT]    public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();    [BUGGY]  numericalVariance  =  calculateNumberOfSuccesses()  /  2;  [BUGGY]    numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	281	281	1	replace	numericalVariance  =  calculateNumberOfSuccesses()  /  2;	      numericalVariance    =    calculateNumberOfSuccesses();    	non-compiled	[CE]  cannot  find  symbol	324	None
3284	[BUG]  [BUGGY]  numericalVariance  =  calculateNumberOfSuccesses(),  sampleSize);  [CE]  ';'  expected  [CONTEXT]    public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();    [BUGGY]  numericalVariance  =  calculateNumberOfSuccesses(),  sampleSize);  [BUGGY]    numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	281	281	1	replace	numericalVariance  =  calculateNumberOfSuccesses(),  sampleSize);	      numericalVariance    =    calculateNumberOfSuccesses();    	non-compiled	[CE]  ';'  expected	324	None
3302	[BUG]  [BUGGY]  int  numberOfSuccesses  =  getNumberOfSuccesses()  /  2;  [CE]  missing  return  statement  [CONTEXT]    public  int  getSupportLowerBound()  {    [BUGGY]  int  numberOfSuccesses  =  getNumberOfSuccesses()  /  2;  [BUGGY]    getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  }  [CLASS]  HypergeometricDistribution  [METHOD]  getSupportLowerBound  [RETURN_TYPE]  int  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	308	309	1	replace	int  numberOfSuccesses  =  getNumberOfSuccesses()  /  2;	  return    FastMath.max(0,    getNumberOfSuccesses()    +    getSampleSize()    -    getPopulationSize());    	non-compiled	[CE]  missing  return  statement	3	None
3324	[BUG]  [BUGGY]  [FE]  AssertionError  testMath1021  [CONTEXT]    public  int  getSupportLowerBound()  {    [BUGGY]      getPopulationSize();  int  numberOfSuccesses  =  getNumberOfSuccesses();  [BUGGY]    return  FastMath.max(0,        getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  }  [CLASS]  HypergeometricDistribution  [METHOD]  getSupportLowerBound  [RETURN_TYPE]  int  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	308	309	1	add	        getPopulationSize();    int  numberOfSuccesses  =  getNumberOfSuccesses();	  	compilable	  [FE]  AssertionError  testMath1021	273	1
3325	[BUG]  [BUGGY]      getPopulationSize();  int  numberOfSuccesses  =  getNumberOfSuccesses();  [FE]  AssertionError  testMath1021  [CONTEXT]    public  int  getSupportLowerBound()  {    [BUGGY]      getPopulationSize();  int  numberOfSuccesses  =  getNumberOfSuccesses();  [BUGGY]    return  FastMath.max(0,        getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  }  [CLASS]  HypergeometricDistribution  [METHOD]  getSupportLowerBound  [RETURN_TYPE]  int  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	308	309	1	replace	        getPopulationSize();    int  numberOfSuccesses  =  getNumberOfSuccesses();	  	compilable	  [FE]  AssertionError  testMath1021	273	1
3325	[BUG]  [BUGGY]  [FE]  AssertionError  testMath1021  [CONTEXT]    public  int  getSupportLowerBound()  {    [BUGGY]      getPopulationSize();  int  populationSize  =  getNumberOfSuccesses();  [BUGGY]    return  FastMath.max(0,        getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  }  [CLASS]  HypergeometricDistribution  [METHOD]  getSupportLowerBound  [RETURN_TYPE]  int  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	308	309	1	add	        getPopulationSize();    int  populationSize  =  getNumberOfSuccesses();	  	compilable	  [FE]  AssertionError  testMath1021	273	1
3326	[BUG]  [BUGGY]      getPopulationSize();  int  populationSize  =  getNumberOfSuccesses();  [FE]  AssertionError  testMath1021  [CONTEXT]    public  int  getSupportLowerBound()  {    [BUGGY]      getPopulationSize();  int  populationSize  =  getNumberOfSuccesses();  [BUGGY]    return  FastMath.max(0,        getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  }  [CLASS]  HypergeometricDistribution  [METHOD]  getSupportLowerBound  [RETURN_TYPE]  int  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	308	309	1	replace	        getPopulationSize();    int  populationSize  =  getNumberOfSuccesses();	  	compilable	  [FE]  AssertionError  testMath1021	273	1
3343	[BUG]  [BUGGY]  n  =  getNumberOfSuccesses()  +  Math.abs(n  /  k);  [CE]  cannot  find  symbol  n  [CONTEXT]    public  double  getNumericalMean()  {    [BUGGY]  n  =  getNumberOfSuccesses()  +  Math.abs(n  /  k);  [BUGGY]    return  (double)  (getSampleSize()  *  getNumberOfSuccesses())  /  (double)  getPopulationSize();  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalMean  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	268	268	1	replace	n  =  getNumberOfSuccesses()  +  Math.abs(n  /  k);	      if(getNumberOfSuccesses()    >    0)    {    int    k    =    getNumberOfSuccesses();    if(k    >    0)    {    return    getNumberOfSuccesses();    }    	non-compiled	[CE]  cannot  find  symbol  n	364	None
3344	[BUG]  [BUGGY]  m  =  getNumberOfSuccesses()  +  Math.abs(n  /  k);  [CE]  cannot  find  symbol  m  [CONTEXT]    public  double  getNumericalMean()  {    [BUGGY]  m  =  getNumberOfSuccesses()  +  Math.abs(n  /  k);  [BUGGY]    return  (double)  (getSampleSize()  *  getNumberOfSuccesses())  /  (double)  getPopulationSize();  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalMean  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	268	268	1	replace	m  =  getNumberOfSuccesses()  +  Math.abs(n  /  k);	      if(getNumberOfSuccesses()    >    0)    {    int    k    =    getNumberOfSuccesses();    if(k    >    0)    {    return    getNumberOfSuccesses();    }    	non-compiled	[CE]  cannot  find  symbol  m	364	None
3384	[BUG]  [BUGGY]  final  double  n  =  getSampleSize(populationSize);  [CE]  method  getSampleSize  in  class  HypergeometricDistribution  cannot  be  applied  to  given  types;  [CONTEXT]    protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();  final  double  m  =  getNumberOfSuccesses();    [BUGGY]  final  double  n  =  getSampleSize(populationSize);  [BUGGY]    return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	294	294	1	replace	final  double  n  =  getSampleSize(populationSize);	  final    double    n    =    getSampleSize(n);    	non-compiled	[CE]  method  getSampleSize  in  class  HypergeometricDistribution  cannot  be  applied  to  given  types;	334	None
3401	[BUG]  [BUGGY]  int  k  =  getNumberOfSuccesses();  if(k  >  0)  {  return  getNumberOfSuccesses();  presumably  [CE]  not  a  statement  [CONTEXT]    public  double  getNumericalMean()  {    [BUGGY]  int  k  =  getNumberOfSuccesses();  if(k  >  0)  {  return  getNumberOfSuccesses();  presumably  [BUGGY]    return  (double)  (getSampleSize()  *  getNumberOfSuccesses())  /  (double)  getPopulationSize();  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalMean  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	268	268	1	replace	int  k  =  getNumberOfSuccesses();  if(k  >  0)  {  return  getNumberOfSuccesses();  presumably	      if(getNumberOfSuccesses()    >    0)    {    int    k    =    getNumberOfSuccesses();    if(k    >    0)    {    return    getNumberOfSuccesses();    }    	non-compiled	[CE]  not  a  statement	364	None
3402	[BUG]  [BUGGY]  int  k  =  getNumberOfSuccesses();  if(k  >  0)  {  return  getNumberOfSuccesses();  meanwhile  [CE]  not  a  statement  [CONTEXT]    public  double  getNumericalMean()  {    [BUGGY]  int  k  =  getNumberOfSuccesses();  if(k  >  0)  {  return  getNumberOfSuccesses();  meanwhile  [BUGGY]    return  (double)  (getSampleSize()  *  getNumberOfSuccesses())  /  (double)  getPopulationSize();  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalMean  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	268	268	1	replace	int  k  =  getNumberOfSuccesses();  if(k  >  0)  {  return  getNumberOfSuccesses();  meanwhile	      if(getNumberOfSuccesses()    >    0)    {    int    k    =    getNumberOfSuccesses();    if(k    >    0)    {    return    getNumberOfSuccesses();    }    	non-compiled	[CE]  not  a  statement	364	None
3403	[BUG]  [BUGGY]  int  k  =  getNumberOfSuccesses();  if(k  >  0)  {  return  getNumberOfSuccesses();  figured  [CE]  not  a  statement  [CONTEXT]    public  double  getNumericalMean()  {    [BUGGY]  int  k  =  getNumberOfSuccesses();  if(k  >  0)  {  return  getNumberOfSuccesses();  figured  [BUGGY]    return  (double)  (getSampleSize()  *  getNumberOfSuccesses())  /  (double)  getPopulationSize();  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalMean  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	268	268	1	replace	int  k  =  getNumberOfSuccesses();  if(k  >  0)  {  return  getNumberOfSuccesses();  figured	      if(getNumberOfSuccesses()    >    0)    {    int    k    =    getNumberOfSuccesses();    if(k    >    0)    {    return    getNumberOfSuccesses();    }    	non-compiled	[CE]  not  a  statement	364	None
3404	[BUG]  [BUGGY]  int  k  =  getNumberOfSuccesses();  if(k  >  0)  {  return  getNumberOfSuccesses();  hedging  [CE]  not  a  statement  [CONTEXT]    public  double  getNumericalMean()  {    [BUGGY]  int  k  =  getNumberOfSuccesses();  if(k  >  0)  {  return  getNumberOfSuccesses();  hedging  [BUGGY]    return  (double)  (getSampleSize()  *  getNumberOfSuccesses())  /  (double)  getPopulationSize();  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalMean  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	268	268	1	replace	int  k  =  getNumberOfSuccesses();  if(k  >  0)  {  return  getNumberOfSuccesses();  hedging	      if(getNumberOfSuccesses()    >    0)    {    int    k    =    getNumberOfSuccesses();    if(k    >    0)    {    return    getNumberOfSuccesses();    }    	non-compiled	[CE]  not  a  statement	364	None
3462	[BUG]  [BUGGY]  numericalVariance  =  calculateNumberOfSuccesses()  -  1;  [CE]  cannot  find  symbol  [CONTEXT]    public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {    [BUGGY]  numericalVariance  =  calculateNumberOfSuccesses()  -  1;  [BUGGY]    numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	280	280	1	replace	numericalVariance  =  calculateNumberOfSuccesses()  -  1;	  numericalVariance    =    calculateNumberOfSuccesses();    	non-compiled	[CE]  cannot  find  symbol	32	None
3463	[BUG]  [BUGGY]  numericalVariance  =  calculateNumberOfSuccesses()  /  2;  [CE]  cannot  find  symbol  [CONTEXT]    public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {    [BUGGY]  numericalVariance  =  calculateNumberOfSuccesses()  /  2;  [BUGGY]    numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	280	280	1	replace	numericalVariance  =  calculateNumberOfSuccesses()  /  2;	  numericalVariance    =    calculateNumberOfSuccesses();    	non-compiled	[CE]  cannot  find  symbol	32	None
3482	[BUG]  [BUGGY]  return  FastMath.max(0,  getNumberOfSuccesses()  +  getSampleSize()  -  getPopulationSize());  int  numericalVariance  =  getNumberOfSuccesses();  [CE]  unreachable  statement  [CONTEXT]    public  int  getSupportLowerBound()  {    [BUGGY]  return  FastMath.max(0,  getNumberOfSuccesses()  +  getSampleSize()  -  getPopulationSize());  int  numericalVariance  =  getNumberOfSuccesses();  [BUGGY]    getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  }  [CLASS]  HypergeometricDistribution  [METHOD]  getSupportLowerBound  [RETURN_TYPE]  int  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	308	309	1	replace	return    FastMath.max(0,    getNumberOfSuccesses()    +    getSampleSize()    -    getPopulationSize());    int  numericalVariance  =  getNumberOfSuccesses();	  	non-compiled	[CE]  unreachable  statement	2	None
3483	[BUG]  [BUGGY]  return  FastMath.max(0,  getNumberOfSuccesses()  +  getSampleSize()  -  getPopulationSize());  int  numberOfSuccesses  =  getNumberOfSuccesses()  -  1;  [CE]  unreachable  statement  [CONTEXT]    public  int  getSupportLowerBound()  {    [BUGGY]  return  FastMath.max(0,  getNumberOfSuccesses()  +  getSampleSize()  -  getPopulationSize());  int  numberOfSuccesses  =  getNumberOfSuccesses()  -  1;  [BUGGY]    getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  }  [CLASS]  HypergeometricDistribution  [METHOD]  getSupportLowerBound  [RETURN_TYPE]  int  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	308	309	1	replace	return    FastMath.max(0,    getNumberOfSuccesses()    +    getSampleSize()    -    getPopulationSize());    int  numberOfSuccesses  =  getNumberOfSuccesses()  -  1;	  	non-compiled	[CE]  unreachable  statement	2	None
3485	[BUG]  [BUGGY]  return  FastMath.max(0,  getNumberOfSuccesses()  +  getSampleSize()  -  getPopulationSize());  int  numberOfSuccesses  =  getNumberOfSuccesses()  /  2;  [CE]  unreachable  statement  [CONTEXT]    public  int  getSupportLowerBound()  {    [BUGGY]  return  FastMath.max(0,  getNumberOfSuccesses()  +  getSampleSize()  -  getPopulationSize());  int  numberOfSuccesses  =  getNumberOfSuccesses()  /  2;  [BUGGY]    getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  }  [CLASS]  HypergeometricDistribution  [METHOD]  getSupportLowerBound  [RETURN_TYPE]  int  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	308	309	1	replace	return    FastMath.max(0,    getNumberOfSuccesses()    +    getSampleSize()    -    getPopulationSize());    int  numberOfSuccesses  =  getNumberOfSuccesses()  /  2;	  	non-compiled	[CE]  unreachable  statement	2	None
3501	[BUG]  [BUGGY]  numericalVariance  =  getNumberOfSuccesses()  *(numberOfSuccesses  -  1);  [CE]  missing  return  statement  [CONTEXT]    protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();  final  double  m  =  getNumberOfSuccesses();  final  double  n  =  getSampleSize();    [BUGGY]  numericalVariance  =  getNumberOfSuccesses()  *(numberOfSuccesses  -  1);  [BUGGY]    return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	295	295	1	replace	numericalVariance  =  getNumberOfSuccesses()  *(numberOfSuccesses  -  1);	      final    double    n    =    getSampleSize();    	non-compiled	[CE]  missing  return  statement	94	None
3502	[BUG]  [BUGGY]  numericalVariance  =  getNumberOfSuccesses()  /(numberOfSuccesses  -  1);  [CE]  missing  return  statement  [CONTEXT]    protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();  final  double  m  =  getNumberOfSuccesses();  final  double  n  =  getSampleSize();    [BUGGY]  numericalVariance  =  getNumberOfSuccesses()  /(numberOfSuccesses  -  1);  [BUGGY]    return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	295	295	1	replace	numericalVariance  =  getNumberOfSuccesses()  /(numberOfSuccesses  -  1);	      final    double    n    =    getSampleSize();    	non-compiled	[CE]  missing  return  statement	94	None
3503	[BUG]  [BUGGY]  int  numberOfSuccesses  =  getNumberOfSuccesses();  [CE]  missing  return  statement  [CONTEXT]    protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();  final  double  m  =  getNumberOfSuccesses();  final  double  n  =  getSampleSize();    [BUGGY]  int  numberOfSuccesses  =  getNumberOfSuccesses();  [BUGGY]    return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	295	295	1	replace	int  numberOfSuccesses  =  getNumberOfSuccesses();	      final    double    n    =    getSampleSize();    	non-compiled	[CE]  missing  return  statement	94	None
3504	[BUG]  [BUGGY]  numericalVariance  =  getNumberOfSuccesses();  [CE]  missing  return  statement  [CONTEXT]    protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();  final  double  m  =  getNumberOfSuccesses();  final  double  n  =  getSampleSize();    [BUGGY]  numericalVariance  =  getNumberOfSuccesses();  [BUGGY]    return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	295	295	1	replace	numericalVariance  =  getNumberOfSuccesses();	      final    double    n    =    getSampleSize();    	non-compiled	[CE]  missing  return  statement	94	None
3523	[BUG]  [BUGGY]  final  double  k  =  getNumberOfDay()  -  1;  [CE]  cannot  find  symbol  [CONTEXT]    protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();    [BUGGY]  final  double  k  =  getNumberOfDay()  -  1;  [BUGGY]    final  double  m  =  getNumberOfSuccesses();  final  double  n  =  getSampleSize();  return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	293	293	1	replace	final  double  k  =  getNumberOfDay()  -  1;	      final    double    k    =    getNumberOfDay();    	non-compiled	[CE]  cannot  find  symbol	185	None
3524	[BUG]  [BUGGY]  final  double  k  =  getNumberOfDay()  +  1;  [CE]  cannot  find  symbol  [CONTEXT]    protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();    [BUGGY]  final  double  k  =  getNumberOfDay()  +  1;  [BUGGY]    final  double  m  =  getNumberOfSuccesses();  final  double  n  =  getSampleSize();  return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	293	293	1	replace	final  double  k  =  getNumberOfDay()  +  1;	      final    double    k    =    getNumberOfDay();    	non-compiled	[CE]  cannot  find  symbol	185	None
3541	[BUG]  [BUGGY]      final  double  k  =  getNumberOfSuccesses();  final  double  dx  =  getDx();  [CE]  cannot  find  symbol  [CONTEXT]    protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();    [BUGGY]      final  double  k  =  getNumberOfSuccesses();  final  double  dx  =  getDx();  [BUGGY]    final  double  m  =  getNumberOfSuccesses();  final  double  n  =  getSampleSize();  return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	293	293	1	replace	        final    double    k    =    getNumberOfSuccesses();    final  double  dx  =  getDx();	  	non-compiled	[CE]  cannot  find  symbol	181	None
3542	[BUG]  [BUGGY]      final  double  k  =  getNumberOfSuccesses();  final  double  dx  =  getDouble();  [CE]  cannot  find  symbol  [CONTEXT]    protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();    [BUGGY]      final  double  k  =  getNumberOfSuccesses();  final  double  dx  =  getDouble();  [BUGGY]    final  double  m  =  getNumberOfSuccesses();  final  double  n  =  getSampleSize();  return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	293	293	1	replace	        final    double    k    =    getNumberOfSuccesses();    final  double  dx  =  getDouble();	  	non-compiled	[CE]  cannot  find  symbol	181	None
3544	[BUG]  [BUGGY]      final  double  k  =  getNumberOfSuccesses();  final  double  dx  =  getDecimalSize();  [CE]  cannot  find  symbol  [CONTEXT]    protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();    [BUGGY]      final  double  k  =  getNumberOfSuccesses();  final  double  dx  =  getDecimalSize();  [BUGGY]    final  double  m  =  getNumberOfSuccesses();  final  double  n  =  getSampleSize();  return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	293	293	1	replace	        final    double    k    =    getNumberOfSuccesses();    final  double  dx  =  getDecimalSize();	  	non-compiled	[CE]  cannot  find  symbol	181	None
3561	[BUG]  [BUGGY]      getNumberOfSuccesses();  getNumberOfSuccesses()  *  getPopulationSize();  [CE]  not  a  statement  [CONTEXT]    public  double  getNumericalMean()  {    [BUGGY]      getNumberOfSuccesses();  getNumberOfSuccesses()  *  getPopulationSize();  [BUGGY]    return  (double)  (getSampleSize()  *  getNumberOfSuccesses())  /  (double)  getPopulationSize();  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalMean  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	268	268	1	replace	        getNumberOfSuccesses();    getNumberOfSuccesses()  *  getPopulationSize();	  	non-compiled	[CE]  not  a  statement	421	None
3562	[BUG]  [BUGGY]      getNumberOfSuccesses();  getNumberOfSuccesses()  /  2.0;  [CE]  not  a  statement  [CONTEXT]    public  double  getNumericalMean()  {    [BUGGY]      getNumberOfSuccesses();  getNumberOfSuccesses()  /  2.0;  [BUGGY]    return  (double)  (getSampleSize()  *  getNumberOfSuccesses())  /  (double)  getPopulationSize();  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalMean  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	268	268	1	replace	        getNumberOfSuccesses();    getNumberOfSuccesses()  /  2.0;	  	non-compiled	[CE]  not  a  statement	421	None
3581	[BUG]  [BUGGY]  int  numberOfSuccesses  =  getNumberOfSuccesses()  -  getPopulationSize();  [CE]  cannot  find  symbol  n  [CONTEXT]    protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();  final  double  m  =  getNumberOfSuccesses();    [BUGGY]  int  numberOfSuccesses  =  getNumberOfSuccesses()  -  getPopulationSize();  [BUGGY]    return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	294	294	1	replace	int  numberOfSuccesses  =  getNumberOfSuccesses()  -  getPopulationSize();	  final    double    n    =    getDecimalSize();    	non-compiled	[CE]  cannot  find  symbol  n	83	None
3582	[BUG]  [BUGGY]  int  numberOfSuccesses  =  getNumberOfSuccesses()  +  getPopulationSize();  [CE]  cannot  find  symbol  n  [CONTEXT]    protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();  final  double  m  =  getNumberOfSuccesses();    [BUGGY]  int  numberOfSuccesses  =  getNumberOfSuccesses()  +  getPopulationSize();  [BUGGY]    return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	294	294	1	replace	int  numberOfSuccesses  =  getNumberOfSuccesses()  +  getPopulationSize();	  final    double    n    =    getDecimalSize();    	non-compiled	[CE]  cannot  find  symbol  n	83	None
3583	[BUG]  [BUGGY]  int  numberOfSuccesses  =  getNumberOfSuccesses()  /  getPopulationSize();  [CE]  cannot  find  symbol  n  [CONTEXT]    protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();  final  double  m  =  getNumberOfSuccesses();    [BUGGY]  int  numberOfSuccesses  =  getNumberOfSuccesses()  /  getPopulationSize();  [BUGGY]    return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	294	294	1	replace	int  numberOfSuccesses  =  getNumberOfSuccesses()  /  getPopulationSize();	  final    double    n    =    getDecimalSize();    	non-compiled	[CE]  cannot  find  symbol  n	83	None
3584	[BUG]  [BUGGY]  int  numberOfSuccesses  =  getNumberOfSuccesses();  [CE]  cannot  find  symbol  n  [CONTEXT]    protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();  final  double  m  =  getNumberOfSuccesses();    [BUGGY]  int  numberOfSuccesses  =  getNumberOfSuccesses();  [BUGGY]    return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	294	294	1	replace	int  numberOfSuccesses  =  getNumberOfSuccesses();	  final    double    n    =    getDecimalSize();    	non-compiled	[CE]  cannot  find  symbol  n	83	None
3601	[BUG]  [BUGGY]  numericalVariance  =  getNumberOfSuccesses()  /(numberOfSuccesses  -  1);  [CE]  illegal  start  of  type  [CONTEXT]    public  double  getNumericalVariance()  {    [BUGGY]  numericalVariance  =  getNumberOfSuccesses()  /(numberOfSuccesses  -  1);  [BUGGY]    if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	279	279	1	replace	numericalVariance  =  getNumberOfSuccesses()  /(numberOfSuccesses  -  1);	      double    numericalVariance    =    getNumberOfSuccesses()    /    2.0;    	non-compiled	[CE]  illegal  start  of  type	4	None
3602	[BUG]  [BUGGY]  numericalVariance  =  getNumberOfSuccesses()  *(numberOfSuccesses  -  1);  [CE]  illegal  start  of  type  [CONTEXT]    public  double  getNumericalVariance()  {    [BUGGY]  numericalVariance  =  getNumberOfSuccesses()  *(numberOfSuccesses  -  1);  [BUGGY]    if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	279	279	1	replace	numericalVariance  =  getNumberOfSuccesses()  *(numberOfSuccesses  -  1);	      double    numericalVariance    =    getNumberOfSuccesses()    /    2.0;    	non-compiled	[CE]  illegal  start  of  type	4	None
3603	[BUG]  [BUGGY]  numericalVariance  =  getNumberOfSuccesses();  [CE]  illegal  start  of  type  [CONTEXT]    public  double  getNumericalVariance()  {    [BUGGY]  numericalVariance  =  getNumberOfSuccesses();  [BUGGY]    if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	279	279	1	replace	numericalVariance  =  getNumberOfSuccesses();	      double    numericalVariance    =    getNumberOfSuccesses()    /    2.0;    	non-compiled	[CE]  illegal  start  of  type	4	None
3604	[BUG]  [BUGGY]  numericalVariance  =  getNumberOfSuccesses()  *(numberOfSuccesses  /  2);  [CE]  illegal  start  of  type  [CONTEXT]    public  double  getNumericalVariance()  {    [BUGGY]  numericalVariance  =  getNumberOfSuccesses()  *(numberOfSuccesses  /  2);  [BUGGY]    if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	279	279	1	replace	numericalVariance  =  getNumberOfSuccesses()  *(numberOfSuccesses  /  2);	      double    numericalVariance    =    getNumberOfSuccesses()    /    2.0;    	non-compiled	[CE]  illegal  start  of  type	4	None
3621	[BUG]  [BUGGY]  final  double  m  =  getNumberOfSuccesses()  /  getNumberOfSuccesses();  [CE]  variable  m  is  already  defined  in  method  calculateNumericalVariance()  [CONTEXT]    protected  double  calculateNumericalVariance()  {    [BUGGY]  final  double  m  =  getNumberOfSuccesses()  /  getNumberOfSuccesses();  [BUGGY]    final  double  N  =  getPopulationSize();  final  double  m  =  getNumberOfSuccesses();  final  double  n  =  getSampleSize();  return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	292	292	1	replace	final  double  m  =  getNumberOfSuccesses()  /  getNumberOfSuccesses();	      final    double    N    =    getNumberOfSuccesses().doubleValue();    	non-compiled	[CE]  variable  m  is  already  defined  in  method  calculateNumericalVariance()	164	None
3622	[BUG]  [BUGGY]  final  double  m  =  getNumberOfHyphens()  *  getNumberOfSuccesses();  [CE]  cannot  find  symbol  [CONTEXT]    protected  double  calculateNumericalVariance()  {    [BUGGY]  final  double  m  =  getNumberOfHyphens()  *  getNumberOfSuccesses();  [BUGGY]    final  double  N  =  getPopulationSize();  final  double  m  =  getNumberOfSuccesses();  final  double  n  =  getSampleSize();  return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	292	292	1	replace	final  double  m  =  getNumberOfHyphens()  *  getNumberOfSuccesses();	      final    double    N    =    getNumberOfSuccesses().doubleValue();    	non-compiled	[CE]  cannot  find  symbol	164	None
3623	[BUG]  [BUGGY]  final  double  m  =  getNumberOfSuccesses()  *  getNumberOfMethods();  [CE]  cannot  find  symbol  [CONTEXT]    protected  double  calculateNumericalVariance()  {    [BUGGY]  final  double  m  =  getNumberOfSuccesses()  *  getNumberOfMethods();  [BUGGY]    final  double  N  =  getPopulationSize();  final  double  m  =  getNumberOfSuccesses();  final  double  n  =  getSampleSize();  return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	292	292	1	replace	final  double  m  =  getNumberOfSuccesses()  *  getNumberOfMethods();	      final    double    N    =    getNumberOfSuccesses().doubleValue();    	non-compiled	[CE]  cannot  find  symbol	164	None
3624	[BUG]  [BUGGY]  final  double  m  =  getNumberOfSuccesses()  *  getNumberOfMutators();  [CE]  cannot  find  symbol  [CONTEXT]    protected  double  calculateNumericalVariance()  {    [BUGGY]  final  double  m  =  getNumberOfSuccesses()  *  getNumberOfMutators();  [BUGGY]    final  double  N  =  getPopulationSize();  final  double  m  =  getNumberOfSuccesses();  final  double  n  =  getSampleSize();  return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	292	292	1	replace	final  double  m  =  getNumberOfSuccesses()  *  getNumberOfMutators();	      final    double    N    =    getNumberOfSuccesses().doubleValue();    	non-compiled	[CE]  cannot  find  symbol	164	None
3664	[BUG]  [BUGGY]  final  double  dx  =  getPopulationSize();  [CE]  cannot  find  symbol  n  [CONTEXT]    protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();  final  double  m  =  getNumberOfSuccesses();    [BUGGY]  final  double  dx  =  getPopulationSize();  [BUGGY]    final  double  n  =  getSampleSize();  return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	294	294	1	replace	final  double  dx  =  getPopulationSize();	      final    double    N    =    getPopulationSize();    	non-compiled	[CE]  cannot  find  symbol  n	51	None
3682	[BUG]  [BUGGY]  return  numericalVariance  /(numericalVarianceIsCalculated)*  numberOfSuccesses;  [CE]  bad  operand  types  for  binary  operator  '/'  [CONTEXT]    public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }    [BUGGY]  return  numericalVariance  /(numericalVarianceIsCalculated)*  numberOfSuccesses;  [BUGGY]    }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	283	283	1	replace	return  numericalVariance  /(numericalVarianceIsCalculated)*  numberOfSuccesses;	  return    numericalVariance    /(numericalVarianceIsCalculated));    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '/'	154	None
3684	[BUG]  [BUGGY]  return  numericalVariance  /(numericalVarianceIsCalculated)-  1;  [CE]  bad  operand  types  for  binary  operator  '/'  [CONTEXT]    public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }    [BUGGY]  return  numericalVariance  /(numericalVarianceIsCalculated)-  1;  [BUGGY]    }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	283	283	1	replace	return  numericalVariance  /(numericalVarianceIsCalculated)-  1;	  return    numericalVariance    /(numericalVarianceIsCalculated));    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '/'	154	None
3703	[BUG]  [BUGGY]  numericalVariance  =  getNumberOfSuccesses()  *(numberOfSuccesses  -  1)/(numberOfSuccesses  -  1));  [CE]  ';'  expected  [CONTEXT]    protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();    [BUGGY]  numericalVariance  =  getNumberOfSuccesses()  *(numberOfSuccesses  -  1)/(numberOfSuccesses  -  1));  [BUGGY]    final  double  m  =  getNumberOfSuccesses();  final  double  n  =  getSampleSize();  return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	293	293	1	replace	numericalVariance  =  getNumberOfSuccesses()  *(numberOfSuccesses  -  1)/(numberOfSuccesses  -  1));	      final    double    n    =    getNumberOfSuccesses();    	non-compiled	[CE]  ';'  expected	142	None
3704	[BUG]  [BUGGY]  numericalVariance  =  getNumberOfSuccesses()  *(numberOfSuccesses  /  2));  [CE]  ';'  expected  [CONTEXT]    protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();    [BUGGY]  numericalVariance  =  getNumberOfSuccesses()  *(numberOfSuccesses  /  2));  [BUGGY]    final  double  m  =  getNumberOfSuccesses();  final  double  n  =  getSampleSize();  return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	293	293	1	replace	numericalVariance  =  getNumberOfSuccesses()  *(numberOfSuccesses  /  2));	      final    double    n    =    getNumberOfSuccesses();    	non-compiled	[CE]  ';'  expected	142	None
3722	[BUG]  [BUGGY]  [FE]  AssertionError  testMath1021  [CONTEXT]    public  double  getNumericalVariance()  {    [BUGGY]  if(!numericalVarianceIsCalculated)  {  if(!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();  }  [BUGGY]    if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	279	279	1	add	if(!numericalVarianceIsCalculated)  {  if(!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();  }	      if(!numericalVarianceIsCalculated)    {    if(!numericalVarianceIsCalculated)    {    numericalVariance    =    calculateNumberOfSuccesses();    }    	compilable	  [FE]  AssertionError  testMath1021	13	1
3723	[BUG]  [BUGGY]  if(!numericalVarianceIsCalculated)  {  if(!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();  }  [FE]  AssertionError  testMath1021  [CONTEXT]    public  double  getNumericalVariance()  {    [BUGGY]  if(!numericalVarianceIsCalculated)  {  if(!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();  }  [BUGGY]    if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	279	279	1	replace	if(!numericalVarianceIsCalculated)  {  if(!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();  }	      if(!numericalVarianceIsCalculated)    {    if(!numericalVarianceIsCalculated)    {    numericalVariance    =    calculateNumberOfSuccesses();    }    	compilable	  [FE]  AssertionError  testMath1021	13	1
3723	[BUG]  [BUGGY]  if(numericalVarianceIsCalculated)  {  if(!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumberOfSuccesses();  }  [CE]  cannot  find  symbol  [CONTEXT]    public  double  getNumericalVariance()  {    [BUGGY]  if(numericalVarianceIsCalculated)  {  if(!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumberOfSuccesses();  }  [BUGGY]    if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	279	279	1	replace	if(numericalVarianceIsCalculated)  {  if(!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumberOfSuccesses();  }	      if(!numericalVarianceIsCalculated)    {    if(!numericalVarianceIsCalculated)    {    numericalVariance    =    calculateNumberOfSuccesses();    }    	non-compiled	[CE]  cannot  find  symbol	13	None
3724	[BUG]  [BUGGY]  if(!numericalVarianceIsCalculated)  {  if(!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();  if(!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumberOf  [CE]  ';'  expected  [CONTEXT]    public  double  getNumericalVariance()  {    [BUGGY]  if(!numericalVarianceIsCalculated)  {  if(!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();  if(!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumberOf  [BUGGY]    if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	279	279	1	replace	if(!numericalVarianceIsCalculated)  {  if(!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();  if(!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumberOf	      if(!numericalVarianceIsCalculated)    {    if(!numericalVarianceIsCalculated)    {    numericalVariance    =    calculateNumberOfSuccesses();    }    	non-compiled	[CE]  ';'  expected	13	None
3742	[BUG]  [BUGGY]  return(double)(getNumberOfSuccesses()  *  getSampleSize())/(double)getStandardDeviation();  [CE]  cannot  find  symbol  [CONTEXT]    public  double  getNumericalMean()  {    [BUGGY]  return(double)(getNumberOfSuccesses()  *  getSampleSize())/(double)getStandardDeviation();  [BUGGY]    }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalMean  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	268	268	1	replace	return(double)(getNumberOfSuccesses()  *  getSampleSize())/(double)getStandardDeviation();	  return(double)(getNumberOfSuccesses()    *    getSampleSize())/(double)getPopulationSize();    	non-compiled	[CE]  cannot  find  symbol	113	None
3784	[BUG]  [BUGGY]  n  =  getNumberOfSuccesses()  +  1;  [CE]  cannot  assign  a  value  to  final  variable  n  [CONTEXT]    protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();  final  double  m  =  getNumberOfSuccesses();  final  double  n  =  getSampleSize();    [BUGGY]  n  =  getNumberOfSuccesses()  +  1;  [BUGGY]    return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	295	295	1	replace	n  =  getNumberOfSuccesses()  +  1;	      n    =    getNumberOfSuccesses();    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  n	361	None
3801	[BUG]  [BUGGY]  [FE]  AssertionError  testMath1021  [CONTEXT]    public  double  getNumericalVariance()  {    [BUGGY]      double  numericalVariance  =  getNumberOfSuccesses();  numericalVariance  =  getNumberOfSuccesses();  [BUGGY]    if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	279	279	1	add	        double    numericalVariance    =    getNumberOfSuccesses();    numericalVariance  =  getNumberOfSuccesses();	  	compilable	  [FE]  AssertionError  testMath1021	1	1
3802	[BUG]  [BUGGY]      double  numericalVariance  =  getNumberOfSuccesses();  numericalVariance  =  getNumberOfSuccesses();  [FE]  AssertionError  testMath1021  [CONTEXT]    public  double  getNumericalVariance()  {    [BUGGY]      double  numericalVariance  =  getNumberOfSuccesses();  numericalVariance  =  getNumberOfSuccesses();  [BUGGY]    if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	279	279	1	replace	        double    numericalVariance    =    getNumberOfSuccesses();    numericalVariance  =  getNumberOfSuccesses();	  	compilable	  [FE]  AssertionError  testMath1021	1	1
3803	[BUG]  [BUGGY]      double  numericalVariance  =  getNumberOfSuccesses();  numericalVariance  =  getNumberOfSuccesses()  *(numberOfSuccesses  -  1));  [CE]  ';'  expected  [CONTEXT]    public  double  getNumericalVariance()  {    [BUGGY]      double  numericalVariance  =  getNumberOfSuccesses();  numericalVariance  =  getNumberOfSuccesses()  *(numberOfSuccesses  -  1));  [BUGGY]    if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	279	279	1	replace	        double    numericalVariance    =    getNumberOfSuccesses();    numericalVariance  =  getNumberOfSuccesses()  *(numberOfSuccesses  -  1));	  	non-compiled	[CE]  ';'  expected	1	None
3804	[BUG]  [BUGGY]  [FE]  AssertionError  testMath1021  [CONTEXT]    public  double  getNumericalVariance()  {    [BUGGY]      double  numericalVariance  =  getNumberOfSuccesses();  numericalVariance  =  getNumberOfSuccesses()  *(numberOfSuccesses  /  10);  [BUGGY]    if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	279	279	1	add	        double    numericalVariance    =    getNumberOfSuccesses();    numericalVariance  =  getNumberOfSuccesses()  *(numberOfSuccesses  /  10);	  	compilable	  [FE]  AssertionError  testMath1021	1	1
3805	[BUG]  [BUGGY]      double  numericalVariance  =  getNumberOfSuccesses();  numericalVariance  =  getNumberOfSuccesses()  *(numberOfSuccesses  /  10);  [FE]  AssertionError  testMath1021  [CONTEXT]    public  double  getNumericalVariance()  {    [BUGGY]      double  numericalVariance  =  getNumberOfSuccesses();  numericalVariance  =  getNumberOfSuccesses()  *(numberOfSuccesses  /  10);  [BUGGY]    if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	279	279	1	replace	        double    numericalVariance    =    getNumberOfSuccesses();    numericalVariance  =  getNumberOfSuccesses()  *(numberOfSuccesses  /  10);	  	compilable	  [FE]  AssertionError  testMath1021	1	1
3805	[BUG]  [BUGGY]  [FE]  AssertionError  testMath1021  [CONTEXT]    public  double  getNumericalVariance()  {    [BUGGY]      double  numericalVariance  =  getNumberOfSuccesses();  numericalVariance  =  getNumberOfSuccesses()  *(numberOfSuccesses  /  2);  [BUGGY]    if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	279	279	1	add	        double    numericalVariance    =    getNumberOfSuccesses();    numericalVariance  =  getNumberOfSuccesses()  *(numberOfSuccesses  /  2);	  	compilable	  [FE]  AssertionError  testMath1021	1	1
3806	[BUG]  [BUGGY]      double  numericalVariance  =  getNumberOfSuccesses();  numericalVariance  =  getNumberOfSuccesses()  *(numberOfSuccesses  /  2);  [FE]  AssertionError  testMath1021  [CONTEXT]    public  double  getNumericalVariance()  {    [BUGGY]      double  numericalVariance  =  getNumberOfSuccesses();  numericalVariance  =  getNumberOfSuccesses()  *(numberOfSuccesses  /  2);  [BUGGY]    if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	279	279	1	replace	        double    numericalVariance    =    getNumberOfSuccesses();    numericalVariance  =  getNumberOfSuccesses()  *(numberOfSuccesses  /  2);	  	compilable	  [FE]  AssertionError  testMath1021	1	1
3824	[BUG]  [BUGGY]  if(!numericalVarianceIsCalculated  &&!numberOfSuccessesIsCalculated)  {  [CE]  illegal  start  of  expression  [CONTEXT]    public  int  getSupportLowerBound()  {    [BUGGY]  if(!numericalVarianceIsCalculated  &&!numberOfSuccessesIsCalculated)  {  [BUGGY]    return  FastMath.max(0,        getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  }  [CLASS]  HypergeometricDistribution  [METHOD]  getSupportLowerBound  [RETURN_TYPE]  int  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	308	309	1	replace	if(!numericalVarianceIsCalculated  &&!numberOfSuccessesIsCalculated)  {	      if(getNumberOfSuccesses()    >    0)    {    if(getPopulationSize()    >    0)    {    return    FastMath.min(10,    getNumberOfSuccesses()    -    getPopulationSize());    }    	non-compiled	[CE]  illegal  start  of  expression	62	None
3843	[BUG]  [BUGGY]  if(numericalVarianceIsCalculated)  {  if(!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumberOfSuccesses();  if(!numericalVarianceIsCalculated)  {  numericalVariance  [CE]  not  a  statement  [CONTEXT]    public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }    [BUGGY]  if(numericalVarianceIsCalculated)  {  if(!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumberOfSuccesses();  if(!numericalVarianceIsCalculated)  {  numericalVariance  [BUGGY]    return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	283	283	1	replace	if(numericalVarianceIsCalculated)  {  if(!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumberOfSuccesses();  if(!numericalVarianceIsCalculated)  {  numericalVariance	      if(!numericalVarianceIsCalculated)    {    if(!numericalVarianceIsCalculated)    {    numericalVariance    =    calculateNumberOfSuccesses();    if(!numericalVarianceIsCalculated)    {    numericalVariance    	non-compiled	[CE]  not  a  statement	105	None
3844	[BUG]  [BUGGY]  if(!numericalVarianceIsCalculated)  {  if(!numericalVarianceIsCalculated)  {  numericalVariance  =  computeNumberOfSuccesses();  if(!numericalVarianceIsCalculated)  {  numericalVariance  [CE]  not  a  statement  [CONTEXT]    public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }    [BUGGY]  if(!numericalVarianceIsCalculated)  {  if(!numericalVarianceIsCalculated)  {  numericalVariance  =  computeNumberOfSuccesses();  if(!numericalVarianceIsCalculated)  {  numericalVariance  [BUGGY]    return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	283	283	1	replace	if(!numericalVarianceIsCalculated)  {  if(!numericalVarianceIsCalculated)  {  numericalVariance  =  computeNumberOfSuccesses();  if(!numericalVarianceIsCalculated)  {  numericalVariance	      if(!numericalVarianceIsCalculated)    {    if(!numericalVarianceIsCalculated)    {    numericalVariance    =    calculateNumberOfSuccesses();    if(!numericalVarianceIsCalculated)    {    numericalVariance    	non-compiled	[CE]  not  a  statement	105	None
3862	[BUG]  [BUGGY]  final  double  dx  =  getSize();  [CE]  cannot  find  symbol  [CONTEXT]    protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();  final  double  m  =  getNumberOfSuccesses();    [BUGGY]  final  double  dx  =  getSize();  [BUGGY]    final  double  n  =  getSampleSize();  return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	294	294	1	replace	final  double  dx  =  getSize();	      final    double    N    =    getSize();    	non-compiled	[CE]  cannot  find  symbol	55	None
3863	[BUG]  [BUGGY]  final  double  k  =  getSize();  [CE]  cannot  find  symbol  [CONTEXT]    protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();  final  double  m  =  getNumberOfSuccesses();    [BUGGY]  final  double  k  =  getSize();  [BUGGY]    final  double  n  =  getSampleSize();  return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	294	294	1	replace	final  double  k  =  getSize();	      final    double    N    =    getSize();    	non-compiled	[CE]  cannot  find  symbol	55	None
3864	[BUG]  [BUGGY]  final  double  m  =  getSize();  [CE]  variable  m  is  already  defined  in  method  calculateNumericalVariance()  [CONTEXT]    protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();  final  double  m  =  getNumberOfSuccesses();    [BUGGY]  final  double  m  =  getSize();  [BUGGY]    final  double  n  =  getSampleSize();  return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	294	294	1	replace	final  double  m  =  getSize();	      final    double    N    =    getSize();    	non-compiled	[CE]  variable  m  is  already  defined  in  method  calculateNumericalVariance()	55	None
3882	[BUG]  [BUGGY]  double  numericalVariance  =  Math.floor(getSlope(),  getNumberOfSuccesses());  [CE]  illegal  start  of  type  [CONTEXT]    public  double  getNumericalVariance()  {    [BUGGY]  double  numericalVariance  =  Math.floor(getSlope(),  getNumberOfSuccesses());  [BUGGY]    if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	279	279	1	replace	double  numericalVariance  =  Math.floor(getSlope(),  getNumberOfSuccesses());	      double    numericalVariance    =    Math.max(getNumberOfSuccesses(),    numberOfSuccesses);    	non-compiled	[CE]  illegal  start  of  type	543	None
3884	[BUG]  [BUGGY]  double  numericalVariance  =  Math.floor(getSlope(),  getGeometricVariance());  [CE]  illegal  start  of  type  [CONTEXT]    public  double  getNumericalVariance()  {    [BUGGY]  double  numericalVariance  =  Math.floor(getSlope(),  getGeometricVariance());  [BUGGY]    if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	279	279	1	replace	double  numericalVariance  =  Math.floor(getSlope(),  getGeometricVariance());	      double    numericalVariance    =    Math.max(getNumberOfSuccesses(),    numberOfSuccesses);    	non-compiled	[CE]  illegal  start  of  type	543	None
3905	[BUG]  [BUGGY]  if(numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumbericalVariance()  /  2;  [CE]  illegal  start  of  expression  [CONTEXT]    public  double  getNumericalVariance()  {    [BUGGY]  if(numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumbericalVariance()  /  2;  [BUGGY]    numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	279	279	1	replace	if(numericalVarianceIsCalculated)    {    numericalVariance  =  calculateNumbericalVariance()  /  2;	  	non-compiled	[CE]  illegal  start  of  expression	22	None
3924	[BUG]  [BUGGY]  final  double  k  =  getNumberOfEscapes();  [CE]  cannot  find  symbol  [CONTEXT]    protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();  final  double  m  =  getNumberOfSuccesses();  final  double  n  =  getSampleSize();    [BUGGY]  final  double  k  =  getNumberOfEscapes();  [BUGGY]    return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	295	295	1	replace	final  double  k  =  getNumberOfEscapes();	      final    double    m    =    getNumberOfEscapes();    	non-compiled	[CE]  cannot  find  symbol	385	None
3942	[BUG]  [BUGGY]  final  double  N  =  getNumberOfSuccesses().doubleValue()  -  1;  [CE]  int  cannot  be  dereferenced  [CONTEXT]    protected  double  calculateNumericalVariance()  {    [BUGGY]  final  double  N  =  getNumberOfSuccesses().doubleValue()  -  1;  [BUGGY]    final  double  N  =  getPopulationSize();  final  double  m  =  getNumberOfSuccesses();  final  double  n  =  getSampleSize();  return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	292	292	1	replace	final  double  N  =  getNumberOfSuccesses().doubleValue()  -  1;	      final    double    N    =    getNumberOfSuccesses().doubleValue();    	non-compiled	[CE]  int  cannot  be  dereferenced	164	None
3943	[BUG]  [BUGGY]  final  double  N  =  getNumberOfSuccesses().doubleValue()  +  1;  [CE]  int  cannot  be  dereferenced  [CONTEXT]    protected  double  calculateNumericalVariance()  {    [BUGGY]  final  double  N  =  getNumberOfSuccesses().doubleValue()  +  1;  [BUGGY]    final  double  N  =  getPopulationSize();  final  double  m  =  getNumberOfSuccesses();  final  double  n  =  getSampleSize();  return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	292	292	1	replace	final  double  N  =  getNumberOfSuccesses().doubleValue()  +  1;	      final    double    N    =    getNumberOfSuccesses().doubleValue();    	non-compiled	[CE]  int  cannot  be  dereferenced	164	None
3963	[BUG]  [BUGGY]  [FE]  AssertionError  testMoments  [CONTEXT]    protected  double  calculateNumericalVariance()  {    [BUGGY]  final  int  N  =  getNumberOfSuccesses()  -  1;  [BUGGY]    final  double  N  =  getPopulationSize();  final  double  m  =  getNumberOfSuccesses();  final  double  n  =  getSampleSize();  return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	292	292	1	add	final  int  N  =  getNumberOfSuccesses()  -  1;	      final    int    N    =    getNumberOfSuccesses();    	compilable	  [FE]  AssertionError  testMoments	162	1
3964	[BUG]  [BUGGY]  final  int  N  =  getNumberOfSuccesses()  -  1;  [FE]  AssertionError  testMoments  [CONTEXT]    protected  double  calculateNumericalVariance()  {    [BUGGY]  final  int  N  =  getNumberOfSuccesses()  -  1;  [BUGGY]    final  double  N  =  getPopulationSize();  final  double  m  =  getNumberOfSuccesses();  final  double  n  =  getSampleSize();  return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	292	292	1	replace	final  int  N  =  getNumberOfSuccesses()  -  1;	      final    int    N    =    getNumberOfSuccesses();    	compilable	  [FE]  AssertionError  testMoments	162	1
3964	[BUG]  [BUGGY]  final  int  n  =  getNumberOfSuccesses();  [CE]  variable  n  is  already  defined  in  method  calculateNumericalVariance()  [CONTEXT]    protected  double  calculateNumericalVariance()  {    [BUGGY]  final  int  n  =  getNumberOfSuccesses();  [BUGGY]    final  double  N  =  getPopulationSize();  final  double  m  =  getNumberOfSuccesses();  final  double  n  =  getSampleSize();  return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	292	292	1	replace	final  int  n  =  getNumberOfSuccesses();	      final    int    N    =    getNumberOfSuccesses();    	non-compiled	[CE]  variable  n  is  already  defined  in  method  calculateNumericalVariance()	162	None
3983	[BUG]  [BUGGY]  final  double  k  =  getKind()  /  2.0;  [CE]  cannot  find  symbol  [CONTEXT]    protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();  final  double  m  =  getNumberOfSuccesses();    [BUGGY]  final  double  k  =  getKind()  /  2.0;  [BUGGY]    final  double  n  =  getSampleSize();  return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	294	294	1	replace	final  double  k  =  getKind()  /  2.0;	      final    double    k    =    getKind();    	non-compiled	[CE]  cannot  find  symbol	301	None
3984	[BUG]  [BUGGY]  final  double  k  =  getKind()  /  K;  [CE]  cannot  find  symbol  [CONTEXT]    protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();  final  double  m  =  getNumberOfSuccesses();    [BUGGY]  final  double  k  =  getKind()  /  K;  [BUGGY]    final  double  n  =  getSampleSize();  return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	294	294	1	replace	final  double  k  =  getKind()  /  K;	      final    double    k    =    getKind();    	non-compiled	[CE]  cannot  find  symbol	301	None
4003	[BUG]  [BUGGY]  final  double  k  =  getDecimalValue()  +  1;  [CE]  cannot  find  symbol  [CONTEXT]    protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();  final  double  m  =  getNumberOfSuccesses();    [BUGGY]  final  double  k  =  getDecimalValue()  +  1;  [BUGGY]    final  double  n  =  getSampleSize();  return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	294	294	1	replace	final  double  k  =  getDecimalValue()  +  1;	      final    double    k    =    getDecimalValue();    	non-compiled	[CE]  cannot  find  symbol	484	None
4004	[BUG]  [BUGGY]  final  double  k  =  getDecimalValue()  -  1;  [CE]  cannot  find  symbol  [CONTEXT]    protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();  final  double  m  =  getNumberOfSuccesses();    [BUGGY]  final  double  k  =  getDecimalValue()  -  1;  [BUGGY]    final  double  n  =  getSampleSize();  return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	294	294	1	replace	final  double  k  =  getDecimalValue()  -  1;	      final    double    k    =    getDecimalValue();    	non-compiled	[CE]  cannot  find  symbol	484	None
4043	[BUG]  [BUGGY]  final  double  dx  =  getPopulationSize();  [CE]  missing  return  statement  [CONTEXT]    protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();  final  double  m  =  getNumberOfSuccesses();  final  double  n  =  getSampleSize();    [BUGGY]  final  double  dx  =  getPopulationSize();  [BUGGY]    return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	295	295	1	replace	final  double  dx  =  getPopulationSize();	      final    double    n    =    getPopulationSize();    	non-compiled	[CE]  missing  return  statement	91	None
4063	[BUG]  [BUGGY]  final  double  m  =  getNumberOfSuccesses()  *  2;  final  double  k  =  getNumberOfDays()  +  1;  [CE]  cannot  find  symbol  [CONTEXT]    protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();    [BUGGY]  final  double  m  =  getNumberOfSuccesses()  *  2;  final  double  k  =  getNumberOfDays()  +  1;  [BUGGY]    final  double  n  =  getSampleSize();  return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	293	293	1	replace	final    double    m    =    getNumberOfSuccesses()    *    2;    final  double  k  =  getNumberOfDays()  +  1;	  	non-compiled	[CE]  cannot  find  symbol	183	None
4065	[BUG]  [BUGGY]  final  double  m  =  getNumberOfSuccesses()  *  2;  final  double  k  =  getNumberOfDays().length;  [CE]  cannot  find  symbol  [CONTEXT]    protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();    [BUGGY]  final  double  m  =  getNumberOfSuccesses()  *  2;  final  double  k  =  getNumberOfDays().length;  [BUGGY]    final  double  n  =  getSampleSize();  return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	293	293	1	replace	final    double    m    =    getNumberOfSuccesses()    *    2;    final  double  k  =  getNumberOfDays().length;	  	non-compiled	[CE]  cannot  find  symbol	183	None
4084	[BUG]  [BUGGY]  double  numericalVariance  =  getNumberOfSuccesses()  /(numberOfSuccesses  -  1));  [CE]  ';'  expected  [CONTEXT]    public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }    [BUGGY]  double  numericalVariance  =  getNumberOfSuccesses()  /(numberOfSuccesses  -  1));  [BUGGY]    return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	283	283	1	replace	double  numericalVariance  =  getNumberOfSuccesses()  /(numberOfSuccesses  -  1));	      if(!numericalVarianceIsCalculated)    {    if(!numericalVarianceIsCalculated)    {    numericalVariance    =    calculateNumberOfSuccesses();    if(!numericalVarianceIsCalculated)    {    numericalVariance    	non-compiled	[CE]  ';'  expected	105	None
4122	[BUG]  [BUGGY]  [FE]  AssertionError  testMoments  [CONTEXT]    protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();    [BUGGY]  final  double  m  =  getNumberOfSuccesses()  *  N  /  2;  [BUGGY]    final  double  n  =  getSampleSize();  return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	293	293	1	add	final  double  m  =  getNumberOfSuccesses()  *  N  /  2;	  final    double    m    =    getNumberOfSuccesses()    *    N;    	compilable	  [FE]  AssertionError  testMoments	454	1
4123	[BUG]  [BUGGY]  final  double  m  =  getNumberOfSuccesses()  *  N  /  2;  [FE]  AssertionError  testMoments  [CONTEXT]    protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();    [BUGGY]  final  double  m  =  getNumberOfSuccesses()  *  N  /  2;  [BUGGY]    final  double  n  =  getSampleSize();  return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	293	293	1	replace	final  double  m  =  getNumberOfSuccesses()  *  N  /  2;	  final    double    m    =    getNumberOfSuccesses()    *    N;    	compilable	  [FE]  AssertionError  testMoments	454	1
4124	[BUG]  [BUGGY]  [FE]  AssertionError  testMoments  [CONTEXT]    protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();    [BUGGY]  final  double  m  =  getNumberOfSuccesses()  *  N  -  1;  [BUGGY]    final  double  n  =  getSampleSize();  return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	293	293	1	add	final  double  m  =  getNumberOfSuccesses()  *  N  -  1;	  final    double    m    =    getNumberOfSuccesses()    *    N;    	compilable	  [FE]  AssertionError  testMoments	454	1
4125	[BUG]  [BUGGY]  final  double  m  =  getNumberOfSuccesses()  *  N  -  1;  [FE]  AssertionError  testMoments  [CONTEXT]    protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();    [BUGGY]  final  double  m  =  getNumberOfSuccesses()  *  N  -  1;  [BUGGY]    final  double  n  =  getSampleSize();  return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	293	293	1	replace	final  double  m  =  getNumberOfSuccesses()  *  N  -  1;	  final    double    m    =    getNumberOfSuccesses()    *    N;    	compilable	  [FE]  AssertionError  testMoments	454	1
4141	[BUG]  [BUGGY]  [FE]  AssertionError  testMath1021  [CONTEXT]    public  double  getNumericalVariance()  {    [BUGGY]      double  numericalVariance  =  getNumberOfSuccesses();  int  numberOfSuccesses  =  getPopulationSize();  [BUGGY]    if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	279	279	1	add	        double    numericalVariance    =    getNumberOfSuccesses();    int  numberOfSuccesses  =  getPopulationSize();	  	compilable	  [FE]  AssertionError  testMath1021	1	1
4142	[BUG]  [BUGGY]      double  numericalVariance  =  getNumberOfSuccesses();  int  numberOfSuccesses  =  getPopulationSize();  [FE]  AssertionError  testMath1021  [CONTEXT]    public  double  getNumericalVariance()  {    [BUGGY]      double  numericalVariance  =  getNumberOfSuccesses();  int  numberOfSuccesses  =  getPopulationSize();  [BUGGY]    if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	279	279	1	replace	        double    numericalVariance    =    getNumberOfSuccesses();    int  numberOfSuccesses  =  getPopulationSize();	  	compilable	  [FE]  AssertionError  testMath1021	1	1
4142	[BUG]  [BUGGY]      double  numericalVariance  =  getNumberOfSuccesses();  if(numberOfSuccesses  >  1)  {  if(!numericalVarianceIsCalculated)  {  numericalVariance  =  getNumberOfSuccesses();  }  [CE]  illegal  start  of  expression  [CONTEXT]    public  double  getNumericalVariance()  {    [BUGGY]      double  numericalVariance  =  getNumberOfSuccesses();  if(numberOfSuccesses  >  1)  {  if(!numericalVarianceIsCalculated)  {  numericalVariance  =  getNumberOfSuccesses();  }  [BUGGY]    if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	279	279	1	replace	        double    numericalVariance    =    getNumberOfSuccesses();    if(numberOfSuccesses  >  1)  {  if(!numericalVarianceIsCalculated)  {  numericalVariance  =  getNumberOfSuccesses();  }	  	non-compiled	[CE]  illegal  start  of  expression	1	None
4143	[BUG]  [BUGGY]      double  numericalVariance  =  getNumberOfSuccesses();  if(numberOfSuccesses  >  1)  {  if(!numberOfSuccesses.isEmpty())  {  numericalVariance  =  getNumberOfSuccesses();  }  [CE]  illegal  start  of  expression  [CONTEXT]    public  double  getNumericalVariance()  {    [BUGGY]      double  numericalVariance  =  getNumberOfSuccesses();  if(numberOfSuccesses  >  1)  {  if(!numberOfSuccesses.isEmpty())  {  numericalVariance  =  getNumberOfSuccesses();  }  [BUGGY]    if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	279	279	1	replace	        double    numericalVariance    =    getNumberOfSuccesses();    if(numberOfSuccesses  >  1)  {  if(!numberOfSuccesses.isEmpty())  {  numericalVariance  =  getNumberOfSuccesses();  }	  	non-compiled	[CE]  illegal  start  of  expression	1	None
4144	[BUG]  [BUGGY]      double  numericalVariance  =  getNumberOfSuccesses();  if(numberOfSuccesses  >  1)  {  if(!numberOfSuccessesIsCalculated)  {  numericalVariance  =  getNumberOfSuccesses();  }  [CE]  illegal  start  of  expression  [CONTEXT]    public  double  getNumericalVariance()  {    [BUGGY]      double  numericalVariance  =  getNumberOfSuccesses();  if(numberOfSuccesses  >  1)  {  if(!numberOfSuccessesIsCalculated)  {  numericalVariance  =  getNumberOfSuccesses();  }  [BUGGY]    if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	279	279	1	replace	        double    numericalVariance    =    getNumberOfSuccesses();    if(numberOfSuccesses  >  1)  {  if(!numberOfSuccessesIsCalculated)  {  numericalVariance  =  getNumberOfSuccesses();  }	  	non-compiled	[CE]  illegal  start  of  expression	1	None
4145	[BUG]  [BUGGY]      double  numericalVariance  =  getNumberOfSuccesses();  double  numericalVariance  =  getSampleSize();  [CE]  variable  numericalVariance  is  already  defined  in  method  getNumericalVariance()  [CONTEXT]    public  double  getNumericalVariance()  {    [BUGGY]      double  numericalVariance  =  getNumberOfSuccesses();  double  numericalVariance  =  getSampleSize();  [BUGGY]    if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	279	279	1	replace	        double    numericalVariance    =    getNumberOfSuccesses();    double  numericalVariance  =  getSampleSize();	  	non-compiled	[CE]  variable  numericalVariance  is  already  defined  in  method  getNumericalVariance()	1	None
4162	[BUG]  [BUGGY]  final  double  m  =  getNumberOfSuccesses().doubleValue()  +  1;  [CE]  int  cannot  be  dereferenced  [CONTEXT]    protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();    [BUGGY]  final  double  m  =  getNumberOfSuccesses().doubleValue()  +  1;  [BUGGY]    final  double  n  =  getSampleSize();  return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	293	293	1	replace	final  double  m  =  getNumberOfSuccesses().doubleValue()  +  1;	  final    double    m    =    getNumberOfSuccesses()    *    2;    	non-compiled	[CE]  int  cannot  be  dereferenced	184	None
4163	[BUG]  [BUGGY]  final  double  m  =  getNumberOfSuccesses().doubleValue()  ||  m  >  getNumberOfSuccesses().doubleValue();  [CE]  int  cannot  be  dereferenced  [CONTEXT]    protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();    [BUGGY]  final  double  m  =  getNumberOfSuccesses().doubleValue()  ||  m  >  getNumberOfSuccesses().doubleValue();  [BUGGY]    final  double  n  =  getSampleSize();  return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	293	293	1	replace	final  double  m  =  getNumberOfSuccesses().doubleValue()  ||  m  >  getNumberOfSuccesses().doubleValue();	  final    double    m    =    getNumberOfSuccesses()    *    2;    	non-compiled	[CE]  int  cannot  be  dereferenced	184	None
4164	[BUG]  [BUGGY]  final  double  m  =  getNumberOfSuccesses().doubleValue()  ||  m  >  getNumberOfSuccesses();  [CE]  int  cannot  be  dereferenced  [CONTEXT]    protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();    [BUGGY]  final  double  m  =  getNumberOfSuccesses().doubleValue()  ||  m  >  getNumberOfSuccesses();  [BUGGY]    final  double  n  =  getSampleSize();  return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	293	293	1	replace	final  double  m  =  getNumberOfSuccesses().doubleValue()  ||  m  >  getNumberOfSuccesses();	  final    double    m    =    getNumberOfSuccesses()    *    2;    	non-compiled	[CE]  int  cannot  be  dereferenced	184	None
4181	[BUG]  [BUGGY]  return(double)(getNumberOfSuccesses()  *  getSampleSize())/(double)getPopulationSize();  getNumberOfSuccesses()  /(double)getSampleSize();  [CE]  not  a  statement  [CONTEXT]    public  double  getNumericalMean()  {    [BUGGY]  return(double)(getNumberOfSuccesses()  *  getSampleSize())/(double)getPopulationSize();  getNumberOfSuccesses()  /(double)getSampleSize();  [BUGGY]    }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalMean  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	268	268	1	replace	return(double)(getNumberOfSuccesses()    *    getSampleSize())/(double)getPopulationSize();    getNumberOfSuccesses()  /(double)getSampleSize();	  	non-compiled	[CE]  not  a  statement	112	None
4182	[BUG]  [BUGGY]  return(double)(getNumberOfSuccesses()  *  getSampleSize())/(double)getPopulationSize();  getNumberOfSuccesses()  *  getSampleSize());  [CE]  not  a  statement  [CONTEXT]    public  double  getNumericalMean()  {    [BUGGY]  return(double)(getNumberOfSuccesses()  *  getSampleSize())/(double)getPopulationSize();  getNumberOfSuccesses()  *  getSampleSize());  [BUGGY]    }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalMean  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	268	268	1	replace	return(double)(getNumberOfSuccesses()    *    getSampleSize())/(double)getPopulationSize();    getNumberOfSuccesses()  *  getSampleSize());	  	non-compiled	[CE]  not  a  statement	112	None
4183	[BUG]  [BUGGY]  return(double)(getNumberOfSuccesses()  *  getSampleSize())/(double)getPopulationSize();  getNumberOfSuccesses()  *  getSampleSize();  [CE]  not  a  statement  [CONTEXT]    public  double  getNumericalMean()  {    [BUGGY]  return(double)(getNumberOfSuccesses()  *  getSampleSize())/(double)getPopulationSize();  getNumberOfSuccesses()  *  getSampleSize();  [BUGGY]    }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalMean  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	268	268	1	replace	return(double)(getNumberOfSuccesses()    *    getSampleSize())/(double)getPopulationSize();    getNumberOfSuccesses()  *  getSampleSize();	  	non-compiled	[CE]  not  a  statement	112	None
4184	[BUG]  [BUGGY]  return(double)(getNumberOfSuccesses()  *  getSampleSize())/(double)getPopulationSize();  getNumberOfSuccesses()  *  getSampleSize()  /(double)getSampleSize();  [CE]  not  a  statement  [CONTEXT]    public  double  getNumericalMean()  {    [BUGGY]  return(double)(getNumberOfSuccesses()  *  getSampleSize())/(double)getPopulationSize();  getNumberOfSuccesses()  *  getSampleSize()  /(double)getSampleSize();  [BUGGY]    }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalMean  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	268	268	1	replace	return(double)(getNumberOfSuccesses()    *    getSampleSize())/(double)getPopulationSize();    getNumberOfSuccesses()  *  getSampleSize()  /(double)getSampleSize();	  	non-compiled	[CE]  not  a  statement	112	None
4185	[BUG]  [BUGGY]  return(double)(getNumberOfSuccesses()  *  getSampleSize())/(double)getPopulationSize();  getNumberOfSuccesses()  *  getSampleSize()  /(double)getPopulationSize();  [CE]  not  a  statement  [CONTEXT]    public  double  getNumericalMean()  {    [BUGGY]  return(double)(getNumberOfSuccesses()  *  getSampleSize())/(double)getPopulationSize();  getNumberOfSuccesses()  *  getSampleSize()  /(double)getPopulationSize();  [BUGGY]    }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalMean  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	268	268	1	replace	return(double)(getNumberOfSuccesses()    *    getSampleSize())/(double)getPopulationSize();    getNumberOfSuccesses()  *  getSampleSize()  /(double)getPopulationSize();	  	non-compiled	[CE]  not  a  statement	112	None
4202	[BUG]  [BUGGY]  setNumberOfSuccesses(populationSize);  [CE]  cannot  find  symbol  [CONTEXT]    public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {    [BUGGY]  setNumberOfSuccesses(populationSize);  [BUGGY]    numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	280	280	1	replace	setNumberOfSuccesses(populationSize);	      setNumberOfSuccesses(n);    	non-compiled	[CE]  cannot  find  symbol	242	None
4203	[BUG]  [BUGGY]  setNumberOfSuccesses(this.numberOfSuccesses);  [CE]  cannot  find  symbol  [CONTEXT]    public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {    [BUGGY]  setNumberOfSuccesses(this.numberOfSuccesses);  [BUGGY]    numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	280	280	1	replace	setNumberOfSuccesses(this.numberOfSuccesses);	      setNumberOfSuccesses(n);    	non-compiled	[CE]  cannot  find  symbol	242	None
4224	[BUG]  [BUGGY]  numericalVariance  =  Math.abs(numberOfSuccesses  /  2  *(numberOfSuccesses  -  1)));  [CE]  ';'  expected  [CONTEXT]    public  double  getNumericalVariance()  {    [BUGGY]  numericalVariance  =  Math.abs(numberOfSuccesses  /  2  *(numberOfSuccesses  -  1)));  [BUGGY]    if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	279	279	1	replace	numericalVariance  =  Math.abs(numberOfSuccesses  /  2  *(numberOfSuccesses  -  1)));	      double    numericalVariance    =    getNumberOfSuccesses()    *(numberOfSuccesses    -    1);    	non-compiled	[CE]  ';'  expected	6	None
4241	[BUG]  [BUGGY]  double  getNumberOfSuccesses();  if(getNumberOfSuccesses()  >  1)  {  return  getNumberOfSuccesses()  *  getPopulationSize()  [CE]  ';'  expected  [CONTEXT]    public  double  getNumericalMean()  {    [BUGGY]  double  getNumberOfSuccesses();  if(getNumberOfSuccesses()  >  1)  {  return  getNumberOfSuccesses()  *  getPopulationSize()  [BUGGY]    return  (double)  (getSampleSize()  *  getNumberOfSuccesses())  /  (double)  getPopulationSize();  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalMean  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	268	268	1	replace	double  getNumberOfSuccesses();  if(getNumberOfSuccesses()  >  1)  {  return  getNumberOfSuccesses()  *  getPopulationSize()	      int    k    =    getNumberOfSuccesses();    	non-compiled	[CE]  ';'  expected	363	None
4242	[BUG]  [BUGGY]  double  getNumberOfSuccesses();  [CE]  ';'  expected  [CONTEXT]    public  double  getNumericalMean()  {    [BUGGY]  double  getNumberOfSuccesses();  [BUGGY]    return  (double)  (getSampleSize()  *  getNumberOfSuccesses())  /  (double)  getPopulationSize();  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalMean  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	268	268	1	replace	double  getNumberOfSuccesses();	      int    k    =    getNumberOfSuccesses();    	non-compiled	[CE]  ';'  expected	363	None
4243	[BUG]  [BUGGY]  double  getNumberOfSuccesses();  if(getNumberOfSuccesses()  >  0)  {  return  getNumberOfSuccesses()  *  getPopulationSize()  *  getNumberOf  [CE]  ';'  expected  [CONTEXT]    public  double  getNumericalMean()  {    [BUGGY]  double  getNumberOfSuccesses();  if(getNumberOfSuccesses()  >  0)  {  return  getNumberOfSuccesses()  *  getPopulationSize()  *  getNumberOf  [BUGGY]    return  (double)  (getSampleSize()  *  getNumberOfSuccesses())  /  (double)  getPopulationSize();  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalMean  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	268	268	1	replace	double  getNumberOfSuccesses();  if(getNumberOfSuccesses()  >  0)  {  return  getNumberOfSuccesses()  *  getPopulationSize()  *  getNumberOf	      int    k    =    getNumberOfSuccesses();    	non-compiled	[CE]  ';'  expected	363	None
4244	[BUG]  [BUGGY]  if(getNumberOfSuccesses()  >  0)  {  double  getNumberOfSuccesses();  if(getNumberOfSuccesses()  >  1)  {  return  getNumberOfSuccesses()  *  getPopulationSize()  /(double)get  [CE]  ';'  expected  [CONTEXT]    public  double  getNumericalMean()  {    [BUGGY]  if(getNumberOfSuccesses()  >  0)  {  double  getNumberOfSuccesses();  if(getNumberOfSuccesses()  >  1)  {  return  getNumberOfSuccesses()  *  getPopulationSize()  /(double)get  [BUGGY]    return  (double)  (getSampleSize()  *  getNumberOfSuccesses())  /  (double)  getPopulationSize();  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalMean  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	268	268	1	replace	if(getNumberOfSuccesses()  >  0)  {  double  getNumberOfSuccesses();  if(getNumberOfSuccesses()  >  1)  {  return  getNumberOfSuccesses()  *  getPopulationSize()  /(double)get	      int    k    =    getNumberOfSuccesses();    	non-compiled	[CE]  ';'  expected	363	None
4262	[BUG]  [BUGGY]  return(double)(getSampleSize()  *  getNumberOfSuccesses()  /(double)getStandardDeviation();  [CE]  ')'  expected  [CONTEXT]    public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();    [BUGGY]  return(double)(getSampleSize()  *  getNumberOfSuccesses()  /(double)getStandardDeviation();  [BUGGY]    }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	281	281	1	replace	return(double)(getSampleSize()  *  getNumberOfSuccesses()  /(double)getStandardDeviation();	  numericalVarianceIsCalculated    =    false;    	non-compiled	[CE]  ')'  expected	122	None
4283	[BUG]  [BUGGY]  final  int  N  =  getNumberOfAsSuccesses();  [CE]  cannot  find  symbol  [CONTEXT]    protected  double  calculateNumericalVariance()  {    [BUGGY]  final  int  N  =  getNumberOfAsSuccesses();  [BUGGY]    final  double  N  =  getPopulationSize();  final  double  m  =  getNumberOfSuccesses();  final  double  n  =  getSampleSize();  return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	292	292	1	replace	final  int  N  =  getNumberOfAsSuccesses();	      final    int    N    =    getPopulationSize();    	non-compiled	[CE]  cannot  find  symbol	165	None
4301	[BUG]  [BUGGY]      final  int  k  =  getNumberOfSuccesses();  final  int  k  =  getNumberOfSuccesses();  [CE]  variable  k  is  already  defined  in  method  calculateNumericalVariance()  [CONTEXT]    protected  double  calculateNumericalVariance()  {    [BUGGY]      final  int  k  =  getNumberOfSuccesses();  final  int  k  =  getNumberOfSuccesses();  [BUGGY]    final  double  N  =  getPopulationSize();  final  double  m  =  getNumberOfSuccesses();  final  double  n  =  getSampleSize();  return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	292	292	1	replace	        final    int    k    =    getNumberOfSuccesses();    final  int  k  =  getNumberOfSuccesses();	  	non-compiled	[CE]  variable  k  is  already  defined  in  method  calculateNumericalVariance()	212	None
4303	[BUG]  [BUGGY]      final  int  k  =  getNumberOfSuccesses();  final  int  k  =  getNumberOfDay();  [CE]  variable  k  is  already  defined  in  method  calculateNumericalVariance()  [CONTEXT]    protected  double  calculateNumericalVariance()  {    [BUGGY]      final  int  k  =  getNumberOfSuccesses();  final  int  k  =  getNumberOfDay();  [BUGGY]    final  double  N  =  getPopulationSize();  final  double  m  =  getNumberOfSuccesses();  final  double  n  =  getSampleSize();  return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	292	292	1	replace	        final    int    k    =    getNumberOfSuccesses();    final  int  k  =  getNumberOfDay();	  	non-compiled	[CE]  variable  k  is  already  defined  in  method  calculateNumericalVariance()	212	None
4304	[BUG]  [BUGGY]      final  int  k  =  getNumberOfSuccesses();  final  int  k  =  getNumberOfSuccesses()  +  1;  [CE]  variable  k  is  already  defined  in  method  calculateNumericalVariance()  [CONTEXT]    protected  double  calculateNumericalVariance()  {    [BUGGY]      final  int  k  =  getNumberOfSuccesses();  final  int  k  =  getNumberOfSuccesses()  +  1;  [BUGGY]    final  double  N  =  getPopulationSize();  final  double  m  =  getNumberOfSuccesses();  final  double  n  =  getSampleSize();  return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	292	292	1	replace	        final    int    k    =    getNumberOfSuccesses();    final  int  k  =  getNumberOfSuccesses()  +  1;	  	non-compiled	[CE]  variable  k  is  already  defined  in  method  calculateNumericalVariance()	212	None
4305	[BUG]  [BUGGY]      final  int  k  =  getNumberOfSuccesses();  final  int  k  =  getNumberOfHour();  [CE]  variable  k  is  already  defined  in  method  calculateNumericalVariance()  [CONTEXT]    protected  double  calculateNumericalVariance()  {    [BUGGY]      final  int  k  =  getNumberOfSuccesses();  final  int  k  =  getNumberOfHour();  [BUGGY]    final  double  N  =  getPopulationSize();  final  double  m  =  getNumberOfSuccesses();  final  double  n  =  getSampleSize();  return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	292	292	1	replace	        final    int    k    =    getNumberOfSuccesses();    final  int  k  =  getNumberOfHour();	  	non-compiled	[CE]  variable  k  is  already  defined  in  method  calculateNumericalVariance()	212	None
4322	[BUG]  [BUGGY]  final  double  dx  =  getNumberOfSuccesses();  [CE]  cannot  find  symbol  n  [CONTEXT]    protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();  final  double  m  =  getNumberOfSuccesses();    [BUGGY]  final  double  dx  =  getNumberOfSuccesses();  [BUGGY]    final  double  n  =  getSampleSize();  return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	294	294	1	replace	final  double  dx  =  getNumberOfSuccesses();	      final    double    N    =    getNumberOfSuccesses();    	non-compiled	[CE]  cannot  find  symbol  n	53	None
4343	[BUG]  [BUGGY]  final  double  k  =  getKnowledge().doubleValue;  [CE]  cannot  find  symbol  [CONTEXT]    protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();  final  double  m  =  getNumberOfSuccesses();  final  double  n  =  getSampleSize();    [BUGGY]  final  double  k  =  getKnowledge().doubleValue;  [BUGGY]    return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	295	295	1	replace	final  double  k  =  getKnowledge().doubleValue;	      final    double    k    =    getKnowledge();    	non-compiled	[CE]  cannot  find  symbol	95	None
4344	[BUG]  [BUGGY]  final  int  k  =  getKnowledge();  [CE]  cannot  find  symbol  [CONTEXT]    protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();  final  double  m  =  getNumberOfSuccesses();  final  double  n  =  getSampleSize();    [BUGGY]  final  int  k  =  getKnowledge();  [BUGGY]    return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	295	295	1	replace	final  int  k  =  getKnowledge();	      final    double    k    =    getKnowledge();    	non-compiled	[CE]  cannot  find  symbol	95	None
4381	[BUG]  [BUGGY]  int  m  =  getPopulationSize();  [CE]  missing  return  statement  [CONTEXT]    public  int  getSupportLowerBound()  {    [BUGGY]  int  m  =  getPopulationSize();  [BUGGY]    return  FastMath.max(0,        getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  }  [CLASS]  HypergeometricDistribution  [METHOD]  getSupportLowerBound  [RETURN_TYPE]  int  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	308	309	1	replace	int  m  =  getPopulationSize();	      int    numberOfSuccesses    =    getNumberOfSuccesses();    	non-compiled	[CE]  missing  return  statement	82	None
4382	[BUG]  [BUGGY]  int  m  =  getPopulationSize()  +  getNumberOfSuccesses();  [CE]  missing  return  statement  [CONTEXT]    public  int  getSupportLowerBound()  {    [BUGGY]  int  m  =  getPopulationSize()  +  getNumberOfSuccesses();  [BUGGY]    return  FastMath.max(0,        getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  }  [CLASS]  HypergeometricDistribution  [METHOD]  getSupportLowerBound  [RETURN_TYPE]  int  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	308	309	1	replace	int  m  =  getPopulationSize()  +  getNumberOfSuccesses();	      int    numberOfSuccesses    =    getNumberOfSuccesses();    	non-compiled	[CE]  missing  return  statement	82	None
4383	[BUG]  [BUGGY]  int  m  =  getNumberOfSuccesses();  [CE]  missing  return  statement  [CONTEXT]    public  int  getSupportLowerBound()  {    [BUGGY]  int  m  =  getNumberOfSuccesses();  [BUGGY]    return  FastMath.max(0,        getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  }  [CLASS]  HypergeometricDistribution  [METHOD]  getSupportLowerBound  [RETURN_TYPE]  int  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	308	309	1	replace	int  m  =  getNumberOfSuccesses();	      int    numberOfSuccesses    =    getNumberOfSuccesses();    	non-compiled	[CE]  missing  return  statement	82	None
4384	[BUG]  [BUGGY]  int  m  =  getNumberOfSuccesses()  +  getPopulationSize();  [CE]  missing  return  statement  [CONTEXT]    public  int  getSupportLowerBound()  {    [BUGGY]  int  m  =  getNumberOfSuccesses()  +  getPopulationSize();  [BUGGY]    return  FastMath.max(0,        getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  }  [CLASS]  HypergeometricDistribution  [METHOD]  getSupportLowerBound  [RETURN_TYPE]  int  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	308	309	1	replace	int  m  =  getNumberOfSuccesses()  +  getPopulationSize();	      int    numberOfSuccesses    =    getNumberOfSuccesses();    	non-compiled	[CE]  missing  return  statement	82	None
4401	[BUG]  [BUGGY]  numericalVariance  =  calculateNumbericalVariance()  /(numberOfSuccesses));  [CE]  ';'  expected  [CONTEXT]    public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {    [BUGGY]  numericalVariance  =  calculateNumbericalVariance()  /(numberOfSuccesses));  [BUGGY]    numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	280	280	1	replace	numericalVariance  =  calculateNumbericalVariance()  /(numberOfSuccesses));	  numericalVariance    =    calculateNumericalVariance()    /(numericalVarianceIsCalculated));    	non-compiled	[CE]  ';'  expected	34	None
4404	[BUG]  [BUGGY]  numericalVariance  =  calculateNumbericalVariance()  /(numberOfSuccessesIsCalculated));  [CE]  ';'  expected  [CONTEXT]    public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {    [BUGGY]  numericalVariance  =  calculateNumbericalVariance()  /(numberOfSuccessesIsCalculated));  [BUGGY]    numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	280	280	1	replace	numericalVariance  =  calculateNumbericalVariance()  /(numberOfSuccessesIsCalculated));	  numericalVariance    =    calculateNumericalVariance()    /(numericalVarianceIsCalculated));    	non-compiled	[CE]  ';'  expected	34	None
4423	[BUG]  [BUGGY]  getNumberOfSuccesses()  *  Math.random()  /(numberOfSuccesses)*  Math.random();  [CE]  not  a  statement  [CONTEXT]    public  double  getNumericalMean()  {    [BUGGY]  getNumberOfSuccesses()  *  Math.random()  /(numberOfSuccesses)*  Math.random();  [BUGGY]    return  (double)  (getSampleSize()  *  getNumberOfSuccesses())  /  (double)  getPopulationSize();  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalMean  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	268	268	1	replace	getNumberOfSuccesses()  *  Math.random()  /(numberOfSuccesses)*  Math.random();	      getNumberOfSuccesses()    *    Math.random();    	non-compiled	[CE]  not  a  statement	425	None
4424	[BUG]  [BUGGY]  getNumberOfSuccesses()  *  Math.random()  /(numberOfSuccesses  -  1)*  Math.random();  [CE]  not  a  statement  [CONTEXT]    public  double  getNumericalMean()  {    [BUGGY]  getNumberOfSuccesses()  *  Math.random()  /(numberOfSuccesses  -  1)*  Math.random();  [BUGGY]    return  (double)  (getSampleSize()  *  getNumberOfSuccesses())  /  (double)  getPopulationSize();  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalMean  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	268	268	1	replace	getNumberOfSuccesses()  *  Math.random()  /(numberOfSuccesses  -  1)*  Math.random();	      getNumberOfSuccesses()    *    Math.random();    	non-compiled	[CE]  not  a  statement	425	None
4443	[BUG]  [BUGGY]  if(nemicVarianceIsCalculated)  {  [CE]  cannot  find  symbol  nemicVarianceIsCalculated  [CONTEXT]    public  double  getNumericalVariance()  {    [BUGGY]  if(nemicVarianceIsCalculated)  {  [BUGGY]    numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	279	279	1	replace	if(nemicVarianceIsCalculated)  {	  if(numbericalVarianceIsCalculated)    {    	non-compiled	[CE]  cannot  find  symbol  nemicVarianceIsCalculated	203	None
4444	[BUG]  [BUGGY]  if(nemericVarianceIsCalculated)  {  [CE]  cannot  find  symbol  nemericVarianceIsCalculated  [CONTEXT]    public  double  getNumericalVariance()  {    [BUGGY]  if(nemericVarianceIsCalculated)  {  [BUGGY]    numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	279	279	1	replace	if(nemericVarianceIsCalculated)  {	  if(numbericalVarianceIsCalculated)    {    	non-compiled	[CE]  cannot  find  symbol  nemericVarianceIsCalculated	203	None
4461	[BUG]  [BUGGY]  final  int  k  =  getNumberOfKind();  [CE]  cannot  find  symbol  [CONTEXT]    protected  double  calculateNumericalVariance()  {    [BUGGY]  final  int  k  =  getNumberOfKind();  [BUGGY]    final  double  N  =  getPopulationSize();  final  double  m  =  getNumberOfSuccesses();  final  double  n  =  getSampleSize();  return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	292	292	1	replace	final  int  k  =  getNumberOfKind();	      final    int    k    =    getNumberOfSuccesses();    	non-compiled	[CE]  cannot  find  symbol	213	None
4462	[BUG]  [BUGGY]  final  int  k  =  getNumberOfSuccesses()  +  1;  [CE]  cannot  find  symbol  N  [CONTEXT]    protected  double  calculateNumericalVariance()  {    [BUGGY]  final  int  k  =  getNumberOfSuccesses()  +  1;  [BUGGY]    final  double  N  =  getPopulationSize();  final  double  m  =  getNumberOfSuccesses();  final  double  n  =  getSampleSize();  return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	292	292	1	replace	final  int  k  =  getNumberOfSuccesses()  +  1;	      final    int    k    =    getNumberOfSuccesses();    	non-compiled	[CE]  cannot  find  symbol  N	213	None
4463	[BUG]  [BUGGY]  final  int  k  =  getNumberOfDay();  [CE]  cannot  find  symbol  [CONTEXT]    protected  double  calculateNumericalVariance()  {    [BUGGY]  final  int  k  =  getNumberOfDay();  [BUGGY]    final  double  N  =  getPopulationSize();  final  double  m  =  getNumberOfSuccesses();  final  double  n  =  getSampleSize();  return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	292	292	1	replace	final  int  k  =  getNumberOfDay();	      final    int    k    =    getNumberOfSuccesses();    	non-compiled	[CE]  cannot  find  symbol	213	None
4464	[BUG]  [BUGGY]  final  int  k  =  getNumberOfHour();  [CE]  cannot  find  symbol  [CONTEXT]    protected  double  calculateNumericalVariance()  {    [BUGGY]  final  int  k  =  getNumberOfHour();  [BUGGY]    final  double  N  =  getPopulationSize();  final  double  m  =  getNumberOfSuccesses();  final  double  n  =  getSampleSize();  return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	292	292	1	replace	final  int  k  =  getNumberOfHour();	      final    int    k    =    getNumberOfSuccesses();    	non-compiled	[CE]  cannot  find  symbol	213	None
4501	[BUG]  [BUGGY]  if(numberOfSuccesses  >  1)  {  if(!numericalVarianceIsCalculated  &&  Math.abs(numberOfSuccesses)>  1)  {  [CE]  illegal  start  of  expression  [CONTEXT]    public  int  getSupportLowerBound()  {    [BUGGY]  if(numberOfSuccesses  >  1)  {  if(!numericalVarianceIsCalculated  &&  Math.abs(numberOfSuccesses)>  1)  {  [BUGGY]    return  FastMath.max(0,        getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  }  [CLASS]  HypergeometricDistribution  [METHOD]  getSupportLowerBound  [RETURN_TYPE]  int  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	308	309	1	replace	if(numberOfSuccesses  >  1)  {  if(!numericalVarianceIsCalculated  &&  Math.abs(numberOfSuccesses)>  1)  {	      int    populationSize    =    getPopulationSize();    	non-compiled	[CE]  illegal  start  of  expression	64	None
4502	[BUG]  [BUGGY]  if(numberOfSuccesses  >  0)  {  if(!numericalVarianceIsCalculated  &&  Math.abs(numberOfSuccesses)>  1)  {  [CE]  illegal  start  of  expression  [CONTEXT]    public  int  getSupportLowerBound()  {    [BUGGY]  if(numberOfSuccesses  >  0)  {  if(!numericalVarianceIsCalculated  &&  Math.abs(numberOfSuccesses)>  1)  {  [BUGGY]    return  FastMath.max(0,        getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  }  [CLASS]  HypergeometricDistribution  [METHOD]  getSupportLowerBound  [RETURN_TYPE]  int  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	308	309	1	replace	if(numberOfSuccesses  >  0)  {  if(!numericalVarianceIsCalculated  &&  Math.abs(numberOfSuccesses)>  1)  {	      int    populationSize    =    getPopulationSize();    	non-compiled	[CE]  illegal  start  of  expression	64	None
4503	[BUG]  [BUGGY]  if(numberOfSuccesses  >  1)  {  if(!numericalVarianceIsCalculated  &&  Math.pow(10,  numberOfSuccesses)>  0)  {  [CE]  illegal  start  of  expression  [CONTEXT]    public  int  getSupportLowerBound()  {    [BUGGY]  if(numberOfSuccesses  >  1)  {  if(!numericalVarianceIsCalculated  &&  Math.pow(10,  numberOfSuccesses)>  0)  {  [BUGGY]    return  FastMath.max(0,        getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  }  [CLASS]  HypergeometricDistribution  [METHOD]  getSupportLowerBound  [RETURN_TYPE]  int  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	308	309	1	replace	if(numberOfSuccesses  >  1)  {  if(!numericalVarianceIsCalculated  &&  Math.pow(10,  numberOfSuccesses)>  0)  {	      int    populationSize    =    getPopulationSize();    	non-compiled	[CE]  illegal  start  of  expression	64	None
4504	[BUG]  [BUGGY]  if(numberOfSuccesses  >  1)  {  if(!numericalVarianceIsCalculated  &&  Math.abs(numberOfSuccesses)>  1)  {  return  numericVariance;  }  [CE]  illegal  start  of  expression  [CONTEXT]    public  int  getSupportLowerBound()  {    [BUGGY]  if(numberOfSuccesses  >  1)  {  if(!numericalVarianceIsCalculated  &&  Math.abs(numberOfSuccesses)>  1)  {  return  numericVariance;  }  [BUGGY]    return  FastMath.max(0,        getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  }  [CLASS]  HypergeometricDistribution  [METHOD]  getSupportLowerBound  [RETURN_TYPE]  int  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	308	309	1	replace	if(numberOfSuccesses  >  1)  {  if(!numericalVarianceIsCalculated  &&  Math.abs(numberOfSuccesses)>  1)  {  return  numericVariance;  }	      int    populationSize    =    getPopulationSize();    	non-compiled	[CE]  illegal  start  of  expression	64	None
4523	[BUG]  [BUGGY]  final  double  N  =  getNumberOfStudents();  [CE]  variable  N  is  already  defined  in  method  calculateNumericalVariance()  [CONTEXT]    protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();    [BUGGY]  final  double  N  =  getNumberOfStudents();  [BUGGY]    final  double  m  =  getNumberOfSuccesses();  final  double  n  =  getSampleSize();  return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	293	293	1	replace	final  double  N  =  getNumberOfStudents();	      final    double    N    =    getSize();    	non-compiled	[CE]  variable  N  is  already  defined  in  method  calculateNumericalVariance()	145	None
4524	[BUG]  [BUGGY]  final  double  N  =  getNumberOfAsSuccesses();  [CE]  variable  N  is  already  defined  in  method  calculateNumericalVariance()  [CONTEXT]    protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();    [BUGGY]  final  double  N  =  getNumberOfAsSuccesses();  [BUGGY]    final  double  m  =  getNumberOfSuccesses();  final  double  n  =  getSampleSize();  return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	293	293	1	replace	final  double  N  =  getNumberOfAsSuccesses();	      final    double    N    =    getSize();    	non-compiled	[CE]  variable  N  is  already  defined  in  method  calculateNumericalVariance()	145	None
4543	[BUG]  [BUGGY]  int  numberOfSuccesses  =  getNumberOfSuccesses(n);  [CE]  cannot  find  symbol  n  [CONTEXT]    public  int  getSupportLowerBound()  {    [BUGGY]  int  numberOfSuccesses  =  getNumberOfSuccesses(n);  [BUGGY]    return  FastMath.max(0,        getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  }  [CLASS]  HypergeometricDistribution  [METHOD]  getSupportLowerBound  [RETURN_TYPE]  int  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	308	309	1	replace	int  numberOfSuccesses  =  getNumberOfSuccesses(n);	      int    numberOfSuccesses    =    getNumberOfSuccesses();    	non-compiled	[CE]  cannot  find  symbol  n	82	None
4544	[BUG]  [BUGGY]  int  numberOfSuccesses  =  getNumberOfSuperclass();  [CE]  cannot  find  symbol  [CONTEXT]    public  int  getSupportLowerBound()  {    [BUGGY]  int  numberOfSuccesses  =  getNumberOfSuperclass();  [BUGGY]    return  FastMath.max(0,        getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  }  [CLASS]  HypergeometricDistribution  [METHOD]  getSupportLowerBound  [RETURN_TYPE]  int  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	308	309	1	replace	int  numberOfSuccesses  =  getNumberOfSuperclass();	      int    numberOfSuccesses    =    getNumberOfSuccesses();    	non-compiled	[CE]  cannot  find  symbol	82	None
4562	[BUG]  [BUGGY]  final  double  N  =  getPopulationSize()  /  2;  final  double  N  =  getNumberOfSuccesses()  /  2  +  1;  [CE]  variable  N  is  already  defined  in  method  calculateNumericalVariance()  [CONTEXT]    protected  double  calculateNumericalVariance()  {    [BUGGY]  final  double  N  =  getPopulationSize()  /  2;  final  double  N  =  getNumberOfSuccesses()  /  2  +  1;  [BUGGY]    final  double  m  =  getNumberOfSuccesses();  final  double  n  =  getSampleSize();  return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	292	292	1	replace	final    double    N    =    getPopulationSize()    /    2;    final  double  N  =  getNumberOfSuccesses()  /  2  +  1;	  	non-compiled	[CE]  variable  N  is  already  defined  in  method  calculateNumericalVariance()	192	None
4563	[BUG]  [BUGGY]  final  double  N  =  getPopulationSize()  /  2;  final  double  N  =  getNumberOfHyphens()  /  2;  [CE]  variable  N  is  already  defined  in  method  calculateNumericalVariance()  [CONTEXT]    protected  double  calculateNumericalVariance()  {    [BUGGY]  final  double  N  =  getPopulationSize()  /  2;  final  double  N  =  getNumberOfHyphens()  /  2;  [BUGGY]    final  double  m  =  getNumberOfSuccesses();  final  double  n  =  getSampleSize();  return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	292	292	1	replace	final    double    N    =    getPopulationSize()    /    2;    final  double  N  =  getNumberOfHyphens()  /  2;	  	non-compiled	[CE]  variable  N  is  already  defined  in  method  calculateNumericalVariance()	192	None
4564	[BUG]  [BUGGY]  final  double  N  =  getPopulationSize()  /  2;  final  double  N  =  getNumberOfElement()  /  2;  [CE]  variable  N  is  already  defined  in  method  calculateNumericalVariance()  [CONTEXT]    protected  double  calculateNumericalVariance()  {    [BUGGY]  final  double  N  =  getPopulationSize()  /  2;  final  double  N  =  getNumberOfElement()  /  2;  [BUGGY]    final  double  m  =  getNumberOfSuccesses();  final  double  n  =  getSampleSize();  return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	292	292	1	replace	final    double    N    =    getPopulationSize()    /    2;    final  double  N  =  getNumberOfElement()  /  2;	  	non-compiled	[CE]  variable  N  is  already  defined  in  method  calculateNumericalVariance()	192	None
4584	[BUG]  [BUGGY]  final  double  k  =  getNumberOfStuesses();  [CE]  cannot  find  symbol  [CONTEXT]    protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();    [BUGGY]  final  double  k  =  getNumberOfStuesses();  [BUGGY]    final  double  m  =  getNumberOfSuccesses();  final  double  n  =  getSampleSize();  return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	293	293	1	replace	final  double  k  =  getNumberOfStuesses();	      final    double    k    =    getNumberOfDay();    	non-compiled	[CE]  cannot  find  symbol	185	None
4602	[BUG]  [BUGGY]  if(getSampleSize()  >  0)  {  if(getNumberOfSuccesses()  >  0)  {  return(double)getNumberOfSuccesses()  *  getPopulationSize();  }  [CE]  illegal  start  of  expression  [CONTEXT]    public  double  getNumericalMean()  {    [BUGGY]  if(getSampleSize()  >  0)  {  if(getNumberOfSuccesses()  >  0)  {  return(double)getNumberOfSuccesses()  *  getPopulationSize();  }  [BUGGY]    return  (double)  (getSampleSize()  *  getNumberOfSuccesses())  /  (double)  getPopulationSize();  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalMean  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	268	268	1	replace	if(getSampleSize()  >  0)  {  if(getNumberOfSuccesses()  >  0)  {  return(double)getNumberOfSuccesses()  *  getPopulationSize();  }	      if(getNumberOfSuccesses()    >    0)    {    if(getNumberOfSuccesses()    >    0)    {    return(double)getNumberOfSuccesses()    *    getPopulationSize();    }    	non-compiled	[CE]  illegal  start  of  expression	73	None
4603	[BUG]  [BUGGY]  if(getNumberOfSuccesses()  >  1)  {  if(getNumberOfSuccesses()  >  0)  {  return(double)getNumberOfSuccesses()  *  getPopulationSize();  }  [CE]  illegal  start  of  expression  [CONTEXT]    public  double  getNumericalMean()  {    [BUGGY]  if(getNumberOfSuccesses()  >  1)  {  if(getNumberOfSuccesses()  >  0)  {  return(double)getNumberOfSuccesses()  *  getPopulationSize();  }  [BUGGY]    return  (double)  (getSampleSize()  *  getNumberOfSuccesses())  /  (double)  getPopulationSize();  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalMean  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	268	268	1	replace	if(getNumberOfSuccesses()  >  1)  {  if(getNumberOfSuccesses()  >  0)  {  return(double)getNumberOfSuccesses()  *  getPopulationSize();  }	      if(getNumberOfSuccesses()    >    0)    {    if(getNumberOfSuccesses()    >    0)    {    return(double)getNumberOfSuccesses()    *    getPopulationSize();    }    	non-compiled	[CE]  illegal  start  of  expression	73	None
4643	[BUG]  [BUGGY]  [FE]  AssertionError  testMoments  [CONTEXT]    public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();    [BUGGY]  numericalVariance  =  Math.abs(numberOfSuccesses  /  10);  [BUGGY]    numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	281	281	1	add	numericalVariance  =  Math.abs(numberOfSuccesses  /  10);	      numericalVariance    =    Math.abs(numberOfSuccesses);    	compilable	  [FE]  AssertionError  testMoments	326	1
4644	[BUG]  [BUGGY]  numericalVariance  =  Math.abs(numberOfSuccesses  /  10);  [FE]  AssertionError  testMoments  [CONTEXT]    public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();    [BUGGY]  numericalVariance  =  Math.abs(numberOfSuccesses  /  10);  [BUGGY]    numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	281	281	1	replace	numericalVariance  =  Math.abs(numberOfSuccesses  /  10);	      numericalVariance    =    Math.abs(numberOfSuccesses);    	compilable	  [FE]  AssertionError  testMoments	326	1
4682	[BUG]  [BUGGY]  getNumberOfSuccesses()  *  getSampleSize();  [CE]  not  a  statement  [CONTEXT]    public  double  getNumericalMean()  {    [BUGGY]  getNumberOfSuccesses()  *  getSampleSize();  [BUGGY]    return  (double)  (getSampleSize()  *  getNumberOfSuccesses())  /  (double)  getPopulationSize();  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalMean  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	268	268	1	replace	getNumberOfSuccesses()  *  getSampleSize();	      getNumberOfSuccesses()    *    getPopulationSize();    	non-compiled	[CE]  not  a  statement	424	None
4683	[BUG]  [BUGGY]  getNumberOfSuccesses()  *  getPopulationSize()  /(double)getSampleSize();  [CE]  not  a  statement  [CONTEXT]    public  double  getNumericalMean()  {    [BUGGY]  getNumberOfSuccesses()  *  getPopulationSize()  /(double)getSampleSize();  [BUGGY]    return  (double)  (getSampleSize()  *  getNumberOfSuccesses())  /  (double)  getPopulationSize();  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalMean  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	268	268	1	replace	getNumberOfSuccesses()  *  getPopulationSize()  /(double)getSampleSize();	      getNumberOfSuccesses()    *    getPopulationSize();    	non-compiled	[CE]  not  a  statement	424	None
4684	[BUG]  [BUGGY]  getNumberOfSuccesses()  *  getPopulationSize()  /(numberOfSuccesses);  [CE]  not  a  statement  [CONTEXT]    public  double  getNumericalMean()  {    [BUGGY]  getNumberOfSuccesses()  *  getPopulationSize()  /(numberOfSuccesses);  [BUGGY]    return  (double)  (getSampleSize()  *  getNumberOfSuccesses())  /  (double)  getPopulationSize();  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalMean  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	268	268	1	replace	getNumberOfSuccesses()  *  getPopulationSize()  /(numberOfSuccesses);	      getNumberOfSuccesses()    *    getPopulationSize();    	non-compiled	[CE]  not  a  statement	424	None
4701	[BUG]  [BUGGY]  if(numericalVarianceIsCalculated)  {  if(numberOfSuccesses  >  0)  {  if(numericalVarianceIsCalculated)  {  [CE]  illegal  start  of  expression  [CONTEXT]    public  double  getNumericalVariance()  {    [BUGGY]  if(numericalVarianceIsCalculated)  {  if(numberOfSuccesses  >  0)  {  if(numericalVarianceIsCalculated)  {  [BUGGY]    numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	279	279	1	replace	if(numericalVarianceIsCalculated)    {    if(numberOfSuccesses  >  0)  {  if(numericalVarianceIsCalculated)  {	  	non-compiled	[CE]  illegal  start  of  expression	22	None
4702	[BUG]  [BUGGY]  if(numericalVarianceIsCalculated)  {  if(numberOfSuccesses  >  0)  {  if(!numericalVarianceIsCalculated)  {  [CE]  illegal  start  of  expression  [CONTEXT]    public  double  getNumericalVariance()  {    [BUGGY]  if(numericalVarianceIsCalculated)  {  if(numberOfSuccesses  >  0)  {  if(!numericalVarianceIsCalculated)  {  [BUGGY]    numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	279	279	1	replace	if(numericalVarianceIsCalculated)    {    if(numberOfSuccesses  >  0)  {  if(!numericalVarianceIsCalculated)  {	  	non-compiled	[CE]  illegal  start  of  expression	22	None
4703	[BUG]  [BUGGY]  if(numericalVarianceIsCalculated)  {  if(numberOfSuccesses  >  1)  {  if(numericalVarianceIsCalculated)  {  [CE]  illegal  start  of  expression  [CONTEXT]    public  double  getNumericalVariance()  {    [BUGGY]  if(numericalVarianceIsCalculated)  {  if(numberOfSuccesses  >  1)  {  if(numericalVarianceIsCalculated)  {  [BUGGY]    numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	279	279	1	replace	if(numericalVarianceIsCalculated)    {    if(numberOfSuccesses  >  1)  {  if(numericalVarianceIsCalculated)  {	  	non-compiled	[CE]  illegal  start  of  expression	22	None
4722	[BUG]  [BUGGY]  if(getNumberOfElement()  >  0)  {  if(getNumberOfSuccesses()  >  0)  {  return  getNumberOfSuccesses()  *  getNumberOfSuccesses();  }  [CE]  illegal  start  of  expression  [CONTEXT]    public  double  getNumericalMean()  {    [BUGGY]  if(getNumberOfElement()  >  0)  {  if(getNumberOfSuccesses()  >  0)  {  return  getNumberOfSuccesses()  *  getNumberOfSuccesses();  }  [BUGGY]    return  (double)  (getSampleSize()  *  getNumberOfSuccesses())  /  (double)  getPopulationSize();  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalMean  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	268	268	1	replace	if(getNumberOfElement()  >  0)  {  if(getNumberOfSuccesses()  >  0)  {  return  getNumberOfSuccesses()  *  getNumberOfSuccesses();  }	      if(getNumberOfSuccesses()    >    0)    {    if(getNumberOfSuccesses()    >    0)    {    return    getNumberOfSuccesses()    *    getNumberOfSuccesses();    }    	non-compiled	[CE]  illegal  start  of  expression	74	None
4723	[BUG]  [BUGGY]  if(getNumberOfCuccesses()  >  0)  {  if(getNumberOfSuccesses()  >  0)  {  return  getNumberOfSuccesses()  *  getNumberOfSuccesses();  }  [CE]  illegal  start  of  expression  [CONTEXT]    public  double  getNumericalMean()  {    [BUGGY]  if(getNumberOfCuccesses()  >  0)  {  if(getNumberOfSuccesses()  >  0)  {  return  getNumberOfSuccesses()  *  getNumberOfSuccesses();  }  [BUGGY]    return  (double)  (getSampleSize()  *  getNumberOfSuccesses())  /  (double)  getPopulationSize();  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalMean  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	268	268	1	replace	if(getNumberOfCuccesses()  >  0)  {  if(getNumberOfSuccesses()  >  0)  {  return  getNumberOfSuccesses()  *  getNumberOfSuccesses();  }	      if(getNumberOfSuccesses()    >    0)    {    if(getNumberOfSuccesses()    >    0)    {    return    getNumberOfSuccesses()    *    getNumberOfSuccesses();    }    	non-compiled	[CE]  illegal  start  of  expression	74	None
4724	[BUG]  [BUGGY]  if(getNumberOfSuccesses()  >  1)  {  if(getNumberOfSuccesses()  >  0)  {  return  getNumberOfSuccesses()  *  getNumberOfSuccesses();  }  [CE]  illegal  start  of  expression  [CONTEXT]    public  double  getNumericalMean()  {    [BUGGY]  if(getNumberOfSuccesses()  >  1)  {  if(getNumberOfSuccesses()  >  0)  {  return  getNumberOfSuccesses()  *  getNumberOfSuccesses();  }  [BUGGY]    return  (double)  (getSampleSize()  *  getNumberOfSuccesses())  /  (double)  getPopulationSize();  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalMean  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	268	268	1	replace	if(getNumberOfSuccesses()  >  1)  {  if(getNumberOfSuccesses()  >  0)  {  return  getNumberOfSuccesses()  *  getNumberOfSuccesses();  }	      if(getNumberOfSuccesses()    >    0)    {    if(getNumberOfSuccesses()    >    0)    {    return    getNumberOfSuccesses()    *    getNumberOfSuccesses();    }    	non-compiled	[CE]  illegal  start  of  expression	74	None
2	[BUG]  [BUGGY]  numericalVariance  =  calculateVariance(numberOfSuccesses);  [CE]  cannot  find  symbol  [CONTEXT]    public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {    [BUGGY]  numericalVariance  =  calculateVariance(numberOfSuccesses);  [BUGGY]    numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	280	280	1	replace	numericalVariance  =  calculateVariance(numberOfSuccesses);	  numericalVariance    =    calculateVariance();    	non-compiled	[CE]  cannot  find  symbol	573	None
3	[BUG]  [BUGGY]  numericalVariance  =  calculateVariance(numberOfSuccesses  -  1);  [CE]  cannot  find  symbol  [CONTEXT]    public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {    [BUGGY]  numericalVariance  =  calculateVariance(numberOfSuccesses  -  1);  [BUGGY]    numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	280	280	1	replace	numericalVariance  =  calculateVariance(numberOfSuccesses  -  1);	  numericalVariance    =    calculateVariance();    	non-compiled	[CE]  cannot  find  symbol	573	None
4	[BUG]  [BUGGY]  numericalVariance  =  calculateVariance(n,  sampleSize);  [CE]  cannot  find  symbol  n  [CONTEXT]    public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {    [BUGGY]  numericalVariance  =  calculateVariance(n,  sampleSize);  [BUGGY]    numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	280	280	1	replace	numericalVariance  =  calculateVariance(n,  sampleSize);	  numericalVariance    =    calculateVariance();    	non-compiled	[CE]  cannot  find  symbol  n	573	None
32	[BUG]  [BUGGY]  [FE]  AssertionError  testMoments  [CONTEXT]    public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {    [BUGGY]  final  int  dx  =  getNumberOfSuccesses();  [BUGGY]    numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	280	280	1	add	final  int  dx  =  getNumberOfSuccesses();	      if(!numericalVarianceIsCalculated)    {    if(!numericalVarianceIsCalculated)    {    throw    new    IllegalArgumentException(   "   ");    }    	compilable	  [FE]  AssertionError  testMoments	44	1
33	[BUG]  [BUGGY]  final  int  dx  =  getNumberOfSuccesses();  [FE]  AssertionError  testMoments  [CONTEXT]    public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {    [BUGGY]  final  int  dx  =  getNumberOfSuccesses();  [BUGGY]    numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	280	280	1	replace	final  int  dx  =  getNumberOfSuccesses();	      if(!numericalVarianceIsCalculated)    {    if(!numericalVarianceIsCalculated)    {    throw    new    IllegalArgumentException(   "   ");    }    	compilable	  [FE]  AssertionError  testMoments	44	1
34	[BUG]  [BUGGY]  [FE]  AssertionError  testMoments  [CONTEXT]    public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {    [BUGGY]  final  double  dx  =  getNumberOfSuccesses()  *  10;  [BUGGY]    numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	280	280	1	add	final  double  dx  =  getNumberOfSuccesses()  *  10;	      if(!numericalVarianceIsCalculated)    {    if(!numericalVarianceIsCalculated)    {    throw    new    IllegalArgumentException(   "   ");    }    	compilable	  [FE]  AssertionError  testMoments	44	1
35	[BUG]  [BUGGY]  final  double  dx  =  getNumberOfSuccesses()  *  10;  [FE]  AssertionError  testMoments  [CONTEXT]    public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {    [BUGGY]  final  double  dx  =  getNumberOfSuccesses()  *  10;  [BUGGY]    numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	280	280	1	replace	final  double  dx  =  getNumberOfSuccesses()  *  10;	      if(!numericalVarianceIsCalculated)    {    if(!numericalVarianceIsCalculated)    {    throw    new    IllegalArgumentException(   "   ");    }    	compilable	  [FE]  AssertionError  testMoments	44	1
62	[BUG]  [BUGGY]  final  double  N  =  getPopulationSize()  /  2;  final  double  N  =  getNumberOfDays()  /  2;  [CE]  variable  N  is  already  defined  in  method  calculateNumericalVariance()  [CONTEXT]    protected  double  calculateNumericalVariance()  {    [BUGGY]  final  double  N  =  getPopulationSize()  /  2;  final  double  N  =  getNumberOfDays()  /  2;  [BUGGY]    final  double  m  =  getNumberOfSuccesses();  final  double  n  =  getSampleSize();  return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	292	292	1	replace	final    double    N    =    getPopulationSize()    /    2;    final  double  N  =  getNumberOfDays()  /  2;	  	non-compiled	[CE]  variable  N  is  already  defined  in  method  calculateNumericalVariance()	192	None
64	[BUG]  [BUGGY]  final  double  N  =  getPopulationSize()  /  2;  final  double  N  =  getNumberOfVariance()  /  2;  [CE]  variable  N  is  already  defined  in  method  calculateNumericalVariance()  [CONTEXT]    protected  double  calculateNumericalVariance()  {    [BUGGY]  final  double  N  =  getPopulationSize()  /  2;  final  double  N  =  getNumberOfVariance()  /  2;  [BUGGY]    final  double  m  =  getNumberOfSuccesses();  final  double  n  =  getSampleSize();  return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	292	292	1	replace	final    double    N    =    getPopulationSize()    /    2;    final  double  N  =  getNumberOfVariance()  /  2;	  	non-compiled	[CE]  variable  N  is  already  defined  in  method  calculateNumericalVariance()	192	None
124	[BUG]  [BUGGY]  numericalVariance  =  Math.abs(n  -  1);  [CE]  cannot  find  symbol  n  [CONTEXT]    public  int  getSupportLowerBound()  {    [BUGGY]  numericalVariance  =  Math.abs(n  -  1);  [BUGGY]    getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  }  [CLASS]  HypergeometricDistribution  [METHOD]  getSupportLowerBound  [RETURN_TYPE]  int  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	308	309	1	replace	numericalVariance  =  Math.abs(n  -  1);	      	non-compiled	[CE]  cannot  find  symbol  n	5	None
152	[BUG]  [BUGGY]  numericalVariance  =  calculatePositiveVariance()  /(numericalVariance  <  0)?  calculatePositiveVariance()  :  getPositiveVariance();  [CE]  illegal  start  of  type  [CONTEXT]    public  double  getNumericalVariance()  {    [BUGGY]  numericalVariance  =  calculatePositiveVariance()  /(numericalVariance  <  0)?  calculatePositiveVariance()  :  getPositiveVariance();  [BUGGY]    numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	279	279	1	replace	numericalVariance  =  calculatePositiveVariance()  /(numericalVariance  <  0)?  calculatePositiveVariance()  :  getPositiveVariance();	  if(numericalVarianceIsCalculated)    {    	non-compiled	[CE]  illegal  start  of  type	23	None
153	[BUG]  [BUGGY]  numericalVariance  =  calculatePositiveVariance()  /(numericalVariance  <  0?  calcUtil.doubleValue()  :  calculatePositiveVariance());  [CE]  illegal  start  of  type  [CONTEXT]    public  double  getNumericalVariance()  {    [BUGGY]  numericalVariance  =  calculatePositiveVariance()  /(numericalVariance  <  0?  calcUtil.doubleValue()  :  calculatePositiveVariance());  [BUGGY]    numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	279	279	1	replace	numericalVariance  =  calculatePositiveVariance()  /(numericalVariance  <  0?  calcUtil.doubleValue()  :  calculatePositiveVariance());	  if(numericalVarianceIsCalculated)    {    	non-compiled	[CE]  illegal  start  of  type	23	None
154	[BUG]  [BUGGY]  numericalVariance  =  calculatePositiveVariance()  /(numericalVariance  <  0)?  calculatePositiveVariance()  :  sumOfSuccesses;  [CE]  illegal  start  of  type  [CONTEXT]    public  double  getNumericalVariance()  {    [BUGGY]  numericalVariance  =  calculatePositiveVariance()  /(numericalVariance  <  0)?  calculatePositiveVariance()  :  sumOfSuccesses;  [BUGGY]    numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	279	279	1	replace	numericalVariance  =  calculatePositiveVariance()  /(numericalVariance  <  0)?  calculatePositiveVariance()  :  sumOfSuccesses;	  if(numericalVarianceIsCalculated)    {    	non-compiled	[CE]  illegal  start  of  type	23	None
181	[BUG]  [BUGGY]  int  populationSize  =  Math.abs(numberOfSuccesses  /  numberOfSuccesses  -  1);  [CE]  missing  return  statement  [CONTEXT]    protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();  final  double  m  =  getNumberOfSuccesses();  final  double  n  =  getSampleSize();    [BUGGY]  int  populationSize  =  Math.abs(numberOfSuccesses  /  numberOfSuccesses  -  1);  [BUGGY]    return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	295	295	1	replace	int  populationSize  =  Math.abs(numberOfSuccesses  /  numberOfSuccesses  -  1);	      final    double    n    =    getSampleSize();    	non-compiled	[CE]  missing  return  statement	94	None
182	[BUG]  [BUGGY]  numberOfSuccesses  =  getPopulationSize();  [CE]  cannot  assign  a  value  to  final  variable  numberOfSuccesses  [CONTEXT]    protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();  final  double  m  =  getNumberOfSuccesses();  final  double  n  =  getSampleSize();    [BUGGY]  numberOfSuccesses  =  getPopulationSize();  [BUGGY]    return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	295	295	1	replace	numberOfSuccesses  =  getPopulationSize();	      final    double    n    =    getSampleSize();    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  numberOfSuccesses	94	None
183	[BUG]  [BUGGY]  numberOfSuccesses  =  Math.max(numberOfSuccesses,  populationSize);  [CE]  cannot  assign  a  value  to  final  variable  numberOfSuccesses  [CONTEXT]    protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();  final  double  m  =  getNumberOfSuccesses();  final  double  n  =  getSampleSize();    [BUGGY]  numberOfSuccesses  =  Math.max(numberOfSuccesses,  populationSize);  [BUGGY]    return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	295	295	1	replace	numberOfSuccesses  =  Math.max(numberOfSuccesses,  populationSize);	      final    double    n    =    getSampleSize();    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  numberOfSuccesses	94	None
184	[BUG]  [BUGGY]  numberOfSuccesses  =  Math.abs(numberOfSuccesses  /  SIZES);  [CE]  cannot  assign  a  value  to  final  variable  numberOfSuccesses  [CONTEXT]    protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();  final  double  m  =  getNumberOfSuccesses();  final  double  n  =  getSampleSize();    [BUGGY]  numberOfSuccesses  =  Math.abs(numberOfSuccesses  /  SIZES);  [BUGGY]    return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	295	295	1	replace	numberOfSuccesses  =  Math.abs(numberOfSuccesses  /  SIZES);	      final    double    n    =    getSampleSize();    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  numberOfSuccesses	94	None
212	[BUG]  [BUGGY]  final  double  k  =  getDecimalVariance(n);  [CE]  cannot  find  symbol  n  [CONTEXT]    protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();  final  double  m  =  getNumberOfSuccesses();    [BUGGY]  final  double  k  =  getDecimalVariance(n);  [BUGGY]    final  double  n  =  getSampleSize();  return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	294	294	1	replace	final  double  k  =  getDecimalVariance(n);	      final    double    k    =    getDecimalVariance();    	non-compiled	[CE]  cannot  find  symbol  n	482	None
213	[BUG]  [BUGGY]  final  double  k  =  getDecimalVariance()  *  dx;  [CE]  cannot  find  symbol  [CONTEXT]    protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();  final  double  m  =  getNumberOfSuccesses();    [BUGGY]  final  double  k  =  getDecimalVariance()  *  dx;  [BUGGY]    final  double  n  =  getSampleSize();  return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	294	294	1	replace	final  double  k  =  getDecimalVariance()  *  dx;	      final    double    k    =    getDecimalVariance();    	non-compiled	[CE]  cannot  find  symbol	482	None
214	[BUG]  [BUGGY]  final  double  k  =  getDecimalVarianceSize();  [CE]  cannot  find  symbol  [CONTEXT]    protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();  final  double  m  =  getNumberOfSuccesses();    [BUGGY]  final  double  k  =  getDecimalVarianceSize();  [BUGGY]    final  double  n  =  getSampleSize();  return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	294	294	1	replace	final  double  k  =  getDecimalVarianceSize();	      final    double    k    =    getDecimalVariance();    	non-compiled	[CE]  cannot  find  symbol	482	None
242	[BUG]  [BUGGY]  return  FastMath.max(0,  getNumberOfSuccesses()  +  getNumberOfSuccesses()  -  getPopulationSize());  [CE]  unreachable  statement  [CONTEXT]    public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {    [BUGGY]  return  FastMath.max(0,  getNumberOfSuccesses()  +  getNumberOfSuccesses()  -  getPopulationSize());  [BUGGY]    numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	280	280	1	replace	return  FastMath.max(0,  getNumberOfSuccesses()  +  getNumberOfSuccesses()  -  getPopulationSize());	  numericalVariance    =    calculateNumericalVariance()    /(numericalVarianceIsCalculated));    	non-compiled	[CE]  unreachable  statement	34	None
243	[BUG]  [BUGGY]  return  FastMethod.max(0,  getVariance()  +  getNumberOfSuccesses()  -  getPopulationSize());  [CE]  cannot  find  symbol  [CONTEXT]    public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {    [BUGGY]  return  FastMethod.max(0,  getVariance()  +  getNumberOfSuccesses()  -  getPopulationSize());  [BUGGY]    numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	280	280	1	replace	return  FastMethod.max(0,  getVariance()  +  getNumberOfSuccesses()  -  getPopulationSize());	  numericalVariance    =    calculateNumericalVariance()    /(numericalVarianceIsCalculated));    	non-compiled	[CE]  cannot  find  symbol	34	None
244	[BUG]  [BUGGY]  return  FastMatcher.max(0,  getVariance()  +  getNumberOfSuccesses()  -  getPopulationSize());  [CE]  cannot  find  symbol  [CONTEXT]    public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {    [BUGGY]  return  FastMatcher.max(0,  getVariance()  +  getNumberOfSuccesses()  -  getPopulationSize());  [BUGGY]    numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	280	280	1	replace	return  FastMatcher.max(0,  getVariance()  +  getNumberOfSuccesses()  -  getPopulationSize());	  numericalVariance    =    calculateNumericalVariance()    /(numericalVarianceIsCalculated));    	non-compiled	[CE]  cannot  find  symbol	34	None
302	[BUG]  [BUGGY]  [FE]  AssertionError  testMath1021  [CONTEXT]    public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();    [BUGGY]  numericalVarianceIsCalculated  =!numericalVarianceIsCalculated;  [BUGGY]    }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	281	281	1	add	numericalVarianceIsCalculated  =!numericalVarianceIsCalculated;	  numericalVarianceIsCalculated    =    false;    	compilable	  [FE]  AssertionError  testMath1021	122	1
303	[BUG]  [BUGGY]  numericalVarianceIsCalculated  =!numericalVarianceIsCalculated;  [FE]  AssertionError  testMath1021  [CONTEXT]    public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();    [BUGGY]  numericalVarianceIsCalculated  =!numericalVarianceIsCalculated;  [BUGGY]    }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	281	281	1	replace	numericalVarianceIsCalculated  =!numericalVarianceIsCalculated;	  numericalVarianceIsCalculated    =    false;    	compilable	  [FE]  AssertionError  testMath1021	122	1
303	[BUG]  [BUGGY]  numericalVarianceIsCalculated  =  this;  [CE]  incompatible  types  [CONTEXT]    public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();    [BUGGY]  numericalVarianceIsCalculated  =  this;  [BUGGY]    }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	281	281	1	replace	numericalVarianceIsCalculated  =  this;	  numericalVarianceIsCalculated    =    false;    	non-compiled	[CE]  incompatible  types	122	None
304	[BUG]  [BUGGY]  numericalVarianceIsCalculated  =  i;  [CE]  cannot  find  symbol  i  [CONTEXT]    public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();    [BUGGY]  numericalVarianceIsCalculated  =  i;  [BUGGY]    }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	281	281	1	replace	numericalVarianceIsCalculated  =  i;	  numericalVarianceIsCalculated    =    false;    	non-compiled	[CE]  cannot  find  symbol  i	122	None
332	[BUG]  [BUGGY]  [FE]  AssertionError  testMath1021  [CONTEXT]    protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();  final  double  m  =  getNumberOfSuccesses();    [BUGGY]      final  double  k  =  getNumberOfSuccesses();  final  double  dx  =  getNumberOfSuccesses();  [BUGGY]    final  double  n  =  getSampleSize();  return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	294	294	1	add	        final    double    k    =    getNumberOfSuccesses();    final  double  dx  =  getNumberOfSuccesses();	  	compilable	  [FE]  AssertionError  testMath1021	302	1
333	[BUG]  [BUGGY]      final  double  k  =  getNumberOfSuccesses();  final  double  dx  =  getNumberOfSuccesses();  [FE]  AssertionError  testMath1021  [CONTEXT]    protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();  final  double  m  =  getNumberOfSuccesses();    [BUGGY]      final  double  k  =  getNumberOfSuccesses();  final  double  dx  =  getNumberOfSuccesses();  [BUGGY]    final  double  n  =  getSampleSize();  return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	294	294	1	replace	        final    double    k    =    getNumberOfSuccesses();    final  double  dx  =  getNumberOfSuccesses();	  	compilable	  [FE]  AssertionError  testMath1021	302	1
333	[BUG]  [BUGGY]      final  double  k  =  getNumberOfSuccesses();  final  double  dx  =  getDecimalVariance();  [CE]  cannot  find  symbol  [CONTEXT]    protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();  final  double  m  =  getNumberOfSuccesses();    [BUGGY]      final  double  k  =  getNumberOfSuccesses();  final  double  dx  =  getDecimalVariance();  [BUGGY]    final  double  n  =  getSampleSize();  return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	294	294	1	replace	        final    double    k    =    getNumberOfSuccesses();    final  double  dx  =  getDecimalVariance();	  	non-compiled	[CE]  cannot  find  symbol	302	None
334	[BUG]  [BUGGY]      final  double  k  =  getNumberOfSuccesses();  final  double  dx  =  getDecimalValue();  [CE]  cannot  find  symbol  [CONTEXT]    protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();  final  double  m  =  getNumberOfSuccesses();    [BUGGY]      final  double  k  =  getNumberOfSuccesses();  final  double  dx  =  getDecimalValue();  [BUGGY]    final  double  n  =  getSampleSize();  return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	294	294	1	replace	        final    double    k    =    getNumberOfSuccesses();    final  double  dx  =  getDecimalValue();	  	non-compiled	[CE]  cannot  find  symbol	302	None
335	[BUG]  [BUGGY]      final  double  k  =  getNumberOfSuccesses();  final  double  dx  =  getDayOfMonth();  [CE]  cannot  find  symbol  [CONTEXT]    protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();  final  double  m  =  getNumberOfSuccesses();    [BUGGY]      final  double  k  =  getNumberOfSuccesses();  final  double  dx  =  getDayOfMonth();  [BUGGY]    final  double  n  =  getSampleSize();  return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	294	294	1	replace	        final    double    k    =    getNumberOfSuccesses();    final  double  dx  =  getDayOfMonth();	  	non-compiled	[CE]  cannot  find  symbol	302	None
364	[BUG]  [BUGGY]  setNumberOfSuccesses(getNumberOfSuccesses(),  k);  [CE]  cannot  find  symbol  k  [CONTEXT]    protected  double  calculateNumericalVariance()  {    [BUGGY]  setNumberOfSuccesses(getNumberOfSuccesses(),  k);  [BUGGY]    final  double  N  =  getPopulationSize();  final  double  m  =  getNumberOfSuccesses();  final  double  n  =  getSampleSize();  return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	292	292	1	replace	setNumberOfSuccesses(getNumberOfSuccesses(),  k);	      final    int    k    =    getNumberOfSuccesses();    	non-compiled	[CE]  cannot  find  symbol  k	213	None
394	[BUG]  [BUGGY]  final  double  number  =  getNumberOfSuccesses();  [CE]  cannot  find  symbol  m  [CONTEXT]    protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();    [BUGGY]  final  double  number  =  getNumberOfSuccesses();  [BUGGY]    final  double  m  =  getNumberOfSuccesses();  final  double  n  =  getSampleSize();  return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	293	293	1	replace	final  double  number  =  getNumberOfSuccesses();	      final    double    n    =    getNumberOfSuccesses();    	non-compiled	[CE]  cannot  find  symbol  m	142	None
423	[BUG]  [BUGGY]  [Delete]  [CE]  illegal  start  of  expression  [CONTEXT]    public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();    [BUGGY]  [Delete]  [BUGGY]    numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	281	281	1	replace	[Delete]	      if(!numericalVarianceIsCalculated)    {    if(!numericalVarianceIsCalculated)    {    numericalVariance    =    calculateNumberOfSuccesses();    }    	non-compiled	[CE]  illegal  start  of  expression	171	None
452	[BUG]  [BUGGY]  double  numberOfSuccesses  =  getPopulationSize()  *  Math.pow(10,  numberOfSuccesses);  [CE]  variable  numberOfSuccesses  might  not  have  been  initialized  [CONTEXT]    public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }    [BUGGY]  double  numberOfSuccesses  =  getPopulationSize()  *  Math.pow(10,  numberOfSuccesses);  [BUGGY]    return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	283	283	1	replace	double  numberOfSuccesses  =  getPopulationSize()  *  Math.pow(10,  numberOfSuccesses);	      if(!numericalVarianceIsCalculated)    {    if(!numericalVarianceIsCalculated)    {    numericalVariance    =    calculateNumberOfSuccesses();    if(!numericalVarianceIsCalculated)    {    numericalVariance    	non-compiled	[CE]  variable  numberOfSuccesses  might  not  have  been  initialized	105	None
454	[BUG]  [BUGGY]  numericalVariance  =  getNumberOfSuccesses()  *  Math.pow(10,  numberOfSuccesses  -  1);  [CE]  missing  return  statement  [CONTEXT]    public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }    [BUGGY]  numericalVariance  =  getNumberOfSuccesses()  *  Math.pow(10,  numberOfSuccesses  -  1);  [BUGGY]    return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	283	283	1	replace	numericalVariance  =  getNumberOfSuccesses()  *  Math.pow(10,  numberOfSuccesses  -  1);	      if(!numericalVarianceIsCalculated)    {    if(!numericalVarianceIsCalculated)    {    numericalVariance    =    calculateNumberOfSuccesses();    if(!numericalVarianceIsCalculated)    {    numericalVariance    	non-compiled	[CE]  missing  return  statement	105	None
484	[BUG]  [BUGGY]  return  numericalVariance  /(numericalVarianceIsCalculated  -  1));  [CE]  ';'  expected  [CONTEXT]    public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }    [BUGGY]  return  numericalVariance  /(numericalVarianceIsCalculated  -  1));  [BUGGY]    }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	283	283	1	replace	return  numericalVariance  /(numericalVarianceIsCalculated  -  1));	  return    numericalVariance    /(numericalVarianceIsCalculated));    	non-compiled	[CE]  ';'  expected	154	None
512	[BUG]  [BUGGY]  int  populationSize  =  getPopulationSize(getNumberOfSuccesses());  [CE]  method  getPopulationSize  in  class  HypergeometricDistribution  cannot  be  applied  to  given  types;  [CONTEXT]    public  int  getSupportLowerBound()  {    [BUGGY]  int  populationSize  =  getPopulationSize(getNumberOfSuccesses());  [BUGGY]    return  FastMath.max(0,        getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  }  [CLASS]  HypergeometricDistribution  [METHOD]  getSupportLowerBound  [RETURN_TYPE]  int  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	308	309	1	replace	int  populationSize  =  getPopulationSize(getNumberOfSuccesses());	      int    populationSize    =    getNumberOfSuccesses();    	non-compiled	[CE]  method  getPopulationSize  in  class  HypergeometricDistribution  cannot  be  applied  to  given  types;	66	None
572	[BUG]  [BUGGY]  final  double  n  =  getNumberOfSuccesses().doubleValue;  [CE]  variable  n  is  already  defined  in  method  calculateNumericalVariance()  [CONTEXT]    protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();  final  double  m  =  getNumberOfSuccesses();  final  double  n  =  getSampleSize();    [BUGGY]  final  double  n  =  getNumberOfSuccesses().doubleValue;  [BUGGY]    return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	295	295	1	replace	final  double  n  =  getNumberOfSuccesses().doubleValue;	      final    double    n    =    getNumberOfSuccesses();    	non-compiled	[CE]  variable  n  is  already  defined  in  method  calculateNumericalVariance()	92	None
573	[BUG]  [BUGGY]  final  double  n  =  getNumberOfSuccesses()  +  1;  [CE]  variable  n  is  already  defined  in  method  calculateNumericalVariance()  [CONTEXT]    protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();  final  double  m  =  getNumberOfSuccesses();  final  double  n  =  getSampleSize();    [BUGGY]  final  double  n  =  getNumberOfSuccesses()  +  1;  [BUGGY]    return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	295	295	1	replace	final  double  n  =  getNumberOfSuccesses()  +  1;	      final    double    n    =    getNumberOfSuccesses();    	non-compiled	[CE]  variable  n  is  already  defined  in  method  calculateNumericalVariance()	92	None
603	[BUG]  [BUGGY]  [FE]  AssertionError  testMoments  [CONTEXT]    protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();  final  double  m  =  getNumberOfSuccesses();  final  double  n  =  getSampleSize();    [BUGGY]  return  numericalVariance  *(numberOfSuccesses  /  2);  [BUGGY]    return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	295	295	1	add	return  numericalVariance  *(numberOfSuccesses  /  2);	      final    double    k    =    getKnowledge();    	compilable	  [FE]  AssertionError  testMoments	95	1
604	[BUG]  [BUGGY]  return  numericalVariance  *(numberOfSuccesses  /  2);  [FE]  AssertionError  testMoments  [CONTEXT]    protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();  final  double  m  =  getNumberOfSuccesses();  final  double  n  =  getSampleSize();    [BUGGY]  return  numericalVariance  *(numberOfSuccesses  /  2);  [BUGGY]    return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	295	295	1	replace	return  numericalVariance  *(numberOfSuccesses  /  2);	      final    double    k    =    getKnowledge();    	compilable	  [FE]  AssertionError  testMoments	95	1
604	[BUG]  [BUGGY]  [FE]  AssertionError  testMoments  [CONTEXT]    protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();  final  double  m  =  getNumberOfSuccesses();  final  double  n  =  getSampleSize();    [BUGGY]  return  numericalVariance  *(populationSize  -  1);  [BUGGY]    return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	295	295	1	add	return  numericalVariance  *(populationSize  -  1);	      final    double    k    =    getKnowledge();    	compilable	  [FE]  AssertionError  testMoments	95	1
605	[BUG]  [BUGGY]  return  numericalVariance  *(populationSize  -  1);  [FE]  AssertionError  testMoments  [CONTEXT]    protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();  final  double  m  =  getNumberOfSuccesses();  final  double  n  =  getSampleSize();    [BUGGY]  return  numericalVariance  *(populationSize  -  1);  [BUGGY]    return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	295	295	1	replace	return  numericalVariance  *(populationSize  -  1);	      final    double    k    =    getKnowledge();    	compilable	  [FE]  AssertionError  testMoments	95	1
632	[BUG]  [BUGGY]  numericalVariance  =  Math.max(numberOfSuccesses,  getPopulationSize());  [CE]  cannot  find  symbol  m  [CONTEXT]    protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();    [BUGGY]  numericalVariance  =  Math.max(numberOfSuccesses,  getPopulationSize());  [BUGGY]    final  double  m  =  getNumberOfSuccesses();  final  double  n  =  getSampleSize();  return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	293	293	1	replace	numericalVariance  =  Math.max(numberOfSuccesses,  getPopulationSize());	      final    double    N    =    getNumberOfSuccesses();    	non-compiled	[CE]  cannot  find  symbol  m	141	None
634	[BUG]  [BUGGY]  numericalVariance  =  Math.max(numberOfSuccesses,  getPopulationSize()  -  1);  [CE]  cannot  find  symbol  m  [CONTEXT]    protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();    [BUGGY]  numericalVariance  =  Math.max(numberOfSuccesses,  getPopulationSize()  -  1);  [BUGGY]    final  double  m  =  getNumberOfSuccesses();  final  double  n  =  getSampleSize();  return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	293	293	1	replace	numericalVariance  =  Math.max(numberOfSuccesses,  getPopulationSize()  -  1);	      final    double    N    =    getNumberOfSuccesses();    	non-compiled	[CE]  cannot  find  symbol  m	141	None
664	[BUG]  [BUGGY]  getNumberOfSuccesses()  *  getImmediateParentSize();  [CE]  not  a  statement  [CONTEXT]    public  double  getNumericalMean()  {    [BUGGY]  getNumberOfSuccesses()  *  getImmediateParentSize();  [BUGGY]    return  (double)  (getSampleSize()  *  getNumberOfSuccesses())  /  (double)  getPopulationSize();  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalMean  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	268	268	1	replace	getNumberOfSuccesses()  *  getImmediateParentSize();	      getNumberOfSuccesses()    *    getPopulationSize();    	non-compiled	[CE]  not  a  statement	424	None
691	[BUG]  [BUGGY]  return  FastMath.max(0,  getNumberOfSuccesses()  +  getSampleSize()  -  getPopulationSize());  getNumberOfSuccesses()  -  getPopulationSize();  [CE]  not  a  statement  [CONTEXT]    public  int  getSupportLowerBound()  {    [BUGGY]  return  FastMath.max(0,  getNumberOfSuccesses()  +  getSampleSize()  -  getPopulationSize());  getNumberOfSuccesses()  -  getPopulationSize();  [BUGGY]    getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  }  [CLASS]  HypergeometricDistribution  [METHOD]  getSupportLowerBound  [RETURN_TYPE]  int  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	308	309	1	replace	return    FastMath.max(0,    getNumberOfSuccesses()    +    getSampleSize()    -    getPopulationSize());    getNumberOfSuccesses()  -  getPopulationSize();	  	non-compiled	[CE]  not  a  statement	2	None
692	[BUG]  [BUGGY]  return  FastMath.max(0,  getNumberOfSuccesses()  +  getSampleSize()  -  getPopulationSize());  getNumberOfSuccesses()  +  getPopulationSize();  [CE]  not  a  statement  [CONTEXT]    public  int  getSupportLowerBound()  {    [BUGGY]  return  FastMath.max(0,  getNumberOfSuccesses()  +  getSampleSize()  -  getPopulationSize());  getNumberOfSuccesses()  +  getPopulationSize();  [BUGGY]    getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  }  [CLASS]  HypergeometricDistribution  [METHOD]  getSupportLowerBound  [RETURN_TYPE]  int  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	308	309	1	replace	return    FastMath.max(0,    getNumberOfSuccesses()    +    getSampleSize()    -    getPopulationSize());    getNumberOfSuccesses()  +  getPopulationSize();	  	non-compiled	[CE]  not  a  statement	2	None
693	[BUG]  [BUGGY]  return  FastMath.max(0,  getNumberOfSuccesses()  +  getSampleSize()  -  getPopulationSize());  getNumberOfSuccesses()  +  getSampleSize()  -  getPopulationSize();  [CE]  not  a  statement  [CONTEXT]    public  int  getSupportLowerBound()  {    [BUGGY]  return  FastMath.max(0,  getNumberOfSuccesses()  +  getSampleSize()  -  getPopulationSize());  getNumberOfSuccesses()  +  getSampleSize()  -  getPopulationSize();  [BUGGY]    getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  }  [CLASS]  HypergeometricDistribution  [METHOD]  getSupportLowerBound  [RETURN_TYPE]  int  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	308	309	1	replace	return    FastMath.max(0,    getNumberOfSuccesses()    +    getSampleSize()    -    getPopulationSize());    getNumberOfSuccesses()  +  getSampleSize()  -  getPopulationSize();	  	non-compiled	[CE]  not  a  statement	2	None
694	[BUG]  [BUGGY]  return  FastMath.max(0,  getNumberOfSuccesses()  +  getSampleSize()  -  getPopulationSize());  return  getNumberOfSuccesses()  +  getPopulationSize();  [CE]  unreachable  statement  [CONTEXT]    public  int  getSupportLowerBound()  {    [BUGGY]  return  FastMath.max(0,  getNumberOfSuccesses()  +  getSampleSize()  -  getPopulationSize());  return  getNumberOfSuccesses()  +  getPopulationSize();  [BUGGY]    getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  }  [CLASS]  HypergeometricDistribution  [METHOD]  getSupportLowerBound  [RETURN_TYPE]  int  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	308	309	1	replace	return    FastMath.max(0,    getNumberOfSuccesses()    +    getSampleSize()    -    getPopulationSize());    return  getNumberOfSuccesses()  +  getPopulationSize();	  	non-compiled	[CE]  unreachable  statement	2	None
724	[BUG]  [BUGGY]      double  numericalVariance  =  Math.max(getNumberOfSuccesses(),  numberOfSuccesses);  double  numericalVariance  =  Math.min(getNumberOfSuccesses(),  0);  [CE]  variable  numericalVariance  is  already  defined  in  method  getNumericalVariance()  [CONTEXT]    public  double  getNumericalVariance()  {    [BUGGY]      double  numericalVariance  =  Math.max(getNumberOfSuccesses(),  numberOfSuccesses);  double  numericalVariance  =  Math.min(getNumberOfSuccesses(),  0);  [BUGGY]    if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	279	279	1	replace	        double    numericalVariance    =    Math.max(getNumberOfSuccesses(),    numberOfSuccesses);    double  numericalVariance  =  Math.min(getNumberOfSuccesses(),  0);	  	non-compiled	[CE]  variable  numericalVariance  is  already  defined  in  method  getNumericalVariance()	542	None
725	[BUG]  [BUGGY]      double  numericalVariance  =  Math.max(getNumberOfSuccesses(),  numberOfSuccesses);  double  numericalVariance  =  Math.min(getNumberOfSuccesses(),  getPopulationSize());  [CE]  variable  numericalVariance  is  already  defined  in  method  getNumericalVariance()  [CONTEXT]    public  double  getNumericalVariance()  {    [BUGGY]      double  numericalVariance  =  Math.max(getNumberOfSuccesses(),  numberOfSuccesses);  double  numericalVariance  =  Math.min(getNumberOfSuccesses(),  getPopulationSize());  [BUGGY]    if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	279	279	1	replace	        double    numericalVariance    =    Math.max(getNumberOfSuccesses(),    numberOfSuccesses);    double  numericalVariance  =  Math.min(getNumberOfSuccesses(),  getPopulationSize());	  	non-compiled	[CE]  variable  numericalVariance  is  already  defined  in  method  getNumericalVariance()	542	None
753	[BUG]  [BUGGY]  if(!numericalVarianceIsCalculated)  {  if(!numericalVarianceIsCalculated)  {  return  false;  [CE]  illegal  start  of  expression  [CONTEXT]    public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {    [BUGGY]  if(!numericalVarianceIsCalculated)  {  if(!numericalVarianceIsCalculated)  {  return  false;  [BUGGY]    numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	280	280	1	replace	if(!numericalVarianceIsCalculated)  {  if(!numericalVarianceIsCalculated)  {  return  false;	      if(!numericalVarianceIsCalculated)    {    if(!numericalVarianceIsCalculated)    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	43	None
784	[BUG]  [BUGGY]  numericalVariance  =  getNumberOfSuccesses()  *  Math.pow(10,  n);  [CE]  cannot  find  symbol  n  [CONTEXT]    public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }    [BUGGY]  numericalVariance  =  getNumberOfSuccesses()  *  Math.pow(10,  n);  [BUGGY]    return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	283	283	1	replace	numericalVariance  =  getNumberOfSuccesses()  *  Math.pow(10,  n);	      if(!numericalVarianceIsCalculated)    {    if(!numericalVarianceIsCalculated)    {    numericalVariance    =    null;    }    	non-compiled	[CE]  cannot  find  symbol  n	102	None
842	[BUG]  [BUGGY]  double  numericalVariance  =  getNumberOfSuccesses()  +  1;  [CE]  missing  return  statement  [CONTEXT]    public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }    [BUGGY]  double  numericalVariance  =  getNumberOfSuccesses()  +  1;  [BUGGY]    return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	283	283	1	replace	double  numericalVariance  =  getNumberOfSuccesses()  +  1;	      if(!numericalVarianceIsCalculated)    {    if(!numericalVarianceIsCalculated)    {    numericalVariance    =    calculateNumberOfSuccesses();    if(!numericalVarianceIsCalculated)    {    numericalVariance    	non-compiled	[CE]  missing  return  statement	105	None
843	[BUG]  [BUGGY]  double  numericalVariance  =  getNumberOfSuccesses()  *(populationSize  -  1);  [CE]  missing  return  statement  [CONTEXT]    public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }    [BUGGY]  double  numericalVariance  =  getNumberOfSuccesses()  *(populationSize  -  1);  [BUGGY]    return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	283	283	1	replace	double  numericalVariance  =  getNumberOfSuccesses()  *(populationSize  -  1);	      if(!numericalVarianceIsCalculated)    {    if(!numericalVarianceIsCalculated)    {    numericalVariance    =    calculateNumberOfSuccesses();    if(!numericalVarianceIsCalculated)    {    numericalVariance    	non-compiled	[CE]  missing  return  statement	105	None
844	[BUG]  [BUGGY]  double  numericalVariance  =  getNumberOfSuccesses()  /(numberOfSuccesses  *  getSampleSize());  [CE]  missing  return  statement  [CONTEXT]    public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }    [BUGGY]  double  numericalVariance  =  getNumberOfSuccesses()  /(numberOfSuccesses  *  getSampleSize());  [BUGGY]    return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	283	283	1	replace	double  numericalVariance  =  getNumberOfSuccesses()  /(numberOfSuccesses  *  getSampleSize());	      if(!numericalVarianceIsCalculated)    {    if(!numericalVarianceIsCalculated)    {    numericalVariance    =    calculateNumberOfSuccesses();    if(!numericalVarianceIsCalculated)    {    numericalVariance    	non-compiled	[CE]  missing  return  statement	105	None
874	[BUG]  [BUGGY]  int  populationSize  =  numberOfSuccesses  -  getPopulationSize();  [CE]  missing  return  statement  [CONTEXT]    public  int  getSupportLowerBound()  {    [BUGGY]  int  populationSize  =  numberOfSuccesses  -  getPopulationSize();  [BUGGY]    return  FastMath.max(0,        getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  }  [CLASS]  HypergeometricDistribution  [METHOD]  getSupportLowerBound  [RETURN_TYPE]  int  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	308	309	1	replace	int  populationSize  =  numberOfSuccesses  -  getPopulationSize();	      int    numberOfSuccesses    =    getNumberOfSuccesses();    	non-compiled	[CE]  missing  return  statement	82	None
903	[BUG]  [BUGGY]  setNumberOfSuccesses(PopulationSize  -  1);  [CE]  cannot  find  symbol  PopulationSize  [CONTEXT]    public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {    [BUGGY]  setNumberOfSuccesses(PopulationSize  -  1);  [BUGGY]    numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	280	280	1	replace	setNumberOfSuccesses(PopulationSize  -  1);	      setNumberOfSuccesses(n    -    1);    	non-compiled	[CE]  cannot  find  symbol  PopulationSize	244	None
904	[BUG]  [BUGGY]  setNumberOfSuccesses(capacitySize  -  1);  [CE]  cannot  find  symbol  capacitySize  [CONTEXT]    public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {    [BUGGY]  setNumberOfSuccesses(capacitySize  -  1);  [BUGGY]    numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	280	280	1	replace	setNumberOfSuccesses(capacitySize  -  1);	      setNumberOfSuccesses(n    -    1);    	non-compiled	[CE]  cannot  find  symbol  capacitySize	244	None
933	[BUG]  [BUGGY]  final  double  k  =  getKnowledge().length;  [CE]  cannot  find  symbol  [CONTEXT]    protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();  final  double  m  =  getNumberOfSuccesses();  final  double  n  =  getSampleSize();    [BUGGY]  final  double  k  =  getKnowledge().length;  [BUGGY]    return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	295	295	1	replace	final  double  k  =  getKnowledge().length;	      final    double    k    =    getKnowledge();    	non-compiled	[CE]  cannot  find  symbol	95	None
934	[BUG]  [BUGGY]  final  double  k  =  getKnowledge().n;  [CE]  cannot  find  symbol  [CONTEXT]    protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();  final  double  m  =  getNumberOfSuccesses();  final  double  n  =  getSampleSize();    [BUGGY]  final  double  k  =  getKnowledge().n;  [BUGGY]    return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	295	295	1	replace	final  double  k  =  getKnowledge().n;	      final    double    k    =    getKnowledge();    	non-compiled	[CE]  cannot  find  symbol	95	None
963	[BUG]  [BUGGY]  numericalVariance  =  calculateNumericalVariance()  /(numberOfSuccesses));  [CE]  ';'  expected  [CONTEXT]    public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {    [BUGGY]  numericalVariance  =  calculateNumericalVariance()  /(numberOfSuccesses));  [BUGGY]    numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	280	280	1	replace	numericalVariance  =  calculateNumericalVariance()  /(numberOfSuccesses));	  numericalVariance    =    calculateNumericalVariance()    /(numericalVarianceIsCalculated));    	non-compiled	[CE]  ';'  expected	34	None
992	[BUG]  [BUGGY]  [FE]  AssertionError  testMoments  [CONTEXT]    public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();    [BUGGY]      numericalVariance  =  Math.max(numberOfSuccesses,  numericalVariance);  [BUGGY]    }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	281	281	1	add	        numericalVariance  =  Math.max(numberOfSuccesses,  numericalVariance);	  	compilable	  [FE]  AssertionError  testMoments	125	1
993	[BUG]  [BUGGY]      numericalVariance  =  Math.max(numberOfSuccesses,  numericalVariance);  [FE]  AssertionError  testMoments  [CONTEXT]    public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();    [BUGGY]      numericalVariance  =  Math.max(numberOfSuccesses,  numericalVariance);  [BUGGY]    }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	281	281	1	replace	        numericalVariance  =  Math.max(numberOfSuccesses,  numericalVariance);	  	compilable	  [FE]  AssertionError  testMoments	125	1
993	[BUG]  [BUGGY]  [FE]  AssertionError  testMoments  [CONTEXT]    public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();    [BUGGY]      numericalVariance  =  Math.abs(numberOfSuccesses  /  2);  [BUGGY]    }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	281	281	1	add	        numericalVariance  =  Math.abs(numberOfSuccesses  /  2);	  	compilable	  [FE]  AssertionError  testMoments	125	1
994	[BUG]  [BUGGY]      numericalVariance  =  Math.abs(numberOfSuccesses  /  2);  [FE]  AssertionError  testMoments  [CONTEXT]    public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();    [BUGGY]      numericalVariance  =  Math.abs(numberOfSuccesses  /  2);  [BUGGY]    }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	281	281	1	replace	        numericalVariance  =  Math.abs(numberOfSuccesses  /  2);	  	compilable	  [FE]  AssertionError  testMoments	125	1
994	[BUG]  [BUGGY]  [FE]  AssertionError  testMoments  [CONTEXT]    public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();    [BUGGY]      numericalVariance  =  Math.pow(-numberOfSuccesses,  Math.random());  [BUGGY]    }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	281	281	1	add	        numericalVariance  =  Math.pow(-numberOfSuccesses,  Math.random());	  	compilable	  [FE]  AssertionError  testMoments	125	1
995	[BUG]  [BUGGY]      numericalVariance  =  Math.pow(-numberOfSuccesses,  Math.random());  [FE]  AssertionError  testMoments  [CONTEXT]    public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();    [BUGGY]      numericalVariance  =  Math.pow(-numberOfSuccesses,  Math.random());  [BUGGY]    }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	281	281	1	replace	        numericalVariance  =  Math.pow(-numberOfSuccesses,  Math.random());	  	compilable	  [FE]  AssertionError  testMoments	125	1
1022	[BUG]  [BUGGY]  final  int  numberOfSuccesses  =  getNumberOfSuccesses();  [CE]  cannot  find  symbol  N  [CONTEXT]    protected  double  calculateNumericalVariance()  {    [BUGGY]  final  int  numberOfSuccesses  =  getNumberOfSuccesses();  [BUGGY]    final  double  N  =  getPopulationSize();  final  double  m  =  getNumberOfSuccesses();  final  double  n  =  getSampleSize();  return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	292	292	1	replace	final  int  numberOfSuccesses  =  getNumberOfSuccesses();	      final    int    N    =    getNumberOfSuccesses();    	non-compiled	[CE]  cannot  find  symbol  N	162	None
1054	[BUG]  [BUGGY]  final  double  N  =  getPopulationSize()  /  2.0;  final  double  N  =  getNumberOfHalfday()  /  2.0;  [CE]  variable  N  is  already  defined  in  method  calculateNumericalVariance()  [CONTEXT]    protected  double  calculateNumericalVariance()  {    [BUGGY]  final  double  N  =  getPopulationSize()  /  2.0;  final  double  N  =  getNumberOfHalfday()  /  2.0;  [BUGGY]    final  double  m  =  getNumberOfSuccesses();  final  double  n  =  getSampleSize();  return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	292	292	1	replace	final    double    N    =    getPopulationSize()    /    2.0;    final  double  N  =  getNumberOfHalfday()  /  2.0;	  	non-compiled	[CE]  variable  N  is  already  defined  in  method  calculateNumericalVariance()	194	None
1081	[BUG]  [BUGGY]  [FE]  AssertionError  testMoments  [CONTEXT]    public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {    [BUGGY]  final  int  k  =  getNumberOfSuccesses();  [BUGGY]    numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	280	280	1	add	final  int  k  =  getNumberOfSuccesses();	      if(!numericalVarianceIsCalculated)    {    if(!numericalVarianceIsCalculated)    {    return    false;    }    	compilable	  [FE]  AssertionError  testMoments	43	1
1082	[BUG]  [BUGGY]  final  int  k  =  getNumberOfSuccesses();  [FE]  AssertionError  testMoments  [CONTEXT]    public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {    [BUGGY]  final  int  k  =  getNumberOfSuccesses();  [BUGGY]    numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	280	280	1	replace	final  int  k  =  getNumberOfSuccesses();	      if(!numericalVarianceIsCalculated)    {    if(!numericalVarianceIsCalculated)    {    return    false;    }    	compilable	  [FE]  AssertionError  testMoments	43	1
1082	[BUG]  [BUGGY]  final  int  k  =  getKnowNumberOfSuccesses();  [CE]  cannot  find  symbol  [CONTEXT]    public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {    [BUGGY]  final  int  k  =  getKnowNumberOfSuccesses();  [BUGGY]    numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	280	280	1	replace	final  int  k  =  getKnowNumberOfSuccesses();	      if(!numericalVarianceIsCalculated)    {    if(!numericalVarianceIsCalculated)    {    return    false;    }    	non-compiled	[CE]  cannot  find  symbol	43	None
1084	[BUG]  [BUGGY]  final  int  k  =  getKindestNumberOfSuccesses();  [CE]  cannot  find  symbol  [CONTEXT]    public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {    [BUGGY]  final  int  k  =  getKindestNumberOfSuccesses();  [BUGGY]    numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	280	280	1	replace	final  int  k  =  getKindestNumberOfSuccesses();	      if(!numericalVarianceIsCalculated)    {    if(!numericalVarianceIsCalculated)    {    return    false;    }    	non-compiled	[CE]  cannot  find  symbol	43	None
1113	[BUG]  [BUGGY]  if(numericalVarianceIsCalculated)  {  if(!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateStdNumericalVariance();  }  [CE]  illegal  start  of  expression  [CONTEXT]    public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();    [BUGGY]  if(numericalVarianceIsCalculated)  {  if(!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateStdNumericalVariance();  }  [BUGGY]    numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	281	281	1	replace	if(numericalVarianceIsCalculated)  {  if(!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateStdNumericalVariance();  }	      if(!numericalVarianceIsCalculated)    {    if(!numericalVarianceIsCalculated)    {    numericalVariance    =    calculateStdNumericalVariance();    }    	non-compiled	[CE]  illegal  start  of  expression	175	None
1144	[BUG]  [BUGGY]  final  double  N  =  getNumberOfSuccesses()  -  2;  [CE]  variable  N  is  already  defined  in  method  calculateNumericalVariance()  [CONTEXT]    protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();    [BUGGY]  final  double  N  =  getNumberOfSuccesses()  -  2;  [BUGGY]    final  double  m  =  getNumberOfSuccesses();  final  double  n  =  getSampleSize();  return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	293	293	1	replace	final  double  N  =  getNumberOfSuccesses()  -  2;	      final    double    N    =    getNumberOfSuccesses();    	non-compiled	[CE]  variable  N  is  already  defined  in  method  calculateNumericalVariance()	141	None
1173	[BUG]  [BUGGY]  if(numericalVarianceIsCalculated  &&  isNumberOfSuccesses())  {  [CE]  illegal  start  of  expression  [CONTEXT]    public  int  getSupportLowerBound()  {    [BUGGY]  if(numericalVarianceIsCalculated  &&  isNumberOfSuccesses())  {  [BUGGY]    return  FastMath.max(0,        getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  }  [CLASS]  HypergeometricDistribution  [METHOD]  getSupportLowerBound  [RETURN_TYPE]  int  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	308	309	1	replace	if(numericalVarianceIsCalculated  &&  isNumberOfSuccesses())  {	      int    populationSize    =    getPopulationSize();    	non-compiled	[CE]  illegal  start  of  expression	64	None
1202	[BUG]  [BUGGY]  numericalVariance  =  getNumberOfSuccesses()  *(numberOfSuccesses  -  1);  [CE]  cannot  find  symbol  m  [CONTEXT]    protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();    [BUGGY]  numericalVariance  =  getNumberOfSuccesses()  *(numberOfSuccesses  -  1);  [BUGGY]    final  double  m  =  getNumberOfSuccesses();  final  double  n  =  getSampleSize();  return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	293	293	1	replace	numericalVariance  =  getNumberOfSuccesses()  *(numberOfSuccesses  -  1);	      final    double    n    =    getNumberOfSuccesses();    	non-compiled	[CE]  cannot  find  symbol  m	142	None
1203	[BUG]  [BUGGY]  numericalVariance  =  getNumberOfSuccesses()  +  1;  [CE]  cannot  find  symbol  m  [CONTEXT]    protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();    [BUGGY]  numericalVariance  =  getNumberOfSuccesses()  +  1;  [BUGGY]    final  double  m  =  getNumberOfSuccesses();  final  double  n  =  getSampleSize();  return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	293	293	1	replace	numericalVariance  =  getNumberOfSuccesses()  +  1;	      final    double    n    =    getNumberOfSuccesses();    	non-compiled	[CE]  cannot  find  symbol  m	142	None
1204	[BUG]  [BUGGY]  numericalVariance  =  getNumberOfSuccesses()  /(numberOfSuccesses  *  getSampleSize());  [CE]  cannot  find  symbol  m  [CONTEXT]    protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();    [BUGGY]  numericalVariance  =  getNumberOfSuccesses()  /(numberOfSuccesses  *  getSampleSize());  [BUGGY]    final  double  m  =  getNumberOfSuccesses();  final  double  n  =  getSampleSize();  return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	293	293	1	replace	numericalVariance  =  getNumberOfSuccesses()  /(numberOfSuccesses  *  getSampleSize());	      final    double    n    =    getNumberOfSuccesses();    	non-compiled	[CE]  cannot  find  symbol  m	142	None
1232	[BUG]  [BUGGY]  final  double  k  =  getNumberOfSuccesses()  +  1;  [CE]  cannot  find  symbol  n  [CONTEXT]    protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();  final  double  m  =  getNumberOfSuccesses();    [BUGGY]  final  double  k  =  getNumberOfSuccesses()  +  1;  [BUGGY]    final  double  n  =  getSampleSize();  return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	294	294	1	replace	final  double  k  =  getNumberOfSuccesses()  +  1;	      final    double    k    =    getNumberOfSuccesses();    	non-compiled	[CE]  cannot  find  symbol  n	303	None
1263	[BUG]  [BUGGY]  final  double  N  =  getNumberOfSuccesses(getNumberOfSuccesses()  -  1);  [CE]  method  getNumberOfSuccesses  in  class  HypergeometricDistribution  cannot  be  applied  to  given  types;  [CONTEXT]    protected  double  calculateNumericalVariance()  {    [BUGGY]  final  double  N  =  getNumberOfSuccesses(getNumberOfSuccesses()  -  1);  [BUGGY]    final  double  N  =  getPopulationSize();  final  double  m  =  getNumberOfSuccesses();  final  double  n  =  getSampleSize();  return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	292	292	1	replace	final  double  N  =  getNumberOfSuccesses(getNumberOfSuccesses()  -  1);	      final    double    N    =    getNumberOfSuccesses().doubleValue();    	non-compiled	[CE]  method  getNumberOfSuccesses  in  class  HypergeometricDistribution  cannot  be  applied  to  given  types;	164	None
1264	[BUG]  [BUGGY]  final  double  N  =  getNumberOfSuccesses(getNumberOfSuccesses()).doubleValue();  [CE]  method  getNumberOfSuccesses  in  class  HypergeometricDistribution  cannot  be  applied  to  given  types;  [CONTEXT]    protected  double  calculateNumericalVariance()  {    [BUGGY]  final  double  N  =  getNumberOfSuccesses(getNumberOfSuccesses()).doubleValue();  [BUGGY]    final  double  N  =  getPopulationSize();  final  double  m  =  getNumberOfSuccesses();  final  double  n  =  getSampleSize();  return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	292	292	1	replace	final  double  N  =  getNumberOfSuccesses(getNumberOfSuccesses()).doubleValue();	      final    double    N    =    getNumberOfSuccesses().doubleValue();    	non-compiled	[CE]  method  getNumberOfSuccesses  in  class  HypergeometricDistribution  cannot  be  applied  to  given  types;	164	None
1292	[BUG]  [BUGGY]  final  double  k  =  getNumberOfSuccesses()  +  1;  [CE]  missing  return  statement  [CONTEXT]    protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();  final  double  m  =  getNumberOfSuccesses();  final  double  n  =  getSampleSize();    [BUGGY]  final  double  k  =  getNumberOfSuccesses()  +  1;  [BUGGY]    return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	295	295	1	replace	final  double  k  =  getNumberOfSuccesses()  +  1;	      final    double    k    =    getNumberOfSuccesses();    	non-compiled	[CE]  missing  return  statement	384	None
1293	[BUG]  [BUGGY]  final  double  k  =  getNumberOfSuccesses()  *  2;  [CE]  missing  return  statement  [CONTEXT]    protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();  final  double  m  =  getNumberOfSuccesses();  final  double  n  =  getSampleSize();    [BUGGY]  final  double  k  =  getNumberOfSuccesses()  *  2;  [BUGGY]    return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	295	295	1	replace	final  double  k  =  getNumberOfSuccesses()  *  2;	      final    double    k    =    getNumberOfSuccesses();    	non-compiled	[CE]  missing  return  statement	384	None
1294	[BUG]  [BUGGY]  final  int  k  =  getNumberOfSuccesses();  [CE]  missing  return  statement  [CONTEXT]    protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();  final  double  m  =  getNumberOfSuccesses();  final  double  n  =  getSampleSize();    [BUGGY]  final  int  k  =  getNumberOfSuccesses();  [BUGGY]    return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	295	295	1	replace	final  int  k  =  getNumberOfSuccesses();	      final    double    k    =    getNumberOfSuccesses();    	non-compiled	[CE]  missing  return  statement	384	None
1323	[BUG]  [BUGGY]  final  int  populationSize  =  getPopulationSize();  [CE]  cannot  find  symbol  N  [CONTEXT]    protected  double  calculateNumericalVariance()  {    [BUGGY]  final  int  populationSize  =  getPopulationSize();  [BUGGY]    final  double  N  =  getPopulationSize();  final  double  m  =  getNumberOfSuccesses();  final  double  n  =  getSampleSize();  return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	292	292	1	replace	final  int  populationSize  =  getPopulationSize();	      final    int    N    =    getPopulationSize();    	non-compiled	[CE]  cannot  find  symbol  N	165	None
1324	[BUG]  [BUGGY]  final  int  numberOfSuccesses  =  getPopulationSize();  [CE]  cannot  find  symbol  N  [CONTEXT]    protected  double  calculateNumericalVariance()  {    [BUGGY]  final  int  numberOfSuccesses  =  getPopulationSize();  [BUGGY]    final  double  N  =  getPopulationSize();  final  double  m  =  getNumberOfSuccesses();  final  double  n  =  getSampleSize();  return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	292	292	1	replace	final  int  numberOfSuccesses  =  getPopulationSize();	      final    int    N    =    getPopulationSize();    	non-compiled	[CE]  cannot  find  symbol  N	165	None
1353	[BUG]  [BUGGY]  super.setNumberOfSuccesses(n);  [CE]  cannot  find  symbol  n  [CONTEXT]    public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {    [BUGGY]  super.setNumberOfSuccesses(n);  [BUGGY]    numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	280	280	1	replace	super.setNumberOfSuccesses(n);	      super.getNumberOfSuccesses();    	non-compiled	[CE]  cannot  find  symbol  n	241	None
1354	[BUG]  [BUGGY]  super.extractNumberOfSuccesses();  [CE]  cannot  find  symbol  [CONTEXT]    public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {    [BUGGY]  super.extractNumberOfSuccesses();  [BUGGY]    numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	280	280	1	replace	super.extractNumberOfSuccesses();	      super.getNumberOfSuccesses();    	non-compiled	[CE]  cannot  find  symbol	241	None
1381	[BUG]  [BUGGY]  [FE]  AssertionError  testMoments  [CONTEXT]    public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {    [BUGGY]  numericalVariance  =  Math.max(numberOfSuccesses,  getNumberOfSuccesses());  [BUGGY]    numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	280	280	1	add	numericalVariance  =  Math.max(numberOfSuccesses,  getNumberOfSuccesses());	      	compilable	  [FE]  AssertionError  testMoments	36	1
1382	[BUG]  [BUGGY]  numericalVariance  =  Math.max(numberOfSuccesses,  getNumberOfSuccesses());  [FE]  AssertionError  testMoments  [CONTEXT]    public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {    [BUGGY]  numericalVariance  =  Math.max(numberOfSuccesses,  getNumberOfSuccesses());  [BUGGY]    numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	280	280	1	replace	numericalVariance  =  Math.max(numberOfSuccesses,  getNumberOfSuccesses());	      	compilable	  [FE]  AssertionError  testMoments	36	1
1382	[BUG]  [BUGGY]  [FE]  AssertionError  testMoments  [CONTEXT]    public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {    [BUGGY]  numericalVariance  =  Math.max(0,  numberOfSuccesses  -  1);  [BUGGY]    numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	280	280	1	add	numericalVariance  =  Math.max(0,  numberOfSuccesses  -  1);	      	compilable	  [FE]  AssertionError  testMoments	36	1
1383	[BUG]  [BUGGY]  numericalVariance  =  Math.max(0,  numberOfSuccesses  -  1);  [FE]  AssertionError  testMoments  [CONTEXT]    public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {    [BUGGY]  numericalVariance  =  Math.max(0,  numberOfSuccesses  -  1);  [BUGGY]    numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	280	280	1	replace	numericalVariance  =  Math.max(0,  numberOfSuccesses  -  1);	      	compilable	  [FE]  AssertionError  testMoments	36	1
1384	[BUG]  [BUGGY]  [FE]  AssertionError  testMoments  [CONTEXT]    public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {    [BUGGY]  numericalVariance  =  Math.max(0,  numberOfSuccesses);  [BUGGY]    numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	280	280	1	add	numericalVariance  =  Math.max(0,  numberOfSuccesses);	      	compilable	  [FE]  AssertionError  testMoments	36	1
1385	[BUG]  [BUGGY]  numericalVariance  =  Math.max(0,  numberOfSuccesses);  [FE]  AssertionError  testMoments  [CONTEXT]    public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {    [BUGGY]  numericalVariance  =  Math.max(0,  numberOfSuccesses);  [BUGGY]    numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	280	280	1	replace	numericalVariance  =  Math.max(0,  numberOfSuccesses);	      	compilable	  [FE]  AssertionError  testMoments	36	1
1412	[BUG]  [BUGGY]  if(numericalVarianceIsCalculated)  {  if(!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumberOfSuccesses();  if(!numericalVarianceIsCalculated)  {  [CE]  illegal  start  of  expression  [CONTEXT]    public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }    [BUGGY]  if(numericalVarianceIsCalculated)  {  if(!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumberOfSuccesses();  if(!numericalVarianceIsCalculated)  {  [BUGGY]    return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	283	283	1	replace	if(numericalVarianceIsCalculated)  {  if(!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumberOfSuccesses();  if(!numericalVarianceIsCalculated)  {	      if(!numericalVarianceIsCalculated)    {    if(!numericalVarianceIsCalculated)    {    numericalVariance    =    calculateNumberOfSuccesses();    if(!numericalVarianceIsCalculated)    {    numericalVariance    	non-compiled	[CE]  illegal  start  of  expression	105	None
1442	[BUG]  [BUGGY]  final  double  k  =  getKindOfSuccesses();  [CE]  cannot  find  symbol  [CONTEXT]    protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();  final  double  m  =  getNumberOfSuccesses();  final  double  n  =  getSampleSize();    [BUGGY]  final  double  k  =  getKindOfSuccesses();  [BUGGY]    return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	295	295	1	replace	final  double  k  =  getKindOfSuccesses();	      final    double    k    =    getNumberOfSuccesses();    	non-compiled	[CE]  cannot  find  symbol	384	None
1444	[BUG]  [BUGGY]  final  double  k  =  getKind().length;  [CE]  cannot  find  symbol  [CONTEXT]    protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();  final  double  m  =  getNumberOfSuccesses();  final  double  n  =  getSampleSize();    [BUGGY]  final  double  k  =  getKind().length;  [BUGGY]    return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	295	295	1	replace	final  double  k  =  getKind().length;	      final    double    k    =    getNumberOfSuccesses();    	non-compiled	[CE]  cannot  find  symbol	384	None
1473	[BUG]  [BUGGY]  final  double  N  =  getNumberOfHyphens(populationSize);  [CE]  cannot  find  symbol  [CONTEXT]    protected  double  calculateNumericalVariance()  {    [BUGGY]  final  double  N  =  getNumberOfHyphens(populationSize);  [BUGGY]    final  double  m  =  getNumberOfSuccesses();  final  double  n  =  getSampleSize();  return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	292	292	1	replace	final  double  N  =  getNumberOfHyphens(populationSize);	  final    double    N    =    getNumberOfHyphens();    	non-compiled	[CE]  cannot  find  symbol	283	None
1503	[BUG]  [BUGGY]  if(numericalVariance  <  null)  {  if(!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumberOfSuccesses();  }  [CE]  bad  operand  types  for  binary  operator  '<'  [CONTEXT]    public  double  getNumericalVariance()  {    [BUGGY]  if(numericalVariance  <  null)  {  if(!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumberOfSuccesses();  }  [BUGGY]    if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	279	279	1	replace	if(numericalVariance  <  null)  {  if(!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumberOfSuccesses();  }	      if(numericalVariance    ==    null)    {    if(!numericalVarianceIsCalculated)    {    numericalVariance    =    calculateNumberOfSuccesses();    }    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '<'	12	None
1504	[BUG]  [BUGGY]  if(numericalVariance  <=  null)  {  if(!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumberOfSuccesses();  }  [CE]  bad  operand  types  for  binary  operator  '<='  [CONTEXT]    public  double  getNumericalVariance()  {    [BUGGY]  if(numericalVariance  <=  null)  {  if(!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumberOfSuccesses();  }  [BUGGY]    if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	279	279	1	replace	if(numericalVariance  <=  null)  {  if(!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumberOfSuccesses();  }	      if(numericalVariance    ==    null)    {    if(!numericalVarianceIsCalculated)    {    numericalVariance    =    calculateNumberOfSuccesses();    }    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '<='	12	None
1532	[BUG]  [BUGGY]  numericalVariance  =  getNumberOfSuccesses()  *(populationSize  -  1));  [CE]  ';'  expected  [CONTEXT]    protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();    [BUGGY]  numericalVariance  =  getNumberOfSuccesses()  *(populationSize  -  1));  [BUGGY]    final  double  m  =  getNumberOfSuccesses();  final  double  n  =  getSampleSize();  return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	293	293	1	replace	numericalVariance  =  getNumberOfSuccesses()  *(populationSize  -  1));	      final    double    n    =    getNumberOfSuccesses();    	non-compiled	[CE]  ';'  expected	142	None
1561	[BUG]  [BUGGY]  return(N  *  m  *(N  *  k)*(N  *  m))  /(N  *  N  *  (N  -  1));  [CE]  cannot  find  symbol  k  [CONTEXT]    protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();  final  double  m  =  getNumberOfSuccesses();  final  double  n  =  getSampleSize();    [BUGGY]  return(N  *  m  *(N  *  k)*(N  *  m))  /(N  *  N  *  (N  -  1));  [BUGGY]    }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	295	295	1	replace	return(N  *  m  *(N  *  k)*(N  *  m))  /(N  *  N  *  (N  -  1));	  return(N    *    m    *(N    *    n)*(N    *    m))    /(N    *    N    *    (N    -    1));    	non-compiled	[CE]  cannot  find  symbol  k	123	None
1562	[BUG]  [BUGGY]  return(N  *  m  *(N  *  n)*(N  *  k))  /(N  *  N  *  (N  -  1));  [CE]  cannot  find  symbol  k  [CONTEXT]    protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();  final  double  m  =  getNumberOfSuccesses();  final  double  n  =  getSampleSize();    [BUGGY]  return(N  *  m  *(N  *  n)*(N  *  k))  /(N  *  N  *  (N  -  1));  [BUGGY]    }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	295	295	1	replace	return(N  *  m  *(N  *  n)*(N  *  k))  /(N  *  N  *  (N  -  1));	  return(N    *    m    *(N    *    n)*(N    *    m))    /(N    *    N    *    (N    -    1));    	non-compiled	[CE]  cannot  find  symbol  k	123	None
1563	[BUG]  [BUGGY]  return(N  *  m  *(n  *  k)*(N  *  m))  /(N  *  N  *  (N  -  1));  [CE]  cannot  find  symbol  k  [CONTEXT]    protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();  final  double  m  =  getNumberOfSuccesses();  final  double  n  =  getSampleSize();    [BUGGY]  return(N  *  m  *(n  *  k)*(N  *  m))  /(N  *  N  *  (N  -  1));  [BUGGY]    }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	295	295	1	replace	return(N  *  m  *(n  *  k)*(N  *  m))  /(N  *  N  *  (N  -  1));	  return(N    *    m    *(N    *    n)*(N    *    m))    /(N    *    N    *    (N    -    1));    	non-compiled	[CE]  cannot  find  symbol  k	123	None
1564	[BUG]  [BUGGY]  [FE]  AssertionError  testMoments  [CONTEXT]    protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();  final  double  m  =  getNumberOfSuccesses();  final  double  n  =  getSampleSize();    [BUGGY]  return(N  *  m  *(N  *  n  +  1)*(N  *  m))  /(N  *  N  *  (N  *  N  -  1));  [BUGGY]    }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	295	295	1	add	return(N  *  m  *(N  *  n  +  1)*(N  *  m))  /(N  *  N  *  (N  *  N  -  1));	  return(N    *    m    *(N    *    n)*(N    *    m))    /(N    *    N    *    (N    -    1));    	compilable	  [FE]  AssertionError  testMoments	123	1
1565	[BUG]  [BUGGY]  return(N  *  m  *(N  *  n  +  1)*(N  *  m))  /(N  *  N  *  (N  *  N  -  1));  [FE]  AssertionError  testMoments  [CONTEXT]    protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();  final  double  m  =  getNumberOfSuccesses();  final  double  n  =  getSampleSize();    [BUGGY]  return(N  *  m  *(N  *  n  +  1)*(N  *  m))  /(N  *  N  *  (N  *  N  -  1));  [BUGGY]    }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	295	295	1	replace	return(N  *  m  *(N  *  n  +  1)*(N  *  m))  /(N  *  N  *  (N  *  N  -  1));	  return(N    *    m    *(N    *    n)*(N    *    m))    /(N    *    N    *    (N    -    1));    	compilable	  [FE]  AssertionError  testMoments	123	1
1592	[BUG]  [BUGGY]  numericalVariance  =  calculateStandardVariance(numberOfSuccesses);  [CE]  cannot  find  symbol  [CONTEXT]    public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {    [BUGGY]  numericalVariance  =  calculateStandardVariance(numberOfSuccesses);  [BUGGY]    numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	280	280	1	replace	numericalVariance  =  calculateStandardVariance(numberOfSuccesses);	  numericalVariance    =    calculateStandardVariance();    	non-compiled	[CE]  cannot  find  symbol	574	None
1593	[BUG]  [BUGGY]  numericalVariance  =  calculateStandardVariance(numberOfSuccesses  -  1);  [CE]  cannot  find  symbol  [CONTEXT]    public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {    [BUGGY]  numericalVariance  =  calculateStandardVariance(numberOfSuccesses  -  1);  [BUGGY]    numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	280	280	1	replace	numericalVariance  =  calculateStandardVariance(numberOfSuccesses  -  1);	  numericalVariance    =    calculateStandardVariance();    	non-compiled	[CE]  cannot  find  symbol	574	None
1594	[BUG]  [BUGGY]  numericalVariance  =  calculateStandardVariance(numberOfSuccesses,  false);  [CE]  cannot  find  symbol  [CONTEXT]    public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {    [BUGGY]  numericalVariance  =  calculateStandardVariance(numberOfSuccesses,  false);  [BUGGY]    numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	280	280	1	replace	numericalVariance  =  calculateStandardVariance(numberOfSuccesses,  false);	  numericalVariance    =    calculateStandardVariance();    	non-compiled	[CE]  cannot  find  symbol	574	None
1624	[BUG]  [BUGGY]  return  FastMath.max(0,  getNumberOfSuccesses()  +  getVarianceSize()  -  getPopulationSize());  [CE]  cannot  find  symbol  [CONTEXT]    public  int  getSupportLowerBound()  {    [BUGGY]  return  FastMath.max(0,  getNumberOfSuccesses()  +  getVarianceSize()  -  getPopulationSize());  [BUGGY]    getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  }  [CLASS]  HypergeometricDistribution  [METHOD]  getSupportLowerBound  [RETURN_TYPE]  int  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	308	309	1	replace	return  FastMath.max(0,  getNumberOfSuccesses()  +  getVarianceSize()  -  getPopulationSize());	  return    FastMath.max(0,    getNumberOfSuccesses()    +    getSampleSize()    -    getPopulationSize());    	non-compiled	[CE]  cannot  find  symbol	3	None
1654	[BUG]  [BUGGY]  numericalVariance  =  Math.abs(numberOfSuccesses  /  2  -  1);  [CE]  illegal  start  of  type  [CONTEXT]    public  double  getNumericalVariance()  {    [BUGGY]  numericalVariance  =  Math.abs(numberOfSuccesses  /  2  -  1);  [BUGGY]    if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	279	279	1	replace	numericalVariance  =  Math.abs(numberOfSuccesses  /  2  -  1);	      double    numericalVariance    =    getNumberOfSuccesses()    *(numberOfSuccesses    -    1);    	non-compiled	[CE]  illegal  start  of  type	6	None
1682	[BUG]  [BUGGY]  final  double  k  =  getNumberOfDay().doubleValue;  [CE]  cannot  find  symbol  [CONTEXT]    public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {    [BUGGY]  final  double  k  =  getNumberOfDay().doubleValue;  [BUGGY]    numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	280	280	1	replace	final  double  k  =  getNumberOfDay().doubleValue;	      if(!numericalVarianceIsCalculated)    {    if(!numericalVarianceIsCalculated)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  cannot  find  symbol	44	None
1684	[BUG]  [BUGGY]  final  double  k  =  getNumberOfDay()  +  1;  [CE]  cannot  find  symbol  [CONTEXT]    public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {    [BUGGY]  final  double  k  =  getNumberOfDay()  +  1;  [BUGGY]    numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	280	280	1	replace	final  double  k  =  getNumberOfDay()  +  1;	      if(!numericalVarianceIsCalculated)    {    if(!numericalVarianceIsCalculated)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  cannot  find  symbol	44	None
1712	[BUG]  [BUGGY]  double  numericalVariance  =  Math.max(getNumberOfSuccesses(),  2);  [CE]  illegal  start  of  type  [CONTEXT]    public  double  getNumericalVariance()  {    [BUGGY]  double  numericalVariance  =  Math.max(getNumberOfSuccesses(),  2);  [BUGGY]    if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	279	279	1	replace	double  numericalVariance  =  Math.max(getNumberOfSuccesses(),  2);	      double    numericalVariance    =    Math.max(getNumberOfSuccesses(),    numberOfSuccesses);    	non-compiled	[CE]  illegal  start  of  type	543	None
1713	[BUG]  [BUGGY]  double  numericalVariance  =  Math.max(getNumberOfSuccesses(),  populationSize);  [CE]  illegal  start  of  type  [CONTEXT]    public  double  getNumericalVariance()  {    [BUGGY]  double  numericalVariance  =  Math.max(getNumberOfSuccesses(),  populationSize);  [BUGGY]    if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	279	279	1	replace	double  numericalVariance  =  Math.max(getNumberOfSuccesses(),  populationSize);	      double    numericalVariance    =    Math.max(getNumberOfSuccesses(),    numberOfSuccesses);    	non-compiled	[CE]  illegal  start  of  type	543	None
1773	[BUG]  [BUGGY]  getNumberOfSuccesses()  +  getReturnNumberOfSuccesses();  [CE]  not  a  statement  [CONTEXT]    public  int  getSupportLowerBound()  {    [BUGGY]  getNumberOfSuccesses()  +  getReturnNumberOfSuccesses();  [BUGGY]    return  FastMath.max(0,        getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  }  [CLASS]  HypergeometricDistribution  [METHOD]  getSupportLowerBound  [RETURN_TYPE]  int  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	308	309	1	replace	getNumberOfSuccesses()  +  getReturnNumberOfSuccesses();	      getNumberOfSuccesses()    +    getPopulationSize();    	non-compiled	[CE]  not  a  statement	272	None
1832	[BUG]  [BUGGY]  getNumberOfSuccesses()  *(double)getNumberOfSuccesses();  [CE]  not  a  statement  [CONTEXT]    public  double  getNumericalMean()  {    [BUGGY]  getNumberOfSuccesses()  *(double)getNumberOfSuccesses();  [BUGGY]    return  (double)  (getSampleSize()  *  getNumberOfSuccesses())  /  (double)  getPopulationSize();  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalMean  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	268	268	1	replace	getNumberOfSuccesses()  *(double)getNumberOfSuccesses();	      getNumberOfSuccesses();    	non-compiled	[CE]  not  a  statement	422	None
1833	[BUG]  [BUGGY]  getNumberOfSuccesses()  /(double)getNumberOfSuccesses();  [CE]  not  a  statement  [CONTEXT]    public  double  getNumericalMean()  {    [BUGGY]  getNumberOfSuccesses()  /(double)getNumberOfSuccesses();  [BUGGY]    return  (double)  (getSampleSize()  *  getNumberOfSuccesses())  /  (double)  getPopulationSize();  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalMean  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	268	268	1	replace	getNumberOfSuccesses()  /(double)getNumberOfSuccesses();	      getNumberOfSuccesses();    	non-compiled	[CE]  not  a  statement	422	None
1865	[BUG]  [BUGGY]  [FE]  AssertionError  testMath1021  [CONTEXT]    public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {    [BUGGY]      numericalVariance  =  Math.max(0,  numberOfSuccesses  /  2);  [BUGGY]    numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	280	280	1	add	        numericalVariance  =  Math.max(0,  numberOfSuccesses  /  2);	  	compilable	  [FE]  AssertionError  testMath1021	35	1
1866	[BUG]  [BUGGY]      numericalVariance  =  Math.max(0,  numberOfSuccesses  /  2);  [FE]  AssertionError  testMath1021  [CONTEXT]    public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {    [BUGGY]      numericalVariance  =  Math.max(0,  numberOfSuccesses  /  2);  [BUGGY]    numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	280	280	1	replace	        numericalVariance  =  Math.max(0,  numberOfSuccesses  /  2);	  	compilable	  [FE]  AssertionError  testMath1021	35	1
1893	[BUG]  [BUGGY]  double  numberOfSuccesses  =  getPopulationSize()  /(double)numberOfSuccesses  *  getSampleSize();  [CE]  variable  numberOfSuccesses  might  not  have  been  initialized  [CONTEXT]    public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }    [BUGGY]  double  numberOfSuccesses  =  getPopulationSize()  /(double)numberOfSuccesses  *  getSampleSize();  [BUGGY]    return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	283	283	1	replace	double  numberOfSuccesses  =  getPopulationSize()  /(double)numberOfSuccesses  *  getSampleSize();	      if(!numericalVarianceIsCalculated)    {    if(!numericalVarianceIsCalculated)    {    numericalVariance    =    calculateNumberOfSuccesses();    if(!numericalVarianceIsCalculated)    {    numericalVariance    =    	non-compiled	[CE]  variable  numberOfSuccesses  might  not  have  been  initialized	104	None
1894	[BUG]  [BUGGY]  double  numberOfSuccesses  =  getPopulationSize()  /(double)NumberOfSuccesses  *  getSampleSize();  [CE]  cannot  find  symbol  NumberOfSuccesses  [CONTEXT]    public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }    [BUGGY]  double  numberOfSuccesses  =  getPopulationSize()  /(double)NumberOfSuccesses  *  getSampleSize();  [BUGGY]    return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	283	283	1	replace	double  numberOfSuccesses  =  getPopulationSize()  /(double)NumberOfSuccesses  *  getSampleSize();	      if(!numericalVarianceIsCalculated)    {    if(!numericalVarianceIsCalculated)    {    numericalVariance    =    calculateNumberOfSuccesses();    if(!numericalVarianceIsCalculated)    {    numericalVariance    =    	non-compiled	[CE]  cannot  find  symbol  NumberOfSuccesses	104	None
1922	[BUG]  [BUGGY]  if(getNumberOfSuccesses  >  0)  {  if(getNumberOfSuccesses  >  0)  {  return(double)getNumberOfSuccesses();  }  [CE]  illegal  start  of  expression  [CONTEXT]    public  double  getNumericalMean()  {    [BUGGY]  if(getNumberOfSuccesses  >  0)  {  if(getNumberOfSuccesses  >  0)  {  return(double)getNumberOfSuccesses();  }  [BUGGY]    return  (double)  (getSampleSize()  *  getNumberOfSuccesses())  /  (double)  getPopulationSize();  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalMean  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	268	268	1	replace	if(getNumberOfSuccesses  >  0)  {  if(getNumberOfSuccesses  >  0)  {  return(double)getNumberOfSuccesses();  }	      if(getNumberOfSuccesses()    >    0)    {    if(getNumberOfSuccesses()    >    0)    {    return(double)getNumberOfSuccesses();    }    	non-compiled	[CE]  illegal  start  of  expression	71	None
1923	[BUG]  [BUGGY]  if(getNumberOfSuccesses  >  1)  {  if(getNumberOfSuccesses  >  0)  {  return(double)getNumberOfSuccesses();  }  [CE]  illegal  start  of  expression  [CONTEXT]    public  double  getNumericalMean()  {    [BUGGY]  if(getNumberOfSuccesses  >  1)  {  if(getNumberOfSuccesses  >  0)  {  return(double)getNumberOfSuccesses();  }  [BUGGY]    return  (double)  (getSampleSize()  *  getNumberOfSuccesses())  /  (double)  getPopulationSize();  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalMean  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	268	268	1	replace	if(getNumberOfSuccesses  >  1)  {  if(getNumberOfSuccesses  >  0)  {  return(double)getNumberOfSuccesses();  }	      if(getNumberOfSuccesses()    >    0)    {    if(getNumberOfSuccesses()    >    0)    {    return(double)getNumberOfSuccesses();    }    	non-compiled	[CE]  illegal  start  of  expression	71	None
1924	[BUG]  [BUGGY]  if(getNumberOfSuccesses  >  0)  }  if(getNumberOfSuccesses  >  0)  {  return(double)getNumberOfSuccesses();  }  [CE]  illegal  start  of  expression  [CONTEXT]    public  double  getNumericalMean()  {    [BUGGY]  if(getNumberOfSuccesses  >  0)  }  if(getNumberOfSuccesses  >  0)  {  return(double)getNumberOfSuccesses();  }  [BUGGY]    return  (double)  (getSampleSize()  *  getNumberOfSuccesses())  /  (double)  getPopulationSize();  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalMean  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	268	268	1	replace	if(getNumberOfSuccesses  >  0)  }  if(getNumberOfSuccesses  >  0)  {  return(double)getNumberOfSuccesses();  }	      if(getNumberOfSuccesses()    >    0)    {    if(getNumberOfSuccesses()    >    0)    {    return(double)getNumberOfSuccesses();    }    	non-compiled	[CE]  illegal  start  of  expression	71	None
1952	[BUG]  [BUGGY]      numericalVariance  =  Math.abs(numberOfSuccesses);  numericalVariance  =  Math.sqrt(getGeometricVariance());  [CE]  cannot  find  symbol  [CONTEXT]    public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();    [BUGGY]      numericalVariance  =  Math.abs(numberOfSuccesses);  numericalVariance  =  Math.sqrt(getGeometricVariance());  [BUGGY]    numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	281	281	1	replace	        numericalVariance    =    Math.abs(numberOfSuccesses);    numericalVariance  =  Math.sqrt(getGeometricVariance());	  	non-compiled	[CE]  cannot  find  symbol	325	None
1953	[BUG]  [BUGGY]      numericalVariance  =  Math.abs(numberOfSuccesses);  if(numberOfSuccesses  >  0)  {  if(numericalVarianceIsCalculated)  {  numericalVariance  =  Math.max(numberOfSuccesses,  populationSize);  }  [CE]  illegal  start  of  expression  [CONTEXT]    public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();    [BUGGY]      numericalVariance  =  Math.abs(numberOfSuccesses);  if(numberOfSuccesses  >  0)  {  if(numericalVarianceIsCalculated)  {  numericalVariance  =  Math.max(numberOfSuccesses,  populationSize);  }  [BUGGY]    numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	281	281	1	replace	        numericalVariance    =    Math.abs(numberOfSuccesses);    if(numberOfSuccesses  >  0)  {  if(numericalVarianceIsCalculated)  {  numericalVariance  =  Math.max(numberOfSuccesses,  populationSize);  }	  	non-compiled	[CE]  illegal  start  of  expression	325	None
1954	[BUG]  [BUGGY]      numericalVariance  =  Math.abs(numberOfSuccesses);  if(numberOfSuccesses  >  0)  {  if(numericalVarianceIsCalculated)  {  numericalVariance  =  Math.min(numberOfSuccesses  /  sampleSize);  }  [CE]  illegal  start  of  expression  [CONTEXT]    public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();    [BUGGY]      numericalVariance  =  Math.abs(numberOfSuccesses);  if(numberOfSuccesses  >  0)  {  if(numericalVarianceIsCalculated)  {  numericalVariance  =  Math.min(numberOfSuccesses  /  sampleSize);  }  [BUGGY]    numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	281	281	1	replace	        numericalVariance    =    Math.abs(numberOfSuccesses);    if(numberOfSuccesses  >  0)  {  if(numericalVarianceIsCalculated)  {  numericalVariance  =  Math.min(numberOfSuccesses  /  sampleSize);  }	  	non-compiled	[CE]  illegal  start  of  expression	325	None
1955	[BUG]  [BUGGY]      numericalVariance  =  Math.abs(numberOfSuccesses);  if(numberOfSuccesses  >  0)  {  if(numericalVarianceIsCalculated)  {  numericalVariance  =  Math.max(numberOfSuccesses,  false);  }  [CE]  illegal  start  of  expression  [CONTEXT]    public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();    [BUGGY]      numericalVariance  =  Math.abs(numberOfSuccesses);  if(numberOfSuccesses  >  0)  {  if(numericalVarianceIsCalculated)  {  numericalVariance  =  Math.max(numberOfSuccesses,  false);  }  [BUGGY]    numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	281	281	1	replace	        numericalVariance    =    Math.abs(numberOfSuccesses);    if(numberOfSuccesses  >  0)  {  if(numericalVarianceIsCalculated)  {  numericalVariance  =  Math.max(numberOfSuccesses,  false);  }	  	non-compiled	[CE]  illegal  start  of  expression	325	None
1982	[BUG]  [BUGGY]  numericalVariance  =  calculateSampleSize();  [CE]  cannot  find  symbol  [CONTEXT]    public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();    [BUGGY]  numericalVariance  =  calculateSampleSize();  [BUGGY]    numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	281	281	1	replace	numericalVariance  =  calculateSampleSize();	      numericalVariance    =    getNumberOfSuccesses();    	non-compiled	[CE]  cannot  find  symbol	322	None
1984	[BUG]  [BUGGY]  [FE]  AssertionError  testMoments  [CONTEXT]    public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();    [BUGGY]  numericalVariance  =  getNumberOfSuccesses()  +  1;  [BUGGY]    numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	281	281	1	add	numericalVariance  =  getNumberOfSuccesses()  +  1;	      numericalVariance    =    getNumberOfSuccesses();    	compilable	  [FE]  AssertionError  testMoments	322	1
1985	[BUG]  [BUGGY]  numericalVariance  =  getNumberOfSuccesses()  +  1;  [FE]  AssertionError  testMoments  [CONTEXT]    public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();    [BUGGY]  numericalVariance  =  getNumberOfSuccesses()  +  1;  [BUGGY]    numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	281	281	1	replace	numericalVariance  =  getNumberOfSuccesses()  +  1;	      numericalVariance    =    getNumberOfSuccesses();    	compilable	  [FE]  AssertionError  testMoments	322	1
2012	[BUG]  [BUGGY]  final  double  N  =  getNumberOfStubs();  [CE]  variable  N  is  already  defined  in  method  calculateNumericalVariance()  [CONTEXT]    protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();    [BUGGY]  final  double  N  =  getNumberOfStubs();  [BUGGY]    final  double  m  =  getNumberOfSuccesses();  final  double  n  =  getSampleSize();  return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	293	293	1	replace	final  double  N  =  getNumberOfStubs();	      final    double    N    =    getSize();    	non-compiled	[CE]  variable  N  is  already  defined  in  method  calculateNumericalVariance()	145	None
2013	[BUG]  [BUGGY]  final  double  N  =  getNumberOfAscii();  [CE]  variable  N  is  already  defined  in  method  calculateNumericalVariance()  [CONTEXT]    protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();    [BUGGY]  final  double  N  =  getNumberOfAscii();  [BUGGY]    final  double  m  =  getNumberOfSuccesses();  final  double  n  =  getSampleSize();  return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	293	293	1	replace	final  double  N  =  getNumberOfAscii();	      final    double    N    =    getSize();    	non-compiled	[CE]  variable  N  is  already  defined  in  method  calculateNumericalVariance()	145	None
2014	[BUG]  [BUGGY]  final  double  N  =  getNumberOfSuperclasses();  [CE]  variable  N  is  already  defined  in  method  calculateNumericalVariance()  [CONTEXT]    protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();    [BUGGY]  final  double  N  =  getNumberOfSuperclasses();  [BUGGY]    final  double  m  =  getNumberOfSuccesses();  final  double  n  =  getSampleSize();  return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	293	293	1	replace	final  double  N  =  getNumberOfSuperclasses();	      final    double    N    =    getSize();    	non-compiled	[CE]  variable  N  is  already  defined  in  method  calculateNumericalVariance()	145	None
2073	[BUG]  [BUGGY]  final  double  N  =  getNumberOfSuccesses()  -  1;  [CE]  variable  N  is  already  defined  in  method  calculateNumericalVariance()  [CONTEXT]    protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();  final  double  m  =  getNumberOfSuccesses();  final  double  n  =  getSampleSize();    [BUGGY]  final  double  N  =  getNumberOfSuccesses()  -  1;  [BUGGY]    return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	295	295	1	replace	final  double  N  =  getNumberOfSuccesses()  -  1;	      final    double    N    =    getNumberOfSuccesses();    	non-compiled	[CE]  variable  N  is  already  defined  in  method  calculateNumericalVariance()	93	None
2074	[BUG]  [BUGGY]  final  double  N  =  getNumberOfSuccesses()  -  2;  [CE]  variable  N  is  already  defined  in  method  calculateNumericalVariance()  [CONTEXT]    protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();  final  double  m  =  getNumberOfSuccesses();  final  double  n  =  getSampleSize();    [BUGGY]  final  double  N  =  getNumberOfSuccesses()  -  2;  [BUGGY]    return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	295	295	1	replace	final  double  N  =  getNumberOfSuccesses()  -  2;	      final    double    N    =    getNumberOfSuccesses();    	non-compiled	[CE]  variable  N  is  already  defined  in  method  calculateNumericalVariance()	93	None
2102	[BUG]  [BUGGY]  [FE]  AssertionError  testMoments  [CONTEXT]    protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();  final  double  m  =  getNumberOfSuccesses();    [BUGGY]  final  double  n  =  getNumberOfSuccesses()  *  getSampleSize();  [BUGGY]    return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	294	294	1	add	final  double  n  =  getNumberOfSuccesses()  *  getSampleSize();	  final    double    n    =    getSampleSize()    *    getNumberOfSuccesses();    	compilable	  [FE]  AssertionError  testMoments	264	1
2103	[BUG]  [BUGGY]  final  double  n  =  getNumberOfSuccesses()  *  getSampleSize();  [FE]  AssertionError  testMoments  [CONTEXT]    protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();  final  double  m  =  getNumberOfSuccesses();    [BUGGY]  final  double  n  =  getNumberOfSuccesses()  *  getSampleSize();  [BUGGY]    return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	294	294	1	replace	final  double  n  =  getNumberOfSuccesses()  *  getSampleSize();	  final    double    n    =    getSampleSize()    *    getNumberOfSuccesses();    	compilable	  [FE]  AssertionError  testMoments	264	1
2103	[BUG]  [BUGGY]  final  double  n  =  getSampleSize()  *  getNumberOfSuccesses(m);  [CE]  method  getNumberOfSuccesses  in  class  HypergeometricDistribution  cannot  be  applied  to  given  types;  [CONTEXT]    protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();  final  double  m  =  getNumberOfSuccesses();    [BUGGY]  final  double  n  =  getSampleSize()  *  getNumberOfSuccesses(m);  [BUGGY]    return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	294	294	1	replace	final  double  n  =  getSampleSize()  *  getNumberOfSuccesses(m);	  final    double    n    =    getSampleSize()    *    getNumberOfSuccesses();    	non-compiled	[CE]  method  getNumberOfSuccesses  in  class  HypergeometricDistribution  cannot  be  applied  to  given  types;	264	None
2134	[BUG]  [BUGGY]  else  if(numberOfSuccesses  >  0)  {  if(!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumberOfSuccesses();  }  [CE]  'else'  without  'if'  [CONTEXT]    public  double  getNumericalVariance()  {    [BUGGY]  else  if(numberOfSuccesses  >  0)  {  if(!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumberOfSuccesses();  }  [BUGGY]    if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	279	279	1	replace	else  if(numberOfSuccesses  >  0)  {  if(!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumberOfSuccesses();  }	      if(numberOfSuccesses    >    0)    {    if(!numericalVarianceIsCalculated)    {    numericalVariance    =    calculateNumberOfSuccesses();    }    	non-compiled	[CE]  'else'  without  'if'	11	None
2162	[BUG]  [BUGGY]  final  double  N  =  getNumberOfSuccesses()  -  1;  [CE]  variable  N  is  already  defined  in  method  calculateNumericalVariance()  [CONTEXT]    protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();  final  double  m  =  getNumberOfSuccesses();    [BUGGY]  final  double  N  =  getNumberOfSuccesses()  -  1;  [BUGGY]    final  double  n  =  getSampleSize();  return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	294	294	1	replace	final  double  N  =  getNumberOfSuccesses()  -  1;	      final    double    N    =    getNumberOfSuccesses();    	non-compiled	[CE]  variable  N  is  already  defined  in  method  calculateNumericalVariance()	53	None
2163	[BUG]  [BUGGY]  final  double  N  =  getNumberOfSuccesses()  -  2;  [CE]  variable  N  is  already  defined  in  method  calculateNumericalVariance()  [CONTEXT]    protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();  final  double  m  =  getNumberOfSuccesses();    [BUGGY]  final  double  N  =  getNumberOfSuccesses()  -  2;  [BUGGY]    final  double  n  =  getSampleSize();  return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	294	294	1	replace	final  double  N  =  getNumberOfSuccesses()  -  2;	      final    double    N    =    getNumberOfSuccesses();    	non-compiled	[CE]  variable  N  is  already  defined  in  method  calculateNumericalVariance()	53	None
2164	[BUG]  [BUGGY]  final  double  numberOfSuccesses  =  getNumberOfSuccesses();  [CE]  cannot  find  symbol  n  [CONTEXT]    protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();  final  double  m  =  getNumberOfSuccesses();    [BUGGY]  final  double  numberOfSuccesses  =  getNumberOfSuccesses();  [BUGGY]    final  double  n  =  getSampleSize();  return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	294	294	1	replace	final  double  numberOfSuccesses  =  getNumberOfSuccesses();	      final    double    N    =    getNumberOfSuccesses();    	non-compiled	[CE]  cannot  find  symbol  n	53	None
2192	[BUG]  [BUGGY]  if(!numericalVarianceIsCalculated)  {  if(!numericalVarianceIsCalculated)  {  return  0;  [Delete]  [CE]  illegal  start  of  expression  [CONTEXT]    public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {    [BUGGY]  if(!numericalVarianceIsCalculated)  {  if(!numericalVarianceIsCalculated)  {  return  0;  [Delete]  [BUGGY]    numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	280	280	1	replace	if(!numericalVarianceIsCalculated)  {  if(!numericalVarianceIsCalculated)  {  return  0;  [Delete]	      if(!numericalVarianceIsCalculated)    {    if(!numericalVarianceIsCalculated)    {    return    0;    }    	non-compiled	[CE]  illegal  start  of  expression	41	None
2194	[BUG]  [BUGGY]  if(!negativeVarianceIsCalculated)  {  if(!numericalVarianceIsCalculated)  {  return  0;  }  [CE]  illegal  start  of  expression  [CONTEXT]    public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {    [BUGGY]  if(!negativeVarianceIsCalculated)  {  if(!numericalVarianceIsCalculated)  {  return  0;  }  [BUGGY]    numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	280	280	1	replace	if(!negativeVarianceIsCalculated)  {  if(!numericalVarianceIsCalculated)  {  return  0;  }	      if(!numericalVarianceIsCalculated)    {    if(!numericalVarianceIsCalculated)    {    return    0;    }    	non-compiled	[CE]  illegal  start  of  expression	41	None
2252	[BUG]  [BUGGY]      int  k  =  getNumberOfSuccesses();  int  k  =  getNumberOfSuccesses()  /  m;  [CE]  variable  k  is  already  defined  in  method  getNumericalMean()  [CONTEXT]    public  double  getNumericalMean()  {    [BUGGY]      int  k  =  getNumberOfSuccesses();  int  k  =  getNumberOfSuccesses()  /  m;  [BUGGY]    return  (double)  (getSampleSize()  *  getNumberOfSuccesses())  /  (double)  getPopulationSize();  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalMean  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	268	268	1	replace	        int    k    =    getNumberOfSuccesses();    int  k  =  getNumberOfSuccesses()  /  m;	  	non-compiled	[CE]  variable  k  is  already  defined  in  method  getNumericalMean()	362	None
2255	[BUG]  [BUGGY]      int  k  =  getNumberOfSuccesses();  int  k  =  getNumberOfSuccesses()  +  0.5;  [CE]  variable  k  is  already  defined  in  method  getNumericalMean()  [CONTEXT]    public  double  getNumericalMean()  {    [BUGGY]      int  k  =  getNumberOfSuccesses();  int  k  =  getNumberOfSuccesses()  +  0.5;  [BUGGY]    return  (double)  (getSampleSize()  *  getNumberOfSuccesses())  /  (double)  getPopulationSize();  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalMean  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	268	268	1	replace	        int    k    =    getNumberOfSuccesses();    int  k  =  getNumberOfSuccesses()  +  0.5;	  	non-compiled	[CE]  variable  k  is  already  defined  in  method  getNumericalMean()	362	None
2282	[BUG]  [BUGGY]  numericalVariance  =  calculateNumberOfSuccesses()  /(numberOfSuccesses  *  getPopulationSize());  [CE]  cannot  find  symbol  [CONTEXT]    public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {    [BUGGY]  numericalVariance  =  calculateNumberOfSuccesses()  /(numberOfSuccesses  *  getPopulationSize());  [BUGGY]    numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	280	280	1	replace	numericalVariance  =  calculateNumberOfSuccesses()  /(numberOfSuccesses  *  getPopulationSize());	  numericalVariance    =    calculateNumberOfSuccesses();    	non-compiled	[CE]  cannot  find  symbol	32	None
2311	[BUG]  [BUGGY]  final  double  m  =  getNumberOfSuccesses()  *  getNumberOfSuccessesImpl();  [CE]  cannot  find  symbol  [CONTEXT]    protected  double  calculateNumericalVariance()  {    [BUGGY]  final  double  m  =  getNumberOfSuccesses()  *  getNumberOfSuccessesImpl();  [BUGGY]    final  double  N  =  getPopulationSize();  final  double  m  =  getNumberOfSuccesses();  final  double  n  =  getSampleSize();  return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	292	292	1	replace	final  double  m  =  getNumberOfSuccesses()  *  getNumberOfSuccessesImpl();	      final    double    N    =    getNumberOfSuccesses().doubleValue();    	non-compiled	[CE]  cannot  find  symbol	164	None
2312	[BUG]  [BUGGY]  final  double  m  =  getNumberOfSuccesses()  *  getNumberOfSuccessesEquals();  [CE]  cannot  find  symbol  [CONTEXT]    protected  double  calculateNumericalVariance()  {    [BUGGY]  final  double  m  =  getNumberOfSuccesses()  *  getNumberOfSuccessesEquals();  [BUGGY]    final  double  N  =  getPopulationSize();  final  double  m  =  getNumberOfSuccesses();  final  double  n  =  getSampleSize();  return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	292	292	1	replace	final  double  m  =  getNumberOfSuccesses()  *  getNumberOfSuccessesEquals();	      final    double    N    =    getNumberOfSuccesses().doubleValue();    	non-compiled	[CE]  cannot  find  symbol	164	None
2313	[BUG]  [BUGGY]  final  double  m  =  getNumberOfSuccesses()  *  getNumberOfSuccessesRelativeToNumber();  [CE]  cannot  find  symbol  [CONTEXT]    protected  double  calculateNumericalVariance()  {    [BUGGY]  final  double  m  =  getNumberOfSuccesses()  *  getNumberOfSuccessesRelativeToNumber();  [BUGGY]    final  double  N  =  getPopulationSize();  final  double  m  =  getNumberOfSuccesses();  final  double  n  =  getSampleSize();  return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	292	292	1	replace	final  double  m  =  getNumberOfSuccesses()  *  getNumberOfSuccessesRelativeToNumber();	      final    double    N    =    getNumberOfSuccesses().doubleValue();    	non-compiled	[CE]  cannot  find  symbol	164	None
2314	[BUG]  [BUGGY]  final  double  m  =  getNumberOfSuccesses()  *  getNumberOfEquals();  [CE]  cannot  find  symbol  [CONTEXT]    protected  double  calculateNumericalVariance()  {    [BUGGY]  final  double  m  =  getNumberOfSuccesses()  *  getNumberOfEquals();  [BUGGY]    final  double  N  =  getPopulationSize();  final  double  m  =  getNumberOfSuccesses();  final  double  n  =  getSampleSize();  return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	292	292	1	replace	final  double  m  =  getNumberOfSuccesses()  *  getNumberOfEquals();	      final    double    N    =    getNumberOfSuccesses().doubleValue();    	non-compiled	[CE]  cannot  find  symbol	164	None
2374	[BUG]  [BUGGY]  final  double  N  =  getVolumeOfSuccesses();  [CE]  variable  N  is  already  defined  in  method  calculateNumericalVariance()  [CONTEXT]    protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();  final  double  m  =  getNumberOfSuccesses();    [BUGGY]  final  double  N  =  getVolumeOfSuccesses();  [BUGGY]    final  double  n  =  getSampleSize();  return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	294	294	1	replace	final  double  N  =  getVolumeOfSuccesses();	      final    double    N    =    getPopulationSize();    	non-compiled	[CE]  variable  N  is  already  defined  in  method  calculateNumericalVariance()	51	None
2401	[BUG]  [BUGGY]  if(numericalVariance  <  0)  {  if(numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumberOfSuccesses();  }  [CE]  illegal  start  of  expression  [CONTEXT]    public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();    [BUGGY]  if(numericalVariance  <  0)  {  if(numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumberOfSuccesses();  }  [BUGGY]    }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	281	281	1	replace	if(numericalVariance  <  0)  {  if(numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumberOfSuccesses();  }	  numericalVarianceIsCalculated    =(numericalVariance    ==    0)?    numericalVarianceIsCalculated    :    false;    	non-compiled	[CE]  illegal  start  of  expression	394	None
2402	[BUG]  [BUGGY]  if(numericalVariance  <  0)  {  if(!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumberOfSuccesses();  }  [CE]  illegal  start  of  expression  [CONTEXT]    public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();    [BUGGY]  if(numericalVariance  <  0)  {  if(!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumberOfSuccesses();  }  [BUGGY]    }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	281	281	1	replace	if(numericalVariance  <  0)  {  if(!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumberOfSuccesses();  }	  numericalVarianceIsCalculated    =(numericalVariance    ==    0)?    numericalVarianceIsCalculated    :    false;    	non-compiled	[CE]  illegal  start  of  expression	394	None
2404	[BUG]  [BUGGY]  if(!numericalVarianceIsCalculated)  {  if(!numericalVarianceIsCalculated)  {  numericalVariance  =  Math.max(0,  numericalVariance);  }  [CE]  illegal  start  of  expression  [CONTEXT]    public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();    [BUGGY]  if(!numericalVarianceIsCalculated)  {  if(!numericalVarianceIsCalculated)  {  numericalVariance  =  Math.max(0,  numericalVariance);  }  [BUGGY]    }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	281	281	1	replace	if(!numericalVarianceIsCalculated)  {  if(!numericalVarianceIsCalculated)  {  numericalVariance  =  Math.max(0,  numericalVariance);  }	  numericalVarianceIsCalculated    =(numericalVariance    ==    0)?    numericalVarianceIsCalculated    :    false;    	non-compiled	[CE]  illegal  start  of  expression	394	None
2432	[BUG]  [BUGGY]      final  int  k  =  getNumberOfSuccesses();  final  int  dx  =  getDx();  [CE]  cannot  find  symbol  [CONTEXT]    protected  double  calculateNumericalVariance()  {    [BUGGY]      final  int  k  =  getNumberOfSuccesses();  final  int  dx  =  getDx();  [BUGGY]    final  double  N  =  getPopulationSize();  final  double  m  =  getNumberOfSuccesses();  final  double  n  =  getSampleSize();  return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	292	292	1	replace	        final    int    k    =    getNumberOfSuccesses();    final  int  dx  =  getDx();	  	non-compiled	[CE]  cannot  find  symbol	212	None
2433	[BUG]  [BUGGY]      final  int  k  =  getNumberOfSuccesses();  final  int  dx  =  getDayOfMonth();  [CE]  cannot  find  symbol  [CONTEXT]    protected  double  calculateNumericalVariance()  {    [BUGGY]      final  int  k  =  getNumberOfSuccesses();  final  int  dx  =  getDayOfMonth();  [BUGGY]    final  double  N  =  getPopulationSize();  final  double  m  =  getNumberOfSuccesses();  final  double  n  =  getSampleSize();  return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	292	292	1	replace	        final    int    k    =    getNumberOfSuccesses();    final  int  dx  =  getDayOfMonth();	  	non-compiled	[CE]  cannot  find  symbol	212	None
2434	[BUG]  [BUGGY]      final  int  k  =  getNumberOfSuccesses();  final  int  dx  =  getDimensionOfSuccesses();  [CE]  cannot  find  symbol  [CONTEXT]    protected  double  calculateNumericalVariance()  {    [BUGGY]      final  int  k  =  getNumberOfSuccesses();  final  int  dx  =  getDimensionOfSuccesses();  [BUGGY]    final  double  N  =  getPopulationSize();  final  double  m  =  getNumberOfSuccesses();  final  double  n  =  getSampleSize();  return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	292	292	1	replace	        final    int    k    =    getNumberOfSuccesses();    final  int  dx  =  getDimensionOfSuccesses();	  	non-compiled	[CE]  cannot  find  symbol	212	None
2435	[BUG]  [BUGGY]      final  int  k  =  getNumberOfSuccesses();  final  int  dx  =  getDecimalVariance();  [CE]  cannot  find  symbol  [CONTEXT]    protected  double  calculateNumericalVariance()  {    [BUGGY]      final  int  k  =  getNumberOfSuccesses();  final  int  dx  =  getDecimalVariance();  [BUGGY]    final  double  N  =  getPopulationSize();  final  double  m  =  getNumberOfSuccesses();  final  double  n  =  getSampleSize();  return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	292	292	1	replace	        final    int    k    =    getNumberOfSuccesses();    final  int  dx  =  getDecimalVariance();	  	non-compiled	[CE]  cannot  find  symbol	212	None
2462	[BUG]  [BUGGY]  if(numberOfSuccesses  >  0)  {  numberOfSuccesses  =  getPopulationSize();  if(numberOfSuccesses  <  0)  {  return  null;  }  [CE]  illegal  start  of  expression  [CONTEXT]    public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }    [BUGGY]  if(numberOfSuccesses  >  0)  {  numberOfSuccesses  =  getPopulationSize();  if(numberOfSuccesses  <  0)  {  return  null;  }  [BUGGY]    return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	283	283	1	replace	if(numberOfSuccesses  >  0)  {  numberOfSuccesses  =  getPopulationSize();  if(numberOfSuccesses  <  0)  {  return  null;  }	      if(!numericalVarianceIsCalculated)    {    if(!numericalVarianceIsCalculated)    {    numericalVariance    =    calculateNumberOfSuccesses();    }    	non-compiled	[CE]  illegal  start  of  expression	101	None
2464	[BUG]  [BUGGY]  double  n  =  getPopulationSize();  [CE]  missing  return  statement  [CONTEXT]    public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }    [BUGGY]  double  n  =  getPopulationSize();  [BUGGY]    return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	283	283	1	replace	double  n  =  getPopulationSize();	      if(!numericalVarianceIsCalculated)    {    if(!numericalVarianceIsCalculated)    {    numericalVariance    =    calculateNumberOfSuccesses();    }    	non-compiled	[CE]  missing  return  statement	101	None
2493	[BUG]  [BUGGY]      getNumberOfSuccesses();  getNumberOfSuccesses()  +  getPopulationSize();  [CE]  not  a  statement  [CONTEXT]    public  int  getSupportLowerBound()  {    [BUGGY]      getNumberOfSuccesses();  getNumberOfSuccesses()  +  getPopulationSize();  [BUGGY]    return  FastMath.max(0,        getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  }  [CLASS]  HypergeometricDistribution  [METHOD]  getSupportLowerBound  [RETURN_TYPE]  int  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	308	309	1	replace	        getNumberOfSuccesses();    getNumberOfSuccesses()  +  getPopulationSize();	  	non-compiled	[CE]  not  a  statement	275	None
2494	[BUG]  [BUGGY]  [FE]  AssertionError  testMath1021  [CONTEXT]    public  int  getSupportLowerBound()  {    [BUGGY]      getNumberOfSuccesses();  int  numberOfSuccesses  =  getPopulationSize();  [BUGGY]    return  FastMath.max(0,        getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  }  [CLASS]  HypergeometricDistribution  [METHOD]  getSupportLowerBound  [RETURN_TYPE]  int  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	308	309	1	add	        getNumberOfSuccesses();    int  numberOfSuccesses  =  getPopulationSize();	  	compilable	  [FE]  AssertionError  testMath1021	275	1
2495	[BUG]  [BUGGY]      getNumberOfSuccesses();  int  numberOfSuccesses  =  getPopulationSize();  [FE]  AssertionError  testMath1021  [CONTEXT]    public  int  getSupportLowerBound()  {    [BUGGY]      getNumberOfSuccesses();  int  numberOfSuccesses  =  getPopulationSize();  [BUGGY]    return  FastMath.max(0,        getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  }  [CLASS]  HypergeometricDistribution  [METHOD]  getSupportLowerBound  [RETURN_TYPE]  int  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	308	309	1	replace	        getNumberOfSuccesses();    int  numberOfSuccesses  =  getPopulationSize();	  	compilable	  [FE]  AssertionError  testMath1021	275	1
2522	[BUG]  [BUGGY]  numericalVariance  =  getNumberOfSuccesses()  *(populationSize  -  1));  [CE]  ';'  expected  [CONTEXT]    public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();    [BUGGY]  numericalVariance  =  getNumberOfSuccesses()  *(populationSize  -  1));  [BUGGY]    numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	281	281	1	replace	numericalVariance  =  getNumberOfSuccesses()  *(populationSize  -  1));	      numericalVariance    =    getNumberOfSuccesses();    	non-compiled	[CE]  ';'  expected	322	None
2524	[BUG]  [BUGGY]  numericalVariance  =  getNumberOfSuccesses()  *(numberOfSuccesses  -  1)/  2);  [CE]  ';'  expected  [CONTEXT]    public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();    [BUGGY]  numericalVariance  =  getNumberOfSuccesses()  *(numberOfSuccesses  -  1)/  2);  [BUGGY]    numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	281	281	1	replace	numericalVariance  =  getNumberOfSuccesses()  *(numberOfSuccesses  -  1)/  2);	      numericalVariance    =    getNumberOfSuccesses();    	non-compiled	[CE]  ';'  expected	322	None
2581	[BUG]  [BUGGY]      int  populationSize  =  getPopulationSize();  if(numberOfSuccesses  >  0)  {  if(numericalVarianceIsCalculated)  {  [CE]  illegal  start  of  expression  [CONTEXT]    public  int  getSupportLowerBound()  {    [BUGGY]      int  populationSize  =  getPopulationSize();  if(numberOfSuccesses  >  0)  {  if(numericalVarianceIsCalculated)  {  [BUGGY]    return  FastMath.max(0,        getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  }  [CLASS]  HypergeometricDistribution  [METHOD]  getSupportLowerBound  [RETURN_TYPE]  int  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	308	309	1	replace	        int    populationSize    =    getPopulationSize();    if(numberOfSuccesses  >  0)  {  if(numericalVarianceIsCalculated)  {	  	non-compiled	[CE]  illegal  start  of  expression	63	None
2582	[BUG]  [BUGGY]      int  populationSize  =  getPopulationSize();  if(numberOfSuccesses  >  0)  {  if(numericalVarianceIsCalculated  ||  numberOfSuccesses  >  0)  {  return  getNumberOfSuccesses();  }  [CE]  illegal  start  of  expression  [CONTEXT]    public  int  getSupportLowerBound()  {    [BUGGY]      int  populationSize  =  getPopulationSize();  if(numberOfSuccesses  >  0)  {  if(numericalVarianceIsCalculated  ||  numberOfSuccesses  >  0)  {  return  getNumberOfSuccesses();  }  [BUGGY]    return  FastMath.max(0,        getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  }  [CLASS]  HypergeometricDistribution  [METHOD]  getSupportLowerBound  [RETURN_TYPE]  int  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	308	309	1	replace	        int    populationSize    =    getPopulationSize();    if(numberOfSuccesses  >  0)  {  if(numericalVarianceIsCalculated  ||  numberOfSuccesses  >  0)  {  return  getNumberOfSuccesses();  }	  	non-compiled	[CE]  illegal  start  of  expression	63	None
2584	[BUG]  [BUGGY]      int  populationSize  =  getPopulationSize();  if(numericalVariance  ==  0)  {  throw  new  IllegalArgumentException( "Numeric  value  =  Math.abs(numberOfSuccesses)>  numberOfSuccesses);  }  [CE]  unclosed  string  literal  [CONTEXT]    public  int  getSupportLowerBound()  {    [BUGGY]      int  populationSize  =  getPopulationSize();  if(numericalVariance  ==  0)  {  throw  new  IllegalArgumentException( "Numeric  value  =  Math.abs(numberOfSuccesses)>  numberOfSuccesses);  }  [BUGGY]    return  FastMath.max(0,        getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  }  [CLASS]  HypergeometricDistribution  [METHOD]  getSupportLowerBound  [RETURN_TYPE]  int  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	308	309	1	replace	        int    populationSize    =    getPopulationSize();    if(numericalVariance  ==  0)  {  throw  new  IllegalArgumentException( "Numeric  value  =  Math.abs(numberOfSuccesses)>  numberOfSuccesses);  }	  	non-compiled	[CE]  unclosed  string  literal	63	None
2612	[BUG]  [BUGGY]  final  double  k  =  getNumberOfSuccesses()  *  getNumberOfSuccesses();  [CE]  cannot  find  symbol  N  [CONTEXT]    protected  double  calculateNumericalVariance()  {    [BUGGY]  final  double  k  =  getNumberOfSuccesses()  *  getNumberOfSuccesses();  [BUGGY]    final  double  N  =  getPopulationSize();  final  double  m  =  getNumberOfSuccesses();  final  double  n  =  getSampleSize();  return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	292	292	1	replace	final  double  k  =  getNumberOfSuccesses()  *  getNumberOfSuccesses();	      double    N    =    getNumberOfSuccesses();    	non-compiled	[CE]  cannot  find  symbol  N	163	None
2613	[BUG]  [BUGGY]  final  double  k  =  getNumberOfDays()  *  getNumberOfSuccesses();  [CE]  cannot  find  symbol  [CONTEXT]    protected  double  calculateNumericalVariance()  {    [BUGGY]  final  double  k  =  getNumberOfDays()  *  getNumberOfSuccesses();  [BUGGY]    final  double  N  =  getPopulationSize();  final  double  m  =  getNumberOfSuccesses();  final  double  n  =  getSampleSize();  return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	292	292	1	replace	final  double  k  =  getNumberOfDays()  *  getNumberOfSuccesses();	      double    N    =    getNumberOfSuccesses();    	non-compiled	[CE]  cannot  find  symbol	163	None
2614	[BUG]  [BUGGY]  final  double  k  =  getNumberOfDays()  *  getKind();  [CE]  cannot  find  symbol  [CONTEXT]    protected  double  calculateNumericalVariance()  {    [BUGGY]  final  double  k  =  getNumberOfDays()  *  getKind();  [BUGGY]    final  double  N  =  getPopulationSize();  final  double  m  =  getNumberOfSuccesses();  final  double  n  =  getSampleSize();  return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	292	292	1	replace	final  double  k  =  getNumberOfDays()  *  getKind();	      double    N    =    getNumberOfSuccesses();    	non-compiled	[CE]  cannot  find  symbol	163	None
2641	[BUG]  [BUGGY]  if(getNumberOfSuccesses  >  0)  {  if(getPopulationSize()  >  0)  {  return  FastMath.max(0,  getNumberOfSuccesses()  -  getPopulationSize());  }  [CE]  illegal  start  of  expression  [CONTEXT]    public  int  getSupportLowerBound()  {    [BUGGY]  if(getNumberOfSuccesses  >  0)  {  if(getPopulationSize()  >  0)  {  return  FastMath.max(0,  getNumberOfSuccesses()  -  getPopulationSize());  }  [BUGGY]    return  FastMath.max(0,        getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  }  [CLASS]  HypergeometricDistribution  [METHOD]  getSupportLowerBound  [RETURN_TYPE]  int  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	308	309	1	replace	if(getNumberOfSuccesses  >  0)  {  if(getPopulationSize()  >  0)  {  return  FastMath.max(0,  getNumberOfSuccesses()  -  getPopulationSize());  }	      int    populationSize    =    getPopulationSize();    	non-compiled	[CE]  illegal  start  of  expression	64	None
2643	[BUG]  [BUGGY]  if(getPopulationSize()  >  0)  {  if(getPopulationSize()  >  0)  {  return  FastMath.max(0,  getNumberOfSuccesses()  -  getPopulationSize());  }  [CE]  illegal  start  of  expression  [CONTEXT]    public  int  getSupportLowerBound()  {    [BUGGY]  if(getPopulationSize()  >  0)  {  if(getPopulationSize()  >  0)  {  return  FastMath.max(0,  getNumberOfSuccesses()  -  getPopulationSize());  }  [BUGGY]    return  FastMath.max(0,        getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  }  [CLASS]  HypergeometricDistribution  [METHOD]  getSupportLowerBound  [RETURN_TYPE]  int  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	308	309	1	replace	if(getPopulationSize()  >  0)  {  if(getPopulationSize()  >  0)  {  return  FastMath.max(0,  getNumberOfSuccesses()  -  getPopulationSize());  }	      int    populationSize    =    getPopulationSize();    	non-compiled	[CE]  illegal  start  of  expression	64	None
2644	[BUG]  [BUGGY]  if(getNumberOfSuccesses  >  0)  }  if(getPopulationSize()  >  0)  {  return  FastMath.max(0,  getNumberOfSuccesses()  -  getPopulationSize());  }  [CE]  illegal  start  of  expression  [CONTEXT]    public  int  getSupportLowerBound()  {    [BUGGY]  if(getNumberOfSuccesses  >  0)  }  if(getPopulationSize()  >  0)  {  return  FastMath.max(0,  getNumberOfSuccesses()  -  getPopulationSize());  }  [BUGGY]    return  FastMath.max(0,        getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  }  [CLASS]  HypergeometricDistribution  [METHOD]  getSupportLowerBound  [RETURN_TYPE]  int  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	308	309	1	replace	if(getNumberOfSuccesses  >  0)  }  if(getPopulationSize()  >  0)  {  return  FastMath.max(0,  getNumberOfSuccesses()  -  getPopulationSize());  }	      int    populationSize    =    getPopulationSize();    	non-compiled	[CE]  illegal  start  of  expression	64	None
2672	[BUG]  [BUGGY]  [FE]  AssertionError  testMoments  [CONTEXT]    public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();    [BUGGY]  numericalVariance  =  Math.abs(numberOfSuccesses  /  sampleSize);  [BUGGY]    numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	281	281	1	add	numericalVariance  =  Math.abs(numberOfSuccesses  /  sampleSize);	      numericalVariance    =    Math.abs(numberOfSuccesses);    	compilable	  [FE]  AssertionError  testMoments	326	1
2673	[BUG]  [BUGGY]  numericalVariance  =  Math.abs(numberOfSuccesses  /  sampleSize);  [FE]  AssertionError  testMoments  [CONTEXT]    public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();    [BUGGY]  numericalVariance  =  Math.abs(numberOfSuccesses  /  sampleSize);  [BUGGY]    numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	281	281	1	replace	numericalVariance  =  Math.abs(numberOfSuccesses  /  sampleSize);	      numericalVariance    =    Math.abs(numberOfSuccesses);    	compilable	  [FE]  AssertionError  testMoments	326	1
2703	[BUG]  [BUGGY]  setNumberOfSuccesses(m);  [CE]  cannot  find  symbol  m  [CONTEXT]    public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {    [BUGGY]  setNumberOfSuccesses(m);  [BUGGY]    numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	280	280	1	replace	setNumberOfSuccesses(m);	      setNumberOfSuccesses(n);    	non-compiled	[CE]  cannot  find  symbol  m	242	None
2704	[BUG]  [BUGGY]  setNumberOfSuccesses(PopulationSize);  [CE]  cannot  find  symbol  PopulationSize  [CONTEXT]    public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {    [BUGGY]  setNumberOfSuccesses(PopulationSize);  [BUGGY]    numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	280	280	1	replace	setNumberOfSuccesses(PopulationSize);	      setNumberOfSuccesses(n);    	non-compiled	[CE]  cannot  find  symbol  PopulationSize	242	None
2734	[BUG]  [BUGGY]  if(numericalVarianceIsCalculated)  {  if(!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumberOfSuccesses();  if(!numericalVarianceIsCalculated)  {  numericalVariance  =  [CE]  illegal  start  of  expression  [CONTEXT]    public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }    [BUGGY]  if(numericalVarianceIsCalculated)  {  if(!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumberOfSuccesses();  if(!numericalVarianceIsCalculated)  {  numericalVariance  =  [BUGGY]    return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	283	283	1	replace	if(numericalVarianceIsCalculated)  {  if(!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumberOfSuccesses();  if(!numericalVarianceIsCalculated)  {  numericalVariance  =	      if(!numericalVarianceIsCalculated)    {    if(!numericalVarianceIsCalculated)    {    numericalVariance    =    calculateNumberOfSuccesses();    if(!numericalVarianceIsCalculated)    {    numericalVariance    =    	non-compiled	[CE]  illegal  start  of  expression	104	None
2763	[BUG]  [BUGGY]      int  populationSize  =  getPopulationSize();  int  populationSize  =  getPopulationSize();  [CE]  variable  populationSize  is  already  defined  in  method  getSupportLowerBound()  [CONTEXT]    public  int  getSupportLowerBound()  {    [BUGGY]      int  populationSize  =  getPopulationSize();  int  populationSize  =  getPopulationSize();  [BUGGY]    return  FastMath.max(0,        getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  }  [CLASS]  HypergeometricDistribution  [METHOD]  getSupportLowerBound  [RETURN_TYPE]  int  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	308	309	1	replace	        int    populationSize    =    getPopulationSize();    int  populationSize  =  getPopulationSize();	  	non-compiled	[CE]  variable  populationSize  is  already  defined  in  method  getSupportLowerBound()	63	None
2791	[BUG]  [BUGGY]  if(numberOfSuccesses  >  0)  {  if(!numericalVarianceIsCalculated  &&  Math.abs(numberOfSuccesses)>  0)  {  return  calculateNumberOfSuccesses();  }  [CE]  illegal  start  of  expression  [CONTEXT]    public  int  getSupportLowerBound()  {    [BUGGY]  if(numberOfSuccesses  >  0)  {  if(!numericalVarianceIsCalculated  &&  Math.abs(numberOfSuccesses)>  0)  {  return  calculateNumberOfSuccesses();  }  [BUGGY]    return  FastMath.max(0,        getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  }  [CLASS]  HypergeometricDistribution  [METHOD]  getSupportLowerBound  [RETURN_TYPE]  int  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	308	309	1	replace	if(numberOfSuccesses  >  0)  {  if(!numericalVarianceIsCalculated  &&  Math.abs(numberOfSuccesses)>  0)  {  return  calculateNumberOfSuccesses();  }	      int    populationSize    =    getPopulationSize();    	non-compiled	[CE]  illegal  start  of  expression	64	None
2792	[BUG]  [BUGGY]  if(numberOfSuccesses  >  0)  {  if(!numericalVarianceIsCalculated  &&  Math.abs(numberOfSuccesses)>  0)  {  return  getNumberOfSuccesses();  }  [CE]  illegal  start  of  expression  [CONTEXT]    public  int  getSupportLowerBound()  {    [BUGGY]  if(numberOfSuccesses  >  0)  {  if(!numericalVarianceIsCalculated  &&  Math.abs(numberOfSuccesses)>  0)  {  return  getNumberOfSuccesses();  }  [BUGGY]    return  FastMath.max(0,        getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  }  [CLASS]  HypergeometricDistribution  [METHOD]  getSupportLowerBound  [RETURN_TYPE]  int  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	308	309	1	replace	if(numberOfSuccesses  >  0)  {  if(!numericalVarianceIsCalculated  &&  Math.abs(numberOfSuccesses)>  0)  {  return  getNumberOfSuccesses();  }	      int    populationSize    =    getPopulationSize();    	non-compiled	[CE]  illegal  start  of  expression	64	None
2793	[BUG]  [BUGGY]  if(numberOfSuccesses  >  0)  {  if(!numericalVarianceIsCalculated  &&  Math.abs(numberOfSuccesses)>  0)  {  throw  new  IllegalArgumentException( "Math.abs(numberOf  [CE]  unclosed  string  literal  [CONTEXT]    public  int  getSupportLowerBound()  {    [BUGGY]  if(numberOfSuccesses  >  0)  {  if(!numericalVarianceIsCalculated  &&  Math.abs(numberOfSuccesses)>  0)  {  throw  new  IllegalArgumentException( "Math.abs(numberOf  [BUGGY]    return  FastMath.max(0,        getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  }  [CLASS]  HypergeometricDistribution  [METHOD]  getSupportLowerBound  [RETURN_TYPE]  int  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	308	309	1	replace	if(numberOfSuccesses  >  0)  {  if(!numericalVarianceIsCalculated  &&  Math.abs(numberOfSuccesses)>  0)  {  throw  new  IllegalArgumentException( "Math.abs(numberOf	      int    populationSize    =    getPopulationSize();    	non-compiled	[CE]  unclosed  string  literal	64	None
2794	[BUG]  [BUGGY]  if(numberOfSuccesses  >  0)  {  if(!numericalVarianceIsCalculated  &&  Math.abs(numberOfSuccesses)>  0)  {  return  -1;  }  [CE]  illegal  start  of  expression  [CONTEXT]    public  int  getSupportLowerBound()  {    [BUGGY]  if(numberOfSuccesses  >  0)  {  if(!numericalVarianceIsCalculated  &&  Math.abs(numberOfSuccesses)>  0)  {  return  -1;  }  [BUGGY]    return  FastMath.max(0,        getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  }  [CLASS]  HypergeometricDistribution  [METHOD]  getSupportLowerBound  [RETURN_TYPE]  int  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	308	309	1	replace	if(numberOfSuccesses  >  0)  {  if(!numericalVarianceIsCalculated  &&  Math.abs(numberOfSuccesses)>  0)  {  return  -1;  }	      int    populationSize    =    getPopulationSize();    	non-compiled	[CE]  illegal  start  of  expression	64	None
2854	[BUG]  [BUGGY]  if(numberOfSuccessesIsCalculated)  {  [CE]  cannot  find  symbol  numberOfSuccessesIsCalculated  [CONTEXT]    public  double  getNumericalVariance()  {    [BUGGY]  if(numberOfSuccessesIsCalculated)  {  [BUGGY]    numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	279	279	1	replace	if(numberOfSuccessesIsCalculated)  {	  if(numbericalVarianceIsCalculated)    {    	non-compiled	[CE]  cannot  find  symbol  numberOfSuccessesIsCalculated	203	None
2883	[BUG]  [BUGGY]  final  double  n  =  getPopulationSize().NumberOfSuccesses;  [CE]  int  cannot  be  dereferenced  [CONTEXT]    protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();  final  double  m  =  getNumberOfSuccesses();    [BUGGY]  final  double  n  =  getPopulationSize().NumberOfSuccesses;  [BUGGY]    final  double  n  =  getSampleSize();  return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	294	294	1	replace	final  double  n  =  getPopulationSize().NumberOfSuccesses;	      final    double    n    =    getPopulationSize();    	non-compiled	[CE]  int  cannot  be  dereferenced	52	None
2884	[BUG]  [BUGGY]  final  double  n  =  getVolumeOfSuccesses();  [CE]  cannot  find  symbol  [CONTEXT]    protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();  final  double  m  =  getNumberOfSuccesses();    [BUGGY]  final  double  n  =  getVolumeOfSuccesses();  [BUGGY]    final  double  n  =  getSampleSize();  return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	294	294	1	replace	final  double  n  =  getVolumeOfSuccesses();	      final    double    n    =    getPopulationSize();    	non-compiled	[CE]  cannot  find  symbol	52	None
2911	[BUG]  [BUGGY]  [FE]  AssertionError  testMoments  [CONTEXT]    public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();    [BUGGY]  numericalVarianceIsCalculated  =  false;  numericalVariance  =  Math.abs(numberOfSuccesses);  [BUGGY]    }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	281	281	1	add	numericalVarianceIsCalculated    =    false;    numericalVariance  =  Math.abs(numberOfSuccesses);	  	compilable	  [FE]  AssertionError  testMoments	121	1
2912	[BUG]  [BUGGY]  numericalVarianceIsCalculated  =  false;  numericalVariance  =  Math.abs(numberOfSuccesses);  [FE]  AssertionError  testMoments  [CONTEXT]    public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();    [BUGGY]  numericalVarianceIsCalculated  =  false;  numericalVariance  =  Math.abs(numberOfSuccesses);  [BUGGY]    }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	281	281	1	replace	numericalVarianceIsCalculated    =    false;    numericalVariance  =  Math.abs(numberOfSuccesses);	  	compilable	  [FE]  AssertionError  testMoments	121	1
2912	[BUG]  [BUGGY]  [FE]  AssertionError  testMoments  [CONTEXT]    public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();    [BUGGY]  numericalVarianceIsCalculated  =  false;  numericalVariance  =  Math.max(numberOfSuccesses,  numberOfSuccesses);  [BUGGY]    }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	281	281	1	add	numericalVarianceIsCalculated    =    false;    numericalVariance  =  Math.max(numberOfSuccesses,  numberOfSuccesses);	  	compilable	  [FE]  AssertionError  testMoments	121	1
2913	[BUG]  [BUGGY]  numericalVarianceIsCalculated  =  false;  numericalVariance  =  Math.max(numberOfSuccesses,  numberOfSuccesses);  [FE]  AssertionError  testMoments  [CONTEXT]    public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();    [BUGGY]  numericalVarianceIsCalculated  =  false;  numericalVariance  =  Math.max(numberOfSuccesses,  numberOfSuccesses);  [BUGGY]    }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	281	281	1	replace	numericalVarianceIsCalculated    =    false;    numericalVariance  =  Math.max(numberOfSuccesses,  numberOfSuccesses);	  	compilable	  [FE]  AssertionError  testMoments	121	1
2913	[BUG]  [BUGGY]  [FE]  AssertionError  testMoments  [CONTEXT]    public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();    [BUGGY]  numericalVarianceIsCalculated  =  false;  numericalVariance  =  Math.max(numberOfSuccesses,  getNumberOfSuccesses());  [BUGGY]    }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	281	281	1	add	numericalVarianceIsCalculated    =    false;    numericalVariance  =  Math.max(numberOfSuccesses,  getNumberOfSuccesses());	  	compilable	  [FE]  AssertionError  testMoments	121	1
2914	[BUG]  [BUGGY]  numericalVarianceIsCalculated  =  false;  numericalVariance  =  Math.max(numberOfSuccesses,  getNumberOfSuccesses());  [FE]  AssertionError  testMoments  [CONTEXT]    public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();    [BUGGY]  numericalVarianceIsCalculated  =  false;  numericalVariance  =  Math.max(numberOfSuccesses,  getNumberOfSuccesses());  [BUGGY]    }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	281	281	1	replace	numericalVarianceIsCalculated    =    false;    numericalVariance  =  Math.max(numberOfSuccesses,  getNumberOfSuccesses());	  	compilable	  [FE]  AssertionError  testMoments	121	1
2914	[BUG]  [BUGGY]  [FE]  AssertionError  testMoments  [CONTEXT]    public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();    [BUGGY]  numericalVarianceIsCalculated  =  false;  numericalVariance  =  Math.max(numberOfSuccesses,  getPopulationSize());  [BUGGY]    }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	281	281	1	add	numericalVarianceIsCalculated    =    false;    numericalVariance  =  Math.max(numberOfSuccesses,  getPopulationSize());	  	compilable	  [FE]  AssertionError  testMoments	121	1
2915	[BUG]  [BUGGY]  numericalVarianceIsCalculated  =  false;  numericalVariance  =  Math.max(numberOfSuccesses,  getPopulationSize());  [FE]  AssertionError  testMoments  [CONTEXT]    public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();    [BUGGY]  numericalVarianceIsCalculated  =  false;  numericalVariance  =  Math.max(numberOfSuccesses,  getPopulationSize());  [BUGGY]    }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	281	281	1	replace	numericalVarianceIsCalculated    =    false;    numericalVariance  =  Math.max(numberOfSuccesses,  getPopulationSize());	  	compilable	  [FE]  AssertionError  testMoments	121	1
2915	[BUG]  [BUGGY]  numericalVarianceIsCalculated  =  false;  numericalVariance  =  Math.max(numberOfSuccesses,  m);  [CE]  cannot  find  symbol  m  [CONTEXT]    public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();    [BUGGY]  numericalVarianceIsCalculated  =  false;  numericalVariance  =  Math.max(numberOfSuccesses,  m);  [BUGGY]    }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	281	281	1	replace	numericalVarianceIsCalculated    =    false;    numericalVariance  =  Math.max(numberOfSuccesses,  m);	  	non-compiled	[CE]  cannot  find  symbol  m	121	None
2942	[BUG]  [BUGGY]  if(numericalVarianceIsCalculated)  {  if(numberOfSuccesses  >  0)  {  if(numberVarianceIsCalculated)  {  [CE]  illegal  start  of  expression  [CONTEXT]    public  double  getNumericalVariance()  {    [BUGGY]  if(numericalVarianceIsCalculated)  {  if(numberOfSuccesses  >  0)  {  if(numberVarianceIsCalculated)  {  [BUGGY]    numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	279	279	1	replace	if(numericalVarianceIsCalculated)    {    if(numberOfSuccesses  >  0)  {  if(numberVarianceIsCalculated)  {	  	non-compiled	[CE]  illegal  start  of  expression	22	None
2943	[BUG]  [BUGGY]  if(numericalVarianceIsCalculated)  {  if(numberOfSuccesses  >  0)  {  if(numericalVarianceIsCalculated)  {  return  0;  }  [CE]  illegal  start  of  expression  [CONTEXT]    public  double  getNumericalVariance()  {    [BUGGY]  if(numericalVarianceIsCalculated)  {  if(numberOfSuccesses  >  0)  {  if(numericalVarianceIsCalculated)  {  return  0;  }  [BUGGY]    numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	279	279	1	replace	if(numericalVarianceIsCalculated)    {    if(numberOfSuccesses  >  0)  {  if(numericalVarianceIsCalculated)  {  return  0;  }	  	non-compiled	[CE]  illegal  start  of  expression	22	None
2944	[BUG]  [BUGGY]  if(numericalVarianceIsCalculated)  {  if(numericalVariance  ==  0)  {  throw  new  IllegalArgumentException( "Numeric  value  =  Math.max(numberOfSuccesses,  numberOfSuccesses));  }  [CE]  unclosed  string  literal  [CONTEXT]    public  double  getNumericalVariance()  {    [BUGGY]  if(numericalVarianceIsCalculated)  {  if(numericalVariance  ==  0)  {  throw  new  IllegalArgumentException( "Numeric  value  =  Math.max(numberOfSuccesses,  numberOfSuccesses));  }  [BUGGY]    numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	279	279	1	replace	if(numericalVarianceIsCalculated)    {    if(numericalVariance  ==  0)  {  throw  new  IllegalArgumentException( "Numeric  value  =  Math.max(numberOfSuccesses,  numberOfSuccesses));  }	  	non-compiled	[CE]  unclosed  string  literal	22	None
2945	[BUG]  [BUGGY]  if(numericalVarianceIsCalculated)  {  if(numberOfSuccesses  >  0)  {  if(numberVarianceIsCalculated)  {  return  0;  }  [CE]  illegal  start  of  expression  [CONTEXT]    public  double  getNumericalVariance()  {    [BUGGY]  if(numericalVarianceIsCalculated)  {  if(numberOfSuccesses  >  0)  {  if(numberVarianceIsCalculated)  {  return  0;  }  [BUGGY]    numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	279	279	1	replace	if(numericalVarianceIsCalculated)    {    if(numberOfSuccesses  >  0)  {  if(numberVarianceIsCalculated)  {  return  0;  }	  	non-compiled	[CE]  illegal  start  of  expression	22	None
3003	[BUG]  [BUGGY]  final  int  k  =  getNumberOfSuccesses()  *  2;  [CE]  cannot  find  symbol  N  [CONTEXT]    protected  double  calculateNumericalVariance()  {    [BUGGY]  final  int  k  =  getNumberOfSuccesses()  *  2;  [BUGGY]    final  double  N  =  getPopulationSize();  final  double  m  =  getNumberOfSuccesses();  final  double  n  =  getSampleSize();  return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	292	292	1	replace	final  int  k  =  getNumberOfSuccesses()  *  2;	      final    int    k    =    getNumberOfSuccesses();    	non-compiled	[CE]  cannot  find  symbol  N	213	None
3033	[BUG]  [BUGGY]  final  double  m  =  getNumberOfSuccesses()  *  2;  final  double  dx  =  getNumberOfSuccesses()  *  2;  [CE]  variable  m  is  already  defined  in  method  calculateNumericalVariance()  [CONTEXT]    protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();    [BUGGY]  final  double  m  =  getNumberOfSuccesses()  *  2;  final  double  dx  =  getNumberOfSuccesses()  *  2;  [BUGGY]    final  double  n  =  getSampleSize();  return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	293	293	1	replace	final    double    m    =    getNumberOfSuccesses()    *    2;    final  double  dx  =  getNumberOfSuccesses()  *  2;	  	non-compiled	[CE]  variable  m  is  already  defined  in  method  calculateNumericalVariance()	183	None
3063	[BUG]  [BUGGY]  if(numbericalVariance  ==  null)  {  if(!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumberOfSuccesses();  }  [CE]  cannot  find  symbol  numbericalVariance  [CONTEXT]    public  double  getNumericalVariance()  {    [BUGGY]  if(numbericalVariance  ==  null)  {  if(!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumberOfSuccesses();  }  [BUGGY]    if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	279	279	1	replace	if(numbericalVariance  ==  null)  {  if(!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumberOfSuccesses();  }	      if(numericalVariance!=    null)    {    if(!numericalVarianceIsCalculated)    {    numericalVariance    =    calculateNumberOfSuccesses();    }    	non-compiled	[CE]  cannot  find  symbol  numbericalVariance	14	None
3094	[BUG]  [BUGGY]  final  int  dx  =  getDx();  [CE]  cannot  find  symbol  [CONTEXT]    public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {    [BUGGY]  final  int  dx  =  getDx();  [BUGGY]    numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	280	280	1	replace	final  int  dx  =  getDx();	      if(!numericalVarianceIsCalculated)    {    if(!numericalVarianceIsCalculated)    {    return    0;    }    	non-compiled	[CE]  cannot  find  symbol	41	None
3152	[BUG]  [BUGGY]  n  =  getNumberOfSuccesses()  +  Math.max(n,  M);  [CE]  cannot  find  symbol  n  [CONTEXT]    public  double  getNumericalMean()  {    [BUGGY]  n  =  getNumberOfSuccesses()  +  Math.max(n,  M);  [BUGGY]    return  (double)  (getSampleSize()  *  getNumberOfSuccesses())  /  (double)  getPopulationSize();  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalMean  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	268	268	1	replace	n  =  getNumberOfSuccesses()  +  Math.max(n,  M);	      int    k    =    getNumberOfSuccesses();    	non-compiled	[CE]  cannot  find  symbol  n	363	None
3214	[BUG]  [BUGGY]  final  double  n  =  getSampleSize(n,  M);  [CE]  cannot  find  symbol  M  [CONTEXT]    protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();  final  double  m  =  getNumberOfSuccesses();    [BUGGY]  final  double  n  =  getSampleSize(n,  M);  [BUGGY]    return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	294	294	1	replace	final  double  n  =  getSampleSize(n,  M);	  final    double    n    =    getSampleSize(n);    	non-compiled	[CE]  cannot  find  symbol  M	334	None
3244	[BUG]  [BUGGY]  final  double  N  =  getNumberOfStubs();  [CE]  variable  N  is  already  defined  in  method  calculateNumericalVariance()  [CONTEXT]    protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();  final  double  m  =  getNumberOfSuccesses();    [BUGGY]  final  double  N  =  getNumberOfStubs();  [BUGGY]    final  double  n  =  getSampleSize();  return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	294	294	1	replace	final  double  N  =  getNumberOfStubs();	      final    double    N    =    getSize();    	non-compiled	[CE]  variable  N  is  already  defined  in  method  calculateNumericalVariance()	55	None
3272	[BUG]  [BUGGY]  numericalVariance  =  calculateStandardVariance();  [CE]  illegal  start  of  type  [CONTEXT]    public  double  getNumericalVariance()  {    [BUGGY]  numericalVariance  =  calculateStandardVariance();  [BUGGY]    numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	279	279	1	replace	numericalVariance  =  calculateStandardVariance();	  if(!nativeVarianceIsCalculated)    {    	non-compiled	[CE]  illegal  start  of  type	24	None
3273	[BUG]  [BUGGY]  numericalVariance  =  calculateStdDevVariance(numberOfSuccesses);  [CE]  illegal  start  of  type  [CONTEXT]    public  double  getNumericalVariance()  {    [BUGGY]  numericalVariance  =  calculateStdDevVariance(numberOfSuccesses);  [BUGGY]    numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	279	279	1	replace	numericalVariance  =  calculateStdDevVariance(numberOfSuccesses);	  if(!nativeVarianceIsCalculated)    {    	non-compiled	[CE]  illegal  start  of  type	24	None
3274	[BUG]  [BUGGY]  numericalVariance  =  calculateStdNumericVariance();  [CE]  illegal  start  of  type  [CONTEXT]    public  double  getNumericalVariance()  {    [BUGGY]  numericalVariance  =  calculateStdNumericVariance();  [BUGGY]    numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	279	279	1	replace	numericalVariance  =  calculateStdNumericVariance();	  if(!nativeVarianceIsCalculated)    {    	non-compiled	[CE]  illegal  start  of  type	24	None
3303	[BUG]  [BUGGY]  final  double  m  =  getNumberOfSuccesses(N).doubleValue();  [CE]  method  getNumberOfSuccesses  in  class  HypergeometricDistribution  cannot  be  applied  to  given  types;  [CONTEXT]    protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();    [BUGGY]  final  double  m  =  getNumberOfSuccesses(N).doubleValue();  [BUGGY]    final  double  n  =  getSampleSize();  return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	293	293	1	replace	final  double  m  =  getNumberOfSuccesses(N).doubleValue();	  final    double    m    =    getNumberOfSuccesses()    *    2;    	non-compiled	[CE]  method  getNumberOfSuccesses  in  class  HypergeometricDistribution  cannot  be  applied  to  given  types;	184	None
3304	[BUG]  [BUGGY]  final  Double  m  =  getNumberOfSuccesses().doubleValue();  [CE]  int  cannot  be  dereferenced  [CONTEXT]    protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();    [BUGGY]  final  Double  m  =  getNumberOfSuccesses().doubleValue();  [BUGGY]    final  double  n  =  getSampleSize();  return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	293	293	1	replace	final  Double  m  =  getNumberOfSuccesses().doubleValue();	  final    double    m    =    getNumberOfSuccesses()    *    2;    	non-compiled	[CE]  int  cannot  be  dereferenced	184	None
3335	[BUG]  [BUGGY]  [FE]  AssertionError  testMoments  [CONTEXT]    public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();    [BUGGY]      numericalVariance  =  Math.max(numberOfSuccesses,  numberOfSuccesses);  numericalVariance  =  Math.min(numberOfSuccesses,  numberOfSuccesses  /  2);  [BUGGY]    numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	281	281	1	add	        numericalVariance    =    Math.max(numberOfSuccesses,    numberOfSuccesses);    numericalVariance  =  Math.min(numberOfSuccesses,  numberOfSuccesses  /  2);	  	compilable	  [FE]  AssertionError  testMoments	152	1
3336	[BUG]  [BUGGY]      numericalVariance  =  Math.max(numberOfSuccesses,  numberOfSuccesses);  numericalVariance  =  Math.min(numberOfSuccesses,  numberOfSuccesses  /  2);  [FE]  AssertionError  testMoments  [CONTEXT]    public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();    [BUGGY]      numericalVariance  =  Math.max(numberOfSuccesses,  numberOfSuccesses);  numericalVariance  =  Math.min(numberOfSuccesses,  numberOfSuccesses  /  2);  [BUGGY]    numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	281	281	1	replace	        numericalVariance    =    Math.max(numberOfSuccesses,    numberOfSuccesses);    numericalVariance  =  Math.min(numberOfSuccesses,  numberOfSuccesses  /  2);	  	compilable	  [FE]  AssertionError  testMoments	152	1
3363	[BUG]  [BUGGY]  super.getNumberOfSuccesses(),  populationSize;  [CE]  ';'  expected  [CONTEXT]    public  double  getNumericalVariance()  {    [BUGGY]  super.getNumberOfSuccesses(),  populationSize;  [BUGGY]    if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	279	279	1	replace	super.getNumberOfSuccesses(),  populationSize;	      super.getNumberOfSuccesses();    	non-compiled	[CE]  ';'  expected	541	None
3364	[BUG]  [BUGGY]  super.getNumberOfSuccesses()  +  populationSize;  [CE]  not  a  statement  [CONTEXT]    public  double  getNumericalVariance()  {    [BUGGY]  super.getNumberOfSuccesses()  +  populationSize;  [BUGGY]    if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	279	279	1	replace	super.getNumberOfSuccesses()  +  populationSize;	      super.getNumberOfSuccesses();    	non-compiled	[CE]  not  a  statement	541	None
3393	[BUG]  [BUGGY]  final  double  n  =  getSampleNumberOfSuccesses();  [CE]  variable  n  is  already  defined  in  method  calculateNumericalVariance()  [CONTEXT]    protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();  final  double  m  =  getNumberOfSuccesses();  final  double  n  =  getSampleSize();    [BUGGY]  final  double  n  =  getSampleNumberOfSuccesses();  [BUGGY]    return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	295	295	1	replace	final  double  n  =  getSampleNumberOfSuccesses();	      final    double    n    =    getSampleSize();    	non-compiled	[CE]  variable  n  is  already  defined  in  method  calculateNumericalVariance()	94	None
3424	[BUG]  [BUGGY]  final  double  N  =  getVolumeOfSuccesses()  /  2.0;  [CE]  cannot  find  symbol  [CONTEXT]    protected  double  calculateNumericalVariance()  {    [BUGGY]  final  double  N  =  getVolumeOfSuccesses()  /  2.0;  [BUGGY]    final  double  m  =  getNumberOfSuccesses();  final  double  n  =  getSampleSize();  return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	292	292	1	replace	final  double  N  =  getVolumeOfSuccesses()  /  2.0;	  final    double    N    =    getPopulationSize()    /    2.0;    	non-compiled	[CE]  cannot  find  symbol	195	None
3453	[BUG]  [BUGGY]  double  numericalVariance  =  getPopulationSize();  [CE]  missing  return  statement  [CONTEXT]    public  int  getSupportLowerBound()  {    [BUGGY]  double  numericalVariance  =  getPopulationSize();  [BUGGY]    getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  }  [CLASS]  HypergeometricDistribution  [METHOD]  getSupportLowerBound  [RETURN_TYPE]  int  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	308	309	1	replace	double  numericalVariance  =  getPopulationSize();	  return    FastMath.max(0,    getNumberOfSuccesses()    +    getSampleSize()    -    getPopulationSize());    	non-compiled	[CE]  missing  return  statement	3	None
3454	[BUG]  [BUGGY]  double  numericalVariance  =  getPopulationSize()  *  2.0;  [CE]  missing  return  statement  [CONTEXT]    public  int  getSupportLowerBound()  {    [BUGGY]  double  numericalVariance  =  getPopulationSize()  *  2.0;  [BUGGY]    getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  }  [CLASS]  HypergeometricDistribution  [METHOD]  getSupportLowerBound  [RETURN_TYPE]  int  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	308	309	1	replace	double  numericalVariance  =  getPopulationSize()  *  2.0;	  return    FastMath.max(0,    getNumberOfSuccesses()    +    getSampleSize()    -    getPopulationSize());    	non-compiled	[CE]  missing  return  statement	3	None
3482	[BUG]  [BUGGY]  final  double  m  =  getNumberOfSuccesses()  *  2;  final  int  k  =  getNumberOfSuccesses();  [CE]  variable  m  is  already  defined  in  method  calculateNumericalVariance()  [CONTEXT]    protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();    [BUGGY]  final  double  m  =  getNumberOfSuccesses()  *  2;  final  int  k  =  getNumberOfSuccesses();  [BUGGY]    final  double  n  =  getSampleSize();  return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	293	293	1	replace	final    double    m    =    getNumberOfSuccesses()    *    2;    final  int  k  =  getNumberOfSuccesses();	  	non-compiled	[CE]  variable  m  is  already  defined  in  method  calculateNumericalVariance()	183	None
3484	[BUG]  [BUGGY]  final  double  m  =  getNumberOfSuccesses()  *  2;  final  double  k  =  getKnowN();  [CE]  cannot  find  symbol  [CONTEXT]    protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();    [BUGGY]  final  double  m  =  getNumberOfSuccesses()  *  2;  final  double  k  =  getKnowN();  [BUGGY]    final  double  n  =  getSampleSize();  return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	293	293	1	replace	final    double    m    =    getNumberOfSuccesses()    *    2;    final  double  k  =  getKnowN();	  	non-compiled	[CE]  cannot  find  symbol	183	None
3512	[BUG]  [BUGGY]  [FE]  AssertionError  testMath1021  [CONTEXT]    public  double  getNumericalVariance()  {    [BUGGY]      double  numericalVariance  =  getNumberOfSuccesses();  double  numberOfSuccesses  =  getPopulationSize();  [BUGGY]    if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	279	279	1	add	        double    numericalVariance    =    getNumberOfSuccesses();    double  numberOfSuccesses  =  getPopulationSize();	  	compilable	  [FE]  AssertionError  testMath1021	1	1
3513	[BUG]  [BUGGY]      double  numericalVariance  =  getNumberOfSuccesses();  double  numberOfSuccesses  =  getPopulationSize();  [FE]  AssertionError  testMath1021  [CONTEXT]    public  double  getNumericalVariance()  {    [BUGGY]      double  numericalVariance  =  getNumberOfSuccesses();  double  numberOfSuccesses  =  getPopulationSize();  [BUGGY]    if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	279	279	1	replace	        double    numericalVariance    =    getNumberOfSuccesses();    double  numberOfSuccesses  =  getPopulationSize();	  	compilable	  [FE]  AssertionError  testMath1021	1	1
3513	[BUG]  [BUGGY]  [FE]  AssertionError  testMath1021  [CONTEXT]    public  double  getNumericalVariance()  {    [BUGGY]      double  numericalVariance  =  getNumberOfSuccesses();  int  populationSize  =  getPopulationSize();  [BUGGY]    if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	279	279	1	add	        double    numericalVariance    =    getNumberOfSuccesses();    int  populationSize  =  getPopulationSize();	  	compilable	  [FE]  AssertionError  testMath1021	1	1
3514	[BUG]  [BUGGY]      double  numericalVariance  =  getNumberOfSuccesses();  int  populationSize  =  getPopulationSize();  [FE]  AssertionError  testMath1021  [CONTEXT]    public  double  getNumericalVariance()  {    [BUGGY]      double  numericalVariance  =  getNumberOfSuccesses();  int  populationSize  =  getPopulationSize();  [BUGGY]    if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	279	279	1	replace	        double    numericalVariance    =    getNumberOfSuccesses();    int  populationSize  =  getPopulationSize();	  	compilable	  [FE]  AssertionError  testMath1021	1	1
3514	[BUG]  [BUGGY]  [FE]  AssertionError  testMath1021  [CONTEXT]    public  double  getNumericalVariance()  {    [BUGGY]      double  numericalVariance  =  getNumberOfSuccesses();  int  sampleSize  =  getPopulationSize();  [BUGGY]    if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	279	279	1	add	        double    numericalVariance    =    getNumberOfSuccesses();    int  sampleSize  =  getPopulationSize();	  	compilable	  [FE]  AssertionError  testMath1021	1	1
3515	[BUG]  [BUGGY]      double  numericalVariance  =  getNumberOfSuccesses();  int  sampleSize  =  getPopulationSize();  [FE]  AssertionError  testMath1021  [CONTEXT]    public  double  getNumericalVariance()  {    [BUGGY]      double  numericalVariance  =  getNumberOfSuccesses();  int  sampleSize  =  getPopulationSize();  [BUGGY]    if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	279	279	1	replace	        double    numericalVariance    =    getNumberOfSuccesses();    int  sampleSize  =  getPopulationSize();	  	compilable	  [FE]  AssertionError  testMath1021	1	1
3515	[BUG]  [BUGGY]  [FE]  AssertionError  testMath1021  [CONTEXT]    public  double  getNumericalVariance()  {    [BUGGY]      double  numericalVariance  =  getNumberOfSuccesses();  int  sampleSize  =  getSampleSize();  [BUGGY]    if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	279	279	1	add	        double    numericalVariance    =    getNumberOfSuccesses();    int  sampleSize  =  getSampleSize();	  	compilable	  [FE]  AssertionError  testMath1021	1	1
3516	[BUG]  [BUGGY]      double  numericalVariance  =  getNumberOfSuccesses();  int  sampleSize  =  getSampleSize();  [FE]  AssertionError  testMath1021  [CONTEXT]    public  double  getNumericalVariance()  {    [BUGGY]      double  numericalVariance  =  getNumberOfSuccesses();  int  sampleSize  =  getSampleSize();  [BUGGY]    if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	279	279	1	replace	        double    numericalVariance    =    getNumberOfSuccesses();    int  sampleSize  =  getSampleSize();	  	compilable	  [FE]  AssertionError  testMath1021	1	1
3543	[BUG]  [BUGGY]  getNumberOfSuccesses()  *  Math.random()  /(double)getSampleSize()  *  Math.random();  [CE]  not  a  statement  [CONTEXT]    public  double  getNumericalMean()  {    [BUGGY]  getNumberOfSuccesses()  *  Math.random()  /(double)getSampleSize()  *  Math.random();  [BUGGY]    return  (double)  (getSampleSize()  *  getNumberOfSuccesses())  /  (double)  getPopulationSize();  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalMean  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	268	268	1	replace	getNumberOfSuccesses()  *  Math.random()  /(double)getSampleSize()  *  Math.random();	      getNumberOfSuccesses()    *    Math.random();    	non-compiled	[CE]  not  a  statement	425	None
3544	[BUG]  [BUGGY]  getNumberOfSuccesses()  *  Math.random()  /  numberOfSuccesses;  [CE]  not  a  statement  [CONTEXT]    public  double  getNumericalMean()  {    [BUGGY]  getNumberOfSuccesses()  *  Math.random()  /  numberOfSuccesses;  [BUGGY]    return  (double)  (getSampleSize()  *  getNumberOfSuccesses())  /  (double)  getPopulationSize();  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalMean  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	268	268	1	replace	getNumberOfSuccesses()  *  Math.random()  /  numberOfSuccesses;	      getNumberOfSuccesses()    *    Math.random();    	non-compiled	[CE]  not  a  statement	425	None
3602	[BUG]  [BUGGY]  numericalVariance  =  getNumberOfSuccesses()  *(populationSize  -  1));  [CE]  ';'  expected  [CONTEXT]    public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }    [BUGGY]  numericalVariance  =  getNumberOfSuccesses()  *(populationSize  -  1));  [BUGGY]    return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	283	283	1	replace	numericalVariance  =  getNumberOfSuccesses()  *(populationSize  -  1));	      if(!numericalVarianceIsCalculated)    {    if(!numericalVarianceIsCalculated)    {    numericalVariance    =    false;    }    	non-compiled	[CE]  ';'  expected	103	None
3603	[BUG]  [BUGGY]  numericalVariance  =  getNumberOfSuccesses()  *(populationSize  -  1);  [CE]  missing  return  statement  [CONTEXT]    public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }    [BUGGY]  numericalVariance  =  getNumberOfSuccesses()  *(populationSize  -  1);  [BUGGY]    return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	283	283	1	replace	numericalVariance  =  getNumberOfSuccesses()  *(populationSize  -  1);	      if(!numericalVarianceIsCalculated)    {    if(!numericalVarianceIsCalculated)    {    numericalVariance    =    false;    }    	non-compiled	[CE]  missing  return  statement	103	None
3632	[BUG]  [BUGGY]  return  numericalVariance  /(numericalVariance  <  0)?  numericalVariance  :  null;  [CE]  bad  operand  types  for  binary  operator  '/'  [CONTEXT]    public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }    [BUGGY]  return  numericalVariance  /(numericalVariance  <  0)?  numericalVariance  :  null;  [BUGGY]    }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	283	283	1	replace	return  numericalVariance  /(numericalVariance  <  0)?  numericalVariance  :  null;	  return    numericalVariance    /(numericalVariance    >    0)?    numericalVariance    :    null;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '/'	153	None
3634	[BUG]  [BUGGY]  return  numericalVariance  /(numberOfSuccesses  >  0)?  numericalVariance  :  null;  [CE]  bad  operand  types  for  binary  operator  '/'  [CONTEXT]    public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }    [BUGGY]  return  numericalVariance  /(numberOfSuccesses  >  0)?  numericalVariance  :  null;  [BUGGY]    }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	283	283	1	replace	return  numericalVariance  /(numberOfSuccesses  >  0)?  numericalVariance  :  null;	  return    numericalVariance    /(numericalVariance    >    0)?    numericalVariance    :    null;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '/'	153	None
3662	[BUG]  [BUGGY]  final  double  k  =  getDecimalKind();  [CE]  cannot  find  symbol  [CONTEXT]    protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();  final  double  m  =  getNumberOfSuccesses();    [BUGGY]  final  double  k  =  getDecimalKind();  [BUGGY]    final  double  n  =  getSampleSize();  return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	294	294	1	replace	final  double  k  =  getDecimalKind();	      final    double    k    =    getDecimalSize();    	non-compiled	[CE]  cannot  find  symbol	304	None
3663	[BUG]  [BUGGY]  final  double  k  =  getDecimalNumberOfSuccesses();  [CE]  cannot  find  symbol  [CONTEXT]    protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();  final  double  m  =  getNumberOfSuccesses();    [BUGGY]  final  double  k  =  getDecimalNumberOfSuccesses();  [BUGGY]    final  double  n  =  getSampleSize();  return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	294	294	1	replace	final  double  k  =  getDecimalNumberOfSuccesses();	      final    double    k    =    getDecimalSize();    	non-compiled	[CE]  cannot  find  symbol	304	None
3664	[BUG]  [BUGGY]  final  double  k  =  getDecimalKilogram();  [CE]  cannot  find  symbol  [CONTEXT]    protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();  final  double  m  =  getNumberOfSuccesses();    [BUGGY]  final  double  k  =  getDecimalKilogram();  [BUGGY]    final  double  n  =  getSampleSize();  return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	294	294	1	replace	final  double  k  =  getDecimalKilogram();	      final    double    k    =    getDecimalSize();    	non-compiled	[CE]  cannot  find  symbol	304	None
3691	[BUG]  [BUGGY]  return  numericalVariance  /(populationSize  -  1)*(numberOfSuccesses  -  1));  [CE]  ';'  expected  [CONTEXT]    public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }    [BUGGY]  return  numericalVariance  /(populationSize  -  1)*(numberOfSuccesses  -  1));  [BUGGY]    }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	283	283	1	replace	return  numericalVariance  /(populationSize  -  1)*(numberOfSuccesses  -  1));	  return    numericalVariance    *    numberOfSuccesses;    	non-compiled	[CE]  ';'  expected	343	None
3724	[BUG]  [BUGGY]  final  int  numberOfSuccesses  =  getNumberOfSuccesses();  [CE]  cannot  find  symbol  m  [CONTEXT]    protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();    [BUGGY]  final  int  numberOfSuccesses  =  getNumberOfSuccesses();  [BUGGY]    final  double  m  =  getNumberOfSuccesses();  final  double  n  =  getSampleSize();  return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	293	293	1	replace	final  int  numberOfSuccesses  =  getNumberOfSuccesses();	      final    int    N    =    getNumberOfSuccesses();    	non-compiled	[CE]  cannot  find  symbol  m	143	None
3752	[BUG]  [BUGGY]  numericalVariance  =  Math.max(numberOfSuccesses,  m);  [CE]  cannot  find  symbol  m  [CONTEXT]    public  int  getSupportLowerBound()  {    [BUGGY]  numericalVariance  =  Math.max(numberOfSuccesses,  m);  [BUGGY]    getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  }  [CLASS]  HypergeometricDistribution  [METHOD]  getSupportLowerBound  [RETURN_TYPE]  int  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	308	309	1	replace	numericalVariance  =  Math.max(numberOfSuccesses,  m);	  return    FastMath.max(0,    getNumberOfSuccesses()    +    getSampleSize()    -    getPopulationSize());    	non-compiled	[CE]  cannot  find  symbol  m	3	None
3754	[BUG]  [BUGGY]  numericalVariance  =  Math.max(numberOfSuccesses,  1);  [CE]  missing  return  statement  [CONTEXT]    public  int  getSupportLowerBound()  {    [BUGGY]  numericalVariance  =  Math.max(numberOfSuccesses,  1);  [BUGGY]    getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  }  [CLASS]  HypergeometricDistribution  [METHOD]  getSupportLowerBound  [RETURN_TYPE]  int  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	308	309	1	replace	numericalVariance  =  Math.max(numberOfSuccesses,  1);	  return    FastMath.max(0,    getNumberOfSuccesses()    +    getSampleSize()    -    getPopulationSize());    	non-compiled	[CE]  missing  return  statement	3	None
3783	[BUG]  [BUGGY]  if(numericalVariance  <  0)  {  if(numericalVariance.equals(getNumberOfSuccesses()))  {  numericalVariance  =  calculateNumberOfSuccesses();  }  [CE]  illegal  start  of  expression  [CONTEXT]    public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();    [BUGGY]  if(numericalVariance  <  0)  {  if(numericalVariance.equals(getNumberOfSuccesses()))  {  numericalVariance  =  calculateNumberOfSuccesses();  }  [BUGGY]    }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	281	281	1	replace	if(numericalVariance  <  0)  {  if(numericalVariance.equals(getNumberOfSuccesses()))  {  numericalVariance  =  calculateNumberOfSuccesses();  }	  numericalVarianceIsCalculated    =(numericalVariance    <    0)?    numericalVarianceIsCalculated    :    false;    	non-compiled	[CE]  illegal  start  of  expression	393	None
3811	[BUG]  [BUGGY]  n  =  getNumberOfSuccesses();  [CE]  cannot  find  symbol  n  [CONTEXT]    public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();    [BUGGY]  n  =  getNumberOfSuccesses();  [BUGGY]    }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	281	281	1	replace	n  =  getNumberOfSuccesses();	  numericalVarianceIsCalculated    =    false;    	non-compiled	[CE]  cannot  find  symbol  n	122	None
3812	[BUG]  [BUGGY]  n  =  getNumberOfSuccesses()  +  Math.abs(m  /  n);  [CE]  cannot  find  symbol  n  [CONTEXT]    public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();    [BUGGY]  n  =  getNumberOfSuccesses()  +  Math.abs(m  /  n);  [BUGGY]    }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	281	281	1	replace	n  =  getNumberOfSuccesses()  +  Math.abs(m  /  n);	  numericalVarianceIsCalculated    =    false;    	non-compiled	[CE]  cannot  find  symbol  n	122	None
3813	[BUG]  [BUGGY]  n  =  getNumberOfSuccesses()  *  k  +  1;  [CE]  cannot  find  symbol  n  [CONTEXT]    public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();    [BUGGY]  n  =  getNumberOfSuccesses()  *  k  +  1;  [BUGGY]    }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	281	281	1	replace	n  =  getNumberOfSuccesses()  *  k  +  1;	  numericalVarianceIsCalculated    =    false;    	non-compiled	[CE]  cannot  find  symbol  n	122	None
3814	[BUG]  [BUGGY]  m  =  Math.floor(n);  [CE]  cannot  find  symbol  m  [CONTEXT]    public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();    [BUGGY]  m  =  Math.floor(n);  [BUGGY]    }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	281	281	1	replace	m  =  Math.floor(n);	  numericalVarianceIsCalculated    =    false;    	non-compiled	[CE]  cannot  find  symbol  m	122	None
3843	[BUG]  [BUGGY]      final  double  k  =  getNumberOfSuccesses();  final  double  dx  =  getDecimalVariance();  [CE]  cannot  find  symbol  [CONTEXT]    protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();  final  double  m  =  getNumberOfSuccesses();  final  double  n  =  getSampleSize();    [BUGGY]      final  double  k  =  getNumberOfSuccesses();  final  double  dx  =  getDecimalVariance();  [BUGGY]    return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	295	295	1	replace	        final    double    k    =    getNumberOfSuccesses();    final  double  dx  =  getDecimalVariance();	  	non-compiled	[CE]  cannot  find  symbol	383	None
3844	[BUG]  [BUGGY]      final  double  k  =  getNumberOfSuccesses();  final  double  dx  =  getDecimalValue();  [CE]  cannot  find  symbol  [CONTEXT]    protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();  final  double  m  =  getNumberOfSuccesses();  final  double  n  =  getSampleSize();    [BUGGY]      final  double  k  =  getNumberOfSuccesses();  final  double  dx  =  getDecimalValue();  [BUGGY]    return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	295	295	1	replace	        final    double    k    =    getNumberOfSuccesses();    final  double  dx  =  getDecimalValue();	  	non-compiled	[CE]  cannot  find  symbol	383	None
3845	[BUG]  [BUGGY]      final  double  k  =  getNumberOfSuccesses();  final  int  dx  =  getDx();  [CE]  cannot  find  symbol  [CONTEXT]    protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();  final  double  m  =  getNumberOfSuccesses();  final  double  n  =  getSampleSize();    [BUGGY]      final  double  k  =  getNumberOfSuccesses();  final  int  dx  =  getDx();  [BUGGY]    return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	295	295	1	replace	        final    double    k    =    getNumberOfSuccesses();    final  int  dx  =  getDx();	  	non-compiled	[CE]  cannot  find  symbol	383	None
3902	[BUG]  [BUGGY]  final  double  k  =  getKindOfSuccesses();  [CE]  cannot  find  symbol  [CONTEXT]    protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();  final  double  m  =  getNumberOfSuccesses();    [BUGGY]  final  double  k  =  getKindOfSuccesses();  [BUGGY]    final  double  n  =  getSampleSize();  return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	294	294	1	replace	final  double  k  =  getKindOfSuccesses();	      final    double    k    =    getKind();    	non-compiled	[CE]  cannot  find  symbol	301	None
3903	[BUG]  [BUGGY]  final  double  k  =  getKind().length;  [CE]  cannot  find  symbol  [CONTEXT]    protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();  final  double  m  =  getNumberOfSuccesses();    [BUGGY]  final  double  k  =  getKind().length;  [BUGGY]    final  double  n  =  getSampleSize();  return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	294	294	1	replace	final  double  k  =  getKind().length;	      final    double    k    =    getKind();    	non-compiled	[CE]  cannot  find  symbol	301	None
3904	[BUG]  [BUGGY]  final  double  k  =  getKindSize();  [CE]  cannot  find  symbol  [CONTEXT]    protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();  final  double  m  =  getNumberOfSuccesses();    [BUGGY]  final  double  k  =  getKindSize();  [BUGGY]    final  double  n  =  getSampleSize();  return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	294	294	1	replace	final  double  k  =  getKindSize();	      final    double    k    =    getKind();    	non-compiled	[CE]  cannot  find  symbol	301	None
3963	[BUG]  [BUGGY]  final  double  m  =  getNumberOfSuccesses()  *  N;  final  double  k  =  getDayOfMonth()  *  N;  [CE]  cannot  find  symbol  [CONTEXT]    protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();    [BUGGY]  final  double  m  =  getNumberOfSuccesses()  *  N;  final  double  k  =  getDayOfMonth()  *  N;  [BUGGY]    final  double  n  =  getSampleSize();  return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	293	293	1	replace	final    double    m    =    getNumberOfSuccesses()    *    N;    final  double  k  =  getDayOfMonth()  *  N;	  	non-compiled	[CE]  cannot  find  symbol	453	None
3964	[BUG]  [BUGGY]  final  double  m  =  getNumberOfSuccesses()  *  N;  final  double  k  =  getDecimalVariance()  *  N;  [CE]  cannot  find  symbol  [CONTEXT]    protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();    [BUGGY]  final  double  m  =  getNumberOfSuccesses()  *  N;  final  double  k  =  getDecimalVariance()  *  N;  [BUGGY]    final  double  n  =  getSampleSize();  return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	293	293	1	replace	final    double    m    =    getNumberOfSuccesses()    *    N;    final  double  k  =  getDecimalVariance()  *  N;	  	non-compiled	[CE]  cannot  find  symbol	453	None
4053	[BUG]  [BUGGY]  [FE]  AssertionError  testMoments  [CONTEXT]    public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {    [BUGGY]  numericalVariance  =  getNumberOfSuccesses()  *  Math.pow(10,  populationSize);  [BUGGY]    numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	280	280	1	add	numericalVariance  =  getNumberOfSuccesses()  *  Math.pow(10,  populationSize);	      numericalVariance    =    getNumberOfSuccesses()    *    Math.pow(10,    numberOfSuccesses);    	compilable	  [FE]  AssertionError  testMoments	106	1
4054	[BUG]  [BUGGY]  numericalVariance  =  getNumberOfSuccesses()  *  Math.pow(10,  populationSize);  [FE]  AssertionError  testMoments  [CONTEXT]    public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {    [BUGGY]  numericalVariance  =  getNumberOfSuccesses()  *  Math.pow(10,  populationSize);  [BUGGY]    numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	280	280	1	replace	numericalVariance  =  getNumberOfSuccesses()  *  Math.pow(10,  populationSize);	      numericalVariance    =    getNumberOfSuccesses()    *    Math.pow(10,    numberOfSuccesses);    	compilable	  [FE]  AssertionError  testMoments	106	1
4084	[BUG]  [BUGGY]  getPopulationSize()  +  1;  [CE]  not  a  statement  [CONTEXT]    public  int  getSupportLowerBound()  {    [BUGGY]  getPopulationSize()  +  1;  [BUGGY]    return  FastMath.max(0,        getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  }  [CLASS]  HypergeometricDistribution  [METHOD]  getSupportLowerBound  [RETURN_TYPE]  int  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	308	309	1	replace	getPopulationSize()  +  1;	      getPopulationSize();    	non-compiled	[CE]  not  a  statement	274	None
4113	[BUG]  [BUGGY]  getNumberOfSuccesses()  -  getPopulationSize()  *;  [CE]  illegal  start  of  expression  [CONTEXT]    public  int  getSupportLowerBound()  {    [BUGGY]  getNumberOfSuccesses()  -  getPopulationSize()  *;  [BUGGY]    return  FastMath.max(0,        getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  }  [CLASS]  HypergeometricDistribution  [METHOD]  getSupportLowerBound  [RETURN_TYPE]  int  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	308	309	1	replace	getNumberOfSuccesses()  -  getPopulationSize()  *;	      getNumberOfSuccesses()    -    getPopulationSize();    	non-compiled	[CE]  illegal  start  of  expression	271	None
4114	[BUG]  [BUGGY]  getNumberOfSuccesses()  -  getPopulationSize()  *  populationSize;  [CE]  not  a  statement  [CONTEXT]    public  int  getSupportLowerBound()  {    [BUGGY]  getNumberOfSuccesses()  -  getPopulationSize()  *  populationSize;  [BUGGY]    return  FastMath.max(0,        getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  }  [CLASS]  HypergeometricDistribution  [METHOD]  getSupportLowerBound  [RETURN_TYPE]  int  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	308	309	1	replace	getNumberOfSuccesses()  -  getPopulationSize()  *  populationSize;	      getNumberOfSuccesses()    -    getPopulationSize();    	non-compiled	[CE]  not  a  statement	271	None
4142	[BUG]  [BUGGY]  [FE]  AssertionError  testMath1021  [CONTEXT]    protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();    [BUGGY]      final  double  k  =  getNumberOfSuccesses();  final  double  dx  =  getNumberOfSuccesses();  [BUGGY]    final  double  m  =  getNumberOfSuccesses();  final  double  n  =  getSampleSize();  return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	293	293	1	add	        final    double    k    =    getNumberOfSuccesses();    final  double  dx  =  getNumberOfSuccesses();	  	compilable	  [FE]  AssertionError  testMath1021	181	1
4143	[BUG]  [BUGGY]      final  double  k  =  getNumberOfSuccesses();  final  double  dx  =  getNumberOfSuccesses();  [FE]  AssertionError  testMath1021  [CONTEXT]    protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();    [BUGGY]      final  double  k  =  getNumberOfSuccesses();  final  double  dx  =  getNumberOfSuccesses();  [BUGGY]    final  double  m  =  getNumberOfSuccesses();  final  double  n  =  getSampleSize();  return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	293	293	1	replace	        final    double    k    =    getNumberOfSuccesses();    final  double  dx  =  getNumberOfSuccesses();	  	compilable	  [FE]  AssertionError  testMath1021	181	1
4143	[BUG]  [BUGGY]      final  double  k  =  getNumberOfSuccesses();  final  double  dx  =  getDecimalVariance();  [CE]  cannot  find  symbol  [CONTEXT]    protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();    [BUGGY]      final  double  k  =  getNumberOfSuccesses();  final  double  dx  =  getDecimalVariance();  [BUGGY]    final  double  m  =  getNumberOfSuccesses();  final  double  n  =  getSampleSize();  return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	293	293	1	replace	        final    double    k    =    getNumberOfSuccesses();    final  double  dx  =  getDecimalVariance();	  	non-compiled	[CE]  cannot  find  symbol	181	None
4144	[BUG]  [BUGGY]      final  double  k  =  getNumberOfSuccesses();  final  double  dx  =  getDayOfMonth();  [CE]  cannot  find  symbol  [CONTEXT]    protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();    [BUGGY]      final  double  k  =  getNumberOfSuccesses();  final  double  dx  =  getDayOfMonth();  [BUGGY]    final  double  m  =  getNumberOfSuccesses();  final  double  n  =  getSampleSize();  return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	293	293	1	replace	        final    double    k    =    getNumberOfSuccesses();    final  double  dx  =  getDayOfMonth();	  	non-compiled	[CE]  cannot  find  symbol	181	None
4145	[BUG]  [BUGGY]      final  double  k  =  getNumberOfSuccesses();  final  double  dx  =  getDecimalValue();  [CE]  cannot  find  symbol  [CONTEXT]    protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();    [BUGGY]      final  double  k  =  getNumberOfSuccesses();  final  double  dx  =  getDecimalValue();  [BUGGY]    final  double  m  =  getNumberOfSuccesses();  final  double  n  =  getSampleSize();  return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	293	293	1	replace	        final    double    k    =    getNumberOfSuccesses();    final  double  dx  =  getDecimalValue();	  	non-compiled	[CE]  cannot  find  symbol	181	None
4173	[BUG]  [BUGGY]  setNumberOfSuccesses(getNumberOfSuccesses()  -  1,  n);  [CE]  cannot  find  symbol  n  [CONTEXT]    protected  double  calculateNumericalVariance()  {    [BUGGY]  setNumberOfSuccesses(getNumberOfSuccesses()  -  1,  n);  [BUGGY]    final  double  N  =  getPopulationSize();  final  double  m  =  getNumberOfSuccesses();  final  double  n  =  getSampleSize();  return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	292	292	1	replace	setNumberOfSuccesses(getNumberOfSuccesses()  -  1,  n);	      setNumberOfSuccesses(getNumberOfSuccesses()    -    1);    	non-compiled	[CE]  cannot  find  symbol  n	211	None
4203	[BUG]  [BUGGY]  if(!numericalVarianceIsCalculated)  {  if(!numericalVarianceIsCalculated)  {  numericalVariance  =  null;  [Delete]  [CE]  illegal  start  of  expression  [CONTEXT]    public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }    [BUGGY]  if(!numericalVarianceIsCalculated)  {  if(!numericalVarianceIsCalculated)  {  numericalVariance  =  null;  [Delete]  [BUGGY]    return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	283	283	1	replace	if(!numericalVarianceIsCalculated)  {  if(!numericalVarianceIsCalculated)  {  numericalVariance  =  null;  [Delete]	      if(!numericalVarianceIsCalculated)    {    if(!numericalVarianceIsCalculated)    {    numericalVariance    =    null;    }    	non-compiled	[CE]  illegal  start  of  expression	102	None
4204	[BUG]  [BUGGY]  unless(!numericalVarianceIsCalculated)  {  if(!numericalVarianceIsCalculated)  {  numericalVariance  =  null;  }  [CE]  ';'  expected  [CONTEXT]    public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }    [BUGGY]  unless(!numericalVarianceIsCalculated)  {  if(!numericalVarianceIsCalculated)  {  numericalVariance  =  null;  }  [BUGGY]    return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	283	283	1	replace	unless(!numericalVarianceIsCalculated)  {  if(!numericalVarianceIsCalculated)  {  numericalVariance  =  null;  }	      if(!numericalVarianceIsCalculated)    {    if(!numericalVarianceIsCalculated)    {    numericalVariance    =    null;    }    	non-compiled	[CE]  ';'  expected	102	None
4231	[BUG]  [BUGGY]  int  k  =  getNumberOfSuccesses();  if(k  >  0)  {  return  getNumberOfSuccesses()  *  getPopulationSize();  }  [CE]  missing  return  statement  [CONTEXT]    public  double  getNumericalMean()  {    [BUGGY]  int  k  =  getNumberOfSuccesses();  if(k  >  0)  {  return  getNumberOfSuccesses()  *  getPopulationSize();  }  [BUGGY]    return  (double)  (getSampleSize()  *  getNumberOfSuccesses())  /  (double)  getPopulationSize();  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalMean  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	268	268	1	replace	int  k  =  getNumberOfSuccesses();  if(k  >  0)  {  return  getNumberOfSuccesses()  *  getPopulationSize();  }	      if(getNumberOfSuccesses()    >    0)    {    int    k    =    getNumberOfSuccesses();    if(k    >    0)    {    return    getNumberOfSuccesses()    *    getNumberOfSuccesses();    }    	non-compiled	[CE]  missing  return  statement	365	None
4232	[BUG]  [BUGGY]  if(getNumberOfSuccesses()  >  0)  {  int  k  =  getNumberOfSuccesses();  if(k  >  0)  {  return  getNumberOfSuccesses()  *  getPopulationSize();  }  [CE]  illegal  start  of  expression  [CONTEXT]    public  double  getNumericalMean()  {    [BUGGY]  if(getNumberOfSuccesses()  >  0)  {  int  k  =  getNumberOfSuccesses();  if(k  >  0)  {  return  getNumberOfSuccesses()  *  getPopulationSize();  }  [BUGGY]    return  (double)  (getSampleSize()  *  getNumberOfSuccesses())  /  (double)  getPopulationSize();  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalMean  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	268	268	1	replace	if(getNumberOfSuccesses()  >  0)  {  int  k  =  getNumberOfSuccesses();  if(k  >  0)  {  return  getNumberOfSuccesses()  *  getPopulationSize();  }	      if(getNumberOfSuccesses()    >    0)    {    int    k    =    getNumberOfSuccesses();    if(k    >    0)    {    return    getNumberOfSuccesses()    *    getNumberOfSuccesses();    }    	non-compiled	[CE]  illegal  start  of  expression	365	None
4233	[BUG]  [BUGGY]  if(getNumberOfSuccesses  >  0)  {  int  k  =  getNumberOfSuccesses();  if(k  >  0)  {  return  getNumberOfSuccesses()  *  getPopulationSize();  }  [CE]  illegal  start  of  expression  [CONTEXT]    public  double  getNumericalMean()  {    [BUGGY]  if(getNumberOfSuccesses  >  0)  {  int  k  =  getNumberOfSuccesses();  if(k  >  0)  {  return  getNumberOfSuccesses()  *  getPopulationSize();  }  [BUGGY]    return  (double)  (getSampleSize()  *  getNumberOfSuccesses())  /  (double)  getPopulationSize();  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalMean  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	268	268	1	replace	if(getNumberOfSuccesses  >  0)  {  int  k  =  getNumberOfSuccesses();  if(k  >  0)  {  return  getNumberOfSuccesses()  *  getPopulationSize();  }	      if(getNumberOfSuccesses()    >    0)    {    int    k    =    getNumberOfSuccesses();    if(k    >    0)    {    return    getNumberOfSuccesses()    *    getNumberOfSuccesses();    }    	non-compiled	[CE]  illegal  start  of  expression	365	None
4234	[BUG]  [BUGGY]  int  k  =  getNumberOfSuccesses();  if(k  >  0)  {  return  getNumberOfSuccesses()  *  getPopulationSize();  [CE]  illegal  start  of  expression  [CONTEXT]    public  double  getNumericalMean()  {    [BUGGY]  int  k  =  getNumberOfSuccesses();  if(k  >  0)  {  return  getNumberOfSuccesses()  *  getPopulationSize();  [BUGGY]    return  (double)  (getSampleSize()  *  getNumberOfSuccesses())  /  (double)  getPopulationSize();  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalMean  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	268	268	1	replace	int  k  =  getNumberOfSuccesses();  if(k  >  0)  {  return  getNumberOfSuccesses()  *  getPopulationSize();	      if(getNumberOfSuccesses()    >    0)    {    int    k    =    getNumberOfSuccesses();    if(k    >    0)    {    return    getNumberOfSuccesses()    *    getNumberOfSuccesses();    }    	non-compiled	[CE]  illegal  start  of  expression	365	None
4293	[BUG]  [BUGGY]  double  numericalVariance  =  getNumberOfSuccesses()  /(populationSize  -  1);  [CE]  illegal  start  of  type  [CONTEXT]    public  double  getNumericalVariance()  {    [BUGGY]  double  numericalVariance  =  getNumberOfSuccesses()  /(populationSize  -  1);  [BUGGY]    if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	279	279	1	replace	double  numericalVariance  =  getNumberOfSuccesses()  /(populationSize  -  1);	      double    numericalVariance    =    getNumberOfSuccesses()    *(numberOfSuccesses    -    1);    	non-compiled	[CE]  illegal  start  of  type	6	None
4294	[BUG]  [BUGGY]  double  numericalVariance  =  getSampleSize()  *(numberOfSuccesses  -  1);  [CE]  illegal  start  of  type  [CONTEXT]    public  double  getNumericalVariance()  {    [BUGGY]  double  numericalVariance  =  getSampleSize()  *(numberOfSuccesses  -  1);  [BUGGY]    if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	279	279	1	replace	double  numericalVariance  =  getSampleSize()  *(numberOfSuccesses  -  1);	      double    numericalVariance    =    getNumberOfSuccesses()    *(numberOfSuccesses    -    1);    	non-compiled	[CE]  illegal  start  of  type	6	None
4352	[BUG]  [BUGGY]  if(getNumberOfSuccesses  >  0)  {  if(getNumberOfSuccesses  >  0)  {  return(double)getNumberOfSuccesses()  *  getNumberOfSuccesses();  }  [CE]  illegal  start  of  expression  [CONTEXT]    public  double  getNumericalMean()  {    [BUGGY]  if(getNumberOfSuccesses  >  0)  {  if(getNumberOfSuccesses  >  0)  {  return(double)getNumberOfSuccesses()  *  getNumberOfSuccesses();  }  [BUGGY]    return  (double)  (getSampleSize()  *  getNumberOfSuccesses())  /  (double)  getPopulationSize();  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalMean  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	268	268	1	replace	if(getNumberOfSuccesses  >  0)  {  if(getNumberOfSuccesses  >  0)  {  return(double)getNumberOfSuccesses()  *  getNumberOfSuccesses();  }	      if(getNumberOfSuccesses()    >    0)    {    if(getNumberOfSuccesses()    >    0)    {    return(double)getNumberOfSuccesses()    *    getNumberOfSuccesses();    }    	non-compiled	[CE]  illegal  start  of  expression	72	None
4354	[BUG]  [BUGGY]  if(getNumberOfSuccesses  >  0)  {  if(getNumberOfSuccesses  >  0)  {  return(double)getNumberOfSuccesses()  *  getPopulationSize();  }  [CE]  illegal  start  of  expression  [CONTEXT]    public  double  getNumericalMean()  {    [BUGGY]  if(getNumberOfSuccesses  >  0)  {  if(getNumberOfSuccesses  >  0)  {  return(double)getNumberOfSuccesses()  *  getPopulationSize();  }  [BUGGY]    return  (double)  (getSampleSize()  *  getNumberOfSuccesses())  /  (double)  getPopulationSize();  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalMean  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	268	268	1	replace	if(getNumberOfSuccesses  >  0)  {  if(getNumberOfSuccesses  >  0)  {  return(double)getNumberOfSuccesses()  *  getPopulationSize();  }	      if(getNumberOfSuccesses()    >    0)    {    if(getNumberOfSuccesses()    >    0)    {    return(double)getNumberOfSuccesses()    *    getNumberOfSuccesses();    }    	non-compiled	[CE]  illegal  start  of  expression	72	None
4412	[BUG]  [BUGGY]  checkNumberOfSuccesses(populationSize);  [CE]  cannot  find  symbol  [CONTEXT]    public  int  getSupportLowerBound()  {    [BUGGY]  checkNumberOfSuccesses(populationSize);  [BUGGY]    return  FastMath.max(0,        getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  }  [CLASS]  HypergeometricDistribution  [METHOD]  getSupportLowerBound  [RETURN_TYPE]  int  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	308	309	1	replace	checkNumberOfSuccesses(populationSize);	      getPopulationSize();    	non-compiled	[CE]  cannot  find  symbol	274	None
4413	[BUG]  [BUGGY]  checkNumberOfSuccesses(m);  [CE]  cannot  find  symbol  m  [CONTEXT]    public  int  getSupportLowerBound()  {    [BUGGY]  checkNumberOfSuccesses(m);  [BUGGY]    return  FastMath.max(0,        getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  }  [CLASS]  HypergeometricDistribution  [METHOD]  getSupportLowerBound  [RETURN_TYPE]  int  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	308	309	1	replace	checkNumberOfSuccesses(m);	      getPopulationSize();    	non-compiled	[CE]  cannot  find  symbol  m	274	None
4414	[BUG]  [BUGGY]  checkNumberOfSuccesses(PopulationSize);  [CE]  cannot  find  symbol  PopulationSize  [CONTEXT]    public  int  getSupportLowerBound()  {    [BUGGY]  checkNumberOfSuccesses(PopulationSize);  [BUGGY]    return  FastMath.max(0,        getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  }  [CLASS]  HypergeometricDistribution  [METHOD]  getSupportLowerBound  [RETURN_TYPE]  int  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	308	309	1	replace	checkNumberOfSuccesses(PopulationSize);	      getPopulationSize();    	non-compiled	[CE]  cannot  find  symbol  PopulationSize	274	None
4501	[BUG]  [BUGGY]  if(getNumberOfSuccesses  >  0)  {  double  getNumberOfSuccesses();  if(getNumberOfSuccesses()  >  0)  {  return  getNumberOfSuccesses()  *  getPopulationSize()  [CE]  ';'  expected  [CONTEXT]    public  double  getNumericalMean()  {    [BUGGY]  if(getNumberOfSuccesses  >  0)  {  double  getNumberOfSuccesses();  if(getNumberOfSuccesses()  >  0)  {  return  getNumberOfSuccesses()  *  getPopulationSize()  [BUGGY]    return  (double)  (getSampleSize()  *  getNumberOfSuccesses())  /  (double)  getPopulationSize();  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalMean  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	268	268	1	replace	if(getNumberOfSuccesses  >  0)  {  double  getNumberOfSuccesses();  if(getNumberOfSuccesses()  >  0)  {  return  getNumberOfSuccesses()  *  getPopulationSize()	      int    k    =    getNumberOfSuccesses();    	non-compiled	[CE]  ';'  expected	363	None
4502	[BUG]  [BUGGY]  if(getPopulationSize()  >  0)  {  double  getNumberOfSuccesses();  if(getNumberOfSuccesses()  >  0)  {  return  getNumberOfSuccesses()  *  getNumberOf  [CE]  ';'  expected  [CONTEXT]    public  double  getNumericalMean()  {    [BUGGY]  if(getPopulationSize()  >  0)  {  double  getNumberOfSuccesses();  if(getNumberOfSuccesses()  >  0)  {  return  getNumberOfSuccesses()  *  getNumberOf  [BUGGY]    return  (double)  (getSampleSize()  *  getNumberOfSuccesses())  /  (double)  getPopulationSize();  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalMean  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	268	268	1	replace	if(getPopulationSize()  >  0)  {  double  getNumberOfSuccesses();  if(getNumberOfSuccesses()  >  0)  {  return  getNumberOfSuccesses()  *  getNumberOf	      int    k    =    getNumberOfSuccesses();    	non-compiled	[CE]  ';'  expected	363	None
4503	[BUG]  [BUGGY]  if(getNumberOfSuccesses  >  0)  {  double  getNumberOfSuccesses();  if(getNumberOfSuccesses()  >  0)  {  return  getNumberOfSuccesses()  *  getPopulationSize();  }  [CE]  ';'  expected  [CONTEXT]    public  double  getNumericalMean()  {    [BUGGY]  if(getNumberOfSuccesses  >  0)  {  double  getNumberOfSuccesses();  if(getNumberOfSuccesses()  >  0)  {  return  getNumberOfSuccesses()  *  getPopulationSize();  }  [BUGGY]    return  (double)  (getSampleSize()  *  getNumberOfSuccesses())  /  (double)  getPopulationSize();  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalMean  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	268	268	1	replace	if(getNumberOfSuccesses  >  0)  {  double  getNumberOfSuccesses();  if(getNumberOfSuccesses()  >  0)  {  return  getNumberOfSuccesses()  *  getPopulationSize();  }	      int    k    =    getNumberOfSuccesses();    	non-compiled	[CE]  ';'  expected	363	None
4504	[BUG]  [BUGGY]  if(getSampleSize()  >  0)  {  double  getNumberOfSuccesses();  if(getNumberOfSuccesses()  >  0)  {  return  getNumberOfSuccesses()  *  getPopulationSize();  }  [CE]  ';'  expected  [CONTEXT]    public  double  getNumericalMean()  {    [BUGGY]  if(getSampleSize()  >  0)  {  double  getNumberOfSuccesses();  if(getNumberOfSuccesses()  >  0)  {  return  getNumberOfSuccesses()  *  getPopulationSize();  }  [BUGGY]    return  (double)  (getSampleSize()  *  getNumberOfSuccesses())  /  (double)  getPopulationSize();  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalMean  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	268	268	1	replace	if(getSampleSize()  >  0)  {  double  getNumberOfSuccesses();  if(getNumberOfSuccesses()  >  0)  {  return  getNumberOfSuccesses()  *  getPopulationSize();  }	      int    k    =    getNumberOfSuccesses();    	non-compiled	[CE]  ';'  expected	363	None
4532	[BUG]  [BUGGY]  double  numericalVariance  =  Math.floor(getMean()  /  sampleSize);  [CE]  illegal  start  of  type  [CONTEXT]    public  double  getNumericalVariance()  {    [BUGGY]  double  numericalVariance  =  Math.floor(getMean()  /  sampleSize);  [BUGGY]    if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	279	279	1	replace	double  numericalVariance  =  Math.floor(getMean()  /  sampleSize);	      double    numericalVariance    =    Math.floor(getMean()    /    numberOfSuccesses);    	non-compiled	[CE]  illegal  start  of  type	544	None
4533	[BUG]  [BUGGY]  double  numericalVariance  =  Math.floor(getMean()  /  sizeOfSuccesses);  [CE]  illegal  start  of  type  [CONTEXT]    public  double  getNumericalVariance()  {    [BUGGY]  double  numericalVariance  =  Math.floor(getMean()  /  sizeOfSuccesses);  [BUGGY]    if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	279	279	1	replace	double  numericalVariance  =  Math.floor(getMean()  /  sizeOfSuccesses);	      double    numericalVariance    =    Math.floor(getMean()    /    numberOfSuccesses);    	non-compiled	[CE]  illegal  start  of  type	544	None
4534	[BUG]  [BUGGY]  double  numericalVariance  =  Math.floor(getMean()  /  NumberOfSuccesses);  [CE]  illegal  start  of  type  [CONTEXT]    public  double  getNumericalVariance()  {    [BUGGY]  double  numericalVariance  =  Math.floor(getMean()  /  NumberOfSuccesses);  [BUGGY]    if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	279	279	1	replace	double  numericalVariance  =  Math.floor(getMean()  /  NumberOfSuccesses);	      double    numericalVariance    =    Math.floor(getMean()    /    numberOfSuccesses);    	non-compiled	[CE]  illegal  start  of  type	544	None
4564	[BUG]  [BUGGY]  [FE]  AssertionError  testMath1021  [CONTEXT]    public  int  getSupportLowerBound()  {    [BUGGY]      getPopulationSize();  getPopulationSize();  [BUGGY]    return  FastMath.max(0,        getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  }  [CLASS]  HypergeometricDistribution  [METHOD]  getSupportLowerBound  [RETURN_TYPE]  int  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	308	309	1	add	        getPopulationSize();    getPopulationSize();	  	compilable	  [FE]  AssertionError  testMath1021	273	1
4565	[BUG]  [BUGGY]      getPopulationSize();  getPopulationSize();  [FE]  AssertionError  testMath1021  [CONTEXT]    public  int  getSupportLowerBound()  {    [BUGGY]      getPopulationSize();  getPopulationSize();  [BUGGY]    return  FastMath.max(0,        getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  }  [CLASS]  HypergeometricDistribution  [METHOD]  getSupportLowerBound  [RETURN_TYPE]  int  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	308	309	1	replace	        getPopulationSize();    getPopulationSize();	  	compilable	  [FE]  AssertionError  testMath1021	273	1
4565	[BUG]  [BUGGY]      getPopulationSize();  getNumberOfSuccesses()  *  populationSize;  [CE]  not  a  statement  [CONTEXT]    public  int  getSupportLowerBound()  {    [BUGGY]      getPopulationSize();  getNumberOfSuccesses()  *  populationSize;  [BUGGY]    return  FastMath.max(0,        getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  }  [CLASS]  HypergeometricDistribution  [METHOD]  getSupportLowerBound  [RETURN_TYPE]  int  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	308	309	1	replace	        getPopulationSize();    getNumberOfSuccesses()  *  populationSize;	  	non-compiled	[CE]  not  a  statement	273	None
4623	[BUG]  [BUGGY]  return  FastMath.max(0,  getNumberOfSuccesses()  +  getSampleSize()  -  getPopulationSize());  numberOfSuccesses  =  Math.min(numberOfSuccesses,  0);  [CE]  cannot  assign  a  value  to  final  variable  numberOfSuccesses  [CONTEXT]    public  int  getSupportLowerBound()  {    [BUGGY]  return  FastMath.max(0,  getNumberOfSuccesses()  +  getSampleSize()  -  getPopulationSize());  numberOfSuccesses  =  Math.min(numberOfSuccesses,  0);  [BUGGY]    getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  }  [CLASS]  HypergeometricDistribution  [METHOD]  getSupportLowerBound  [RETURN_TYPE]  int  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	308	309	1	replace	return    FastMath.max(0,    getNumberOfSuccesses()    +    getSampleSize()    -    getPopulationSize());    numberOfSuccesses  =  Math.min(numberOfSuccesses,  0);	  	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  numberOfSuccesses	2	None
4624	[BUG]  [BUGGY]  return  FastMath.max(0,  getNumberOfSuccesses()  +  getSampleSize()  -  getPopulationSize());  numericalVariance  =  Math.min(numberOfSuccesses,  numberOfSuccesses  -  1);  [CE]  unreachable  statement  [CONTEXT]    public  int  getSupportLowerBound()  {    [BUGGY]  return  FastMath.max(0,  getNumberOfSuccesses()  +  getSampleSize()  -  getPopulationSize());  numericalVariance  =  Math.min(numberOfSuccesses,  numberOfSuccesses  -  1);  [BUGGY]    getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  }  [CLASS]  HypergeometricDistribution  [METHOD]  getSupportLowerBound  [RETURN_TYPE]  int  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	308	309	1	replace	return    FastMath.max(0,    getNumberOfSuccesses()    +    getSampleSize()    -    getPopulationSize());    numericalVariance  =  Math.min(numberOfSuccesses,  numberOfSuccesses  -  1);	  	non-compiled	[CE]  unreachable  statement	2	None
4625	[BUG]  [BUGGY]  return  FastMath.max(0,  getNumberOfSuccesses()  +  getSampleSize()  -  getPopulationSize());  numberOfSuccesses  =  Math.min(numberOfSuccesses,  sampleSize);  [CE]  cannot  assign  a  value  to  final  variable  numberOfSuccesses  [CONTEXT]    public  int  getSupportLowerBound()  {    [BUGGY]  return  FastMath.max(0,  getNumberOfSuccesses()  +  getSampleSize()  -  getPopulationSize());  numberOfSuccesses  =  Math.min(numberOfSuccesses,  sampleSize);  [BUGGY]    getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  }  [CLASS]  HypergeometricDistribution  [METHOD]  getSupportLowerBound  [RETURN_TYPE]  int  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	308	309	1	replace	return    FastMath.max(0,    getNumberOfSuccesses()    +    getSampleSize()    -    getPopulationSize());    numberOfSuccesses  =  Math.min(numberOfSuccesses,  sampleSize);	  	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  numberOfSuccesses	2	None
4651	[BUG]  [BUGGY]  if(!numberVarianceIsCalculated)  {  [CE]  cannot  find  symbol  numberVarianceIsCalculated  [CONTEXT]    public  double  getNumericalVariance()  {    [BUGGY]  if(!numberVarianceIsCalculated)  {  [BUGGY]    numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	279	279	1	replace	if(!numberVarianceIsCalculated)  {	  if(!nativeVarianceIsCalculated)    {    	non-compiled	[CE]  cannot  find  symbol  numberVarianceIsCalculated	24	None
4681	[BUG]  [BUGGY]  [FE]  AssertionError  testMoments  [CONTEXT]    public  double  getNumericalVariance()  {    [BUGGY]  if(numericalVarianceIsCalculated  &&  numberOfSuccesses  >  0)  {  [BUGGY]    numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	279	279	1	add	if(numericalVarianceIsCalculated  &&  numberOfSuccesses  >  0)  {	  if(numericalVarianceIsCalculated)    {    	compilable	  [FE]  AssertionError  testMoments	23	1
4682	[BUG]  [BUGGY]  if(numericalVarianceIsCalculated  &&  numberOfSuccesses  >  0)  {  [FE]  AssertionError  testMoments  [CONTEXT]    public  double  getNumericalVariance()  {    [BUGGY]  if(numericalVarianceIsCalculated  &&  numberOfSuccesses  >  0)  {  [BUGGY]    numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	279	279	1	replace	if(numericalVarianceIsCalculated  &&  numberOfSuccesses  >  0)  {	  if(numericalVarianceIsCalculated)    {    	compilable	  [FE]  AssertionError  testMoments	23	1
4683	[BUG]  [BUGGY]  if(numericalVarianceIsCalculated  &&  Math.abs(getSlope())>  0)  {  [CE]  cannot  find  symbol  [CONTEXT]    public  double  getNumericalVariance()  {    [BUGGY]  if(numericalVarianceIsCalculated  &&  Math.abs(getSlope())>  0)  {  [BUGGY]    numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	279	279	1	replace	if(numericalVarianceIsCalculated  &&  Math.abs(getSlope())>  0)  {	  if(numericalVarianceIsCalculated)    {    	non-compiled	[CE]  cannot  find  symbol	23	None
4684	[BUG]  [BUGGY]  if(numericalVarianceIsCalculated  &&  super.getNumericalVariance()  <  0)  {  [CE]  abstract  method  getNumericalVariance()  in  IntegerDistribution  cannot  be  accessed  directly  [CONTEXT]    public  double  getNumericalVariance()  {    [BUGGY]  if(numericalVarianceIsCalculated  &&  super.getNumericalVariance()  <  0)  {  [BUGGY]    numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	279	279	1	replace	if(numericalVarianceIsCalculated  &&  super.getNumericalVariance()  <  0)  {	  if(numericalVarianceIsCalculated)    {    	non-compiled	[CE]  abstract  method  getNumericalVariance()  in  IntegerDistribution  cannot  be  accessed  directly	23	None
4713	[BUG]  [BUGGY]  if(getNumberOfSuccesses  >  1)  {  if(getNumberOfSuccesses  >  0)  {  return(double)getNumberOfSuccesses()  *  getPopulationSize();  }  [CE]  illegal  start  of  expression  [CONTEXT]    public  double  getNumericalMean()  {    [BUGGY]  if(getNumberOfSuccesses  >  1)  {  if(getNumberOfSuccesses  >  0)  {  return(double)getNumberOfSuccesses()  *  getPopulationSize();  }  [BUGGY]    return  (double)  (getSampleSize()  *  getNumberOfSuccesses())  /  (double)  getPopulationSize();  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalMean  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	268	268	1	replace	if(getNumberOfSuccesses  >  1)  {  if(getNumberOfSuccesses  >  0)  {  return(double)getNumberOfSuccesses()  *  getPopulationSize();  }	      if(getNumberOfSuccesses()    >    0)    {    if(getNumberOfSuccesses()    >    0)    {    return(double)getNumberOfSuccesses()    *    getPopulationSize();    }    	non-compiled	[CE]  illegal  start  of  expression	73	None
4743	[BUG]  [BUGGY]  checkNumberOfSuccesses(),  getNumberOfSuccesses();  [CE]  ';'  expected  [CONTEXT]    public  double  getNumericalMean()  {    [BUGGY]  checkNumberOfSuccesses(),  getNumberOfSuccesses();  [BUGGY]    return  (double)  (getSampleSize()  *  getNumberOfSuccesses())  /  (double)  getPopulationSize();  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalMean  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	268	268	1	replace	checkNumberOfSuccesses(),  getNumberOfSuccesses();	      getNumberOfSuccesses();    	non-compiled	[CE]  ';'  expected	422	None
4744	[BUG]  [BUGGY]  checkNumberOfSuccesses(n);  [CE]  cannot  find  symbol  n  [CONTEXT]    public  double  getNumericalMean()  {    [BUGGY]  checkNumberOfSuccesses(n);  [BUGGY]    return  (double)  (getSampleSize()  *  getNumberOfSuccesses())  /  (double)  getPopulationSize();  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalMean  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	268	268	1	replace	checkNumberOfSuccesses(n);	      getNumberOfSuccesses();    	non-compiled	[CE]  cannot  find  symbol  n	422	None
4773	[BUG]  [BUGGY]  numericalVariance  =  Math.max(numberOfSuccesses,  1);  [CE]  missing  return  statement  [CONTEXT]    public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }    [BUGGY]  numericalVariance  =  Math.max(numberOfSuccesses,  1);  [BUGGY]    }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	283	283	1	replace	numericalVariance  =  Math.max(numberOfSuccesses,  1);	  return    numericalVariance    /(numericalVariance    >    0)?    numericalVariance    :    null;    	non-compiled	[CE]  missing  return  statement	153	None
4803	[BUG]  [BUGGY]  int  numberOfSuccesses  =  getNumberOfSuccesses(m);  [CE]  cannot  find  symbol  m  [CONTEXT]    public  int  getSupportLowerBound()  {    [BUGGY]  int  numberOfSuccesses  =  getNumberOfSuccesses(m);  [BUGGY]    return  FastMath.max(0,        getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  }  [CLASS]  HypergeometricDistribution  [METHOD]  getSupportLowerBound  [RETURN_TYPE]  int  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	308	309	1	replace	int  numberOfSuccesses  =  getNumberOfSuccesses(m);	      int    numberOfSuccesses    =    getNumberOfSuccesses();    	non-compiled	[CE]  cannot  find  symbol  m	82	None
4833	[BUG]  [BUGGY]  numericalVarianceIsCalculated  =  real;  [CE]  cannot  find  symbol  real  [CONTEXT]    public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();    [BUGGY]  numericalVarianceIsCalculated  =  real;  [BUGGY]    }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	281	281	1	replace	numericalVarianceIsCalculated  =  real;	  numericalVarianceIsCalculated    =    false;    	non-compiled	[CE]  cannot  find  symbol  real	122	None
4834	[BUG]  [BUGGY]  numericalVarianceIsCalculated  =  actual;  [CE]  cannot  find  symbol  actual  [CONTEXT]    public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();    [BUGGY]  numericalVarianceIsCalculated  =  actual;  [BUGGY]    }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	281	281	1	replace	numericalVarianceIsCalculated  =  actual;	  numericalVarianceIsCalculated    =    false;    	non-compiled	[CE]  cannot  find  symbol  actual	122	None
4864	[BUG]  [BUGGY]  numericalVariance  =  Math.max(numberOfSuccesses,  samplingSize);  [CE]  cannot  find  symbol  samplingSize  [CONTEXT]    public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }    [BUGGY]  numericalVariance  =  Math.max(numberOfSuccesses,  samplingSize);  [BUGGY]    }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	283	283	1	replace	numericalVariance  =  Math.max(numberOfSuccesses,  samplingSize);	  return    numericalVariance    /(numericalVarianceIsCalculated));    	non-compiled	[CE]  cannot  find  symbol  samplingSize	154	None
4892	[BUG]  [BUGGY]  [Delete]  [CE]  illegal  start  of  expression  [CONTEXT]    public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {    [BUGGY]  [Delete]  [BUGGY]    numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	280	280	1	replace	[Delete]	      if(!numericalVarianceIsCalculated)    {    if(!numericalVarianceIsCalculated)    {    numericalVariance    =    calculateNumberOfSuccesses();    }    	non-compiled	[CE]  illegal  start  of  expression	42	None
4921	[BUG]  [BUGGY]  numericalVariance  =  Math.floor(numberOfSuccesses  -  1);  [CE]  illegal  start  of  type  [CONTEXT]    public  double  getNumericalVariance()  {    [BUGGY]  numericalVariance  =  Math.floor(numberOfSuccesses  -  1);  [BUGGY]    if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	279	279	1	replace	numericalVariance  =  Math.floor(numberOfSuccesses  -  1);	      double    numericalVariance    =    getNumberOfSuccesses()    /    2.0;    	non-compiled	[CE]  illegal  start  of  type	4	None
4922	[BUG]  [BUGGY]  numericalVariance  =  Math.max(numberOfSuccesses  -  1);  [CE]  illegal  start  of  type  [CONTEXT]    public  double  getNumericalVariance()  {    [BUGGY]  numericalVariance  =  Math.max(numberOfSuccesses  -  1);  [BUGGY]    if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	279	279	1	replace	numericalVariance  =  Math.max(numberOfSuccesses  -  1);	      double    numericalVariance    =    getNumberOfSuccesses()    /    2.0;    	non-compiled	[CE]  illegal  start  of  type	4	None
4923	[BUG]  [BUGGY]  numericalVariance  =  Math.max(numberOfSuccesses  /  2);  [CE]  illegal  start  of  type  [CONTEXT]    public  double  getNumericalVariance()  {    [BUGGY]  numericalVariance  =  Math.max(numberOfSuccesses  /  2);  [BUGGY]    if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	279	279	1	replace	numericalVariance  =  Math.max(numberOfSuccesses  /  2);	      double    numericalVariance    =    getNumberOfSuccesses()    /    2.0;    	non-compiled	[CE]  illegal  start  of  type	4	None
4924	[BUG]  [BUGGY]  numericalVariance  =  Math.min(numberOfSuccesses  -  1);  [CE]  illegal  start  of  type  [CONTEXT]    public  double  getNumericalVariance()  {    [BUGGY]  numericalVariance  =  Math.min(numberOfSuccesses  -  1);  [BUGGY]    if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	279	279	1	replace	numericalVariance  =  Math.min(numberOfSuccesses  -  1);	      double    numericalVariance    =    getNumberOfSuccesses()    /    2.0;    	non-compiled	[CE]  illegal  start  of  type	4	None
4953	[BUG]  [BUGGY]  double  numericalVariance  =  Math.floor(getMean());  [CE]  illegal  start  of  type  [CONTEXT]    public  double  getNumericalVariance()  {    [BUGGY]  double  numericalVariance  =  Math.floor(getMean());  [BUGGY]    if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	279	279	1	replace	double  numericalVariance  =  Math.floor(getMean());	      double    numericalVariance    =    Math.max(getNumberOfSuccesses(),    numberOfSuccesses);    	non-compiled	[CE]  illegal  start  of  type	543	None
4954	[BUG]  [BUGGY]  double  numericalVariance  =  Math.floor(getSlope()  -  1);  [CE]  illegal  start  of  type  [CONTEXT]    public  double  getNumericalVariance()  {    [BUGGY]  double  numericalVariance  =  Math.floor(getSlope()  -  1);  [BUGGY]    if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	279	279	1	replace	double  numericalVariance  =  Math.floor(getSlope()  -  1);	      double    numericalVariance    =    Math.max(getNumberOfSuccesses(),    numberOfSuccesses);    	non-compiled	[CE]  illegal  start  of  type	543	None
4984	[BUG]  [BUGGY]  if(!negatementalVarianceIsCalculated)  {  [CE]  cannot  find  symbol  negatementalVarianceIsCalculated  [CONTEXT]    public  double  getNumericalVariance()  {    [BUGGY]  if(!negatementalVarianceIsCalculated)  {  [BUGGY]    numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	279	279	1	replace	if(!negatementalVarianceIsCalculated)  {	  if(numericalVarianceIsCalculated)    {    	non-compiled	[CE]  cannot  find  symbol  negatementalVarianceIsCalculated	23	None
5013	[BUG]  [BUGGY]  final  double  k  =  getDayOfMonth().doubleValue;  [CE]  cannot  find  symbol  [CONTEXT]    protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();  final  double  m  =  getNumberOfSuccesses();    [BUGGY]  final  double  k  =  getDayOfMonth().doubleValue;  [BUGGY]    final  double  n  =  getSampleSize();  return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	294	294	1	replace	final  double  k  =  getDayOfMonth().doubleValue;	      final    double    k    =    getDayOfMonth();    	non-compiled	[CE]  cannot  find  symbol	483	None
5044	[BUG]  [BUGGY]  return(double)(getNumberOfSuccesses()  *  getEnumSize())/(double)getPopulationSize();  [CE]  cannot  find  symbol  [CONTEXT]    public  double  getNumericalMean()  {    [BUGGY]  return(double)(getNumberOfSuccesses()  *  getEnumSize())/(double)getPopulationSize();  [BUGGY]    }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalMean  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	268	268	1	replace	return(double)(getNumberOfSuccesses()  *  getEnumSize())/(double)getPopulationSize();	  return(double)(getNumberOfSuccesses()    *    getSampleSize())/(double)getPopulationSize();    	non-compiled	[CE]  cannot  find  symbol	113	None
5073	[BUG]  [BUGGY]  numericalVariance  =  calculateNumberOfSuccesses(n);  [CE]  cannot  find  symbol  n  [CONTEXT]    public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();    [BUGGY]  numericalVariance  =  calculateNumberOfSuccesses(n);  [BUGGY]    numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	281	281	1	replace	numericalVariance  =  calculateNumberOfSuccesses(n);	      numericalVariance    =    calculateNumberOfSuccesses();    	non-compiled	[CE]  cannot  find  symbol  n	324	None
5074	[BUG]  [BUGGY]  numericalVariance  =  calculateNumberOfSuccesses(populationSize);  [CE]  cannot  find  symbol  [CONTEXT]    public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();    [BUGGY]  numericalVariance  =  calculateNumberOfSuccesses(populationSize);  [BUGGY]    numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	281	281	1	replace	numericalVariance  =  calculateNumberOfSuccesses(populationSize);	      numericalVariance    =    calculateNumberOfSuccesses();    	non-compiled	[CE]  cannot  find  symbol	324	None
5104	[BUG]  [BUGGY]  return  numericalVariance  *  n;  [CE]  cannot  find  symbol  n  [CONTEXT]    public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }    [BUGGY]  return  numericalVariance  *  n;  [BUGGY]    }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	283	283	1	replace	return  numericalVariance  *  n;	  return    numericalVariance    *    numberOfSuccesses;    	non-compiled	[CE]  cannot  find  symbol  n	343	None
5131	[BUG]  [BUGGY]  return  numericalVariance  *  numberOfSuccesses;  numberOfSuccesses  =  getPopulationSize();  [CE]  cannot  assign  a  value  to  final  variable  numberOfSuccesses  [CONTEXT]    public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }    [BUGGY]  return  numericalVariance  *  numberOfSuccesses;  numberOfSuccesses  =  getPopulationSize();  [BUGGY]    }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	283	283	1	replace	return    numericalVariance    *    numberOfSuccesses;    numberOfSuccesses  =  getPopulationSize();	  	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  numberOfSuccesses	342	None
5132	[BUG]  [BUGGY]  return  numericalVariance  *  numberOfSuccesses;  numberOfSuccesses  =  Math.max(numberOfSuccesses,  numericalVariance);  [CE]  cannot  assign  a  value  to  final  variable  numberOfSuccesses  [CONTEXT]    public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }    [BUGGY]  return  numericalVariance  *  numberOfSuccesses;  numberOfSuccesses  =  Math.max(numberOfSuccesses,  numericalVariance);  [BUGGY]    }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	283	283	1	replace	return    numericalVariance    *    numberOfSuccesses;    numberOfSuccesses  =  Math.max(numberOfSuccesses,  numericalVariance);	  	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  numberOfSuccesses	342	None
5133	[BUG]  [BUGGY]  return  numericalVariance  *  numberOfSuccesses;  numberOfSuccesses  =  Math.max(numberOfSuccesses  /  numberOfSuccesses);  [CE]  cannot  assign  a  value  to  final  variable  numberOfSuccesses  [CONTEXT]    public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }    [BUGGY]  return  numericalVariance  *  numberOfSuccesses;  numberOfSuccesses  =  Math.max(numberOfSuccesses  /  numberOfSuccesses);  [BUGGY]    }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	283	283	1	replace	return    numericalVariance    *    numberOfSuccesses;    numberOfSuccesses  =  Math.max(numberOfSuccesses  /  numberOfSuccesses);	  	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  numberOfSuccesses	342	None
5134	[BUG]  [BUGGY]  return  numericalVariance  *  numberOfSuccesses;  numberOfSuccesses  =  Math.max(numberOfSuccesses,  m);  [CE]  cannot  assign  a  value  to  final  variable  numberOfSuccesses  [CONTEXT]    public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }    [BUGGY]  return  numericalVariance  *  numberOfSuccesses;  numberOfSuccesses  =  Math.max(numberOfSuccesses,  m);  [BUGGY]    }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	283	283	1	replace	return    numericalVariance    *    numberOfSuccesses;    numberOfSuccesses  =  Math.max(numberOfSuccesses,  m);	  	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  numberOfSuccesses	342	None
5135	[BUG]  [BUGGY]  return  numericalVariance  *  numberOfSuccesses;  numberOfSuccesses  =  Math.max(numberOfSuccesses  /  numberOfSuccesses  -  1);  [CE]  cannot  assign  a  value  to  final  variable  numberOfSuccesses  [CONTEXT]    public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }    [BUGGY]  return  numericalVariance  *  numberOfSuccesses;  numberOfSuccesses  =  Math.max(numberOfSuccesses  /  numberOfSuccesses  -  1);  [BUGGY]    }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	283	283	1	replace	return    numericalVariance    *    numberOfSuccesses;    numberOfSuccesses  =  Math.max(numberOfSuccesses  /  numberOfSuccesses  -  1);	  	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  numberOfSuccesses	342	None
5162	[BUG]  [BUGGY]  final  double  n  =  getSampleNumberOfSuccesses(n);  [CE]  cannot  find  symbol  [CONTEXT]    protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();  final  double  m  =  getNumberOfSuccesses();    [BUGGY]  final  double  n  =  getSampleNumberOfSuccesses(n);  [BUGGY]    return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	294	294	1	replace	final  double  n  =  getSampleNumberOfSuccesses(n);	  final    double    n    =    getSampleNumberOfSuccesses();    	non-compiled	[CE]  cannot  find  symbol	333	None
5163	[BUG]  [BUGGY]  final  double  n  =  getSampleNumberOfSuccesses(m);  [CE]  cannot  find  symbol  [CONTEXT]    protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();  final  double  m  =  getNumberOfSuccesses();    [BUGGY]  final  double  n  =  getSampleNumberOfSuccesses(m);  [BUGGY]    return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	294	294	1	replace	final  double  n  =  getSampleNumberOfSuccesses(m);	  final    double    n    =    getSampleNumberOfSuccesses();    	non-compiled	[CE]  cannot  find  symbol	333	None
5192	[BUG]  [BUGGY]  double  numericalVariance  =  getNumberOfSuccesses()  /(populationSize  -  1);  [CE]  missing  return  statement  [CONTEXT]    public  int  getSupportLowerBound()  {    [BUGGY]  double  numericalVariance  =  getNumberOfSuccesses()  /(populationSize  -  1);  [BUGGY]    getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  }  [CLASS]  HypergeometricDistribution  [METHOD]  getSupportLowerBound  [RETURN_TYPE]  int  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	308	309	1	replace	double  numericalVariance  =  getNumberOfSuccesses()  /(populationSize  -  1);	      	non-compiled	[CE]  missing  return  statement	5	None
5193	[BUG]  [BUGGY]  double  numericalVariance  =  getNumberOfSuccesses()  *(populationSize  -  1);  [CE]  missing  return  statement  [CONTEXT]    public  int  getSupportLowerBound()  {    [BUGGY]  double  numericalVariance  =  getNumberOfSuccesses()  *(populationSize  -  1);  [BUGGY]    getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  }  [CLASS]  HypergeometricDistribution  [METHOD]  getSupportLowerBound  [RETURN_TYPE]  int  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	308	309	1	replace	double  numericalVariance  =  getNumberOfSuccesses()  *(populationSize  -  1);	      	non-compiled	[CE]  missing  return  statement	5	None
5224	[BUG]  [BUGGY]  [FE]  AssertionError  testMath1021  [CONTEXT]    public  double  getNumericalMean()  {    [BUGGY]      int  k  =  getNumberOfSuccesses();  k  =  getNumberOfSuccesses();  [BUGGY]    return  (double)  (getSampleSize()  *  getNumberOfSuccesses())  /  (double)  getPopulationSize();  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalMean  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	268	268	1	add	        int    k    =    getNumberOfSuccesses();    k  =  getNumberOfSuccesses();	  	compilable	  [FE]  AssertionError  testMath1021	362	1
5225	[BUG]  [BUGGY]      int  k  =  getNumberOfSuccesses();  k  =  getNumberOfSuccesses();  [FE]  AssertionError  testMath1021  [CONTEXT]    public  double  getNumericalMean()  {    [BUGGY]      int  k  =  getNumberOfSuccesses();  k  =  getNumberOfSuccesses();  [BUGGY]    return  (double)  (getSampleSize()  *  getNumberOfSuccesses())  /  (double)  getPopulationSize();  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalMean  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	268	268	1	replace	        int    k    =    getNumberOfSuccesses();    k  =  getNumberOfSuccesses();	  	compilable	  [FE]  AssertionError  testMath1021	362	1
5225	[BUG]  [BUGGY]      int  k  =  getNumberOfSuccesses();  g  =  getNumberOfSuccesses();  [CE]  cannot  find  symbol  g  [CONTEXT]    public  double  getNumericalMean()  {    [BUGGY]      int  k  =  getNumberOfSuccesses();  g  =  getNumberOfSuccesses();  [BUGGY]    return  (double)  (getSampleSize()  *  getNumberOfSuccesses())  /  (double)  getPopulationSize();  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalMean  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	268	268	1	replace	        int    k    =    getNumberOfSuccesses();    g  =  getNumberOfSuccesses();	  	non-compiled	[CE]  cannot  find  symbol  g	362	None
5251	[BUG]  [BUGGY]  if(getNumberOfSuccesses()  >  0)  {  if(getNumberOfSuccesses()  >  0)  {  return  getNumberOfSuccesses()  *  getPopulationSize();  }  [CE]  illegal  start  of  expression  [CONTEXT]    public  double  getNumericalMean()  {    [BUGGY]  if(getNumberOfSuccesses()  >  0)  {  if(getNumberOfSuccesses()  >  0)  {  return  getNumberOfSuccesses()  *  getPopulationSize();  }  [BUGGY]    return  (double)  (getSampleSize()  *  getNumberOfSuccesses())  /  (double)  getPopulationSize();  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalMean  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	268	268	1	replace	if(getNumberOfSuccesses()  >  0)  {  if(getNumberOfSuccesses()  >  0)  {  return  getNumberOfSuccesses()  *  getPopulationSize();  }	      if(getNumberOfSuccesses()    >    0)    {    if(getNumberOfSuccesses()    >    0)    {    return    getNumberOfSuccesses()    *    getNumberOfSuccesses();    }    	non-compiled	[CE]  illegal  start  of  expression	74	None
5252	[BUG]  [BUGGY]  if(getNumberOfSuccesses  >  0)  {  if(getNumberOfSuccesses  >  0)  {  return  getNumberOfSuccesses()  *  getPopulationSize();  }  [CE]  illegal  start  of  expression  [CONTEXT]    public  double  getNumericalMean()  {    [BUGGY]  if(getNumberOfSuccesses  >  0)  {  if(getNumberOfSuccesses  >  0)  {  return  getNumberOfSuccesses()  *  getPopulationSize();  }  [BUGGY]    return  (double)  (getSampleSize()  *  getNumberOfSuccesses())  /  (double)  getPopulationSize();  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalMean  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	268	268	1	replace	if(getNumberOfSuccesses  >  0)  {  if(getNumberOfSuccesses  >  0)  {  return  getNumberOfSuccesses()  *  getPopulationSize();  }	      if(getNumberOfSuccesses()    >    0)    {    if(getNumberOfSuccesses()    >    0)    {    return    getNumberOfSuccesses()    *    getNumberOfSuccesses();    }    	non-compiled	[CE]  illegal  start  of  expression	74	None
5253	[BUG]  [BUGGY]  if(getNumberOfSuccesses  >  0)  {  if(getNumberOfSuccesses  >  0)  {  return  getNumberOfSuccesses()  *  getNumberOfSuccesses();  }  [CE]  illegal  start  of  expression  [CONTEXT]    public  double  getNumericalMean()  {    [BUGGY]  if(getNumberOfSuccesses  >  0)  {  if(getNumberOfSuccesses  >  0)  {  return  getNumberOfSuccesses()  *  getNumberOfSuccesses();  }  [BUGGY]    return  (double)  (getSampleSize()  *  getNumberOfSuccesses())  /  (double)  getPopulationSize();  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalMean  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	268	268	1	replace	if(getNumberOfSuccesses  >  0)  {  if(getNumberOfSuccesses  >  0)  {  return  getNumberOfSuccesses()  *  getNumberOfSuccesses();  }	      if(getNumberOfSuccesses()    >    0)    {    if(getNumberOfSuccesses()    >    0)    {    return    getNumberOfSuccesses()    *    getNumberOfSuccesses();    }    	non-compiled	[CE]  illegal  start  of  expression	74	None
5254	[BUG]  [BUGGY]  if(getNumberOfSuccesses  >  1)  {  if(getNumberOfSuccesses  >  0)  {  return  getNumberOfSuccesses()  *  getPopulationSize();  }  [CE]  illegal  start  of  expression  [CONTEXT]    public  double  getNumericalMean()  {    [BUGGY]  if(getNumberOfSuccesses  >  1)  {  if(getNumberOfSuccesses  >  0)  {  return  getNumberOfSuccesses()  *  getPopulationSize();  }  [BUGGY]    return  (double)  (getSampleSize()  *  getNumberOfSuccesses())  /  (double)  getPopulationSize();  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalMean  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	268	268	1	replace	if(getNumberOfSuccesses  >  1)  {  if(getNumberOfSuccesses  >  0)  {  return  getNumberOfSuccesses()  *  getPopulationSize();  }	      if(getNumberOfSuccesses()    >    0)    {    if(getNumberOfSuccesses()    >    0)    {    return    getNumberOfSuccesses()    *    getNumberOfSuccesses();    }    	non-compiled	[CE]  illegal  start  of  expression	74	None
5314	[BUG]  [BUGGY]      int  populationSize  =  getNumberOfSuccesses();  if(numericalVarianceIsCalculated  &&  Math.abs(numberOfSuccesses)>  0)  {  [CE]  illegal  start  of  expression  [CONTEXT]    public  int  getSupportLowerBound()  {    [BUGGY]      int  populationSize  =  getNumberOfSuccesses();  if(numericalVarianceIsCalculated  &&  Math.abs(numberOfSuccesses)>  0)  {  [BUGGY]    return  FastMath.max(0,        getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  }  [CLASS]  HypergeometricDistribution  [METHOD]  getSupportLowerBound  [RETURN_TYPE]  int  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	308	309	1	replace	        int    populationSize    =    getNumberOfSuccesses();    if(numericalVarianceIsCalculated  &&  Math.abs(numberOfSuccesses)>  0)  {	  	non-compiled	[CE]  illegal  start  of  expression	65	None
5343	[BUG]  [BUGGY]  final  double  m  =  getNumberOfSuccesses()  *  getDimensions();  [CE]  cannot  find  symbol  [CONTEXT]    protected  double  calculateNumericalVariance()  {    [BUGGY]  final  double  m  =  getNumberOfSuccesses()  *  getDimensions();  [BUGGY]    final  double  N  =  getPopulationSize();  final  double  m  =  getNumberOfSuccesses();  final  double  n  =  getSampleSize();  return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	292	292	1	replace	final  double  m  =  getNumberOfSuccesses()  *  getDimensions();	      final    double    N    =    getNumberOfSuccesses().doubleValue();    	non-compiled	[CE]  cannot  find  symbol	164	None
5401	[BUG]  [BUGGY]  n  =  getNumberOfSuccesses()  *  Math.pow(n,  m);  [CE]  cannot  find  symbol  n  [CONTEXT]    public  double  getNumericalMean()  {    [BUGGY]  n  =  getNumberOfSuccesses()  *  Math.pow(n,  m);  [BUGGY]    return  (double)  (getSampleSize()  *  getNumberOfSuccesses())  /  (double)  getPopulationSize();  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalMean  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	268	268	1	replace	n  =  getNumberOfSuccesses()  *  Math.pow(n,  m);	      if(getNumberOfSuccesses()    >    0)    {    int    k    =    getNumberOfSuccesses();    if(k    >    0)    {    return    getNumberOfSuccesses()    *    getNumberOfSuccesses();    }    	non-compiled	[CE]  cannot  find  symbol  n	365	None
5403	[BUG]  [BUGGY]  n  =  getNumberOfSuccesses()  *  Math.pow(n,  N);  [CE]  cannot  find  symbol  n  [CONTEXT]    public  double  getNumericalMean()  {    [BUGGY]  n  =  getNumberOfSuccesses()  *  Math.pow(n,  N);  [BUGGY]    return  (double)  (getSampleSize()  *  getNumberOfSuccesses())  /  (double)  getPopulationSize();  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalMean  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	268	268	1	replace	n  =  getNumberOfSuccesses()  *  Math.pow(n,  N);	      if(getNumberOfSuccesses()    >    0)    {    int    k    =    getNumberOfSuccesses();    if(k    >    0)    {    return    getNumberOfSuccesses()    *    getNumberOfSuccesses();    }    	non-compiled	[CE]  cannot  find  symbol  n	365	None
5404	[BUG]  [BUGGY]  n  =  getNumberOfSuccesses()  *  Math.pow(n,  M);  [CE]  cannot  find  symbol  n  [CONTEXT]    public  double  getNumericalMean()  {    [BUGGY]  n  =  getNumberOfSuccesses()  *  Math.pow(n,  M);  [BUGGY]    return  (double)  (getSampleSize()  *  getNumberOfSuccesses())  /  (double)  getPopulationSize();  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalMean  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	268	268	1	replace	n  =  getNumberOfSuccesses()  *  Math.pow(n,  M);	      if(getNumberOfSuccesses()    >    0)    {    int    k    =    getNumberOfSuccesses();    if(k    >    0)    {    return    getNumberOfSuccesses()    *    getNumberOfSuccesses();    }    	non-compiled	[CE]  cannot  find  symbol  n	365	None
5462	[BUG]  [BUGGY]  double  numericalVariance  =  Math.max(getNumberOfSuccesses()  -  1,  populationSize);  [CE]  illegal  start  of  type  [CONTEXT]    public  double  getNumericalVariance()  {    [BUGGY]  double  numericalVariance  =  Math.max(getNumberOfSuccesses()  -  1,  populationSize);  [BUGGY]    if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	279	279	1	replace	double  numericalVariance  =  Math.max(getNumberOfSuccesses()  -  1,  populationSize);	      double    numericalVariance    =    Math.max(getNumberOfSuccesses()    -    1);    	non-compiled	[CE]  illegal  start  of  type	545	None
5464	[BUG]  [BUGGY]  double  numericalVariance  =  Math.max(getNumberOfSuccesses()  /  1);  [CE]  illegal  start  of  type  [CONTEXT]    public  double  getNumericalVariance()  {    [BUGGY]  double  numericalVariance  =  Math.max(getNumberOfSuccesses()  /  1);  [BUGGY]    if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	279	279	1	replace	double  numericalVariance  =  Math.max(getNumberOfSuccesses()  /  1);	      double    numericalVariance    =    Math.max(getNumberOfSuccesses()    -    1);    	non-compiled	[CE]  illegal  start  of  type	545	None
5493	[BUG]  [BUGGY]  numericalVariance  =  Math.min(numberOfSuccesses  -  1,  getSampleSize());  [CE]  missing  return  statement  [CONTEXT]    public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }    [BUGGY]  numericalVariance  =  Math.min(numberOfSuccesses  -  1,  getSampleSize());  [BUGGY]    }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	283	283	1	replace	numericalVariance  =  Math.min(numberOfSuccesses  -  1,  getSampleSize());	  return    numericalVariance    /(numericalVariance    >    0)?    numericalVariance    :    null;    	non-compiled	[CE]  missing  return  statement	153	None
5494	[BUG]  [BUGGY]  numericalVariance  =  Math.min(numberOfSuccesses  /  sampleSize);  [CE]  no  suitable  method  found  for  min(int)  [CONTEXT]    public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }    [BUGGY]  numericalVariance  =  Math.min(numberOfSuccesses  /  sampleSize);  [BUGGY]    }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	283	283	1	replace	numericalVariance  =  Math.min(numberOfSuccesses  /  sampleSize);	  return    numericalVariance    /(numericalVariance    >    0)?    numericalVariance    :    null;    	non-compiled	[CE]  no  suitable  method  found  for  min(int)	153	None
5521	[BUG]  [BUGGY]  final  int  N  =  getNumberOfSuccesses();  [CE]  variable  N  is  already  defined  in  method  calculateNumericalVariance()  [CONTEXT]    protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();  final  double  m  =  getNumberOfSuccesses();    [BUGGY]  final  int  N  =  getNumberOfSuccesses();  [BUGGY]    final  double  n  =  getSampleSize();  return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	294	294	1	replace	final  int  N  =  getNumberOfSuccesses();	      final    int    N    =    getPopulationSize();    	non-compiled	[CE]  variable  N  is  already  defined  in  method  calculateNumericalVariance()	54	None
5523	[BUG]  [BUGGY]  final  int  N  =  getPopulationSize()  -  1;  [CE]  variable  N  is  already  defined  in  method  calculateNumericalVariance()  [CONTEXT]    protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();  final  double  m  =  getNumberOfSuccesses();    [BUGGY]  final  int  N  =  getPopulationSize()  -  1;  [BUGGY]    final  double  n  =  getSampleSize();  return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	294	294	1	replace	final  int  N  =  getPopulationSize()  -  1;	      final    int    N    =    getPopulationSize();    	non-compiled	[CE]  variable  N  is  already  defined  in  method  calculateNumericalVariance()	54	None
5553	[BUG]  [BUGGY]  final  double  dx  =  getDecimalVariance();  [CE]  cannot  find  symbol  [CONTEXT]    protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();    [BUGGY]  final  double  dx  =  getDecimalVariance();  [BUGGY]    final  double  n  =  getSampleSize();  return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	293	293	1	replace	final  double  dx  =  getDecimalVariance();	  final    double    m    =    getNumberOfSuccesses()    *    2;    	non-compiled	[CE]  cannot  find  symbol	184	None
5554	[BUG]  [BUGGY]  final  double  dx  =  getDayOfMonth();  [CE]  cannot  find  symbol  [CONTEXT]    protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();    [BUGGY]  final  double  dx  =  getDayOfMonth();  [BUGGY]    final  double  n  =  getSampleSize();  return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	293	293	1	replace	final  double  dx  =  getDayOfMonth();	  final    double    m    =    getNumberOfSuccesses()    *    2;    	non-compiled	[CE]  cannot  find  symbol	184	None
5583	[BUG]  [BUGGY]  return(double)(getSummarySize()  *  getNumberOfSuccesses())/(double)getSummarySize();  [CE]  cannot  find  symbol  [CONTEXT]    public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();    [BUGGY]  return(double)(getSummarySize()  *  getNumberOfSuccesses())/(double)getSummarySize();  [BUGGY]    }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	281	281	1	replace	return(double)(getSummarySize()  *  getNumberOfSuccesses())/(double)getSummarySize();	  numericalVarianceIisCalculated    =    false;    	non-compiled	[CE]  cannot  find  symbol	124	None
5584	[BUG]  [BUGGY]  return(double)(getPopulationSize()  *  getNumberOfSuccesses())/(double)getSummarySize();  [CE]  cannot  find  symbol  [CONTEXT]    public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();    [BUGGY]  return(double)(getPopulationSize()  *  getNumberOfSuccesses())/(double)getSummarySize();  [BUGGY]    }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	281	281	1	replace	return(double)(getPopulationSize()  *  getNumberOfSuccesses())/(double)getSummarySize();	  numericalVarianceIisCalculated    =    false;    	non-compiled	[CE]  cannot  find  symbol	124	None
5612	[BUG]  [BUGGY]  int  k  =  getNumberOfSuccesses();  if(k  >  0)  {  return  getNumberOfSuccesses();  [CE]  illegal  start  of  expression  [CONTEXT]    public  double  getNumericalMean()  {    [BUGGY]  int  k  =  getNumberOfSuccesses();  if(k  >  0)  {  return  getNumberOfSuccesses();  [BUGGY]    return  (double)  (getSampleSize()  *  getNumberOfSuccesses())  /  (double)  getPopulationSize();  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalMean  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	268	268	1	replace	int  k  =  getNumberOfSuccesses();  if(k  >  0)  {  return  getNumberOfSuccesses();	      if(getNumberOfSuccesses()    >    0)    {    int    k    =    getNumberOfSuccesses();    if(k    >    0)    {    return    getNumberOfSuccesses();    }    	non-compiled	[CE]  illegal  start  of  expression	364	None
5613	[BUG]  [BUGGY]  int  k  =  getNumberOfSuccesses();  if(k  >  0)return  getNumberOfSuccesses();  [CE]  missing  return  statement  [CONTEXT]    public  double  getNumericalMean()  {    [BUGGY]  int  k  =  getNumberOfSuccesses();  if(k  >  0)return  getNumberOfSuccesses();  [BUGGY]    return  (double)  (getSampleSize()  *  getNumberOfSuccesses())  /  (double)  getPopulationSize();  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalMean  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	268	268	1	replace	int  k  =  getNumberOfSuccesses();  if(k  >  0)return  getNumberOfSuccesses();	      if(getNumberOfSuccesses()    >    0)    {    int    k    =    getNumberOfSuccesses();    if(k    >    0)    {    return    getNumberOfSuccesses();    }    	non-compiled	[CE]  missing  return  statement	364	None
5641	[BUG]  [BUGGY]  if(getNumberOfSuccesses  >  0)  {  if(getPopulationSize()  >  0)  {  return  FastMath.min(10,  getNumberOfSuccesses()  -  getPopulationSize());  }  [CE]  illegal  start  of  expression  [CONTEXT]    public  int  getSupportLowerBound()  {    [BUGGY]  if(getNumberOfSuccesses  >  0)  {  if(getPopulationSize()  >  0)  {  return  FastMath.min(10,  getNumberOfSuccesses()  -  getPopulationSize());  }  [BUGGY]    return  FastMath.max(0,        getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  }  [CLASS]  HypergeometricDistribution  [METHOD]  getSupportLowerBound  [RETURN_TYPE]  int  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	308	309	1	replace	if(getNumberOfSuccesses  >  0)  {  if(getPopulationSize()  >  0)  {  return  FastMath.min(10,  getNumberOfSuccesses()  -  getPopulationSize());  }	      if(getNumberOfSuccesses()    >    0)    {    if(getPopulationSize()    >    0)    {    return    FastMath.min(10,    getNumberOfSuccesses()    -    getPopulationSize());    }    	non-compiled	[CE]  illegal  start  of  expression	62	None
5643	[BUG]  [BUGGY]  if(getPopulationSize()  >  0)  {  if(getPopulationSize()  >  0)  {  return  FastMath.min(10,  getNumberOfSuccesses()  -  getPopulationSize());  }  [CE]  illegal  start  of  expression  [CONTEXT]    public  int  getSupportLowerBound()  {    [BUGGY]  if(getPopulationSize()  >  0)  {  if(getPopulationSize()  >  0)  {  return  FastMath.min(10,  getNumberOfSuccesses()  -  getPopulationSize());  }  [BUGGY]    return  FastMath.max(0,        getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  }  [CLASS]  HypergeometricDistribution  [METHOD]  getSupportLowerBound  [RETURN_TYPE]  int  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	308	309	1	replace	if(getPopulationSize()  >  0)  {  if(getPopulationSize()  >  0)  {  return  FastMath.min(10,  getNumberOfSuccesses()  -  getPopulationSize());  }	      if(getNumberOfSuccesses()    >    0)    {    if(getPopulationSize()    >    0)    {    return    FastMath.min(10,    getNumberOfSuccesses()    -    getPopulationSize());    }    	non-compiled	[CE]  illegal  start  of  expression	62	None
5644	[BUG]  [BUGGY]  if(getNumberOfSuccesses  >  0)  }  if(getPopulationSize()  >  0)  {  return  FastMath.min(10,  getNumberOfSuccesses()  -  getPopulationSize());  }  [CE]  illegal  start  of  expression  [CONTEXT]    public  int  getSupportLowerBound()  {    [BUGGY]  if(getNumberOfSuccesses  >  0)  }  if(getPopulationSize()  >  0)  {  return  FastMath.min(10,  getNumberOfSuccesses()  -  getPopulationSize());  }  [BUGGY]    return  FastMath.max(0,        getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  }  [CLASS]  HypergeometricDistribution  [METHOD]  getSupportLowerBound  [RETURN_TYPE]  int  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	308	309	1	replace	if(getNumberOfSuccesses  >  0)  }  if(getPopulationSize()  >  0)  {  return  FastMath.min(10,  getNumberOfSuccesses()  -  getPopulationSize());  }	      if(getNumberOfSuccesses()    >    0)    {    if(getPopulationSize()    >    0)    {    return    FastMath.min(10,    getNumberOfSuccesses()    -    getPopulationSize());    }    	non-compiled	[CE]  illegal  start  of  expression	62	None
5674	[BUG]  [BUGGY]  unless(!numericalVarianceIsCalculated)  {  if(!numericalVarianceIsCalculated)  {  numericalVariance  =  false;  }  [CE]  ';'  expected  [CONTEXT]    public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();    [BUGGY]  unless(!numericalVarianceIsCalculated)  {  if(!numericalVarianceIsCalculated)  {  numericalVariance  =  false;  }  [BUGGY]    numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	281	281	1	replace	unless(!numericalVarianceIsCalculated)  {  if(!numericalVarianceIsCalculated)  {  numericalVariance  =  false;  }	      if(!numericalVarianceIsCalculated)    {    if(!numericalVarianceIsCalculated)    {    numericalVariance    =    false;    }    	non-compiled	[CE]  ';'  expected	172	None
5702	[BUG]  [BUGGY]  numericalVariance  =  Math.floor(numberOfSuccesses  /  2);  [CE]  missing  return  statement  [CONTEXT]    public  int  getSupportLowerBound()  {    [BUGGY]  numericalVariance  =  Math.floor(numberOfSuccesses  /  2);  [BUGGY]    getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  }  [CLASS]  HypergeometricDistribution  [METHOD]  getSupportLowerBound  [RETURN_TYPE]  int  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	308	309	1	replace	numericalVariance  =  Math.floor(numberOfSuccesses  /  2);	      	non-compiled	[CE]  missing  return  statement	5	None
5703	[BUG]  [BUGGY]  numericalVariance  =  Math.min(numberOfSuccesses  /  2);  [CE]  no  suitable  method  found  for  min(int)  [CONTEXT]    public  int  getSupportLowerBound()  {    [BUGGY]  numericalVariance  =  Math.min(numberOfSuccesses  /  2);  [BUGGY]    getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  }  [CLASS]  HypergeometricDistribution  [METHOD]  getSupportLowerBound  [RETURN_TYPE]  int  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	308	309	1	replace	numericalVariance  =  Math.min(numberOfSuccesses  /  2);	      	non-compiled	[CE]  no  suitable  method  found  for  min(int)	5	None
5704	[BUG]  [BUGGY]  numericalVariance  =  Math.sqrt(getGeometricMean());  [CE]  cannot  find  symbol  [CONTEXT]    public  int  getSupportLowerBound()  {    [BUGGY]  numericalVariance  =  Math.sqrt(getGeometricMean());  [BUGGY]    getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  }  [CLASS]  HypergeometricDistribution  [METHOD]  getSupportLowerBound  [RETURN_TYPE]  int  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	308	309	1	replace	numericalVariance  =  Math.sqrt(getGeometricMean());	      	non-compiled	[CE]  cannot  find  symbol	5	None
5732	[BUG]  [BUGGY]  super.calculateNumberOfSuccesses(dx);  [CE]  cannot  find  symbol  dx  [CONTEXT]    protected  double  calculateNumericalVariance()  {    [BUGGY]  super.calculateNumberOfSuccesses(dx);  [BUGGY]    final  double  N  =  getPopulationSize();  final  double  m  =  getNumberOfSuccesses();  final  double  n  =  getSampleSize();  return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	292	292	1	replace	super.calculateNumberOfSuccesses(dx);	      super.calculateNumberOfSuccesses();    	non-compiled	[CE]  cannot  find  symbol  dx	215	None
5733	[BUG]  [BUGGY]  super.calculateNumberOfSuccesses(dx  -  1);  [CE]  cannot  find  symbol  dx  [CONTEXT]    protected  double  calculateNumericalVariance()  {    [BUGGY]  super.calculateNumberOfSuccesses(dx  -  1);  [BUGGY]    final  double  N  =  getPopulationSize();  final  double  m  =  getNumberOfSuccesses();  final  double  n  =  getSampleSize();  return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	292	292	1	replace	super.calculateNumberOfSuccesses(dx  -  1);	      super.calculateNumberOfSuccesses();    	non-compiled	[CE]  cannot  find  symbol  dx	215	None
5734	[BUG]  [BUGGY]  super.calculateNumberOfSuccesses(n);  [CE]  cannot  find  symbol  n  [CONTEXT]    protected  double  calculateNumericalVariance()  {    [BUGGY]  super.calculateNumberOfSuccesses(n);  [BUGGY]    final  double  N  =  getPopulationSize();  final  double  m  =  getNumberOfSuccesses();  final  double  n  =  getSampleSize();  return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	292	292	1	replace	super.calculateNumberOfSuccesses(n);	      super.calculateNumberOfSuccesses();    	non-compiled	[CE]  cannot  find  symbol  n	215	None
5763	[BUG]  [BUGGY]  double  numericalVariance  =  getNumberOfSuccesses()  /(populationSize  -  1));  [CE]  ';'  expected  [CONTEXT]    public  double  getNumericalVariance()  {    [BUGGY]  double  numericalVariance  =  getNumberOfSuccesses()  /(populationSize  -  1));  [BUGGY]    if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	279	279	1	replace	double  numericalVariance  =  getNumberOfSuccesses()  /(populationSize  -  1));	      double    numericalVariance    =    getNumberOfSuccesses()    /    2.0;    	non-compiled	[CE]  ';'  expected	4	None
5764	[BUG]  [BUGGY]  double  numericalVariance  =  getSampleSize()  *(numberOfSuccesses  -  1));  [CE]  ';'  expected  [CONTEXT]    public  double  getNumericalVariance()  {    [BUGGY]  double  numericalVariance  =  getSampleSize()  *(numberOfSuccesses  -  1));  [BUGGY]    if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	279	279	1	replace	double  numericalVariance  =  getSampleSize()  *(numberOfSuccesses  -  1));	      double    numericalVariance    =    getNumberOfSuccesses()    /    2.0;    	non-compiled	[CE]  ';'  expected	4	None
5794	[BUG]  [BUGGY]  numericalVariance  =  getNumberOfSuccesses().doubleValue()  +  populationSize;  [CE]  int  cannot  be  dereferenced  [CONTEXT]    protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();    [BUGGY]  numericalVariance  =  getNumberOfSuccesses().doubleValue()  +  populationSize;  [BUGGY]    final  double  m  =  getNumberOfSuccesses();  final  double  n  =  getSampleSize();  return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	293	293	1	replace	numericalVariance  =  getNumberOfSuccesses().doubleValue()  +  populationSize;	      final    int    N    =    getNumberOfSuccesses();    	non-compiled	[CE]  int  cannot  be  dereferenced	143	None
5824	[BUG]  [BUGGY]  int  k  =  getNumberOfSuccesses()  /  2.0;  [CE]  possible  loss  of  precision  [CONTEXT]    public  double  getNumericalMean()  {    [BUGGY]  int  k  =  getNumberOfSuccesses()  /  2.0;  [BUGGY]    return  (double)  (getSampleSize()  *  getNumberOfSuccesses())  /  (double)  getPopulationSize();  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalMean  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	268	268	1	replace	int  k  =  getNumberOfSuccesses()  /  2.0;	      int    k    =    getNumberOfSuccesses();    	non-compiled	[CE]  possible  loss  of  precision	363	None
5883	[BUG]  [BUGGY]  int  numberOfSuccesses  =  getNumberOfSuccesses()  *  getPopulationSize();  [CE]  cannot  find  symbol  n  [CONTEXT]    protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();  final  double  m  =  getNumberOfSuccesses();    [BUGGY]  int  numberOfSuccesses  =  getNumberOfSuccesses()  *  getPopulationSize();  [BUGGY]    return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	294	294	1	replace	int  numberOfSuccesses  =  getNumberOfSuccesses()  *  getPopulationSize();	  final    double    n    =    getDecimalSize();    	non-compiled	[CE]  cannot  find  symbol  n	83	None
5911	[BUG]  [BUGGY]      int  numberOfSuccesses  =  getNumberOfSuccesses();  int  numberOfSuccesses  =  getPopulationSize();  [CE]  variable  numberOfSuccesses  is  already  defined  in  method  getSupportLowerBound()  [CONTEXT]    public  int  getSupportLowerBound()  {    [BUGGY]      int  numberOfSuccesses  =  getNumberOfSuccesses();  int  numberOfSuccesses  =  getPopulationSize();  [BUGGY]    return  FastMath.max(0,        getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  }  [CLASS]  HypergeometricDistribution  [METHOD]  getSupportLowerBound  [RETURN_TYPE]  int  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	308	309	1	replace	        int    numberOfSuccesses    =    getNumberOfSuccesses();    int  numberOfSuccesses  =  getPopulationSize();	  	non-compiled	[CE]  variable  numberOfSuccesses  is  already  defined  in  method  getSupportLowerBound()	81	None
5944	[BUG]  [BUGGY]  final  double  k  =  getDayOfMonth();  [CE]  cannot  find  symbol  [CONTEXT]    protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();    [BUGGY]  final  double  k  =  getDayOfMonth();  [BUGGY]    final  double  m  =  getNumberOfSuccesses();  final  double  n  =  getSampleSize();  return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	293	293	1	replace	final  double  k  =  getDayOfMonth();	      final    double    k    =    getNumberOfDay();    	non-compiled	[CE]  cannot  find  symbol	185	None
6004	[BUG]  [BUGGY]  final  double  n  =  getSampleSize()  *  getNumberOfSuccesses();  final  double  k  =  getNumberOfSuccesses()  *  getSampleSize();  [CE]  variable  n  is  already  defined  in  method  calculateNumericalVariance()  [CONTEXT]    protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();  final  double  m  =  getNumberOfSuccesses();    [BUGGY]  final  double  n  =  getSampleSize()  *  getNumberOfSuccesses();  final  double  k  =  getNumberOfSuccesses()  *  getSampleSize();  [BUGGY]    return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	294	294	1	replace	final    double    n    =    getSampleSize()    *    getNumberOfSuccesses();    final  double  k  =  getNumberOfSuccesses()  *  getSampleSize();	  	non-compiled	[CE]  variable  n  is  already  defined  in  method  calculateNumericalVariance()	263	None
6005	[BUG]  [BUGGY]  final  double  n  =  getSampleSize()  *  getNumberOfSuccesses();  final  double  k  =  getNumberOfSuccesses();  [CE]  variable  n  is  already  defined  in  method  calculateNumericalVariance()  [CONTEXT]    protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();  final  double  m  =  getNumberOfSuccesses();    [BUGGY]  final  double  n  =  getSampleSize()  *  getNumberOfSuccesses();  final  double  k  =  getNumberOfSuccesses();  [BUGGY]    return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	294	294	1	replace	final    double    n    =    getSampleSize()    *    getNumberOfSuccesses();    final  double  k  =  getNumberOfSuccesses();	  	non-compiled	[CE]  variable  n  is  already  defined  in  method  calculateNumericalVariance()	263	None
6034	[BUG]  [BUGGY]  numberOfSuccesses  =  getNumberOfSuccesses();  [CE]  cannot  assign  a  value  to  final  variable  numberOfSuccesses  [CONTEXT]    protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();  final  double  m  =  getNumberOfSuccesses();  final  double  n  =  getSampleSize();    [BUGGY]  numberOfSuccesses  =  getNumberOfSuccesses();  [BUGGY]    return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	295	295	1	replace	numberOfSuccesses  =  getNumberOfSuccesses();	      n    =    getNumberOfSuccesses();    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  numberOfSuccesses	361	None
6063	[BUG]  [BUGGY]  return  FastMath.max(0,  getNumberOfSuccesses()  +  getSampleSize()  -  getPopulationSize());  int  sampleSize  =  getSampleSize();  [CE]  unreachable  statement  [CONTEXT]    public  int  getSupportLowerBound()  {    [BUGGY]  return  FastMath.max(0,  getNumberOfSuccesses()  +  getSampleSize()  -  getPopulationSize());  int  sampleSize  =  getSampleSize();  [BUGGY]    getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  }  [CLASS]  HypergeometricDistribution  [METHOD]  getSupportLowerBound  [RETURN_TYPE]  int  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	308	309	1	replace	return    FastMath.max(0,    getNumberOfSuccesses()    +    getSampleSize()    -    getPopulationSize());    int  sampleSize  =  getSampleSize();	  	non-compiled	[CE]  unreachable  statement	2	None
6064	[BUG]  [BUGGY]  return  FastMath.max(0,  getNumberOfSuccesses()  +  getSampleSize()  -  getPopulationSize());  int  sizeOfSuccesses  =  getPopulationSize();  [CE]  unreachable  statement  [CONTEXT]    public  int  getSupportLowerBound()  {    [BUGGY]  return  FastMath.max(0,  getNumberOfSuccesses()  +  getSampleSize()  -  getPopulationSize());  int  sizeOfSuccesses  =  getPopulationSize();  [BUGGY]    getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  }  [CLASS]  HypergeometricDistribution  [METHOD]  getSupportLowerBound  [RETURN_TYPE]  int  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	308	309	1	replace	return    FastMath.max(0,    getNumberOfSuccesses()    +    getSampleSize()    -    getPopulationSize());    int  sizeOfSuccesses  =  getPopulationSize();	  	non-compiled	[CE]  unreachable  statement	2	None
6065	[BUG]  [BUGGY]  return  FastMath.max(0,  getNumberOfSuccesses()  +  getSampleSize()  -  getPopulationSize());  int  volumeSize  =  getPopulationSize();  [CE]  unreachable  statement  [CONTEXT]    public  int  getSupportLowerBound()  {    [BUGGY]  return  FastMath.max(0,  getNumberOfSuccesses()  +  getSampleSize()  -  getPopulationSize());  int  volumeSize  =  getPopulationSize();  [BUGGY]    getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  }  [CLASS]  HypergeometricDistribution  [METHOD]  getSupportLowerBound  [RETURN_TYPE]  int  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	308	309	1	replace	return    FastMath.max(0,    getNumberOfSuccesses()    +    getSampleSize()    -    getPopulationSize());    int  volumeSize  =  getPopulationSize();	  	non-compiled	[CE]  unreachable  statement	2	None
6094	[BUG]  [BUGGY]  final  double  m  =  getNumberOfSuccesses()  *  2;  final  double  k  =  getNumberOfDays().doubleValue;  [CE]  cannot  find  symbol  [CONTEXT]    protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();    [BUGGY]  final  double  m  =  getNumberOfSuccesses()  *  2;  final  double  k  =  getNumberOfDays().doubleValue;  [BUGGY]    final  double  n  =  getSampleSize();  return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	293	293	1	replace	final    double    m    =    getNumberOfSuccesses()    *    2;    final  double  k  =  getNumberOfDays().doubleValue;	  	non-compiled	[CE]  cannot  find  symbol	183	None
6121	[BUG]  [BUGGY]  if(!numericalVarianceIsCalculated  &&  getNumberOfSuccesses()  >  0)  {  if(numberOfSuccesses  >  0)  {  if(getNumberOfSuccesses()  >  0)  {  return  getNumberOfSuccesses();  }  [CE]  illegal  start  of  expression  [CONTEXT]    public  double  getNumericalVariance()  {    [BUGGY]  if(!numericalVarianceIsCalculated  &&  getNumberOfSuccesses()  >  0)  {  if(numberOfSuccesses  >  0)  {  if(getNumberOfSuccesses()  >  0)  {  return  getNumberOfSuccesses();  }  [BUGGY]    numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	279	279	1	replace	if(!numericalVarianceIsCalculated    &&    getNumberOfSuccesses()    >    0)    {    if(numberOfSuccesses  >  0)  {  if(getNumberOfSuccesses()  >  0)  {  return  getNumberOfSuccesses();  }	  	non-compiled	[CE]  illegal  start  of  expression	204	None
6122	[BUG]  [BUGGY]  if(!numericalVarianceIsCalculated  &&  getNumberOfSuccesses()  >  0)  {  if(numberOfSuccesses  >  0)  {  if(getNumberOfSuccesses()  >  0)  {  return  calculateNumberOfSuccesses();  }  [CE]  illegal  start  of  expression  [CONTEXT]    public  double  getNumericalVariance()  {    [BUGGY]  if(!numericalVarianceIsCalculated  &&  getNumberOfSuccesses()  >  0)  {  if(numberOfSuccesses  >  0)  {  if(getNumberOfSuccesses()  >  0)  {  return  calculateNumberOfSuccesses();  }  [BUGGY]    numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	279	279	1	replace	if(!numericalVarianceIsCalculated    &&    getNumberOfSuccesses()    >    0)    {    if(numberOfSuccesses  >  0)  {  if(getNumberOfSuccesses()  >  0)  {  return  calculateNumberOfSuccesses();  }	  	non-compiled	[CE]  illegal  start  of  expression	204	None
6123	[BUG]  [BUGGY]  if(!numericalVarianceIsCalculated  &&  getNumberOfSuccesses()  >  0)  {  if(numberOfSuccesses  >  0)  {  if(getNumberOfSuccesses()  >  0)  {  return  Math.random();  }  [CE]  illegal  start  of  expression  [CONTEXT]    public  double  getNumericalVariance()  {    [BUGGY]  if(!numericalVarianceIsCalculated  &&  getNumberOfSuccesses()  >  0)  {  if(numberOfSuccesses  >  0)  {  if(getNumberOfSuccesses()  >  0)  {  return  Math.random();  }  [BUGGY]    numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	279	279	1	replace	if(!numericalVarianceIsCalculated    &&    getNumberOfSuccesses()    >    0)    {    if(numberOfSuccesses  >  0)  {  if(getNumberOfSuccesses()  >  0)  {  return  Math.random();  }	  	non-compiled	[CE]  illegal  start  of  expression	204	None
6124	[BUG]  [BUGGY]  if(!numericalVarianceIsCalculated  &&  getNumberOfSuccesses()  >  0)  {  if(numberOfSuccesses  >  0)  {  if(getNumberOfSuccesses()  >  0)  {  return  null;  }  [CE]  illegal  start  of  expression  [CONTEXT]    public  double  getNumericalVariance()  {    [BUGGY]  if(!numericalVarianceIsCalculated  &&  getNumberOfSuccesses()  >  0)  {  if(numberOfSuccesses  >  0)  {  if(getNumberOfSuccesses()  >  0)  {  return  null;  }  [BUGGY]    numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	279	279	1	replace	if(!numericalVarianceIsCalculated    &&    getNumberOfSuccesses()    >    0)    {    if(numberOfSuccesses  >  0)  {  if(getNumberOfSuccesses()  >  0)  {  return  null;  }	  	non-compiled	[CE]  illegal  start  of  expression	204	None
6125	[BUG]  [BUGGY]  if(!numericalVarianceIsCalculated  &&  getNumberOfSuccesses()  >  0)  {  if(numberOfSuccesses  >  0)  {  if(getNumberOfSuccesses()  >  0)  {  return  getNumberOfSuccesses()  *  Math.log(0.0);  }  [CE]  illegal  start  of  expression  [CONTEXT]    public  double  getNumericalVariance()  {    [BUGGY]  if(!numericalVarianceIsCalculated  &&  getNumberOfSuccesses()  >  0)  {  if(numberOfSuccesses  >  0)  {  if(getNumberOfSuccesses()  >  0)  {  return  getNumberOfSuccesses()  *  Math.log(0.0);  }  [BUGGY]    numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	279	279	1	replace	if(!numericalVarianceIsCalculated    &&    getNumberOfSuccesses()    >    0)    {    if(numberOfSuccesses  >  0)  {  if(getNumberOfSuccesses()  >  0)  {  return  getNumberOfSuccesses()  *  Math.log(0.0);  }	  	non-compiled	[CE]  illegal  start  of  expression	204	None
6153	[BUG]  [BUGGY]  numericalVariance  =  Math.max(numberOfSuccesses,  getPopulationSize());  [CE]  missing  return  statement  [CONTEXT]    public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }    [BUGGY]  numericalVariance  =  Math.max(numberOfSuccesses,  getPopulationSize());  [BUGGY]    }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	283	283	1	replace	numericalVariance  =  Math.max(numberOfSuccesses,  getPopulationSize());	  return    numericalVariance    /(numericalVarianceIsCalculated));    	non-compiled	[CE]  missing  return  statement	154	None
6182	[BUG]  [BUGGY]  final  double  k  =  getNumberOfKind(m);  [CE]  cannot  find  symbol  [CONTEXT]    protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();  final  double  m  =  getNumberOfSuccesses();    [BUGGY]  final  double  k  =  getNumberOfKind(m);  [BUGGY]    final  double  n  =  getSampleSize();  return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	294	294	1	replace	final  double  k  =  getNumberOfKind(m);	      final    double    k    =    getNumberOfKind();    	non-compiled	[CE]  cannot  find  symbol	305	None
6183	[BUG]  [BUGGY]  final  double  k  =  getNumberOfKind().doubleValue;  [CE]  cannot  find  symbol  [CONTEXT]    protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();  final  double  m  =  getNumberOfSuccesses();    [BUGGY]  final  double  k  =  getNumberOfKind().doubleValue;  [BUGGY]    final  double  n  =  getSampleSize();  return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	294	294	1	replace	final  double  k  =  getNumberOfKind().doubleValue;	      final    double    k    =    getNumberOfKind();    	non-compiled	[CE]  cannot  find  symbol	305	None
6213	[BUG]  [BUGGY]  final  double  n  =  getPopulationSize().NumberOfSuccesses;  [CE]  variable  n  is  already  defined  in  method  calculateNumericalVariance()  [CONTEXT]    protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();  final  double  m  =  getNumberOfSuccesses();  final  double  n  =  getSampleSize();    [BUGGY]  final  double  n  =  getPopulationSize().NumberOfSuccesses;  [BUGGY]    return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	295	295	1	replace	final  double  n  =  getPopulationSize().NumberOfSuccesses;	      final    double    n    =    getPopulationSize();    	non-compiled	[CE]  variable  n  is  already  defined  in  method  calculateNumericalVariance()	91	None
6214	[BUG]  [BUGGY]  final  double  n  =  getNullPopulationSize();  [CE]  variable  n  is  already  defined  in  method  calculateNumericalVariance()  [CONTEXT]    protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();  final  double  m  =  getNumberOfSuccesses();  final  double  n  =  getSampleSize();    [BUGGY]  final  double  n  =  getNullPopulationSize();  [BUGGY]    return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	295	295	1	replace	final  double  n  =  getNullPopulationSize();	      final    double    n    =    getPopulationSize();    	non-compiled	[CE]  variable  n  is  already  defined  in  method  calculateNumericalVariance()	91	None
6243	[BUG]  [BUGGY]  getNumberOfSuccesses()  *  getNumberOfSuccessesImpl();  [CE]  not  a  statement  [CONTEXT]    public  double  getNumericalMean()  {    [BUGGY]  getNumberOfSuccesses()  *  getNumberOfSuccessesImpl();  [BUGGY]    return  (double)  (getSampleSize()  *  getNumberOfSuccesses())  /  (double)  getPopulationSize();  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalMean  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	268	268	1	replace	getNumberOfSuccesses()  *  getNumberOfSuccessesImpl();	      getNumberOfSuccesses()    *    getNumberOfSuccesses();    	non-compiled	[CE]  not  a  statement	75	None
6244	[BUG]  [BUGGY]  getNumberOfSuccesses()  *  getReturnNumberOfSuccesses();  [CE]  not  a  statement  [CONTEXT]    public  double  getNumericalMean()  {    [BUGGY]  getNumberOfSuccesses()  *  getReturnNumberOfSuccesses();  [BUGGY]    return  (double)  (getSampleSize()  *  getNumberOfSuccesses())  /  (double)  getPopulationSize();  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalMean  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	268	268	1	replace	getNumberOfSuccesses()  *  getReturnNumberOfSuccesses();	      getNumberOfSuccesses()    *    getNumberOfSuccesses();    	non-compiled	[CE]  not  a  statement	75	None
6272	[BUG]  [BUGGY]  double  numericalVariance  =  Math.floor(getMean(),  getMaximumVariance());  [CE]  cannot  find  symbol  [CONTEXT]    public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {    [BUGGY]  double  numericalVariance  =  Math.floor(getMean(),  getMaximumVariance());  [BUGGY]    numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	280	280	1	replace	double  numericalVariance  =  Math.floor(getMean(),  getMaximumVariance());	      double    numericalVariance    =    Math.floor(getMean());    	non-compiled	[CE]  cannot  find  symbol	245	None
6302	[BUG]  [BUGGY]  final  double  k  =  getKnowNumberOfSuccesses(n);  [CE]  cannot  find  symbol  n  [CONTEXT]    protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();  final  double  m  =  getNumberOfSuccesses();    [BUGGY]  final  double  k  =  getKnowNumberOfSuccesses(n);  [BUGGY]    final  double  n  =  getSampleSize();  return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	294	294	1	replace	final  double  k  =  getKnowNumberOfSuccesses(n);	      final    double    k    =    getNumberOfSuccesses();    	non-compiled	[CE]  cannot  find  symbol  n	303	None
6303	[BUG]  [BUGGY]  final  double  k  =  getKnowNumberOfSuccesses(m);  [CE]  cannot  find  symbol  [CONTEXT]    protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();  final  double  m  =  getNumberOfSuccesses();    [BUGGY]  final  double  k  =  getKnowNumberOfSuccesses(m);  [BUGGY]    final  double  n  =  getSampleSize();  return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	294	294	1	replace	final  double  k  =  getKnowNumberOfSuccesses(m);	      final    double    k    =    getNumberOfSuccesses();    	non-compiled	[CE]  cannot  find  symbol	303	None
6304	[BUG]  [BUGGY]  final  double  k  =  getKnowNumberOfSuccesses()  +  1;  [CE]  cannot  find  symbol  [CONTEXT]    protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();  final  double  m  =  getNumberOfSuccesses();    [BUGGY]  final  double  k  =  getKnowNumberOfSuccesses()  +  1;  [BUGGY]    final  double  n  =  getSampleSize();  return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	294	294	1	replace	final  double  k  =  getKnowNumberOfSuccesses()  +  1;	      final    double    k    =    getNumberOfSuccesses();    	non-compiled	[CE]  cannot  find  symbol	303	None
6334	[BUG]  [BUGGY]  if(!numericalVarianceIsCalculated  &&!numberOfSuccesses)  {  [CE]  illegal  start  of  expression  [CONTEXT]    public  int  getSupportLowerBound()  {    [BUGGY]  if(!numericalVarianceIsCalculated  &&!numberOfSuccesses)  {  [BUGGY]    return  FastMath.max(0,        getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  }  [CLASS]  HypergeometricDistribution  [METHOD]  getSupportLowerBound  [RETURN_TYPE]  int  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	308	309	1	replace	if(!numericalVarianceIsCalculated  &&!numberOfSuccesses)  {	      if(getNumberOfSuccesses()    >    0)    {    if(getPopulationSize()    >    0)    {    return    FastMath.min(10,    getNumberOfSuccesses()    -    getPopulationSize());    }    	non-compiled	[CE]  illegal  start  of  expression	62	None
6362	[BUG]  [BUGGY]  final  double  k  =  getNumberOfSuccesses()  +  1;  [CE]  cannot  find  symbol  m  [CONTEXT]    protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();    [BUGGY]  final  double  k  =  getNumberOfSuccesses()  +  1;  [BUGGY]    final  double  m  =  getNumberOfSuccesses();  final  double  n  =  getSampleSize();  return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	293	293	1	replace	final  double  k  =  getNumberOfSuccesses()  +  1;	      final    double    k    =    getNumberOfSuccesses();    	non-compiled	[CE]  cannot  find  symbol  m	182	None
6363	[BUG]  [BUGGY]  final  double  k  =  getNumberOfSuccesses()  *  N;  [CE]  cannot  find  symbol  m  [CONTEXT]    protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();    [BUGGY]  final  double  k  =  getNumberOfSuccesses()  *  N;  [BUGGY]    final  double  m  =  getNumberOfSuccesses();  final  double  n  =  getSampleSize();  return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	293	293	1	replace	final  double  k  =  getNumberOfSuccesses()  *  N;	      final    double    k    =    getNumberOfSuccesses();    	non-compiled	[CE]  cannot  find  symbol  m	182	None
6394	[BUG]  [BUGGY]  numericalVariance  =  Math.abs(numberOfSuccesses  /  getPopulationSize());  [CE]  cannot  find  symbol  m  [CONTEXT]    protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();    [BUGGY]  numericalVariance  =  Math.abs(numberOfSuccesses  /  getPopulationSize());  [BUGGY]    final  double  m  =  getNumberOfSuccesses();  final  double  n  =  getSampleSize();  return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	293	293	1	replace	numericalVariance  =  Math.abs(numberOfSuccesses  /  getPopulationSize());	      final    double    N    =    getNumberOfSuccesses().doubleValue();    	non-compiled	[CE]  cannot  find  symbol  m	144	None
6451	[BUG]  [BUGGY]      numericalVariance  =  getNumberOfSuccesses();  if(!numericalVarianceIsCalculated)  {  if(!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateSampleSize();  }  [CE]  illegal  start  of  expression  [CONTEXT]    public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();    [BUGGY]      numericalVariance  =  getNumberOfSuccesses();  if(!numericalVarianceIsCalculated)  {  if(!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateSampleSize();  }  [BUGGY]    numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	281	281	1	replace	        numericalVariance    =    getNumberOfSuccesses();    if(!numericalVarianceIsCalculated)  {  if(!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateSampleSize();  }	  	non-compiled	[CE]  illegal  start  of  expression	321	None
6453	[BUG]  [BUGGY]      numericalVariance  =  getNumberOfSuccesses();  if(numericalVariance  ==  null)  {  if(!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateSampleSize();  }  [CE]  illegal  start  of  expression  [CONTEXT]    public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();    [BUGGY]      numericalVariance  =  getNumberOfSuccesses();  if(numericalVariance  ==  null)  {  if(!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateSampleSize();  }  [BUGGY]    numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	281	281	1	replace	        numericalVariance    =    getNumberOfSuccesses();    if(numericalVariance  ==  null)  {  if(!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateSampleSize();  }	  	non-compiled	[CE]  illegal  start  of  expression	321	None
6454	[BUG]  [BUGGY]      numericalVariance  =  getNumberOfSuccesses();  if(numericalVariance  <  null)  {  if(!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateSampleSize();  }  [CE]  illegal  start  of  expression  [CONTEXT]    public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();    [BUGGY]      numericalVariance  =  getNumberOfSuccesses();  if(numericalVariance  <  null)  {  if(!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateSampleSize();  }  [BUGGY]    numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	281	281	1	replace	        numericalVariance    =    getNumberOfSuccesses();    if(numericalVariance  <  null)  {  if(!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateSampleSize();  }	  	non-compiled	[CE]  illegal  start  of  expression	321	None
6455	[BUG]  [BUGGY]      numericalVariance  =  getNumberOfSuccesses();  numericalVariance  =  calculatePopulationSize();  [CE]  cannot  find  symbol  [CONTEXT]    public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();    [BUGGY]      numericalVariance  =  getNumberOfSuccesses();  numericalVariance  =  calculatePopulationSize();  [BUGGY]    numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	281	281	1	replace	        numericalVariance    =    getNumberOfSuccesses();    numericalVariance  =  calculatePopulationSize();	  	non-compiled	[CE]  cannot  find  symbol	321	None
6483	[BUG]  [BUGGY]  return(double)(getSampleSize()  *  numberOfSuccesses())/(double)getStandardDeviation();  [CE]  cannot  find  symbol  [CONTEXT]    public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();    [BUGGY]  return(double)(getSampleSize()  *  numberOfSuccesses())/(double)getStandardDeviation();  [BUGGY]    }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	281	281	1	replace	return(double)(getSampleSize()  *  numberOfSuccesses())/(double)getStandardDeviation();	  numericalVarianceIsCalculated    =    false;    	non-compiled	[CE]  cannot  find  symbol	122	None
6513	[BUG]  [BUGGY]  return  FastMath.max(0,  getNumberOfSuccesses()  +  getSampleSize()  -  getPopulationSize());  double  numericalVariance  =  getNumberOfSuccesses()  *(populationSize  -  1);  [CE]  unreachable  statement  [CONTEXT]    public  int  getSupportLowerBound()  {    [BUGGY]  return  FastMath.max(0,  getNumberOfSuccesses()  +  getSampleSize()  -  getPopulationSize());  double  numericalVariance  =  getNumberOfSuccesses()  *(populationSize  -  1);  [BUGGY]    getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  }  [CLASS]  HypergeometricDistribution  [METHOD]  getSupportLowerBound  [RETURN_TYPE]  int  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	308	309	1	replace	return    FastMath.max(0,    getNumberOfSuccesses()    +    getSampleSize()    -    getPopulationSize());    double  numericalVariance  =  getNumberOfSuccesses()  *(populationSize  -  1);	  	non-compiled	[CE]  unreachable  statement	2	None
6514	[BUG]  [BUGGY]  return  FastMath.max(0,  getNumberOfSuccesses()  +  getSampleSize()  -  getPopulationSize());  double  numericalVariance  =  getNumberOfSuccesses()  +  1;  [CE]  unreachable  statement  [CONTEXT]    public  int  getSupportLowerBound()  {    [BUGGY]  return  FastMath.max(0,  getNumberOfSuccesses()  +  getSampleSize()  -  getPopulationSize());  double  numericalVariance  =  getNumberOfSuccesses()  +  1;  [BUGGY]    getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  }  [CLASS]  HypergeometricDistribution  [METHOD]  getSupportLowerBound  [RETURN_TYPE]  int  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	308	309	1	replace	return    FastMath.max(0,    getNumberOfSuccesses()    +    getSampleSize()    -    getPopulationSize());    double  numericalVariance  =  getNumberOfSuccesses()  +  1;	  	non-compiled	[CE]  unreachable  statement	2	None
6515	[BUG]  [BUGGY]  return  FastMath.max(0,  getNumberOfSuccesses()  +  getSampleSize()  -  getPopulationSize());  double  numericalVariance  =  getNumberOfSuccesses()  /(numberOfSuccesses  *  getPopulationSize());  [CE]  unreachable  statement  [CONTEXT]    public  int  getSupportLowerBound()  {    [BUGGY]  return  FastMath.max(0,  getNumberOfSuccesses()  +  getSampleSize()  -  getPopulationSize());  double  numericalVariance  =  getNumberOfSuccesses()  /(numberOfSuccesses  *  getPopulationSize());  [BUGGY]    getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  }  [CLASS]  HypergeometricDistribution  [METHOD]  getSupportLowerBound  [RETURN_TYPE]  int  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	308	309	1	replace	return    FastMath.max(0,    getNumberOfSuccesses()    +    getSampleSize()    -    getPopulationSize());    double  numericalVariance  =  getNumberOfSuccesses()  /(numberOfSuccesses  *  getPopulationSize());	  	non-compiled	[CE]  unreachable  statement	2	None
6542	[BUG]  [BUGGY]  final  double  k  =  getNumberOfCase(n);  [CE]  cannot  find  symbol  n  [CONTEXT]    public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {    [BUGGY]  final  double  k  =  getNumberOfCase(n);  [BUGGY]    numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	280	280	1	replace	final  double  k  =  getNumberOfCase(n);	      if(!numericalVarianceIsCalculated)    {    if(!numericalVarianceIsCalculated)    {    return    -1;    }    	non-compiled	[CE]  cannot  find  symbol  n	45	None
6543	[BUG]  [BUGGY]  final  double  k  =  getNumberOfCase(getDx());  [CE]  cannot  find  symbol  [CONTEXT]    public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {    [BUGGY]  final  double  k  =  getNumberOfCase(getDx());  [BUGGY]    numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	280	280	1	replace	final  double  k  =  getNumberOfCase(getDx());	      if(!numericalVarianceIsCalculated)    {    if(!numericalVarianceIsCalculated)    {    return    -1;    }    	non-compiled	[CE]  cannot  find  symbol	45	None
6544	[BUG]  [BUGGY]  final  double  k  =  getNumberOfCaseSize();  [CE]  cannot  find  symbol  [CONTEXT]    public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {    [BUGGY]  final  double  k  =  getNumberOfCaseSize();  [BUGGY]    numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	280	280	1	replace	final  double  k  =  getNumberOfCaseSize();	      if(!numericalVarianceIsCalculated)    {    if(!numericalVarianceIsCalculated)    {    return    -1;    }    	non-compiled	[CE]  cannot  find  symbol	45	None
6572	[BUG]  [BUGGY]  [FE]  AssertionError  testMoments  [CONTEXT]    public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {    [BUGGY]  final  double  k  =  getNumberOfSuccesses()  +  1;  [BUGGY]    numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	280	280	1	add	final  double  k  =  getNumberOfSuccesses()  +  1;	      if(!numericalVarianceIsCalculated)    {    if(!numericalVarianceIsCalculated)    {    numericalVariance    =    calculateNumberOfSuccesses();    }    	compilable	  [FE]  AssertionError  testMoments	42	1
6573	[BUG]  [BUGGY]  final  double  k  =  getNumberOfSuccesses()  +  1;  [FE]  AssertionError  testMoments  [CONTEXT]    public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {    [BUGGY]  final  double  k  =  getNumberOfSuccesses()  +  1;  [BUGGY]    numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	280	280	1	replace	final  double  k  =  getNumberOfSuccesses()  +  1;	      if(!numericalVarianceIsCalculated)    {    if(!numericalVarianceIsCalculated)    {    numericalVariance    =    calculateNumberOfSuccesses();    }    	compilable	  [FE]  AssertionError  testMoments	42	1
6574	[BUG]  [BUGGY]  [FE]  AssertionError  testMoments  [CONTEXT]    public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {    [BUGGY]  final  double  k  =  getNumberOfSuccesses()  *  2;  [BUGGY]    numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	280	280	1	add	final  double  k  =  getNumberOfSuccesses()  *  2;	      if(!numericalVarianceIsCalculated)    {    if(!numericalVarianceIsCalculated)    {    numericalVariance    =    calculateNumberOfSuccesses();    }    	compilable	  [FE]  AssertionError  testMoments	42	1
6575	[BUG]  [BUGGY]  final  double  k  =  getNumberOfSuccesses()  *  2;  [FE]  AssertionError  testMoments  [CONTEXT]    public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {    [BUGGY]  final  double  k  =  getNumberOfSuccesses()  *  2;  [BUGGY]    numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	280	280	1	replace	final  double  k  =  getNumberOfSuccesses()  *  2;	      if(!numericalVarianceIsCalculated)    {    if(!numericalVarianceIsCalculated)    {    numericalVariance    =    calculateNumberOfSuccesses();    }    	compilable	  [FE]  AssertionError  testMoments	42	1
6601	[BUG]  [BUGGY]  numericalVarianceIsCalculated  =(numericalVariance  <  0)?  numericalVarianceIsCalculated  :  false;  if(numericalVariance  <  0)  {  if(numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumberOfSuccesses();  }  [CE]  illegal  start  of  expression  [CONTEXT]    public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();    [BUGGY]  numericalVarianceIsCalculated  =(numericalVariance  <  0)?  numericalVarianceIsCalculated  :  false;  if(numericalVariance  <  0)  {  if(numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumberOfSuccesses();  }  [BUGGY]    }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	281	281	1	replace	numericalVarianceIsCalculated    =(numericalVariance    <    0)?    numericalVarianceIsCalculated    :    false;    if(numericalVariance  <  0)  {  if(numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumberOfSuccesses();  }	  	non-compiled	[CE]  illegal  start  of  expression	392	None
6603	[BUG]  [BUGGY]  numericalVarianceIsCalculated  =(numericalVariance  <  0)?  numericalVarianceIsCalculated  :  false;  if(numericalVariance  <  0)  {  if(numericalVariance.equals(getNumberOfSuccesses()))  {  numericalVariance  =  calculateNumberOfSuccesses();  }  [CE]  illegal  start  of  expression  [CONTEXT]    public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();    [BUGGY]  numericalVarianceIsCalculated  =(numericalVariance  <  0)?  numericalVarianceIsCalculated  :  false;  if(numericalVariance  <  0)  {  if(numericalVariance.equals(getNumberOfSuccesses()))  {  numericalVariance  =  calculateNumberOfSuccesses();  }  [BUGGY]    }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	281	281	1	replace	numericalVarianceIsCalculated    =(numericalVariance    <    0)?    numericalVarianceIsCalculated    :    false;    if(numericalVariance  <  0)  {  if(numericalVariance.equals(getNumberOfSuccesses()))  {  numericalVariance  =  calculateNumberOfSuccesses();  }	  	non-compiled	[CE]  illegal  start  of  expression	392	None
6605	[BUG]  [BUGGY]  [FE]  AssertionError  testMoments  [CONTEXT]    public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();    [BUGGY]  numericalVarianceIsCalculated  =(numericalVariance  <  0)?  numericalVarianceIsCalculated  :  false;  numericalVariance  =  Math.abs(numberOfSuccesses);  [BUGGY]    }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	281	281	1	add	numericalVarianceIsCalculated    =(numericalVariance    <    0)?    numericalVarianceIsCalculated    :    false;    numericalVariance  =  Math.abs(numberOfSuccesses);	  	compilable	  [FE]  AssertionError  testMoments	392	1
6606	[BUG]  [BUGGY]  numericalVarianceIsCalculated  =(numericalVariance  <  0)?  numericalVarianceIsCalculated  :  false;  numericalVariance  =  Math.abs(numberOfSuccesses);  [FE]  AssertionError  testMoments  [CONTEXT]    public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();    [BUGGY]  numericalVarianceIsCalculated  =(numericalVariance  <  0)?  numericalVarianceIsCalculated  :  false;  numericalVariance  =  Math.abs(numberOfSuccesses);  [BUGGY]    }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	281	281	1	replace	numericalVarianceIsCalculated    =(numericalVariance    <    0)?    numericalVarianceIsCalculated    :    false;    numericalVariance  =  Math.abs(numberOfSuccesses);	  	compilable	  [FE]  AssertionError  testMoments	392	1
6633	[BUG]  [BUGGY]  if(!numericalVarianceIsCalculated)  {  if(!numericalVarianceIsCalculated)  {  numericalVariance  =  true;  figured  [CE]  not  a  statement  [CONTEXT]    public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();    [BUGGY]  if(!numericalVarianceIsCalculated)  {  if(!numericalVarianceIsCalculated)  {  numericalVariance  =  true;  figured  [BUGGY]    numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	281	281	1	replace	if(!numericalVarianceIsCalculated)  {  if(!numericalVarianceIsCalculated)  {  numericalVariance  =  true;  figured	      if(!numericalVarianceIsCalculated)    {    if(!numericalVarianceIsCalculated)    {    numericalVariance    =    true;    }    	non-compiled	[CE]  not  a  statement	174	None
6634	[BUG]  [BUGGY]  if(!numericalVarianceIsCalculated)  {  if(!numericalVarianceIsCalculated)  {  numericalVariance  =  true;  Eventually  [CE]  not  a  statement  [CONTEXT]    public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();    [BUGGY]  if(!numericalVarianceIsCalculated)  {  if(!numericalVarianceIsCalculated)  {  numericalVariance  =  true;  Eventually  [BUGGY]    numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	281	281	1	replace	if(!numericalVarianceIsCalculated)  {  if(!numericalVarianceIsCalculated)  {  numericalVariance  =  true;  Eventually	      if(!numericalVarianceIsCalculated)    {    if(!numericalVarianceIsCalculated)    {    numericalVariance    =    true;    }    	non-compiled	[CE]  not  a  statement	174	None
6663	[BUG]  [BUGGY]  [FE]  AssertionError  testMath1021  [CONTEXT]    public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();    [BUGGY]  numericalVarianceIsCalculated  =(numericalVariance  <  1)?  numericalVarianceIsCalculated  :  true;  [BUGGY]    }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	281	281	1	add	numericalVarianceIsCalculated  =(numericalVariance  <  1)?  numericalVarianceIsCalculated  :  true;	  numericalVarianceIsCalculated    =(numericalVariance    <    0)?    numericalVarianceIsCalculated    :    false;    	compilable	  [FE]  AssertionError  testMath1021	393	1
6664	[BUG]  [BUGGY]  numericalVarianceIsCalculated  =(numericalVariance  <  1)?  numericalVarianceIsCalculated  :  true;  [FE]  AssertionError  testMath1021  [CONTEXT]    public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();    [BUGGY]  numericalVarianceIsCalculated  =(numericalVariance  <  1)?  numericalVarianceIsCalculated  :  true;  [BUGGY]    }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	281	281	1	replace	numericalVarianceIsCalculated  =(numericalVariance  <  1)?  numericalVarianceIsCalculated  :  true;	  numericalVarianceIsCalculated    =(numericalVariance    <    0)?    numericalVarianceIsCalculated    :    false;    	compilable	  [FE]  AssertionError  testMath1021	393	1
6664	[BUG]  [BUGGY]  [FE]  AssertionError  testMath1021  [CONTEXT]    public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();    [BUGGY]  numericalVarianceIsCalculated  =(numericalVariance  <=  0)?  numericalVarianceIsCalculated  :  true;  [BUGGY]    }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	281	281	1	add	numericalVarianceIsCalculated  =(numericalVariance  <=  0)?  numericalVarianceIsCalculated  :  true;	  numericalVarianceIsCalculated    =(numericalVariance    <    0)?    numericalVarianceIsCalculated    :    false;    	compilable	  [FE]  AssertionError  testMath1021	393	1
6665	[BUG]  [BUGGY]  numericalVarianceIsCalculated  =(numericalVariance  <=  0)?  numericalVarianceIsCalculated  :  true;  [FE]  AssertionError  testMath1021  [CONTEXT]    public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();    [BUGGY]  numericalVarianceIsCalculated  =(numericalVariance  <=  0)?  numericalVarianceIsCalculated  :  true;  [BUGGY]    }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	281	281	1	replace	numericalVarianceIsCalculated  =(numericalVariance  <=  0)?  numericalVarianceIsCalculated  :  true;	  numericalVarianceIsCalculated    =(numericalVariance    <    0)?    numericalVarianceIsCalculated    :    false;    	compilable	  [FE]  AssertionError  testMath1021	393	1
6692	[BUG]  [BUGGY]  final  double  k  =  getKindOfSuccesses();  [CE]  cannot  find  symbol  [CONTEXT]    protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();    [BUGGY]  final  double  k  =  getKindOfSuccesses();  [BUGGY]    final  double  n  =  getSampleSize();  return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	293	293	1	replace	final  double  k  =  getKindOfSuccesses();	  final    double    m    =    getNumberOfSuccesses()    *    2;    	non-compiled	[CE]  cannot  find  symbol	184	None
6693	[BUG]  [BUGGY]  final  double  k  =  getKindSize();  [CE]  cannot  find  symbol  [CONTEXT]    protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();    [BUGGY]  final  double  k  =  getKindSize();  [BUGGY]    final  double  n  =  getSampleSize();  return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	293	293	1	replace	final  double  k  =  getKindSize();	  final    double    m    =    getNumberOfSuccesses()    *    2;    	non-compiled	[CE]  cannot  find  symbol	184	None
6694	[BUG]  [BUGGY]  final  double  k  =  getKind().length;  [CE]  cannot  find  symbol  [CONTEXT]    protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();    [BUGGY]  final  double  k  =  getKind().length;  [BUGGY]    final  double  n  =  getSampleSize();  return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	293	293	1	replace	final  double  k  =  getKind().length;	  final    double    m    =    getNumberOfSuccesses()    *    2;    	non-compiled	[CE]  cannot  find  symbol	184	None
6723	[BUG]  [BUGGY]  if(!numericalVarianceIsCalculated)  {  if(!numericalVarianceIsCalculated)  {  return  -0;  }  [CE]  illegal  start  of  expression  [CONTEXT]    public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {    [BUGGY]  if(!numericalVarianceIsCalculated)  {  if(!numericalVarianceIsCalculated)  {  return  -0;  }  [BUGGY]    numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	280	280	1	replace	if(!numericalVarianceIsCalculated)  {  if(!numericalVarianceIsCalculated)  {  return  -0;  }	      if(!numericalVarianceIsCalculated)    {    if(!numericalVarianceIsCalculated)    {    return    -1;    }    	non-compiled	[CE]  illegal  start  of  expression	45	None
6753	[BUG]  [BUGGY]  if(!numericalVarianceIsCalculated  &&!super.getNumbericalVariance())  {  [CE]  illegal  start  of  expression  [CONTEXT]    public  int  getSupportLowerBound()  {    [BUGGY]  if(!numericalVarianceIsCalculated  &&!super.getNumbericalVariance())  {  [BUGGY]    return  FastMath.max(0,        getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  }  [CLASS]  HypergeometricDistribution  [METHOD]  getSupportLowerBound  [RETURN_TYPE]  int  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	308	309	1	replace	if(!numericalVarianceIsCalculated  &&!super.getNumbericalVariance())  {	      getNumberOfSuccesses()    -    getPopulationSize());    	non-compiled	[CE]  illegal  start  of  expression	61	None
6754	[BUG]  [BUGGY]  if(!numericalVarianceIsCalculated  &&!super.getNumericVariance())  {  [CE]  illegal  start  of  expression  [CONTEXT]    public  int  getSupportLowerBound()  {    [BUGGY]  if(!numericalVarianceIsCalculated  &&!super.getNumericVariance())  {  [BUGGY]    return  FastMath.max(0,        getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  }  [CLASS]  HypergeometricDistribution  [METHOD]  getSupportLowerBound  [RETURN_TYPE]  int  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	308	309	1	replace	if(!numericalVarianceIsCalculated  &&!super.getNumericVariance())  {	      getNumberOfSuccesses()    -    getPopulationSize());    	non-compiled	[CE]  illegal  start  of  expression	61	None
6782	[BUG]  [BUGGY]      getNumberOfSuccesses();  getNumberOfSuccesses()  *  Math.random();  [CE]  not  a  statement  [CONTEXT]    public  double  getNumericalMean()  {    [BUGGY]      getNumberOfSuccesses();  getNumberOfSuccesses()  *  Math.random();  [BUGGY]    return  (double)  (getSampleSize()  *  getNumberOfSuccesses())  /  (double)  getPopulationSize();  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalMean  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	268	268	1	replace	        getNumberOfSuccesses();    getNumberOfSuccesses()  *  Math.random();	  	non-compiled	[CE]  not  a  statement	421	None
6783	[BUG]  [BUGGY]      getNumberOfSuccesses();  getNumberOfSuccesses()  *(double)getNumberOfSuccesses();  [CE]  not  a  statement  [CONTEXT]    public  double  getNumericalMean()  {    [BUGGY]      getNumberOfSuccesses();  getNumberOfSuccesses()  *(double)getNumberOfSuccesses();  [BUGGY]    return  (double)  (getSampleSize()  *  getNumberOfSuccesses())  /  (double)  getPopulationSize();  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalMean  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	268	268	1	replace	        getNumberOfSuccesses();    getNumberOfSuccesses()  *(double)getNumberOfSuccesses();	  	non-compiled	[CE]  not  a  statement	421	None
6784	[BUG]  [BUGGY]      getNumberOfSuccesses();  getNumberOfSuccesses()  *  populationSize;  [CE]  not  a  statement  [CONTEXT]    public  double  getNumericalMean()  {    [BUGGY]      getNumberOfSuccesses();  getNumberOfSuccesses()  *  populationSize;  [BUGGY]    return  (double)  (getSampleSize()  *  getNumberOfSuccesses())  /  (double)  getPopulationSize();  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalMean  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	268	268	1	replace	        getNumberOfSuccesses();    getNumberOfSuccesses()  *  populationSize;	  	non-compiled	[CE]  not  a  statement	421	None
6785	[BUG]  [BUGGY]      getNumberOfSuccesses();  getNumberOfSuccesses()  /(double)getVariance();  [CE]  not  a  statement  [CONTEXT]    public  double  getNumericalMean()  {    [BUGGY]      getNumberOfSuccesses();  getNumberOfSuccesses()  /(double)getVariance();  [BUGGY]    return  (double)  (getSampleSize()  *  getNumberOfSuccesses())  /  (double)  getPopulationSize();  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalMean  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	268	268	1	replace	        getNumberOfSuccesses();    getNumberOfSuccesses()  /(double)getVariance();	  	non-compiled	[CE]  not  a  statement	421	None
6812	[BUG]  [BUGGY]  return  FastMath.max(0,  getNumberOfSuccesses()  +  getSampleSize()  -  getPopulationSize());  numericalVariance  =  Math.abs(numberOfSuccesses  /  sampleSize);  [CE]  unreachable  statement  [CONTEXT]    public  int  getSupportLowerBound()  {    [BUGGY]  return  FastMath.max(0,  getNumberOfSuccesses()  +  getSampleSize()  -  getPopulationSize());  numericalVariance  =  Math.abs(numberOfSuccesses  /  sampleSize);  [BUGGY]    getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  }  [CLASS]  HypergeometricDistribution  [METHOD]  getSupportLowerBound  [RETURN_TYPE]  int  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	308	309	1	replace	return    FastMath.max(0,    getNumberOfSuccesses()    +    getSampleSize()    -    getPopulationSize());    numericalVariance  =  Math.abs(numberOfSuccesses  /  sampleSize);	  	non-compiled	[CE]  unreachable  statement	2	None
6842	[BUG]  [BUGGY]  return(double)(getNumberOfSuccesses()  *  getSampleSize())/(double)getPopulationSize();  if(getNumberOfSuccesses  >  0)  {  populationSize  =  Math.max(populationSize  /  getNumberOfSuccesses());  if(numberOfSuccesses  >  0)  {  return  null;  }  [CE]  illegal  start  of  expression  [CONTEXT]    public  double  getNumericalMean()  {    [BUGGY]  return(double)(getNumberOfSuccesses()  *  getSampleSize())/(double)getPopulationSize();  if(getNumberOfSuccesses  >  0)  {  populationSize  =  Math.max(populationSize  /  getNumberOfSuccesses());  if(numberOfSuccesses  >  0)  {  return  null;  }  [BUGGY]    }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalMean  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	268	268	1	replace	return(double)(getNumberOfSuccesses()    *    getSampleSize())/(double)getPopulationSize();    if(getNumberOfSuccesses  >  0)  {  populationSize  =  Math.max(populationSize  /  getNumberOfSuccesses());  if(numberOfSuccesses  >  0)  {  return  null;  }	  	non-compiled	[CE]  illegal  start  of  expression	112	None
6843	[BUG]  [BUGGY]  return(double)(getNumberOfSuccesses()  *  getSampleSize())/(double)getPopulationSize();  if(numberOfSuccesses  >  0)  {  populationSize  =  Math.max(numberOfSuccesses,  getNumberOfSuccesses()  /  getSampleSize());  }  else  {  return  Math.min(numberOfSuccesses  /  getN  [CE]  ')'  expected  [CONTEXT]    public  double  getNumericalMean()  {    [BUGGY]  return(double)(getNumberOfSuccesses()  *  getSampleSize())/(double)getPopulationSize();  if(numberOfSuccesses  >  0)  {  populationSize  =  Math.max(numberOfSuccesses,  getNumberOfSuccesses()  /  getSampleSize());  }  else  {  return  Math.min(numberOfSuccesses  /  getN  [BUGGY]    }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalMean  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	268	268	1	replace	return(double)(getNumberOfSuccesses()    *    getSampleSize())/(double)getPopulationSize();    if(numberOfSuccesses  >  0)  {  populationSize  =  Math.max(numberOfSuccesses,  getNumberOfSuccesses()  /  getSampleSize());  }  else  {  return  Math.min(numberOfSuccesses  /  getN	  	non-compiled	[CE]  ')'  expected	112	None
6844	[BUG]  [BUGGY]  return(double)(getNumberOfSuccesses()  *  getSampleSize())/(double)getPopulationSize();  if(getNumberOfSuccesses  >  0)  {  populationSize  =  this.numberOfSuccesses  *  getSampleSize();  if(numberOfSuccesses  >  0)  {  return  Math.max(getNumberOfSuccesses  [CE]  ')'  expected  [CONTEXT]    public  double  getNumericalMean()  {    [BUGGY]  return(double)(getNumberOfSuccesses()  *  getSampleSize())/(double)getPopulationSize();  if(getNumberOfSuccesses  >  0)  {  populationSize  =  this.numberOfSuccesses  *  getSampleSize();  if(numberOfSuccesses  >  0)  {  return  Math.max(getNumberOfSuccesses  [BUGGY]    }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalMean  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	268	268	1	replace	return(double)(getNumberOfSuccesses()    *    getSampleSize())/(double)getPopulationSize();    if(getNumberOfSuccesses  >  0)  {  populationSize  =  this.numberOfSuccesses  *  getSampleSize();  if(numberOfSuccesses  >  0)  {  return  Math.max(getNumberOfSuccesses	  	non-compiled	[CE]  ')'  expected	112	None
6845	[BUG]  [BUGGY]  return(double)(getNumberOfSuccesses()  *  getSampleSize())/(double)getPopulationSize();  if(getNumberOfSuccesses  >  0)  {  populationSize  =  Math.max(populationSize  /  getNumberOfSuccesses());  if(numberOfSuccesses  <  1)  {  return  null;  }  [CE]  illegal  start  of  expression  [CONTEXT]    public  double  getNumericalMean()  {    [BUGGY]  return(double)(getNumberOfSuccesses()  *  getSampleSize())/(double)getPopulationSize();  if(getNumberOfSuccesses  >  0)  {  populationSize  =  Math.max(populationSize  /  getNumberOfSuccesses());  if(numberOfSuccesses  <  1)  {  return  null;  }  [BUGGY]    }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalMean  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	268	268	1	replace	return(double)(getNumberOfSuccesses()    *    getSampleSize())/(double)getPopulationSize();    if(getNumberOfSuccesses  >  0)  {  populationSize  =  Math.max(populationSize  /  getNumberOfSuccesses());  if(numberOfSuccesses  <  1)  {  return  null;  }	  	non-compiled	[CE]  illegal  start  of  expression	112	None
6874	[BUG]  [BUGGY]  numericalVariance  =  Math.max(numberOfSuccesses,  n);  [CE]  cannot  find  symbol  n  [CONTEXT]    public  int  getSupportLowerBound()  {    [BUGGY]  numericalVariance  =  Math.max(numberOfSuccesses,  n);  [BUGGY]    getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  }  [CLASS]  HypergeometricDistribution  [METHOD]  getSupportLowerBound  [RETURN_TYPE]  int  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	308	309	1	replace	numericalVariance  =  Math.max(numberOfSuccesses,  n);	  return    FastMath.max(0,    getNumberOfSuccesses()    +    getSampleSize()    -    getPopulationSize());    	non-compiled	[CE]  cannot  find  symbol  n	3	None
6932	[BUG]  [BUGGY]  final  int  dx  =  getNumberOfSuccesses();  [CE]  cannot  find  symbol  m  [CONTEXT]    protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();    [BUGGY]  final  int  dx  =  getNumberOfSuccesses();  [BUGGY]    final  double  n  =  getSampleSize();  return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	293	293	1	replace	final  int  dx  =  getNumberOfSuccesses();	  final    double    m    =    getNumberOfSuccesses()    *    2;    	non-compiled	[CE]  cannot  find  symbol  m	184	None
6934	[BUG]  [BUGGY]  final  double  dx  =  getNumberOfSuccesses()  *  N;  [CE]  cannot  find  symbol  m  [CONTEXT]    protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();    [BUGGY]  final  double  dx  =  getNumberOfSuccesses()  *  N;  [BUGGY]    final  double  n  =  getSampleSize();  return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	293	293	1	replace	final  double  dx  =  getNumberOfSuccesses()  *  N;	  final    double    m    =    getNumberOfSuccesses()    *    2;    	non-compiled	[CE]  cannot  find  symbol  m	184	None
6961	[BUG]  [BUGGY]  [FE]  AssertionError  testMath1021  [CONTEXT]    public  double  getNumericalVariance()  {    [BUGGY]      double  numericalVariance  =  getNumberOfSuccesses();  numericalVariance  =  Math.floor(getSampleSize());  [BUGGY]    if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	279	279	1	add	        double    numericalVariance    =    getNumberOfSuccesses();    numericalVariance  =  Math.floor(getSampleSize());	  	compilable	  [FE]  AssertionError  testMath1021	1	1
6962	[BUG]  [BUGGY]      double  numericalVariance  =  getNumberOfSuccesses();  numericalVariance  =  Math.floor(getSampleSize());  [FE]  AssertionError  testMath1021  [CONTEXT]    public  double  getNumericalVariance()  {    [BUGGY]      double  numericalVariance  =  getNumberOfSuccesses();  numericalVariance  =  Math.floor(getSampleSize());  [BUGGY]    if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	279	279	1	replace	        double    numericalVariance    =    getNumberOfSuccesses();    numericalVariance  =  Math.floor(getSampleSize());	  	compilable	  [FE]  AssertionError  testMath1021	1	1
6962	[BUG]  [BUGGY]  [FE]  AssertionError  testMath1021  [CONTEXT]    public  double  getNumericalVariance()  {    [BUGGY]      double  numericalVariance  =  getNumberOfSuccesses();  numericalVariance  =  Math.floor(numberOfSuccesses);  [BUGGY]    if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	279	279	1	add	        double    numericalVariance    =    getNumberOfSuccesses();    numericalVariance  =  Math.floor(numberOfSuccesses);	  	compilable	  [FE]  AssertionError  testMath1021	1	1
6963	[BUG]  [BUGGY]      double  numericalVariance  =  getNumberOfSuccesses();  numericalVariance  =  Math.floor(numberOfSuccesses);  [FE]  AssertionError  testMath1021  [CONTEXT]    public  double  getNumericalVariance()  {    [BUGGY]      double  numericalVariance  =  getNumberOfSuccesses();  numericalVariance  =  Math.floor(numberOfSuccesses);  [BUGGY]    if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	279	279	1	replace	        double    numericalVariance    =    getNumberOfSuccesses();    numericalVariance  =  Math.floor(numberOfSuccesses);	  	compilable	  [FE]  AssertionError  testMath1021	1	1
6963	[BUG]  [BUGGY]      double  numericalVariance  =  getNumberOfSuccesses();  numericalVariance  =  Math.max(numberOfSuccesses,  false);  [CE]  no  suitable  method  found  for  max(int,boolean)  [CONTEXT]    public  double  getNumericalVariance()  {    [BUGGY]      double  numericalVariance  =  getNumberOfSuccesses();  numericalVariance  =  Math.max(numberOfSuccesses,  false);  [BUGGY]    if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	279	279	1	replace	        double    numericalVariance    =    getNumberOfSuccesses();    numericalVariance  =  Math.max(numberOfSuccesses,  false);	  	non-compiled	[CE]  no  suitable  method  found  for  max(int,boolean)	1	None
6964	[BUG]  [BUGGY]      double  numericalVariance  =  getNumberOfSuccesses();  numericalVariance  =  Math.max(numberOfSuccesses  -  1);  [CE]  no  suitable  method  found  for  max(int)  [CONTEXT]    public  double  getNumericalVariance()  {    [BUGGY]      double  numericalVariance  =  getNumberOfSuccesses();  numericalVariance  =  Math.max(numberOfSuccesses  -  1);  [BUGGY]    if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	279	279	1	replace	        double    numericalVariance    =    getNumberOfSuccesses();    numericalVariance  =  Math.max(numberOfSuccesses  -  1);	  	non-compiled	[CE]  no  suitable  method  found  for  max(int)	1	None
6965	[BUG]  [BUGGY]  [FE]  AssertionError  testMath1021  [CONTEXT]    public  double  getNumericalVariance()  {    [BUGGY]      double  numericalVariance  =  getNumberOfSuccesses();  numericalVariance  =  Math.max(numberOfSuccesses,  0.5);  [BUGGY]    if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	279	279	1	add	        double    numericalVariance    =    getNumberOfSuccesses();    numericalVariance  =  Math.max(numberOfSuccesses,  0.5);	  	compilable	  [FE]  AssertionError  testMath1021	1	1
6966	[BUG]  [BUGGY]      double  numericalVariance  =  getNumberOfSuccesses();  numericalVariance  =  Math.max(numberOfSuccesses,  0.5);  [FE]  AssertionError  testMath1021  [CONTEXT]    public  double  getNumericalVariance()  {    [BUGGY]      double  numericalVariance  =  getNumberOfSuccesses();  numericalVariance  =  Math.max(numberOfSuccesses,  0.5);  [BUGGY]    if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	279	279	1	replace	        double    numericalVariance    =    getNumberOfSuccesses();    numericalVariance  =  Math.max(numberOfSuccesses,  0.5);	  	compilable	  [FE]  AssertionError  testMath1021	1	1
6993	[BUG]  [BUGGY]  [Delete]  [CE]  illegal  start  of  expression  [CONTEXT]    public  double  getNumericalVariance()  {    [BUGGY]  [Delete]  [BUGGY]    if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	279	279	1	replace	[Delete]	      if(!numericalVarianceIsCalculated)    {    if(!numericalVarianceIsCalculated)    {    numericalVariance    =    calculateStdNumericalVariance();    }    	non-compiled	[CE]  illegal  start  of  expression	15	None
6994	[BUG]  [BUGGY]  if(!numericalVarianceIsCalculated)  {  if(!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateStdNumericVariance();  }  [CE]  cannot  find  symbol  [CONTEXT]    public  double  getNumericalVariance()  {    [BUGGY]  if(!numericalVarianceIsCalculated)  {  if(!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateStdNumericVariance();  }  [BUGGY]    if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	279	279	1	replace	if(!numericalVarianceIsCalculated)  {  if(!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateStdNumericVariance();  }	      if(!numericalVarianceIsCalculated)    {    if(!numericalVarianceIsCalculated)    {    numericalVariance    =    calculateStdNumericalVariance();    }    	non-compiled	[CE]  cannot  find  symbol	15	None
7022	[BUG]  [BUGGY]  if(numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumbericalVariance(numberOfSuccesses);  [CE]  illegal  start  of  expression  [CONTEXT]    public  double  getNumericalVariance()  {    [BUGGY]  if(numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumbericalVariance(numberOfSuccesses);  [BUGGY]    numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	279	279	1	replace	if(numericalVarianceIsCalculated)    {    numericalVariance  =  calculateNumbericalVariance(numberOfSuccesses);	  	non-compiled	[CE]  illegal  start  of  expression	22	None
7023	[BUG]  [BUGGY]  if(numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumbericalVariance(nodeOfSuccesses);  [CE]  illegal  start  of  expression  [CONTEXT]    public  double  getNumericalVariance()  {    [BUGGY]  if(numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumbericalVariance(nodeOfSuccesses);  [BUGGY]    numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	279	279	1	replace	if(numericalVarianceIsCalculated)    {    numericalVariance  =  calculateNumbericalVariance(nodeOfSuccesses);	  	non-compiled	[CE]  illegal  start  of  expression	22	None
7024	[BUG]  [BUGGY]  if(numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumbericalVariance(n);  [CE]  illegal  start  of  expression  [CONTEXT]    public  double  getNumericalVariance()  {    [BUGGY]  if(numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumbericalVariance(n);  [BUGGY]    numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	279	279	1	replace	if(numericalVarianceIsCalculated)    {    numericalVariance  =  calculateNumbericalVariance(n);	  	non-compiled	[CE]  illegal  start  of  expression	22	None
7025	[BUG]  [BUGGY]  if(numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumbericalVariance(n  x  -  1);  [CE]  ')'  expected  [CONTEXT]    public  double  getNumericalVariance()  {    [BUGGY]  if(numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumbericalVariance(n  x  -  1);  [BUGGY]    numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	279	279	1	replace	if(numericalVarianceIsCalculated)    {    numericalVariance  =  calculateNumbericalVariance(n  x  -  1);	  	non-compiled	[CE]  ')'  expected	22	None
7082	[BUG]  [BUGGY]  final  double  k  =  getNumberOfDay().doubleValue;  [CE]  cannot  find  symbol  [CONTEXT]    protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();    [BUGGY]  final  double  k  =  getNumberOfDay().doubleValue;  [BUGGY]    final  double  m  =  getNumberOfSuccesses();  final  double  n  =  getSampleSize();  return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	293	293	1	replace	final  double  k  =  getNumberOfDay().doubleValue;	      final    double    k    =    getNumberOfDay();    	non-compiled	[CE]  cannot  find  symbol	185	None
7084	[BUG]  [BUGGY]  final  double  k  =  getNumberOfDay(N);  [CE]  cannot  find  symbol  [CONTEXT]    protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();    [BUGGY]  final  double  k  =  getNumberOfDay(N);  [BUGGY]    final  double  m  =  getNumberOfSuccesses();  final  double  n  =  getSampleSize();  return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	293	293	1	replace	final  double  k  =  getNumberOfDay(N);	      final    double    k    =    getNumberOfDay();    	non-compiled	[CE]  cannot  find  symbol	185	None
7112	[BUG]  [BUGGY]  if(numericalVarianceIsCalculated)  {  if(!numericalVarianceIsCalculated)  {  numericalVariance  =  null;  }  [CE]  illegal  start  of  expression  [CONTEXT]    public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();    [BUGGY]  if(numericalVarianceIsCalculated)  {  if(!numericalVarianceIsCalculated)  {  numericalVariance  =  null;  }  [BUGGY]    numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	281	281	1	replace	if(numericalVarianceIsCalculated)  {  if(!numericalVarianceIsCalculated)  {  numericalVariance  =  null;  }	      if(!numericalVarianceIsCalculated)    {    if(!numericalVarianceIsCalculated)    {    numericalVariance    =    null;    }    	non-compiled	[CE]  illegal  start  of  expression	173	None
7113	[BUG]  [BUGGY]  unless(!numericalVarianceIsCalculated)  {  if(!numericalVarianceIsCalculated)  {  numericalVariance  =  null;  }  [CE]  ';'  expected  [CONTEXT]    public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();    [BUGGY]  unless(!numericalVarianceIsCalculated)  {  if(!numericalVarianceIsCalculated)  {  numericalVariance  =  null;  }  [BUGGY]    numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	281	281	1	replace	unless(!numericalVarianceIsCalculated)  {  if(!numericalVarianceIsCalculated)  {  numericalVariance  =  null;  }	      if(!numericalVarianceIsCalculated)    {    if(!numericalVarianceIsCalculated)    {    numericalVariance    =    null;    }    	non-compiled	[CE]  ';'  expected	173	None
7114	[BUG]  [BUGGY]  if(!numericalVarianceIsCalculated)  {  if(!numericalVarianceIsCalculated)  {  numericalVariance  =  null;  [Delete]  [CE]  illegal  start  of  expression  [CONTEXT]    public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();    [BUGGY]  if(!numericalVarianceIsCalculated)  {  if(!numericalVarianceIsCalculated)  {  numericalVariance  =  null;  [Delete]  [BUGGY]    numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	281	281	1	replace	if(!numericalVarianceIsCalculated)  {  if(!numericalVarianceIsCalculated)  {  numericalVariance  =  null;  [Delete]	      if(!numericalVarianceIsCalculated)    {    if(!numericalVarianceIsCalculated)    {    numericalVariance    =    null;    }    	non-compiled	[CE]  illegal  start  of  expression	173	None
7143	[BUG]  [BUGGY]  final  double  numberOfSuccesses  =  getNumberOfSuccesses().doubleValue();  [CE]  int  cannot  be  dereferenced  [CONTEXT]    protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();    [BUGGY]  final  double  numberOfSuccesses  =  getNumberOfSuccesses().doubleValue();  [BUGGY]    final  double  m  =  getNumberOfSuccesses();  final  double  n  =  getSampleSize();  return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	293	293	1	replace	final  double  numberOfSuccesses  =  getNumberOfSuccesses().doubleValue();	      final    double    N    =    getNumberOfSuccesses().doubleValue();    	non-compiled	[CE]  int  cannot  be  dereferenced	144	None
