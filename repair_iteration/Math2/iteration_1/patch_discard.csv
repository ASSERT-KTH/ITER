increase failing tests,280,replace, [FE] IllegalArgumentException testDegenerateNoFailures,   ,if(!numericalVarianceIsCalculated) { throw new IllegalArgumentException(""); }
increase failing tests,292,replace, [FE] AssertionError testMoments, final  double  N  =  getPopulationSize()  /  2.0;  ,final double N = getPopulationSize() * 2.0;
increase failing tests,292,replace, [FE] AssertionError testMoments, final  double  N  =  getPopulationSize()  /  2.0;  ,final double N = getPopulationSize() / 2.0 + 1;
increase failing tests,268,replace, [FE] AssertionError testMoments, return(double)(getNumberOfSuccesses()  *  getSampleSize())/(double)getPopulationSize();  ,return(double)(getNumberOfSuccesses() / getSampleSize())/(double)getPopulationSize();
increase failing tests,268,replace, [FE] AssertionError testMoments, return(double)(getNumberOfSuccesses()  *  getSampleSize())/(double)getPopulationSize();  ,return(double)(getNumberOfSuccesses() * getPopulationSize())/(double)getPopulationSize();
increase failing tests,280,replace, [FE] AssertionError testMoments,   numericalVariance  =  getNumberOfSuccesses()  *  Math.pow(10,  numberOfSuccesses);  ,numericalVariance = getNumberOfSuccesses() / Math.pow(10, numberOfSuccesses);
increase failing tests,295,replace, [FE] AssertionError testMoments, return(N  *  m  *(N  *  n)*(N  *  m))  /(N  *  N  *  (N  -  1));  ,return(N * m *(N * n)/(N * m)) /(N * N * (N - 1));
increase failing tests,293,replace, [FE] AssertionError testMoments, final  double  m  =  getNumberOfSuccesses()  *  2;  ,final double m = getNumberOfSuccesses() / 2;
increase failing tests,293,replace, [FE] AssertionError testMoments, final  double  m  =  getNumberOfSuccesses()  *  2;  ,final double m = getNumberOfSuccesses() + 2;
increase failing tests,308,add, [FE] StackOverflowError testDegenerateNoFailures, ,    getPopulationSize();  getSupportLowerBound();
increase failing tests,293,replace, [FE] AssertionError testMoments, final  double  m  =  getNumberOfSuccesses()  *  N;  ,final double m = getNumberOfSuccesses() / N;
increase failing tests,294,replace, [FE] AssertionError testMoments, final  double  n  =  getDecimalSize();  ,int n = getNumberOfSuccesses();
increase failing tests,294,replace, [FE] AssertionError testMoments, final  double  n  =  getDecimalSize();  ,int n = getNumberOfSuccesses() - 1;
increase failing tests,294,replace, [FE] AssertionError testMoments, final  double  n  =  getDecimalSize();  ,int n = getNumberOfSuccesses() + 1;
increase failing tests,292,replace, [FE] AssertionError testMoments, final  double  N  =  getPopulationSize()  /  2;  ,final double N = getPopulationSize() * 2;
increase failing tests,292,replace, [FE] AssertionError testMoments, final  double  N  =  getPopulationSize()  /  2;  ,final double N = getPopulationSize() / 2 + 1;
increase failing tests,281,replace, [FE] AssertionError testMoments,   numericalVariance  =  getNumberOfSuccesses();  ,numericalVariance = getSampleSize();
increase failing tests,308,replace, [FE] AssertionError testDegenerateNoFailures, return  FastMath.max(0,  getNumberOfSuccesses()  +  getSampleSize()  -  getPopulationSize());  ,return FastMath.max(0, getNumberOfSuccesses() + getPopulationSize() - getPopulationSize());
increase failing tests,308,replace, [FE] AssertionError testDegenerateNoSuccesses, return  FastMath.max(0,  getNumberOfSuccesses()  +  getSampleSize()  -  getPopulationSize());  ,return FastMath.max(1, getNumberOfSuccesses() + getSampleSize() - getPopulationSize());
increase failing tests,308,replace, [FE] AssertionError testDegenerateNoSuccesses, return  FastMath.max(0,  getNumberOfSuccesses()  +  getSampleSize()  -  getPopulationSize());  ,return FastMath.max(0, getPopulationSize() + getSampleSize() - getNumberOfSuccesses());
increase failing tests,281,add, [FE] AssertionError testMoments, ,    numericalVariance  =  getNumberOfSuccesses();  numericalVariance = getSampleSize();
increase failing tests,268,replace, [FE] AssertionError testMoments,   if(getNumberOfSuccesses()  >  0)  {  if(getNumberOfSuccesses()  >  0)  {  return(double)getNumberOfSuccesses();  }  ,return(double)getNumberOfSuccesses();
increase failing tests,281,replace, [FE] AssertionError testMoments,   ,numericalVariance = getNumberOfSuccesses() /(double)numberOfSuccesses;
increase failing tests,281,add, [FE] ArithmeticException testDegenerateNoSuccesses, ,numericalVarianceIsCalculated  =  false;  numericalVariance = Math.abs(numberOfSuccesses / numberOfSuccesses);
increase failing tests,281,add, [FE] ArithmeticException testDegenerateNoSuccesses, ,    numericalVariance  =  Math.abs(numberOfSuccesses);  numericalVariance = getNumberOfSuccesses() /(numberOfSuccesses * getSampleSize());
increase failing tests,281,add, [FE] AssertionError testMoments, ,    numericalVariance  =  Math.abs(numberOfSuccesses);  numericalVariance = getNumberOfSuccesses() /(numberOfSuccesses - 1)* getSampleSize();
increase failing tests,280,replace, [FE] StackOverflowError testDegenerateNoFailures,   if(!numericalVarianceIsCalculated)  {  if(!numericalVarianceIsCalculated)  {  return  false;  }  ,final double dx = getNumericalVariance();
increase failing tests,308,replace, [FE] AssertionError testDegenerateNoFailures,   ,return getNumberOfSuccesses() - getPopulationSize();
increase failing tests,268,replace, [FE] AssertionError testMoments,   if(getNumberOfSuccesses()  >  0)  {  if(getNumberOfSuccesses()  >  0)  {  return(double)getNumberOfSuccesses()  *  getNumberOfSuccesses();  }  ,return(double)getNumberOfSuccesses() * getNumberOfSuccesses();
increase failing tests,294,replace, [FE] AssertionError testMoments, final  double  n  =  getDecimalSize();  ,int n = getNumberOfSuccesses() - 2;
increase failing tests,280,replace, [FE] StackOverflowError testDegenerateNoFailures,   if(!numericalVarianceIsCalculated)  {  if(!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumberOfSuccesses();  }  ,final double k = getNumericalVariance();
increase failing tests,308,replace, [FE] AssertionError testDegenerateNoSuccesses, return  FastMath.max(0,  getNumberOfSuccesses()  +  getSampleSize()  -  getPopulationSize());  ,return FastMath.max(0, getNumberOfSuccesses() + getSampleSize() - getNumberOfSuccesses());
increase failing tests,308,replace, [FE] AssertionError testDegenerateNoFailures, return  FastMath.max(0,  getNumberOfSuccesses()  +  getSampleSize()  -  getPopulationSize());  ,return FastMath.max(0, getNumberOfSuccesses() + getSampleSize() / getPopulationSize());
increase failing tests,308,replace, [FE] AssertionError testDegenerateNoFailures, return  FastMath.max(0,  getNumberOfSuccesses()  +  getSampleSize()  -  getPopulationSize());  ,return FastMath.max(0, getNumberOfSuccesses() / getSampleSize() - getPopulationSize());
increase failing tests,308,replace, [FE] AssertionError testDegenerateNoFailures, return  FastMath.max(0,  getNumberOfSuccesses()  +  getSampleSize()  -  getPopulationSize());  ,return FastMath.max(0, getNumberOfSuccesses() + getSampleSize() * getPopulationSize());
increase failing tests,293,add, [FE] StackOverflowError testDegenerateNoFailures, ,    final  double  k  =  getNumberOfSuccesses();  final double dx = getNumericalVariance();
increase failing tests,268,replace, [FE] AssertionError testMoments, return(double)(getNumberOfSuccesses()  *  getSampleSize())/(double)getPopulationSize();  ,return(double)(getNumberOfSuccesses() * getPopulationSize())/(double)getSampleSize();
increase failing tests,268,replace, [FE] AssertionError testMoments,   if(getNumberOfSuccesses()  >  0)  {  if(getNumberOfSuccesses()  >  0)  {  return(double)getNumberOfSuccesses()  *  getPopulationSize();  }  ,return(double)getNumberOfSuccesses() * getPopulationSize();
increase failing tests,281,replace, [FE] AssertionError testMoments,   numericalVariance  =  Math.abs(numberOfSuccesses);  ,numericalVariance = Math.abs(numberOfSuccesses / 100);
increase failing tests,280,replace, [FE] AssertionError testMoments,   ,numericalVariance = Math.floor(getSampleSize());
increase failing tests,292,replace, [FE] AssertionError testMoments,   double  N  =  getNumberOfSuccesses();  ,double N = getNumberOfSuccesses() + 1;
increase failing tests,281,add, [FE] AssertionError testMoments, ,    numericalVariance  =  Math.abs(numberOfSuccesses);  numericalVariance = Math.floor(getSampleSize());
increase failing tests,294,replace, [FE] AssertionError testMoments, final  double  n  =  getSampleSize()  *  getNumberOfSuccesses();  ,final double n = getSampleSize() + getNumberOfSuccesses();
increase failing tests,283,replace, [FE] AssertionError testMoments, return  numericalVariance  *  numberOfSuccesses;  ,return numericalVariance * numberOfSuccesses / sampleSize;
