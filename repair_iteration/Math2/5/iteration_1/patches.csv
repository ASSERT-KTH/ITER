bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  return  this.numericalVariance;  this.numericalVariance  =  calculateNumericalVariance();  [CE]  unreachable  statement  [FE]    AssertionError    [CONTEXT]    public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }    [BUGGY]  return  this.numericalVariance;  this.numericalVariance  =  calculateNumericalVariance();  [BUGGY]    }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	283	283	1	replace	return    this.numericalVariance;    this.numericalVariance  =  calculateNumericalVariance();	  	non-compiled	[CE]  unreachable  statement	5	None	add
2	[BUG]  [BUGGY]  return  this.numericalVariance;  this.numericalVariance  =  calculateNumberOfSuccesses();  [CE]  cannot  find  symbol  [FE]      AssertionError    [CONTEXT]    public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }    [BUGGY]  return  this.numericalVariance;  this.numericalVariance  =  calculateNumberOfSuccesses();  [BUGGY]    }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	283	283	1	replace	return    this.numericalVariance;    this.numericalVariance  =  calculateNumberOfSuccesses();	  	non-compiled	[CE]  cannot  find  symbol	5	None	add
3	[BUG]  [BUGGY]  return  this.numericalVariance;  if(numericalVarianceIsCalculated)  {  if(this.numericalVariance!=  null)  {  return  this.numericalVariance;  }  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]    public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }    [BUGGY]  return  this.numericalVariance;  if(numericalVarianceIsCalculated)  {  if(this.numericalVariance!=  null)  {  return  this.numericalVariance;  }  [BUGGY]    }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	283	283	1	replace	return    this.numericalVariance;    if(numericalVarianceIsCalculated)  {  if(this.numericalVariance!=  null)  {  return  this.numericalVariance;  }	  	non-compiled	[CE]  illegal  start  of  expression	5	None	add
4	[BUG]  [BUGGY]  double  numberOfSuccesses  =  getNumberOfSuccesses()  +  1;  [CE]  missing  return  statement  [FE]    AssertionError    [CONTEXT]    public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }    [BUGGY]  double  numberOfSuccesses  =  getNumberOfSuccesses()  +  1;  [BUGGY]    return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	283	283	1	replace	double  numberOfSuccesses  =  getNumberOfSuccesses()  +  1;	      double    numberOfSuccesses    =    getNumberOfSuccesses();    	non-compiled	[CE]  missing  return  statement	2	None	replace
5	[BUG]  [BUGGY]  return  Math.sqrt(numericalVarianceIsCalculated,  numericalVariance);  [CE]  method  sqrt  in  class  Math  cannot  be  applied  to  given  types;  [FE]        AssertionError    [CONTEXT]    public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }    [BUGGY]  return  Math.sqrt(numericalVarianceIsCalculated,  numericalVariance);  [BUGGY]    }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	283	283	1	replace	return  Math.sqrt(numericalVarianceIsCalculated,  numericalVariance);	  return    Math.sqrt(numericalVarianceIsCalculated);    	non-compiled	[CE]  method  sqrt  in  class  Math  cannot  be  applied  to  given  types;	8	None	replace
6	[BUG]  [BUGGY]  return  Math.sqrt(numericalVarianceIsCalculated,  numberOfSuccesses);  [CE]  method  sqrt  in  class  Math  cannot  be  applied  to  given  types;  [FE]          AssertionError    [CONTEXT]    public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }    [BUGGY]  return  Math.sqrt(numericalVarianceIsCalculated,  numberOfSuccesses);  [BUGGY]    }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	283	283	1	replace	return  Math.sqrt(numericalVarianceIsCalculated,  numberOfSuccesses);	  return    Math.sqrt(numericalVarianceIsCalculated);    	non-compiled	[CE]  method  sqrt  in  class  Math  cannot  be  applied  to  given  types;	8	None	replace
7	[BUG]  [BUGGY]  if(numericalVarianceIsCalculated)  {  for(int  i  =  0;  i  <  numberOfSuccesses;  ++i)  {  if(!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumberOf  [CE]  ';'  expected  [FE]          AssertionError    [CONTEXT]    public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }    [BUGGY]  if(numericalVarianceIsCalculated)  {  for(int  i  =  0;  i  <  numberOfSuccesses;  ++i)  {  if(!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumberOf  [BUGGY]    return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	283	283	1	replace	if(numericalVarianceIsCalculated)  {  for(int  i  =  0;  i  <  numberOfSuccesses;  ++i)  {  if(!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumberOf	      if(numericalVarianceIsCalculated)    {    for(int    i    =    0;    i    <    numberOfSuccesses;    ++i)    {    if(!numericalVarianceIsCalculated)    {    numericalVariance    =    calculateNumberOfSuccesses    	non-compiled	[CE]  ';'  expected	11	None	replace
8	[BUG]  [BUGGY]  if(numericalVarianceIsCalculated)  {  for(int  i  =  0;  i  <  numberOfSuccesses;  ++i)  {  if(!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumberOfSucc  [CE]  ';'  expected  [FE]            AssertionError    [CONTEXT]    public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }    [BUGGY]  if(numericalVarianceIsCalculated)  {  for(int  i  =  0;  i  <  numberOfSuccesses;  ++i)  {  if(!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumberOfSucc  [BUGGY]    return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	283	283	1	replace	if(numericalVarianceIsCalculated)  {  for(int  i  =  0;  i  <  numberOfSuccesses;  ++i)  {  if(!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumberOfSucc	      if(numericalVarianceIsCalculated)    {    for(int    i    =    0;    i    <    numberOfSuccesses;    ++i)    {    if(!numericalVarianceIsCalculated)    {    numericalVariance    =    calculateNumberOfSuccesses    	non-compiled	[CE]  ';'  expected	11	None	replace
9	[BUG]  [BUGGY]      double  numberOfSuccesses  =  getNumberOfSuccesses();  double  numberOfSuccesses  =  getNumberOfSuccesses();  [CE]  variable  numberOfSuccesses  is  already  defined  in  method  getNumericalVariance()  [FE]    AssertionError    [CONTEXT]    public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }    [BUGGY]      double  numberOfSuccesses  =  getNumberOfSuccesses();  double  numberOfSuccesses  =  getNumberOfSuccesses();  [BUGGY]    return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	283	283	1	replace	        double    numberOfSuccesses    =    getNumberOfSuccesses();    double  numberOfSuccesses  =  getNumberOfSuccesses();	  	non-compiled	[CE]  variable  numberOfSuccesses  is  already  defined  in  method  getNumericalVariance()	1	None	add
10	[BUG]  [BUGGY]      double  numberOfSuccesses  =  getNumberOfSuccesses();  Double  numberOfSuccesses  =  getNumberOfSuccesses();  [CE]  variable  numberOfSuccesses  is  already  defined  in  method  getNumericalVariance()  [FE]      AssertionError    [CONTEXT]    public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }    [BUGGY]      double  numberOfSuccesses  =  getNumberOfSuccesses();  Double  numberOfSuccesses  =  getNumberOfSuccesses();  [BUGGY]    return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	283	283	1	replace	        double    numberOfSuccesses    =    getNumberOfSuccesses();    Double  numberOfSuccesses  =  getNumberOfSuccesses();	  	non-compiled	[CE]  variable  numberOfSuccesses  is  already  defined  in  method  getNumericalVariance()	1	None	add
11	[BUG]  [BUGGY]  numericalVariance  =  calculateNumericalVariance();  [CE]  missing  return  statement  [FE]            AssertionError    [CONTEXT]    public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }    [BUGGY]  numericalVariance  =  calculateNumericalVariance();  [BUGGY]    return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	283	283	1	replace	numericalVariance  =  calculateNumericalVariance();	      if(numericalVarianceIsCalculated)    {    if(numericalVarianceIsCalculated)    {    numericalVariance    =    calculateNumericalVariance();    }    	non-compiled	[CE]  missing  return  statement	4	None	replace
12	[BUG]  [BUGGY]  if(numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();  }  [CE]  missing  return  statement  [FE]              AssertionError    [CONTEXT]    public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }    [BUGGY]  if(numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();  }  [BUGGY]    return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	283	283	1	replace	if(numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();  }	      if(numericalVarianceIsCalculated)    {    if(numericalVarianceIsCalculated)    {    numericalVariance    =    calculateNumericalVariance();    }    	non-compiled	[CE]  missing  return  statement	4	None	replace
13	[BUG]  [BUGGY]  return  numericalVarianceIsCalculated?  null  :  numericalVarianceIsCalculated;  [CE]  incompatible  types  [FE]        AssertionError    [CONTEXT]    public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }    [BUGGY]  return  numericalVarianceIsCalculated?  null  :  numericalVarianceIsCalculated;  [BUGGY]    }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	283	283	1	replace	return  numericalVarianceIsCalculated?  null  :  numericalVarianceIsCalculated;	  return    numericalVarianceIsCalculated;    	non-compiled	[CE]  incompatible  types	13	None	replace
14	[BUG]  [BUGGY]  numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  [CE]  missing  return  statement  [FE]        AssertionError    [CONTEXT]    public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }    [BUGGY]  numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  [BUGGY]    return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	283	283	1	replace	numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;	      if(numericalVarianceIsCalculated)    {    if(numericalVarianceIsCalculated)    {    numericalVariance    =    calculateNumericalVariance();    numericalVarianceIsCalculated    =    true;    }    	non-compiled	[CE]  missing  return  statement	9	None	replace
15	[BUG]  [BUGGY]  double  numberOfSuccesses  =  calculateNumberOfSuccesses()  +  1;  [CE]  cannot  find  symbol  [FE]          AssertionError    [CONTEXT]    public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }    [BUGGY]  double  numberOfSuccesses  =  calculateNumberOfSuccesses()  +  1;  [BUGGY]    return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	283	283	1	replace	double  numberOfSuccesses  =  calculateNumberOfSuccesses()  +  1;	      double    numberOfSuccesses    =    calculateNumberOfSuccesses();    	non-compiled	[CE]  cannot  find  symbol	3	None	replace
16	[BUG]  [BUGGY]  return  this.numericalVarianceIsCalculated?  null  :  this.numericalVarianceIsCalculated;  [CE]  incompatible  types  [FE]          AssertionError    [CONTEXT]    public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }    [BUGGY]  return  this.numericalVarianceIsCalculated?  null  :  this.numericalVarianceIsCalculated;  [BUGGY]    }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	283	283	1	replace	return  this.numericalVarianceIsCalculated?  null  :  this.numericalVarianceIsCalculated;	  return    this.numericalVarianceIsCalculated;    	non-compiled	[CE]  incompatible  types	7	None	replace
17	[BUG]  [BUGGY]  n  =  getNumberOfSuccesses();  [CE]  cannot  find  symbol  n  [FE]        AssertionError    [CONTEXT]    public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }    [BUGGY]  n  =  getNumberOfSuccesses();  [BUGGY]    return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	283	283	1	replace	n  =  getNumberOfSuccesses();	      if(numericalVarianceIsCalculated)    {    for(int    i    =    0;    i    <    numberOfSuccesses;    ++i)    {    if(!numericalVarianceIsCalculated)    {    numericalVariance    =    calculateNumericalVariance();    }    	non-compiled	[CE]  cannot  find  symbol  n	10	None	replace
18	[BUG]  [BUGGY]  numericalVariance  =  calculateNumberOfSuccesses();  [CE]  cannot  find  symbol  [FE]            AssertionError    [CONTEXT]    public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }    [BUGGY]  numericalVariance  =  calculateNumberOfSuccesses();  [BUGGY]    return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	283	283	1	replace	numericalVariance  =  calculateNumberOfSuccesses();	      if(numericalVarianceIsCalculated)    {    for(int    i    =    0;    i    <    numberOfSuccesses;    ++i)    {    if(!numericalVarianceIsCalculated)    {    numericalVariance    =    calculateNumericalVariance();    	non-compiled	[CE]  cannot  find  symbol	12	None	replace
19	[BUG]  [BUGGY]  n  =  numberOfSuccesses  -  1;  [CE]  cannot  find  symbol  n  [FE]            AssertionError    [CONTEXT]    public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }    [BUGGY]  n  =  numberOfSuccesses  -  1;  [BUGGY]    return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	283	283	1	replace	n  =  numberOfSuccesses  -  1;	      if(numericalVarianceIsCalculated)    {    for(int    i    =    0;    i    <    numberOfSuccesses;    ++i)    {    if(!numericalVarianceIsCalculated)    {    numericalVariance    =    calculateNumericalVariance();    	non-compiled	[CE]  cannot  find  symbol  n	12	None	replace
20	[BUG]  [BUGGY]  return  Math.sqrt(numericalVarianceIsCalculated,  sampleSize);  [CE]  method  sqrt  in  class  Math  cannot  be  applied  to  given  types;  [FE]        AssertionError    [CONTEXT]    public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }    [BUGGY]  return  Math.sqrt(numericalVarianceIsCalculated,  sampleSize);  [BUGGY]    }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	283	283	1	replace	return  Math.sqrt(numericalVarianceIsCalculated,  sampleSize);	  return    Math.sqrt(numericalVarianceIsCalculated);    	non-compiled	[CE]  method  sqrt  in  class  Math  cannot  be  applied  to  given  types;	8	None	replace
21	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]    public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }    [BUGGY]  return  numericalVarianceIsCalculated?  Double.POSITIVE_INFINITY  :  Double.POSITIVE_INFINITY;  [BUGGY]    }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	283	283	1	add	return  numericalVarianceIsCalculated?  Double.POSITIVE_INFINITY  :  Double.POSITIVE_INFINITY;	  return    numericalVarianceIsCalculated;    	compilable	  [FE]  AssertionError  	13	1	replace
22	[BUG]  [BUGGY]  return  numericalVarianceIsCalculated?  Double.POSITIVE_INFINITY  :  Double.POSITIVE_INFINITY;  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]    public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }    [BUGGY]  return  numericalVarianceIsCalculated?  Double.POSITIVE_INFINITY  :  Double.POSITIVE_INFINITY;  [BUGGY]    }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	283	283	1	replace	return  numericalVarianceIsCalculated?  Double.POSITIVE_INFINITY  :  Double.POSITIVE_INFINITY;	  return    numericalVarianceIsCalculated;    	compilable	  [FE]  AssertionError  	13	1	replace
23	[BUG]  [BUGGY]  if(numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }  [CE]  missing  return  statement  [FE]        AssertionError    [CONTEXT]    public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }    [BUGGY]  if(numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }  [BUGGY]    return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	283	283	1	replace	if(numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }	      if(numericalVarianceIsCalculated)    {    if(numericalVarianceIsCalculated)    {    numericalVariance    =    calculateNumericalVariance();    numericalVarianceIsCalculated    =    true;    }    	non-compiled	[CE]  missing  return  statement	9	None	replace
24	[BUG]  [BUGGY]  double  numberOfSuccesses  =  calculateNumberOfSuccesses(numericalVarianceIsCalculated);  [CE]  cannot  find  symbol  [FE]          AssertionError    [CONTEXT]    public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }    [BUGGY]  double  numberOfSuccesses  =  calculateNumberOfSuccesses(numericalVarianceIsCalculated);  [BUGGY]    return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	283	283	1	replace	double  numberOfSuccesses  =  calculateNumberOfSuccesses(numericalVarianceIsCalculated);	      double    numberOfSuccesses    =    calculateNumberOfSuccesses();    	non-compiled	[CE]  cannot  find  symbol	3	None	replace
25	[BUG]  [BUGGY]  return  this.numericalVariance;  this.numericalVariance  =  calculateNumberOfSuccesses(numericalVariance);  [CE]  cannot  find  symbol  [FE]    AssertionError    [CONTEXT]    public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }    [BUGGY]  return  this.numericalVariance;  this.numericalVariance  =  calculateNumberOfSuccesses(numericalVariance);  [BUGGY]    }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	283	283	1	replace	return    this.numericalVariance;    this.numericalVariance  =  calculateNumberOfSuccesses(numericalVariance);	  	non-compiled	[CE]  cannot  find  symbol	5	None	add
26	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]    public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }    [BUGGY]  return  numericalVarianceIsCalculated?  Double.POSITIVE_INFINITY  :  Double.NaN;  [BUGGY]    }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	283	283	1	add	return  numericalVarianceIsCalculated?  Double.POSITIVE_INFINITY  :  Double.NaN;	  return    numericalVarianceIsCalculated;    	compilable	  [FE]  AssertionError  	13	1	replace
27	[BUG]  [BUGGY]  return  numericalVarianceIsCalculated?  Double.POSITIVE_INFINITY  :  Double.NaN;  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]    public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }    [BUGGY]  return  numericalVarianceIsCalculated?  Double.POSITIVE_INFINITY  :  Double.NaN;  [BUGGY]    }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	283	283	1	replace	return  numericalVarianceIsCalculated?  Double.POSITIVE_INFINITY  :  Double.NaN;	  return    numericalVarianceIsCalculated;    	compilable	  [FE]  AssertionError  	13	1	replace
28	[BUG]  [BUGGY]  if(numericalVarianceIsCalculated)  {  for(int  i  =  0;  i  <  NumberOfSuccesses;  ++i)  {  if(!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();  }  [CE]  illegal  start  of  expression  [FE]            AssertionError    [CONTEXT]    public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }    [BUGGY]  if(numericalVarianceIsCalculated)  {  for(int  i  =  0;  i  <  NumberOfSuccesses;  ++i)  {  if(!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();  }  [BUGGY]    return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	283	283	1	replace	if(numericalVarianceIsCalculated)  {  for(int  i  =  0;  i  <  NumberOfSuccesses;  ++i)  {  if(!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();  }	      if(numericalVarianceIsCalculated)    {    for(int    i    =    0;    i    <    numberOfSuccesses;    ++i)    {    if(!numericalVarianceIsCalculated)    {    numericalVariance    =    calculateNumericalVariance();    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
29	[BUG]  [BUGGY]  return  Math.sqrt(numericalVariance,  numericalVarianceIsCalculated);  [CE]  method  sqrt  in  class  Math  cannot  be  applied  to  given  types;  [FE]        AssertionError    [CONTEXT]    public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }    [BUGGY]  return  Math.sqrt(numericalVariance,  numericalVarianceIsCalculated);  [BUGGY]    }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	283	283	1	replace	return  Math.sqrt(numericalVariance,  numericalVarianceIsCalculated);	  return    Math.sqrt(numericalVarianceIsCalculated);    	non-compiled	[CE]  method  sqrt  in  class  Math  cannot  be  applied  to  given  types;	8	None	replace
