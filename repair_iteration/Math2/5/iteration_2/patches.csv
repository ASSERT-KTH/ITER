bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  Double  numberOfSuccesses  =  getNumberOfSuccesses();  [CE]  incompatible  types  [FE]          AssertionError      [CONTEXT]      public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }      [BUGGY]  Double  numberOfSuccesses  =  getNumberOfSuccesses();  [BUGGY]      return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	283	283	1	replace	Double  numberOfSuccesses  =  getNumberOfSuccesses();	          double    numberOfSuccesses    =    getNumberOfSuccesses();    Double    numberOfSuccesses    =    getNumberOfSuccesses();    	non-compiled	[CE]  incompatible  types	10	None	replace
2	[BUG]  [BUGGY]  numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  false;  [CE]  missing  return  statement  [FE]            AssertionError      [CONTEXT]      public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }      [BUGGY]  numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  false;  [BUGGY]      return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	283	283	1	replace	numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  false;	  numericalVariance    =    calculateNumericalVariance();    numericalVarianceIsCalculated    =    true;    	non-compiled	[CE]  missing  return  statement	14	None	replace
3	[BUG]  [BUGGY]  return  Math.sqrt(numericalVariance,  numberOfSuccesses,  numericalVarianceIsCalculated);  [CE]  method  sqrt  in  class  Math  cannot  be  applied  to  given  types;  [FE]            AssertionError      [CONTEXT]      public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }      [BUGGY]  return  Math.sqrt(numericalVariance,  numberOfSuccesses,  numericalVarianceIsCalculated);  [BUGGY]      }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	283	283	1	replace	return  Math.sqrt(numericalVariance,  numberOfSuccesses,  numericalVarianceIsCalculated);	  return    Math.sqrt(numericalVariance,    numericalVarianceIsCalculated);    	non-compiled	[CE]  method  sqrt  in  class  Math  cannot  be  applied  to  given  types;	29	None	replace
4	[BUG]  [BUGGY]  return  Math.sqrt(numericalVariance,  numericalVarianceIsCalculated,  sampleSize);  [CE]  method  sqrt  in  class  Math  cannot  be  applied  to  given  types;  [FE]              AssertionError      [CONTEXT]      public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }      [BUGGY]  return  Math.sqrt(numericalVariance,  numericalVarianceIsCalculated,  sampleSize);  [BUGGY]      }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	283	283	1	replace	return  Math.sqrt(numericalVariance,  numericalVarianceIsCalculated,  sampleSize);	  return    Math.sqrt(numericalVariance,    numericalVarianceIsCalculated);    	non-compiled	[CE]  method  sqrt  in  class  Math  cannot  be  applied  to  given  types;	29	None	replace
5	[BUG]  [BUGGY]  return  numericalVarianceIsCalculated?  Double.POSITIVE_INFINITY  :  Double.NaN;  Double.POSITIVE_INFINITY  :  Double.NaN;  [CE]  not  a  statement  [FE]    AssertionError    [CONTEXT]      public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }      [BUGGY]  return  numericalVarianceIsCalculated?  Double.POSITIVE_INFINITY  :  Double.NaN;  Double.POSITIVE_INFINITY  :  Double.NaN;  [BUGGY]      }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	283	283	1	replace	return    numericalVarianceIsCalculated?    Double.POSITIVE_INFINITY    :    Double.NaN;    Double.POSITIVE_INFINITY  :  Double.NaN;	  	non-compiled	[CE]  not  a  statement	26	None	add
6	[BUG]  [BUGGY]  return  numericalVarianceIsCalculated?  Double.POSITIVE_INFINITY  :  Double.NaN;  double  numberOfSuccesses  =  getNumberOfSuccesses();  [CE]  unreachable  statement  [FE]      AssertionError    [CONTEXT]      public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }      [BUGGY]  return  numericalVarianceIsCalculated?  Double.POSITIVE_INFINITY  :  Double.NaN;  double  numberOfSuccesses  =  getNumberOfSuccesses();  [BUGGY]      }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	283	283	1	replace	return    numericalVarianceIsCalculated?    Double.POSITIVE_INFINITY    :    Double.NaN;    double  numberOfSuccesses  =  getNumberOfSuccesses();	  	non-compiled	[CE]  unreachable  statement	26	None	add
7	[BUG]  [BUGGY]  return  numericalVarianceIsCalculated?  Double.POSITIVE_INFINITY  :  Double.NaN;  if(numericalVarianceIsCalculated)  {  if(numericalVarianceIsCalculated)  {  return  numericalVariance;  }  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]      public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }      [BUGGY]  return  numericalVarianceIsCalculated?  Double.POSITIVE_INFINITY  :  Double.NaN;  if(numericalVarianceIsCalculated)  {  if(numericalVarianceIsCalculated)  {  return  numericalVariance;  }  [BUGGY]      }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	283	283	1	replace	return    numericalVarianceIsCalculated?    Double.POSITIVE_INFINITY    :    Double.NaN;    if(numericalVarianceIsCalculated)  {  if(numericalVarianceIsCalculated)  {  return  numericalVariance;  }	  	non-compiled	[CE]  illegal  start  of  expression	26	None	add
8	[BUG]  [BUGGY]  return  numericalVarianceIsCalculated?  Double.POSITIVE_INFINITY  :  Double.POSITIVE_INFINITY;  Double.POSITIVE_INFINITY  :  Double.POSITIVE_INFINITY;  [CE]  not  a  statement  [FE]    AssertionError    [CONTEXT]      public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }      [BUGGY]  return  numericalVarianceIsCalculated?  Double.POSITIVE_INFINITY  :  Double.POSITIVE_INFINITY;  Double.POSITIVE_INFINITY  :  Double.POSITIVE_INFINITY;  [BUGGY]      }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	283	283	1	replace	return    numericalVarianceIsCalculated?    Double.POSITIVE_INFINITY    :    Double.POSITIVE_INFINITY;    Double.POSITIVE_INFINITY  :  Double.POSITIVE_INFINITY;	  	non-compiled	[CE]  not  a  statement	21	None	add
9	[BUG]  [BUGGY]  return  numericalVarianceIsCalculated?  Double.POSITIVE_INFINITY  :  Double.POSITIVE_INFINITY;  double  numberOfSuccesses  =  calculateNumberOfSuccesses();  [CE]  cannot  find  symbol  [FE]      AssertionError    [CONTEXT]      public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }      [BUGGY]  return  numericalVarianceIsCalculated?  Double.POSITIVE_INFINITY  :  Double.POSITIVE_INFINITY;  double  numberOfSuccesses  =  calculateNumberOfSuccesses();  [BUGGY]      }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	283	283	1	replace	return    numericalVarianceIsCalculated?    Double.POSITIVE_INFINITY    :    Double.POSITIVE_INFINITY;    double  numberOfSuccesses  =  calculateNumberOfSuccesses();	  	non-compiled	[CE]  cannot  find  symbol	21	None	add
10	[BUG]  [BUGGY]  return  numericalVarianceIsCalculated?  Double.POSITIVE_INFINITY  :  Double.POSITIVE_INFINITY;  if(numericalVarianceIsCalculated)  {  if(numericalVarianceIsCalculated)  {  return  numericalVariance;  }  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]      public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }      [BUGGY]  return  numericalVarianceIsCalculated?  Double.POSITIVE_INFINITY  :  Double.POSITIVE_INFINITY;  if(numericalVarianceIsCalculated)  {  if(numericalVarianceIsCalculated)  {  return  numericalVariance;  }  [BUGGY]      }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	283	283	1	replace	return    numericalVarianceIsCalculated?    Double.POSITIVE_INFINITY    :    Double.POSITIVE_INFINITY;    if(numericalVarianceIsCalculated)  {  if(numericalVarianceIsCalculated)  {  return  numericalVariance;  }	  	non-compiled	[CE]  illegal  start  of  expression	21	None	add
11	[BUG]  [BUGGY]  this.numericalVariance  =  calculateNumericalVariance();  [CE]  missing  return  statement  [FE]        AssertionError      [CONTEXT]      public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }      [BUGGY]  this.numericalVariance  =  calculateNumericalVariance();  [BUGGY]      }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	283	283	1	replace	this.numericalVariance  =  calculateNumericalVariance();	  return    this.numericalVariance;    this.numericalVariance    =    calculateNumericalVariance();    	non-compiled	[CE]  missing  return  statement	1	None	replace
12	[BUG]  [BUGGY]  this.numericalVariance  =  calculateNumberOfSuccesses();  [CE]  cannot  find  symbol  [FE]          AssertionError      [CONTEXT]      public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }      [BUGGY]  this.numericalVariance  =  calculateNumberOfSuccesses();  [BUGGY]      }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	283	283	1	replace	this.numericalVariance  =  calculateNumberOfSuccesses();	  return    this.numericalVariance;    this.numericalVariance    =    calculateNumericalVariance();    	non-compiled	[CE]  cannot  find  symbol	1	None	replace
13	[BUG]  [BUGGY]  double  numberOfSuccesses  =  calculateNumberOfSuccesses(numericalVarianceIsCalculated,  numericalVariance);  [CE]  cannot  find  symbol  [FE]              AssertionError      [CONTEXT]      public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }      [BUGGY]  double  numberOfSuccesses  =  calculateNumberOfSuccesses(numericalVarianceIsCalculated,  numericalVariance);  [BUGGY]      return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	283	283	1	replace	double  numberOfSuccesses  =  calculateNumberOfSuccesses(numericalVarianceIsCalculated,  numericalVariance);	  double    numberOfSuccesses    =    calculateNumberOfSuccesses(numericalVarianceIsCalculated);    	non-compiled	[CE]  cannot  find  symbol	24	None	replace
14	[BUG]  [BUGGY]  double  numberOfSuccesses  =  calculateNumberOfSuccesses()  /  1;  [CE]  cannot  find  symbol  [FE]              AssertionError      [CONTEXT]      public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }      [BUGGY]  double  numberOfSuccesses  =  calculateNumberOfSuccesses()  /  1;  [BUGGY]      return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	283	283	1	replace	double  numberOfSuccesses  =  calculateNumberOfSuccesses()  /  1;	  double    numberOfSuccesses    =    calculateNumberOfSuccesses()    +    1;    	non-compiled	[CE]  cannot  find  symbol	15	None	replace
15	[BUG]  [BUGGY]  this.numericalVariance  =  calculateNumberOfSuccesses(numericalVariance);  [CE]  cannot  find  symbol  [FE]        AssertionError      [CONTEXT]      public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }      [BUGGY]  this.numericalVariance  =  calculateNumberOfSuccesses(numericalVariance);  [BUGGY]      }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	283	283	1	replace	this.numericalVariance  =  calculateNumberOfSuccesses(numericalVariance);	  return    this.numericalVariance;    this.numericalVariance    =    calculateNumberOfSuccesses(numericalVariance);    	non-compiled	[CE]  cannot  find  symbol	25	None	replace
16	[BUG]  [BUGGY]  n  =  this.numericalVariance;  this.numericalVariance  =  calculateNumberOfSuccesses(numericalVariance);  [CE]  cannot  find  symbol  n  [FE]          AssertionError      [CONTEXT]      public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }      [BUGGY]  n  =  this.numericalVariance;  this.numericalVariance  =  calculateNumberOfSuccesses(numericalVariance);  [BUGGY]      }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	283	283	1	replace	n  =  this.numericalVariance;  this.numericalVariance  =  calculateNumberOfSuccesses(numericalVariance);	  return    this.numericalVariance;    this.numericalVariance    =    calculateNumberOfSuccesses(numericalVariance);    	non-compiled	[CE]  cannot  find  symbol  n	25	None	replace
17	[BUG]  [BUGGY]  if(numericalVarianceIsCalculated)  {  if(this.numericalVariance!=  null)  {  return  this.numericalVariance;  }  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }      [BUGGY]  if(numericalVarianceIsCalculated)  {  if(this.numericalVariance!=  null)  {  return  this.numericalVariance;  }  [BUGGY]      }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	283	283	1	replace	if(numericalVarianceIsCalculated)  {  if(this.numericalVariance!=  null)  {  return  this.numericalVariance;  }	  return    this.numericalVariance;    if(numericalVarianceIsCalculated)    {    if(this.numericalVariance!=    null)    {    return    this.numericalVariance;    }    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
18	[BUG]  [BUGGY]  if(numericalVarianceIsCalculated)  {  if(this.numericalVariance  ==  null)  {  return  this.numericalVariance;  }  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }      [BUGGY]  if(numericalVarianceIsCalculated)  {  if(this.numericalVariance  ==  null)  {  return  this.numericalVariance;  }  [BUGGY]      }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	283	283	1	replace	if(numericalVarianceIsCalculated)  {  if(this.numericalVariance  ==  null)  {  return  this.numericalVariance;  }	  return    this.numericalVariance;    if(numericalVarianceIsCalculated)    {    if(this.numericalVariance!=    null)    {    return    this.numericalVariance;    }    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
19	[BUG]  [BUGGY]  return  Math.sqrt(numericalVariance,  numericalVariance);  [CE]  method  sqrt  in  class  Math  cannot  be  applied  to  given  types;  [FE]            AssertionError      [CONTEXT]      public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }      [BUGGY]  return  Math.sqrt(numericalVariance,  numericalVariance);  [BUGGY]      }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	283	283	1	replace	return  Math.sqrt(numericalVariance,  numericalVariance);	  return    Math.sqrt(numericalVarianceIsCalculated,    numericalVariance);    	non-compiled	[CE]  method  sqrt  in  class  Math  cannot  be  applied  to  given  types;	5	None	replace
20	[BUG]  [BUGGY]  return  Math.sqrt(numericalVarianceIsCalculated,  numberOfSuccesses,  sampleSize);  [CE]  method  sqrt  in  class  Math  cannot  be  applied  to  given  types;  [FE]            AssertionError      [CONTEXT]      public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }      [BUGGY]  return  Math.sqrt(numericalVarianceIsCalculated,  numberOfSuccesses,  sampleSize);  [BUGGY]      }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	283	283	1	replace	return  Math.sqrt(numericalVarianceIsCalculated,  numberOfSuccesses,  sampleSize);	  return    Math.sqrt(numericalVarianceIsCalculated,    sampleSize);    	non-compiled	[CE]  method  sqrt  in  class  Math  cannot  be  applied  to  given  types;	20	None	replace
21	[BUG]  [BUGGY]  return  Math.sqrt(numericalVarianceIsCalculated,  sampleSize,  numberOfSuccesses);  [CE]  method  sqrt  in  class  Math  cannot  be  applied  to  given  types;  [FE]              AssertionError      [CONTEXT]      public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }      [BUGGY]  return  Math.sqrt(numericalVarianceIsCalculated,  sampleSize,  numberOfSuccesses);  [BUGGY]      }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	283	283	1	replace	return  Math.sqrt(numericalVarianceIsCalculated,  sampleSize,  numberOfSuccesses);	  return    Math.sqrt(numericalVarianceIsCalculated,    sampleSize);    	non-compiled	[CE]  method  sqrt  in  class  Math  cannot  be  applied  to  given  types;	20	None	replace
22	[BUG]  [BUGGY]  double  n  =  numberOfSuccesses  -  1;  [CE]  missing  return  statement  [FE]                AssertionError      [CONTEXT]      public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }      [BUGGY]  double  n  =  numberOfSuccesses  -  1;  [BUGGY]      return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	283	283	1	replace	double  n  =  numberOfSuccesses  -  1;	  n    =    numberOfSuccesses    -    1;    	non-compiled	[CE]  missing  return  statement	19	None	replace
23	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }      [BUGGY]  return  numericalVarianceIsCalculated?  Double.POSITIVE_INFINITY  :  Double.NEGATIVE_INFINITY;  [BUGGY]      }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	283	283	1	add	return  numericalVarianceIsCalculated?  Double.POSITIVE_INFINITY  :  Double.NEGATIVE_INFINITY;	  return    numericalVarianceIsCalculated?    Double.POSITIVE_INFINITY    :    Double.NaN;    	compilable	  [FE]  AssertionError  	27	1	replace
24	[BUG]  [BUGGY]  return  numericalVarianceIsCalculated?  Double.POSITIVE_INFINITY  :  Double.NEGATIVE_INFINITY;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }      [BUGGY]  return  numericalVarianceIsCalculated?  Double.POSITIVE_INFINITY  :  Double.NEGATIVE_INFINITY;  [BUGGY]      }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	283	283	1	replace	return  numericalVarianceIsCalculated?  Double.POSITIVE_INFINITY  :  Double.NEGATIVE_INFINITY;	  return    numericalVarianceIsCalculated?    Double.POSITIVE_INFINITY    :    Double.NaN;    	compilable	  [FE]  AssertionError  	27	1	replace
25	[BUG]  [BUGGY]  return  Math.sqrt(numericalVarianceIsCalculated,  n,  numberOfSuccesses);  [CE]  cannot  find  symbol  n  [FE]              AssertionError      [CONTEXT]      public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }      [BUGGY]  return  Math.sqrt(numericalVarianceIsCalculated,  n,  numberOfSuccesses);  [BUGGY]      }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	283	283	1	replace	return  Math.sqrt(numericalVarianceIsCalculated,  n,  numberOfSuccesses);	  return    Math.sqrt(numericalVarianceIsCalculated,    numberOfSuccesses);    	non-compiled	[CE]  cannot  find  symbol  n	6	None	replace
26	[BUG]  [BUGGY]  return  Math.sqrt(numericalVarianceIsCalculated,  numberOfSuccesses,  dx);  [CE]  cannot  find  symbol  dx  [FE]                AssertionError      [CONTEXT]      public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }      [BUGGY]  return  Math.sqrt(numericalVarianceIsCalculated,  numberOfSuccesses,  dx);  [BUGGY]      }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	283	283	1	replace	return  Math.sqrt(numericalVarianceIsCalculated,  numberOfSuccesses,  dx);	  return    Math.sqrt(numericalVarianceIsCalculated,    numberOfSuccesses);    	non-compiled	[CE]  cannot  find  symbol  dx	6	None	replace
27	[BUG]  [BUGGY]  return  numberOfSuccesses?  Double.POSITIVE_INFINITY  :  Double.POSITIVE_INFINITY;  [CE]  incompatible  types  [FE]    AssertionError    [CONTEXT]      public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }      [BUGGY]  return  numberOfSuccesses?  Double.POSITIVE_INFINITY  :  Double.POSITIVE_INFINITY;  [BUGGY]      }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	283	283	1	replace	return  numberOfSuccesses?  Double.POSITIVE_INFINITY  :  Double.POSITIVE_INFINITY;	  return    numericalVarianceIsCalculated?    Double.POSITIVE_INFINITY    :    Double.POSITIVE_INFINITY;    	non-compiled	[CE]  incompatible  types	22	None	replace
28	[BUG]  [BUGGY]  if(numericalVarianceIsCalculated)  {  for(int  i  =  0;  i  <  numberOfSuccesses;  ++i)  {  if(!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumberOf  }  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]      public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }      [BUGGY]  if(numericalVarianceIsCalculated)  {  for(int  i  =  0;  i  <  numberOfSuccesses;  ++i)  {  if(!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumberOf  }  [BUGGY]      return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	283	283	1	replace	if(numericalVarianceIsCalculated)  {  for(int  i  =  0;  i  <  numberOfSuccesses;  ++i)  {  if(!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumberOf  }	  if(numericalVarianceIsCalculated)    {    for(int    i    =    0;    i    <    numberOfSuccesses;    ++i)    {    if(!numericalVarianceIsCalculated)    {    numericalVariance    =    calculateNumberOf    	non-compiled	[CE]  ';'  expected	7	None	replace
29	[BUG]  [BUGGY]  return  Math.sqrt(numericalVariance,  numberOfSuccesses,  n);  [CE]  cannot  find  symbol  n  [FE]              AssertionError      [CONTEXT]      public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }      [BUGGY]  return  Math.sqrt(numericalVariance,  numberOfSuccesses,  n);  [BUGGY]      }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	283	283	1	replace	return  Math.sqrt(numericalVariance,  numberOfSuccesses,  n);	  return    Math.sqrt(numericalVarianceIsCalculated,    numberOfSuccesses);    	non-compiled	[CE]  cannot  find  symbol  n	6	None	replace
30	[BUG]  [BUGGY]  if(numericalVarianceIsCalculated)  {  return  this.numericalVariance;  this.numericalVariance  =  calculateNumericalVariance();  }  [CE]  unreachable  statement  [FE]        AssertionError      [CONTEXT]      public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }      [BUGGY]  if(numericalVarianceIsCalculated)  {  return  this.numericalVariance;  this.numericalVariance  =  calculateNumericalVariance();  }  [BUGGY]      }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	283	283	1	replace	if(numericalVarianceIsCalculated)  {  return  this.numericalVariance;  this.numericalVariance  =  calculateNumericalVariance();  }	  return    this.numericalVariance;    this.numericalVariance    =    calculateNumericalVariance();    	non-compiled	[CE]  unreachable  statement	1	None	replace
31	[BUG]  [BUGGY]  if(numericalVarianceIsCalculated)  {  return  this.numericalVariance;  this.numericalVariance  =  calculateNumberOfSuccesses();  }  [CE]  cannot  find  symbol  [FE]          AssertionError      [CONTEXT]      public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }      [BUGGY]  if(numericalVarianceIsCalculated)  {  return  this.numericalVariance;  this.numericalVariance  =  calculateNumberOfSuccesses();  }  [BUGGY]      }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	283	283	1	replace	if(numericalVarianceIsCalculated)  {  return  this.numericalVariance;  this.numericalVariance  =  calculateNumberOfSuccesses();  }	  return    this.numericalVariance;    this.numericalVariance    =    calculateNumericalVariance();    	non-compiled	[CE]  cannot  find  symbol	1	None	replace
32	[BUG]  [BUGGY]  double  n  =  getNumberOfSuccesses();  [CE]  missing  return  statement  [FE]            AssertionError      [CONTEXT]      public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }      [BUGGY]  double  n  =  getNumberOfSuccesses();  [BUGGY]      return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	283	283	1	replace	double  n  =  getNumberOfSuccesses();	  n    =    getNumberOfSuccesses();    	non-compiled	[CE]  missing  return  statement	17	None	replace
33	[BUG]  [BUGGY]  return  Math.sqrt(varianceSize,  numberOfSuccesses);  [CE]  cannot  find  symbol  varianceSize  [FE]            AssertionError      [CONTEXT]      public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }      [BUGGY]  return  Math.sqrt(varianceSize,  numberOfSuccesses);  [BUGGY]      }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	283	283	1	replace	return  Math.sqrt(varianceSize,  numberOfSuccesses);	  return    Math.sqrt(numericalVarianceIsCalculated,    sampleSize);    	non-compiled	[CE]  cannot  find  symbol  varianceSize	20	None	replace
34	[BUG]  [BUGGY]  return  numericalVarianceIsCalculated?  Double.POSITIVE_INFINITY  :  Double.POSITIVE_INFINITY;  if(numericalVarianceIsCalculated)  {  return  numericalVarianceIsCalculated?  Double.POSITIVE_INFINITY  :  Double.POSITIVE_INFINITY;  }  [CE]  unreachable  statement  [FE]    AssertionError    [CONTEXT]      public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }      [BUGGY]  return  numericalVarianceIsCalculated?  Double.POSITIVE_INFINITY  :  Double.POSITIVE_INFINITY;  if(numericalVarianceIsCalculated)  {  return  numericalVarianceIsCalculated?  Double.POSITIVE_INFINITY  :  Double.POSITIVE_INFINITY;  }  [BUGGY]      }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	283	283	1	replace	return    numericalVarianceIsCalculated?    Double.POSITIVE_INFINITY    :    Double.POSITIVE_INFINITY;    if(numericalVarianceIsCalculated)  {  return  numericalVarianceIsCalculated?  Double.POSITIVE_INFINITY  :  Double.POSITIVE_INFINITY;  }	  	non-compiled	[CE]  unreachable  statement	21	None	add
35	[BUG]  [BUGGY]  return  numericalVarianceIsCalculated?  Double.POSITIVE_INFINITY  :  Double.POSITIVE_INFINITY;  if(numericalVarianceIsCalculated)  {  if(numericalVarianceIsCalculated)  {  return  calculateNumericalVariance();  }  [CE]  illegal  start  of  expression  [FE]      AssertionError    [CONTEXT]      public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }      [BUGGY]  return  numericalVarianceIsCalculated?  Double.POSITIVE_INFINITY  :  Double.POSITIVE_INFINITY;  if(numericalVarianceIsCalculated)  {  if(numericalVarianceIsCalculated)  {  return  calculateNumericalVariance();  }  [BUGGY]      }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	283	283	1	replace	return    numericalVarianceIsCalculated?    Double.POSITIVE_INFINITY    :    Double.POSITIVE_INFINITY;    if(numericalVarianceIsCalculated)  {  if(numericalVarianceIsCalculated)  {  return  calculateNumericalVariance();  }	  	non-compiled	[CE]  illegal  start  of  expression	21	None	add
36	[BUG]  [BUGGY]  return  numericalVarianceIsCalculated?  null  :  this.numericalVarianceIsCalculated;  [CE]  incompatible  types  [FE]              AssertionError      [CONTEXT]      public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }      [BUGGY]  return  numericalVarianceIsCalculated?  null  :  this.numericalVarianceIsCalculated;  [BUGGY]      }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	283	283	1	replace	return  numericalVarianceIsCalculated?  null  :  this.numericalVarianceIsCalculated;	  return    this.numericalVarianceIsCalculated?    null    :    this.numericalVarianceIsCalculated;    	non-compiled	[CE]  incompatible  types	16	None	replace
37	[BUG]  [BUGGY]  double  numberOfSuccesses  =  calculateNumberOfSuccesses(numericalVarianceIsCalculated,  sampleSize);  [CE]  cannot  find  symbol  [FE]              AssertionError      [CONTEXT]      public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }      [BUGGY]  double  numberOfSuccesses  =  calculateNumberOfSuccesses(numericalVarianceIsCalculated,  sampleSize);  [BUGGY]      return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	283	283	1	replace	double  numberOfSuccesses  =  calculateNumberOfSuccesses(numericalVarianceIsCalculated,  sampleSize);	  double    numberOfSuccesses    =    calculateNumberOfSuccesses(numericalVarianceIsCalculated);    	non-compiled	[CE]  cannot  find  symbol	24	None	replace
38	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }      [BUGGY]  return  numericalVarianceIsCalculated?  Double.POSITIVE_INFINITY  :  Double.NaN  +  1;  [BUGGY]      }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	283	283	1	add	return  numericalVarianceIsCalculated?  Double.POSITIVE_INFINITY  :  Double.NaN  +  1;	  return    numericalVarianceIsCalculated?    Double.POSITIVE_INFINITY    :    Double.NaN;    	compilable	  [FE]  AssertionError  	27	1	replace
39	[BUG]  [BUGGY]  return  numericalVarianceIsCalculated?  Double.POSITIVE_INFINITY  :  Double.NaN  +  1;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }      [BUGGY]  return  numericalVarianceIsCalculated?  Double.POSITIVE_INFINITY  :  Double.NaN  +  1;  [BUGGY]      }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	283	283	1	replace	return  numericalVarianceIsCalculated?  Double.POSITIVE_INFINITY  :  Double.NaN  +  1;	  return    numericalVarianceIsCalculated?    Double.POSITIVE_INFINITY    :    Double.NaN;    	compilable	  [FE]  AssertionError  	27	1	replace
40	[BUG]  [BUGGY]  NumericVariance  n  =  numberOfSuccesses  -  1;  [CE]  cannot  find  symbol  [FE]                AssertionError      [CONTEXT]      public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }      [BUGGY]  NumericVariance  n  =  numberOfSuccesses  -  1;  [BUGGY]      return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	283	283	1	replace	NumericVariance  n  =  numberOfSuccesses  -  1;	  n    =    numberOfSuccesses    -    1;    	non-compiled	[CE]  cannot  find  symbol	19	None	replace
41	[BUG]  [BUGGY]  numericalVariance  =  calculateNumberOfSucc  &  ';'  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }      [BUGGY]  numericalVariance  =  calculateNumberOfSucc  &  ';'  [BUGGY]      return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	283	283	1	replace	numericalVariance  =  calculateNumberOfSucc  &  ';'	  if(numericalVarianceIsCalculated)    {    for(int    i    =    0;    i    <    numberOfSuccesses;    ++i)    {    if(!numericalVarianceIsCalculated)    {    numericalVariance    =    calculateNumberOfSucc    	non-compiled	[CE]  ';'  expected	8	None	replace
42	[BUG]  [BUGGY]  numericalVariance  =  calculateNumberOfSucc  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]      public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }      [BUGGY]  numericalVariance  =  calculateNumberOfSucc  [BUGGY]      return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	283	283	1	replace	numericalVariance  =  calculateNumberOfSucc	  if(numericalVarianceIsCalculated)    {    for(int    i    =    0;    i    <    numberOfSuccesses;    ++i)    {    if(!numericalVarianceIsCalculated)    {    numericalVariance    =    calculateNumberOfSucc    	non-compiled	[CE]  ';'  expected	8	None	replace
43	[BUG]  [BUGGY]  return  numericalVariance;  this.numericalVariance  =  calculateNumberOfSuccesses();  [CE]  cannot  find  symbol  [FE]          AssertionError      [CONTEXT]      public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }      [BUGGY]  return  numericalVariance;  this.numericalVariance  =  calculateNumberOfSuccesses();  [BUGGY]      }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	283	283	1	replace	return  numericalVariance;  this.numericalVariance  =  calculateNumberOfSuccesses();	  return    this.numericalVariance;    this.numericalVariance    =    calculateNumberOfSuccesses();    	non-compiled	[CE]  cannot  find  symbol	2	None	replace
44	[BUG]  [BUGGY]  return  Math.sqrt(numericalVariance,  numberOfSuccesses);  [CE]  method  sqrt  in  class  Math  cannot  be  applied  to  given  types;  [FE]            AssertionError      [CONTEXT]      public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }      [BUGGY]  return  Math.sqrt(numericalVariance,  numberOfSuccesses);  [BUGGY]      }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	283	283	1	replace	return  Math.sqrt(numericalVariance,  numberOfSuccesses);	  return    Math.sqrt(numericalVarianceIsCalculated,    numericalVariance);    	non-compiled	[CE]  method  sqrt  in  class  Math  cannot  be  applied  to  given  types;	5	None	replace
45	[BUG]  [BUGGY]  if(numerOfSuccesses  >  0)  {  for(int  i  =  0;  i  <  numberOfSuccesses;  ++i)  {  if(!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumberOf  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]      public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }      [BUGGY]  if(numerOfSuccesses  >  0)  {  for(int  i  =  0;  i  <  numberOfSuccesses;  ++i)  {  if(!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumberOf  [BUGGY]      return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	283	283	1	replace	if(numerOfSuccesses  >  0)  {  for(int  i  =  0;  i  <  numberOfSuccesses;  ++i)  {  if(!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumberOf	  if(numericalVarianceIsCalculated)    {    for(int    i    =    0;    i    <    numberOfSuccesses;    ++i)    {    if(!numericalVarianceIsCalculated)    {    numericalVariance    =    calculateNumberOf    	non-compiled	[CE]  ';'  expected	7	None	replace
46	[BUG]  [BUGGY]  if(numerOfSuccesses!=  0)  {  for(int  i  =  0;  i  <  numberOfSuccesses;  ++i)  {  if(!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumberOf  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }      [BUGGY]  if(numerOfSuccesses!=  0)  {  for(int  i  =  0;  i  <  numberOfSuccesses;  ++i)  {  if(!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumberOf  [BUGGY]      return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	283	283	1	replace	if(numerOfSuccesses!=  0)  {  for(int  i  =  0;  i  <  numberOfSuccesses;  ++i)  {  if(!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumberOf	  if(numericalVarianceIsCalculated)    {    for(int    i    =    0;    i    <    numberOfSuccesses;    ++i)    {    if(!numericalVarianceIsCalculated)    {    numericalVariance    =    calculateNumberOf    	non-compiled	[CE]  ';'  expected	7	None	replace
47	[BUG]  [BUGGY]  return  numericalVariance?  Double.POSITIVE_INFINITY  :  Double.NaN;  [CE]  incompatible  types  [FE]    AssertionError    [CONTEXT]      public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }      [BUGGY]  return  numericalVariance?  Double.POSITIVE_INFINITY  :  Double.NaN;  [BUGGY]      }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	283	283	1	replace	return  numericalVariance?  Double.POSITIVE_INFINITY  :  Double.NaN;	  return    numericalVarianceIsCalculated?    Double.POSITIVE_INFINITY    :    Double.NaN;    	non-compiled	[CE]  incompatible  types	27	None	replace
48	[BUG]  [BUGGY]  return  numericalVariance;  this.numericalVariance  =  calculateNumberOfSuccesses(numericalVariance);  [CE]  cannot  find  symbol  [FE]        AssertionError      [CONTEXT]      public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }      [BUGGY]  return  numericalVariance;  this.numericalVariance  =  calculateNumberOfSuccesses(numericalVariance);  [BUGGY]      }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	283	283	1	replace	return  numericalVariance;  this.numericalVariance  =  calculateNumberOfSuccesses(numericalVariance);	  return    this.numericalVariance;    this.numericalVariance    =    calculateNumberOfSuccesses(numericalVariance);    	non-compiled	[CE]  cannot  find  symbol	25	None	replace
49	[BUG]  [BUGGY]  return  Math.sqrt(varianceSize,  numericalVariance);  [CE]  cannot  find  symbol  varianceSize  [FE]            AssertionError      [CONTEXT]      public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }      [BUGGY]  return  Math.sqrt(varianceSize,  numericalVariance);  [BUGGY]      }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	283	283	1	replace	return  Math.sqrt(varianceSize,  numericalVariance);	  return    Math.sqrt(numericalVarianceIsCalculated,    sampleSize);    	non-compiled	[CE]  cannot  find  symbol  varianceSize	20	None	replace
50	[BUG]  [BUGGY]  return  Math.sqrt(variance,  numericalVarianceIsCalculated);  [CE]  cannot  find  symbol  variance  [FE]              AssertionError      [CONTEXT]      public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }      [BUGGY]  return  Math.sqrt(variance,  numericalVarianceIsCalculated);  [BUGGY]      }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	283	283	1	replace	return  Math.sqrt(variance,  numericalVarianceIsCalculated);	  return    Math.sqrt(numericalVarianceIsCalculated,    sampleSize);    	non-compiled	[CE]  cannot  find  symbol  variance	20	None	replace
51	[BUG]  [BUGGY]  return  Math.sqrt(numericalVariance,  numericalVarianceIsCalculated,  numberOfSuccesses);  [CE]  method  sqrt  in  class  Math  cannot  be  applied  to  given  types;  [FE]            AssertionError      [CONTEXT]      public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }      [BUGGY]  return  Math.sqrt(numericalVariance,  numericalVarianceIsCalculated,  numberOfSuccesses);  [BUGGY]      }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	283	283	1	replace	return  Math.sqrt(numericalVariance,  numericalVarianceIsCalculated,  numberOfSuccesses);	  return    Math.sqrt(numericalVariance,    numericalVarianceIsCalculated);    	non-compiled	[CE]  method  sqrt  in  class  Math  cannot  be  applied  to  given  types;	29	None	replace
52	[BUG]  [BUGGY]  return  numericalVarianceIsCalculated?  Double.POSITIVE_INFINITY  :  Double.NaN;  if(numericalVarianceIsCalculated)  {  return  numericalVarianceIsCalculated?  Double.POSITIVE_INFINITY  :  Double.NaN;  }  [CE]  unreachable  statement  [FE]    AssertionError    [CONTEXT]      public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }      [BUGGY]  return  numericalVarianceIsCalculated?  Double.POSITIVE_INFINITY  :  Double.NaN;  if(numericalVarianceIsCalculated)  {  return  numericalVarianceIsCalculated?  Double.POSITIVE_INFINITY  :  Double.NaN;  }  [BUGGY]      }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	283	283	1	replace	return    numericalVarianceIsCalculated?    Double.POSITIVE_INFINITY    :    Double.NaN;    if(numericalVarianceIsCalculated)  {  return  numericalVarianceIsCalculated?  Double.POSITIVE_INFINITY  :  Double.NaN;  }	  	non-compiled	[CE]  unreachable  statement	26	None	add
53	[BUG]  [BUGGY]  return  numericalVarianceIsCalculated?  Double.POSITIVE_INFINITY  :  Double.NaN;  if(numericalVarianceIsCalculated)  {  return  numericalVarianceIsCalculated?  Double.POSITIVE_INFINITY  :  Double.NaN;  }  else  {  return  null;  }  [CE]  incompatible  types  [FE]      AssertionError    [CONTEXT]      public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }      [BUGGY]  return  numericalVarianceIsCalculated?  Double.POSITIVE_INFINITY  :  Double.NaN;  if(numericalVarianceIsCalculated)  {  return  numericalVarianceIsCalculated?  Double.POSITIVE_INFINITY  :  Double.NaN;  }  else  {  return  null;  }  [BUGGY]      }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	283	283	1	replace	return    numericalVarianceIsCalculated?    Double.POSITIVE_INFINITY    :    Double.NaN;    if(numericalVarianceIsCalculated)  {  return  numericalVarianceIsCalculated?  Double.POSITIVE_INFINITY  :  Double.NaN;  }  else  {  return  null;  }	  	non-compiled	[CE]  incompatible  types	26	None	add
54	[BUG]  [BUGGY]  return  numericalVariance?  Double.POSITIVE_INFINITY  :  Double.POSITIVE_INFINITY;  [CE]  incompatible  types  [FE]    AssertionError    [CONTEXT]      public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }      [BUGGY]  return  numericalVariance?  Double.POSITIVE_INFINITY  :  Double.POSITIVE_INFINITY;  [BUGGY]      }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	283	283	1	replace	return  numericalVariance?  Double.POSITIVE_INFINITY  :  Double.POSITIVE_INFINITY;	  return    numericalVarianceIsCalculated?    Double.POSITIVE_INFINITY    :    Double.POSITIVE_INFINITY;    	non-compiled	[CE]  incompatible  types	22	None	replace
55	[BUG]  [BUGGY]  if(numerOfSuccesses  >=  numberOfSuccesses)  {  for(int  i  =  0;  i  <  numberOfSuccesses;  ++i)  {  if(!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumberOf  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]      public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }      [BUGGY]  if(numerOfSuccesses  >=  numberOfSuccesses)  {  for(int  i  =  0;  i  <  numberOfSuccesses;  ++i)  {  if(!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumberOf  [BUGGY]      return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	283	283	1	replace	if(numerOfSuccesses  >=  numberOfSuccesses)  {  for(int  i  =  0;  i  <  numberOfSuccesses;  ++i)  {  if(!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumberOf	  if(numericalVarianceIsCalculated)    {    for(int    i    =    0;    i    <    numberOfSuccesses;    ++i)    {    if(!numericalVarianceIsCalculated)    {    numericalVariance    =    calculateNumberOf    	non-compiled	[CE]  ';'  expected	7	None	replace
56	[BUG]  [BUGGY]  return  numericalVarianceIsCalculated?  Double.POSITIVE_INFINITY  :  Double.POSITIVE_INFINITY;  if(numericalVarianceIsCalculated)  {  return  numericalVarianceIsCalculated?  Double.POSITIVE_INFINITY  :  Double.POSITIVE_INFINITY;  }  else  {  return  null;  }  [CE]  incompatible  types  [FE]    AssertionError    [CONTEXT]      public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }      [BUGGY]  return  numericalVarianceIsCalculated?  Double.POSITIVE_INFINITY  :  Double.POSITIVE_INFINITY;  if(numericalVarianceIsCalculated)  {  return  numericalVarianceIsCalculated?  Double.POSITIVE_INFINITY  :  Double.POSITIVE_INFINITY;  }  else  {  return  null;  }  [BUGGY]      }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	283	283	1	replace	return    numericalVarianceIsCalculated?    Double.POSITIVE_INFINITY    :    Double.POSITIVE_INFINITY;    if(numericalVarianceIsCalculated)  {  return  numericalVarianceIsCalculated?  Double.POSITIVE_INFINITY  :  Double.POSITIVE_INFINITY;  }  else  {  return  null;  }	  	non-compiled	[CE]  incompatible  types	21	None	add
57	[BUG]  [BUGGY]  return  numericalVariance?  null  :  this.numericalVarianceIsCalculated;  [CE]  incompatible  types  [FE]              AssertionError      [CONTEXT]      public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }      [BUGGY]  return  numericalVariance?  null  :  this.numericalVarianceIsCalculated;  [BUGGY]      }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	283	283	1	replace	return  numericalVariance?  null  :  this.numericalVarianceIsCalculated;	  return    this.numericalVarianceIsCalculated?    null    :    this.numericalVarianceIsCalculated;    	non-compiled	[CE]  incompatible  types	16	None	replace
