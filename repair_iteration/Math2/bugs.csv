bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	failing_test_number	action	patch
1	[BUG] [BUGGY] return (double) (getSampleSize() * getNumberOfSuccesses()) / (double) getPopulationSize(); [FE] AssertionError [CONTEXT] public double getNumericalMean() { [BUGGY] return (double) (getSampleSize() * getNumberOfSuccesses()) / (double) getPopulationSize(); [BUGGY] } [CLASS] HypergeometricDistribution [METHOD] getNumericalMean [RETURN_TYPE] double  [VARIABLES] boolean numericalVarianceIsCalculated double numericalVariance p p1 p2 p3 q ret long serialVersionUID int dx k m n numberOfSuccesses populationSize sampleSize x x0 x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	268	268	1	replace	
2	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] public double getNumericalMean() { [BUGGY] [BUGGY] return (double) (getSampleSize() * getNumberOfSuccesses()) / (double) getPopulationSize(); } [CLASS] HypergeometricDistribution [METHOD] getNumericalMean [RETURN_TYPE] double  [VARIABLES] boolean numericalVarianceIsCalculated double numericalVariance p p1 p2 p3 q ret long serialVersionUID int dx k m n numberOfSuccesses populationSize sampleSize x x0 x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	268	268	1	add	
3	[BUG] [BUGGY] if (!numericalVarianceIsCalculated) { [FE] AssertionError [CONTEXT] public double getNumericalVariance() { [BUGGY] if (!numericalVarianceIsCalculated) { [BUGGY] numericalVariance = calculateNumericalVariance(); numericalVarianceIsCalculated = true; } return numericalVariance; } [CLASS] HypergeometricDistribution [METHOD] getNumericalVariance [RETURN_TYPE] double  [VARIABLES] boolean numericalVarianceIsCalculated double numericalVariance p p1 p2 p3 q ret long serialVersionUID int dx k m n numberOfSuccesses populationSize sampleSize x x0 x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	279	279	1	replace	
4	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] public double getNumericalVariance() { [BUGGY] [BUGGY] if (!numericalVarianceIsCalculated) { numericalVariance = calculateNumericalVariance(); numericalVarianceIsCalculated = true; } return numericalVariance; } [CLASS] HypergeometricDistribution [METHOD] getNumericalVariance [RETURN_TYPE] double  [VARIABLES] boolean numericalVarianceIsCalculated double numericalVariance p p1 p2 p3 q ret long serialVersionUID int dx k m n numberOfSuccesses populationSize sampleSize x x0 x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	279	279	1	add	
5	[BUG] [BUGGY] numericalVariance = calculateNumericalVariance(); [FE] AssertionError [CONTEXT] public double getNumericalVariance() { if (!numericalVarianceIsCalculated) { [BUGGY] numericalVariance = calculateNumericalVariance(); [BUGGY] numericalVarianceIsCalculated = true; } return numericalVariance; } [CLASS] HypergeometricDistribution [METHOD] getNumericalVariance [RETURN_TYPE] double  [VARIABLES] boolean numericalVarianceIsCalculated double numericalVariance p p1 p2 p3 q ret long serialVersionUID int dx k m n numberOfSuccesses populationSize sampleSize x x0 x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	280	280	1	replace	
6	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] public double getNumericalVariance() { if (!numericalVarianceIsCalculated) { [BUGGY] [BUGGY] numericalVariance = calculateNumericalVariance(); numericalVarianceIsCalculated = true; } return numericalVariance; } [CLASS] HypergeometricDistribution [METHOD] getNumericalVariance [RETURN_TYPE] double  [VARIABLES] boolean numericalVarianceIsCalculated double numericalVariance p p1 p2 p3 q ret long serialVersionUID int dx k m n numberOfSuccesses populationSize sampleSize x x0 x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	280	280	1	add	
7	[BUG] [BUGGY] numericalVarianceIsCalculated = true; [FE] AssertionError [CONTEXT] public double getNumericalVariance() { if (!numericalVarianceIsCalculated) { numericalVariance = calculateNumericalVariance(); [BUGGY] numericalVarianceIsCalculated = true; [BUGGY] } return numericalVariance; } [CLASS] HypergeometricDistribution [METHOD] getNumericalVariance [RETURN_TYPE] double  [VARIABLES] boolean numericalVarianceIsCalculated double numericalVariance p p1 p2 p3 q ret long serialVersionUID int dx k m n numberOfSuccesses populationSize sampleSize x x0 x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	281	281	1	replace	
8	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] public double getNumericalVariance() { if (!numericalVarianceIsCalculated) { numericalVariance = calculateNumericalVariance(); [BUGGY] [BUGGY] numericalVarianceIsCalculated = true; } return numericalVariance; } [CLASS] HypergeometricDistribution [METHOD] getNumericalVariance [RETURN_TYPE] double  [VARIABLES] boolean numericalVarianceIsCalculated double numericalVariance p p1 p2 p3 q ret long serialVersionUID int dx k m n numberOfSuccesses populationSize sampleSize x x0 x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	281	281	1	add	
9	[BUG] [BUGGY] return numericalVariance; [FE] AssertionError [CONTEXT] public double getNumericalVariance() { if (!numericalVarianceIsCalculated) { numericalVariance = calculateNumericalVariance(); numericalVarianceIsCalculated = true; } [BUGGY] return numericalVariance; [BUGGY] } [CLASS] HypergeometricDistribution [METHOD] getNumericalVariance [RETURN_TYPE] double  [VARIABLES] boolean numericalVarianceIsCalculated double numericalVariance p p1 p2 p3 q ret long serialVersionUID int dx k m n numberOfSuccesses populationSize sampleSize x x0 x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	283	283	1	replace	
10	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] public double getNumericalVariance() { if (!numericalVarianceIsCalculated) { numericalVariance = calculateNumericalVariance(); numericalVarianceIsCalculated = true; } [BUGGY] [BUGGY] return numericalVariance; } [CLASS] HypergeometricDistribution [METHOD] getNumericalVariance [RETURN_TYPE] double  [VARIABLES] boolean numericalVarianceIsCalculated double numericalVariance p p1 p2 p3 q ret long serialVersionUID int dx k m n numberOfSuccesses populationSize sampleSize x x0 x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	283	283	1	add	
11	[BUG] [BUGGY] final double N = getPopulationSize(); [FE] AssertionError [CONTEXT] protected double calculateNumericalVariance() { [BUGGY] final double N = getPopulationSize(); [BUGGY] final double m = getNumberOfSuccesses(); final double n = getSampleSize(); return (n * m * (N - n) * (N - m)) / (N * N * (N - 1)); } [CLASS] HypergeometricDistribution [METHOD] calculateNumericalVariance [RETURN_TYPE] double  [VARIABLES] boolean numericalVarianceIsCalculated double N m n numericalVariance p p1 p2 p3 q ret long serialVersionUID int dx k m n numberOfSuccesses populationSize sampleSize x x0 x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	292	292	1	replace	
12	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] protected double calculateNumericalVariance() { [BUGGY] [BUGGY] final double N = getPopulationSize(); final double m = getNumberOfSuccesses(); final double n = getSampleSize(); return (n * m * (N - n) * (N - m)) / (N * N * (N - 1)); } [CLASS] HypergeometricDistribution [METHOD] calculateNumericalVariance [RETURN_TYPE] double  [VARIABLES] boolean numericalVarianceIsCalculated double N m n numericalVariance p p1 p2 p3 q ret long serialVersionUID int dx k m n numberOfSuccesses populationSize sampleSize x x0 x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	292	292	1	add	
13	[BUG] [BUGGY] final double m = getNumberOfSuccesses(); [FE] AssertionError [CONTEXT] protected double calculateNumericalVariance() { final double N = getPopulationSize(); [BUGGY] final double m = getNumberOfSuccesses(); [BUGGY] final double n = getSampleSize(); return (n * m * (N - n) * (N - m)) / (N * N * (N - 1)); } [CLASS] HypergeometricDistribution [METHOD] calculateNumericalVariance [RETURN_TYPE] double  [VARIABLES] boolean numericalVarianceIsCalculated double N m n numericalVariance p p1 p2 p3 q ret long serialVersionUID int dx k m n numberOfSuccesses populationSize sampleSize x x0 x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	293	293	1	replace	
14	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] protected double calculateNumericalVariance() { final double N = getPopulationSize(); [BUGGY] [BUGGY] final double m = getNumberOfSuccesses(); final double n = getSampleSize(); return (n * m * (N - n) * (N - m)) / (N * N * (N - 1)); } [CLASS] HypergeometricDistribution [METHOD] calculateNumericalVariance [RETURN_TYPE] double  [VARIABLES] boolean numericalVarianceIsCalculated double N m n numericalVariance p p1 p2 p3 q ret long serialVersionUID int dx k m n numberOfSuccesses populationSize sampleSize x x0 x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	293	293	1	add	
15	[BUG] [BUGGY] final double n = getSampleSize(); [FE] AssertionError [CONTEXT] protected double calculateNumericalVariance() { final double N = getPopulationSize(); final double m = getNumberOfSuccesses(); [BUGGY] final double n = getSampleSize(); [BUGGY] return (n * m * (N - n) * (N - m)) / (N * N * (N - 1)); } [CLASS] HypergeometricDistribution [METHOD] calculateNumericalVariance [RETURN_TYPE] double  [VARIABLES] boolean numericalVarianceIsCalculated double N m n numericalVariance p p1 p2 p3 q ret long serialVersionUID int dx k m n numberOfSuccesses populationSize sampleSize x x0 x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	294	294	1	replace	
16	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] protected double calculateNumericalVariance() { final double N = getPopulationSize(); final double m = getNumberOfSuccesses(); [BUGGY] [BUGGY] final double n = getSampleSize(); return (n * m * (N - n) * (N - m)) / (N * N * (N - 1)); } [CLASS] HypergeometricDistribution [METHOD] calculateNumericalVariance [RETURN_TYPE] double  [VARIABLES] boolean numericalVarianceIsCalculated double N m n numericalVariance p p1 p2 p3 q ret long serialVersionUID int dx k m n numberOfSuccesses populationSize sampleSize x x0 x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	294	294	1	add	
17	[BUG] [BUGGY] return (n * m * (N - n) * (N - m)) / (N * N * (N - 1)); [FE] AssertionError [CONTEXT] protected double calculateNumericalVariance() { final double N = getPopulationSize(); final double m = getNumberOfSuccesses(); final double n = getSampleSize(); [BUGGY] return (n * m * (N - n) * (N - m)) / (N * N * (N - 1)); [BUGGY] } [CLASS] HypergeometricDistribution [METHOD] calculateNumericalVariance [RETURN_TYPE] double  [VARIABLES] boolean numericalVarianceIsCalculated double N m n numericalVariance p p1 p2 p3 q ret long serialVersionUID int dx k m n numberOfSuccesses populationSize sampleSize x x0 x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	295	295	1	replace	
18	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] protected double calculateNumericalVariance() { final double N = getPopulationSize(); final double m = getNumberOfSuccesses(); final double n = getSampleSize(); [BUGGY] [BUGGY] return (n * m * (N - n) * (N - m)) / (N * N * (N - 1)); } [CLASS] HypergeometricDistribution [METHOD] calculateNumericalVariance [RETURN_TYPE] double  [VARIABLES] boolean numericalVarianceIsCalculated double N m n numericalVariance p p1 p2 p3 q ret long serialVersionUID int dx k m n numberOfSuccesses populationSize sampleSize x x0 x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	295	295	1	add	
19	[BUG] [BUGGY] return FastMath.max(0,  getSampleSize() + getNumberOfSuccesses() - getPopulationSize()); [FE] AssertionError [CONTEXT] public int getSupportLowerBound() { [BUGGY] return FastMath.max(0,       getSampleSize() + getNumberOfSuccesses() - getPopulationSize()); [BUGGY] getSampleSize() + getNumberOfSuccesses() - getPopulationSize()); } [CLASS] HypergeometricDistribution [METHOD] getSupportLowerBound [RETURN_TYPE] int  [VARIABLES] boolean numericalVarianceIsCalculated double N m n numericalVariance p p1 p2 p3 q ret long serialVersionUID int dx k m n numberOfSuccesses populationSize sampleSize x x0 x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	308	309	1	replace	
20	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] public int getSupportLowerBound() { [BUGGY] [BUGGY] return FastMath.max(0,       getSampleSize() + getNumberOfSuccesses() - getPopulationSize()); getSampleSize() + getNumberOfSuccesses() - getPopulationSize()); } [CLASS] HypergeometricDistribution [METHOD] getSupportLowerBound [RETURN_TYPE] int  [VARIABLES] boolean numericalVarianceIsCalculated double N m n numericalVariance p p1 p2 p3 q ret long serialVersionUID int dx k m n numberOfSuccesses populationSize sampleSize x x0 x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	308	309	1	add	
21	[BUG] [BUGGY] return FastMath.min(getNumberOfSuccesses(), getSampleSize()); [FE] AssertionError [CONTEXT] public int getSupportUpperBound() { [BUGGY] return FastMath.min(getNumberOfSuccesses(), getSampleSize()); [BUGGY] } [CLASS] HypergeometricDistribution [METHOD] getSupportUpperBound [RETURN_TYPE] int  [VARIABLES] boolean numericalVarianceIsCalculated double N m n numericalVariance p p1 p2 p3 q ret long serialVersionUID int dx k m n numberOfSuccesses populationSize sampleSize x x0 x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	321	321	1	replace	
22	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] public int getSupportUpperBound() { [BUGGY] [BUGGY] return FastMath.min(getNumberOfSuccesses(), getSampleSize()); } [CLASS] HypergeometricDistribution [METHOD] getSupportUpperBound [RETURN_TYPE] int  [VARIABLES] boolean numericalVarianceIsCalculated double N m n numericalVariance p p1 p2 p3 q ret long serialVersionUID int dx k m n numberOfSuccesses populationSize sampleSize x x0 x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	321	321	1	add	
23	[BUG] [BUGGY] return numberOfSuccesses; [FE] AssertionError [CONTEXT] public int getNumberOfSuccesses() { [BUGGY] return numberOfSuccesses; [BUGGY] } [CLASS] HypergeometricDistribution [METHOD] getNumberOfSuccesses [RETURN_TYPE] int  [VARIABLES] boolean numericalVarianceIsCalculated double numericalVariance ret long serialVersionUID int k m n numberOfSuccesses populationSize sampleSize x  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3333333333333333	161	161	1	replace	
24	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] public int getNumberOfSuccesses() { [BUGGY] [BUGGY] return numberOfSuccesses; } [CLASS] HypergeometricDistribution [METHOD] getNumberOfSuccesses [RETURN_TYPE] int  [VARIABLES] boolean numericalVarianceIsCalculated double numericalVariance ret long serialVersionUID int k m n numberOfSuccesses populationSize sampleSize x  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3333333333333333	161	161	1	add	
25	[BUG] [BUGGY] return populationSize; [FE] AssertionError [CONTEXT] public int getPopulationSize() { [BUGGY] return populationSize; [BUGGY] } [CLASS] HypergeometricDistribution [METHOD] getPopulationSize [RETURN_TYPE] int  [VARIABLES] boolean numericalVarianceIsCalculated double numericalVariance ret long serialVersionUID int k m n numberOfSuccesses populationSize sampleSize x  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3333333333333333	170	170	1	replace	
26	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] public int getPopulationSize() { [BUGGY] [BUGGY] return populationSize; } [CLASS] HypergeometricDistribution [METHOD] getPopulationSize [RETURN_TYPE] int  [VARIABLES] boolean numericalVarianceIsCalculated double numericalVariance ret long serialVersionUID int k m n numberOfSuccesses populationSize sampleSize x  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3333333333333333	170	170	1	add	
27	[BUG] [BUGGY] return sampleSize; [FE] AssertionError [CONTEXT] public int getSampleSize() { [BUGGY] return sampleSize; [BUGGY] } [CLASS] HypergeometricDistribution [METHOD] getSampleSize [RETURN_TYPE] int  [VARIABLES] boolean numericalVarianceIsCalculated double numericalVariance ret long serialVersionUID int k m n numberOfSuccesses populationSize sampleSize x  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3333333333333333	179	179	1	replace	
28	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] public int getSampleSize() { [BUGGY] [BUGGY] return sampleSize; } [CLASS] HypergeometricDistribution [METHOD] getSampleSize [RETURN_TYPE] int  [VARIABLES] boolean numericalVarianceIsCalculated double numericalVariance ret long serialVersionUID int k m n numberOfSuccesses populationSize sampleSize x  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3333333333333333	179	179	1	add	
29	[BUG] [BUGGY] this(new Well19937c(), populationSize, numberOfSuccesses, sampleSize); [FE] AssertionError [CONTEXT] public HypergeometricDistribution(int populationSize, int numberOfSuccesses, int sampleSize) throws NotPositiveException, NotStrictlyPositiveException, NumberIsTooLargeException { [BUGGY] this(new Well19937c(), populationSize, numberOfSuccesses, sampleSize); [BUGGY] } [CLASS] HypergeometricDistribution [METHOD] <init> [RETURN_TYPE] HypergeometricDistribution(int,int,int)  int populationSize int numberOfSuccesses int sampleSize [VARIABLES] boolean numericalVarianceIsCalculated double numericalVariance long serialVersionUID int numberOfSuccesses populationSize sampleSize  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.25	63	63	1	replace	
30	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] public HypergeometricDistribution(int populationSize, int numberOfSuccesses, int sampleSize) throws NotPositiveException, NotStrictlyPositiveException, NumberIsTooLargeException { [BUGGY] [BUGGY] this(new Well19937c(), populationSize, numberOfSuccesses, sampleSize); } [CLASS] HypergeometricDistribution [METHOD] <init> [RETURN_TYPE] HypergeometricDistribution(int,int,int)  int populationSize int numberOfSuccesses int sampleSize [VARIABLES] boolean numericalVarianceIsCalculated double numericalVariance long serialVersionUID int numberOfSuccesses populationSize sampleSize  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.25	63	63	1	add	
31	[BUG] [BUGGY] } [FE] AssertionError [CONTEXT] public HypergeometricDistribution(int populationSize, int numberOfSuccesses, int sampleSize) throws NotPositiveException, NotStrictlyPositiveException, NumberIsTooLargeException { this(new Well19937c(), populationSize, numberOfSuccesses, sampleSize); [BUGGY] } [BUGGY]  [CLASS] HypergeometricDistribution [METHOD] <init> [RETURN_TYPE] HypergeometricDistribution(int,int,int)  int populationSize int numberOfSuccesses int sampleSize [VARIABLES] boolean numericalVarianceIsCalculated double numericalVariance long serialVersionUID int numberOfSuccesses populationSize sampleSize  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.25	64	64	1	replace	
32	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] public HypergeometricDistribution(int populationSize, int numberOfSuccesses, int sampleSize) throws NotPositiveException, NotStrictlyPositiveException, NumberIsTooLargeException { this(new Well19937c(), populationSize, numberOfSuccesses, sampleSize); [BUGGY] [BUGGY] } [CLASS] HypergeometricDistribution [METHOD] <init> [RETURN_TYPE] HypergeometricDistribution(int,int,int)  int populationSize int numberOfSuccesses int sampleSize [VARIABLES] boolean numericalVarianceIsCalculated double numericalVariance long serialVersionUID int numberOfSuccesses populationSize sampleSize  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.25	64	64	1	add	
33	[BUG] [BUGGY] super(rng); [FE] AssertionError [CONTEXT] throws NotPositiveException, NotStrictlyPositiveException, NumberIsTooLargeException { [BUGGY] super(rng); [BUGGY]  if (populationSize <= 0) { throw new NotStrictlyPositiveException(LocalizedFormats.POPULATION_SIZE, populationSize); } if (numberOfSuccesses < 0) { throw new NotPositiveException(LocalizedFormats.NUMBER_OF_SUCCESSES, numberOfSuccesses); } if (sampleSize < 0) { [CLASS] HypergeometricDistribution [METHOD] <init> [RETURN_TYPE] RandomGenerator,int,int,int)  RandomGenerator rng int populationSize int numberOfSuccesses int sampleSize [VARIABLES] boolean numericalVarianceIsCalculated double numericalVariance long serialVersionUID int numberOfSuccesses populationSize sampleSize RandomGenerator rng  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.25	84	84	1	replace	
34	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] throws NotPositiveException, NotStrictlyPositiveException, NumberIsTooLargeException { [BUGGY] [BUGGY] super(rng); if (populationSize <= 0) { throw new NotStrictlyPositiveException(LocalizedFormats.POPULATION_SIZE, populationSize); } if (numberOfSuccesses < 0) { throw new NotPositiveException(LocalizedFormats.NUMBER_OF_SUCCESSES, numberOfSuccesses); } if (sampleSize < 0) { [CLASS] HypergeometricDistribution [METHOD] <init> [RETURN_TYPE] RandomGenerator,int,int,int)  RandomGenerator rng int populationSize int numberOfSuccesses int sampleSize [VARIABLES] boolean numericalVarianceIsCalculated double numericalVariance long serialVersionUID int numberOfSuccesses populationSize sampleSize RandomGenerator rng  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.25	84	84	1	add	
35	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] private final int sampleSize; [CLASS] HypergeometricDistribution  [VARIABLES] 	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.25	45	45	1	replace	
36	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] private final int sampleSize; [CLASS] HypergeometricDistribution  [VARIABLES] 	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.25	45	45	1	add	
37	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] private double numericalVariance = Double.NaN; [CLASS] HypergeometricDistribution  [VARIABLES] 	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.25	47	47	1	replace	
38	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] private double numericalVariance = Double.NaN; [CLASS] HypergeometricDistribution  [VARIABLES] 	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.25	47	47	1	add	
39	[BUG] [BUGGY] if (populationSize <= 0) { [FE] AssertionError [CONTEXT] throws NotPositiveException, NotStrictlyPositiveException, NumberIsTooLargeException { super(rng); [BUGGY] if (populationSize <= 0) { [BUGGY] throw new NotStrictlyPositiveException(LocalizedFormats.POPULATION_SIZE, populationSize); } if (numberOfSuccesses < 0) { throw new NotPositiveException(LocalizedFormats.NUMBER_OF_SUCCESSES, numberOfSuccesses); } if (sampleSize < 0) { throw new NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES, sampleSize); [CLASS] HypergeometricDistribution [METHOD] <init> [RETURN_TYPE] RandomGenerator,int,int,int)  RandomGenerator rng int populationSize int numberOfSuccesses int sampleSize [VARIABLES] boolean numericalVarianceIsCalculated double numericalVariance long serialVersionUID int numberOfSuccesses populationSize sampleSize RandomGenerator rng  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.25	86	86	1	replace	
40	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] throws NotPositiveException, NotStrictlyPositiveException, NumberIsTooLargeException { super(rng); [BUGGY] [BUGGY] if (populationSize <= 0) { throw new NotStrictlyPositiveException(LocalizedFormats.POPULATION_SIZE, populationSize); } if (numberOfSuccesses < 0) { throw new NotPositiveException(LocalizedFormats.NUMBER_OF_SUCCESSES, numberOfSuccesses); } if (sampleSize < 0) { throw new NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES, sampleSize); [CLASS] HypergeometricDistribution [METHOD] <init> [RETURN_TYPE] RandomGenerator,int,int,int)  RandomGenerator rng int populationSize int numberOfSuccesses int sampleSize [VARIABLES] boolean numericalVarianceIsCalculated double numericalVariance long serialVersionUID int numberOfSuccesses populationSize sampleSize RandomGenerator rng  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.25	86	86	1	add	
41	[BUG] [BUGGY] if (numberOfSuccesses < 0) { [FE] AssertionError [CONTEXT] throws NotPositiveException, NotStrictlyPositiveException, NumberIsTooLargeException { super(rng); if (populationSize <= 0) { throw new NotStrictlyPositiveException(LocalizedFormats.POPULATION_SIZE, populationSize); } [BUGGY] if (numberOfSuccesses < 0) { [BUGGY] throw new NotPositiveException(LocalizedFormats.NUMBER_OF_SUCCESSES, numberOfSuccesses); } if (sampleSize < 0) { throw new NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES, sampleSize); } if (numberOfSuccesses > populationSize) { throw new NumberIsTooLargeException(LocalizedFormats.NUMBER_OF_SUCCESS_LARGER_THAN_POPULATION_SIZE, [CLASS] HypergeometricDistribution [METHOD] <init> [RETURN_TYPE] RandomGenerator,int,int,int)  RandomGenerator rng int populationSize int numberOfSuccesses int sampleSize [VARIABLES] boolean numericalVarianceIsCalculated double numericalVariance long serialVersionUID int numberOfSuccesses populationSize sampleSize RandomGenerator rng  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.25	90	90	1	replace	
42	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] throws NotPositiveException, NotStrictlyPositiveException, NumberIsTooLargeException { super(rng); if (populationSize <= 0) { throw new NotStrictlyPositiveException(LocalizedFormats.POPULATION_SIZE, populationSize); } [BUGGY] [BUGGY] if (numberOfSuccesses < 0) { throw new NotPositiveException(LocalizedFormats.NUMBER_OF_SUCCESSES, numberOfSuccesses); } if (sampleSize < 0) { throw new NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES, sampleSize); } if (numberOfSuccesses > populationSize) { throw new NumberIsTooLargeException(LocalizedFormats.NUMBER_OF_SUCCESS_LARGER_THAN_POPULATION_SIZE, [CLASS] HypergeometricDistribution [METHOD] <init> [RETURN_TYPE] RandomGenerator,int,int,int)  RandomGenerator rng int populationSize int numberOfSuccesses int sampleSize [VARIABLES] boolean numericalVarianceIsCalculated double numericalVariance long serialVersionUID int numberOfSuccesses populationSize sampleSize RandomGenerator rng  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.25	90	90	1	add	
43	[BUG] [BUGGY] if (sampleSize < 0) { [FE] AssertionError [CONTEXT] super(rng); if (populationSize <= 0) { throw new NotStrictlyPositiveException(LocalizedFormats.POPULATION_SIZE, populationSize); } if (numberOfSuccesses < 0) { throw new NotPositiveException(LocalizedFormats.NUMBER_OF_SUCCESSES, numberOfSuccesses); } [BUGGY] if (sampleSize < 0) { [BUGGY] throw new NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES, sampleSize); } if (numberOfSuccesses > populationSize) { throw new NumberIsTooLargeException(LocalizedFormats.NUMBER_OF_SUCCESS_LARGER_THAN_POPULATION_SIZE, numberOfSuccesses, populationSize, true); } if (sampleSize > populationSize) { throw new NumberIsTooLargeException(LocalizedFormats.SAMPLE_SIZE_LARGER_THAN_POPULATION_SIZE, [CLASS] HypergeometricDistribution [METHOD] <init> [RETURN_TYPE] RandomGenerator,int,int,int)  RandomGenerator rng int populationSize int numberOfSuccesses int sampleSize [VARIABLES] boolean numericalVarianceIsCalculated double numericalVariance long serialVersionUID int numberOfSuccesses populationSize sampleSize RandomGenerator rng  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.25	94	94	1	replace	
44	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] super(rng); if (populationSize <= 0) { throw new NotStrictlyPositiveException(LocalizedFormats.POPULATION_SIZE, populationSize); } if (numberOfSuccesses < 0) { throw new NotPositiveException(LocalizedFormats.NUMBER_OF_SUCCESSES, numberOfSuccesses); } [BUGGY] [BUGGY] if (sampleSize < 0) { throw new NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES, sampleSize); } if (numberOfSuccesses > populationSize) { throw new NumberIsTooLargeException(LocalizedFormats.NUMBER_OF_SUCCESS_LARGER_THAN_POPULATION_SIZE, numberOfSuccesses, populationSize, true); } if (sampleSize > populationSize) { throw new NumberIsTooLargeException(LocalizedFormats.SAMPLE_SIZE_LARGER_THAN_POPULATION_SIZE, [CLASS] HypergeometricDistribution [METHOD] <init> [RETURN_TYPE] RandomGenerator,int,int,int)  RandomGenerator rng int populationSize int numberOfSuccesses int sampleSize [VARIABLES] boolean numericalVarianceIsCalculated double numericalVariance long serialVersionUID int numberOfSuccesses populationSize sampleSize RandomGenerator rng  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.25	94	94	1	add	
45	[BUG] [BUGGY] if (numberOfSuccesses > populationSize) { [FE] AssertionError [CONTEXT] } if (numberOfSuccesses < 0) { throw new NotPositiveException(LocalizedFormats.NUMBER_OF_SUCCESSES, numberOfSuccesses); } if (sampleSize < 0) { throw new NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES, sampleSize); } [BUGGY] if (numberOfSuccesses > populationSize) { [BUGGY] throw new NumberIsTooLargeException(LocalizedFormats.NUMBER_OF_SUCCESS_LARGER_THAN_POPULATION_SIZE, numberOfSuccesses, populationSize, true); } if (sampleSize > populationSize) { throw new NumberIsTooLargeException(LocalizedFormats.SAMPLE_SIZE_LARGER_THAN_POPULATION_SIZE, sampleSize, populationSize, true); } this.numberOfSuccesses = numberOfSuccesses; this.populationSize = populationSize; [CLASS] HypergeometricDistribution [METHOD] <init> [RETURN_TYPE] RandomGenerator,int,int,int)  RandomGenerator rng int populationSize int numberOfSuccesses int sampleSize [VARIABLES] boolean numericalVarianceIsCalculated double numericalVariance long serialVersionUID int numberOfSuccesses populationSize sampleSize RandomGenerator rng  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.25	99	99	1	replace	
46	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] } if (numberOfSuccesses < 0) { throw new NotPositiveException(LocalizedFormats.NUMBER_OF_SUCCESSES, numberOfSuccesses); } if (sampleSize < 0) { throw new NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES, sampleSize); } [BUGGY] [BUGGY] if (numberOfSuccesses > populationSize) { throw new NumberIsTooLargeException(LocalizedFormats.NUMBER_OF_SUCCESS_LARGER_THAN_POPULATION_SIZE, numberOfSuccesses, populationSize, true); } if (sampleSize > populationSize) { throw new NumberIsTooLargeException(LocalizedFormats.SAMPLE_SIZE_LARGER_THAN_POPULATION_SIZE, sampleSize, populationSize, true); } this.numberOfSuccesses = numberOfSuccesses; this.populationSize = populationSize; [CLASS] HypergeometricDistribution [METHOD] <init> [RETURN_TYPE] RandomGenerator,int,int,int)  RandomGenerator rng int populationSize int numberOfSuccesses int sampleSize [VARIABLES] boolean numericalVarianceIsCalculated double numericalVariance long serialVersionUID int numberOfSuccesses populationSize sampleSize RandomGenerator rng  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.25	99	99	1	add	
47	[BUG] [BUGGY] if (sampleSize > populationSize) { [FE] AssertionError [CONTEXT] } if (sampleSize < 0) { throw new NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES, sampleSize); } if (numberOfSuccesses > populationSize) { throw new NumberIsTooLargeException(LocalizedFormats.NUMBER_OF_SUCCESS_LARGER_THAN_POPULATION_SIZE, numberOfSuccesses, populationSize, true); } [BUGGY] if (sampleSize > populationSize) { [BUGGY] throw new NumberIsTooLargeException(LocalizedFormats.SAMPLE_SIZE_LARGER_THAN_POPULATION_SIZE, sampleSize, populationSize, true); } this.numberOfSuccesses = numberOfSuccesses; this.populationSize = populationSize; this.sampleSize = sampleSize; } [CLASS] HypergeometricDistribution [METHOD] <init> [RETURN_TYPE] RandomGenerator,int,int,int)  RandomGenerator rng int populationSize int numberOfSuccesses int sampleSize [VARIABLES] boolean numericalVarianceIsCalculated double numericalVariance long serialVersionUID int numberOfSuccesses populationSize sampleSize RandomGenerator rng  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.25	103	103	1	replace	
48	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] } if (sampleSize < 0) { throw new NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES, sampleSize); } if (numberOfSuccesses > populationSize) { throw new NumberIsTooLargeException(LocalizedFormats.NUMBER_OF_SUCCESS_LARGER_THAN_POPULATION_SIZE, numberOfSuccesses, populationSize, true); } [BUGGY] [BUGGY] if (sampleSize > populationSize) { throw new NumberIsTooLargeException(LocalizedFormats.SAMPLE_SIZE_LARGER_THAN_POPULATION_SIZE, sampleSize, populationSize, true); } this.numberOfSuccesses = numberOfSuccesses; this.populationSize = populationSize; this.sampleSize = sampleSize; } [CLASS] HypergeometricDistribution [METHOD] <init> [RETURN_TYPE] RandomGenerator,int,int,int)  RandomGenerator rng int populationSize int numberOfSuccesses int sampleSize [VARIABLES] boolean numericalVarianceIsCalculated double numericalVariance long serialVersionUID int numberOfSuccesses populationSize sampleSize RandomGenerator rng  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.25	103	103	1	add	
49	[BUG] [BUGGY] this.numberOfSuccesses = numberOfSuccesses; [FE] AssertionError [CONTEXT] if (numberOfSuccesses > populationSize) { throw new NumberIsTooLargeException(LocalizedFormats.NUMBER_OF_SUCCESS_LARGER_THAN_POPULATION_SIZE, numberOfSuccesses, populationSize, true); } if (sampleSize > populationSize) { throw new NumberIsTooLargeException(LocalizedFormats.SAMPLE_SIZE_LARGER_THAN_POPULATION_SIZE, sampleSize, populationSize, true); } [BUGGY] this.numberOfSuccesses = numberOfSuccesses; [BUGGY] this.populationSize = populationSize; this.sampleSize = sampleSize; } [CLASS] HypergeometricDistribution [METHOD] <init> [RETURN_TYPE] RandomGenerator,int,int,int)  RandomGenerator rng int populationSize int numberOfSuccesses int sampleSize [VARIABLES] boolean numericalVarianceIsCalculated double numericalVariance long serialVersionUID int numberOfSuccesses populationSize sampleSize RandomGenerator rng  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.25	108	108	1	replace	
50	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] if (numberOfSuccesses > populationSize) { throw new NumberIsTooLargeException(LocalizedFormats.NUMBER_OF_SUCCESS_LARGER_THAN_POPULATION_SIZE, numberOfSuccesses, populationSize, true); } if (sampleSize > populationSize) { throw new NumberIsTooLargeException(LocalizedFormats.SAMPLE_SIZE_LARGER_THAN_POPULATION_SIZE, sampleSize, populationSize, true); } [BUGGY] [BUGGY] this.numberOfSuccesses = numberOfSuccesses; this.populationSize = populationSize; this.sampleSize = sampleSize; } [CLASS] HypergeometricDistribution [METHOD] <init> [RETURN_TYPE] RandomGenerator,int,int,int)  RandomGenerator rng int populationSize int numberOfSuccesses int sampleSize [VARIABLES] boolean numericalVarianceIsCalculated double numericalVariance long serialVersionUID int numberOfSuccesses populationSize sampleSize RandomGenerator rng  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.25	108	108	1	add	
51	[BUG] [BUGGY] this.populationSize = populationSize; [FE] AssertionError [CONTEXT] if (numberOfSuccesses > populationSize) { throw new NumberIsTooLargeException(LocalizedFormats.NUMBER_OF_SUCCESS_LARGER_THAN_POPULATION_SIZE, numberOfSuccesses, populationSize, true); } if (sampleSize > populationSize) { throw new NumberIsTooLargeException(LocalizedFormats.SAMPLE_SIZE_LARGER_THAN_POPULATION_SIZE, sampleSize, populationSize, true); } this.numberOfSuccesses = numberOfSuccesses; [BUGGY] this.populationSize = populationSize; [BUGGY] this.sampleSize = sampleSize; } [CLASS] HypergeometricDistribution [METHOD] <init> [RETURN_TYPE] RandomGenerator,int,int,int)  RandomGenerator rng int populationSize int numberOfSuccesses int sampleSize [VARIABLES] boolean numericalVarianceIsCalculated double numericalVariance long serialVersionUID int numberOfSuccesses populationSize sampleSize RandomGenerator rng  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.25	109	109	1	replace	
52	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] if (numberOfSuccesses > populationSize) { throw new NumberIsTooLargeException(LocalizedFormats.NUMBER_OF_SUCCESS_LARGER_THAN_POPULATION_SIZE, numberOfSuccesses, populationSize, true); } if (sampleSize > populationSize) { throw new NumberIsTooLargeException(LocalizedFormats.SAMPLE_SIZE_LARGER_THAN_POPULATION_SIZE, sampleSize, populationSize, true); } this.numberOfSuccesses = numberOfSuccesses; [BUGGY] [BUGGY] this.populationSize = populationSize; this.sampleSize = sampleSize; } [CLASS] HypergeometricDistribution [METHOD] <init> [RETURN_TYPE] RandomGenerator,int,int,int)  RandomGenerator rng int populationSize int numberOfSuccesses int sampleSize [VARIABLES] boolean numericalVarianceIsCalculated double numericalVariance long serialVersionUID int numberOfSuccesses populationSize sampleSize RandomGenerator rng  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.25	109	109	1	add	
53	[BUG] [BUGGY] this.sampleSize = sampleSize; [FE] AssertionError [CONTEXT] throw new NumberIsTooLargeException(LocalizedFormats.NUMBER_OF_SUCCESS_LARGER_THAN_POPULATION_SIZE, numberOfSuccesses, populationSize, true); } if (sampleSize > populationSize) { throw new NumberIsTooLargeException(LocalizedFormats.SAMPLE_SIZE_LARGER_THAN_POPULATION_SIZE, sampleSize, populationSize, true); } this.numberOfSuccesses = numberOfSuccesses; this.populationSize = populationSize; [BUGGY] this.sampleSize = sampleSize; [BUGGY] } [CLASS] HypergeometricDistribution [METHOD] <init> [RETURN_TYPE] RandomGenerator,int,int,int)  RandomGenerator rng int populationSize int numberOfSuccesses int sampleSize [VARIABLES] boolean numericalVarianceIsCalculated double numericalVariance long serialVersionUID int numberOfSuccesses populationSize sampleSize RandomGenerator rng  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.25	110	110	1	replace	
54	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] throw new NumberIsTooLargeException(LocalizedFormats.NUMBER_OF_SUCCESS_LARGER_THAN_POPULATION_SIZE, numberOfSuccesses, populationSize, true); } if (sampleSize > populationSize) { throw new NumberIsTooLargeException(LocalizedFormats.SAMPLE_SIZE_LARGER_THAN_POPULATION_SIZE, sampleSize, populationSize, true); } this.numberOfSuccesses = numberOfSuccesses; this.populationSize = populationSize; [BUGGY] [BUGGY] this.sampleSize = sampleSize; } [CLASS] HypergeometricDistribution [METHOD] <init> [RETURN_TYPE] RandomGenerator,int,int,int)  RandomGenerator rng int populationSize int numberOfSuccesses int sampleSize [VARIABLES] boolean numericalVarianceIsCalculated double numericalVariance long serialVersionUID int numberOfSuccesses populationSize sampleSize RandomGenerator rng  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.25	110	110	1	add	
55	[BUG] [BUGGY] } [FE] AssertionError [CONTEXT] numberOfSuccesses, populationSize, true); } if (sampleSize > populationSize) { throw new NumberIsTooLargeException(LocalizedFormats.SAMPLE_SIZE_LARGER_THAN_POPULATION_SIZE, sampleSize, populationSize, true); } this.numberOfSuccesses = numberOfSuccesses; this.populationSize = populationSize; this.sampleSize = sampleSize; [BUGGY] } [BUGGY]  [CLASS] HypergeometricDistribution [METHOD] <init> [RETURN_TYPE] RandomGenerator,int,int,int)  RandomGenerator rng int populationSize int numberOfSuccesses int sampleSize [VARIABLES] boolean numericalVarianceIsCalculated double numericalVariance long serialVersionUID int numberOfSuccesses populationSize sampleSize RandomGenerator rng  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.25	111	111	1	replace	
56	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] numberOfSuccesses, populationSize, true); } if (sampleSize > populationSize) { throw new NumberIsTooLargeException(LocalizedFormats.SAMPLE_SIZE_LARGER_THAN_POPULATION_SIZE, sampleSize, populationSize, true); } this.numberOfSuccesses = numberOfSuccesses; this.populationSize = populationSize; this.sampleSize = sampleSize; [BUGGY] [BUGGY] } [CLASS] HypergeometricDistribution [METHOD] <init> [RETURN_TYPE] RandomGenerator,int,int,int)  RandomGenerator rng int populationSize int numberOfSuccesses int sampleSize [VARIABLES] boolean numericalVarianceIsCalculated double numericalVariance long serialVersionUID int numberOfSuccesses populationSize sampleSize RandomGenerator rng  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.25	111	111	1	add	
