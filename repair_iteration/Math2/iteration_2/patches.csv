bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number
1	[BUG]  [BUGGY]  numericalVariance  =  getNumberOfSuccesses()  *(numberOfSuccesses  /  10);  [CE]  illegal  start  of  type  [CONTEXT]      public  double  getNumericalVariance()  {      [BUGGY]  numericalVariance  =  getNumberOfSuccesses()  *(numberOfSuccesses  /  10);  [BUGGY]      if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	279	279	1	replace	numericalVariance  =  getNumberOfSuccesses()  *(numberOfSuccesses  /  10);	          double    numericalVariance    =    getNumberOfSuccesses();    numericalVariance    =    Math.sqrt(numberOfSuccesses);    	non-compiled	[CE]  illegal  start  of  type	825	None
2	[BUG]  [BUGGY]  if(!numericalVarianceIsCalculated)  {  if(!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumberOfSuccesses()  *(numberOfSuccesses  /  10);  }  [CE]  cannot  find  symbol  [CONTEXT]      public  double  getNumericalVariance()  {      [BUGGY]  if(!numericalVarianceIsCalculated)  {  if(!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumberOfSuccesses()  *(numberOfSuccesses  /  10);  }  [BUGGY]      if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	279	279	1	replace	if(!numericalVarianceIsCalculated)  {  if(!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumberOfSuccesses()  *(numberOfSuccesses  /  10);  }	          double    numericalVariance    =    getNumberOfSuccesses();    numericalVariance    =    Math.sqrt(numberOfSuccesses);    	non-compiled	[CE]  cannot  find  symbol	825	None
3	[BUG]  [BUGGY]  if(numberOfSuccesses  >  0)  {  if(!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumberOfSuccesses()  *(numberOfSuccesses  /  10);  }  [CE]  cannot  find  symbol  [CONTEXT]      public  double  getNumericalVariance()  {      [BUGGY]  if(numberOfSuccesses  >  0)  {  if(!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumberOfSuccesses()  *(numberOfSuccesses  /  10);  }  [BUGGY]      if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	279	279	1	replace	if(numberOfSuccesses  >  0)  {  if(!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumberOfSuccesses()  *(numberOfSuccesses  /  10);  }	          double    numericalVariance    =    getNumberOfSuccesses();    numericalVariance    =    Math.sqrt(numberOfSuccesses);    	non-compiled	[CE]  cannot  find  symbol	825	None
4	[BUG]  [BUGGY]  [FE]  AssertionError  testMath1021  [CONTEXT]      public  double  getNumericalVariance()  {      [BUGGY]  if(!numericalVarianceIsCalculated)  {  if(!numericalVarianceIsCalculated)  {  numericalVariance  =  getNumberOfSuccesses()  *(numberOfSuccesses  /  10);  }  [BUGGY]      if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	279	279	1	add	if(!numericalVarianceIsCalculated)  {  if(!numericalVarianceIsCalculated)  {  numericalVariance  =  getNumberOfSuccesses()  *(numberOfSuccesses  /  10);  }	          double    numericalVariance    =    getNumberOfSuccesses();    numericalVariance    =    Math.sqrt(numberOfSuccesses);    	compilable	  [FE]  AssertionError  testMath1021	825	1
5	[BUG]  [BUGGY]  if(!numericalVarianceIsCalculated)  {  if(!numericalVarianceIsCalculated)  {  numericalVariance  =  getNumberOfSuccesses()  *(numberOfSuccesses  /  10);  }  [FE]  AssertionError  testMath1021  [CONTEXT]      public  double  getNumericalVariance()  {      [BUGGY]  if(!numericalVarianceIsCalculated)  {  if(!numericalVarianceIsCalculated)  {  numericalVariance  =  getNumberOfSuccesses()  *(numberOfSuccesses  /  10);  }  [BUGGY]      if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	279	279	1	replace	if(!numericalVarianceIsCalculated)  {  if(!numericalVarianceIsCalculated)  {  numericalVariance  =  getNumberOfSuccesses()  *(numberOfSuccesses  /  10);  }	          double    numericalVariance    =    getNumberOfSuccesses();    numericalVariance    =    Math.sqrt(numberOfSuccesses);    	compilable	  [FE]  AssertionError  testMath1021	825	1
11	[BUG]  [BUGGY]  final  int  dx  =  getDomainOfSuccesses();  [CE]  cannot  find  symbol  [CONTEXT]      public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {      [BUGGY]  final  int  dx  =  getDomainOfSuccesses();  [BUGGY]      numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	280	280	1	replace	final  int  dx  =  getDomainOfSuccesses();	  final    double    dx    =    getNumberOfSuccesses();    	non-compiled	[CE]  cannot  find  symbol	562	None
13	[BUG]  [BUGGY]  static  double  dx  =  getDomainOfSuccesses();  [CE]  illegal  start  of  expression  [CONTEXT]      public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {      [BUGGY]  static  double  dx  =  getDomainOfSuccesses();  [BUGGY]      numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	280	280	1	replace	static  double  dx  =  getDomainOfSuccesses();	  final    double    dx    =    getNumberOfSuccesses();    	non-compiled	[CE]  illegal  start  of  expression	562	None
14	[BUG]  [BUGGY]  static  final  double  dx  =  getDomainOfSuccesses();  [CE]  illegal  start  of  expression  [CONTEXT]      public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {      [BUGGY]  static  final  double  dx  =  getDomainOfSuccesses();  [BUGGY]      numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	280	280	1	replace	static  final  double  dx  =  getDomainOfSuccesses();	  final    double    dx    =    getNumberOfSuccesses();    	non-compiled	[CE]  illegal  start  of  expression	562	None
22	[BUG]  [BUGGY]  numericalVarianceIsCalculated  =  true;  if(!numericalVarianceIsCalculated)  {  if(!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateStdNumericalVariance();  }  [CE]  illegal  start  of  expression  [CONTEXT]      public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();      [BUGGY]  numericalVarianceIsCalculated  =  true;  if(!numericalVarianceIsCalculated)  {  if(!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateStdNumericalVariance();  }  [BUGGY]      }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	281	281	1	replace	numericalVarianceIsCalculated  =  true;  if(!numericalVarianceIsCalculated)  {  if(!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateStdNumericalVariance();  }	  numericalVarianceIsCalculated    =    false;    if(!numericalVarianceIsCalculated)    {    if(!numericalVarianceIsCalculated)    {    numericalVariance    =    calculateStdNumericalVariance();    }    	non-compiled	[CE]  illegal  start  of  expression	265	None
23	[BUG]  [BUGGY]  numericalVarianceIsCalculated  =  true;  if(!numericalVarianceIsCalculated)  {  if(!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateStdNumericalVariance();  bodied  [CE]  not  a  statement  [CONTEXT]      public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();      [BUGGY]  numericalVarianceIsCalculated  =  true;  if(!numericalVarianceIsCalculated)  {  if(!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateStdNumericalVariance();  bodied  [BUGGY]      }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	281	281	1	replace	numericalVarianceIsCalculated  =  true;  if(!numericalVarianceIsCalculated)  {  if(!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateStdNumericalVariance();  bodied	  numericalVarianceIsCalculated    =    false;    if(!numericalVarianceIsCalculated)    {    if(!numericalVarianceIsCalculated)    {    numericalVariance    =    calculateStdNumericalVariance();    }    	non-compiled	[CE]  not  a  statement	265	None
24	[BUG]  [BUGGY]  numericalVarianceIsCalculated  =  true;  if(!numericalVarianceIsCalculated)  {  if(!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateStdNumericalVariance();  toured  [CE]  not  a  statement  [CONTEXT]      public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();      [BUGGY]  numericalVarianceIsCalculated  =  true;  if(!numericalVarianceIsCalculated)  {  if(!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateStdNumericalVariance();  toured  [BUGGY]      }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	281	281	1	replace	numericalVarianceIsCalculated  =  true;  if(!numericalVarianceIsCalculated)  {  if(!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateStdNumericalVariance();  toured	  numericalVarianceIsCalculated    =    false;    if(!numericalVarianceIsCalculated)    {    if(!numericalVarianceIsCalculated)    {    numericalVariance    =    calculateStdNumericalVariance();    }    	non-compiled	[CE]  not  a  statement	265	None
33	[BUG]  [BUGGY]  int  populationSize  =  getNumberOfSuccesses();  int  sampleSize  =  getNumberOfSuccesses();  [CE]  missing  return  statement  [CONTEXT]      public  int  getSupportLowerBound()  {      [BUGGY]  int  populationSize  =  getNumberOfSuccesses();  int  sampleSize  =  getNumberOfSuccesses();  [BUGGY]      return  FastMath.max(0,        getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  }  [CLASS]  HypergeometricDistribution  [METHOD]  getSupportLowerBound  [RETURN_TYPE]  int  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	308	309	1	replace	int  populationSize  =  getNumberOfSuccesses();  int  sampleSize  =  getNumberOfSuccesses();	          int    populationSize    =    getNumberOfSuccesses();    int    populationSize    =    getNumberOfSuccesses();    	non-compiled	[CE]  missing  return  statement	432	None
43	[BUG]  [BUGGY]  if(numericalVarianceIsCalculated)  {  if(!numericalVarianceIsCalculated)  {  return  -1;  }  [CE]  illegal  start  of  expression  [CONTEXT]      public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }      [BUGGY]  if(numericalVarianceIsCalculated)  {  if(!numericalVarianceIsCalculated)  {  return  -1;  }  [BUGGY]      return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	283	283	1	replace	if(numericalVarianceIsCalculated)  {  if(!numericalVarianceIsCalculated)  {  return  -1;  }	  if(!numericalVarianceIsCalculated)    {    if(!numericalVarianceIsCalculated)    {    return    -1;    }    	non-compiled	[CE]  illegal  start  of  expression	1643	None
44	[BUG]  [BUGGY]  if(!numbericalVarianceIsCalculated)  {  if(!numericalVarianceIsCalculated)  {  return  -1;  }  [CE]  illegal  start  of  expression  [CONTEXT]      public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }      [BUGGY]  if(!numbericalVarianceIsCalculated)  {  if(!numericalVarianceIsCalculated)  {  return  -1;  }  [BUGGY]      return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	283	283	1	replace	if(!numbericalVarianceIsCalculated)  {  if(!numericalVarianceIsCalculated)  {  return  -1;  }	  if(!numericalVarianceIsCalculated)    {    if(!numericalVarianceIsCalculated)    {    return    -1;    }    	non-compiled	[CE]  illegal  start  of  expression	1643	None
52	[BUG]  [BUGGY]  numericalVariance  =  calculatePositiveVariance()  +  1;  [CE]  illegal  start  of  type  [CONTEXT]      public  double  getNumericalVariance()  {      [BUGGY]  numericalVariance  =  calculatePositiveVariance()  +  1;  [BUGGY]      numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	279	279	1	replace	numericalVariance  =  calculatePositiveVariance()  +  1;	  numericalVariance    =    calculatePositiveVariance();    	non-compiled	[CE]  illegal  start  of  type	2371	None
54	[BUG]  [BUGGY]  numericalVariance  =  calculatePositiveVariance()  /  2;  [CE]  illegal  start  of  type  [CONTEXT]      public  double  getNumericalVariance()  {      [BUGGY]  numericalVariance  =  calculatePositiveVariance()  /  2;  [BUGGY]      numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	279	279	1	replace	numericalVariance  =  calculatePositiveVariance()  /  2;	  numericalVariance    =    calculatePositiveVariance();    	non-compiled	[CE]  illegal  start  of  type	2371	None
62	[BUG]  [BUGGY]  N  =  getNumberOfSuccesses()  +  1;  [CE]  cannot  assign  a  value  to  final  variable  N  [CONTEXT]      protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();  final  double  m  =  getNumberOfSuccesses();  final  double  n  =  getSampleSize();      [BUGGY]  N  =  getNumberOfSuccesses()  +  1;  [BUGGY]      return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	295	295	1	replace	N  =  getNumberOfSuccesses()  +  1;	  n    =    getNumberOfSuccesses()    +    1;    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  N	3784	None
71	[BUG]  [BUGGY]  getPopulationSize()  *  getNumberOfSuccesses();  [CE]  not  a  statement  [CONTEXT]      public  double  getNumericalMean()  {      [BUGGY]  getPopulationSize()  *  getNumberOfSuccesses();  [BUGGY]      return  (double)  (getSampleSize()  *  getNumberOfSuccesses())  /  (double)  getPopulationSize();  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalMean  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	268	268	1	replace	getPopulationSize()  *  getNumberOfSuccesses();	          getNumberOfSuccesses();    getNumberOfSuccesses();    	non-compiled	[CE]  not  a  statement	2212	None
72	[BUG]  [BUGGY]  getPopulationSize();  getSampleSize()  *  getNumberOfSuccesses();  [CE]  not  a  statement  [CONTEXT]      public  double  getNumericalMean()  {      [BUGGY]  getPopulationSize();  getSampleSize()  *  getNumberOfSuccesses();  [BUGGY]      return  (double)  (getSampleSize()  *  getNumberOfSuccesses())  /  (double)  getPopulationSize();  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalMean  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	268	268	1	replace	getPopulationSize();  getSampleSize()  *  getNumberOfSuccesses();	          getNumberOfSuccesses();    getNumberOfSuccesses();    	non-compiled	[CE]  not  a  statement	2212	None
74	[BUG]  [BUGGY]  getPopulationSize()  -  getNumberOfSuccesses();  getSampleSize()  *  getNumberOfSuccesses();  [CE]  not  a  statement  [CONTEXT]      public  double  getNumericalMean()  {      [BUGGY]  getPopulationSize()  -  getNumberOfSuccesses();  getSampleSize()  *  getNumberOfSuccesses();  [BUGGY]      return  (double)  (getSampleSize()  *  getNumberOfSuccesses())  /  (double)  getPopulationSize();  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalMean  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	268	268	1	replace	getPopulationSize()  -  getNumberOfSuccesses();  getSampleSize()  *  getNumberOfSuccesses();	          getNumberOfSuccesses();    getNumberOfSuccesses();    	non-compiled	[CE]  not  a  statement	2212	None
83	[BUG]  [BUGGY]  numericalVariance  =  calculateNumbericalVariance()  *(numericalVarianceIsCalculated));  [CE]  ';'  expected  [CONTEXT]      public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {      [BUGGY]  numericalVariance  =  calculateNumbericalVariance()  *(numericalVarianceIsCalculated));  [BUGGY]      numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	280	280	1	replace	numericalVariance  =  calculateNumbericalVariance()  *(numericalVarianceIsCalculated));	  numericalVariance    =    calculateNumbericalVariance()    /(numericalVarianceIsCalculated));    	non-compiled	[CE]  ';'  expected	793	None
91	[BUG]  [BUGGY]  return  FastMath.max(0,  getNumberOfSuccesses()  +  getSampleSize()  -  getPopulationSize());  int  numberOfSuccesses  =  getNumberOfSuccesses()  -  getPopulationSize();  [CE]  illegal  start  of  type  [CONTEXT]      public  double  getNumericalVariance()  {      [BUGGY]  return  FastMath.max(0,  getNumberOfSuccesses()  +  getSampleSize()  -  getPopulationSize());  int  numberOfSuccesses  =  getNumberOfSuccesses()  -  getPopulationSize();  [BUGGY]      numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	279	279	1	replace	return  FastMath.max(0,  getNumberOfSuccesses()  +  getSampleSize()  -  getPopulationSize());  int  numberOfSuccesses  =  getNumberOfSuccesses()  -  getPopulationSize();	  if(!numberativeVarianceIsCalculated)    {    	non-compiled	[CE]  illegal  start  of  type	1024	None
92	[BUG]  [BUGGY]  return  FastMath.max(1,  getNumberOfSuccesses()  +  getSampleSize()  -  getPopulationSize());  int  numberOfSuccesses  =  getNumberOfSuccesses()  -  getPopulationSize();  [CE]  illegal  start  of  type  [CONTEXT]      public  double  getNumericalVariance()  {      [BUGGY]  return  FastMath.max(1,  getNumberOfSuccesses()  +  getSampleSize()  -  getPopulationSize());  int  numberOfSuccesses  =  getNumberOfSuccesses()  -  getPopulationSize();  [BUGGY]      numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	279	279	1	replace	return  FastMath.max(1,  getNumberOfSuccesses()  +  getSampleSize()  -  getPopulationSize());  int  numberOfSuccesses  =  getNumberOfSuccesses()  -  getPopulationSize();	  if(!numberativeVarianceIsCalculated)    {    	non-compiled	[CE]  illegal  start  of  type	1024	None
93	[BUG]  [BUGGY]  return  FastMath.max(0,  getPopulationSize()  +  getSampleSize()  -  getPopulationSize());  int  numberOfSuccesses  =  getNumberOfSuccesses()  -  getPopulationSize();  [CE]  illegal  start  of  type  [CONTEXT]      public  double  getNumericalVariance()  {      [BUGGY]  return  FastMath.max(0,  getPopulationSize()  +  getSampleSize()  -  getPopulationSize());  int  numberOfSuccesses  =  getNumberOfSuccesses()  -  getPopulationSize();  [BUGGY]      numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	279	279	1	replace	return  FastMath.max(0,  getPopulationSize()  +  getSampleSize()  -  getPopulationSize());  int  numberOfSuccesses  =  getNumberOfSuccesses()  -  getPopulationSize();	  if(!numberativeVarianceIsCalculated)    {    	non-compiled	[CE]  illegal  start  of  type	1024	None
94	[BUG]  [BUGGY]  return  FastMath.max(0,  getSampleSize()  +  getPopulationSize());  int  numberOfSuccesses  =  getNumberOfSuccesses()  -  getPopulationSize();  [CE]  illegal  start  of  type  [CONTEXT]      public  double  getNumericalVariance()  {      [BUGGY]  return  FastMath.max(0,  getSampleSize()  +  getPopulationSize());  int  numberOfSuccesses  =  getNumberOfSuccesses()  -  getPopulationSize();  [BUGGY]      numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	279	279	1	replace	return  FastMath.max(0,  getSampleSize()  +  getPopulationSize());  int  numberOfSuccesses  =  getNumberOfSuccesses()  -  getPopulationSize();	  if(!numberativeVarianceIsCalculated)    {    	non-compiled	[CE]  illegal  start  of  type	1024	None
103	[BUG]  [BUGGY]  numericalVariance  =  Math.max(numberOfSuccesses,  populationSize  -  1);  [CE]  missing  return  statement  [CONTEXT]      public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }      [BUGGY]  numericalVariance  =  Math.max(numberOfSuccesses,  populationSize  -  1);  [BUGGY]      }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	283	283	1	replace	numericalVariance  =  Math.max(numberOfSuccesses,  populationSize  -  1);	  numericalVariance    =    Math.max(numberOfSuccesses,    populationSize);    	non-compiled	[CE]  missing  return  statement	2262	None
113	[BUG]  [BUGGY]  [FE]  AssertionError  testMoments  [CONTEXT]      public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();      [BUGGY]  numericalVariance  =  Math.max(numberOfSuccesses,  numberOfSuccesses  /  1);  [BUGGY]      numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	281	281	1	add	numericalVariance  =  Math.max(numberOfSuccesses,  numberOfSuccesses  /  1);	  numericalVariance    =    Math.max(numberOfSuccesses,    numberOfSuccesses    -    1);    	compilable	  [FE]  AssertionError  testMoments	944	1
114	[BUG]  [BUGGY]  numericalVariance  =  Math.max(numberOfSuccesses,  numberOfSuccesses  /  1);  [FE]  AssertionError  testMoments  [CONTEXT]      public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();      [BUGGY]  numericalVariance  =  Math.max(numberOfSuccesses,  numberOfSuccesses  /  1);  [BUGGY]      numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	281	281	1	replace	numericalVariance  =  Math.max(numberOfSuccesses,  numberOfSuccesses  /  1);	  numericalVariance    =    Math.max(numberOfSuccesses,    numberOfSuccesses    -    1);    	compilable	  [FE]  AssertionError  testMoments	944	1
114	[BUG]  [BUGGY]  [FE]  AssertionError  testMoments  [CONTEXT]      public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();      [BUGGY]  numericalVariance  =  Math.max(numberOfSuccesses  -  1,  numberOfSuccesses  -  1);  [BUGGY]      numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	281	281	1	add	numericalVariance  =  Math.max(numberOfSuccesses  -  1,  numberOfSuccesses  -  1);	  numericalVariance    =    Math.max(numberOfSuccesses,    numberOfSuccesses    -    1);    	compilable	  [FE]  AssertionError  testMoments	944	1
115	[BUG]  [BUGGY]  numericalVariance  =  Math.max(numberOfSuccesses  -  1,  numberOfSuccesses  -  1);  [FE]  AssertionError  testMoments  [CONTEXT]      public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();      [BUGGY]  numericalVariance  =  Math.max(numberOfSuccesses  -  1,  numberOfSuccesses  -  1);  [BUGGY]      numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	281	281	1	replace	numericalVariance  =  Math.max(numberOfSuccesses  -  1,  numberOfSuccesses  -  1);	  numericalVariance    =    Math.max(numberOfSuccesses,    numberOfSuccesses    -    1);    	compilable	  [FE]  AssertionError  testMoments	944	1
121	[BUG]  [BUGGY]  if(numberOfSuccesses  >  0)  {  numericalVariance  =  Math.abs(numberOfSuccesses);  numericalVariance  =  getNumberOfSuccesses()  *(numberOfSuccesses  -  1));  }  [CE]  ';'  expected  [CONTEXT]      protected  double  calculateNumericalVariance()  {      [BUGGY]  if(numberOfSuccesses  >  0)  {  numericalVariance  =  Math.abs(numberOfSuccesses);  numericalVariance  =  getNumberOfSuccesses()  *(numberOfSuccesses  -  1));  }  [BUGGY]      final  double  N  =  getPopulationSize();  final  double  m  =  getNumberOfSuccesses();  final  double  n  =  getSampleSize();  return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	292	292	1	replace	if(numberOfSuccesses  >  0)  {  numericalVariance  =  Math.abs(numberOfSuccesses);  numericalVariance  =  getNumberOfSuccesses()  *(numberOfSuccesses  -  1));  }	          final    int    k    =    getNumberOfSuccesses();    final    int    N    =    getNumberOfSuccesses();    	non-compiled	[CE]  ';'  expected	1903	None
122	[BUG]  [BUGGY]  numericalVariance  =  Math.abs(numberOfSuccesses);  numericalVariance  =  getNumberOfSuccesses()  /(numberOfSuccesses  -  1));  [CE]  ';'  expected  [CONTEXT]      protected  double  calculateNumericalVariance()  {      [BUGGY]  numericalVariance  =  Math.abs(numberOfSuccesses);  numericalVariance  =  getNumberOfSuccesses()  /(numberOfSuccesses  -  1));  [BUGGY]      final  double  N  =  getPopulationSize();  final  double  m  =  getNumberOfSuccesses();  final  double  n  =  getSampleSize();  return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	292	292	1	replace	numericalVariance  =  Math.abs(numberOfSuccesses);  numericalVariance  =  getNumberOfSuccesses()  /(numberOfSuccesses  -  1));	          final    int    k    =    getNumberOfSuccesses();    final    int    N    =    getNumberOfSuccesses();    	non-compiled	[CE]  ';'  expected	1903	None
123	[BUG]  [BUGGY]  numericalVariance  =  Math.abs(numberOfSuccesses  -  1);  numericalVariance  =  getNumberOfSuccesses()  *(numberOfSuccesses  -  1));  [CE]  ';'  expected  [CONTEXT]      protected  double  calculateNumericalVariance()  {      [BUGGY]  numericalVariance  =  Math.abs(numberOfSuccesses  -  1);  numericalVariance  =  getNumberOfSuccesses()  *(numberOfSuccesses  -  1));  [BUGGY]      final  double  N  =  getPopulationSize();  final  double  m  =  getNumberOfSuccesses();  final  double  n  =  getSampleSize();  return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	292	292	1	replace	numericalVariance  =  Math.abs(numberOfSuccesses  -  1);  numericalVariance  =  getNumberOfSuccesses()  *(numberOfSuccesses  -  1));	          final    int    k    =    getNumberOfSuccesses();    final    int    N    =    getNumberOfSuccesses();    	non-compiled	[CE]  ';'  expected	1903	None
124	[BUG]  [BUGGY]  numericalVariance  =  Math.abs(numberOfSuccesses);  numericalVariance  =  getNumberOfSuccesses()  *(numberOfSuccesses  -  1));  [CE]  ';'  expected  [CONTEXT]      protected  double  calculateNumericalVariance()  {      [BUGGY]  numericalVariance  =  Math.abs(numberOfSuccesses);  numericalVariance  =  getNumberOfSuccesses()  *(numberOfSuccesses  -  1));  [BUGGY]      final  double  N  =  getPopulationSize();  final  double  m  =  getNumberOfSuccesses();  final  double  n  =  getSampleSize();  return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	292	292	1	replace	numericalVariance  =  Math.abs(numberOfSuccesses);  numericalVariance  =  getNumberOfSuccesses()  *(numberOfSuccesses  -  1));	          final    int    k    =    getNumberOfSuccesses();    final    int    N    =    getNumberOfSuccesses();    	non-compiled	[CE]  ';'  expected	1903	None
133	[BUG]  [BUGGY]  return  FastMath.max(0,  getNumberOfSuccesses()  +  getPopulationSize());  getNumberOfSuccesses()  +  getSampleSize()  -  getPopulationSize();  [CE]  not  a  statement  [CONTEXT]      public  int  getSupportLowerBound()  {      [BUGGY]  return  FastMath.max(0,  getNumberOfSuccesses()  +  getPopulationSize());  getNumberOfSuccesses()  +  getSampleSize()  -  getPopulationSize();  [BUGGY]      getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  }  [CLASS]  HypergeometricDistribution  [METHOD]  getSupportLowerBound  [RETURN_TYPE]  int  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	308	309	1	replace	return  FastMath.max(0,  getNumberOfSuccesses()  +  getPopulationSize());  getNumberOfSuccesses()  +  getSampleSize()  -  getPopulationSize();	  return    FastMath.max(0,    getNumberOfSuccesses()    +    getSampleSize()    -    getPopulationSize());    getNumberOfSuccesses()    +    getSampleSize()    -    getPopulationSize();    	non-compiled	[CE]  not  a  statement	693	None
134	[BUG]  [BUGGY]  return  FastMath.max(1,  getNumberOfSuccesses()  +  getSampleSize()  -  getPopulationSize());  getNumberOfSuccesses()  +  getSampleSize()  -  getPopulationSize();  [CE]  not  a  statement  [CONTEXT]      public  int  getSupportLowerBound()  {      [BUGGY]  return  FastMath.max(1,  getNumberOfSuccesses()  +  getSampleSize()  -  getPopulationSize());  getNumberOfSuccesses()  +  getSampleSize()  -  getPopulationSize();  [BUGGY]      getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  }  [CLASS]  HypergeometricDistribution  [METHOD]  getSupportLowerBound  [RETURN_TYPE]  int  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	308	309	1	replace	return  FastMath.max(1,  getNumberOfSuccesses()  +  getSampleSize()  -  getPopulationSize());  getNumberOfSuccesses()  +  getSampleSize()  -  getPopulationSize();	  return    FastMath.max(0,    getNumberOfSuccesses()    +    getSampleSize()    -    getPopulationSize());    getNumberOfSuccesses()    +    getSampleSize()    -    getPopulationSize();    	non-compiled	[CE]  not  a  statement	693	None
142	[BUG]  [BUGGY]  final  int  k  =  getKnowledge();  [CE]  cannot  find  symbol  [CONTEXT]      public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {      [BUGGY]  final  int  k  =  getKnowledge();  [BUGGY]      numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	280	280	1	replace	final  int  k  =  getKnowledge();	  final    double    k    =    getKnowledge();    	non-compiled	[CE]  cannot  find  symbol	2103	None
143	[BUG]  [BUGGY]  final  double  y  =  getKnowledge();  [CE]  cannot  find  symbol  [CONTEXT]      public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {      [BUGGY]  final  double  y  =  getKnowledge();  [BUGGY]      numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	280	280	1	replace	final  double  y  =  getKnowledge();	  final    double    k    =    getKnowledge();    	non-compiled	[CE]  cannot  find  symbol	2103	None
144	[BUG]  [BUGGY]  final  double  dx  =  getKnowledge();  [CE]  cannot  find  symbol  [CONTEXT]      public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {      [BUGGY]  final  double  dx  =  getKnowledge();  [BUGGY]      numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	280	280	1	replace	final  double  dx  =  getKnowledge();	  final    double    k    =    getKnowledge();    	non-compiled	[CE]  cannot  find  symbol	2103	None
154	[BUG]  [BUGGY]  numericalVariance  =  calculateStandardDeviation();  [CE]  illegal  start  of  type  [CONTEXT]      public  double  getNumericalVariance()  {      [BUGGY]  numericalVariance  =  calculateStandardDeviation();  [BUGGY]      numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	279	279	1	replace	numericalVariance  =  calculateStandardDeviation();	  numericalVariance    =    calculateStdDevVariance();    	non-compiled	[CE]  illegal  start  of  type	2301	None
162	[BUG]  [BUGGY]  return  FastMath.max(1,  getNumberOfSuccesses()  +  getSampleSize()  -  getPopulationSize());  numericalVariance  =  Math.abs(numberOfSuccesses  /  10);  [CE]  unreachable  statement  [CONTEXT]      public  int  getSupportLowerBound()  {      [BUGGY]  return  FastMath.max(1,  getNumberOfSuccesses()  +  getSampleSize()  -  getPopulationSize());  numericalVariance  =  Math.abs(numberOfSuccesses  /  10);  [BUGGY]      getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  }  [CLASS]  HypergeometricDistribution  [METHOD]  getSupportLowerBound  [RETURN_TYPE]  int  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	308	309	1	replace	return  FastMath.max(1,  getNumberOfSuccesses()  +  getSampleSize()  -  getPopulationSize());  numericalVariance  =  Math.abs(numberOfSuccesses  /  10);	  return    FastMath.max(0,    getNumberOfSuccesses()    +    getSampleSize()    -    getPopulationSize());    numericalVariance    =    Math.abs(numberOfSuccesses    /    10);    	non-compiled	[CE]  unreachable  statement	3163	None
163	[BUG]  [BUGGY]  return  FastMath.max(0,  getPopulationSize()  +  getSampleSize()  -  getPopulationSize());  numericalVariance  =  Math.abs(numberOfSuccesses  /  10);  [CE]  unreachable  statement  [CONTEXT]      public  int  getSupportLowerBound()  {      [BUGGY]  return  FastMath.max(0,  getPopulationSize()  +  getSampleSize()  -  getPopulationSize());  numericalVariance  =  Math.abs(numberOfSuccesses  /  10);  [BUGGY]      getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  }  [CLASS]  HypergeometricDistribution  [METHOD]  getSupportLowerBound  [RETURN_TYPE]  int  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	308	309	1	replace	return  FastMath.max(0,  getPopulationSize()  +  getSampleSize()  -  getPopulationSize());  numericalVariance  =  Math.abs(numberOfSuccesses  /  10);	  return    FastMath.max(0,    getNumberOfSuccesses()    +    getSampleSize()    -    getPopulationSize());    numericalVariance    =    Math.abs(numberOfSuccesses    /    10);    	non-compiled	[CE]  unreachable  statement	3163	None
164	[BUG]  [BUGGY]  return  FastMath.max(0,  getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  numericalVariance  =  Math.abs(numberOfSuccesses  /  10);  [CE]  unreachable  statement  [CONTEXT]      public  int  getSupportLowerBound()  {      [BUGGY]  return  FastMath.max(0,  getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  numericalVariance  =  Math.abs(numberOfSuccesses  /  10);  [BUGGY]      getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  }  [CLASS]  HypergeometricDistribution  [METHOD]  getSupportLowerBound  [RETURN_TYPE]  int  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	308	309	1	replace	return  FastMath.max(0,  getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  numericalVariance  =  Math.abs(numberOfSuccesses  /  10);	  return    FastMath.max(0,    getNumberOfSuccesses()    +    getSampleSize()    -    getPopulationSize());    numericalVariance    =    Math.abs(numberOfSuccesses    /    10);    	non-compiled	[CE]  unreachable  statement	3163	None
172	[BUG]  [BUGGY]  return  numberOfSuccesses  /(numericalVarianceIsCalculated)*  numericalVariance;  [CE]  bad  operand  types  for  binary  operator  '/'  [CONTEXT]      public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }      [BUGGY]  return  numberOfSuccesses  /(numericalVarianceIsCalculated)*  numericalVariance;  [BUGGY]      }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	283	283	1	replace	return  numberOfSuccesses  /(numericalVarianceIsCalculated)*  numericalVariance;	  return    numericalVariance    /(numericalVarianceIsCalculated)*    numberOfSuccesses;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '/'	3682	None
173	[BUG]  [BUGGY]  return  numericalVariance  /(numericalVarianceIsCalculated)*  this.numberOfSuccesses;  [CE]  bad  operand  types  for  binary  operator  '/'  [CONTEXT]      public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }      [BUGGY]  return  numericalVariance  /(numericalVarianceIsCalculated)*  this.numberOfSuccesses;  [BUGGY]      }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	283	283	1	replace	return  numericalVariance  /(numericalVarianceIsCalculated)*  this.numberOfSuccesses;	  return    numericalVariance    /(numericalVarianceIsCalculated)*    numberOfSuccesses;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '/'	3682	None
174	[BUG]  [BUGGY]  return  numericalVariance  /(numericalVarianceIsCalculated)*  numbersOfSuccesses;  [CE]  bad  operand  types  for  binary  operator  '/'  [CONTEXT]      public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }      [BUGGY]  return  numericalVariance  /(numericalVarianceIsCalculated)*  numbersOfSuccesses;  [BUGGY]      }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	283	283	1	replace	return  numericalVariance  /(numericalVarianceIsCalculated)*  numbersOfSuccesses;	  return    numericalVariance    /(numericalVarianceIsCalculated)*    numberOfSuccesses;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '/'	3682	None
181	[BUG]  [BUGGY]  if(numberOfSuccesses  >  0)  {  if(!numericalVarianceIsCalculated)  {  numericalVariance  =  getNumberOfSuccesses()  /  2.0;  }  [CE]  illegal  start  of  expression  [CONTEXT]      protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();  final  double  m  =  getNumberOfSuccesses();  final  double  n  =  getSampleSize();      [BUGGY]  if(numberOfSuccesses  >  0)  {  if(!numericalVarianceIsCalculated)  {  numericalVariance  =  getNumberOfSuccesses()  /  2.0;  }  [BUGGY]      return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	295	295	1	replace	if(numberOfSuccesses  >  0)  {  if(!numericalVarianceIsCalculated)  {  numericalVariance  =  getNumberOfSuccesses()  /  2.0;  }	  final    int    k    =    getKind();    	non-compiled	[CE]  illegal  start  of  expression	1343	None
183	[BUG]  [BUGGY]  if(numberOfSuccesses  >  1)  {  if(!numericalVarianceIsCalculated)  {  numericalVariance  =  getNumberOfSuccesses()  /  2.0;  }  [CE]  illegal  start  of  expression  [CONTEXT]      protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();  final  double  m  =  getNumberOfSuccesses();  final  double  n  =  getSampleSize();      [BUGGY]  if(numberOfSuccesses  >  1)  {  if(!numericalVarianceIsCalculated)  {  numericalVariance  =  getNumberOfSuccesses()  /  2.0;  }  [BUGGY]      return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	295	295	1	replace	if(numberOfSuccesses  >  1)  {  if(!numericalVarianceIsCalculated)  {  numericalVariance  =  getNumberOfSuccesses()  /  2.0;  }	  final    int    k    =    getKind();    	non-compiled	[CE]  illegal  start  of  expression	1343	None
192	[BUG]  [BUGGY]  [FE]  AssertionError  testMoments  [CONTEXT]      public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();      [BUGGY]  numericalVariance  =  getNumberOfSuccesses()  *  2.0;  [BUGGY]      numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	281	281	1	add	numericalVariance  =  getNumberOfSuccesses()  *  2.0;	  numericalVariance    =    getNumberOfSuccesses()    /    2.0;    	compilable	  [FE]  AssertionError  testMoments	2564	1
193	[BUG]  [BUGGY]  numericalVariance  =  getNumberOfSuccesses()  *  2.0;  [FE]  AssertionError  testMoments  [CONTEXT]      public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();      [BUGGY]  numericalVariance  =  getNumberOfSuccesses()  *  2.0;  [BUGGY]      numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	281	281	1	replace	numericalVariance  =  getNumberOfSuccesses()  *  2.0;	  numericalVariance    =    getNumberOfSuccesses()    /    2.0;    	compilable	  [FE]  AssertionError  testMoments	2564	1
194	[BUG]  [BUGGY]  [FE]  AssertionError  testMoments  [CONTEXT]      public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();      [BUGGY]  numericalVariance  =  getNumberOfSuccesses()  /  2.0  +  1;  [BUGGY]      numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	281	281	1	add	numericalVariance  =  getNumberOfSuccesses()  /  2.0  +  1;	  numericalVariance    =    getNumberOfSuccesses()    /    2.0;    	compilable	  [FE]  AssertionError  testMoments	2564	1
195	[BUG]  [BUGGY]  numericalVariance  =  getNumberOfSuccesses()  /  2.0  +  1;  [FE]  AssertionError  testMoments  [CONTEXT]      public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();      [BUGGY]  numericalVariance  =  getNumberOfSuccesses()  /  2.0  +  1;  [BUGGY]      numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	281	281	1	replace	numericalVariance  =  getNumberOfSuccesses()  /  2.0  +  1;	  numericalVariance    =    getNumberOfSuccesses()    /    2.0;    	compilable	  [FE]  AssertionError  testMoments	2564	1
202	[BUG]  [BUGGY]  final  int  dx  =  getNumberOfDay();  [CE]  cannot  find  symbol  [CONTEXT]      protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();      [BUGGY]  final  int  dx  =  getNumberOfDay();  [BUGGY]      final  double  m  =  getNumberOfSuccesses();  final  double  n  =  getSampleSize();  return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	293	293	1	replace	final  int  dx  =  getNumberOfDay();	  final    double    dx    =    getNumberOfDay();    	non-compiled	[CE]  cannot  find  symbol	173	None
203	[BUG]  [BUGGY]  final  double  dx  =  getNumberOfDay().doubleValue;  [CE]  cannot  find  symbol  [CONTEXT]      protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();      [BUGGY]  final  double  dx  =  getNumberOfDay().doubleValue;  [BUGGY]      final  double  m  =  getNumberOfSuccesses();  final  double  n  =  getSampleSize();  return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	293	293	1	replace	final  double  dx  =  getNumberOfDay().doubleValue;	  final    double    dx    =    getNumberOfDay();    	non-compiled	[CE]  cannot  find  symbol	173	None
204	[BUG]  [BUGGY]  final  double  dx  =  getNumericalDx();  [CE]  cannot  find  symbol  [CONTEXT]      protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();      [BUGGY]  final  double  dx  =  getNumericalDx();  [BUGGY]      final  double  m  =  getNumberOfSuccesses();  final  double  n  =  getSampleSize();  return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	293	293	1	replace	final  double  dx  =  getNumericalDx();	  final    double    dx    =    getNumberOfDay();    	non-compiled	[CE]  cannot  find  symbol	173	None
211	[BUG]  [BUGGY]  [FE]  AssertionError  testMoments  [CONTEXT]      public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {      [BUGGY]  final  double  k  =  getSampleSize();  [BUGGY]      numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	280	280	1	add	final  double  k  =  getSampleSize();	  final    double    k    =    getNumberOfSuccesses();    	compilable	  [FE]  AssertionError  testMoments	492	1
212	[BUG]  [BUGGY]  final  double  k  =  getSampleSize();  [FE]  AssertionError  testMoments  [CONTEXT]      public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {      [BUGGY]  final  double  k  =  getSampleSize();  [BUGGY]      numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	280	280	1	replace	final  double  k  =  getSampleSize();	  final    double    k    =    getNumberOfSuccesses();    	compilable	  [FE]  AssertionError  testMoments	492	1
212	[BUG]  [BUGGY]  [FE]  AssertionError  testMoments  [CONTEXT]      public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {      [BUGGY]  final  double  m  =  getSampleSize();  [BUGGY]      numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	280	280	1	add	final  double  m  =  getSampleSize();	  final    double    k    =    getNumberOfSuccesses();    	compilable	  [FE]  AssertionError  testMoments	492	1
213	[BUG]  [BUGGY]  final  double  m  =  getSampleSize();  [FE]  AssertionError  testMoments  [CONTEXT]      public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {      [BUGGY]  final  double  m  =  getSampleSize();  [BUGGY]      numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	280	280	1	replace	final  double  m  =  getSampleSize();	  final    double    k    =    getNumberOfSuccesses();    	compilable	  [FE]  AssertionError  testMoments	492	1
213	[BUG]  [BUGGY]  [FE]  AssertionError  testMoments  [CONTEXT]      public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {      [BUGGY]  final  int  k  =  getSampleSize();  [BUGGY]      numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	280	280	1	add	final  int  k  =  getSampleSize();	  final    double    k    =    getNumberOfSuccesses();    	compilable	  [FE]  AssertionError  testMoments	492	1
214	[BUG]  [BUGGY]  final  int  k  =  getSampleSize();  [FE]  AssertionError  testMoments  [CONTEXT]      public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {      [BUGGY]  final  int  k  =  getSampleSize();  [BUGGY]      numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	280	280	1	replace	final  int  k  =  getSampleSize();	  final    double    k    =    getNumberOfSuccesses();    	compilable	  [FE]  AssertionError  testMoments	492	1
214	[BUG]  [BUGGY]  [FE]  AssertionError  testMoments  [CONTEXT]      public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {      [BUGGY]  final  double  y  =  getSampleSize();  [BUGGY]      numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	280	280	1	add	final  double  y  =  getSampleSize();	  final    double    k    =    getNumberOfSuccesses();    	compilable	  [FE]  AssertionError  testMoments	492	1
215	[BUG]  [BUGGY]  final  double  y  =  getSampleSize();  [FE]  AssertionError  testMoments  [CONTEXT]      public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {      [BUGGY]  final  double  y  =  getSampleSize();  [BUGGY]      numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	280	280	1	replace	final  double  y  =  getSampleSize();	  final    double    k    =    getNumberOfSuccesses();    	compilable	  [FE]  AssertionError  testMoments	492	1
221	[BUG]  [BUGGY]  numericalVariance  =  getNumberOfSuccesses()  *(N  -  getSampleSize());  [CE]  cannot  find  symbol  m  [CONTEXT]      protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();      [BUGGY]  numericalVariance  =  getNumberOfSuccesses()  *(N  -  getSampleSize());  [BUGGY]      final  double  n  =  getSampleSize();  return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	293	293	1	replace	numericalVariance  =  getNumberOfSuccesses()  *(N  -  getSampleSize());	  final    double    n    =    getKind();    	non-compiled	[CE]  cannot  find  symbol  m	1884	None
222	[BUG]  [BUGGY]  numericalVariance  =  getNumberOfSuccesses()  *(n  -  getSampleSize());  [CE]  cannot  find  symbol  n  [CONTEXT]      protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();      [BUGGY]  numericalVariance  =  getNumberOfSuccesses()  *(n  -  getSampleSize());  [BUGGY]      final  double  n  =  getSampleSize();  return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	293	293	1	replace	numericalVariance  =  getNumberOfSuccesses()  *(n  -  getSampleSize());	  final    double    n    =    getKind();    	non-compiled	[CE]  cannot  find  symbol  n	1884	None
233	[BUG]  [BUGGY]  numericalVariance  =  calculatePositiveVariance()  /  1;  [CE]  illegal  start  of  type  [CONTEXT]      public  double  getNumericalVariance()  {      [BUGGY]  numericalVariance  =  calculatePositiveVariance()  /  1;  [BUGGY]      numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	279	279	1	replace	numericalVariance  =  calculatePositiveVariance()  /  1;	  numericalVariance    =    calculatePositiveVariance()    -    1;    	non-compiled	[CE]  illegal  start  of  type	2374	None
234	[BUG]  [BUGGY]  numericalVariance  =  calculatePositiveVariance()  *  1;  [CE]  illegal  start  of  type  [CONTEXT]      public  double  getNumericalVariance()  {      [BUGGY]  numericalVariance  =  calculatePositiveVariance()  *  1;  [BUGGY]      numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	279	279	1	replace	numericalVariance  =  calculatePositiveVariance()  *  1;	  numericalVariance    =    calculatePositiveVariance()    -    1;    	non-compiled	[CE]  illegal  start  of  type	2374	None
242	[BUG]  [BUGGY]  int  numberSize  =  getPopulationSize();  int  numberOfSuccesses  =  getNumberOfSuccesses();  [CE]  missing  return  statement  [CONTEXT]      public  int  getSupportLowerBound()  {      [BUGGY]  int  numberSize  =  getPopulationSize();  int  numberOfSuccesses  =  getNumberOfSuccesses();  [BUGGY]      return  FastMath.max(0,        getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  }  [CLASS]  HypergeometricDistribution  [METHOD]  getSupportLowerBound  [RETURN_TYPE]  int  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	308	309	1	replace	int  numberSize  =  getPopulationSize();  int  numberOfSuccesses  =  getNumberOfSuccesses();	          int    populationSize    =    getNumberOfSuccesses();    int    numberOfSuccesses    =    getNumberOfSuccesses();    	non-compiled	[CE]  missing  return  statement	434	None
243	[BUG]  [BUGGY]  int  populationSize  =  getPosition();  int  numberOfSuccesses  =  getNumberOfSuccesses();  [CE]  cannot  find  symbol  [CONTEXT]      public  int  getSupportLowerBound()  {      [BUGGY]  int  populationSize  =  getPosition();  int  numberOfSuccesses  =  getNumberOfSuccesses();  [BUGGY]      return  FastMath.max(0,        getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  }  [CLASS]  HypergeometricDistribution  [METHOD]  getSupportLowerBound  [RETURN_TYPE]  int  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	308	309	1	replace	int  populationSize  =  getPosition();  int  numberOfSuccesses  =  getNumberOfSuccesses();	          int    populationSize    =    getNumberOfSuccesses();    int    numberOfSuccesses    =    getNumberOfSuccesses();    	non-compiled	[CE]  cannot  find  symbol	434	None
251	[BUG]  [BUGGY]  [FE]  AssertionError  testMoments  [CONTEXT]      public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();      [BUGGY]  numericalVariance  =  Math.max(numberOfSuccesses,  this.populationSize);  [BUGGY]      numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	281	281	1	add	numericalVariance  =  Math.max(numberOfSuccesses,  this.populationSize);	          numericalVariance    =    Math.max(numberOfSuccesses,    numberOfSuccesses);    numericalVariance    =    Math.min(numberOfSuccesses,    numberOfSuccesses    -    1);    	compilable	  [FE]  AssertionError  testMoments	3205	1
252	[BUG]  [BUGGY]  numericalVariance  =  Math.max(numberOfSuccesses,  this.populationSize);  [FE]  AssertionError  testMoments  [CONTEXT]      public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();      [BUGGY]  numericalVariance  =  Math.max(numberOfSuccesses,  this.populationSize);  [BUGGY]      numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	281	281	1	replace	numericalVariance  =  Math.max(numberOfSuccesses,  this.populationSize);	          numericalVariance    =    Math.max(numberOfSuccesses,    numberOfSuccesses);    numericalVariance    =    Math.min(numberOfSuccesses,    numberOfSuccesses    -    1);    	compilable	  [FE]  AssertionError  testMoments	3205	1
252	[BUG]  [BUGGY]  if(numberOfSuccesses  >  0)  {  if(!numericalVarianceIsCalculated)  {  numericalVariance  =  Math.max(numberOfSuccesses,  this.populationSize);  }  [CE]  illegal  start  of  expression  [CONTEXT]      public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();      [BUGGY]  if(numberOfSuccesses  >  0)  {  if(!numericalVarianceIsCalculated)  {  numericalVariance  =  Math.max(numberOfSuccesses,  this.populationSize);  }  [BUGGY]      numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	281	281	1	replace	if(numberOfSuccesses  >  0)  {  if(!numericalVarianceIsCalculated)  {  numericalVariance  =  Math.max(numberOfSuccesses,  this.populationSize);  }	          numericalVariance    =    Math.max(numberOfSuccesses,    numberOfSuccesses);    numericalVariance    =    Math.min(numberOfSuccesses,    numberOfSuccesses    -    1);    	non-compiled	[CE]  illegal  start  of  expression	3205	None
253	[BUG]  [BUGGY]  if(numberOfSuccesses  >  0)  {  if(!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumberOfSuccesses();  }  [CE]  illegal  start  of  expression  [CONTEXT]      public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();      [BUGGY]  if(numberOfSuccesses  >  0)  {  if(!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumberOfSuccesses();  }  [BUGGY]      numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	281	281	1	replace	if(numberOfSuccesses  >  0)  {  if(!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumberOfSuccesses();  }	          numericalVariance    =    Math.max(numberOfSuccesses,    numberOfSuccesses);    numericalVariance    =    Math.min(numberOfSuccesses,    numberOfSuccesses    -    1);    	non-compiled	[CE]  illegal  start  of  expression	3205	None
254	[BUG]  [BUGGY]  if(!numericalVarianceIsCalculated)  {  if(!numericalVarianceIsCalculated)  {  numericalVariance  =  Math.max(numberOfSuccesses,  this.populationSize);  }  [CE]  illegal  start  of  expression  [CONTEXT]      public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();      [BUGGY]  if(!numericalVarianceIsCalculated)  {  if(!numericalVarianceIsCalculated)  {  numericalVariance  =  Math.max(numberOfSuccesses,  this.populationSize);  }  [BUGGY]      numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	281	281	1	replace	if(!numericalVarianceIsCalculated)  {  if(!numericalVarianceIsCalculated)  {  numericalVariance  =  Math.max(numberOfSuccesses,  this.populationSize);  }	          numericalVariance    =    Math.max(numberOfSuccesses,    numberOfSuccesses);    numericalVariance    =    Math.min(numberOfSuccesses,    numberOfSuccesses    -    1);    	non-compiled	[CE]  illegal  start  of  expression	3205	None
262	[BUG]  [BUGGY]  if(!numbericalVarianceIsCalculated)  {  if(!numericalVarianceIsCalculated)  {  numericalVariance  =  true;  bodied  [CE]  not  a  statement  [CONTEXT]      public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();      [BUGGY]  if(!numbericalVarianceIsCalculated)  {  if(!numericalVarianceIsCalculated)  {  numericalVariance  =  true;  bodied  [BUGGY]      numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	281	281	1	replace	if(!numbericalVarianceIsCalculated)  {  if(!numericalVarianceIsCalculated)  {  numericalVariance  =  true;  bodied	  if(!numericalVarianceIsCalculated)    {    if(!numericalVarianceIsCalculated)    {    numericalVariance    =    true;    bodied    	non-compiled	[CE]  not  a  statement	1083	None
264	[BUG]  [BUGGY]  if(!numericalVarianceIsCalculated)  {  [CE]  illegal  start  of  expression  [CONTEXT]      public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();      [BUGGY]  if(!numericalVarianceIsCalculated)  {  [BUGGY]      numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	281	281	1	replace	if(!numericalVarianceIsCalculated)  {	  if(!numericalVarianceIsCalculated)    {    if(!numericalVarianceIsCalculated)    {    numericalVariance    =    true;    bodied    	non-compiled	[CE]  illegal  start  of  expression	1083	None
271	[BUG]  [BUGGY]  numericalVariance  =  getNumberOfSuccesses()  /(numberOfSuccesses  /  1));  [CE]  ';'  expected  [CONTEXT]      protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();      [BUGGY]  numericalVariance  =  getNumberOfSuccesses()  /(numberOfSuccesses  /  1));  [BUGGY]      final  double  m  =  getNumberOfSuccesses();  final  double  n  =  getSampleSize();  return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	293	293	1	replace	numericalVariance  =  getNumberOfSuccesses()  /(numberOfSuccesses  /  1));	  numericalVariance    =    getNumberOfSuccesses()    *(numberOfSuccesses    /    1));    	non-compiled	[CE]  ';'  expected	253	None
272	[BUG]  [BUGGY]  numericalVariance  =  getNumberOfSuccesses()  *(N  /  1));  [CE]  ';'  expected  [CONTEXT]      protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();      [BUGGY]  numericalVariance  =  getNumberOfSuccesses()  *(N  /  1));  [BUGGY]      final  double  m  =  getNumberOfSuccesses();  final  double  n  =  getSampleSize();  return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	293	293	1	replace	numericalVariance  =  getNumberOfSuccesses()  *(N  /  1));	  numericalVariance    =    getNumberOfSuccesses()    *(numberOfSuccesses    /    1));    	non-compiled	[CE]  ';'  expected	253	None
274	[BUG]  [BUGGY]  numericalVariance  =  getNumericalVariance()  *(numberOfSuccesses  /  1));  [CE]  ';'  expected  [CONTEXT]      protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();      [BUGGY]  numericalVariance  =  getNumericalVariance()  *(numberOfSuccesses  /  1));  [BUGGY]      final  double  m  =  getNumberOfSuccesses();  final  double  n  =  getSampleSize();  return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	293	293	1	replace	numericalVariance  =  getNumericalVariance()  *(numberOfSuccesses  /  1));	  numericalVariance    =    getNumberOfSuccesses()    *(numberOfSuccesses    /    1));    	non-compiled	[CE]  ';'  expected	253	None
281	[BUG]  [BUGGY]  numericalVarianceIsCalculated  =  numericalVariance.numericalVariance;  [CE]  illegal  start  of  type  [CONTEXT]      public  double  getNumericalVariance()  {      [BUGGY]  numericalVarianceIsCalculated  =  numericalVariance.numericalVariance;  [BUGGY]      if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	279	279	1	replace	numericalVarianceIsCalculated  =  numericalVariance.numericalVariance;	  double    numericalVariance    =    Math.floor(getSlope(),    getSlope());    	non-compiled	[CE]  illegal  start  of  type	2203	None
282	[BUG]  [BUGGY]  numericalVarianceIsCalculated  =  numericalVariance.isCalculated;  [CE]  illegal  start  of  type  [CONTEXT]      public  double  getNumericalVariance()  {      [BUGGY]  numericalVarianceIsCalculated  =  numericalVariance.isCalculated;  [BUGGY]      if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	279	279	1	replace	numericalVarianceIsCalculated  =  numericalVariance.isCalculated;	  double    numericalVariance    =    Math.floor(getSlope(),    getSlope());    	non-compiled	[CE]  illegal  start  of  type	2203	None
284	[BUG]  [BUGGY]  numericalVarianceIsCalculated  =  numericalVariance;  [CE]  illegal  start  of  type  [CONTEXT]      public  double  getNumericalVariance()  {      [BUGGY]  numericalVarianceIsCalculated  =  numericalVariance;  [BUGGY]      if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	279	279	1	replace	numericalVarianceIsCalculated  =  numericalVariance;	  double    numericalVariance    =    Math.floor(getSlope(),    getSlope());    	non-compiled	[CE]  illegal  start  of  type	2203	None
293	[BUG]  [BUGGY]  int  populationSize  =  getNumberOfSuccesses();  int  sampleSize  =  getPopulationSize();  [CE]  missing  return  statement  [CONTEXT]      public  int  getSupportLowerBound()  {      [BUGGY]  int  populationSize  =  getNumberOfSuccesses();  int  sampleSize  =  getPopulationSize();  [BUGGY]      return  FastMath.max(0,        getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  }  [CLASS]  HypergeometricDistribution  [METHOD]  getSupportLowerBound  [RETURN_TYPE]  int  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	308	309	1	replace	int  populationSize  =  getNumberOfSuccesses();  int  sampleSize  =  getPopulationSize();	          int    populationSize    =    getNumberOfSuccesses();    int    populationSize    =    getPopulationSize();    	non-compiled	[CE]  missing  return  statement	431	None
301	[BUG]  [BUGGY]  if(numberOfSuccesses  >  0)  {  if(!numericalVarianceIsCalculated)  {  numericalVariance  =  getNumberOfSuccesses();  }  [CE]  illegal  start  of  expression  [CONTEXT]      public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }      [BUGGY]  if(numberOfSuccesses  >  0)  {  if(!numericalVarianceIsCalculated)  {  numericalVariance  =  getNumberOfSuccesses();  }  [BUGGY]      return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	283	283	1	replace	if(numberOfSuccesses  >  0)  {  if(!numericalVarianceIsCalculated)  {  numericalVariance  =  getNumberOfSuccesses();  }	  if(numberOfSuccesses    >    1)    {    if(!numericalVarianceIsCalculated)    {    numericalVariance    =    getNumberOfSuccesses();    }    	non-compiled	[CE]  illegal  start  of  expression	421	None
303	[BUG]  [BUGGY]  if(numberOfSuccesses  >  0)  {  if(!numericalVarianceIsCalculated)  {  numericalVariance  =  getNumberOfSuccesses();  bodied  [CE]  not  a  statement  [CONTEXT]      public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }      [BUGGY]  if(numberOfSuccesses  >  0)  {  if(!numericalVarianceIsCalculated)  {  numericalVariance  =  getNumberOfSuccesses();  bodied  [BUGGY]      return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	283	283	1	replace	if(numberOfSuccesses  >  0)  {  if(!numericalVarianceIsCalculated)  {  numericalVariance  =  getNumberOfSuccesses();  bodied	  if(numberOfSuccesses    >    1)    {    if(!numericalVarianceIsCalculated)    {    numericalVariance    =    getNumberOfSuccesses();    }    	non-compiled	[CE]  not  a  statement	421	None
304	[BUG]  [BUGGY]  if(!numericalVarianceIsCalculated)  {  if(!numericalVarianceIsCalculated)  {  numericalVariance  =  getNumberOfSuccesses();  }  [CE]  illegal  start  of  expression  [CONTEXT]      public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }      [BUGGY]  if(!numericalVarianceIsCalculated)  {  if(!numericalVarianceIsCalculated)  {  numericalVariance  =  getNumberOfSuccesses();  }  [BUGGY]      return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	283	283	1	replace	if(!numericalVarianceIsCalculated)  {  if(!numericalVarianceIsCalculated)  {  numericalVariance  =  getNumberOfSuccesses();  }	  if(numberOfSuccesses    >    1)    {    if(!numericalVarianceIsCalculated)    {    numericalVariance    =    getNumberOfSuccesses();    }    	non-compiled	[CE]  illegal  start  of  expression	421	None
313	[BUG]  [BUGGY]  final  int  k  =  getKnowNumberOfSuccesses();  [CE]  cannot  find  symbol  [CONTEXT]      protected  double  calculateNumericalVariance()  {      [BUGGY]  final  int  k  =  getKnowNumberOfSuccesses();  [BUGGY]      final  double  N  =  getPopulationSize();  final  double  m  =  getNumberOfSuccesses();  final  double  n  =  getSampleSize();  return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	292	292	1	replace	final  int  k  =  getKnowNumberOfSuccesses();	  final    int    k    =    getSize();    	non-compiled	[CE]  cannot  find  symbol	1854	None
314	[BUG]  [BUGGY]  final  double  k  =  getSize();  [CE]  cannot  find  symbol  [CONTEXT]      protected  double  calculateNumericalVariance()  {      [BUGGY]  final  double  k  =  getSize();  [BUGGY]      final  double  N  =  getPopulationSize();  final  double  m  =  getNumberOfSuccesses();  final  double  n  =  getSampleSize();  return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	292	292	1	replace	final  double  k  =  getSize();	  final    int    k    =    getSize();    	non-compiled	[CE]  cannot  find  symbol	1854	None
322	[BUG]  [BUGGY]  numericalVariance  =  getPopulationSize()  -  1;  [CE]  missing  return  statement  [CONTEXT]      public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }      [BUGGY]  numericalVariance  =  getPopulationSize()  -  1;  [BUGGY]      return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	283	283	1	replace	numericalVariance  =  getPopulationSize()  -  1;	  numericalVariance    =    getPopulationSize();    	non-compiled	[CE]  missing  return  statement	2803	None
332	[BUG]  [BUGGY]  int  numberOfSuccesses  =  getNumberOfSuccesses()  -  1;  int  populationSize  =  getPopulationSize();  [CE]  missing  return  statement  [CONTEXT]      public  int  getSupportLowerBound()  {      [BUGGY]  int  numberOfSuccesses  =  getNumberOfSuccesses()  -  1;  int  populationSize  =  getPopulationSize();  [BUGGY]      return  FastMath.max(0,        getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  }  [CLASS]  HypergeometricDistribution  [METHOD]  getSupportLowerBound  [RETURN_TYPE]  int  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	308	309	1	replace	int  numberOfSuccesses  =  getNumberOfSuccesses()  -  1;  int  populationSize  =  getPopulationSize();	          int    numberOfSuccesses    =    getNumberOfSuccesses();    int    populationSize    =    getNumberOfSuccesses();    	non-compiled	[CE]  missing  return  statement	983	None
333	[BUG]  [BUGGY]  int  numberOfSuccesses  =  getNumberOfSuccesses()  -  2;  int  populationSize  =  getPopulationSize();  [CE]  missing  return  statement  [CONTEXT]      public  int  getSupportLowerBound()  {      [BUGGY]  int  numberOfSuccesses  =  getNumberOfSuccesses()  -  2;  int  populationSize  =  getPopulationSize();  [BUGGY]      return  FastMath.max(0,        getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  }  [CLASS]  HypergeometricDistribution  [METHOD]  getSupportLowerBound  [RETURN_TYPE]  int  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	308	309	1	replace	int  numberOfSuccesses  =  getNumberOfSuccesses()  -  2;  int  populationSize  =  getPopulationSize();	          int    numberOfSuccesses    =    getNumberOfSuccesses();    int    populationSize    =    getNumberOfSuccesses();    	non-compiled	[CE]  missing  return  statement	983	None
334	[BUG]  [BUGGY]  int  numberOfSuccesses  =  getNumberOfSuccesses()  +  1;  int  populationSize  =  getPopulationSize();  [CE]  missing  return  statement  [CONTEXT]      public  int  getSupportLowerBound()  {      [BUGGY]  int  numberOfSuccesses  =  getNumberOfSuccesses()  +  1;  int  populationSize  =  getPopulationSize();  [BUGGY]      return  FastMath.max(0,        getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  }  [CLASS]  HypergeometricDistribution  [METHOD]  getSupportLowerBound  [RETURN_TYPE]  int  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	308	309	1	replace	int  numberOfSuccesses  =  getNumberOfSuccesses()  +  1;  int  populationSize  =  getPopulationSize();	          int    numberOfSuccesses    =    getNumberOfSuccesses();    int    populationSize    =    getNumberOfSuccesses();    	non-compiled	[CE]  missing  return  statement	983	None
342	[BUG]  [BUGGY]  [FE]  AssertionError  testMoments  [CONTEXT]      protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();  final  double  m  =  getNumberOfSuccesses();      [BUGGY]  final  double  n  =  getSampleSize()  /  getPopulationSize();  [BUGGY]      return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	294	294	1	add	final  double  n  =  getSampleSize()  /  getPopulationSize();	  final    double    n    =    getSampleSize()    *    getPopulationSize();    	compilable	  [FE]  AssertionError  testMoments	1244	1
343	[BUG]  [BUGGY]  final  double  n  =  getSampleSize()  /  getPopulationSize();  [FE]  AssertionError  testMoments  [CONTEXT]      protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();  final  double  m  =  getNumberOfSuccesses();      [BUGGY]  final  double  n  =  getSampleSize()  /  getPopulationSize();  [BUGGY]      return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	294	294	1	replace	final  double  n  =  getSampleSize()  /  getPopulationSize();	  final    double    n    =    getSampleSize()    *    getPopulationSize();    	compilable	  [FE]  AssertionError  testMoments	1244	1
352	[BUG]  [BUGGY]  getNumberOfSuccesses()  *  2.0;  [CE]  not  a  statement  [CONTEXT]      public  double  getNumericalMean()  {      [BUGGY]  getNumberOfSuccesses()  *  2.0;  [BUGGY]      return  (double)  (getSampleSize()  *  getNumberOfSuccesses())  /  (double)  getPopulationSize();  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalMean  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	268	268	1	replace	getNumberOfSuccesses()  *  2.0;	  getNumberOfSuccesses()    /    2.0;    	non-compiled	[CE]  not  a  statement	1972	None
353	[BUG]  [BUGGY]  getNumberOfSuccesses()  /  2.0  +  1;  [CE]  not  a  statement  [CONTEXT]      public  double  getNumericalMean()  {      [BUGGY]  getNumberOfSuccesses()  /  2.0  +  1;  [BUGGY]      return  (double)  (getSampleSize()  *  getNumberOfSuccesses())  /  (double)  getPopulationSize();  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalMean  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	268	268	1	replace	getNumberOfSuccesses()  /  2.0  +  1;	  getNumberOfSuccesses()    /    2.0;    	non-compiled	[CE]  not  a  statement	1972	None
354	[BUG]  [BUGGY]  getNumberOfSuccesses()  /  2.0  *  2;  [CE]  not  a  statement  [CONTEXT]      public  double  getNumericalMean()  {      [BUGGY]  getNumberOfSuccesses()  /  2.0  *  2;  [BUGGY]      return  (double)  (getSampleSize()  *  getNumberOfSuccesses())  /  (double)  getPopulationSize();  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalMean  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	268	268	1	replace	getNumberOfSuccesses()  /  2.0  *  2;	  getNumberOfSuccesses()    /    2.0;    	non-compiled	[CE]  not  a  statement	1972	None
362	[BUG]  [BUGGY]  int  numberOfSuccesses  =  getNumberOfSuccesses(populationSize);  [CE]  method  getNumberOfSuccesses  in  class  HypergeometricDistribution  cannot  be  applied  to  given  types;  [CONTEXT]      public  int  getSupportLowerBound()  {      [BUGGY]  int  numberOfSuccesses  =  getNumberOfSuccesses(populationSize);  [BUGGY]      return  FastMath.max(0,        getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  }  [CLASS]  HypergeometricDistribution  [METHOD]  getSupportLowerBound  [RETURN_TYPE]  int  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	308	309	1	replace	int  numberOfSuccesses  =  getNumberOfSuccesses(populationSize);	  int    numberOfSuccesses    =    getNumberOfSuccesses(m);    	non-compiled	[CE]  method  getNumberOfSuccesses  in  class  HypergeometricDistribution  cannot  be  applied  to  given  types;	4803	None
363	[BUG]  [BUGGY]  int  numberOfSuccesses  =  getNumberOfSuccesses(this.populationSize);  [CE]  method  getNumberOfSuccesses  in  class  HypergeometricDistribution  cannot  be  applied  to  given  types;  [CONTEXT]      public  int  getSupportLowerBound()  {      [BUGGY]  int  numberOfSuccesses  =  getNumberOfSuccesses(this.populationSize);  [BUGGY]      return  FastMath.max(0,        getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  }  [CLASS]  HypergeometricDistribution  [METHOD]  getSupportLowerBound  [RETURN_TYPE]  int  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	308	309	1	replace	int  numberOfSuccesses  =  getNumberOfSuccesses(this.populationSize);	  int    numberOfSuccesses    =    getNumberOfSuccesses(m);    	non-compiled	[CE]  method  getNumberOfSuccesses  in  class  HypergeometricDistribution  cannot  be  applied  to  given  types;	4803	None
364	[BUG]  [BUGGY]  int  numberOfSuccesses  =  getNumberOfSuccesses(n  -  1);  [CE]  cannot  find  symbol  n  [CONTEXT]      public  int  getSupportLowerBound()  {      [BUGGY]  int  numberOfSuccesses  =  getNumberOfSuccesses(n  -  1);  [BUGGY]      return  FastMath.max(0,        getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  }  [CLASS]  HypergeometricDistribution  [METHOD]  getSupportLowerBound  [RETURN_TYPE]  int  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	308	309	1	replace	int  numberOfSuccesses  =  getNumberOfSuccesses(n  -  1);	  int    numberOfSuccesses    =    getNumberOfSuccesses(m);    	non-compiled	[CE]  cannot  find  symbol  n	4803	None
372	[BUG]  [BUGGY]  int  populationSize  =  getPopulationSize();  int  sampleSize  =  getNumberOfSuccesses()  -  getNumberOfSuccesses();  [CE]  missing  return  statement  [CONTEXT]      public  int  getSupportLowerBound()  {      [BUGGY]  int  populationSize  =  getPopulationSize();  int  sampleSize  =  getNumberOfSuccesses()  -  getNumberOfSuccesses();  [BUGGY]      return  FastMath.max(0,        getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  }  [CLASS]  HypergeometricDistribution  [METHOD]  getSupportLowerBound  [RETURN_TYPE]  int  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	308	309	1	replace	int  populationSize  =  getPopulationSize();  int  sampleSize  =  getNumberOfSuccesses()  -  getNumberOfSuccesses();	          int    populationSize    =    getPopulationSize();    int    numberOfSuccesses    =    getNumberOfSuccesses()    -    getNumberOfSuccesses();    	non-compiled	[CE]  missing  return  statement	2585	None
373	[BUG]  [BUGGY]  int  populationSize  =  getNumberOfSuccesses();  int  populationSize  =  getNumberOfSuccesses()  -  getNumberOfSuccesses();  [CE]  variable  populationSize  is  already  defined  in  method  getSupportLowerBound()  [CONTEXT]      public  int  getSupportLowerBound()  {      [BUGGY]  int  populationSize  =  getNumberOfSuccesses();  int  populationSize  =  getNumberOfSuccesses()  -  getNumberOfSuccesses();  [BUGGY]      return  FastMath.max(0,        getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  }  [CLASS]  HypergeometricDistribution  [METHOD]  getSupportLowerBound  [RETURN_TYPE]  int  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	308	309	1	replace	int  populationSize  =  getNumberOfSuccesses();  int  populationSize  =  getNumberOfSuccesses()  -  getNumberOfSuccesses();	          int    populationSize    =    getPopulationSize();    int    numberOfSuccesses    =    getNumberOfSuccesses()    -    getNumberOfSuccesses();    	non-compiled	[CE]  variable  populationSize  is  already  defined  in  method  getSupportLowerBound()	2585	None
381	[BUG]  [BUGGY]  if(getNumberOfSuccesses  >  0)  {  if(getPopulationSize()  >  0)  {  return  FastMath.max(0,  getNumberOfSuccesses()  -  getPopulationSize());  }  [CE]  illegal  start  of  expression  [CONTEXT]      protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();      [BUGGY]  if(getNumberOfSuccesses  >  0)  {  if(getPopulationSize()  >  0)  {  return  FastMath.max(0,  getNumberOfSuccesses()  -  getPopulationSize());  }  [BUGGY]      final  double  n  =  getSampleSize();  return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	293	293	1	replace	if(getNumberOfSuccesses  >  0)  {  if(getPopulationSize()  >  0)  {  return  FastMath.max(0,  getNumberOfSuccesses()  -  getPopulationSize());  }	  final    double    m    =    getNumberOfSuccesses()    *    2    +    1;    	non-compiled	[CE]  illegal  start  of  expression	2644	None
382	[BUG]  [BUGGY]  if(getNumberOfSuccesses  >  1)  {  if(getPopulationSize()  >  0)  {  return  FastMath.max(0,  getNumberOfSuccesses()  -  getPopulationSize());  }  [CE]  illegal  start  of  expression  [CONTEXT]      protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();      [BUGGY]  if(getNumberOfSuccesses  >  1)  {  if(getPopulationSize()  >  0)  {  return  FastMath.max(0,  getNumberOfSuccesses()  -  getPopulationSize());  }  [BUGGY]      final  double  n  =  getSampleSize();  return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	293	293	1	replace	if(getNumberOfSuccesses  >  1)  {  if(getPopulationSize()  >  0)  {  return  FastMath.max(0,  getNumberOfSuccesses()  -  getPopulationSize());  }	  final    double    m    =    getNumberOfSuccesses()    *    2    +    1;    	non-compiled	[CE]  illegal  start  of  expression	2644	None
383	[BUG]  [BUGGY]  if(getSampleSize  >  0)  {  if(getPopulationSize()  >  0)  {  return  FastMath.max(0,  getNumberOfSuccesses()  -  getPopulationSize());  }  [CE]  illegal  start  of  expression  [CONTEXT]      protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();      [BUGGY]  if(getSampleSize  >  0)  {  if(getPopulationSize()  >  0)  {  return  FastMath.max(0,  getNumberOfSuccesses()  -  getPopulationSize());  }  [BUGGY]      final  double  n  =  getSampleSize();  return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	293	293	1	replace	if(getSampleSize  >  0)  {  if(getPopulationSize()  >  0)  {  return  FastMath.max(0,  getNumberOfSuccesses()  -  getPopulationSize());  }	  final    double    m    =    getNumberOfSuccesses()    *    2    +    1;    	non-compiled	[CE]  illegal  start  of  expression	2644	None
384	[BUG]  [BUGGY]  if(getPopulationSize()  >  0)  {  if(getNumberOfSuccesses  >  0)  {  return  FastMath.max(0,  getNumberOfSuccesses()  -  getPopulationSize());  }  [CE]  illegal  start  of  expression  [CONTEXT]      protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();      [BUGGY]  if(getPopulationSize()  >  0)  {  if(getNumberOfSuccesses  >  0)  {  return  FastMath.max(0,  getNumberOfSuccesses()  -  getPopulationSize());  }  [BUGGY]      final  double  n  =  getSampleSize();  return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	293	293	1	replace	if(getPopulationSize()  >  0)  {  if(getNumberOfSuccesses  >  0)  {  return  FastMath.max(0,  getNumberOfSuccesses()  -  getPopulationSize());  }	  final    double    m    =    getNumberOfSuccesses()    *    2    +    1;    	non-compiled	[CE]  illegal  start  of  expression	2644	None
391	[BUG]  [BUGGY]  numericalVariance  =  calculateStdNumericalVariance();  [CE]  cannot  find  symbol  [CONTEXT]      protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();      [BUGGY]  numericalVariance  =  calculateStdNumericalVariance();  [BUGGY]      final  double  m  =  getNumberOfSuccesses();  final  double  n  =  getSampleSize();  return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	293	293	1	replace	numericalVariance  =  calculateStdNumericalVariance();	  if(numericalVarianceIsCalculated)    {    if(!numericalVarianceIsCalculated)    {    numericalVariance    =    getNumberOfSuccesses();    }    	non-compiled	[CE]  cannot  find  symbol	1004	None
392	[BUG]  [BUGGY]  numericalVariance  =  getStdNumericalVariance();  [CE]  cannot  find  symbol  [CONTEXT]      protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();      [BUGGY]  numericalVariance  =  getStdNumericalVariance();  [BUGGY]      final  double  m  =  getNumberOfSuccesses();  final  double  n  =  getSampleSize();  return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	293	293	1	replace	numericalVariance  =  getStdNumericalVariance();	  if(numericalVarianceIsCalculated)    {    if(!numericalVarianceIsCalculated)    {    numericalVariance    =    getNumberOfSuccesses();    }    	non-compiled	[CE]  cannot  find  symbol	1004	None
393	[BUG]  [BUGGY]  numericalVariance  =  calculateStdNumericalVariance()  /  2.0;  [CE]  cannot  find  symbol  [CONTEXT]      protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();      [BUGGY]  numericalVariance  =  calculateStdNumericalVariance()  /  2.0;  [BUGGY]      final  double  m  =  getNumberOfSuccesses();  final  double  n  =  getSampleSize();  return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	293	293	1	replace	numericalVariance  =  calculateStdNumericalVariance()  /  2.0;	  if(numericalVarianceIsCalculated)    {    if(!numericalVarianceIsCalculated)    {    numericalVariance    =    getNumberOfSuccesses();    }    	non-compiled	[CE]  cannot  find  symbol	1004	None
394	[BUG]  [BUGGY]  numericalVariance  =  computeStdNumericalVariance();  [CE]  cannot  find  symbol  [CONTEXT]      protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();      [BUGGY]  numericalVariance  =  computeStdNumericalVariance();  [BUGGY]      final  double  m  =  getNumberOfSuccesses();  final  double  n  =  getSampleSize();  return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	293	293	1	replace	numericalVariance  =  computeStdNumericalVariance();	  if(numericalVarianceIsCalculated)    {    if(!numericalVarianceIsCalculated)    {    numericalVariance    =    getNumberOfSuccesses();    }    	non-compiled	[CE]  cannot  find  symbol	1004	None
402	[BUG]  [BUGGY]  final  double  N  =  getPopulationSize()  *  2.0;  final  double  N  =  getNumberOfHyphens()  /  2.0;  [CE]  variable  N  is  already  defined  in  method  calculateNumericalVariance()  [CONTEXT]      protected  double  calculateNumericalVariance()  {      [BUGGY]  final  double  N  =  getPopulationSize()  *  2.0;  final  double  N  =  getNumberOfHyphens()  /  2.0;  [BUGGY]      final  double  m  =  getNumberOfSuccesses();  final  double  n  =  getSampleSize();  return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	292	292	1	replace	final  double  N  =  getPopulationSize()  *  2.0;  final  double  N  =  getNumberOfHyphens()  /  2.0;	  final    double    N    =    getPopulationSize()    /    2.0;    final    double    N    =    getNumberOfHyphens()    /    2.0;    	non-compiled	[CE]  variable  N  is  already  defined  in  method  calculateNumericalVariance()	2402	None
403	[BUG]  [BUGGY]  final  double  N  =  getPopulationSize()  /  2.0;  final  double  N  =  getNumberOfHephens()  /  2.0;  [CE]  variable  N  is  already  defined  in  method  calculateNumericalVariance()  [CONTEXT]      protected  double  calculateNumericalVariance()  {      [BUGGY]  final  double  N  =  getPopulationSize()  /  2.0;  final  double  N  =  getNumberOfHephens()  /  2.0;  [BUGGY]      final  double  m  =  getNumberOfSuccesses();  final  double  n  =  getSampleSize();  return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	292	292	1	replace	final  double  N  =  getPopulationSize()  /  2.0;  final  double  N  =  getNumberOfHephens()  /  2.0;	  final    double    N    =    getPopulationSize()    /    2.0;    final    double    N    =    getNumberOfHyphens()    /    2.0;    	non-compiled	[CE]  variable  N  is  already  defined  in  method  calculateNumericalVariance()	2402	None
404	[BUG]  [BUGGY]  final  double  N  =  getPopulationSize()  /  2.0;  final  double  N  =  getNumberOfHophens()  /  2.0;  [CE]  variable  N  is  already  defined  in  method  calculateNumericalVariance()  [CONTEXT]      protected  double  calculateNumericalVariance()  {      [BUGGY]  final  double  N  =  getPopulationSize()  /  2.0;  final  double  N  =  getNumberOfHophens()  /  2.0;  [BUGGY]      final  double  m  =  getNumberOfSuccesses();  final  double  n  =  getSampleSize();  return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	292	292	1	replace	final  double  N  =  getPopulationSize()  /  2.0;  final  double  N  =  getNumberOfHophens()  /  2.0;	  final    double    N    =    getPopulationSize()    /    2.0;    final    double    N    =    getNumberOfHyphens()    /    2.0;    	non-compiled	[CE]  variable  N  is  already  defined  in  method  calculateNumericalVariance()	2402	None
412	[BUG]  [BUGGY]  checkNumberOfSuccesses(numberOfSuccesses,  populationSize);  [CE]  cannot  find  symbol  [CONTEXT]      public  double  getNumericalMean()  {      [BUGGY]  checkNumberOfSuccesses(numberOfSuccesses,  populationSize);  [BUGGY]      return  (double)  (getSampleSize()  *  getNumberOfSuccesses())  /  (double)  getPopulationSize();  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalMean  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	268	268	1	replace	checkNumberOfSuccesses(numberOfSuccesses,  populationSize);	  checkNumberOfSuccesses(numberOfSuccesses);    	non-compiled	[CE]  cannot  find  symbol	1762	None
413	[BUG]  [BUGGY]  checkNumberOfSuccesses(numberOfSuccesses  -  1);  [CE]  cannot  find  symbol  [CONTEXT]      public  double  getNumericalMean()  {      [BUGGY]  checkNumberOfSuccesses(numberOfSuccesses  -  1);  [BUGGY]      return  (double)  (getSampleSize()  *  getNumberOfSuccesses())  /  (double)  getPopulationSize();  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalMean  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	268	268	1	replace	checkNumberOfSuccesses(numberOfSuccesses  -  1);	  checkNumberOfSuccesses(numberOfSuccesses);    	non-compiled	[CE]  cannot  find  symbol	1762	None
414	[BUG]  [BUGGY]  checkNumberOfSuccesses(numberOfSuccesses),  populationSize);  [CE]  ';'  expected  [CONTEXT]      public  double  getNumericalMean()  {      [BUGGY]  checkNumberOfSuccesses(numberOfSuccesses),  populationSize);  [BUGGY]      return  (double)  (getSampleSize()  *  getNumberOfSuccesses())  /  (double)  getPopulationSize();  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalMean  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	268	268	1	replace	checkNumberOfSuccesses(numberOfSuccesses),  populationSize);	  checkNumberOfSuccesses(numberOfSuccesses);    	non-compiled	[CE]  ';'  expected	1762	None
423	[BUG]  [BUGGY]  if(numberOfSuccesses  >  1)  {  if(!numericalVarianceIsCalculated  &&  Math.abs(numberOfSuccesses)>  0)  {  return  calculateNumberOfSuccesses();  }  [CE]  illegal  start  of  expression  [CONTEXT]      public  int  getSupportLowerBound()  {      [BUGGY]  if(numberOfSuccesses  >  1)  {  if(!numericalVarianceIsCalculated  &&  Math.abs(numberOfSuccesses)>  0)  {  return  calculateNumberOfSuccesses();  }  [BUGGY]      return  FastMath.max(0,        getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  }  [CLASS]  HypergeometricDistribution  [METHOD]  getSupportLowerBound  [RETURN_TYPE]  int  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	308	309	1	replace	if(numberOfSuccesses  >  1)  {  if(!numericalVarianceIsCalculated  &&  Math.abs(numberOfSuccesses)>  0)  {  return  calculateNumberOfSuccesses();  }	  if(numberOfSuccesses    >    0)    {    if(!numericalVarianceIsCalculated    &&    Math.abs(numberOfSuccesses)>    0)    {    return    calculateNumberOfSuccesses();    }    	non-compiled	[CE]  illegal  start  of  expression	2791	None
432	[BUG]  [BUGGY]  final  int  k  =  getKind()  *  getNumberOfSuccesses();  [CE]  cannot  find  symbol  [CONTEXT]      protected  double  calculateNumericalVariance()  {      [BUGGY]  final  int  k  =  getKind()  *  getNumberOfSuccesses();  [BUGGY]      final  double  N  =  getPopulationSize();  final  double  m  =  getNumberOfSuccesses();  final  double  n  =  getSampleSize();  return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	292	292	1	replace	final  int  k  =  getKind()  *  getNumberOfSuccesses();	  final    double    k    =    getKind()    *    getNumberOfSuccesses();    	non-compiled	[CE]  cannot  find  symbol	661	None
433	[BUG]  [BUGGY]  final  double  dx  =  getKind()  *  getNumberOfSuccesses();  [CE]  cannot  find  symbol  [CONTEXT]      protected  double  calculateNumericalVariance()  {      [BUGGY]  final  double  dx  =  getKind()  *  getNumberOfSuccesses();  [BUGGY]      final  double  N  =  getPopulationSize();  final  double  m  =  getNumberOfSuccesses();  final  double  n  =  getSampleSize();  return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	292	292	1	replace	final  double  dx  =  getKind()  *  getNumberOfSuccesses();	  final    double    k    =    getKind()    *    getNumberOfSuccesses();    	non-compiled	[CE]  cannot  find  symbol	661	None
434	[BUG]  [BUGGY]  final  double  n  =  getKind()  *  getNumberOfSuccesses();  [CE]  cannot  find  symbol  [CONTEXT]      protected  double  calculateNumericalVariance()  {      [BUGGY]  final  double  n  =  getKind()  *  getNumberOfSuccesses();  [BUGGY]      final  double  N  =  getPopulationSize();  final  double  m  =  getNumberOfSuccesses();  final  double  n  =  getSampleSize();  return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	292	292	1	replace	final  double  n  =  getKind()  *  getNumberOfSuccesses();	  final    double    k    =    getKind()    *    getNumberOfSuccesses();    	non-compiled	[CE]  cannot  find  symbol	661	None
442	[BUG]  [BUGGY]  int  numberOfSuccesses  =  getNumberOfSuccesses()  -  1;  super.getSupportLowerBound();  [CE]  abstract  method  getSupportLowerBound()  in  IntegerDistribution  cannot  be  accessed  directly  [CONTEXT]      public  int  getSupportLowerBound()  {      [BUGGY]  int  numberOfSuccesses  =  getNumberOfSuccesses()  -  1;  super.getSupportLowerBound();  [BUGGY]      return  FastMath.max(0,        getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  }  [CLASS]  HypergeometricDistribution  [METHOD]  getSupportLowerBound  [RETURN_TYPE]  int  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	308	309	1	replace	int  numberOfSuccesses  =  getNumberOfSuccesses()  -  1;  super.getSupportLowerBound();	          int    numberOfSuccesses    =    getNumberOfSuccesses();    int    populationSize    =    getPopulationSize()    -    getPopulationSize();    	non-compiled	[CE]  abstract  method  getSupportLowerBound()  in  IntegerDistribution  cannot  be  accessed  directly	984	None
443	[BUG]  [BUGGY]  int  numberOfSuccesses  =  getNumberOfSuccesses()  /  2;  super.getSupportLowerBound();  [CE]  abstract  method  getSupportLowerBound()  in  IntegerDistribution  cannot  be  accessed  directly  [CONTEXT]      public  int  getSupportLowerBound()  {      [BUGGY]  int  numberOfSuccesses  =  getNumberOfSuccesses()  /  2;  super.getSupportLowerBound();  [BUGGY]      return  FastMath.max(0,        getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  }  [CLASS]  HypergeometricDistribution  [METHOD]  getSupportLowerBound  [RETURN_TYPE]  int  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	308	309	1	replace	int  numberOfSuccesses  =  getNumberOfSuccesses()  /  2;  super.getSupportLowerBound();	          int    numberOfSuccesses    =    getNumberOfSuccesses();    int    populationSize    =    getPopulationSize()    -    getPopulationSize();    	non-compiled	[CE]  abstract  method  getSupportLowerBound()  in  IntegerDistribution  cannot  be  accessed  directly	984	None
444	[BUG]  [BUGGY]  int  numberOfSuccesses  =  getNumberOfSuccesses()  +  1;  super.getSupportLowerBound();  [CE]  abstract  method  getSupportLowerBound()  in  IntegerDistribution  cannot  be  accessed  directly  [CONTEXT]      public  int  getSupportLowerBound()  {      [BUGGY]  int  numberOfSuccesses  =  getNumberOfSuccesses()  +  1;  super.getSupportLowerBound();  [BUGGY]      return  FastMath.max(0,        getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  }  [CLASS]  HypergeometricDistribution  [METHOD]  getSupportLowerBound  [RETURN_TYPE]  int  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	308	309	1	replace	int  numberOfSuccesses  =  getNumberOfSuccesses()  +  1;  super.getSupportLowerBound();	          int    numberOfSuccesses    =    getNumberOfSuccesses();    int    populationSize    =    getPopulationSize()    -    getPopulationSize();    	non-compiled	[CE]  abstract  method  getSupportLowerBound()  in  IntegerDistribution  cannot  be  accessed  directly	984	None
451	[BUG]  [BUGGY]  int  populationSize  =  getPopulationSize();  if(!numericalVarianceIsCalculated  &&  Math.pow(10,  numberOfSuccesses)>  0)  {  [CE]  illegal  start  of  expression  [CONTEXT]      public  int  getSupportLowerBound()  {      [BUGGY]  int  populationSize  =  getPopulationSize();  if(!numericalVarianceIsCalculated  &&  Math.pow(10,  numberOfSuccesses)>  0)  {  [BUGGY]      return  FastMath.max(0,        getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  }  [CLASS]  HypergeometricDistribution  [METHOD]  getSupportLowerBound  [RETURN_TYPE]  int  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	308	309	1	replace	int  populationSize  =  getPopulationSize();  if(!numericalVarianceIsCalculated  &&  Math.pow(10,  numberOfSuccesses)>  0)  {	          int    populationSize    =    getNumberOfSuccesses();    if(!numericalVarianceIsCalculated    &&    Math.pow(10,    numberOfSuccesses)>    0)    {    	non-compiled	[CE]  illegal  start  of  expression	1924	None
452	[BUG]  [BUGGY]  int  populationSize  =  getNumberOfSuccesses();  if(!numericalVarianceIsCalculated  &&  Math.pow(10,  numberOfSuccesses)>  1)  {  [CE]  illegal  start  of  expression  [CONTEXT]      public  int  getSupportLowerBound()  {      [BUGGY]  int  populationSize  =  getNumberOfSuccesses();  if(!numericalVarianceIsCalculated  &&  Math.pow(10,  numberOfSuccesses)>  1)  {  [BUGGY]      return  FastMath.max(0,        getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  }  [CLASS]  HypergeometricDistribution  [METHOD]  getSupportLowerBound  [RETURN_TYPE]  int  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	308	309	1	replace	int  populationSize  =  getNumberOfSuccesses();  if(!numericalVarianceIsCalculated  &&  Math.pow(10,  numberOfSuccesses)>  1)  {	          int    populationSize    =    getNumberOfSuccesses();    if(!numericalVarianceIsCalculated    &&    Math.pow(10,    numberOfSuccesses)>    0)    {    	non-compiled	[CE]  illegal  start  of  expression	1924	None
454	[BUG]  [BUGGY]  float  populationSize  =  getNumberOfSuccesses();  if(!numericalVarianceIsCalculated  &&  Math.pow(10,  numberOfSuccesses)>  0)  {  [CE]  illegal  start  of  expression  [CONTEXT]      public  int  getSupportLowerBound()  {      [BUGGY]  float  populationSize  =  getNumberOfSuccesses();  if(!numericalVarianceIsCalculated  &&  Math.pow(10,  numberOfSuccesses)>  0)  {  [BUGGY]      return  FastMath.max(0,        getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  }  [CLASS]  HypergeometricDistribution  [METHOD]  getSupportLowerBound  [RETURN_TYPE]  int  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	308	309	1	replace	float  populationSize  =  getNumberOfSuccesses();  if(!numericalVarianceIsCalculated  &&  Math.pow(10,  numberOfSuccesses)>  0)  {	          int    populationSize    =    getNumberOfSuccesses();    if(!numericalVarianceIsCalculated    &&    Math.pow(10,    numberOfSuccesses)>    0)    {    	non-compiled	[CE]  illegal  start  of  expression	1924	None
462	[BUG]  [BUGGY]  final  int  dx  =  getDateTimeZone();  [CE]  cannot  find  symbol  [CONTEXT]      protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();      [BUGGY]  final  int  dx  =  getDateTimeZone();  [BUGGY]      final  double  n  =  getSampleSize();  return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	293	293	1	replace	final  int  dx  =  getDateTimeZone();	  final    double    dx    =    getDateTimeZone();    	non-compiled	[CE]  cannot  find  symbol	1354	None
463	[BUG]  [BUGGY]  final  double  m  =  getDateTimeZone();  [CE]  cannot  find  symbol  [CONTEXT]      protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();      [BUGGY]  final  double  m  =  getDateTimeZone();  [BUGGY]      final  double  n  =  getSampleSize();  return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	293	293	1	replace	final  double  m  =  getDateTimeZone();	  final    double    dx    =    getDateTimeZone();    	non-compiled	[CE]  cannot  find  symbol	1354	None
464	[BUG]  [BUGGY]  final  double  dx  =  getDateTimeZone().multiply(numberOfSuccesses);  [CE]  cannot  find  symbol  [CONTEXT]      protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();      [BUGGY]  final  double  dx  =  getDateTimeZone().multiply(numberOfSuccesses);  [BUGGY]      final  double  n  =  getSampleSize();  return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	293	293	1	replace	final  double  dx  =  getDateTimeZone().multiply(numberOfSuccesses);	  final    double    dx    =    getDateTimeZone();    	non-compiled	[CE]  cannot  find  symbol	1354	None
473	[BUG]  [BUGGY]  if(numberOfSuccesses  <  0)  {  if(!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumberOfSuccesses();  }  [CE]  cannot  find  symbol  [CONTEXT]      public  double  getNumericalVariance()  {      [BUGGY]  if(numberOfSuccesses  <  0)  {  if(!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumberOfSuccesses();  }  [BUGGY]      if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	279	279	1	replace	if(numberOfSuccesses  <  0)  {  if(!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumberOfSuccesses();  }	  if(numericalVariance    <    0)    {    if(!numericalVarianceIsCalculated)    {    numericalVariance    =    calculateNumberOfSuccesses();    }    	non-compiled	[CE]  cannot  find  symbol	2144	None
474	[BUG]  [BUGGY]  if(numericalVariance  <=  0)  {  if(!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumberOfSuccesses();  }  [CE]  cannot  find  symbol  [CONTEXT]      public  double  getNumericalVariance()  {      [BUGGY]  if(numericalVariance  <=  0)  {  if(!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumberOfSuccesses();  }  [BUGGY]      if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	279	279	1	replace	if(numericalVariance  <=  0)  {  if(!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumberOfSuccesses();  }	  if(numericalVariance    <    0)    {    if(!numericalVarianceIsCalculated)    {    numericalVariance    =    calculateNumberOfSuccesses();    }    	non-compiled	[CE]  cannot  find  symbol	2144	None
484	[BUG]  [BUGGY]  static  final  double  k  =  getNumberOfCase();  [CE]  illegal  start  of  expression  [CONTEXT]      public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {      [BUGGY]  static  final  double  k  =  getNumberOfCase();  [BUGGY]      numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	280	280	1	replace	static  final  double  k  =  getNumberOfCase();	  final    double    k    =    getNumberOfCase();    	non-compiled	[CE]  illegal  start  of  expression	811	None
492	[BUG]  [BUGGY]  numericalVariance  =  getNumberOfSuccesses()  /(populationSize  -  1);  [CE]  illegal  start  of  type  [CONTEXT]      public  double  getNumericalVariance()  {      [BUGGY]  numericalVariance  =  getNumberOfSuccesses()  /(populationSize  -  1);  [BUGGY]      if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	279	279	1	replace	numericalVariance  =  getNumberOfSuccesses()  /(populationSize  -  1);	  numericalVariance    =    getNumberOfSuccesses()    /(numberOfSuccesses    -    1);    	non-compiled	[CE]  illegal  start  of  type	3601	None
494	[BUG]  [BUGGY]  numericalVariance  =  getNumberOfSuccesses()  /(numberOfSuccesses  *  1);  [CE]  illegal  start  of  type  [CONTEXT]      public  double  getNumericalVariance()  {      [BUGGY]  numericalVariance  =  getNumberOfSuccesses()  /(numberOfSuccesses  *  1);  [BUGGY]      if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	279	279	1	replace	numericalVariance  =  getNumberOfSuccesses()  /(numberOfSuccesses  *  1);	  numericalVariance    =    getNumberOfSuccesses()    /(numberOfSuccesses    -    1);    	non-compiled	[CE]  illegal  start  of  type	3601	None
501	[BUG]  [BUGGY]  numericalVariance  =  Math.max(numberOfSuccesses,  numberOfSuccesses);  if(numberOfSuccesses  >  0)  {  if(!numericalVarianceIsCalculated)  {  numericalVariance  =  Math.min(numberOfSuccesses,  [CE]  illegal  start  of  expression  [CONTEXT]      public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();      [BUGGY]  numericalVariance  =  Math.max(numberOfSuccesses,  numberOfSuccesses);  if(numberOfSuccesses  >  0)  {  if(!numericalVarianceIsCalculated)  {  numericalVariance  =  Math.min(numberOfSuccesses,  [BUGGY]      numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	281	281	1	replace	numericalVariance  =  Math.max(numberOfSuccesses,  numberOfSuccesses);  if(numberOfSuccesses  >  0)  {  if(!numericalVarianceIsCalculated)  {  numericalVariance  =  Math.min(numberOfSuccesses,	          numericalVariance    =    Math.max(numberOfSuccesses,    numberOfSuccesses);    numericalVariance    =    Math.min(numberOfSuccesses,    numberOfSuccesses);    	non-compiled	[CE]  illegal  start  of  expression	82	None
502	[BUG]  [BUGGY]  numericalVariance  =  Math.max(numberOfSuccesses,  numberOfSuccesses);  if(numberOfSuccesses  >  0)  {  if(!numericalVarianceIsCalculated)  {  numericalVariance  =  Math.min(numberOfSuccesses,  number  [CE]  ')'  expected  [CONTEXT]      public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();      [BUGGY]  numericalVariance  =  Math.max(numberOfSuccesses,  numberOfSuccesses);  if(numberOfSuccesses  >  0)  {  if(!numericalVarianceIsCalculated)  {  numericalVariance  =  Math.min(numberOfSuccesses,  number  [BUGGY]      numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	281	281	1	replace	numericalVariance  =  Math.max(numberOfSuccesses,  numberOfSuccesses);  if(numberOfSuccesses  >  0)  {  if(!numericalVarianceIsCalculated)  {  numericalVariance  =  Math.min(numberOfSuccesses,  number	          numericalVariance    =    Math.max(numberOfSuccesses,    numberOfSuccesses);    numericalVariance    =    Math.min(numberOfSuccesses,    numberOfSuccesses);    	non-compiled	[CE]  ')'  expected	82	None
503	[BUG]  [BUGGY]  numericalVariance  =  Math.max(numberOfSuccesses,  numberOfSuccesses);  if(numberOfSuccesses  >  0)  }  if(!numericalVarianceIsCalculated)  {  numericalVariance  =  Math.min(numberOfSuccesses,  [CE]  illegal  start  of  expression  [CONTEXT]      public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();      [BUGGY]  numericalVariance  =  Math.max(numberOfSuccesses,  numberOfSuccesses);  if(numberOfSuccesses  >  0)  }  if(!numericalVarianceIsCalculated)  {  numericalVariance  =  Math.min(numberOfSuccesses,  [BUGGY]      numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	281	281	1	replace	numericalVariance  =  Math.max(numberOfSuccesses,  numberOfSuccesses);  if(numberOfSuccesses  >  0)  }  if(!numericalVarianceIsCalculated)  {  numericalVariance  =  Math.min(numberOfSuccesses,	          numericalVariance    =    Math.max(numberOfSuccesses,    numberOfSuccesses);    numericalVariance    =    Math.min(numberOfSuccesses,    numberOfSuccesses);    	non-compiled	[CE]  illegal  start  of  expression	82	None
504	[BUG]  [BUGGY]  if(numberOfSuccesses  >  0)  {  if(!numericalVarianceIsCalculated)  {  numericalVariance  =  Math.min(numberOfSuccesses,  numberOfSuccesses);  bodied  [CE]  not  a  statement  [CONTEXT]      public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();      [BUGGY]  if(numberOfSuccesses  >  0)  {  if(!numericalVarianceIsCalculated)  {  numericalVariance  =  Math.min(numberOfSuccesses,  numberOfSuccesses);  bodied  [BUGGY]      numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	281	281	1	replace	if(numberOfSuccesses  >  0)  {  if(!numericalVarianceIsCalculated)  {  numericalVariance  =  Math.min(numberOfSuccesses,  numberOfSuccesses);  bodied	          numericalVariance    =    Math.max(numberOfSuccesses,    numberOfSuccesses);    numericalVariance    =    Math.min(numberOfSuccesses,    numberOfSuccesses);    	non-compiled	[CE]  not  a  statement	82	None
511	[BUG]  [BUGGY]  if(!numericalVarianceIsCalculated)  {  if(!numericalVarianceIsCalculated)  {  return  false;  }  [CE]  illegal  start  of  expression  [CONTEXT]      protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();      [BUGGY]  if(!numericalVarianceIsCalculated)  {  if(!numericalVarianceIsCalculated)  {  return  false;  }  [BUGGY]      final  double  m  =  getNumberOfSuccesses();  final  double  n  =  getSampleSize();  return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	293	293	1	replace	if(!numericalVarianceIsCalculated)  {  if(!numericalVarianceIsCalculated)  {  return  false;  }	  if(numberOfSuccesses    >    0)    {    if(!numericalVarianceIsCalculated)    {    numericalVariance    =    calculateNumberOfSuccesses()    *(populationSize    -    getSampleSize());    }    	non-compiled	[CE]  illegal  start  of  expression	753	None
512	[BUG]  [BUGGY]  if(!numericalVarianceIsCalculated)  {  [CE]  illegal  start  of  expression  [CONTEXT]      protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();      [BUGGY]  if(!numericalVarianceIsCalculated)  {  [BUGGY]      final  double  m  =  getNumberOfSuccesses();  final  double  n  =  getSampleSize();  return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	293	293	1	replace	if(!numericalVarianceIsCalculated)  {	  if(numberOfSuccesses    >    0)    {    if(!numericalVarianceIsCalculated)    {    numericalVariance    =    calculateNumberOfSuccesses()    *(populationSize    -    getSampleSize());    }    	non-compiled	[CE]  illegal  start  of  expression	753	None
513	[BUG]  [BUGGY]  if(!numericalVarianceIsCalculated)  {  if(!numericalVarianceIsCalculated)  {  return  false;  [CE]  illegal  start  of  expression  [CONTEXT]      protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();      [BUGGY]  if(!numericalVarianceIsCalculated)  {  if(!numericalVarianceIsCalculated)  {  return  false;  [BUGGY]      final  double  m  =  getNumberOfSuccesses();  final  double  n  =  getSampleSize();  return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	293	293	1	replace	if(!numericalVarianceIsCalculated)  {  if(!numericalVarianceIsCalculated)  {  return  false;	  if(numberOfSuccesses    >    0)    {    if(!numericalVarianceIsCalculated)    {    numericalVariance    =    calculateNumberOfSuccesses()    *(populationSize    -    getSampleSize());    }    	non-compiled	[CE]  illegal  start  of  expression	753	None
514	[BUG]  [BUGGY]  if(numericalVarianceIsCalculated)  {  if(!numericalVarianceIsCalculated)  {  return  false;  }  [CE]  illegal  start  of  expression  [CONTEXT]      protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();      [BUGGY]  if(numericalVarianceIsCalculated)  {  if(!numericalVarianceIsCalculated)  {  return  false;  }  [BUGGY]      final  double  m  =  getNumberOfSuccesses();  final  double  n  =  getSampleSize();  return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	293	293	1	replace	if(numericalVarianceIsCalculated)  {  if(!numericalVarianceIsCalculated)  {  return  false;  }	  if(numberOfSuccesses    >    0)    {    if(!numericalVarianceIsCalculated)    {    numericalVariance    =    calculateNumberOfSuccesses()    *(populationSize    -    getSampleSize());    }    	non-compiled	[CE]  illegal  start  of  expression	753	None
521	[BUG]  [BUGGY]  int  k  =  getNumberOfSuccesses()  /(populationSize);  [CE]  illegal  start  of  type  [CONTEXT]      public  double  getNumericalVariance()  {      [BUGGY]  int  k  =  getNumberOfSuccesses()  /(populationSize);  [BUGGY]      if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	279	279	1	replace	int  k  =  getNumberOfSuccesses()  /(populationSize);	  double    numericalVariance    =    getNumberOfSuccesses()    /    20.0;    	non-compiled	[CE]  illegal  start  of  type	1364	None
522	[BUG]  [BUGGY]  int  k  =  getNumberOfSuccesses()  /(numberOfSuccesses  -  1);  [CE]  illegal  start  of  type  [CONTEXT]      public  double  getNumericalVariance()  {      [BUGGY]  int  k  =  getNumberOfSuccesses()  /(numberOfSuccesses  -  1);  [BUGGY]      if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	279	279	1	replace	int  k  =  getNumberOfSuccesses()  /(numberOfSuccesses  -  1);	  double    numericalVariance    =    getNumberOfSuccesses()    /    20.0;    	non-compiled	[CE]  illegal  start  of  type	1364	None
523	[BUG]  [BUGGY]  int  k  =  getNumberOfSuccesses()  *(numberOfSuccesses);  [CE]  illegal  start  of  type  [CONTEXT]      public  double  getNumericalVariance()  {      [BUGGY]  int  k  =  getNumberOfSuccesses()  *(numberOfSuccesses);  [BUGGY]      if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	279	279	1	replace	int  k  =  getNumberOfSuccesses()  *(numberOfSuccesses);	  double    numericalVariance    =    getNumberOfSuccesses()    /    20.0;    	non-compiled	[CE]  illegal  start  of  type	1364	None
524	[BUG]  [BUGGY]  int  k  =  getNumberOfSuccesses()  /(populationOfSuccesses);  [CE]  illegal  start  of  type  [CONTEXT]      public  double  getNumericalVariance()  {      [BUGGY]  int  k  =  getNumberOfSuccesses()  /(populationOfSuccesses);  [BUGGY]      if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	279	279	1	replace	int  k  =  getNumberOfSuccesses()  /(populationOfSuccesses);	  double    numericalVariance    =    getNumberOfSuccesses()    /    20.0;    	non-compiled	[CE]  illegal  start  of  type	1364	None
532	[BUG]  [BUGGY]  numericalVariance  =  calculateNumberOfSuccesses(),  populationSize);  [CE]  ';'  expected  [CONTEXT]      public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {      [BUGGY]  numericalVariance  =  calculateNumberOfSuccesses(),  populationSize);  [BUGGY]      numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	280	280	1	replace	numericalVariance  =  calculateNumberOfSuccesses(),  populationSize);	  numericalVariance    =    calculateNumberOfSuccesses(),    sampleSize);    	non-compiled	[CE]  ';'  expected	603	None
534	[BUG]  [BUGGY]  numericalVariance  =  calculateNumberOfSuccesses(),  numberOfSuccesses  +  1);  [CE]  ';'  expected  [CONTEXT]      public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {      [BUGGY]  numericalVariance  =  calculateNumberOfSuccesses(),  numberOfSuccesses  +  1);  [BUGGY]      numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	280	280	1	replace	numericalVariance  =  calculateNumberOfSuccesses(),  numberOfSuccesses  +  1);	  numericalVariance    =    calculateNumberOfSuccesses(),    sampleSize);    	non-compiled	[CE]  ';'  expected	603	None
543	[BUG]  [BUGGY]  int  numberOfSuccesses  =  getPopulationSize()  /  getNumberOfSuccesses();  [CE]  missing  return  statement  [CONTEXT]      public  int  getSupportLowerBound()  {      [BUGGY]  int  numberOfSuccesses  =  getPopulationSize()  /  getNumberOfSuccesses();  [BUGGY]      return  FastMath.max(0,        getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  }  [CLASS]  HypergeometricDistribution  [METHOD]  getSupportLowerBound  [RETURN_TYPE]  int  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	308	309	1	replace	int  numberOfSuccesses  =  getPopulationSize()  /  getNumberOfSuccesses();	  int    numberOfSuccesses    =    getPopulationSize()    -    getNumberOfSuccesses();    	non-compiled	[CE]  missing  return  statement	953	None
544	[BUG]  [BUGGY]  int  numberOfSuccesses  =  getPopulationSize()  -  getNumberOfSuccesses()  +  1;  [CE]  missing  return  statement  [CONTEXT]      public  int  getSupportLowerBound()  {      [BUGGY]  int  numberOfSuccesses  =  getPopulationSize()  -  getNumberOfSuccesses()  +  1;  [BUGGY]      return  FastMath.max(0,        getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  }  [CLASS]  HypergeometricDistribution  [METHOD]  getSupportLowerBound  [RETURN_TYPE]  int  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	308	309	1	replace	int  numberOfSuccesses  =  getPopulationSize()  -  getNumberOfSuccesses()  +  1;	  int    numberOfSuccesses    =    getPopulationSize()    -    getNumberOfSuccesses();    	non-compiled	[CE]  missing  return  statement	953	None
554	[BUG]  [BUGGY]  numericalVariance  =  calculateNumberOfSuccesses(),  numberOfSuccesses  +  1);  [CE]  ';'  expected  [CONTEXT]      public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();      [BUGGY]  numericalVariance  =  calculateNumberOfSuccesses(),  numberOfSuccesses  +  1);  [BUGGY]      numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	281	281	1	replace	numericalVariance  =  calculateNumberOfSuccesses(),  numberOfSuccesses  +  1);	  numericalVariance    =    calculateNumberOfSuccesses(),    sampleSize);    	non-compiled	[CE]  ';'  expected	3284	None
562	[BUG]  [BUGGY]  numericalVariance  =  Math.sqrt(numberOfSuccesses  /  2  -  1);  [CE]  missing  return  statement  [CONTEXT]      public  int  getSupportLowerBound()  {      [BUGGY]  numericalVariance  =  Math.sqrt(numberOfSuccesses  /  2  -  1);  [BUGGY]      return  FastMath.max(0,        getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  }  [CLASS]  HypergeometricDistribution  [METHOD]  getSupportLowerBound  [RETURN_TYPE]  int  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	308	309	1	replace	numericalVariance  =  Math.sqrt(numberOfSuccesses  /  2  -  1);	  if(getPopulationSize()    >    0)    {    if(getNumberOfSuccesses()    >    0)    {    return    FastMath.max(0,    getNumberOfSuccesses()    -    getPopulationSize());    }    	non-compiled	[CE]  missing  return  statement	783	None
563	[BUG]  [BUGGY]  numericalVariance  =  Math.sqrt(numberOfSuccesses  /  2  +  1);  [CE]  missing  return  statement  [CONTEXT]      public  int  getSupportLowerBound()  {      [BUGGY]  numericalVariance  =  Math.sqrt(numberOfSuccesses  /  2  +  1);  [BUGGY]      return  FastMath.max(0,        getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  }  [CLASS]  HypergeometricDistribution  [METHOD]  getSupportLowerBound  [RETURN_TYPE]  int  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	308	309	1	replace	numericalVariance  =  Math.sqrt(numberOfSuccesses  /  2  +  1);	  if(getPopulationSize()    >    0)    {    if(getNumberOfSuccesses()    >    0)    {    return    FastMath.max(0,    getNumberOfSuccesses()    -    getPopulationSize());    }    	non-compiled	[CE]  missing  return  statement	783	None
564	[BUG]  [BUGGY]  numericalVariance  =  Math.sqrt(numberOfSuccesses  *  2);  [CE]  missing  return  statement  [CONTEXT]      public  int  getSupportLowerBound()  {      [BUGGY]  numericalVariance  =  Math.sqrt(numberOfSuccesses  *  2);  [BUGGY]      return  FastMath.max(0,        getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  }  [CLASS]  HypergeometricDistribution  [METHOD]  getSupportLowerBound  [RETURN_TYPE]  int  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	308	309	1	replace	numericalVariance  =  Math.sqrt(numberOfSuccesses  *  2);	  if(getPopulationSize()    >    0)    {    if(getNumberOfSuccesses()    >    0)    {    return    FastMath.max(0,    getNumberOfSuccesses()    -    getPopulationSize());    }    	non-compiled	[CE]  missing  return  statement	783	None
573	[BUG]  [BUGGY]  final  double  n  =  getSampleSize(n,  N);  [CE]  method  getSampleSize  in  class  HypergeometricDistribution  cannot  be  applied  to  given  types;  [CONTEXT]      protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();  final  double  m  =  getNumberOfSuccesses();      [BUGGY]  final  double  n  =  getSampleSize(n,  N);  [BUGGY]      return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	294	294	1	replace	final  double  n  =  getSampleSize(n,  N);	  final    double    n    =    getSampleSize(n,    M);    	non-compiled	[CE]  method  getSampleSize  in  class  HypergeometricDistribution  cannot  be  applied  to  given  types;	3214	None
582	[BUG]  [BUGGY]  [FE]  AssertionError  testMoments  [CONTEXT]      protected  double  calculateNumericalVariance()  {      [BUGGY]  double  N  =  getNumberOfSuccesses()  /  1;  [BUGGY]      final  double  N  =  getPopulationSize();  final  double  m  =  getNumberOfSuccesses();  final  double  n  =  getSampleSize();  return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	292	292	1	add	double  N  =  getNumberOfSuccesses()  /  1;	  double    N    =    getNumberOfSuccesses()    -    1;    	compilable	  [FE]  AssertionError  testMoments	94	1
583	[BUG]  [BUGGY]  double  N  =  getNumberOfSuccesses()  /  1;  [FE]  AssertionError  testMoments  [CONTEXT]      protected  double  calculateNumericalVariance()  {      [BUGGY]  double  N  =  getNumberOfSuccesses()  /  1;  [BUGGY]      final  double  N  =  getPopulationSize();  final  double  m  =  getNumberOfSuccesses();  final  double  n  =  getSampleSize();  return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	292	292	1	replace	double  N  =  getNumberOfSuccesses()  /  1;	  double    N    =    getNumberOfSuccesses()    -    1;    	compilable	  [FE]  AssertionError  testMoments	94	1
591	[BUG]  [BUGGY]  final  double  k  =  getKind()  /  K;  [CE]  cannot  find  symbol  [CONTEXT]      public  int  getSupportLowerBound()  {      [BUGGY]  final  double  k  =  getKind()  /  K;  [BUGGY]      return  FastMath.max(0,        getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  }  [CLASS]  HypergeometricDistribution  [METHOD]  getSupportLowerBound  [RETURN_TYPE]  int  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	308	309	1	replace	final  double  k  =  getKind()  /  K;	  checkNumberOfSuccesses(n);    	non-compiled	[CE]  cannot  find  symbol	623	None
592	[BUG]  [BUGGY]  final  double  m  =  getKind()  /  K;  [CE]  cannot  find  symbol  [CONTEXT]      public  int  getSupportLowerBound()  {      [BUGGY]  final  double  m  =  getKind()  /  K;  [BUGGY]      return  FastMath.max(0,        getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  }  [CLASS]  HypergeometricDistribution  [METHOD]  getSupportLowerBound  [RETURN_TYPE]  int  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	308	309	1	replace	final  double  m  =  getKind()  /  K;	  checkNumberOfSuccesses(n);    	non-compiled	[CE]  cannot  find  symbol	623	None
593	[BUG]  [BUGGY]  final  double  k  =  getKind()  /  K  +  1;  [CE]  cannot  find  symbol  [CONTEXT]      public  int  getSupportLowerBound()  {      [BUGGY]  final  double  k  =  getKind()  /  K  +  1;  [BUGGY]      return  FastMath.max(0,        getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  }  [CLASS]  HypergeometricDistribution  [METHOD]  getSupportLowerBound  [RETURN_TYPE]  int  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	308	309	1	replace	final  double  k  =  getKind()  /  K  +  1;	  checkNumberOfSuccesses(n);    	non-compiled	[CE]  cannot  find  symbol	623	None
594	[BUG]  [BUGGY]  final  double  k  =  getKind()  /  K,  N;  [CE]  cannot  find  symbol  [CONTEXT]      public  int  getSupportLowerBound()  {      [BUGGY]  final  double  k  =  getKind()  /  K,  N;  [BUGGY]      return  FastMath.max(0,        getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  }  [CLASS]  HypergeometricDistribution  [METHOD]  getSupportLowerBound  [RETURN_TYPE]  int  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	308	309	1	replace	final  double  k  =  getKind()  /  K,  N;	  checkNumberOfSuccesses(n);    	non-compiled	[CE]  cannot  find  symbol	623	None
602	[BUG]  [BUGGY]  numericalVariance  =  calculatePopulationSize();  [CE]  cannot  find  symbol  [CONTEXT]      public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();      [BUGGY]  numericalVariance  =  calculatePopulationSize();  [BUGGY]      numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	281	281	1	replace	numericalVariance  =  calculatePopulationSize();	  numericalVariance    =    getPopulationSize();    	non-compiled	[CE]  cannot  find  symbol	1993	None
604	[BUG]  [BUGGY]  [FE]  AssertionError  testMoments  [CONTEXT]      public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();      [BUGGY]  numericalVariance  =  getPopulationSize()  -  1;  [BUGGY]      numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	281	281	1	add	numericalVariance  =  getPopulationSize()  -  1;	  numericalVariance    =    getPopulationSize();    	compilable	  [FE]  AssertionError  testMoments	1993	1
605	[BUG]  [BUGGY]  numericalVariance  =  getPopulationSize()  -  1;  [FE]  AssertionError  testMoments  [CONTEXT]      public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();      [BUGGY]  numericalVariance  =  getPopulationSize()  -  1;  [BUGGY]      numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	281	281	1	replace	numericalVariance  =  getPopulationSize()  -  1;	  numericalVariance    =    getPopulationSize();    	compilable	  [FE]  AssertionError  testMoments	1993	1
611	[BUG]  [BUGGY]  return  numericalVariance  /(numericalVariance  >  0)?  numericalVariance  :  null;  [CE]  bad  operand  types  for  binary  operator  '/'  [CONTEXT]      public  int  getSupportLowerBound()  {      [BUGGY]  return  numericalVariance  /(numericalVariance  >  0)?  numericalVariance  :  null;  [BUGGY]      getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  }  [CLASS]  HypergeometricDistribution  [METHOD]  getSupportLowerBound  [RETURN_TYPE]  int  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	308	309	1	replace	return  numericalVariance  /(numericalVariance  >  0)?  numericalVariance  :  null;	  return    FastMath.max(0,    getNumberOfSuccesses()    +    getSampleSize()    -    getPopulationSize());    double    numericalVariance    =    getNumberOfSuccesses()    -    1;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '/'	1862	None
612	[BUG]  [BUGGY]  return  numericalVariance  /(numbericalVariance  >  0)?  numericalVariance  :  null;  [CE]  cannot  find  symbol  numbericalVariance  [CONTEXT]      public  int  getSupportLowerBound()  {      [BUGGY]  return  numericalVariance  /(numbericalVariance  >  0)?  numericalVariance  :  null;  [BUGGY]      getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  }  [CLASS]  HypergeometricDistribution  [METHOD]  getSupportLowerBound  [RETURN_TYPE]  int  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	308	309	1	replace	return  numericalVariance  /(numbericalVariance  >  0)?  numericalVariance  :  null;	  return    FastMath.max(0,    getNumberOfSuccesses()    +    getSampleSize()    -    getPopulationSize());    double    numericalVariance    =    getNumberOfSuccesses()    -    1;    	non-compiled	[CE]  cannot  find  symbol  numbericalVariance	1862	None
613	[BUG]  [BUGGY]  return  numericalVariance  /(numberOfSuccesses  >  0)?  numericalVariance  :  null;  [CE]  bad  operand  types  for  binary  operator  '/'  [CONTEXT]      public  int  getSupportLowerBound()  {      [BUGGY]  return  numericalVariance  /(numberOfSuccesses  >  0)?  numericalVariance  :  null;  [BUGGY]      getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  }  [CLASS]  HypergeometricDistribution  [METHOD]  getSupportLowerBound  [RETURN_TYPE]  int  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	308	309	1	replace	return  numericalVariance  /(numberOfSuccesses  >  0)?  numericalVariance  :  null;	  return    FastMath.max(0,    getNumberOfSuccesses()    +    getSampleSize()    -    getPopulationSize());    double    numericalVariance    =    getNumberOfSuccesses()    -    1;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '/'	1862	None
621	[BUG]  [BUGGY]  int  populationSize  =  getPopulationSize();  if(numericalVarianceIsCalculated)  {  [CE]  illegal  start  of  expression  [CONTEXT]      public  int  getSupportLowerBound()  {      [BUGGY]  int  populationSize  =  getPopulationSize();  if(numericalVarianceIsCalculated)  {  [BUGGY]      return  FastMath.max(0,        getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  }  [CLASS]  HypergeometricDistribution  [METHOD]  getSupportLowerBound  [RETURN_TYPE]  int  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	308	309	1	replace	int  populationSize  =  getPopulationSize();  if(numericalVarianceIsCalculated)  {	          int    populationSize    =    getPopulationSize();    if(numbericalVariance!=    0)    {    if(numericalVarianceIsCalculated)    {    	non-compiled	[CE]  illegal  start  of  expression	2943	None
622	[BUG]  [BUGGY]  int  populationSize  =  getPopulationSize();  if(numberOfSuccesses!=  0)  {  [CE]  illegal  start  of  expression  [CONTEXT]      public  int  getSupportLowerBound()  {      [BUGGY]  int  populationSize  =  getPopulationSize();  if(numberOfSuccesses!=  0)  {  [BUGGY]      return  FastMath.max(0,        getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  }  [CLASS]  HypergeometricDistribution  [METHOD]  getSupportLowerBound  [RETURN_TYPE]  int  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	308	309	1	replace	int  populationSize  =  getPopulationSize();  if(numberOfSuccesses!=  0)  {	          int    populationSize    =    getPopulationSize();    if(numbericalVariance!=    0)    {    if(numericalVarianceIsCalculated)    {    	non-compiled	[CE]  illegal  start  of  expression	2943	None
623	[BUG]  [BUGGY]  int  populationSize  =  getPopulationSize();  if(numberOfSuccesses  ==  0)  {  [CE]  illegal  start  of  expression  [CONTEXT]      public  int  getSupportLowerBound()  {      [BUGGY]  int  populationSize  =  getPopulationSize();  if(numberOfSuccesses  ==  0)  {  [BUGGY]      return  FastMath.max(0,        getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  }  [CLASS]  HypergeometricDistribution  [METHOD]  getSupportLowerBound  [RETURN_TYPE]  int  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	308	309	1	replace	int  populationSize  =  getPopulationSize();  if(numberOfSuccesses  ==  0)  {	          int    populationSize    =    getPopulationSize();    if(numbericalVariance!=    0)    {    if(numericalVarianceIsCalculated)    {    	non-compiled	[CE]  illegal  start  of  expression	2943	None
624	[BUG]  [BUGGY]  int  populationSize  =  getPopulationSize();  if(numberOfSuccesses!=  0)  {  if(numericalVarianceIsCalculated)  {  [CE]  illegal  start  of  expression  [CONTEXT]      public  int  getSupportLowerBound()  {      [BUGGY]  int  populationSize  =  getPopulationSize();  if(numberOfSuccesses!=  0)  {  if(numericalVarianceIsCalculated)  {  [BUGGY]      return  FastMath.max(0,        getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  }  [CLASS]  HypergeometricDistribution  [METHOD]  getSupportLowerBound  [RETURN_TYPE]  int  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	308	309	1	replace	int  populationSize  =  getPopulationSize();  if(numberOfSuccesses!=  0)  {  if(numericalVarianceIsCalculated)  {	          int    populationSize    =    getPopulationSize();    if(numbericalVariance!=    0)    {    if(numericalVarianceIsCalculated)    {    	non-compiled	[CE]  illegal  start  of  expression	2943	None
632	[BUG]  [BUGGY]  final  double  k  =  getNumberOfSuccesses();  final  int  dx  =  getDimensionOfSuccesses();  [CE]  cannot  find  symbol  [CONTEXT]      protected  double  calculateNumericalVariance()  {      [BUGGY]  final  double  k  =  getNumberOfSuccesses();  final  int  dx  =  getDimensionOfSuccesses();  [BUGGY]      final  double  N  =  getPopulationSize();  final  double  m  =  getNumberOfSuccesses();  final  double  n  =  getSampleSize();  return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	292	292	1	replace	final  double  k  =  getNumberOfSuccesses();  final  int  dx  =  getDimensionOfSuccesses();	          final    int    k    =    getNumberOfSuccesses();    final    int    dx    =    getDimensionOfSuccesses();    	non-compiled	[CE]  cannot  find  symbol	2434	None
633	[BUG]  [BUGGY]  final  char  k  =  getNumberOfSuccesses();  final  char  dx  =  getDimensionOfSuccesses();  [CE]  possible  loss  of  precision  [CONTEXT]      protected  double  calculateNumericalVariance()  {      [BUGGY]  final  char  k  =  getNumberOfSuccesses();  final  char  dx  =  getDimensionOfSuccesses();  [BUGGY]      final  double  N  =  getPopulationSize();  final  double  m  =  getNumberOfSuccesses();  final  double  n  =  getSampleSize();  return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	292	292	1	replace	final  char  k  =  getNumberOfSuccesses();  final  char  dx  =  getDimensionOfSuccesses();	          final    int    k    =    getNumberOfSuccesses();    final    int    dx    =    getDimensionOfSuccesses();    	non-compiled	[CE]  possible  loss  of  precision	2434	None
634	[BUG]  [BUGGY]  final  double  k  =  getNumberOfSuccesses();  final  double  dx  =  getDimensionOfSuccesses();  [CE]  cannot  find  symbol  [CONTEXT]      protected  double  calculateNumericalVariance()  {      [BUGGY]  final  double  k  =  getNumberOfSuccesses();  final  double  dx  =  getDimensionOfSuccesses();  [BUGGY]      final  double  N  =  getPopulationSize();  final  double  m  =  getNumberOfSuccesses();  final  double  n  =  getSampleSize();  return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	292	292	1	replace	final  double  k  =  getNumberOfSuccesses();  final  double  dx  =  getDimensionOfSuccesses();	          final    int    k    =    getNumberOfSuccesses();    final    int    dx    =    getDimensionOfSuccesses();    	non-compiled	[CE]  cannot  find  symbol	2434	None
642	[BUG]  [BUGGY]  final  double  n  =  getNumberOfSuccesses()  *  2;  final  double  m  =  getNumberOfSuccesses()  *  3;  [CE]  variable  n  is  already  defined  in  method  calculateNumericalVariance()  [CONTEXT]      protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();      [BUGGY]  final  double  n  =  getNumberOfSuccesses()  *  2;  final  double  m  =  getNumberOfSuccesses()  *  3;  [BUGGY]      final  double  n  =  getSampleSize();  return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	293	293	1	replace	final  double  n  =  getNumberOfSuccesses()  *  2;  final  double  m  =  getNumberOfSuccesses()  *  3;	  final    double    m    =    getNumberOfSuccesses()    *    2;    final    double    n    =    getNumberOfSuccesses()    *    3;    	non-compiled	[CE]  variable  n  is  already  defined  in  method  calculateNumericalVariance()	1255	None
643	[BUG]  [BUGGY]  final  double  M  =  getNumberOfSuccesses()  *  2;  final  double  n  =  getNumberOfSuccesses()  *  3;  [CE]  variable  n  is  already  defined  in  method  calculateNumericalVariance()  [CONTEXT]      protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();      [BUGGY]  final  double  M  =  getNumberOfSuccesses()  *  2;  final  double  n  =  getNumberOfSuccesses()  *  3;  [BUGGY]      final  double  n  =  getSampleSize();  return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	293	293	1	replace	final  double  M  =  getNumberOfSuccesses()  *  2;  final  double  n  =  getNumberOfSuccesses()  *  3;	  final    double    m    =    getNumberOfSuccesses()    *    2;    final    double    n    =    getNumberOfSuccesses()    *    3;    	non-compiled	[CE]  variable  n  is  already  defined  in  method  calculateNumericalVariance()	1255	None
644	[BUG]  [BUGGY]  final  double  m  =  getNumberOfSuccesses()  +  2;  final  double  n  =  getNumberOfSuccesses()  *  3;  [CE]  variable  n  is  already  defined  in  method  calculateNumericalVariance()  [CONTEXT]      protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();      [BUGGY]  final  double  m  =  getNumberOfSuccesses()  +  2;  final  double  n  =  getNumberOfSuccesses()  *  3;  [BUGGY]      final  double  n  =  getSampleSize();  return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	293	293	1	replace	final  double  m  =  getNumberOfSuccesses()  +  2;  final  double  n  =  getNumberOfSuccesses()  *  3;	  final    double    m    =    getNumberOfSuccesses()    *    2;    final    double    n    =    getNumberOfSuccesses()    *    3;    	non-compiled	[CE]  variable  n  is  already  defined  in  method  calculateNumericalVariance()	1255	None
652	[BUG]  [BUGGY]  getNumberOfSuccesses()  *  Math.random()  /(populationSize  -  1)*  Math.random();  [CE]  not  a  statement  [CONTEXT]      public  double  getNumericalMean()  {      [BUGGY]  getNumberOfSuccesses()  *  Math.random()  /(populationSize  -  1)*  Math.random();  [BUGGY]      return  (double)  (getSampleSize()  *  getNumberOfSuccesses())  /  (double)  getPopulationSize();  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalMean  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	268	268	1	replace	getNumberOfSuccesses()  *  Math.random()  /(populationSize  -  1)*  Math.random();	  getNumberOfSuccesses()    *    Math.random()    /(numberOfSuccesses    -    1)*    Math.random();    	non-compiled	[CE]  not  a  statement	4424	None
653	[BUG]  [BUGGY]  getNumberOfSuccesses()  /  Math.random()  /(numberOfSuccesses  -  1)*  Math.random();  [CE]  not  a  statement  [CONTEXT]      public  double  getNumericalMean()  {      [BUGGY]  getNumberOfSuccesses()  /  Math.random()  /(numberOfSuccesses  -  1)*  Math.random();  [BUGGY]      return  (double)  (getSampleSize()  *  getNumberOfSuccesses())  /  (double)  getPopulationSize();  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalMean  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	268	268	1	replace	getNumberOfSuccesses()  /  Math.random()  /(numberOfSuccesses  -  1)*  Math.random();	  getNumberOfSuccesses()    *    Math.random()    /(numberOfSuccesses    -    1)*    Math.random();    	non-compiled	[CE]  not  a  statement	4424	None
662	[BUG]  [BUGGY]  final  int  dx  =  getDayOfMonth();  [CE]  cannot  find  symbol  [CONTEXT]      protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();  final  double  m  =  getNumberOfSuccesses();      [BUGGY]  final  int  dx  =  getDayOfMonth();  [BUGGY]      final  double  n  =  getSampleSize();  return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	294	294	1	replace	final  int  dx  =  getDayOfMonth();	  final    double    dx    =    getDayOfMonth();    	non-compiled	[CE]  cannot  find  symbol	1543	None
663	[BUG]  [BUGGY]  final  double  dx  =  getDayOfMonth().getNumberOfSuccesses();  [CE]  cannot  find  symbol  [CONTEXT]      protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();  final  double  m  =  getNumberOfSuccesses();      [BUGGY]  final  double  dx  =  getDayOfMonth().getNumberOfSuccesses();  [BUGGY]      final  double  n  =  getSampleSize();  return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	294	294	1	replace	final  double  dx  =  getDayOfMonth().getNumberOfSuccesses();	  final    double    dx    =    getDayOfMonth();    	non-compiled	[CE]  cannot  find  symbol	1543	None
664	[BUG]  [BUGGY]  final  double  dx  =  getDayOfMonth().doubleValue;  [CE]  cannot  find  symbol  [CONTEXT]      protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();  final  double  m  =  getNumberOfSuccesses();      [BUGGY]  final  double  dx  =  getDayOfMonth().doubleValue;  [BUGGY]      final  double  n  =  getSampleSize();  return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	294	294	1	replace	final  double  dx  =  getDayOfMonth().doubleValue;	  final    double    dx    =    getDayOfMonth();    	non-compiled	[CE]  cannot  find  symbol	1543	None
672	[BUG]  [BUGGY]  delt  [CE]  not  a  statement  [CONTEXT]      public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();      [BUGGY]  delt  [BUGGY]      numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	281	281	1	replace	delt	  if(!numericalVarianceIsCalculated)    {    if(!numericalVarianceIsCalculated)    {    numericalVariance    =    calculateNumberOfSuccesses();    delt    	non-compiled	[CE]  not  a  statement	1513	None
681	[BUG]  [BUGGY]  int  n  =  getPopulationSize();  int  n  =  getSampleSize();  [CE]  variable  n  is  already  defined  in  method  calculateNumericalVariance()  [CONTEXT]      protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();  final  double  m  =  getNumberOfSuccesses();      [BUGGY]  int  n  =  getPopulationSize();  int  n  =  getSampleSize();  [BUGGY]      return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	294	294	1	replace	int    n    =    getPopulationSize();    int  n  =  getSampleSize();	  	non-compiled	[CE]  variable  n  is  already  defined  in  method  calculateNumericalVariance()	1891	None
682	[BUG]  [BUGGY]  int  n  =  getPopulationSize();  final  double  n  =  getSampleSize();  [CE]  variable  n  is  already  defined  in  method  calculateNumericalVariance()  [CONTEXT]      protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();  final  double  m  =  getNumberOfSuccesses();      [BUGGY]  int  n  =  getPopulationSize();  final  double  n  =  getSampleSize();  [BUGGY]      return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	294	294	1	replace	int    n    =    getPopulationSize();    final  double  n  =  getSampleSize();	  	non-compiled	[CE]  variable  n  is  already  defined  in  method  calculateNumericalVariance()	1891	None
683	[BUG]  [BUGGY]  int  n  =  getPopulationSize();  int  N  =  getSampleSize();  [CE]  variable  N  is  already  defined  in  method  calculateNumericalVariance()  [CONTEXT]      protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();  final  double  m  =  getNumberOfSuccesses();      [BUGGY]  int  n  =  getPopulationSize();  int  N  =  getSampleSize();  [BUGGY]      return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	294	294	1	replace	int    n    =    getPopulationSize();    int  N  =  getSampleSize();	  	non-compiled	[CE]  variable  N  is  already  defined  in  method  calculateNumericalVariance()	1891	None
684	[BUG]  [BUGGY]  int  n  =  getPopulationSize();  final  int  n  =  getSampleSize();  [CE]  variable  n  is  already  defined  in  method  calculateNumericalVariance()  [CONTEXT]      protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();  final  double  m  =  getNumberOfSuccesses();      [BUGGY]  int  n  =  getPopulationSize();  final  int  n  =  getSampleSize();  [BUGGY]      return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	294	294	1	replace	int    n    =    getPopulationSize();    final  int  n  =  getSampleSize();	  	non-compiled	[CE]  variable  n  is  already  defined  in  method  calculateNumericalVariance()	1891	None
685	[BUG]  [BUGGY]  int  n  =  getPopulationSize();  double  n  =  getSampleSize();  [CE]  variable  n  is  already  defined  in  method  calculateNumericalVariance()  [CONTEXT]      protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();  final  double  m  =  getNumberOfSuccesses();      [BUGGY]  int  n  =  getPopulationSize();  double  n  =  getSampleSize();  [BUGGY]      return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	294	294	1	replace	int    n    =    getPopulationSize();    double  n  =  getSampleSize();	  	non-compiled	[CE]  variable  n  is  already  defined  in  method  calculateNumericalVariance()	1891	None
692	[BUG]  [BUGGY]  final  int  k  =  getNumeracyOfSuccesses();  final  int  dx  =  getNumberOfSuccesses();  [CE]  cannot  find  symbol  [CONTEXT]      protected  double  calculateNumericalVariance()  {      [BUGGY]  final  int  k  =  getNumeracyOfSuccesses();  final  int  dx  =  getNumberOfSuccesses();  [BUGGY]      final  double  N  =  getPopulationSize();  final  double  m  =  getNumberOfSuccesses();  final  double  n  =  getSampleSize();  return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	292	292	1	replace	final  int  k  =  getNumeracyOfSuccesses();  final  int  dx  =  getNumberOfSuccesses();	          final    int    k    =    getNumberOfSuccesses();    final    int    dx    =    getNumberOfSuccesses();    	non-compiled	[CE]  cannot  find  symbol	1902	None
693	[BUG]  [BUGGY]  final  int  k  =  getKnowNumberOfSuccesses();  final  int  dx  =  getDimensionOfSuccesses();  [CE]  cannot  find  symbol  [CONTEXT]      protected  double  calculateNumericalVariance()  {      [BUGGY]  final  int  k  =  getKnowNumberOfSuccesses();  final  int  dx  =  getDimensionOfSuccesses();  [BUGGY]      final  double  N  =  getPopulationSize();  final  double  m  =  getNumberOfSuccesses();  final  double  n  =  getSampleSize();  return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	292	292	1	replace	final  int  k  =  getKnowNumberOfSuccesses();  final  int  dx  =  getDimensionOfSuccesses();	          final    int    k    =    getNumberOfSuccesses();    final    int    dx    =    getNumberOfSuccesses();    	non-compiled	[CE]  cannot  find  symbol	1902	None
694	[BUG]  [BUGGY]  final  int  k  =  getKnowNumberOfSuccesses();  final  int  dx  =  getDateTimeOfSuccesses();  [CE]  cannot  find  symbol  [CONTEXT]      protected  double  calculateNumericalVariance()  {      [BUGGY]  final  int  k  =  getKnowNumberOfSuccesses();  final  int  dx  =  getDateTimeOfSuccesses();  [BUGGY]      final  double  N  =  getPopulationSize();  final  double  m  =  getNumberOfSuccesses();  final  double  n  =  getSampleSize();  return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	292	292	1	replace	final  int  k  =  getKnowNumberOfSuccesses();  final  int  dx  =  getDateTimeOfSuccesses();	          final    int    k    =    getNumberOfSuccesses();    final    int    dx    =    getNumberOfSuccesses();    	non-compiled	[CE]  cannot  find  symbol	1902	None
702	[BUG]  [BUGGY]  return  FastMath.max(0,  getPopulationSize()  +  getSampleSize()  -  getPopulationSize());  int  numberOfSuccesses  =  getNumberOfSuccesses()  /  2;  [CE]  unreachable  statement  [CONTEXT]      public  int  getSupportLowerBound()  {      [BUGGY]  return  FastMath.max(0,  getPopulationSize()  +  getSampleSize()  -  getPopulationSize());  int  numberOfSuccesses  =  getNumberOfSuccesses()  /  2;  [BUGGY]      getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  }  [CLASS]  HypergeometricDistribution  [METHOD]  getSupportLowerBound  [RETURN_TYPE]  int  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	308	309	1	replace	return  FastMath.max(0,  getPopulationSize()  +  getSampleSize()  -  getPopulationSize());  int  numberOfSuccesses  =  getNumberOfSuccesses()  /  2;	  return    FastMath.max(0,    getNumberOfSuccesses()    +    getSampleSize()    -    getPopulationSize());    int    numberOfSuccesses    =    getNumberOfSuccesses()    /    2;    	non-compiled	[CE]  unreachable  statement	3485	None
703	[BUG]  [BUGGY]  return  FastMath.max(1,  getNumberOfSuccesses()  +  getSampleSize()  -  getPopulationSize());  int  numberOfSuccesses  =  getNumberOfSuccesses()  /  2;  [CE]  unreachable  statement  [CONTEXT]      public  int  getSupportLowerBound()  {      [BUGGY]  return  FastMath.max(1,  getNumberOfSuccesses()  +  getSampleSize()  -  getPopulationSize());  int  numberOfSuccesses  =  getNumberOfSuccesses()  /  2;  [BUGGY]      getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  }  [CLASS]  HypergeometricDistribution  [METHOD]  getSupportLowerBound  [RETURN_TYPE]  int  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	308	309	1	replace	return  FastMath.max(1,  getNumberOfSuccesses()  +  getSampleSize()  -  getPopulationSize());  int  numberOfSuccesses  =  getNumberOfSuccesses()  /  2;	  return    FastMath.max(0,    getNumberOfSuccesses()    +    getSampleSize()    -    getPopulationSize());    int    numberOfSuccesses    =    getNumberOfSuccesses()    /    2;    	non-compiled	[CE]  unreachable  statement	3485	None
704	[BUG]  [BUGGY]  return  FastMath.max(0,  getSampleSize()  +  getPopulationSize());  int  numberOfSuccesses  =  getNumberOfSuccesses()  /  2;  [CE]  unreachable  statement  [CONTEXT]      public  int  getSupportLowerBound()  {      [BUGGY]  return  FastMath.max(0,  getSampleSize()  +  getPopulationSize());  int  numberOfSuccesses  =  getNumberOfSuccesses()  /  2;  [BUGGY]      getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  }  [CLASS]  HypergeometricDistribution  [METHOD]  getSupportLowerBound  [RETURN_TYPE]  int  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	308	309	1	replace	return  FastMath.max(0,  getSampleSize()  +  getPopulationSize());  int  numberOfSuccesses  =  getNumberOfSuccesses()  /  2;	  return    FastMath.max(0,    getNumberOfSuccesses()    +    getSampleSize()    -    getPopulationSize());    int    numberOfSuccesses    =    getNumberOfSuccesses()    /    2;    	non-compiled	[CE]  unreachable  statement	3485	None
712	[BUG]  [BUGGY]  final  double  m  =  getNumberOfSuccesses(N,  N).doubleValue();  [CE]  method  getNumberOfSuccesses  in  class  HypergeometricDistribution  cannot  be  applied  to  given  types;  [CONTEXT]      protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();      [BUGGY]  final  double  m  =  getNumberOfSuccesses(N,  N).doubleValue();  [BUGGY]      final  double  n  =  getSampleSize();  return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	293	293	1	replace	final  double  m  =  getNumberOfSuccesses(N,  N).doubleValue();	  final    double    m    =    getNumberOfSuccesses(N).doubleValue();    	non-compiled	[CE]  method  getNumberOfSuccesses  in  class  HypergeometricDistribution  cannot  be  applied  to  given  types;	3303	None
713	[BUG]  [BUGGY]  final  double  m  =  getNumberOfSuccesses(N,  populationSize).doubleValue();  [CE]  method  getNumberOfSuccesses  in  class  HypergeometricDistribution  cannot  be  applied  to  given  types;  [CONTEXT]      protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();      [BUGGY]  final  double  m  =  getNumberOfSuccesses(N,  populationSize).doubleValue();  [BUGGY]      final  double  n  =  getSampleSize();  return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	293	293	1	replace	final  double  m  =  getNumberOfSuccesses(N,  populationSize).doubleValue();	  final    double    m    =    getNumberOfSuccesses(N).doubleValue();    	non-compiled	[CE]  method  getNumberOfSuccesses  in  class  HypergeometricDistribution  cannot  be  applied  to  given  types;	3303	None
714	[BUG]  [BUGGY]  final  double  m  =  getNumberOfSuccesses(N,  M).doubleValue();  [CE]  cannot  find  symbol  M  [CONTEXT]      protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();      [BUGGY]  final  double  m  =  getNumberOfSuccesses(N,  M).doubleValue();  [BUGGY]      final  double  n  =  getSampleSize();  return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	293	293	1	replace	final  double  m  =  getNumberOfSuccesses(N,  M).doubleValue();	  final    double    m    =    getNumberOfSuccesses(N).doubleValue();    	non-compiled	[CE]  cannot  find  symbol  M	3303	None
722	[BUG]  [BUGGY]  double  numericalVariance  =  getNumberOfSuccesses()  -  1;  numericalVariance  =  Math.floor(numberOfSuccesses);  [CE]  illegal  start  of  type  [CONTEXT]      public  double  getNumericalVariance()  {      [BUGGY]  double  numericalVariance  =  getNumberOfSuccesses()  -  1;  numericalVariance  =  Math.floor(numberOfSuccesses);  [BUGGY]      if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	279	279	1	replace	double  numericalVariance  =  getNumberOfSuccesses()  -  1;  numericalVariance  =  Math.floor(numberOfSuccesses);	          double    numericalVariance    =    getNumberOfSuccesses();    numericalVariance    =    Math.floor(numberOfSuccesses);    	non-compiled	[CE]  illegal  start  of  type	6963	None
723	[BUG]  [BUGGY]  double  numericalVariance  =  getNumberOfSuccesses();  numericalVariance  =  Math.floor(numberOfSuccesses  -  1);  [CE]  illegal  start  of  type  [CONTEXT]      public  double  getNumericalVariance()  {      [BUGGY]  double  numericalVariance  =  getNumberOfSuccesses();  numericalVariance  =  Math.floor(numberOfSuccesses  -  1);  [BUGGY]      if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	279	279	1	replace	double  numericalVariance  =  getNumberOfSuccesses();  numericalVariance  =  Math.floor(numberOfSuccesses  -  1);	          double    numericalVariance    =    getNumberOfSuccesses();    numericalVariance    =    Math.floor(numberOfSuccesses);    	non-compiled	[CE]  illegal  start  of  type	6963	None
724	[BUG]  [BUGGY]  double  numericalVariance  =  getNumberOfSuccesses();  numericalVariance  =  Math.floor(null);  [CE]  illegal  start  of  type  [CONTEXT]      public  double  getNumericalVariance()  {      [BUGGY]  double  numericalVariance  =  getNumberOfSuccesses();  numericalVariance  =  Math.floor(null);  [BUGGY]      if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	279	279	1	replace	double  numericalVariance  =  getNumberOfSuccesses();  numericalVariance  =  Math.floor(null);	          double    numericalVariance    =    getNumberOfSuccesses();    numericalVariance    =    Math.floor(numberOfSuccesses);    	non-compiled	[CE]  illegal  start  of  type	6963	None
732	[BUG]  [BUGGY]  numericalVariance  =  getSummaryOfSuccesses()  +  1;  [CE]  cannot  find  symbol  [CONTEXT]      public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }      [BUGGY]  numericalVariance  =  getSummaryOfSuccesses()  +  1;  [BUGGY]      return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	283	283	1	replace	numericalVariance  =  getSummaryOfSuccesses()  +  1;	  numericalVariance    =    getNumberOfSuccesses()    +    1;    	non-compiled	[CE]  cannot  find  symbol	1074	None
733	[BUG]  [BUGGY]  numericalVariance  =  getSampleSize()  +  1;  [CE]  missing  return  statement  [CONTEXT]      public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }      [BUGGY]  numericalVariance  =  getSampleSize()  +  1;  [BUGGY]      return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	283	283	1	replace	numericalVariance  =  getSampleSize()  +  1;	  numericalVariance    =    getNumberOfSuccesses()    +    1;    	non-compiled	[CE]  missing  return  statement	1074	None
744	[BUG]  [BUGGY]  NumberOfSuccesses  =  getNumberOfSuccesses();  [CE]  cannot  find  symbol  NumberOfSuccesses  [CONTEXT]      protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();  final  double  m  =  getNumberOfSuccesses();  final  double  n  =  getSampleSize();      [BUGGY]  NumberOfSuccesses  =  getNumberOfSuccesses();  [BUGGY]      return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	295	295	1	replace	NumberOfSuccesses  =  getNumberOfSuccesses();	  numberOfSuccesses    =    getNumberOfSuccesses();    	non-compiled	[CE]  cannot  find  symbol  NumberOfSuccesses	6034	None
753	[BUG]  [BUGGY]  float  k  =  getNumberOfSuccesses();  if(k  >  0)  {  return  getNumberOfSuccesses();  figured  [CE]  not  a  statement  [CONTEXT]      public  double  getNumericalMean()  {      [BUGGY]  float  k  =  getNumberOfSuccesses();  if(k  >  0)  {  return  getNumberOfSuccesses();  figured  [BUGGY]      return  (double)  (getSampleSize()  *  getNumberOfSuccesses())  /  (double)  getPopulationSize();  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalMean  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	268	268	1	replace	float  k  =  getNumberOfSuccesses();  if(k  >  0)  {  return  getNumberOfSuccesses();  figured	  int    k    =    getNumberOfSuccesses();    if(k    >    0)    {    return    getNumberOfSuccesses();    figured    	non-compiled	[CE]  not  a  statement	3403	None
754	[BUG]  [BUGGY]  int  k  =  getNumberOfSuccesses();  if(k  >  1)  {  return  getNumberOfSuccesses();  figured  [CE]  not  a  statement  [CONTEXT]      public  double  getNumericalMean()  {      [BUGGY]  int  k  =  getNumberOfSuccesses();  if(k  >  1)  {  return  getNumberOfSuccesses();  figured  [BUGGY]      return  (double)  (getSampleSize()  *  getNumberOfSuccesses())  /  (double)  getPopulationSize();  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalMean  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	268	268	1	replace	int  k  =  getNumberOfSuccesses();  if(k  >  1)  {  return  getNumberOfSuccesses();  figured	  int    k    =    getNumberOfSuccesses();    if(k    >    0)    {    return    getNumberOfSuccesses();    figured    	non-compiled	[CE]  not  a  statement	3403	None
762	[BUG]  [BUGGY]  double  numericalVariance  =  getNumericalVariance();  if(numberOfSuccesses  >  1)  {  if(!numberOfSuccessesIsCalculated)  {  numericalVariance  =  getNumberOfSuccesses();  }  [CE]  cannot  find  symbol  numberOfSuccessesIsCalculated  [CONTEXT]      public  double  getNumericalVariance()  {      [BUGGY]  double  numericalVariance  =  getNumericalVariance();  if(numberOfSuccesses  >  1)  {  if(!numberOfSuccessesIsCalculated)  {  numericalVariance  =  getNumberOfSuccesses();  }  [BUGGY]      if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	279	279	1	replace	double  numericalVariance  =  getNumericalVariance();  if(numberOfSuccesses  >  1)  {  if(!numberOfSuccessesIsCalculated)  {  numericalVariance  =  getNumberOfSuccesses();  }	          double    numericalVariance    =    getNumberOfSuccesses();    if(numberOfSuccesses    >    1)    {    if(!numberOfSuccessesIsCalculated)    {    numericalVariance    =    getNumberOfSuccesses();    }    	non-compiled	[CE]  cannot  find  symbol  numberOfSuccessesIsCalculated	4144	None
764	[BUG]  [BUGGY]  double  numericalVariance  =  getNumberOfSuccesses();  if(numberOfSuccesses  >  1)  {  if(!numberOfSuccessesIsCalculated)  {  numericalVariance  =  getNumericalVariance();  }  [CE]  cannot  find  symbol  numberOfSuccessesIsCalculated  [CONTEXT]      public  double  getNumericalVariance()  {      [BUGGY]  double  numericalVariance  =  getNumberOfSuccesses();  if(numberOfSuccesses  >  1)  {  if(!numberOfSuccessesIsCalculated)  {  numericalVariance  =  getNumericalVariance();  }  [BUGGY]      if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	279	279	1	replace	double  numericalVariance  =  getNumberOfSuccesses();  if(numberOfSuccesses  >  1)  {  if(!numberOfSuccessesIsCalculated)  {  numericalVariance  =  getNumericalVariance();  }	          double    numericalVariance    =    getNumberOfSuccesses();    if(numberOfSuccesses    >    1)    {    if(!numberOfSuccessesIsCalculated)    {    numericalVariance    =    getNumberOfSuccesses();    }    	non-compiled	[CE]  cannot  find  symbol  numberOfSuccessesIsCalculated	4144	None
772	[BUG]  [BUGGY]  return  numericalVariance  /  numberOfSuccesses  /(numberOfSuccesses  -  1));  [CE]  ';'  expected  [CONTEXT]      public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }      [BUGGY]  return  numericalVariance  /  numberOfSuccesses  /(numberOfSuccesses  -  1));  [BUGGY]      }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	283	283	1	replace	return  numericalVariance  /  numberOfSuccesses  /(numberOfSuccesses  -  1));	  return    numericalVariance    *    numberOfSuccesses    /(numberOfSuccesses    -    1));    	non-compiled	[CE]  ';'  expected	344	None
773	[BUG]  [BUGGY]  return  numberOfSuccesses  *  numericalVariance  /(numberOfSuccesses  -  1));  [CE]  ';'  expected  [CONTEXT]      public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }      [BUGGY]  return  numberOfSuccesses  *  numericalVariance  /(numberOfSuccesses  -  1));  [BUGGY]      }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	283	283	1	replace	return  numberOfSuccesses  *  numericalVariance  /(numberOfSuccesses  -  1));	  return    numericalVariance    *    numberOfSuccesses    /(numberOfSuccesses    -    1));    	non-compiled	[CE]  ';'  expected	344	None
774	[BUG]  [BUGGY]  return  numericalVariance  /  numberOfSuccesses  *  numberOfSuccesses  /(numberOfSuccesses  -  1));  [CE]  ';'  expected  [CONTEXT]      public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }      [BUGGY]  return  numericalVariance  /  numberOfSuccesses  *  numberOfSuccesses  /(numberOfSuccesses  -  1));  [BUGGY]      }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	283	283	1	replace	return  numericalVariance  /  numberOfSuccesses  *  numberOfSuccesses  /(numberOfSuccesses  -  1));	  return    numericalVariance    *    numberOfSuccesses    /(numberOfSuccesses    -    1));    	non-compiled	[CE]  ';'  expected	344	None
781	[BUG]  [BUGGY]  numericalVariance  =  Math.max(numberOfSuccesses,  numberOfSuccesses);  if(numberOfSuccesses  >  0)  {  if(!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumberOfSuccesses();  [CE]  illegal  start  of  expression  [CONTEXT]      public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();      [BUGGY]  numericalVariance  =  Math.max(numberOfSuccesses,  numberOfSuccesses);  if(numberOfSuccesses  >  0)  {  if(!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumberOfSuccesses();  [BUGGY]      numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	281	281	1	replace	numericalVariance  =  Math.max(numberOfSuccesses,  numberOfSuccesses);  if(numberOfSuccesses  >  0)  {  if(!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumberOfSuccesses();	          numericalVariance    =    Math.max(numberOfSuccesses,    numberOfSuccesses);    if(numberOfSuccesses    >    0)    {    if(!numericalVarianceIsCalculated)    {    numericalVariance    =    calculateNumberOfSuccesses();    }    	non-compiled	[CE]  illegal  start  of  expression	85	None
784	[BUG]  [BUGGY]  numericalVariance  =  Math.max(numberOfSuccesses,  numberOfSuccesses);  if(numberOfSuccesses  >  0)  {  if(!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumberOfSuccesses  [CE]  ';'  expected  [CONTEXT]      public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();      [BUGGY]  numericalVariance  =  Math.max(numberOfSuccesses,  numberOfSuccesses);  if(numberOfSuccesses  >  0)  {  if(!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumberOfSuccesses  [BUGGY]      numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	281	281	1	replace	numericalVariance  =  Math.max(numberOfSuccesses,  numberOfSuccesses);  if(numberOfSuccesses  >  0)  {  if(!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumberOfSuccesses	          numericalVariance    =    Math.max(numberOfSuccesses,    numberOfSuccesses);    if(numberOfSuccesses    >    0)    {    if(!numericalVarianceIsCalculated)    {    numericalVariance    =    calculateNumberOfSuccesses();    }    	non-compiled	[CE]  ';'  expected	85	None
791	[BUG]  [BUGGY]  if(!numericalVarianceIsCalculated  &&  super.getNumericalVariance()  ||  super.getNumberOfSuccesses())  {  [CE]  illegal  start  of  expression  [CONTEXT]      public  int  getSupportLowerBound()  {      [BUGGY]  if(!numericalVarianceIsCalculated  &&  super.getNumericalVariance()  ||  super.getNumberOfSuccesses())  {  [BUGGY]      return  FastMath.max(0,        getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  }  [CLASS]  HypergeometricDistribution  [METHOD]  getSupportLowerBound  [RETURN_TYPE]  int  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	308	309	1	replace	if(!numericalVarianceIsCalculated  &&  super.getNumericalVariance()  ||  super.getNumberOfSuccesses())  {	  if(!numericalVarianceIsCalculated    &&!super.getNumericalVariance()    ||    super.getNumberOfSuccesses())    {    	non-compiled	[CE]  illegal  start  of  expression	1274	None
793	[BUG]  [BUGGY]  if(!numericalVarianceIsCalculated  &&!super.getNumericalVariance()  &&  super.getNumberOfSuccesses())  {  [CE]  illegal  start  of  expression  [CONTEXT]      public  int  getSupportLowerBound()  {      [BUGGY]  if(!numericalVarianceIsCalculated  &&!super.getNumericalVariance()  &&  super.getNumberOfSuccesses())  {  [BUGGY]      return  FastMath.max(0,        getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  }  [CLASS]  HypergeometricDistribution  [METHOD]  getSupportLowerBound  [RETURN_TYPE]  int  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	308	309	1	replace	if(!numericalVarianceIsCalculated  &&!super.getNumericalVariance()  &&  super.getNumberOfSuccesses())  {	  if(!numericalVarianceIsCalculated    &&!super.getNumericalVariance()    ||    super.getNumberOfSuccesses())    {    	non-compiled	[CE]  illegal  start  of  expression	1274	None
802	[BUG]  [BUGGY]  final  double  m  =  getNumberOfSuccesses()  +  getHeaderMean();  [CE]  cannot  find  symbol  [CONTEXT]      protected  double  calculateNumericalVariance()  {      [BUGGY]  final  double  m  =  getNumberOfSuccesses()  +  getHeaderMean();  [BUGGY]      final  double  N  =  getPopulationSize();  final  double  m  =  getNumberOfSuccesses();  final  double  n  =  getSampleSize();  return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	292	292	1	replace	final  double  m  =  getNumberOfSuccesses()  +  getHeaderMean();	  final    double    m    =    getNumberOfSuccesses()    *    getHeaderMean();    	non-compiled	[CE]  cannot  find  symbol	304	None
803	[BUG]  [BUGGY]  final  double  m  =  getNumberOfSuccesses()  *  getWrappedHeaderMean();  [CE]  cannot  find  symbol  [CONTEXT]      protected  double  calculateNumericalVariance()  {      [BUGGY]  final  double  m  =  getNumberOfSuccesses()  *  getWrappedHeaderMean();  [BUGGY]      final  double  N  =  getPopulationSize();  final  double  m  =  getNumberOfSuccesses();  final  double  n  =  getSampleSize();  return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	292	292	1	replace	final  double  m  =  getNumberOfSuccesses()  *  getWrappedHeaderMean();	  final    double    m    =    getNumberOfSuccesses()    *    getHeaderMean();    	non-compiled	[CE]  cannot  find  symbol	304	None
804	[BUG]  [BUGGY]  final  double  m  =  getNumberOfSuccesses()  *  getDecimalMean();  [CE]  cannot  find  symbol  [CONTEXT]      protected  double  calculateNumericalVariance()  {      [BUGGY]  final  double  m  =  getNumberOfSuccesses()  *  getDecimalMean();  [BUGGY]      final  double  N  =  getPopulationSize();  final  double  m  =  getNumberOfSuccesses();  final  double  n  =  getSampleSize();  return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	292	292	1	replace	final  double  m  =  getNumberOfSuccesses()  *  getDecimalMean();	  final    double    m    =    getNumberOfSuccesses()    *    getHeaderMean();    	non-compiled	[CE]  cannot  find  symbol	304	None
812	[BUG]  [BUGGY]  final  double  m  =  getDx();  [CE]  cannot  find  symbol  [CONTEXT]      protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();      [BUGGY]  final  double  m  =  getDx();  [BUGGY]      final  double  n  =  getSampleSize();  return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	293	293	1	replace	final  double  m  =  getDx();	  final    double    dx    =    getDx();    	non-compiled	[CE]  cannot  find  symbol	2601	None
813	[BUG]  [BUGGY]  final  double  dx  =  getDx(numberOfSuccesses);  [CE]  cannot  find  symbol  [CONTEXT]      protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();      [BUGGY]  final  double  dx  =  getDx(numberOfSuccesses);  [BUGGY]      final  double  n  =  getSampleSize();  return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	293	293	1	replace	final  double  dx  =  getDx(numberOfSuccesses);	  final    double    dx    =    getDx();    	non-compiled	[CE]  cannot  find  symbol	2601	None
814	[BUG]  [BUGGY]  final  int  dx  =  getDx();  [CE]  cannot  find  symbol  [CONTEXT]      protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();      [BUGGY]  final  int  dx  =  getDx();  [BUGGY]      final  double  n  =  getSampleSize();  return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	293	293	1	replace	final  int  dx  =  getDx();	  final    double    dx    =    getDx();    	non-compiled	[CE]  cannot  find  symbol	2601	None
821	[BUG]  [BUGGY]  double  n  =  getSampleSize();  [CE]  missing  return  statement  [CONTEXT]      public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }      [BUGGY]  double  n  =  getSampleSize();  [BUGGY]      return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	283	283	1	replace	double  n  =  getSampleSize();	  double    n    =    getPopulationSize();    	non-compiled	[CE]  missing  return  statement	2464	None
822	[BUG]  [BUGGY]  double  n  =  getNumberOfSuccesses();  [CE]  missing  return  statement  [CONTEXT]      public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }      [BUGGY]  double  n  =  getNumberOfSuccesses();  [BUGGY]      return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	283	283	1	replace	double  n  =  getNumberOfSuccesses();	  double    n    =    getPopulationSize();    	non-compiled	[CE]  missing  return  statement	2464	None
823	[BUG]  [BUGGY]  double  n  =  getSummarySize();  [CE]  cannot  find  symbol  [CONTEXT]      public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }      [BUGGY]  double  n  =  getSummarySize();  [BUGGY]      return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	283	283	1	replace	double  n  =  getSummarySize();	  double    n    =    getPopulationSize();    	non-compiled	[CE]  cannot  find  symbol	2464	None
824	[BUG]  [BUGGY]  int  n  =  getPopulationSize();  [CE]  missing  return  statement  [CONTEXT]      public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }      [BUGGY]  int  n  =  getPopulationSize();  [BUGGY]      return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	283	283	1	replace	int  n  =  getPopulationSize();	  double    n    =    getPopulationSize();    	non-compiled	[CE]  missing  return  statement	2464	None
831	[BUG]  [BUGGY]  numericalVarianceIsCalculated  =  numericalVariance.getStandardDeviation();  [CE]  illegal  start  of  type  [CONTEXT]      public  double  getNumericalVariance()  {      [BUGGY]  numericalVarianceIsCalculated  =  numericalVariance.getStandardDeviation();  [BUGGY]      if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	279	279	1	replace	numericalVarianceIsCalculated  =  numericalVariance.getStandardDeviation();	  double    numericalVariance    =    Math.floor(getSlope(),    getHeight());    	non-compiled	[CE]  illegal  start  of  type	2204	None
832	[BUG]  [BUGGY]  numericalVarianceIsCalculated  =  numberOfSuccesses.getStandardDeviation();  [CE]  illegal  start  of  type  [CONTEXT]      public  double  getNumericalVariance()  {      [BUGGY]  numericalVarianceIsCalculated  =  numberOfSuccesses.getStandardDeviation();  [BUGGY]      if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	279	279	1	replace	numericalVarianceIsCalculated  =  numberOfSuccesses.getStandardDeviation();	  double    numericalVariance    =    Math.floor(getSlope(),    getHeight());    	non-compiled	[CE]  illegal  start  of  type	2204	None
833	[BUG]  [BUGGY]  numericalVarianceIsCalculated  =  this.numericalVariance.getStandardDeviation();  [CE]  illegal  start  of  type  [CONTEXT]      public  double  getNumericalVariance()  {      [BUGGY]  numericalVarianceIsCalculated  =  this.numericalVariance.getStandardDeviation();  [BUGGY]      if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	279	279	1	replace	numericalVarianceIsCalculated  =  this.numericalVariance.getStandardDeviation();	  double    numericalVariance    =    Math.floor(getSlope(),    getHeight());    	non-compiled	[CE]  illegal  start  of  type	2204	None
834	[BUG]  [BUGGY]  numericalVarianceIsCalculated  =  numericalVariance.getStandardDeviation(),  numberOfSuccesses;  [CE]  ';'  expected  [CONTEXT]      public  double  getNumericalVariance()  {      [BUGGY]  numericalVarianceIsCalculated  =  numericalVariance.getStandardDeviation(),  numberOfSuccesses;  [BUGGY]      if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	279	279	1	replace	numericalVarianceIsCalculated  =  numericalVariance.getStandardDeviation(),  numberOfSuccesses;	  double    numericalVariance    =    Math.floor(getSlope(),    getHeight());    	non-compiled	[CE]  ';'  expected	2204	None
844	[BUG]  [BUGGY]  if(numericalVariance  >  0)  {  if(!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateStdNumericalVariance();  }  [CE]  illegal  start  of  expression  [CONTEXT]      public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();      [BUGGY]  if(numericalVariance  >  0)  {  if(!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateStdNumericalVariance();  }  [BUGGY]      }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	281	281	1	replace	if(numericalVariance  >  0)  {  if(!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateStdNumericalVariance();  }	  numericalVarianceIsCalculated    =(numericalVariance    >    0)?    numericalVarianceIsCalculated    :    true;    	non-compiled	[CE]  illegal  start  of  expression	1794	None
851	[BUG]  [BUGGY]  int  populationSize  =  getPopulationSize();  if(!numericalVarianceIsCalculated  &&  Math.abs(numberOfSuccesses)  <=  0)  {  [CE]  illegal  start  of  expression  [CONTEXT]      public  int  getSupportLowerBound()  {      [BUGGY]  int  populationSize  =  getPopulationSize();  if(!numericalVarianceIsCalculated  &&  Math.abs(numberOfSuccesses)  <=  0)  {  [BUGGY]      return  FastMath.max(0,        getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  }  [CLASS]  HypergeometricDistribution  [METHOD]  getSupportLowerBound  [RETURN_TYPE]  int  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	308	309	1	replace	int  populationSize  =  getPopulationSize();  if(!numericalVarianceIsCalculated  &&  Math.abs(numberOfSuccesses)  <=  0)  {	          int    populationSize    =    getNumberOfSuccesses();    if(!numericalVarianceIsCalculated    &&    Math.abs(numberOfSuccesses)    <=    0)    {    	non-compiled	[CE]  illegal  start  of  expression	1925	None
852	[BUG]  [BUGGY]  int  populationSize  =  getPopulationSize();  if(!numericalVarianceIsCalculated  &&  Math.abs(populationSize)  <=  0)  {  [CE]  illegal  start  of  expression  [CONTEXT]      public  int  getSupportLowerBound()  {      [BUGGY]  int  populationSize  =  getPopulationSize();  if(!numericalVarianceIsCalculated  &&  Math.abs(populationSize)  <=  0)  {  [BUGGY]      return  FastMath.max(0,        getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  }  [CLASS]  HypergeometricDistribution  [METHOD]  getSupportLowerBound  [RETURN_TYPE]  int  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	308	309	1	replace	int  populationSize  =  getPopulationSize();  if(!numericalVarianceIsCalculated  &&  Math.abs(populationSize)  <=  0)  {	          int    populationSize    =    getNumberOfSuccesses();    if(!numericalVarianceIsCalculated    &&    Math.abs(numberOfSuccesses)    <=    0)    {    	non-compiled	[CE]  illegal  start  of  expression	1925	None
853	[BUG]  [BUGGY]  int  populationSize  =  getPopulationSize();  if(!numericalVarianceIsCalculated  &&  Math.abs(numberOfSuccesses)  <  0)  {  [CE]  illegal  start  of  expression  [CONTEXT]      public  int  getSupportLowerBound()  {      [BUGGY]  int  populationSize  =  getPopulationSize();  if(!numericalVarianceIsCalculated  &&  Math.abs(numberOfSuccesses)  <  0)  {  [BUGGY]      return  FastMath.max(0,        getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  }  [CLASS]  HypergeometricDistribution  [METHOD]  getSupportLowerBound  [RETURN_TYPE]  int  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	308	309	1	replace	int  populationSize  =  getPopulationSize();  if(!numericalVarianceIsCalculated  &&  Math.abs(numberOfSuccesses)  <  0)  {	          int    populationSize    =    getNumberOfSuccesses();    if(!numericalVarianceIsCalculated    &&    Math.abs(numberOfSuccesses)    <=    0)    {    	non-compiled	[CE]  illegal  start  of  expression	1925	None
854	[BUG]  [BUGGY]  int  populationSize  =  getNumberOfSuccesses();  if(!numericalVarianceIsCalculated  &&  Math.abs(populationSize)  <=  0)  {  [CE]  illegal  start  of  expression  [CONTEXT]      public  int  getSupportLowerBound()  {      [BUGGY]  int  populationSize  =  getNumberOfSuccesses();  if(!numericalVarianceIsCalculated  &&  Math.abs(populationSize)  <=  0)  {  [BUGGY]      return  FastMath.max(0,        getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  }  [CLASS]  HypergeometricDistribution  [METHOD]  getSupportLowerBound  [RETURN_TYPE]  int  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	308	309	1	replace	int  populationSize  =  getNumberOfSuccesses();  if(!numericalVarianceIsCalculated  &&  Math.abs(populationSize)  <=  0)  {	          int    populationSize    =    getNumberOfSuccesses();    if(!numericalVarianceIsCalculated    &&    Math.abs(numberOfSuccesses)    <=    0)    {    	non-compiled	[CE]  illegal  start  of  expression	1925	None
861	[BUG]  [BUGGY]  if(!numericalVarianceIsCalculated  &&  Math.abs(populationSize)>  0)  {  [CE]  illegal  start  of  expression  [CONTEXT]      public  int  getSupportLowerBound()  {      [BUGGY]  if(!numericalVarianceIsCalculated  &&  Math.abs(populationSize)>  0)  {  [BUGGY]      return  FastMath.max(0,        getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  }  [CLASS]  HypergeometricDistribution  [METHOD]  getSupportLowerBound  [RETURN_TYPE]  int  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	308	309	1	replace	if(!numericalVarianceIsCalculated  &&  Math.abs(populationSize)>  0)  {	  if(!numericalVarianceIsCalculated    &&    Math.abs(numberOfSuccesses)>    0)    {    	non-compiled	[CE]  illegal  start  of  expression	771	None
863	[BUG]  [BUGGY]  if(!numericalVarianceIsCalculated  &&  Math.abs(m)>  0)  {  [CE]  illegal  start  of  expression  [CONTEXT]      public  int  getSupportLowerBound()  {      [BUGGY]  if(!numericalVarianceIsCalculated  &&  Math.abs(m)>  0)  {  [BUGGY]      return  FastMath.max(0,        getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  }  [CLASS]  HypergeometricDistribution  [METHOD]  getSupportLowerBound  [RETURN_TYPE]  int  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	308	309	1	replace	if(!numericalVarianceIsCalculated  &&  Math.abs(m)>  0)  {	  if(!numericalVarianceIsCalculated    &&    Math.abs(numberOfSuccesses)>    0)    {    	non-compiled	[CE]  illegal  start  of  expression	771	None
873	[BUG]  [BUGGY]  int  k  =  getSampleSize();  if(k  >  0)  {  return  getNumberOfSuccesses()  *  getPopulationSize();  }  [CE]  missing  return  statement  [CONTEXT]      public  double  getNumericalMean()  {      [BUGGY]  int  k  =  getSampleSize();  if(k  >  0)  {  return  getNumberOfSuccesses()  *  getPopulationSize();  }  [BUGGY]      return  (double)  (getSampleSize()  *  getNumberOfSuccesses())  /  (double)  getPopulationSize();  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalMean  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	268	268	1	replace	int  k  =  getSampleSize();  if(k  >  0)  {  return  getNumberOfSuccesses()  *  getPopulationSize();  }	  int    k    =    getNumberOfSuccesses();    if(k    >    0)    {    return    getNumberOfSuccesses()    *    getPopulationSize();    }    	non-compiled	[CE]  missing  return  statement	4231	None
874	[BUG]  [BUGGY]  int  k  =  getPopulationSize();  if(k  >  0)  {  return  getNumberOfSuccesses()  *  getNumberOfSuccesses();  }  [CE]  missing  return  statement  [CONTEXT]      public  double  getNumericalMean()  {      [BUGGY]  int  k  =  getPopulationSize();  if(k  >  0)  {  return  getNumberOfSuccesses()  *  getNumberOfSuccesses();  }  [BUGGY]      return  (double)  (getSampleSize()  *  getNumberOfSuccesses())  /  (double)  getPopulationSize();  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalMean  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	268	268	1	replace	int  k  =  getPopulationSize();  if(k  >  0)  {  return  getNumberOfSuccesses()  *  getNumberOfSuccesses();  }	  int    k    =    getNumberOfSuccesses();    if(k    >    0)    {    return    getNumberOfSuccesses()    *    getPopulationSize();    }    	non-compiled	[CE]  missing  return  statement	4231	None
881	[BUG]  [BUGGY]  getNumberOfSuccesses()  /(double)getPopulationSize();  [CE]  not  a  statement  [CONTEXT]      protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();      [BUGGY]  getNumberOfSuccesses()  /(double)getPopulationSize();  [BUGGY]      final  double  n  =  getSampleSize();  return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	293	293	1	replace	getNumberOfSuccesses()  /(double)getPopulationSize();	  final    double    dx    =    getDomainSize();    	non-compiled	[CE]  not  a  statement	1304	None
882	[BUG]  [BUGGY]  getNumberOfSuccesses()  /(double)getSampleSize();  [CE]  not  a  statement  [CONTEXT]      protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();      [BUGGY]  getNumberOfSuccesses()  /(double)getSampleSize();  [BUGGY]      final  double  n  =  getSampleSize();  return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	293	293	1	replace	getNumberOfSuccesses()  /(double)getSampleSize();	  final    double    dx    =    getDomainSize();    	non-compiled	[CE]  not  a  statement	1304	None
883	[BUG]  [BUGGY]  getNumberOfSuccesses()  *(double)getSampleSize();  [CE]  not  a  statement  [CONTEXT]      protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();      [BUGGY]  getNumberOfSuccesses()  *(double)getSampleSize();  [BUGGY]      final  double  n  =  getSampleSize();  return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	293	293	1	replace	getNumberOfSuccesses()  *(double)getSampleSize();	  final    double    dx    =    getDomainSize();    	non-compiled	[CE]  not  a  statement	1304	None
884	[BUG]  [BUGGY]  getSampleSize()  /(double)getNumberOfSuccesses();  [CE]  not  a  statement  [CONTEXT]      protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();      [BUGGY]  getSampleSize()  /(double)getNumberOfSuccesses();  [BUGGY]      final  double  n  =  getSampleSize();  return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	293	293	1	replace	getSampleSize()  /(double)getNumberOfSuccesses();	  final    double    dx    =    getDomainSize();    	non-compiled	[CE]  not  a  statement	1304	None
892	[BUG]  [BUGGY]  final  int  k  =  getNumberOfStuesses();  [CE]  cannot  find  symbol  [CONTEXT]      protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();      [BUGGY]  final  int  k  =  getNumberOfStuesses();  [BUGGY]      final  double  m  =  getNumberOfSuccesses();  final  double  n  =  getSampleSize();  return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	293	293	1	replace	final  int  k  =  getNumberOfStuesses();	  final    double    k    =    getNumberOfStuesses();    	non-compiled	[CE]  cannot  find  symbol	4584	None
893	[BUG]  [BUGGY]  final  double  dx  =  getNumberOfStuesses();  [CE]  cannot  find  symbol  [CONTEXT]      protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();      [BUGGY]  final  double  dx  =  getNumberOfStuesses();  [BUGGY]      final  double  m  =  getNumberOfSuccesses();  final  double  n  =  getSampleSize();  return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	293	293	1	replace	final  double  dx  =  getNumberOfStuesses();	  final    double    k    =    getNumberOfStuesses();    	non-compiled	[CE]  cannot  find  symbol	4584	None
894	[BUG]  [BUGGY]  final  double  n  =  getNumberOfStuesses();  [CE]  cannot  find  symbol  [CONTEXT]      protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();      [BUGGY]  final  double  n  =  getNumberOfStuesses();  [BUGGY]      final  double  m  =  getNumberOfSuccesses();  final  double  n  =  getSampleSize();  return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	293	293	1	replace	final  double  n  =  getNumberOfStuesses();	  final    double    k    =    getNumberOfStuesses();    	non-compiled	[CE]  cannot  find  symbol	4584	None
902	[BUG]  [BUGGY]  final  double  n  =  getKnowledge().doubleValue;  [CE]  variable  n  is  already  defined  in  method  calculateNumericalVariance()  [CONTEXT]      protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();  final  double  m  =  getNumberOfSuccesses();  final  double  n  =  getSampleSize();      [BUGGY]  final  double  n  =  getKnowledge().doubleValue;  [BUGGY]      return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	295	295	1	replace	final  double  n  =  getKnowledge().doubleValue;	  final    double    k    =    getKnowledge().doubleValue;    	non-compiled	[CE]  variable  n  is  already  defined  in  method  calculateNumericalVariance()	4343	None
903	[BUG]  [BUGGY]  final  double  dx  =  getKnowledge().doubleValue;  [CE]  cannot  find  symbol  [CONTEXT]      protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();  final  double  m  =  getNumberOfSuccesses();  final  double  n  =  getSampleSize();      [BUGGY]  final  double  dx  =  getKnowledge().doubleValue;  [BUGGY]      return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	295	295	1	replace	final  double  dx  =  getKnowledge().doubleValue;	  final    double    k    =    getKnowledge().doubleValue;    	non-compiled	[CE]  cannot  find  symbol	4343	None
904	[BUG]  [BUGGY]  final  double  m  =  getKnowledge().doubleValue;  [CE]  variable  m  is  already  defined  in  method  calculateNumericalVariance()  [CONTEXT]      protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();  final  double  m  =  getNumberOfSuccesses();  final  double  n  =  getSampleSize();      [BUGGY]  final  double  m  =  getKnowledge().doubleValue;  [BUGGY]      return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	295	295	1	replace	final  double  m  =  getKnowledge().doubleValue;	  final    double    k    =    getKnowledge().doubleValue;    	non-compiled	[CE]  variable  m  is  already  defined  in  method  calculateNumericalVariance()	4343	None
911	[BUG]  [BUGGY]  return  numberOfSuccesses  *  numericalVariance;  int  numberOfSuccesses  =  getNumberOfSuccesses();  [CE]  unreachable  statement  [CONTEXT]      public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }      [BUGGY]  return  numberOfSuccesses  *  numericalVariance;  int  numberOfSuccesses  =  getNumberOfSuccesses();  [BUGGY]      }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	283	283	1	replace	return  numberOfSuccesses  *  numericalVariance;  int  numberOfSuccesses  =  getNumberOfSuccesses();	  return    numericalVariance    *    numberOfSuccesses;    int    numberOfSuccesses    =    getNumberOfSuccesses();    	non-compiled	[CE]  unreachable  statement	702	None
913	[BUG]  [BUGGY]  return  numericalVariance  /  numberOfSuccesses;  int  numberOfSuccesses  =  getNumberOfSuccesses();  [CE]  unreachable  statement  [CONTEXT]      public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }      [BUGGY]  return  numericalVariance  /  numberOfSuccesses;  int  numberOfSuccesses  =  getNumberOfSuccesses();  [BUGGY]      }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	283	283	1	replace	return  numericalVariance  /  numberOfSuccesses;  int  numberOfSuccesses  =  getNumberOfSuccesses();	  return    numericalVariance    *    numberOfSuccesses;    int    numberOfSuccesses    =    getNumberOfSuccesses();    	non-compiled	[CE]  unreachable  statement	702	None
914	[BUG]  [BUGGY]  return  numberVariance  *  numberOfSuccesses;  int  numberOfSuccesses  =  getNumberOfSuccesses();  [CE]  cannot  find  symbol  numberVariance  [CONTEXT]      public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }      [BUGGY]  return  numberVariance  *  numberOfSuccesses;  int  numberOfSuccesses  =  getNumberOfSuccesses();  [BUGGY]      }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	283	283	1	replace	return  numberVariance  *  numberOfSuccesses;  int  numberOfSuccesses  =  getNumberOfSuccesses();	  return    numericalVariance    *    numberOfSuccesses;    int    numberOfSuccesses    =    getNumberOfSuccesses();    	non-compiled	[CE]  cannot  find  symbol  numberVariance	702	None
921	[BUG]  [BUGGY]  final  double  n  =  getSampleSize(m,  populationSize);  [CE]  method  getSampleSize  in  class  HypergeometricDistribution  cannot  be  applied  to  given  types;  [CONTEXT]      protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();  final  double  m  =  getNumberOfSuccesses();      [BUGGY]  final  double  n  =  getSampleSize(m,  populationSize);  [BUGGY]      return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	294	294	1	replace	final  double  n  =  getSampleSize(m,  populationSize);	  final    double    n    =    getSampleSize(populationSize);    	non-compiled	[CE]  method  getSampleSize  in  class  HypergeometricDistribution  cannot  be  applied  to  given  types;	3384	None
922	[BUG]  [BUGGY]  final  double  n  =  getSampleSize(populationSize,  m);  [CE]  method  getSampleSize  in  class  HypergeometricDistribution  cannot  be  applied  to  given  types;  [CONTEXT]      protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();  final  double  m  =  getNumberOfSuccesses();      [BUGGY]  final  double  n  =  getSampleSize(populationSize,  m);  [BUGGY]      return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	294	294	1	replace	final  double  n  =  getSampleSize(populationSize,  m);	  final    double    n    =    getSampleSize(populationSize);    	non-compiled	[CE]  method  getSampleSize  in  class  HypergeometricDistribution  cannot  be  applied  to  given  types;	3384	None
923	[BUG]  [BUGGY]  final  double  n  =  getSampleSize(populationSize,  populationSize);  [CE]  method  getSampleSize  in  class  HypergeometricDistribution  cannot  be  applied  to  given  types;  [CONTEXT]      protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();  final  double  m  =  getNumberOfSuccesses();      [BUGGY]  final  double  n  =  getSampleSize(populationSize,  populationSize);  [BUGGY]      return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	294	294	1	replace	final  double  n  =  getSampleSize(populationSize,  populationSize);	  final    double    n    =    getSampleSize(populationSize);    	non-compiled	[CE]  method  getSampleSize  in  class  HypergeometricDistribution  cannot  be  applied  to  given  types;	3384	None
931	[BUG]  [BUGGY]  if(!numericalVarianceIsCalculated  &&  getNumberOfSuccesses()  >  0)  {  if(getNumberOfSuccesses  >  0)  {  if(getNumberOfSuccesses()  >  0)  {  return  calculateN  [CE]  ';'  expected  [CONTEXT]      public  double  getNumericalVariance()  {      [BUGGY]  if(!numericalVarianceIsCalculated  &&  getNumberOfSuccesses()  >  0)  {  if(getNumberOfSuccesses  >  0)  {  if(getNumberOfSuccesses()  >  0)  {  return  calculateN  [BUGGY]      numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	279	279	1	replace	if(!numericalVarianceIsCalculated  &&  getNumberOfSuccesses()  >  0)  {  if(getNumberOfSuccesses  >  0)  {  if(getNumberOfSuccesses()  >  0)  {  return  calculateN	  if(!numericalVarianceIsCalculated    &&    getNumberOfSuccesses()    >    0)    {    if(numberOfSuccesses    >    0)    {    if(getNumberOfSuccesses()    >    0)    {    return    calculateNumberOfSuccesses();    }    	non-compiled	[CE]  ';'  expected	6122	None
932	[BUG]  [BUGGY]  if(!numericalVarianceIsCalculated  &&  getNumberOfSuccesses()  >  0)  {  if(numberOfSuccesses  >  0)  {  if(getNumberOfSuccesses()  >  0)  {  return  calculateNumberOf  [CE]  ';'  expected  [CONTEXT]      public  double  getNumericalVariance()  {      [BUGGY]  if(!numericalVarianceIsCalculated  &&  getNumberOfSuccesses()  >  0)  {  if(numberOfSuccesses  >  0)  {  if(getNumberOfSuccesses()  >  0)  {  return  calculateNumberOf  [BUGGY]      numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	279	279	1	replace	if(!numericalVarianceIsCalculated  &&  getNumberOfSuccesses()  >  0)  {  if(numberOfSuccesses  >  0)  {  if(getNumberOfSuccesses()  >  0)  {  return  calculateNumberOf	  if(!numericalVarianceIsCalculated    &&    getNumberOfSuccesses()    >    0)    {    if(numberOfSuccesses    >    0)    {    if(getNumberOfSuccesses()    >    0)    {    return    calculateNumberOfSuccesses();    }    	non-compiled	[CE]  ';'  expected	6122	None
934	[BUG]  [BUGGY]  if(!numericalVarianceIsCalculated  &&  getNumberOfSuccesses()  >  0)  {  if(getNumberOfSuccesses  >  0)  {  if(getNumberOfSuccesses()  >  0)  {  return  calculate  [CE]  ';'  expected  [CONTEXT]      public  double  getNumericalVariance()  {      [BUGGY]  if(!numericalVarianceIsCalculated  &&  getNumberOfSuccesses()  >  0)  {  if(getNumberOfSuccesses  >  0)  {  if(getNumberOfSuccesses()  >  0)  {  return  calculate  [BUGGY]      numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	279	279	1	replace	if(!numericalVarianceIsCalculated  &&  getNumberOfSuccesses()  >  0)  {  if(getNumberOfSuccesses  >  0)  {  if(getNumberOfSuccesses()  >  0)  {  return  calculate	  if(!numericalVarianceIsCalculated    &&    getNumberOfSuccesses()    >    0)    {    if(numberOfSuccesses    >    0)    {    if(getNumberOfSuccesses()    >    0)    {    return    calculateNumberOfSuccesses();    }    	non-compiled	[CE]  ';'  expected	6122	None
942	[BUG]  [BUGGY]  return  numberOfSuccesses  /(numericalVarianceIsCalculated)-  1;  [CE]  bad  operand  types  for  binary  operator  '/'  [CONTEXT]      public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }      [BUGGY]  return  numberOfSuccesses  /(numericalVarianceIsCalculated)-  1;  [BUGGY]      }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	283	283	1	replace	return  numberOfSuccesses  /(numericalVarianceIsCalculated)-  1;	  return    numericalVariance    /(numericalVarianceIsCalculated)-    1;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '/'	3684	None
943	[BUG]  [BUGGY]  return  numericalVarianceIsCalculated  /(numericalVarianceIsCalculated)-  1;  [CE]  bad  operand  types  for  binary  operator  '/'  [CONTEXT]      public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }      [BUGGY]  return  numericalVarianceIsCalculated  /(numericalVarianceIsCalculated)-  1;  [BUGGY]      }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	283	283	1	replace	return  numericalVarianceIsCalculated  /(numericalVarianceIsCalculated)-  1;	  return    numericalVariance    /(numericalVarianceIsCalculated)-    1;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '/'	3684	None
951	[BUG]  [BUGGY]  [FE]  AssertionError  testMath1021  [CONTEXT]      public  int  getSupportLowerBound()  {      [BUGGY]          int    numberOfSuccesses    =    getNumberOfSuccesses();    int  populationSize  =  getPopulationSize();  int  n  =  getNumberOfSuccesses();  [BUGGY]      return  FastMath.max(0,        getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  }  [CLASS]  HypergeometricDistribution  [METHOD]  getSupportLowerBound  [RETURN_TYPE]  int  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	308	309	1	add	                int        numberOfSuccesses        =        getNumberOfSuccesses();        int    populationSize    =    getPopulationSize();    int  n  =  getNumberOfSuccesses();	  	compilable	  [FE]  AssertionError  testMath1021	981	1
952	[BUG]  [BUGGY]          int    numberOfSuccesses    =    getNumberOfSuccesses();    int  populationSize  =  getPopulationSize();  int  n  =  getNumberOfSuccesses();  [FE]  AssertionError  testMath1021  [CONTEXT]      public  int  getSupportLowerBound()  {      [BUGGY]          int    numberOfSuccesses    =    getNumberOfSuccesses();    int  populationSize  =  getPopulationSize();  int  n  =  getNumberOfSuccesses();  [BUGGY]      return  FastMath.max(0,        getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  }  [CLASS]  HypergeometricDistribution  [METHOD]  getSupportLowerBound  [RETURN_TYPE]  int  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	308	309	1	replace	                int        numberOfSuccesses        =        getNumberOfSuccesses();        int    populationSize    =    getPopulationSize();    int  n  =  getNumberOfSuccesses();	  	compilable	  [FE]  AssertionError  testMath1021	981	1
952	[BUG]  [BUGGY]  [FE]  AssertionError  testMath1021  [CONTEXT]      public  int  getSupportLowerBound()  {      [BUGGY]          int    numberOfSuccesses    =    getNumberOfSuccesses();    int  populationSize  =  getPopulationSize();  int  m  =  getNumberOfSuccesses();  [BUGGY]      return  FastMath.max(0,        getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  }  [CLASS]  HypergeometricDistribution  [METHOD]  getSupportLowerBound  [RETURN_TYPE]  int  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	308	309	1	add	                int        numberOfSuccesses        =        getNumberOfSuccesses();        int    populationSize    =    getPopulationSize();    int  m  =  getNumberOfSuccesses();	  	compilable	  [FE]  AssertionError  testMath1021	981	1
953	[BUG]  [BUGGY]          int    numberOfSuccesses    =    getNumberOfSuccesses();    int  populationSize  =  getPopulationSize();  int  m  =  getNumberOfSuccesses();  [FE]  AssertionError  testMath1021  [CONTEXT]      public  int  getSupportLowerBound()  {      [BUGGY]          int    numberOfSuccesses    =    getNumberOfSuccesses();    int  populationSize  =  getPopulationSize();  int  m  =  getNumberOfSuccesses();  [BUGGY]      return  FastMath.max(0,        getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  }  [CLASS]  HypergeometricDistribution  [METHOD]  getSupportLowerBound  [RETURN_TYPE]  int  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	308	309	1	replace	                int        numberOfSuccesses        =        getNumberOfSuccesses();        int    populationSize    =    getPopulationSize();    int  m  =  getNumberOfSuccesses();	  	compilable	  [FE]  AssertionError  testMath1021	981	1
953	[BUG]  [BUGGY]  [FE]  AssertionError  testMath1021  [CONTEXT]      public  int  getSupportLowerBound()  {      [BUGGY]          int    numberOfSuccesses    =    getNumberOfSuccesses();    int  populationSize  =  getPopulationSize();  int  sampleSize  =  getNumberOfSuccesses();  [BUGGY]      return  FastMath.max(0,        getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  }  [CLASS]  HypergeometricDistribution  [METHOD]  getSupportLowerBound  [RETURN_TYPE]  int  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	308	309	1	add	                int        numberOfSuccesses        =        getNumberOfSuccesses();        int    populationSize    =    getPopulationSize();    int  sampleSize  =  getNumberOfSuccesses();	  	compilable	  [FE]  AssertionError  testMath1021	981	1
954	[BUG]  [BUGGY]          int    numberOfSuccesses    =    getNumberOfSuccesses();    int  populationSize  =  getPopulationSize();  int  sampleSize  =  getNumberOfSuccesses();  [FE]  AssertionError  testMath1021  [CONTEXT]      public  int  getSupportLowerBound()  {      [BUGGY]          int    numberOfSuccesses    =    getNumberOfSuccesses();    int  populationSize  =  getPopulationSize();  int  sampleSize  =  getNumberOfSuccesses();  [BUGGY]      return  FastMath.max(0,        getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  }  [CLASS]  HypergeometricDistribution  [METHOD]  getSupportLowerBound  [RETURN_TYPE]  int  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	308	309	1	replace	                int        numberOfSuccesses        =        getNumberOfSuccesses();        int    populationSize    =    getPopulationSize();    int  sampleSize  =  getNumberOfSuccesses();	  	compilable	  [FE]  AssertionError  testMath1021	981	1
954	[BUG]  [BUGGY]  [FE]  AssertionError  testMath1021  [CONTEXT]      public  int  getSupportLowerBound()  {      [BUGGY]          int    numberOfSuccesses    =    getNumberOfSuccesses();    int  populationSize  =  getPopulationSize();  int  sampleSize  =  getSampleSize();  [BUGGY]      return  FastMath.max(0,        getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  }  [CLASS]  HypergeometricDistribution  [METHOD]  getSupportLowerBound  [RETURN_TYPE]  int  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	308	309	1	add	                int        numberOfSuccesses        =        getNumberOfSuccesses();        int    populationSize    =    getPopulationSize();    int  sampleSize  =  getSampleSize();	  	compilable	  [FE]  AssertionError  testMath1021	981	1
955	[BUG]  [BUGGY]          int    numberOfSuccesses    =    getNumberOfSuccesses();    int  populationSize  =  getPopulationSize();  int  sampleSize  =  getSampleSize();  [FE]  AssertionError  testMath1021  [CONTEXT]      public  int  getSupportLowerBound()  {      [BUGGY]          int    numberOfSuccesses    =    getNumberOfSuccesses();    int  populationSize  =  getPopulationSize();  int  sampleSize  =  getSampleSize();  [BUGGY]      return  FastMath.max(0,        getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  }  [CLASS]  HypergeometricDistribution  [METHOD]  getSupportLowerBound  [RETURN_TYPE]  int  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	308	309	1	replace	                int        numberOfSuccesses        =        getNumberOfSuccesses();        int    populationSize    =    getPopulationSize();    int  sampleSize  =  getSampleSize();	  	compilable	  [FE]  AssertionError  testMath1021	981	1
955	[BUG]  [BUGGY]          int    numberOfSuccesses    =    getNumberOfSuccesses();    int  populationSize  =  getPopulationSize();  int  dx  =  getDx();  [CE]  cannot  find  symbol  [CONTEXT]      public  int  getSupportLowerBound()  {      [BUGGY]          int    numberOfSuccesses    =    getNumberOfSuccesses();    int  populationSize  =  getPopulationSize();  int  dx  =  getDx();  [BUGGY]      return  FastMath.max(0,        getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  }  [CLASS]  HypergeometricDistribution  [METHOD]  getSupportLowerBound  [RETURN_TYPE]  int  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	308	309	1	replace	                int        numberOfSuccesses        =        getNumberOfSuccesses();        int    populationSize    =    getPopulationSize();    int  dx  =  getDx();	  	non-compiled	[CE]  cannot  find  symbol	981	None
961	[BUG]  [BUGGY]  final  double  dx  =  getDecimalVariance();  [CE]  cannot  find  symbol  [CONTEXT]      public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }      [BUGGY]  final  double  dx  =  getDecimalVariance();  [BUGGY]      return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	283	283	1	replace	final  double  dx  =  getDecimalVariance();	  if(numericalVarianceIsCalculated)    {    if(!numericalVarianceIsCalculated)    {    numericalVariance    =    calculateNumberOfSuccesses();    if(!numericalVarianceIsCalculated)    {    numericalVariance    	non-compiled	[CE]  cannot  find  symbol	3843	None
962	[BUG]  [BUGGY]  final  double  k  =  getNumberOfSuccesses();  final  double  dx  =  getDecimalVariance();  [CE]  cannot  find  symbol  [CONTEXT]      public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }      [BUGGY]  final  double  k  =  getNumberOfSuccesses();  final  double  dx  =  getDecimalVariance();  [BUGGY]      return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	283	283	1	replace	final  double  k  =  getNumberOfSuccesses();  final  double  dx  =  getDecimalVariance();	  if(numericalVarianceIsCalculated)    {    if(!numericalVarianceIsCalculated)    {    numericalVariance    =    calculateNumberOfSuccesses();    if(!numericalVarianceIsCalculated)    {    numericalVariance    	non-compiled	[CE]  cannot  find  symbol	3843	None
963	[BUG]  [BUGGY]  final  double  n  =  getNumberOfSuccesses();  final  double  dx  =  getDecimalVariance();  [CE]  cannot  find  symbol  [CONTEXT]      public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }      [BUGGY]  final  double  n  =  getNumberOfSuccesses();  final  double  dx  =  getDecimalVariance();  [BUGGY]      return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	283	283	1	replace	final  double  n  =  getNumberOfSuccesses();  final  double  dx  =  getDecimalVariance();	  if(numericalVarianceIsCalculated)    {    if(!numericalVarianceIsCalculated)    {    numericalVariance    =    calculateNumberOfSuccesses();    if(!numericalVarianceIsCalculated)    {    numericalVariance    	non-compiled	[CE]  cannot  find  symbol	3843	None
964	[BUG]  [BUGGY]  final  double  c  =  getNumberOfSuccesses();  final  double  dx  =  getDecimalVariance();  [CE]  cannot  find  symbol  [CONTEXT]      public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }      [BUGGY]  final  double  c  =  getNumberOfSuccesses();  final  double  dx  =  getDecimalVariance();  [BUGGY]      return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	283	283	1	replace	final  double  c  =  getNumberOfSuccesses();  final  double  dx  =  getDecimalVariance();	  if(numericalVarianceIsCalculated)    {    if(!numericalVarianceIsCalculated)    {    numericalVariance    =    calculateNumberOfSuccesses();    if(!numericalVarianceIsCalculated)    {    numericalVariance    	non-compiled	[CE]  cannot  find  symbol	3843	None
973	[BUG]  [BUGGY]  numericalVariance  =  Math.max(numberOfSuccesses,  numberOfSuccesses  /  1);  [CE]  missing  return  statement  [CONTEXT]      public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }      [BUGGY]  numericalVariance  =  Math.max(numberOfSuccesses,  numberOfSuccesses  /  1);  [BUGGY]      }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	283	283	1	replace	numericalVariance  =  Math.max(numberOfSuccesses,  numberOfSuccesses  /  1);	  numericalVariance    =    Math.max(numberOfSuccesses,    numberOfSuccesses    -    1);    	non-compiled	[CE]  missing  return  statement	291	None
982	[BUG]  [BUGGY]  final  double  m  =  getNumberOfSuccesses()  /  2;  final  double  k  =  getKnowNumberOfSuccesses();  [CE]  cannot  find  symbol  [CONTEXT]      protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();      [BUGGY]  final  double  m  =  getNumberOfSuccesses()  /  2;  final  double  k  =  getKnowNumberOfSuccesses();  [BUGGY]      final  double  n  =  getSampleSize();  return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	293	293	1	replace	final  double  m  =  getNumberOfSuccesses()  /  2;  final  double  k  =  getKnowNumberOfSuccesses();	  final    double    m    =    getNumberOfSuccesses()    *    2;    final    double    k    =    getKnowNumberOfSuccesses();    	non-compiled	[CE]  cannot  find  symbol	1431	None
983	[BUG]  [BUGGY]  final  double  m  =  getNumberOfSuccesses()  *  2;  final  double  dx  =  getKnowNumberOfSuccesses();  [CE]  cannot  find  symbol  [CONTEXT]      protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();      [BUGGY]  final  double  m  =  getNumberOfSuccesses()  *  2;  final  double  dx  =  getKnowNumberOfSuccesses();  [BUGGY]      final  double  n  =  getSampleSize();  return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	293	293	1	replace	final  double  m  =  getNumberOfSuccesses()  *  2;  final  double  dx  =  getKnowNumberOfSuccesses();	  final    double    m    =    getNumberOfSuccesses()    *    2;    final    double    k    =    getKnowNumberOfSuccesses();    	non-compiled	[CE]  cannot  find  symbol	1431	None
984	[BUG]  [BUGGY]  final  double  m  =  getNumberOfSuccesses()  +  2;  final  double  k  =  getKnowNumberOfSuccesses();  [CE]  cannot  find  symbol  [CONTEXT]      protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();      [BUGGY]  final  double  m  =  getNumberOfSuccesses()  +  2;  final  double  k  =  getKnowNumberOfSuccesses();  [BUGGY]      final  double  n  =  getSampleSize();  return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	293	293	1	replace	final  double  m  =  getNumberOfSuccesses()  +  2;  final  double  k  =  getKnowNumberOfSuccesses();	  final    double    m    =    getNumberOfSuccesses()    *    2;    final    double    k    =    getKnowNumberOfSuccesses();    	non-compiled	[CE]  cannot  find  symbol	1431	None
993	[BUG]  [BUGGY]  getPopulationSize()  +  getNumberOfSuccesses()  +  getPopulationSize();  [CE]  not  a  statement  [CONTEXT]      public  int  getSupportLowerBound()  {      [BUGGY]  getPopulationSize()  +  getNumberOfSuccesses()  +  getPopulationSize();  [BUGGY]      return  FastMath.max(0,        getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  }  [CLASS]  HypergeometricDistribution  [METHOD]  getSupportLowerBound  [RETURN_TYPE]  int  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	308	309	1	replace	getPopulationSize()  +  getNumberOfSuccesses()  +  getPopulationSize();	          getPopulationSize();    getNumberOfSuccesses()    +    getPopulationSize();    	non-compiled	[CE]  not  a  statement	904	None
994	[BUG]  [BUGGY]  getSupportLowerBound();  getNumberOfSuccesses()  +  getPopulationSize();  [CE]  not  a  statement  [CONTEXT]      public  int  getSupportLowerBound()  {      [BUGGY]  getSupportLowerBound();  getNumberOfSuccesses()  +  getPopulationSize();  [BUGGY]      return  FastMath.max(0,        getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  }  [CLASS]  HypergeometricDistribution  [METHOD]  getSupportLowerBound  [RETURN_TYPE]  int  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	308	309	1	replace	getSupportLowerBound();  getNumberOfSuccesses()  +  getPopulationSize();	          getPopulationSize();    getNumberOfSuccesses()    +    getPopulationSize();    	non-compiled	[CE]  not  a  statement	904	None
1003	[BUG]  [BUGGY]  final  int  k  =  getKind().length;  [CE]  cannot  find  symbol  [CONTEXT]      protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();  final  double  m  =  getNumberOfSuccesses();  final  double  n  =  getSampleSize();      [BUGGY]  final  int  k  =  getKind().length;  [BUGGY]      return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	295	295	1	replace	final  int  k  =  getKind().length;	  final    int    k    =    getKind();    	non-compiled	[CE]  cannot  find  symbol	1343	None
1004	[BUG]  [BUGGY]  final  int  n  =  getKind();  [CE]  variable  n  is  already  defined  in  method  calculateNumericalVariance()  [CONTEXT]      protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();  final  double  m  =  getNumberOfSuccesses();  final  double  n  =  getSampleSize();      [BUGGY]  final  int  n  =  getKind();  [BUGGY]      return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	295	295	1	replace	final  int  n  =  getKind();	  final    int    k    =    getKind();    	non-compiled	[CE]  variable  n  is  already  defined  in  method  calculateNumericalVariance()	1343	None
1012	[BUG]  [BUGGY]  final  double  n  =  getDecimalSize(m);  [CE]  cannot  find  symbol  [CONTEXT]      protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();  final  double  m  =  getNumberOfSuccesses();      [BUGGY]  final  double  n  =  getDecimalSize(m);  [BUGGY]      return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	294	294	1	replace	final  double  n  =  getDecimalSize(m);	  final    double    n    =    getDecimalSize(n);    	non-compiled	[CE]  cannot  find  symbol	2333	None
1013	[BUG]  [BUGGY]  final  double  n  =  getDecimalSize(n)-  1;  [CE]  cannot  find  symbol  [CONTEXT]      protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();  final  double  m  =  getNumberOfSuccesses();      [BUGGY]  final  double  n  =  getDecimalSize(n)-  1;  [BUGGY]      return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	294	294	1	replace	final  double  n  =  getDecimalSize(n)-  1;	  final    double    n    =    getDecimalSize(n);    	non-compiled	[CE]  cannot  find  symbol	2333	None
1014	[BUG]  [BUGGY]  final  double  n  =  getDecimalSize(n  +  1);  [CE]  cannot  find  symbol  [CONTEXT]      protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();  final  double  m  =  getNumberOfSuccesses();      [BUGGY]  final  double  n  =  getDecimalSize(n  +  1);  [BUGGY]      return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	294	294	1	replace	final  double  n  =  getDecimalSize(n  +  1);	  final    double    n    =    getDecimalSize(n);    	non-compiled	[CE]  cannot  find  symbol	2333	None
1022	[BUG]  [BUGGY]  final  int  k  =  getNumberOfKits();  [CE]  cannot  find  symbol  [CONTEXT]      public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {      [BUGGY]  final  int  k  =  getNumberOfKits();  [BUGGY]      numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	280	280	1	replace	final  int  k  =  getNumberOfKits();	  final    double    k    =    getNumberOfKits();    	non-compiled	[CE]  cannot  find  symbol	3143	None
1023	[BUG]  [BUGGY]  static  final  double  k  =  getNumberOfKits();  [CE]  illegal  start  of  expression  [CONTEXT]      public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {      [BUGGY]  static  final  double  k  =  getNumberOfKits();  [BUGGY]      numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	280	280	1	replace	static  final  double  k  =  getNumberOfKits();	  final    double    k    =    getNumberOfKits();    	non-compiled	[CE]  illegal  start  of  expression	3143	None
1024	[BUG]  [BUGGY]  static  double  k  =  getNumberOfKits();  [CE]  illegal  start  of  expression  [CONTEXT]      public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {      [BUGGY]  static  double  k  =  getNumberOfKits();  [BUGGY]      numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	280	280	1	replace	static  double  k  =  getNumberOfKits();	  final    double    k    =    getNumberOfKits();    	non-compiled	[CE]  illegal  start  of  expression	3143	None
1032	[BUG]  [BUGGY]  numericalVariance  =  calculateStdDevVariance()  *(numberOfSuccesses  -  1));  [CE]  ';'  expected  [CONTEXT]      public  double  getNumericalVariance()  {      [BUGGY]  numericalVariance  =  calculateStdDevVariance()  *(numberOfSuccesses  -  1));  [BUGGY]      numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	279	279	1	replace	numericalVariance  =  calculateStdDevVariance()  *(numberOfSuccesses  -  1));	  numericalVariance    =    calculateStdDevVariance()    /(numberOfSuccesses    -    1));    	non-compiled	[CE]  ';'  expected	2884	None
1033	[BUG]  [BUGGY]  numericalVariance  =  calculateStdNumericalVariance()  /(numberOfSuccesses  -  1));  [CE]  ';'  expected  [CONTEXT]      public  double  getNumericalVariance()  {      [BUGGY]  numericalVariance  =  calculateStdNumericalVariance()  /(numberOfSuccesses  -  1));  [BUGGY]      numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	279	279	1	replace	numericalVariance  =  calculateStdNumericalVariance()  /(numberOfSuccesses  -  1));	  numericalVariance    =    calculateStdDevVariance()    /(numberOfSuccesses    -    1));    	non-compiled	[CE]  ';'  expected	2884	None
1034	[BUG]  [BUGGY]  numericalVariance  =  calculateStdDevVariance()  /(numberOfSuccesses  *  1));  [CE]  ';'  expected  [CONTEXT]      public  double  getNumericalVariance()  {      [BUGGY]  numericalVariance  =  calculateStdDevVariance()  /(numberOfSuccesses  *  1));  [BUGGY]      numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	279	279	1	replace	numericalVariance  =  calculateStdDevVariance()  /(numberOfSuccesses  *  1));	  numericalVariance    =    calculateStdDevVariance()    /(numberOfSuccesses    -    1));    	non-compiled	[CE]  ';'  expected	2884	None
1042	[BUG]  [BUGGY]  [FE]  AssertionError  testMoments  [CONTEXT]      public  double  getNumericalVariance()  {      [BUGGY]  if(numericalVarianceIsCalculated  &&  getNumberOfSuccesses()  >  1)  {  [BUGGY]      numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	279	279	1	add	if(numericalVarianceIsCalculated  &&  getNumberOfSuccesses()  >  1)  {	  if(numericalVarianceIsCalculated    &&    getNumberOfSuccesses()    >    0)    {    	compilable	  [FE]  AssertionError  testMoments	935	1
1043	[BUG]  [BUGGY]  if(numericalVarianceIsCalculated  &&  getNumberOfSuccesses()  >  1)  {  [FE]  AssertionError  testMoments  [CONTEXT]      public  double  getNumericalVariance()  {      [BUGGY]  if(numericalVarianceIsCalculated  &&  getNumberOfSuccesses()  >  1)  {  [BUGGY]      numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	279	279	1	replace	if(numericalVarianceIsCalculated  &&  getNumberOfSuccesses()  >  1)  {	  if(numericalVarianceIsCalculated    &&    getNumberOfSuccesses()    >    0)    {    	compilable	  [FE]  AssertionError  testMoments	935	1
1043	[BUG]  [BUGGY]  [FE]  AssertionError  testMath1021  [CONTEXT]      public  double  getNumericalVariance()  {      [BUGGY]  if(numberOfSuccesses  >  0  &&  getNumberOfSuccesses()  >  0)  {  [BUGGY]      numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	279	279	1	add	if(numberOfSuccesses  >  0  &&  getNumberOfSuccesses()  >  0)  {	  if(numericalVarianceIsCalculated    &&    getNumberOfSuccesses()    >    0)    {    	compilable	  [FE]  AssertionError  testMath1021	935	1
1044	[BUG]  [BUGGY]  if(numberOfSuccesses  >  0  &&  getNumberOfSuccesses()  >  0)  {  [FE]  AssertionError  testMath1021  [CONTEXT]      public  double  getNumericalVariance()  {      [BUGGY]  if(numberOfSuccesses  >  0  &&  getNumberOfSuccesses()  >  0)  {  [BUGGY]      numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	279	279	1	replace	if(numberOfSuccesses  >  0  &&  getNumberOfSuccesses()  >  0)  {	  if(numericalVarianceIsCalculated    &&    getNumberOfSuccesses()    >    0)    {    	compilable	  [FE]  AssertionError  testMath1021	935	1
1044	[BUG]  [BUGGY]  [FE]  AssertionError  testMath1021  [CONTEXT]      public  double  getNumericalVariance()  {      [BUGGY]  if(numericalVarianceIsCalculated  ||  getNumberOfSuccesses()  >  0)  {  [BUGGY]      numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	279	279	1	add	if(numericalVarianceIsCalculated  ||  getNumberOfSuccesses()  >  0)  {	  if(numericalVarianceIsCalculated    &&    getNumberOfSuccesses()    >    0)    {    	compilable	  [FE]  AssertionError  testMath1021	935	1
1045	[BUG]  [BUGGY]  if(numericalVarianceIsCalculated  ||  getNumberOfSuccesses()  >  0)  {  [FE]  AssertionError  testMath1021  [CONTEXT]      public  double  getNumericalVariance()  {      [BUGGY]  if(numericalVarianceIsCalculated  ||  getNumberOfSuccesses()  >  0)  {  [BUGGY]      numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	279	279	1	replace	if(numericalVarianceIsCalculated  ||  getNumberOfSuccesses()  >  0)  {	  if(numericalVarianceIsCalculated    &&    getNumberOfSuccesses()    >    0)    {    	compilable	  [FE]  AssertionError  testMath1021	935	1
1051	[BUG]  [BUGGY]  if(numberOfSuccesses  >  1)  {  if(!numericalVarianceIsCalculated)  {  numericalVariance  =  getNumberOfSuccesses()  *  Math.pow(10,  numberOfSuccesses);  }  [CE]  illegal  start  of  expression  [CONTEXT]      public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }      [BUGGY]  if(numberOfSuccesses  >  1)  {  if(!numericalVarianceIsCalculated)  {  numericalVariance  =  getNumberOfSuccesses()  *  Math.pow(10,  numberOfSuccesses);  }  [BUGGY]      return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	283	283	1	replace	if(numberOfSuccesses  >  1)  {  if(!numericalVarianceIsCalculated)  {  numericalVariance  =  getNumberOfSuccesses()  *  Math.pow(10,  numberOfSuccesses);  }	  if(numberOfSuccesses    >    0)    {    if(!numericalVarianceIsCalculated)    {    numericalVariance    =    getNumberOfSuccesses()    *    Math.pow(10,    numberOfSuccesses);    }    	non-compiled	[CE]  illegal  start  of  expression	222	None
1061	[BUG]  [BUGGY]  final  double  N  =  getNumberOfHyphens(populationSize);  [CE]  variable  N  is  already  defined  in  method  calculateNumericalVariance()  [CONTEXT]      protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();  final  double  m  =  getNumberOfSuccesses();      [BUGGY]  final  double  N  =  getNumberOfHyphens(populationSize);  [BUGGY]      final  double  n  =  getSampleSize();  return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	294	294	1	replace	final  double  N  =  getNumberOfHyphens(populationSize);	          final    double    k    =    getNumberOfSuccesses();    final    double    k    =    getPopulationSize();    	non-compiled	[CE]  variable  N  is  already  defined  in  method  calculateNumericalVariance()	1473	None
1062	[BUG]  [BUGGY]  final  double  N  =  getNumberOfHyphens(populationSize)-  1;  [CE]  variable  N  is  already  defined  in  method  calculateNumericalVariance()  [CONTEXT]      protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();  final  double  m  =  getNumberOfSuccesses();      [BUGGY]  final  double  N  =  getNumberOfHyphens(populationSize)-  1;  [BUGGY]      final  double  n  =  getSampleSize();  return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	294	294	1	replace	final  double  N  =  getNumberOfHyphens(populationSize)-  1;	          final    double    k    =    getNumberOfSuccesses();    final    double    k    =    getPopulationSize();    	non-compiled	[CE]  variable  N  is  already  defined  in  method  calculateNumericalVariance()	1473	None
1064	[BUG]  [BUGGY]  final  double  N  =  getNumberOfHyphens(populationSize  -  1);  [CE]  variable  N  is  already  defined  in  method  calculateNumericalVariance()  [CONTEXT]      protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();  final  double  m  =  getNumberOfSuccesses();      [BUGGY]  final  double  N  =  getNumberOfHyphens(populationSize  -  1);  [BUGGY]      final  double  n  =  getSampleSize();  return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	294	294	1	replace	final  double  N  =  getNumberOfHyphens(populationSize  -  1);	          final    double    k    =    getNumberOfSuccesses();    final    double    k    =    getPopulationSize();    	non-compiled	[CE]  variable  N  is  already  defined  in  method  calculateNumericalVariance()	1473	None
1081	[BUG]  [BUGGY]  double  k  =  getNumberOfSuccesses()  /  2.0;  [CE]  missing  return  statement  [CONTEXT]      public  double  getNumericalMean()  {      [BUGGY]  double  k  =  getNumberOfSuccesses()  /  2.0;  [BUGGY]      return  (double)  (getSampleSize()  *  getNumberOfSuccesses())  /  (double)  getPopulationSize();  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalMean  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	268	268	1	replace	double  k  =  getNumberOfSuccesses()  /  2.0;	  int    k    =    getNumberOfSuccesses()    /    2.0;    	non-compiled	[CE]  missing  return  statement	5824	None
1083	[BUG]  [BUGGY]  long  k  =  getNumberOfSuccesses()  /  2.0;  [CE]  possible  loss  of  precision  [CONTEXT]      public  double  getNumericalMean()  {      [BUGGY]  long  k  =  getNumberOfSuccesses()  /  2.0;  [BUGGY]      return  (double)  (getSampleSize()  *  getNumberOfSuccesses())  /  (double)  getPopulationSize();  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalMean  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	268	268	1	replace	long  k  =  getNumberOfSuccesses()  /  2.0;	  int    k    =    getNumberOfSuccesses()    /    2.0;    	non-compiled	[CE]  possible  loss  of  precision	5824	None
1084	[BUG]  [BUGGY]  float  k  =  getNumberOfSuccesses()  /  2.0;  [CE]  possible  loss  of  precision  [CONTEXT]      public  double  getNumericalMean()  {      [BUGGY]  float  k  =  getNumberOfSuccesses()  /  2.0;  [BUGGY]      return  (double)  (getSampleSize()  *  getNumberOfSuccesses())  /  (double)  getPopulationSize();  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalMean  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	268	268	1	replace	float  k  =  getNumberOfSuccesses()  /  2.0;	  int    k    =    getNumberOfSuccesses()    /    2.0;    	non-compiled	[CE]  possible  loss  of  precision	5824	None
1092	[BUG]  [BUGGY]  if(numberOfSuccesses  >  1)  {  if(!numericalVarianceIsCalculated)  {  numericalVariance  =  Math.min(numberOfSuccesses  /  2);  }  [CE]  illegal  start  of  expression  [CONTEXT]      public  int  getSupportLowerBound()  {      [BUGGY]  if(numberOfSuccesses  >  1)  {  if(!numericalVarianceIsCalculated)  {  numericalVariance  =  Math.min(numberOfSuccesses  /  2);  }  [BUGGY]      getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  }  [CLASS]  HypergeometricDistribution  [METHOD]  getSupportLowerBound  [RETURN_TYPE]  int  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	308	309	1	replace	if(numberOfSuccesses  >  1)  {  if(!numericalVarianceIsCalculated)  {  numericalVariance  =  Math.min(numberOfSuccesses  /  2);  }	  if(numberOfSuccesses    >    0)    {    if(!numericalVarianceIsCalculated)    {    numericalVariance    =    Math.min(numberOfSuccesses    /    2);    }    	non-compiled	[CE]  illegal  start  of  expression	1184	None
1093	[BUG]  [BUGGY]  if(numberOfSuccesses  >  0)  {  if(!numericalVarianceIsCalculated)  {  numericalVariance  =  Math.min(numberOfSuccesses  /  2);  [Delete]  [CE]  illegal  start  of  expression  [CONTEXT]      public  int  getSupportLowerBound()  {      [BUGGY]  if(numberOfSuccesses  >  0)  {  if(!numericalVarianceIsCalculated)  {  numericalVariance  =  Math.min(numberOfSuccesses  /  2);  [Delete]  [BUGGY]      getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  }  [CLASS]  HypergeometricDistribution  [METHOD]  getSupportLowerBound  [RETURN_TYPE]  int  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	308	309	1	replace	if(numberOfSuccesses  >  0)  {  if(!numericalVarianceIsCalculated)  {  numericalVariance  =  Math.min(numberOfSuccesses  /  2);  [Delete]	  if(numberOfSuccesses    >    0)    {    if(!numericalVarianceIsCalculated)    {    numericalVariance    =    Math.min(numberOfSuccesses    /    2);    }    	non-compiled	[CE]  illegal  start  of  expression	1184	None
1103	[BUG]  [BUGGY]  final  double  n  =  getSampleNumberOfSuccesses(n  +  1);  [CE]  cannot  find  symbol  [CONTEXT]      protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();  final  double  m  =  getNumberOfSuccesses();      [BUGGY]  final  double  n  =  getSampleNumberOfSuccesses(n  +  1);  [BUGGY]      return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	294	294	1	replace	final  double  n  =  getSampleNumberOfSuccesses(n  +  1);	  final    double    n    =    getSampleNumberOfSuccesses(n);    	non-compiled	[CE]  cannot  find  symbol	5162	None
1104	[BUG]  [BUGGY]  final  double  n  =  getSampleNumberOfSuccesses(n)-  1;  [CE]  cannot  find  symbol  [CONTEXT]      protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();  final  double  m  =  getNumberOfSuccesses();      [BUGGY]  final  double  n  =  getSampleNumberOfSuccesses(n)-  1;  [BUGGY]      return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	294	294	1	replace	final  double  n  =  getSampleNumberOfSuccesses(n)-  1;	  final    double    n    =    getSampleNumberOfSuccesses(n);    	non-compiled	[CE]  cannot  find  symbol	5162	None
1111	[BUG]  [BUGGY]  numericalVariance  =  Math.abs(numberOfSuccesses  /  1);  [CE]  illegal  start  of  type  [CONTEXT]      public  double  getNumericalVariance()  {      [BUGGY]  numericalVariance  =  Math.abs(numberOfSuccesses  /  1);  [BUGGY]      if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	279	279	1	replace	numericalVariance  =  Math.abs(numberOfSuccesses  /  1);	  numericalVariance    =    Math.abs(numberOfSuccesses    -    1);    	non-compiled	[CE]  illegal  start  of  type	584	None
1113	[BUG]  [BUGGY]  numericalVariance  =  Math.abs(numberOfSuccesses  *  1);  [CE]  illegal  start  of  type  [CONTEXT]      public  double  getNumericalVariance()  {      [BUGGY]  numericalVariance  =  Math.abs(numberOfSuccesses  *  1);  [BUGGY]      if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	279	279	1	replace	numericalVariance  =  Math.abs(numberOfSuccesses  *  1);	  numericalVariance    =    Math.abs(numberOfSuccesses    -    1);    	non-compiled	[CE]  illegal  start  of  type	584	None
1114	[BUG]  [BUGGY]  numericalVariance  =  Math.abs(numberOfSuccesses  -  2);  [CE]  illegal  start  of  type  [CONTEXT]      public  double  getNumericalVariance()  {      [BUGGY]  numericalVariance  =  Math.abs(numberOfSuccesses  -  2);  [BUGGY]      if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	279	279	1	replace	numericalVariance  =  Math.abs(numberOfSuccesses  -  2);	  numericalVariance    =    Math.abs(numberOfSuccesses    -    1);    	non-compiled	[CE]  illegal  start  of  type	584	None
1121	[BUG]  [BUGGY]  numericalVariance  =  calculateVariance(),  probabilityOfSuccesses);  [CE]  ';'  expected  [CONTEXT]      public  double  getNumericalMean()  {      [BUGGY]  numericalVariance  =  calculateVariance(),  probabilityOfSuccesses);  [BUGGY]      }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalMean  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	268	268	1	replace	numericalVariance  =  calculateVariance(),  probabilityOfSuccesses);	  return(double)(getNumberOfSuccesses()    *    getSampleSize())/(double)getPopulationSize();    if(getNumberOfSuccesses()    >    0)    {    if(getNumberOfSuccesses()    >    0)    {    return(double)getNumberOfSuccesses()    *    getSampleSize();    }    	non-compiled	[CE]  ';'  expected	1322	None
1122	[BUG]  [BUGGY]  numericalVariance  =  calculateVariance(),  numberOfSuccesses  -  1);  [CE]  ';'  expected  [CONTEXT]      public  double  getNumericalMean()  {      [BUGGY]  numericalVariance  =  calculateVariance(),  numberOfSuccesses  -  1);  [BUGGY]      }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalMean  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	268	268	1	replace	numericalVariance  =  calculateVariance(),  numberOfSuccesses  -  1);	  return(double)(getNumberOfSuccesses()    *    getSampleSize())/(double)getPopulationSize();    if(getNumberOfSuccesses()    >    0)    {    if(getNumberOfSuccesses()    >    0)    {    return(double)getNumberOfSuccesses()    *    getSampleSize();    }    	non-compiled	[CE]  ';'  expected	1322	None
1123	[BUG]  [BUGGY]  numericalVariance  =  calculateVariance(),  sampleSize);  [CE]  ';'  expected  [CONTEXT]      public  double  getNumericalMean()  {      [BUGGY]  numericalVariance  =  calculateVariance(),  sampleSize);  [BUGGY]      }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalMean  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	268	268	1	replace	numericalVariance  =  calculateVariance(),  sampleSize);	  return(double)(getNumberOfSuccesses()    *    getSampleSize())/(double)getPopulationSize();    if(getNumberOfSuccesses()    >    0)    {    if(getNumberOfSuccesses()    >    0)    {    return(double)getNumberOfSuccesses()    *    getSampleSize();    }    	non-compiled	[CE]  ';'  expected	1322	None
1124	[BUG]  [BUGGY]  numericalVariance  =  calculateVariance(),  populationSize);  [CE]  ';'  expected  [CONTEXT]      public  double  getNumericalMean()  {      [BUGGY]  numericalVariance  =  calculateVariance(),  populationSize);  [BUGGY]      }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalMean  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	268	268	1	replace	numericalVariance  =  calculateVariance(),  populationSize);	  return(double)(getNumberOfSuccesses()    *    getSampleSize())/(double)getPopulationSize();    if(getNumberOfSuccesses()    >    0)    {    if(getNumberOfSuccesses()    >    0)    {    return(double)getNumberOfSuccesses()    *    getSampleSize();    }    	non-compiled	[CE]  ';'  expected	1322	None
1131	[BUG]  [BUGGY]  final  double  dx  =  getDimensions();  [CE]  cannot  find  symbol  [CONTEXT]      protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();  final  double  m  =  getNumberOfSuccesses();      [BUGGY]  final  double  dx  =  getDimensions();  [BUGGY]      final  double  n  =  getSampleSize();  return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	294	294	1	replace	final  double  dx  =  getDimensions();	          final    double    k    =    getNumberOfSuccesses();    final    double    dx    =    getDimensions();    	non-compiled	[CE]  cannot  find  symbol	64	None
1133	[BUG]  [BUGGY]  final  double  dx  =  getNumberOfSuccesses();  final  double  k  =  getNumberOfSuccesses();  [CE]  cannot  find  symbol  n  [CONTEXT]      protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();  final  double  m  =  getNumberOfSuccesses();      [BUGGY]  final  double  dx  =  getNumberOfSuccesses();  final  double  k  =  getNumberOfSuccesses();  [BUGGY]      final  double  n  =  getSampleSize();  return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	294	294	1	replace	final  double  dx  =  getNumberOfSuccesses();  final  double  k  =  getNumberOfSuccesses();	          final    double    k    =    getNumberOfSuccesses();    final    double    dx    =    getDimensions();    	non-compiled	[CE]  cannot  find  symbol  n	64	None
1134	[BUG]  [BUGGY]  final  double  n  =  getNumberOfSuccesses();  final  double  dx  =  getDimensions();  [CE]  cannot  find  symbol  [CONTEXT]      protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();  final  double  m  =  getNumberOfSuccesses();      [BUGGY]  final  double  n  =  getNumberOfSuccesses();  final  double  dx  =  getDimensions();  [BUGGY]      final  double  n  =  getSampleSize();  return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	294	294	1	replace	final  double  n  =  getNumberOfSuccesses();  final  double  dx  =  getDimensions();	          final    double    k    =    getNumberOfSuccesses();    final    double    dx    =    getDimensions();    	non-compiled	[CE]  cannot  find  symbol	64	None
1141	[BUG]  [BUGGY]  numericalVariance  =  calculateVariance(numberOfSuccesses  -  1);  [CE]  cannot  find  symbol  [CONTEXT]      protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();  final  double  m  =  getNumberOfSuccesses();      [BUGGY]  numericalVariance  =  calculateVariance(numberOfSuccesses  -  1);  [BUGGY]      return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	294	294	1	replace	numericalVariance  =  calculateVariance(numberOfSuccesses  -  1);	  int    populationSize    =    getNumberOfSuccesses()    -    getPopulationSize();    	non-compiled	[CE]  cannot  find  symbol	3	None
1142	[BUG]  [BUGGY]  numericalVariance  =  calculateVariance(populationSize  -  1);  [CE]  cannot  find  symbol  [CONTEXT]      protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();  final  double  m  =  getNumberOfSuccesses();      [BUGGY]  numericalVariance  =  calculateVariance(populationSize  -  1);  [BUGGY]      return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	294	294	1	replace	numericalVariance  =  calculateVariance(populationSize  -  1);	  int    populationSize    =    getNumberOfSuccesses()    -    getPopulationSize();    	non-compiled	[CE]  cannot  find  symbol	3	None
1144	[BUG]  [BUGGY]  numericalVariance  =  calculateVariance(numberOfSuccesses  /  1);  [CE]  cannot  find  symbol  [CONTEXT]      protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();  final  double  m  =  getNumberOfSuccesses();      [BUGGY]  numericalVariance  =  calculateVariance(numberOfSuccesses  /  1);  [BUGGY]      return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	294	294	1	replace	numericalVariance  =  calculateVariance(numberOfSuccesses  /  1);	  int    populationSize    =    getNumberOfSuccesses()    -    getPopulationSize();    	non-compiled	[CE]  cannot  find  symbol	3	None
1152	[BUG]  [BUGGY]  double  numericalVariance  =  Math.floor(getMean()  *  sampleSize);  [CE]  illegal  start  of  type  [CONTEXT]      public  double  getNumericalVariance()  {      [BUGGY]  double  numericalVariance  =  Math.floor(getMean()  *  sampleSize);  [BUGGY]      if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	279	279	1	replace	double  numericalVariance  =  Math.floor(getMean()  *  sampleSize);	  double    numericalVariance    =    Math.floor(getMean()    /    sampleSize);    	non-compiled	[CE]  illegal  start  of  type	4532	None
1154	[BUG]  [BUGGY]  double  numericalVariance  =  Math.floor(getMean()  /  populationSize);  [CE]  illegal  start  of  type  [CONTEXT]      public  double  getNumericalVariance()  {      [BUGGY]  double  numericalVariance  =  Math.floor(getMean()  /  populationSize);  [BUGGY]      if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	279	279	1	replace	double  numericalVariance  =  Math.floor(getMean()  /  populationSize);	  double    numericalVariance    =    Math.floor(getMean()    /    sampleSize);    	non-compiled	[CE]  illegal  start  of  type	4532	None
1161	[BUG]  [BUGGY]  numericalVariance  =  calculatePositiveVariance(),  false);  [CE]  ';'  expected  [CONTEXT]      public  double  getNumericalVariance()  {      [BUGGY]  numericalVariance  =  calculatePositiveVariance(),  false);  [BUGGY]      numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	279	279	1	replace	numericalVariance  =  calculatePositiveVariance(),  false);	  numericalVariance    =    calculatePositiveVariance(),    numberOfSuccesses);    	non-compiled	[CE]  ';'  expected	2373	None
1162	[BUG]  [BUGGY]  numericalVariance  =  calculatePositiveVariance(),  numberOfSuccesses  -  1);  [CE]  ';'  expected  [CONTEXT]      public  double  getNumericalVariance()  {      [BUGGY]  numericalVariance  =  calculatePositiveVariance(),  numberOfSuccesses  -  1);  [BUGGY]      numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	279	279	1	replace	numericalVariance  =  calculatePositiveVariance(),  numberOfSuccesses  -  1);	  numericalVariance    =    calculatePositiveVariance(),    numberOfSuccesses);    	non-compiled	[CE]  ';'  expected	2373	None
1163	[BUG]  [BUGGY]  numericalVariance  =  calculatePositiveVariance(),  populationSize);  [CE]  ';'  expected  [CONTEXT]      public  double  getNumericalVariance()  {      [BUGGY]  numericalVariance  =  calculatePositiveVariance(),  populationSize);  [BUGGY]      numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	279	279	1	replace	numericalVariance  =  calculatePositiveVariance(),  populationSize);	  numericalVariance    =    calculatePositiveVariance(),    numberOfSuccesses);    	non-compiled	[CE]  ';'  expected	2373	None
1164	[BUG]  [BUGGY]  numericalVariance  =  calculatePositiveVariance(),  true);  [CE]  ';'  expected  [CONTEXT]      public  double  getNumericalVariance()  {      [BUGGY]  numericalVariance  =  calculatePositiveVariance(),  true);  [BUGGY]      numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	279	279	1	replace	numericalVariance  =  calculatePositiveVariance(),  true);	  numericalVariance    =    calculatePositiveVariance(),    numberOfSuccesses);    	non-compiled	[CE]  ';'  expected	2373	None
1172	[BUG]  [BUGGY]  final  double  m  =  getNumberOfSuccesses()  *  getMethodOfSuccesses();  [CE]  cannot  find  symbol  [CONTEXT]      protected  double  calculateNumericalVariance()  {      [BUGGY]  final  double  m  =  getNumberOfSuccesses()  *  getMethodOfSuccesses();  [BUGGY]      final  double  N  =  getPopulationSize();  final  double  m  =  getNumberOfSuccesses();  final  double  n  =  getSampleSize();  return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	292	292	1	replace	final  double  m  =  getNumberOfSuccesses()  *  getMethodOfSuccesses();	  final    double    m    =    getNumberOfSuccesses()    *    getMeanOfSuccesses();    	non-compiled	[CE]  cannot  find  symbol	243	None
1173	[BUG]  [BUGGY]  final  double  m  =  getNumberOfSuccesses()  *  getMaximumOfSuccesses();  [CE]  cannot  find  symbol  [CONTEXT]      protected  double  calculateNumericalVariance()  {      [BUGGY]  final  double  m  =  getNumberOfSuccesses()  *  getMaximumOfSuccesses();  [BUGGY]      final  double  N  =  getPopulationSize();  final  double  m  =  getNumberOfSuccesses();  final  double  n  =  getSampleSize();  return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	292	292	1	replace	final  double  m  =  getNumberOfSuccesses()  *  getMaximumOfSuccesses();	  final    double    m    =    getNumberOfSuccesses()    *    getMeanOfSuccesses();    	non-compiled	[CE]  cannot  find  symbol	243	None
1174	[BUG]  [BUGGY]  final  double  m  =  getNumberOfSuccesses()  *  getDescriptorOfSuccesses();  [CE]  cannot  find  symbol  [CONTEXT]      protected  double  calculateNumericalVariance()  {      [BUGGY]  final  double  m  =  getNumberOfSuccesses()  *  getDescriptorOfSuccesses();  [BUGGY]      final  double  N  =  getPopulationSize();  final  double  m  =  getNumberOfSuccesses();  final  double  n  =  getSampleSize();  return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	292	292	1	replace	final  double  m  =  getNumberOfSuccesses()  *  getDescriptorOfSuccesses();	  final    double    m    =    getNumberOfSuccesses()    *    getMeanOfSuccesses();    	non-compiled	[CE]  cannot  find  symbol	243	None
1182	[BUG]  [BUGGY]  final  double  m  =  getNumberOfSuccesses().doubleValue()  ||  M  >  getNumberOfSuccesses();  [CE]  int  cannot  be  dereferenced  [CONTEXT]      protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();      [BUGGY]  final  double  m  =  getNumberOfSuccesses().doubleValue()  ||  M  >  getNumberOfSuccesses();  [BUGGY]      final  double  n  =  getSampleSize();  return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	293	293	1	replace	final  double  m  =  getNumberOfSuccesses().doubleValue()  ||  M  >  getNumberOfSuccesses();	  final    double    m    =    getNumberOfSuccesses().doubleValue()    ||    m    >    getNumberOfSuccesses();    	non-compiled	[CE]  int  cannot  be  dereferenced	4164	None
1183	[BUG]  [BUGGY]  final  double  m  =  getNumberOfSuccesses().doubleValue()  &&  m  >  getNumberOfSuccesses();  [CE]  int  cannot  be  dereferenced  [CONTEXT]      protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();      [BUGGY]  final  double  m  =  getNumberOfSuccesses().doubleValue()  &&  m  >  getNumberOfSuccesses();  [BUGGY]      final  double  n  =  getSampleSize();  return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	293	293	1	replace	final  double  m  =  getNumberOfSuccesses().doubleValue()  &&  m  >  getNumberOfSuccesses();	  final    double    m    =    getNumberOfSuccesses().doubleValue()    ||    m    >    getNumberOfSuccesses();    	non-compiled	[CE]  int  cannot  be  dereferenced	4164	None
1184	[BUG]  [BUGGY]  final  double  m  =  getNumberOfSuccesses().doubleValue()  ||  N  >  getNumberOfSuccesses();  [CE]  int  cannot  be  dereferenced  [CONTEXT]      protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();      [BUGGY]  final  double  m  =  getNumberOfSuccesses().doubleValue()  ||  N  >  getNumberOfSuccesses();  [BUGGY]      final  double  n  =  getSampleSize();  return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	293	293	1	replace	final  double  m  =  getNumberOfSuccesses().doubleValue()  ||  N  >  getNumberOfSuccesses();	  final    double    m    =    getNumberOfSuccesses().doubleValue()    ||    m    >    getNumberOfSuccesses();    	non-compiled	[CE]  int  cannot  be  dereferenced	4164	None
1194	[BUG]  [BUGGY]  return  numberOfSuccesses  /(numericalVariance  *  getSummarySize())*  populationSize;  [CE]  cannot  find  symbol  [CONTEXT]      public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }      [BUGGY]  return  numberOfSuccesses  /(numericalVariance  *  getSummarySize())*  populationSize;  [BUGGY]      }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	283	283	1	replace	return  numberOfSuccesses  /(numericalVariance  *  getSummarySize())*  populationSize;	  return    numericalVariance    /(numericalVariance    *    getSummarySize())*    populationSize;    	non-compiled	[CE]  cannot  find  symbol	1531	None
