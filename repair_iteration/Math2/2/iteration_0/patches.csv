bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError  [CONTEXT]  public  double  getNumericalVariance()  {  [BUGGY]  if(numericalVarianceIsCalculated)  {  [BUGGY]  numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	279	279	1	add	if(numericalVarianceIsCalculated)  {	if  (!numericalVarianceIsCalculated)  {  	compilable	  [FE]  AssertionError  	3	1	replace
2	[BUG]  [BUGGY]  if(numericalVarianceIsCalculated)  {  [FE]  AssertionError  [FE]    AssertionError  [CONTEXT]  public  double  getNumericalVariance()  {  [BUGGY]  if(numericalVarianceIsCalculated)  {  [BUGGY]  numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	279	279	1	replace	if(numericalVarianceIsCalculated)  {	if  (!numericalVarianceIsCalculated)  {  	compilable	  [FE]  AssertionError  	3	1	replace
3	[BUG]  [BUGGY]    [CE]  illegal  start  of  type  [FE]      AssertionError  [CONTEXT]  public  double  getNumericalVariance()  {  [BUGGY]    [BUGGY]  numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	279	279	1	replace	  	if  (!numericalVarianceIsCalculated)  {  	non-compiled	[CE]  illegal  start  of  type	3	None	replace
4	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError  [CONTEXT]  public  double  getNumericalVariance()  {  [BUGGY]    double  numberOfSuccesses  =  getNumberOfSuccesses();  [BUGGY]  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	279	279	1	add	    double  numberOfSuccesses  =  getNumberOfSuccesses();		compilable	  [FE]  AssertionError  	4	1	add
5	[BUG]  [BUGGY]    double  numberOfSuccesses  =  getNumberOfSuccesses();  [FE]  AssertionError  [FE]    AssertionError  [CONTEXT]  public  double  getNumericalVariance()  {  [BUGGY]    double  numberOfSuccesses  =  getNumberOfSuccesses();  [BUGGY]  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	279	279	1	replace	    double  numberOfSuccesses  =  getNumberOfSuccesses();		compilable	  [FE]  AssertionError  	4	1	add
6	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError  [CONTEXT]  public  double  getNumericalVariance()  {  [BUGGY]    int  numberOfSuccesses  =  getNumberOfSuccesses();  [BUGGY]  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	279	279	1	add	    int  numberOfSuccesses  =  getNumberOfSuccesses();		compilable	  [FE]  AssertionError  	4	1	add
7	[BUG]  [BUGGY]    int  numberOfSuccesses  =  getNumberOfSuccesses();  [FE]  AssertionError  [FE]      AssertionError  [CONTEXT]  public  double  getNumericalVariance()  {  [BUGGY]    int  numberOfSuccesses  =  getNumberOfSuccesses();  [BUGGY]  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	279	279	1	replace	    int  numberOfSuccesses  =  getNumberOfSuccesses();		compilable	  [FE]  AssertionError  	4	1	add
8	[BUG]  [BUGGY]    double  numberOfSuccesses  =  calculateNumberOfSuccesses();  [CE]  cannot  find  symbol  [FE]        AssertionError  [CONTEXT]  public  double  getNumericalVariance()  {  [BUGGY]    double  numberOfSuccesses  =  calculateNumberOfSuccesses();  [BUGGY]  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	279	279	1	replace	    double  numberOfSuccesses  =  calculateNumberOfSuccesses();		non-compiled	[CE]  cannot  find  symbol	4	None	add
