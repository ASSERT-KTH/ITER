bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  Integer  numberOfSuccesses  =  getNumberOfSuccesses();  [CE]  illegal  start  of  type  [FE]          AssertionError      [CONTEXT]      public  double  getNumericalVariance()  {      [BUGGY]  Integer  numberOfSuccesses  =  getNumberOfSuccesses();  [BUGGY]      if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	279	279	1	replace	Integer  numberOfSuccesses  =  getNumberOfSuccesses();	          int    numberOfSuccesses    =    getNumberOfSuccesses();    Integer    numberOfSuccesses    =    getNumberOfSuccesses();    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
2	[BUG]  [BUGGY]  double  numberOfSuccesses  =  calculateNumberOfSuccesses(numericalVariance);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  double  getNumericalVariance()  {      [BUGGY]  double  numberOfSuccesses  =  calculateNumberOfSuccesses(numericalVariance);  [BUGGY]      if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	279	279	1	replace	double  numberOfSuccesses  =  calculateNumberOfSuccesses(numericalVariance);	  double    numberOfSuccesses    =    calculateNumberOfSuccesses(n);    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
3	[BUG]  [BUGGY]  double  numberOfSuccesses  =  calculateNumberOfSuccesses(m);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  double  getNumericalVariance()  {      [BUGGY]  double  numberOfSuccesses  =  calculateNumberOfSuccesses(m);  [BUGGY]      if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	279	279	1	replace	double  numberOfSuccesses  =  calculateNumberOfSuccesses(m);	  double    numberOfSuccesses    =    calculateNumberOfSuccesses(n);    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
4	[BUG]  [BUGGY]  if(numericalVarianceIsCalculated  >  0.0  ||  numberOfSuccesses  >  0.0)  {  [CE]  bad  operand  types  for  binary  operator  '>'  [FE]        AssertionError      [CONTEXT]      public  double  getNumericalVariance()  {      [BUGGY]  if(numericalVarianceIsCalculated  >  0.0  ||  numberOfSuccesses  >  0.0)  {  [BUGGY]      numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	279	279	1	replace	if(numericalVarianceIsCalculated  >  0.0  ||  numberOfSuccesses  >  0.0)  {	  if(numericalVarianceIsCalculated    >    0.0)    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>'	17	None	replace
5	[BUG]  [BUGGY]  If(numericalVarianceIsCalculated)  {  [CE]  ';'  expected  [FE]          AssertionError      [CONTEXT]      public  double  getNumericalVariance()  {      [BUGGY]  If(numericalVarianceIsCalculated)  {  [BUGGY]      numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	279	279	1	replace	If(numericalVarianceIsCalculated)  {	  if(numericalVarianceIsCalculated)    {    If(numericalVarianceIsCalculated)    {    	non-compiled	[CE]  ';'  expected	2	None	replace
6	[BUG]  [BUGGY]  if(numericalVarianceIsCalculated  ||  numberOfSuccesses)  {  [CE]  bad  operand  types  for  binary  operator  '||'  [FE]        AssertionError      [CONTEXT]      public  double  getNumericalVariance()  {      [BUGGY]  if(numericalVarianceIsCalculated  ||  numberOfSuccesses)  {  [BUGGY]      numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	279	279	1	replace	if(numericalVarianceIsCalculated  ||  numberOfSuccesses)  {	  if(numericalVarianceIsCalculated    ||    numericalVarianceIsUnknown)    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '||'	12	None	replace
7	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError      [CONTEXT]      public  double  getNumericalVariance()  {      [BUGGY]  if(this.numericalVarianceIsCalculated)  {  [BUGGY]      numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	279	279	1	add	if(this.numericalVarianceIsCalculated)  {	  if(numericalVarianceIsCalculated)    {    if(numericalVarianceIsCalculated)    {    	compilable	  [FE]  AssertionError  	1	1	replace
8	[BUG]  [BUGGY]  if(this.numericalVarianceIsCalculated)  {  [FE]  AssertionError  [FE]        AssertionError      [CONTEXT]      public  double  getNumericalVariance()  {      [BUGGY]  if(this.numericalVarianceIsCalculated)  {  [BUGGY]      numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	279	279	1	replace	if(this.numericalVarianceIsCalculated)  {	  if(numericalVarianceIsCalculated)    {    if(numericalVarianceIsCalculated)    {    	compilable	  [FE]  AssertionError  	1	1	replace
9	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      public  double  getNumericalVariance()  {      [BUGGY]  if(numericalVarianceIsCalculated  &&  numberOfSuccesses  >  1)  {  [BUGGY]      numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	279	279	1	add	if(numericalVarianceIsCalculated  &&  numberOfSuccesses  >  1)  {	  if(numericalVarianceIsCalculated    ||    numberOfSuccesses    >    1)    {    	compilable	  [FE]  AssertionError  	14	1	replace
10	[BUG]  [BUGGY]  if(numericalVarianceIsCalculated  &&  numberOfSuccesses  >  1)  {  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      public  double  getNumericalVariance()  {      [BUGGY]  if(numericalVarianceIsCalculated  &&  numberOfSuccesses  >  1)  {  [BUGGY]      numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	279	279	1	replace	if(numericalVarianceIsCalculated  &&  numberOfSuccesses  >  1)  {	  if(numericalVarianceIsCalculated    ||    numberOfSuccesses    >    1)    {    	compilable	  [FE]  AssertionError  	14	1	replace
11	[BUG]  [BUGGY]  double  numberOfSuccesses  =  calculateNumberOfSuccesses()  *  populationSize;  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  double  getNumericalVariance()  {      [BUGGY]  double  numberOfSuccesses  =  calculateNumberOfSuccesses()  *  populationSize;  [BUGGY]      if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	279	279	1	replace	double  numberOfSuccesses  =  calculateNumberOfSuccesses()  *  populationSize;	  double    numberOfSuccesses    =    calculateNumberOfSuccesses()    -    populationSize;    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
12	[BUG]  [BUGGY]  double  numberOfSuccesses  =  calculateNumberOfSuccesses()  /  populationSize;  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  double  getNumericalVariance()  {      [BUGGY]  double  numberOfSuccesses  =  calculateNumberOfSuccesses()  /  populationSize;  [BUGGY]      if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	279	279	1	replace	double  numberOfSuccesses  =  calculateNumberOfSuccesses()  /  populationSize;	  double    numberOfSuccesses    =    calculateNumberOfSuccesses()    -    populationSize;    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
13	[BUG]  [BUGGY]  if(numericalVarianceIsCalculated  ||  numericalVarianceIsCalculated)  {  if(numericalVarianceIsCalculated  ||  numericalVarianceIsCalculated)  {  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]      public  double  getNumericalVariance()  {      [BUGGY]  if(numericalVarianceIsCalculated  ||  numericalVarianceIsCalculated)  {  if(numericalVarianceIsCalculated  ||  numericalVarianceIsCalculated)  {  [BUGGY]      numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	279	279	1	replace	if(numericalVarianceIsCalculated    ||    numericalVarianceIsCalculated)    {    if(numericalVarianceIsCalculated  ||  numericalVarianceIsCalculated)  {	  	non-compiled	[CE]  illegal  start  of  expression	18	None	add
14	[BUG]  [BUGGY]  if(numericalVarianceIsCalculated  ||  numericalVarianceIsCalculated)  {  if(numericalVariANCEIsCalculated  ||  numericalVarianceIsCalculated)  {  [CE]  illegal  start  of  expression  [FE]      AssertionError    [CONTEXT]      public  double  getNumericalVariance()  {      [BUGGY]  if(numericalVarianceIsCalculated  ||  numericalVarianceIsCalculated)  {  if(numericalVariANCEIsCalculated  ||  numericalVarianceIsCalculated)  {  [BUGGY]      numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	279	279	1	replace	if(numericalVarianceIsCalculated    ||    numericalVarianceIsCalculated)    {    if(numericalVariANCEIsCalculated  ||  numericalVarianceIsCalculated)  {	  	non-compiled	[CE]  illegal  start  of  expression	18	None	add
15	[BUG]  [BUGGY]  Double  numberOfSuccesses  =  getNumberOfSuccesses();  [CE]  illegal  start  of  type  [FE]        AssertionError      [CONTEXT]      public  double  getNumericalVariance()  {      [BUGGY]  Double  numberOfSuccesses  =  getNumberOfSuccesses();  [BUGGY]      if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	279	279	1	replace	Double  numberOfSuccesses  =  getNumberOfSuccesses();	          double    numberOfSuccesses    =    getNumberOfSuccesses();    double    numberOfSuccesses    =    getNumberOfSuccesses();    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
16	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      public  double  getNumericalVariance()  {      [BUGGY]  if(numericalVarianceIsCalculated  &&  numericalVarianceIsCalculated)  {  [BUGGY]      numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	279	279	1	add	if(numericalVarianceIsCalculated  &&  numericalVarianceIsCalculated)  {	  if(numericalVarianceIsCalculated    ||    numericalVarianceIsCalculated)    {    	compilable	  [FE]  AssertionError  	19	1	replace
17	[BUG]  [BUGGY]  if(numericalVarianceIsCalculated  &&  numericalVarianceIsCalculated)  {  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      public  double  getNumericalVariance()  {      [BUGGY]  if(numericalVarianceIsCalculated  &&  numericalVarianceIsCalculated)  {  [BUGGY]      numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	279	279	1	replace	if(numericalVarianceIsCalculated  &&  numericalVarianceIsCalculated)  {	  if(numericalVarianceIsCalculated    ||    numericalVarianceIsCalculated)    {    	compilable	  [FE]  AssertionError  	19	1	replace
18	[BUG]  [BUGGY]  if(numericalVarianceIsCalculated  ||  numberOfSuccesses  >  1)  {  if(numericalVarianceIsCalculated  ||  numberOfSuccesses  >  1)  {  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]      public  double  getNumericalVariance()  {      [BUGGY]  if(numericalVarianceIsCalculated  ||  numberOfSuccesses  >  1)  {  if(numericalVarianceIsCalculated  ||  numberOfSuccesses  >  1)  {  [BUGGY]      numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	279	279	1	replace	if(numericalVarianceIsCalculated    ||    numberOfSuccesses    >    1)    {    if(numericalVarianceIsCalculated  ||  numberOfSuccesses  >  1)  {	  	non-compiled	[CE]  illegal  start  of  expression	13	None	add
19	[BUG]  [BUGGY]  if(numericalVarianceIsCalculated  ||  numberOfSuccesses  >  1)  {  if(numericalVarianceIsCalculated  ||  numberOfSuccesses  >  2)  {  [CE]  illegal  start  of  expression  [FE]      AssertionError    [CONTEXT]      public  double  getNumericalVariance()  {      [BUGGY]  if(numericalVarianceIsCalculated  ||  numberOfSuccesses  >  1)  {  if(numericalVarianceIsCalculated  ||  numberOfSuccesses  >  2)  {  [BUGGY]      numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	279	279	1	replace	if(numericalVarianceIsCalculated    ||    numberOfSuccesses    >    1)    {    if(numericalVarianceIsCalculated  ||  numberOfSuccesses  >  2)  {	  	non-compiled	[CE]  illegal  start  of  expression	13	None	add
20	[BUG]  [BUGGY]  if(numericalVarianceIsCalculated  ||  numberOfSuccesses  >  1)  {  If(numericalVarianceIsCalculated  ||  numberOfSuccesses  >  1)  {  [CE]  ';'  expected  [FE]    AssertionError    [CONTEXT]      public  double  getNumericalVariance()  {      [BUGGY]  if(numericalVarianceIsCalculated  ||  numberOfSuccesses  >  1)  {  If(numericalVarianceIsCalculated  ||  numberOfSuccesses  >  1)  {  [BUGGY]      numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	279	279	1	replace	if(numericalVarianceIsCalculated    ||    numberOfSuccesses    >    1)    {    If(numericalVarianceIsCalculated  ||  numberOfSuccesses  >  1)  {	  	non-compiled	[CE]  ';'  expected	13	None	add
21	[BUG]  [BUGGY]  if(numericalVarianceIsCalculated  ||  numericalVarianceIsCalculated)  {  If(numericalVarianceIsCalculated  ||  numericalVarianceIsCalculated)  {  [CE]  ';'  expected  [FE]    AssertionError    [CONTEXT]      public  double  getNumericalVariance()  {      [BUGGY]  if(numericalVarianceIsCalculated  ||  numericalVarianceIsCalculated)  {  If(numericalVarianceIsCalculated  ||  numericalVarianceIsCalculated)  {  [BUGGY]      numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	279	279	1	replace	if(numericalVarianceIsCalculated    ||    numericalVarianceIsCalculated)    {    If(numericalVarianceIsCalculated  ||  numericalVarianceIsCalculated)  {	  	non-compiled	[CE]  ';'  expected	18	None	add
22	[BUG]  [BUGGY]  if(numberOfSuccesses  ||  numericalVarianceIsCalculated)  {  [CE]  bad  operand  types  for  binary  operator  '||'  [FE]        AssertionError      [CONTEXT]      public  double  getNumericalVariance()  {      [BUGGY]  if(numberOfSuccesses  ||  numericalVarianceIsCalculated)  {  [BUGGY]      numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	279	279	1	replace	if(numberOfSuccesses  ||  numericalVarianceIsCalculated)  {	  if(numericalVarianceIsCalculated    ||    numericalVarianceIsNullable)    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '||'	3	None	replace
23	[BUG]  [BUGGY]  double  numberOfSuccesses  =  calculateNumberOfSuccesses(n  +  1);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  double  getNumericalVariance()  {      [BUGGY]  double  numberOfSuccesses  =  calculateNumberOfSuccesses(n  +  1);  [BUGGY]      if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	279	279	1	replace	double  numberOfSuccesses  =  calculateNumberOfSuccesses(n  +  1);	  double    numberOfSuccesses    =    calculateNumberOfSuccesses(n);    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
24	[BUG]  [BUGGY]  if(numericalVarianceIsCalculated  >  1)  {  [CE]  bad  operand  types  for  binary  operator  '>'  [FE]    AssertionError    [CONTEXT]      public  double  getNumericalVariance()  {      [BUGGY]  if(numericalVarianceIsCalculated  >  1)  {  [BUGGY]      numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	279	279	1	replace	if(numericalVarianceIsCalculated  >  1)  {	  if(numericalVarianceIsCalculated    ||    numberOfSuccesses    >    1)    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>'	14	None	replace
25	[BUG]  [BUGGY]  double  numberOfSuccesses  =  calculateNumberOfSuccesses(null);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  double  getNumericalVariance()  {      [BUGGY]  double  numberOfSuccesses  =  calculateNumberOfSuccesses(null);  [BUGGY]      if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	279	279	1	replace	double  numberOfSuccesses  =  calculateNumberOfSuccesses(null);	  double    numberOfSuccesses    =    calculateNumberOfSuccesses(n);    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
26	[BUG]  [BUGGY]  Double  numberOfSuccesses  =  calculateNumberOfSuccesses();  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  double  getNumericalVariance()  {      [BUGGY]  Double  numberOfSuccesses  =  calculateNumberOfSuccesses();  [BUGGY]      if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	279	279	1	replace	Double  numberOfSuccesses  =  calculateNumberOfSuccesses();	  double    numberOfSuccesses    =    calculateNumberOfSuccesses()    +    1;    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
27	[BUG]  [BUGGY]  if(numericalVarianceIsCalculated  >  0.0  ||  numericalVarianceIsCalculated  >  0.0)  {  [CE]  bad  operand  types  for  binary  operator  '>'  [FE]        AssertionError      [CONTEXT]      public  double  getNumericalVariance()  {      [BUGGY]  if(numericalVarianceIsCalculated  >  0.0  ||  numericalVarianceIsCalculated  >  0.0)  {  [BUGGY]      numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	279	279	1	replace	if(numericalVarianceIsCalculated  >  0.0  ||  numericalVarianceIsCalculated  >  0.0)  {	  if(numericalVarianceIsCalculated    >    0.0)    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>'	17	None	replace
