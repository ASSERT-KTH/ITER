bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  if(numericalVarianceIsCalculated)  {  if(numericalVarianceIsCalculated)  {  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]    public  double  getNumericalVariance()  {    [BUGGY]  if(numericalVarianceIsCalculated)  {  if(numericalVarianceIsCalculated)  {  [BUGGY]    numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	279	279	1	replace	if(numericalVarianceIsCalculated)    {    if(numericalVarianceIsCalculated)  {	  	non-compiled	[CE]  illegal  start  of  expression	1	None	add
2	[BUG]  [BUGGY]  if(numericalVarianceIsCalculated)  {  If(numericalVarianceIsCalculated)  {  [CE]  ';'  expected  [FE]      AssertionError    [CONTEXT]    public  double  getNumericalVariance()  {    [BUGGY]  if(numericalVarianceIsCalculated)  {  If(numericalVarianceIsCalculated)  {  [BUGGY]    numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	279	279	1	replace	if(numericalVarianceIsCalculated)    {    If(numericalVarianceIsCalculated)  {	  	non-compiled	[CE]  ';'  expected	1	None	add
3	[BUG]  [BUGGY]  if(numericalVarianceIsCalculated  ||  numericalVarianceIsNullable)  {  [CE]  cannot  find  symbol  numericalVarianceIsNullable  [FE]    AssertionError    [CONTEXT]    public  double  getNumericalVariance()  {    [BUGGY]  if(numericalVarianceIsCalculated  ||  numericalVarianceIsNullable)  {  [BUGGY]    numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	279	279	1	replace	if(numericalVarianceIsCalculated  ||  numericalVarianceIsNullable)  {	  if(numericalVarianceIsCalculated)    {    	non-compiled	[CE]  cannot  find  symbol  numericalVarianceIsNullable	2	None	replace
4	[BUG]  [BUGGY]  int  numberOfSuccesses  =  getNumberOfSuccesses()  +  1;  [CE]  illegal  start  of  type  [FE]    AssertionError    [CONTEXT]    public  double  getNumericalVariance()  {    [BUGGY]  int  numberOfSuccesses  =  getNumberOfSuccesses()  +  1;  [BUGGY]    if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	279	279	1	replace	int  numberOfSuccesses  =  getNumberOfSuccesses()  +  1;	      int    numberOfSuccesses    =    getNumberOfSuccesses();    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
5	[BUG]  [BUGGY]      double  numberOfSuccesses  =  getNumberOfSuccesses();  double  numberOfSuccesses  =  getNumberOfSuccesses();  [CE]  variable  numberOfSuccesses  is  already  defined  in  method  getNumericalVariance()  [FE]    AssertionError    [CONTEXT]    public  double  getNumericalVariance()  {    [BUGGY]      double  numberOfSuccesses  =  getNumberOfSuccesses();  double  numberOfSuccesses  =  getNumberOfSuccesses();  [BUGGY]    if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	279	279	1	replace	        double    numberOfSuccesses    =    getNumberOfSuccesses();    double  numberOfSuccesses  =  getNumberOfSuccesses();	  	non-compiled	[CE]  variable  numberOfSuccesses  is  already  defined  in  method  getNumericalVariance()	4	None	add
6	[BUG]  [BUGGY]      double  numberOfSuccesses  =  getNumberOfSuccesses();  Double  numberOfSuccesses  =  getNumberOfSuccesses();  [CE]  variable  numberOfSuccesses  is  already  defined  in  method  getNumericalVariance()  [FE]      AssertionError    [CONTEXT]    public  double  getNumericalVariance()  {    [BUGGY]      double  numberOfSuccesses  =  getNumberOfSuccesses();  Double  numberOfSuccesses  =  getNumberOfSuccesses();  [BUGGY]    if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	279	279	1	replace	        double    numberOfSuccesses    =    getNumberOfSuccesses();    Double  numberOfSuccesses  =  getNumberOfSuccesses();	  	non-compiled	[CE]  variable  numberOfSuccesses  is  already  defined  in  method  getNumericalVariance()	4	None	add
7	[BUG]  [BUGGY]  double  numberOfSuccesses  =  getNumberOfSuccesses()  +  1;  [CE]  illegal  start  of  type  [FE]    AssertionError    [CONTEXT]    public  double  getNumericalVariance()  {    [BUGGY]  double  numberOfSuccesses  =  getNumberOfSuccesses()  +  1;  [BUGGY]    if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	279	279	1	replace	double  numberOfSuccesses  =  getNumberOfSuccesses()  +  1;	      double    numberOfSuccesses    =    getNumberOfSuccesses();    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
8	[BUG]  [BUGGY]  double  numberOfSuccesses  =  calculateNumberOfSuccesses()  +  1;  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    public  double  getNumericalVariance()  {    [BUGGY]  double  numberOfSuccesses  =  calculateNumberOfSuccesses()  +  1;  [BUGGY]    if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	279	279	1	replace	double  numberOfSuccesses  =  calculateNumberOfSuccesses()  +  1;	      double    numberOfSuccesses    =    calculateNumberOfSuccesses();    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
9	[BUG]  [BUGGY]      int  numberOfSuccesses  =  getNumberOfSuccesses();  int  numberOfSuccesses  =  getNumberOfSuccesses();  [CE]  variable  numberOfSuccesses  is  already  defined  in  method  getNumericalVariance()  [FE]    AssertionError    [CONTEXT]    public  double  getNumericalVariance()  {    [BUGGY]      int  numberOfSuccesses  =  getNumberOfSuccesses();  int  numberOfSuccesses  =  getNumberOfSuccesses();  [BUGGY]    if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	279	279	1	replace	        int    numberOfSuccesses    =    getNumberOfSuccesses();    int  numberOfSuccesses  =  getNumberOfSuccesses();	  	non-compiled	[CE]  variable  numberOfSuccesses  is  already  defined  in  method  getNumericalVariance()	6	None	add
10	[BUG]  [BUGGY]      int  numberOfSuccesses  =  getNumberOfSuccesses();  Integer  numberOfSuccesses  =  getNumberOfSuccesses();  [CE]  variable  numberOfSuccesses  is  already  defined  in  method  getNumericalVariance()  [FE]      AssertionError    [CONTEXT]    public  double  getNumericalVariance()  {    [BUGGY]      int  numberOfSuccesses  =  getNumberOfSuccesses();  Integer  numberOfSuccesses  =  getNumberOfSuccesses();  [BUGGY]    if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	279	279	1	replace	        int    numberOfSuccesses    =    getNumberOfSuccesses();    Integer  numberOfSuccesses  =  getNumberOfSuccesses();	  	non-compiled	[CE]  variable  numberOfSuccesses  is  already  defined  in  method  getNumericalVariance()	6	None	add
11	[BUG]  [BUGGY]      double  numberOfSuccesses  =  getNumberOfSuccesses();  int  numberOfSuccesses  =  getNumberOfSuccesses();  [CE]  variable  numberOfSuccesses  is  already  defined  in  method  getNumericalVariance()  [FE]    AssertionError    [CONTEXT]    public  double  getNumericalVariance()  {    [BUGGY]      double  numberOfSuccesses  =  getNumberOfSuccesses();  int  numberOfSuccesses  =  getNumberOfSuccesses();  [BUGGY]    if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	279	279	1	replace	        double    numberOfSuccesses    =    getNumberOfSuccesses();    int  numberOfSuccesses  =  getNumberOfSuccesses();	  	non-compiled	[CE]  variable  numberOfSuccesses  is  already  defined  in  method  getNumericalVariance()	4	None	add
12	[BUG]  [BUGGY]  if(numericalVarianceIsCalculated  ||  numericalVarianceIsUnknown)  {  [CE]  cannot  find  symbol  numericalVarianceIsUnknown  [FE]    AssertionError    [CONTEXT]    public  double  getNumericalVariance()  {    [BUGGY]  if(numericalVarianceIsCalculated  ||  numericalVarianceIsUnknown)  {  [BUGGY]    numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	279	279	1	replace	if(numericalVarianceIsCalculated  ||  numericalVarianceIsUnknown)  {	  if(numericalVarianceIsCalculated)    {    	non-compiled	[CE]  cannot  find  symbol  numericalVarianceIsUnknown	2	None	replace
13	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]    public  double  getNumericalVariance()  {    [BUGGY]  if(numericalVarianceIsCalculated  ||  numberOfSuccesses  >  1)  {  [BUGGY]    numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	279	279	1	add	if(numericalVarianceIsCalculated  ||  numberOfSuccesses  >  1)  {	  if(numericalVarianceIsCalculated)    {    	compilable	  [FE]  AssertionError  	2	1	replace
14	[BUG]  [BUGGY]  if(numericalVarianceIsCalculated  ||  numberOfSuccesses  >  1)  {  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]    public  double  getNumericalVariance()  {    [BUGGY]  if(numericalVarianceIsCalculated  ||  numberOfSuccesses  >  1)  {  [BUGGY]    numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	279	279	1	replace	if(numericalVarianceIsCalculated  ||  numberOfSuccesses  >  1)  {	  if(numericalVarianceIsCalculated)    {    	compilable	  [FE]  AssertionError  	2	1	replace
15	[BUG]  [BUGGY]  double  numberOfSuccesses  =  calculateNumberOfSuccesses(n);  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    public  double  getNumericalVariance()  {    [BUGGY]  double  numberOfSuccesses  =  calculateNumberOfSuccesses(n);  [BUGGY]    if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	279	279	1	replace	double  numberOfSuccesses  =  calculateNumberOfSuccesses(n);	      double    numberOfSuccesses    =    calculateNumberOfSuccesses();    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
16	[BUG]  [BUGGY]  double  numberOfSuccesses  =  calculateNumberOfSuccesses()  -  populationSize;  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    public  double  getNumericalVariance()  {    [BUGGY]  double  numberOfSuccesses  =  calculateNumberOfSuccesses()  -  populationSize;  [BUGGY]    if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	279	279	1	replace	double  numberOfSuccesses  =  calculateNumberOfSuccesses()  -  populationSize;	      double    numberOfSuccesses    =    calculateNumberOfSuccesses();    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
17	[BUG]  [BUGGY]  if(numericalVarianceIsCalculated  >  0.0)  {  [CE]  bad  operand  types  for  binary  operator  '>'  [FE]    AssertionError    [CONTEXT]    public  double  getNumericalVariance()  {    [BUGGY]  if(numericalVarianceIsCalculated  >  0.0)  {  [BUGGY]    numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	279	279	1	replace	if(numericalVarianceIsCalculated  >  0.0)  {	  if(numericalVarianceIsCalculated)    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>'	2	None	replace
18	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]    public  double  getNumericalVariance()  {    [BUGGY]  if(numericalVarianceIsCalculated  ||  numericalVarianceIsCalculated)  {  [BUGGY]    numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	279	279	1	add	if(numericalVarianceIsCalculated  ||  numericalVarianceIsCalculated)  {	  if(numericalVarianceIsCalculated)    {    	compilable	  [FE]  AssertionError  	2	1	replace
19	[BUG]  [BUGGY]  if(numericalVarianceIsCalculated  ||  numericalVarianceIsCalculated)  {  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]    public  double  getNumericalVariance()  {    [BUGGY]  if(numericalVarianceIsCalculated  ||  numericalVarianceIsCalculated)  {  [BUGGY]    numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	279	279	1	replace	if(numericalVarianceIsCalculated  ||  numericalVarianceIsCalculated)  {	  if(numericalVarianceIsCalculated)    {    	compilable	  [FE]  AssertionError  	2	1	replace
