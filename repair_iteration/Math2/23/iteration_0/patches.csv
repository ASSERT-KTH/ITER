bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]    NumberIsTooLargeException(LocalizedFormats.SAMPLE_SIZE_LARGER_THAN_POPULATION_SIZE,  numberOfSuccesses,  populationSize,  true);  [CE]  cannot  find  symbol  [FE]    AssertionError  [CONTEXT]  }  if  (numberOfSuccesses  <  0)  {  throw  new  NotPositiveException(LocalizedFormats.NUMBER_OF_SUCCESSES,  numberOfSuccesses);  }  if  (sampleSize  <  0)  {  throw  new  NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,  sampleSize);  }  [BUGGY]    NumberIsTooLargeException(LocalizedFormats.SAMPLE_SIZE_LARGER_THAN_POPULATION_SIZE,  numberOfSuccesses,  populationSize,  true);  [BUGGY]  if  (numberOfSuccesses  >  populationSize)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.NUMBER_OF_SUCCESS_LARGER_THAN_POPULATION_SIZE,  numberOfSuccesses,  populationSize,  true);  }  if  (sampleSize  >  populationSize)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.SAMPLE_SIZE_LARGER_THAN_POPULATION_SIZE,  sampleSize,  populationSize,  true);  }  this.numberOfSuccesses  =  numberOfSuccesses;  this.populationSize  =  populationSize;  [CLASS]  HypergeometricDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,int,int,int)  RandomGenerator  rng  int  populationSize  int  numberOfSuccesses  int  sampleSize  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  long  serialVersionUID  int  numberOfSuccesses  populationSize  sampleSize  RandomGenerator  rng  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.25	99	99	1	replace	    NumberIsTooLargeException(LocalizedFormats.SAMPLE_SIZE_LARGER_THAN_POPULATION_SIZE,  numberOfSuccesses,  populationSize,  true);		non-compiled	[CE]  cannot  find  symbol	46	None	add
2	[BUG]  [BUGGY]    NumberIsTooLargeException(LocalizedFormats.SAMPLE_SIZE_LARGER_THAN_POPULATION_SIZE,  numberOfSuccesses,  sampleSize,  true);  [CE]  cannot  find  symbol  [FE]      AssertionError  [CONTEXT]  }  if  (numberOfSuccesses  <  0)  {  throw  new  NotPositiveException(LocalizedFormats.NUMBER_OF_SUCCESSES,  numberOfSuccesses);  }  if  (sampleSize  <  0)  {  throw  new  NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,  sampleSize);  }  [BUGGY]    NumberIsTooLargeException(LocalizedFormats.SAMPLE_SIZE_LARGER_THAN_POPULATION_SIZE,  numberOfSuccesses,  sampleSize,  true);  [BUGGY]  if  (numberOfSuccesses  >  populationSize)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.NUMBER_OF_SUCCESS_LARGER_THAN_POPULATION_SIZE,  numberOfSuccesses,  populationSize,  true);  }  if  (sampleSize  >  populationSize)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.SAMPLE_SIZE_LARGER_THAN_POPULATION_SIZE,  sampleSize,  populationSize,  true);  }  this.numberOfSuccesses  =  numberOfSuccesses;  this.populationSize  =  populationSize;  [CLASS]  HypergeometricDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,int,int,int)  RandomGenerator  rng  int  populationSize  int  numberOfSuccesses  int  sampleSize  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  long  serialVersionUID  int  numberOfSuccesses  populationSize  sampleSize  RandomGenerator  rng  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.25	99	99	1	replace	    NumberIsTooLargeException(LocalizedFormats.SAMPLE_SIZE_LARGER_THAN_POPULATION_SIZE,  numberOfSuccesses,  sampleSize,  true);		non-compiled	[CE]  cannot  find  symbol	46	None	add
3	[BUG]  [BUGGY]    NumberIsTooLargeException(LocalizedFormats.SAMPLE_SIZE_LARGER_THAN_POPULATION_SIZE,  sampleSize,  true);  [CE]  cannot  find  symbol  [FE]        AssertionError  [CONTEXT]  }  if  (numberOfSuccesses  <  0)  {  throw  new  NotPositiveException(LocalizedFormats.NUMBER_OF_SUCCESSES,  numberOfSuccesses);  }  if  (sampleSize  <  0)  {  throw  new  NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,  sampleSize);  }  [BUGGY]    NumberIsTooLargeException(LocalizedFormats.SAMPLE_SIZE_LARGER_THAN_POPULATION_SIZE,  sampleSize,  true);  [BUGGY]  if  (numberOfSuccesses  >  populationSize)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.NUMBER_OF_SUCCESS_LARGER_THAN_POPULATION_SIZE,  numberOfSuccesses,  populationSize,  true);  }  if  (sampleSize  >  populationSize)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.SAMPLE_SIZE_LARGER_THAN_POPULATION_SIZE,  sampleSize,  populationSize,  true);  }  this.numberOfSuccesses  =  numberOfSuccesses;  this.populationSize  =  populationSize;  [CLASS]  HypergeometricDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,int,int,int)  RandomGenerator  rng  int  populationSize  int  numberOfSuccesses  int  sampleSize  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  long  serialVersionUID  int  numberOfSuccesses  populationSize  sampleSize  RandomGenerator  rng  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.25	99	99	1	replace	    NumberIsTooLargeException(LocalizedFormats.SAMPLE_SIZE_LARGER_THAN_POPULATION_SIZE,  sampleSize,  true);		non-compiled	[CE]  cannot  find  symbol	46	None	add
4	[BUG]  [BUGGY]  [FE]  NumberIsTooLargeException  [FE]    AssertionError  [CONTEXT]  }  if  (numberOfSuccesses  <  0)  {  throw  new  NotPositiveException(LocalizedFormats.NUMBER_OF_SUCCESSES,  numberOfSuccesses);  }  if  (sampleSize  <  0)  {  throw  new  NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,  sampleSize);  }  [BUGGY]  if(numberOfSuccesses  <  populationSize)  {  [BUGGY]  throw  new  NumberIsTooLargeException(LocalizedFormats.NUMBER_OF_SUCCESS_LARGER_THAN_POPULATION_SIZE,  numberOfSuccesses,  populationSize,  true);  }  if  (sampleSize  >  populationSize)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.SAMPLE_SIZE_LARGER_THAN_POPULATION_SIZE,  sampleSize,  populationSize,  true);  }  this.numberOfSuccesses  =  numberOfSuccesses;  this.populationSize  =  populationSize;  [CLASS]  HypergeometricDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,int,int,int)  RandomGenerator  rng  int  populationSize  int  numberOfSuccesses  int  sampleSize  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  long  serialVersionUID  int  numberOfSuccesses  populationSize  sampleSize  RandomGenerator  rng  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.25	99	99	1	add	if(numberOfSuccesses  <  populationSize)  {	if  (numberOfSuccesses  >  populationSize)  {  	compilable	  [FE]  NumberIsTooLargeException  	45	16	replace
5	[BUG]  [BUGGY]  if(numberOfSuccesses  <  populationSize)  {  [FE]  NumberIsTooLargeException  [FE]    AssertionError  [CONTEXT]  }  if  (numberOfSuccesses  <  0)  {  throw  new  NotPositiveException(LocalizedFormats.NUMBER_OF_SUCCESSES,  numberOfSuccesses);  }  if  (sampleSize  <  0)  {  throw  new  NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,  sampleSize);  }  [BUGGY]  if(numberOfSuccesses  <  populationSize)  {  [BUGGY]  throw  new  NumberIsTooLargeException(LocalizedFormats.NUMBER_OF_SUCCESS_LARGER_THAN_POPULATION_SIZE,  numberOfSuccesses,  populationSize,  true);  }  if  (sampleSize  >  populationSize)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.SAMPLE_SIZE_LARGER_THAN_POPULATION_SIZE,  sampleSize,  populationSize,  true);  }  this.numberOfSuccesses  =  numberOfSuccesses;  this.populationSize  =  populationSize;  [CLASS]  HypergeometricDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,int,int,int)  RandomGenerator  rng  int  populationSize  int  numberOfSuccesses  int  sampleSize  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  long  serialVersionUID  int  numberOfSuccesses  populationSize  sampleSize  RandomGenerator  rng  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.25	99	99	1	replace	if(numberOfSuccesses  <  populationSize)  {	if  (numberOfSuccesses  >  populationSize)  {  	compilable	  [FE]  NumberIsTooLargeException  	45	16	replace
6	[BUG]  [BUGGY]  if(numberOfSuccesses  <  =  populationSize)  {  [CE]  illegal  start  of  expression  [FE]      AssertionError  [CONTEXT]  }  if  (numberOfSuccesses  <  0)  {  throw  new  NotPositiveException(LocalizedFormats.NUMBER_OF_SUCCESSES,  numberOfSuccesses);  }  if  (sampleSize  <  0)  {  throw  new  NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,  sampleSize);  }  [BUGGY]  if(numberOfSuccesses  <  =  populationSize)  {  [BUGGY]  throw  new  NumberIsTooLargeException(LocalizedFormats.NUMBER_OF_SUCCESS_LARGER_THAN_POPULATION_SIZE,  numberOfSuccesses,  populationSize,  true);  }  if  (sampleSize  >  populationSize)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.SAMPLE_SIZE_LARGER_THAN_POPULATION_SIZE,  sampleSize,  populationSize,  true);  }  this.numberOfSuccesses  =  numberOfSuccesses;  this.populationSize  =  populationSize;  [CLASS]  HypergeometricDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,int,int,int)  RandomGenerator  rng  int  populationSize  int  numberOfSuccesses  int  sampleSize  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  long  serialVersionUID  int  numberOfSuccesses  populationSize  sampleSize  RandomGenerator  rng  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.25	99	99	1	replace	if(numberOfSuccesses  <  =  populationSize)  {	if  (numberOfSuccesses  >  populationSize)  {  	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
7	[BUG]  [BUGGY]    NumberIsTooLargeException(LocalizedFormats.SAMPLE_SIZE_LARGER_THAN_POPULATION_SIZE,  numberOfSuccesses,  true);  [CE]  cannot  find  symbol  [FE]    AssertionError  [CONTEXT]  }  if  (numberOfSuccesses  <  0)  {  throw  new  NotPositiveException(LocalizedFormats.NUMBER_OF_SUCCESSES,  numberOfSuccesses);  }  if  (sampleSize  <  0)  {  throw  new  NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,  sampleSize);  }  [BUGGY]    NumberIsTooLargeException(LocalizedFormats.SAMPLE_SIZE_LARGER_THAN_POPULATION_SIZE,  numberOfSuccesses,  true);  [BUGGY]  if  (numberOfSuccesses  >  populationSize)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.NUMBER_OF_SUCCESS_LARGER_THAN_POPULATION_SIZE,  numberOfSuccesses,  populationSize,  true);  }  if  (sampleSize  >  populationSize)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.SAMPLE_SIZE_LARGER_THAN_POPULATION_SIZE,  sampleSize,  populationSize,  true);  }  this.numberOfSuccesses  =  numberOfSuccesses;  this.populationSize  =  populationSize;  [CLASS]  HypergeometricDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,int,int,int)  RandomGenerator  rng  int  populationSize  int  numberOfSuccesses  int  sampleSize  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  long  serialVersionUID  int  numberOfSuccesses  populationSize  sampleSize  RandomGenerator  rng  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.25	99	99	1	replace	    NumberIsTooLargeException(LocalizedFormats.SAMPLE_SIZE_LARGER_THAN_POPULATION_SIZE,  numberOfSuccesses,  true);		non-compiled	[CE]  cannot  find  symbol	46	None	add
8	[BUG]  [BUGGY]    NumberIsTooLargeException(LocalizedFormats.SAMPLE_SIZE_LARGER_THAN_POPULATION_SIZE,  numberOfSuccesses,  [CE]  illegal  start  of  expression  [FE]      AssertionError  [CONTEXT]  }  if  (numberOfSuccesses  <  0)  {  throw  new  NotPositiveException(LocalizedFormats.NUMBER_OF_SUCCESSES,  numberOfSuccesses);  }  if  (sampleSize  <  0)  {  throw  new  NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,  sampleSize);  }  [BUGGY]    NumberIsTooLargeException(LocalizedFormats.SAMPLE_SIZE_LARGER_THAN_POPULATION_SIZE,  numberOfSuccesses,  [BUGGY]  if  (numberOfSuccesses  >  populationSize)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.NUMBER_OF_SUCCESS_LARGER_THAN_POPULATION_SIZE,  numberOfSuccesses,  populationSize,  true);  }  if  (sampleSize  >  populationSize)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.SAMPLE_SIZE_LARGER_THAN_POPULATION_SIZE,  sampleSize,  populationSize,  true);  }  this.numberOfSuccesses  =  numberOfSuccesses;  this.populationSize  =  populationSize;  [CLASS]  HypergeometricDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,int,int,int)  RandomGenerator  rng  int  populationSize  int  numberOfSuccesses  int  sampleSize  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  long  serialVersionUID  int  numberOfSuccesses  populationSize  sampleSize  RandomGenerator  rng  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.25	99	99	1	replace	    NumberIsTooLargeException(LocalizedFormats.SAMPLE_SIZE_LARGER_THAN_POPULATION_SIZE,  numberOfSuccesses,		non-compiled	[CE]  illegal  start  of  expression	46	None	add
9	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError  [CONTEXT]  }  if  (numberOfSuccesses  <  0)  {  throw  new  NotPositiveException(LocalizedFormats.NUMBER_OF_SUCCESSES,  numberOfSuccesses);  }  if  (sampleSize  <  0)  {  throw  new  NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,  sampleSize);  }  [BUGGY]    if(numberOfSuccesses  >  populationSize)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.SAMPLE_SIZE_LARGER_THAN_POPULATION_SIZE,  numberOfSuccesses,  populationSize,  true);  }  [BUGGY]  if  (numberOfSuccesses  >  populationSize)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.NUMBER_OF_SUCCESS_LARGER_THAN_POPULATION_SIZE,  numberOfSuccesses,  populationSize,  true);  }  if  (sampleSize  >  populationSize)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.SAMPLE_SIZE_LARGER_THAN_POPULATION_SIZE,  sampleSize,  populationSize,  true);  }  this.numberOfSuccesses  =  numberOfSuccesses;  this.populationSize  =  populationSize;  [CLASS]  HypergeometricDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,int,int,int)  RandomGenerator  rng  int  populationSize  int  numberOfSuccesses  int  sampleSize  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  long  serialVersionUID  int  numberOfSuccesses  populationSize  sampleSize  RandomGenerator  rng  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.25	99	99	1	add	    if(numberOfSuccesses  >  populationSize)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.SAMPLE_SIZE_LARGER_THAN_POPULATION_SIZE,  numberOfSuccesses,  populationSize,  true);  }		compilable	  [FE]  AssertionError  	46	1	add
10	[BUG]  [BUGGY]    if(numberOfSuccesses  >  populationSize)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.SAMPLE_SIZE_LARGER_THAN_POPULATION_SIZE,  numberOfSuccesses,  populationSize,  true);  }  [FE]  AssertionError  [FE]    AssertionError  [CONTEXT]  }  if  (numberOfSuccesses  <  0)  {  throw  new  NotPositiveException(LocalizedFormats.NUMBER_OF_SUCCESSES,  numberOfSuccesses);  }  if  (sampleSize  <  0)  {  throw  new  NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,  sampleSize);  }  [BUGGY]    if(numberOfSuccesses  >  populationSize)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.SAMPLE_SIZE_LARGER_THAN_POPULATION_SIZE,  numberOfSuccesses,  populationSize,  true);  }  [BUGGY]  if  (numberOfSuccesses  >  populationSize)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.NUMBER_OF_SUCCESS_LARGER_THAN_POPULATION_SIZE,  numberOfSuccesses,  populationSize,  true);  }  if  (sampleSize  >  populationSize)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.SAMPLE_SIZE_LARGER_THAN_POPULATION_SIZE,  sampleSize,  populationSize,  true);  }  this.numberOfSuccesses  =  numberOfSuccesses;  this.populationSize  =  populationSize;  [CLASS]  HypergeometricDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,int,int,int)  RandomGenerator  rng  int  populationSize  int  numberOfSuccesses  int  sampleSize  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  long  serialVersionUID  int  numberOfSuccesses  populationSize  sampleSize  RandomGenerator  rng  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.25	99	99	1	replace	    if(numberOfSuccesses  >  populationSize)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.SAMPLE_SIZE_LARGER_THAN_POPULATION_SIZE,  numberOfSuccesses,  populationSize,  true);  }		compilable	  [FE]  AssertionError  	46	1	add
11	[BUG]  [BUGGY]  [FE]  NumberIsTooLargeException  [FE]      AssertionError  [CONTEXT]  }  if  (numberOfSuccesses  <  0)  {  throw  new  NotPositiveException(LocalizedFormats.NUMBER_OF_SUCCESSES,  numberOfSuccesses);  }  if  (sampleSize  <  0)  {  throw  new  NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,  sampleSize);  }  [BUGGY]    if(numberOfSuccesses  <  populationSize)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.SAMPLE_SIZE_LARGER_THAN_POPULATION_SIZE,  numberOfSuccesses,  populationSize,  true);  }  [BUGGY]  if  (numberOfSuccesses  >  populationSize)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.NUMBER_OF_SUCCESS_LARGER_THAN_POPULATION_SIZE,  numberOfSuccesses,  populationSize,  true);  }  if  (sampleSize  >  populationSize)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.SAMPLE_SIZE_LARGER_THAN_POPULATION_SIZE,  sampleSize,  populationSize,  true);  }  this.numberOfSuccesses  =  numberOfSuccesses;  this.populationSize  =  populationSize;  [CLASS]  HypergeometricDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,int,int,int)  RandomGenerator  rng  int  populationSize  int  numberOfSuccesses  int  sampleSize  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  long  serialVersionUID  int  numberOfSuccesses  populationSize  sampleSize  RandomGenerator  rng  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.25	99	99	1	add	    if(numberOfSuccesses  <  populationSize)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.SAMPLE_SIZE_LARGER_THAN_POPULATION_SIZE,  numberOfSuccesses,  populationSize,  true);  }		compilable	  [FE]  NumberIsTooLargeException  	46	16	add
12	[BUG]  [BUGGY]    if(numberOfSuccesses  <  populationSize)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.SAMPLE_SIZE_LARGER_THAN_POPULATION_SIZE,  numberOfSuccesses,  populationSize,  true);  }  [FE]  NumberIsTooLargeException  [FE]      AssertionError  [CONTEXT]  }  if  (numberOfSuccesses  <  0)  {  throw  new  NotPositiveException(LocalizedFormats.NUMBER_OF_SUCCESSES,  numberOfSuccesses);  }  if  (sampleSize  <  0)  {  throw  new  NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,  sampleSize);  }  [BUGGY]    if(numberOfSuccesses  <  populationSize)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.SAMPLE_SIZE_LARGER_THAN_POPULATION_SIZE,  numberOfSuccesses,  populationSize,  true);  }  [BUGGY]  if  (numberOfSuccesses  >  populationSize)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.NUMBER_OF_SUCCESS_LARGER_THAN_POPULATION_SIZE,  numberOfSuccesses,  populationSize,  true);  }  if  (sampleSize  >  populationSize)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.SAMPLE_SIZE_LARGER_THAN_POPULATION_SIZE,  sampleSize,  populationSize,  true);  }  this.numberOfSuccesses  =  numberOfSuccesses;  this.populationSize  =  populationSize;  [CLASS]  HypergeometricDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,int,int,int)  RandomGenerator  rng  int  populationSize  int  numberOfSuccesses  int  sampleSize  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  long  serialVersionUID  int  numberOfSuccesses  populationSize  sampleSize  RandomGenerator  rng  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.25	99	99	1	replace	    if(numberOfSuccesses  <  populationSize)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.SAMPLE_SIZE_LARGER_THAN_POPULATION_SIZE,  numberOfSuccesses,  populationSize,  true);  }		compilable	  [FE]  NumberIsTooLargeException  	46	16	add
13	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError  [CONTEXT]  }  if  (numberOfSuccesses  <  0)  {  throw  new  NotPositiveException(LocalizedFormats.NUMBER_OF_SUCCESSES,  numberOfSuccesses);  }  if  (sampleSize  <  0)  {  throw  new  NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,  sampleSize);  }  [BUGGY]    if(numberOfSuccesses  >  populationSize)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.SAMPLE_SIZE_LARGER_THAN_POPULATION_SIZE,  numberOfSuccesses,  sampleSize,  true);  }  [BUGGY]  if  (numberOfSuccesses  >  populationSize)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.NUMBER_OF_SUCCESS_LARGER_THAN_POPULATION_SIZE,  numberOfSuccesses,  populationSize,  true);  }  if  (sampleSize  >  populationSize)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.SAMPLE_SIZE_LARGER_THAN_POPULATION_SIZE,  sampleSize,  populationSize,  true);  }  this.numberOfSuccesses  =  numberOfSuccesses;  this.populationSize  =  populationSize;  [CLASS]  HypergeometricDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,int,int,int)  RandomGenerator  rng  int  populationSize  int  numberOfSuccesses  int  sampleSize  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  long  serialVersionUID  int  numberOfSuccesses  populationSize  sampleSize  RandomGenerator  rng  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.25	99	99	1	add	    if(numberOfSuccesses  >  populationSize)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.SAMPLE_SIZE_LARGER_THAN_POPULATION_SIZE,  numberOfSuccesses,  sampleSize,  true);  }		compilable	  [FE]  AssertionError  	46	1	add
14	[BUG]  [BUGGY]    if(numberOfSuccesses  >  populationSize)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.SAMPLE_SIZE_LARGER_THAN_POPULATION_SIZE,  numberOfSuccesses,  sampleSize,  true);  }  [FE]  AssertionError  [FE]        AssertionError  [CONTEXT]  }  if  (numberOfSuccesses  <  0)  {  throw  new  NotPositiveException(LocalizedFormats.NUMBER_OF_SUCCESSES,  numberOfSuccesses);  }  if  (sampleSize  <  0)  {  throw  new  NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,  sampleSize);  }  [BUGGY]    if(numberOfSuccesses  >  populationSize)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.SAMPLE_SIZE_LARGER_THAN_POPULATION_SIZE,  numberOfSuccesses,  sampleSize,  true);  }  [BUGGY]  if  (numberOfSuccesses  >  populationSize)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.NUMBER_OF_SUCCESS_LARGER_THAN_POPULATION_SIZE,  numberOfSuccesses,  populationSize,  true);  }  if  (sampleSize  >  populationSize)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.SAMPLE_SIZE_LARGER_THAN_POPULATION_SIZE,  sampleSize,  populationSize,  true);  }  this.numberOfSuccesses  =  numberOfSuccesses;  this.populationSize  =  populationSize;  [CLASS]  HypergeometricDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,int,int,int)  RandomGenerator  rng  int  populationSize  int  numberOfSuccesses  int  sampleSize  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  long  serialVersionUID  int  numberOfSuccesses  populationSize  sampleSize  RandomGenerator  rng  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.25	99	99	1	replace	    if(numberOfSuccesses  >  populationSize)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.SAMPLE_SIZE_LARGER_THAN_POPULATION_SIZE,  numberOfSuccesses,  sampleSize,  true);  }		compilable	  [FE]  AssertionError  	46	1	add
