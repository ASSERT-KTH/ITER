bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  Integer  numberOfSuccesses  =  rng.getIntValue();  [CE]  illegal  start  of  type  [FE]        AssertionError    [CONTEXT]    throws  NotPositiveException,  NotStrictlyPositiveException,  NumberIsTooLargeException  {  super(rng);  if  (populationSize  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.POPULATION_SIZE,  populationSize);  }    [BUGGY]  Integer  numberOfSuccesses  =  rng.getIntValue();  [BUGGY]    if  (numberOfSuccesses  <  0)  {  throw  new  NotPositiveException(LocalizedFormats.NUMBER_OF_SUCCESSES,  numberOfSuccesses);  }  if  (sampleSize  <  0)  {  throw  new  NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,  sampleSize);  }  if  (numberOfSuccesses  >  populationSize)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.NUMBER_OF_SUCCESS_LARGER_THAN_POPULATION_SIZE,  [CLASS]  HypergeometricDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,int,int,int)  RandomGenerator  rng  int  populationSize  int  numberOfSuccesses  int  sampleSize  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  long  serialVersionUID  int  numberOfSuccesses  populationSize  sampleSize  RandomGenerator  rng  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.25	90	90	1	replace	Integer  numberOfSuccesses  =  rng.getIntValue();	      if(numberOfSuccesses    >    populationSize)    {    if(numberOfSuccesses    >    populationSize)    {    throw    new    NotPositiveException(LocalizedFormats.NUMBER_OF_SUCCESS_LARGER_THAN_POPUL    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
2	[BUG]  [BUGGY]  int  numberOfSuccesses  =  numberOfSuccesses;  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    throws  NotPositiveException,  NotStrictlyPositiveException,  NumberIsTooLargeException  {  super(rng);  if  (populationSize  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.POPULATION_SIZE,  populationSize);  }    [BUGGY]  int  numberOfSuccesses  =  numberOfSuccesses;  [BUGGY]    if  (numberOfSuccesses  <  0)  {  throw  new  NotPositiveException(LocalizedFormats.NUMBER_OF_SUCCESSES,  numberOfSuccesses);  }  if  (sampleSize  <  0)  {  throw  new  NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,  sampleSize);  }  if  (numberOfSuccesses  >  populationSize)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.NUMBER_OF_SUCCESS_LARGER_THAN_POPULATION_SIZE,  [CLASS]  HypergeometricDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,int,int,int)  RandomGenerator  rng  int  populationSize  int  numberOfSuccesses  int  sampleSize  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  long  serialVersionUID  int  numberOfSuccesses  populationSize  sampleSize  RandomGenerator  rng  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.25	90	90	1	replace	int  numberOfSuccesses  =  numberOfSuccesses;	      if(numberOfSuccesses    >    populationSize)    {    if(numberOfSuccesses    >    populationSize)    {    throw    new    NotPositiveException(LocalizedFormats.NUMBER_OF_SUCCESS_LARGER_THAN_POPUL    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
3	[BUG]  [BUGGY]  int  sampleSize  =  populationSize  -  numberOfSuccesses;  [CE]  illegal  start  of  type  [FE]        AssertionError    [CONTEXT]    throws  NotPositiveException,  NotStrictlyPositiveException,  NumberIsTooLargeException  {  super(rng);  if  (populationSize  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.POPULATION_SIZE,  populationSize);  }    [BUGGY]  int  sampleSize  =  populationSize  -  numberOfSuccesses;  [BUGGY]    if  (numberOfSuccesses  <  0)  {  throw  new  NotPositiveException(LocalizedFormats.NUMBER_OF_SUCCESSES,  numberOfSuccesses);  }  if  (sampleSize  <  0)  {  throw  new  NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,  sampleSize);  }  if  (numberOfSuccesses  >  populationSize)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.NUMBER_OF_SUCCESS_LARGER_THAN_POPULATION_SIZE,  [CLASS]  HypergeometricDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,int,int,int)  RandomGenerator  rng  int  populationSize  int  numberOfSuccesses  int  sampleSize  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  long  serialVersionUID  int  numberOfSuccesses  populationSize  sampleSize  RandomGenerator  rng  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.25	90	90	1	replace	int  sampleSize  =  populationSize  -  numberOfSuccesses;	      int    sampleSize    =    numberOfSuccesses    -    populationSize;    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
4	[BUG]  [BUGGY]  int  sampleSize  =  numberOfSuccesses  /  populationSize;  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    throws  NotPositiveException,  NotStrictlyPositiveException,  NumberIsTooLargeException  {  super(rng);  if  (populationSize  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.POPULATION_SIZE,  populationSize);  }    [BUGGY]  int  sampleSize  =  numberOfSuccesses  /  populationSize;  [BUGGY]    if  (numberOfSuccesses  <  0)  {  throw  new  NotPositiveException(LocalizedFormats.NUMBER_OF_SUCCESSES,  numberOfSuccesses);  }  if  (sampleSize  <  0)  {  throw  new  NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,  sampleSize);  }  if  (numberOfSuccesses  >  populationSize)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.NUMBER_OF_SUCCESS_LARGER_THAN_POPULATION_SIZE,  [CLASS]  HypergeometricDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,int,int,int)  RandomGenerator  rng  int  populationSize  int  numberOfSuccesses  int  sampleSize  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  long  serialVersionUID  int  numberOfSuccesses  populationSize  sampleSize  RandomGenerator  rng  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.25	90	90	1	replace	int  sampleSize  =  numberOfSuccesses  /  populationSize;	      int    sampleSize    =    numberOfSuccesses    -    populationSize;    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
5	[BUG]  [BUGGY]  Integer  numberOfSuccesses  =  rng.getIntValue(populationSize);  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    throws  NotPositiveException,  NotStrictlyPositiveException,  NumberIsTooLargeException  {  super(rng);  if  (populationSize  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.POPULATION_SIZE,  populationSize);  }    [BUGGY]  Integer  numberOfSuccesses  =  rng.getIntValue(populationSize);  [BUGGY]    if  (numberOfSuccesses  <  0)  {  throw  new  NotPositiveException(LocalizedFormats.NUMBER_OF_SUCCESSES,  numberOfSuccesses);  }  if  (sampleSize  <  0)  {  throw  new  NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,  sampleSize);  }  if  (numberOfSuccesses  >  populationSize)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.NUMBER_OF_SUCCESS_LARGER_THAN_POPULATION_SIZE,  [CLASS]  HypergeometricDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,int,int,int)  RandomGenerator  rng  int  populationSize  int  numberOfSuccesses  int  sampleSize  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  long  serialVersionUID  int  numberOfSuccesses  populationSize  sampleSize  RandomGenerator  rng  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.25	90	90	1	replace	Integer  numberOfSuccesses  =  rng.getIntValue(populationSize);	      if(numberOfSuccesses    >    populationSize)    {    if(numberOfSuccesses    >    populationSize)    {    throw    new    NotPositiveException(LocalizedFormats.NUMBER_OF_SUCCESS_LARGER_THAN_POP    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
6	[BUG]  [BUGGY]  int  numberOfSuccesses  =  rng.getNumberOfSuffix()  +  1;  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    throws  NotPositiveException,  NotStrictlyPositiveException,  NumberIsTooLargeException  {  super(rng);  if  (populationSize  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.POPULATION_SIZE,  populationSize);  }    [BUGGY]  int  numberOfSuccesses  =  rng.getNumberOfSuffix()  +  1;  [BUGGY]    if  (numberOfSuccesses  <  0)  {  throw  new  NotPositiveException(LocalizedFormats.NUMBER_OF_SUCCESSES,  numberOfSuccesses);  }  if  (sampleSize  <  0)  {  throw  new  NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,  sampleSize);  }  if  (numberOfSuccesses  >  populationSize)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.NUMBER_OF_SUCCESS_LARGER_THAN_POPULATION_SIZE,  [CLASS]  HypergeometricDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,int,int,int)  RandomGenerator  rng  int  populationSize  int  numberOfSuccesses  int  sampleSize  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  long  serialVersionUID  int  numberOfSuccesses  populationSize  sampleSize  RandomGenerator  rng  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.25	90	90	1	replace	int  numberOfSuccesses  =  rng.getNumberOfSuffix()  +  1;	      int    numberOfSuccesses    =    rng.getNumberOfSuffix();    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
7	[BUG]  [BUGGY]  if(numberOfSuccesses  >  0)  {  if(numberOfSuccesses  >  0)  {  [CE]  illegal  start  of  expression  [FE]    NotPositiveException    [CONTEXT]    throws  NotPositiveException,  NotStrictlyPositiveException,  NumberIsTooLargeException  {  super(rng);  if  (populationSize  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.POPULATION_SIZE,  populationSize);  }    [BUGGY]  if(numberOfSuccesses  >  0)  {  if(numberOfSuccesses  >  0)  {  [BUGGY]    throw  new  NotPositiveException(LocalizedFormats.NUMBER_OF_SUCCESSES,  numberOfSuccesses);  }  if  (sampleSize  <  0)  {  throw  new  NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,  sampleSize);  }  if  (numberOfSuccesses  >  populationSize)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.NUMBER_OF_SUCCESS_LARGER_THAN_POPULATION_SIZE,  [CLASS]  HypergeometricDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,int,int,int)  RandomGenerator  rng  int  populationSize  int  numberOfSuccesses  int  sampleSize  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  long  serialVersionUID  int  numberOfSuccesses  populationSize  sampleSize  RandomGenerator  rng  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.25	90	90	1	replace	if(numberOfSuccesses    >    0)    {    if(numberOfSuccesses  >  0)  {	  	non-compiled	[CE]  illegal  start  of  expression	4	None	add
8	[BUG]  [BUGGY]  if(numberOfSuccesses  >  0)  {  If(numberOfSuccesses  >  0)  {  [CE]  ';'  expected  [FE]      NotPositiveException    [CONTEXT]    throws  NotPositiveException,  NotStrictlyPositiveException,  NumberIsTooLargeException  {  super(rng);  if  (populationSize  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.POPULATION_SIZE,  populationSize);  }    [BUGGY]  if(numberOfSuccesses  >  0)  {  If(numberOfSuccesses  >  0)  {  [BUGGY]    throw  new  NotPositiveException(LocalizedFormats.NUMBER_OF_SUCCESSES,  numberOfSuccesses);  }  if  (sampleSize  <  0)  {  throw  new  NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,  sampleSize);  }  if  (numberOfSuccesses  >  populationSize)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.NUMBER_OF_SUCCESS_LARGER_THAN_POPULATION_SIZE,  [CLASS]  HypergeometricDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,int,int,int)  RandomGenerator  rng  int  populationSize  int  numberOfSuccesses  int  sampleSize  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  long  serialVersionUID  int  numberOfSuccesses  populationSize  sampleSize  RandomGenerator  rng  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.25	90	90	1	replace	if(numberOfSuccesses    >    0)    {    If(numberOfSuccesses  >  0)  {	  	non-compiled	[CE]  ';'  expected	4	None	add
9	[BUG]  [BUGGY]  int  numberOfSuccesses  =  rng.getNumberOfSuccesses()  +  1;  [CE]  illegal  start  of  type  [FE]        AssertionError    [CONTEXT]    throws  NotPositiveException,  NotStrictlyPositiveException,  NumberIsTooLargeException  {  super(rng);  if  (populationSize  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.POPULATION_SIZE,  populationSize);  }    [BUGGY]  int  numberOfSuccesses  =  rng.getNumberOfSuccesses()  +  1;  [BUGGY]    if  (numberOfSuccesses  <  0)  {  throw  new  NotPositiveException(LocalizedFormats.NUMBER_OF_SUCCESSES,  numberOfSuccesses);  }  if  (sampleSize  <  0)  {  throw  new  NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,  sampleSize);  }  if  (numberOfSuccesses  >  populationSize)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.NUMBER_OF_SUCCESS_LARGER_THAN_POPULATION_SIZE,  [CLASS]  HypergeometricDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,int,int,int)  RandomGenerator  rng  int  populationSize  int  numberOfSuccesses  int  sampleSize  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  long  serialVersionUID  int  numberOfSuccesses  populationSize  sampleSize  RandomGenerator  rng  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.25	90	90	1	replace	int  numberOfSuccesses  =  rng.getNumberOfSuccesses()  +  1;	      int    numberOfSuccesses    =    rng.getNumberOfSuccesses();    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
10	[BUG]  [BUGGY]  int  sampleSize  =  rng.getSampleSize(populationSize);  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    throws  NotPositiveException,  NotStrictlyPositiveException,  NumberIsTooLargeException  {  super(rng);  if  (populationSize  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.POPULATION_SIZE,  populationSize);  }    [BUGGY]  int  sampleSize  =  rng.getSampleSize(populationSize);  [BUGGY]    if  (numberOfSuccesses  <  0)  {  throw  new  NotPositiveException(LocalizedFormats.NUMBER_OF_SUCCESSES,  numberOfSuccesses);  }  if  (sampleSize  <  0)  {  throw  new  NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,  sampleSize);  }  if  (numberOfSuccesses  >  populationSize)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.NUMBER_OF_SUCCESS_LARGER_THAN_POPULATION_SIZE,  [CLASS]  HypergeometricDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,int,int,int)  RandomGenerator  rng  int  populationSize  int  numberOfSuccesses  int  sampleSize  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  long  serialVersionUID  int  numberOfSuccesses  populationSize  sampleSize  RandomGenerator  rng  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.25	90	90	1	replace	int  sampleSize  =  rng.getSampleSize(populationSize);	      int    sampleSize    =    rng.getSampleSize();    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
11	[BUG]  [BUGGY]  [FE]  NotPositiveException  [FE]    NotPositiveException    [CONTEXT]    throws  NotPositiveException,  NotStrictlyPositiveException,  NumberIsTooLargeException  {  super(rng);  if  (populationSize  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.POPULATION_SIZE,  populationSize);  }    [BUGGY]  if(numberOfSuccesses  >  1)  {  [BUGGY]    throw  new  NotPositiveException(LocalizedFormats.NUMBER_OF_SUCCESSES,  numberOfSuccesses);  }  if  (sampleSize  <  0)  {  throw  new  NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,  sampleSize);  }  if  (numberOfSuccesses  >  populationSize)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.NUMBER_OF_SUCCESS_LARGER_THAN_POPULATION_SIZE,  [CLASS]  HypergeometricDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,int,int,int)  RandomGenerator  rng  int  populationSize  int  numberOfSuccesses  int  sampleSize  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  long  serialVersionUID  int  numberOfSuccesses  populationSize  sampleSize  RandomGenerator  rng  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.25	90	90	1	add	if(numberOfSuccesses  >  1)  {	  if(numberOfSuccesses    >    0)    {    	compilable	  [FE]  NotPositiveException  	5	16	replace
12	[BUG]  [BUGGY]  if(numberOfSuccesses  >  1)  {  [FE]  NotPositiveException  [FE]    NotPositiveException    [CONTEXT]    throws  NotPositiveException,  NotStrictlyPositiveException,  NumberIsTooLargeException  {  super(rng);  if  (populationSize  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.POPULATION_SIZE,  populationSize);  }    [BUGGY]  if(numberOfSuccesses  >  1)  {  [BUGGY]    throw  new  NotPositiveException(LocalizedFormats.NUMBER_OF_SUCCESSES,  numberOfSuccesses);  }  if  (sampleSize  <  0)  {  throw  new  NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,  sampleSize);  }  if  (numberOfSuccesses  >  populationSize)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.NUMBER_OF_SUCCESS_LARGER_THAN_POPULATION_SIZE,  [CLASS]  HypergeometricDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,int,int,int)  RandomGenerator  rng  int  populationSize  int  numberOfSuccesses  int  sampleSize  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  long  serialVersionUID  int  numberOfSuccesses  populationSize  sampleSize  RandomGenerator  rng  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.25	90	90	1	replace	if(numberOfSuccesses  >  1)  {	  if(numberOfSuccesses    >    0)    {    	compilable	  [FE]  NotPositiveException  	5	16	replace
13	[BUG]  [BUGGY]  int  numberSize  =  numberOfSuccesses  -  populationSize;  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    throws  NotPositiveException,  NotStrictlyPositiveException,  NumberIsTooLargeException  {  super(rng);  if  (populationSize  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.POPULATION_SIZE,  populationSize);  }    [BUGGY]  int  numberSize  =  numberOfSuccesses  -  populationSize;  [BUGGY]    if  (numberOfSuccesses  <  0)  {  throw  new  NotPositiveException(LocalizedFormats.NUMBER_OF_SUCCESSES,  numberOfSuccesses);  }  if  (sampleSize  <  0)  {  throw  new  NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,  sampleSize);  }  if  (numberOfSuccesses  >  populationSize)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.NUMBER_OF_SUCCESS_LARGER_THAN_POPULATION_SIZE,  [CLASS]  HypergeometricDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,int,int,int)  RandomGenerator  rng  int  populationSize  int  numberOfSuccesses  int  sampleSize  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  long  serialVersionUID  int  numberOfSuccesses  populationSize  sampleSize  RandomGenerator  rng  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.25	90	90	1	replace	int  numberSize  =  numberOfSuccesses  -  populationSize;	      if(numberOfSuccesses    >    populationSize)    {    if(numberOfSuccesses    >    populationSize)    {    throw    new    NotPositiveException(LocalizedFormats.NUMBER_OF_SUCCESS_LARGER_THAN_POP    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
14	[BUG]  [BUGGY]  Integer  numberOfSuccesses  =  new  Integer(populationSize);  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    throws  NotPositiveException,  NotStrictlyPositiveException,  NumberIsTooLargeException  {  super(rng);  if  (populationSize  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.POPULATION_SIZE,  populationSize);  }    [BUGGY]  Integer  numberOfSuccesses  =  new  Integer(populationSize);  [BUGGY]    if  (numberOfSuccesses  <  0)  {  throw  new  NotPositiveException(LocalizedFormats.NUMBER_OF_SUCCESSES,  numberOfSuccesses);  }  if  (sampleSize  <  0)  {  throw  new  NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,  sampleSize);  }  if  (numberOfSuccesses  >  populationSize)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.NUMBER_OF_SUCCESS_LARGER_THAN_POPULATION_SIZE,  [CLASS]  HypergeometricDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,int,int,int)  RandomGenerator  rng  int  populationSize  int  numberOfSuccesses  int  sampleSize  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  long  serialVersionUID  int  numberOfSuccesses  populationSize  sampleSize  RandomGenerator  rng  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.25	90	90	1	replace	Integer  numberOfSuccesses  =  new  Integer(populationSize);	      if(numberOfSuccesses    >    populationSize)    {    if(numberOfSuccesses    >    populationSize)    {    throw    new    NotPositiveException(LocalizedFormats.NUMBER_OF_SUCCESS_LARGER_THAN_POP    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
15	[BUG]  [BUGGY]  int  sampleSize  =  rng.getSampleSize()  +  populationSize;  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    throws  NotPositiveException,  NotStrictlyPositiveException,  NumberIsTooLargeException  {  super(rng);  if  (populationSize  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.POPULATION_SIZE,  populationSize);  }    [BUGGY]  int  sampleSize  =  rng.getSampleSize()  +  populationSize;  [BUGGY]    if  (numberOfSuccesses  <  0)  {  throw  new  NotPositiveException(LocalizedFormats.NUMBER_OF_SUCCESSES,  numberOfSuccesses);  }  if  (sampleSize  <  0)  {  throw  new  NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,  sampleSize);  }  if  (numberOfSuccesses  >  populationSize)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.NUMBER_OF_SUCCESS_LARGER_THAN_POPULATION_SIZE,  [CLASS]  HypergeometricDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,int,int,int)  RandomGenerator  rng  int  populationSize  int  numberOfSuccesses  int  sampleSize  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  long  serialVersionUID  int  numberOfSuccesses  populationSize  sampleSize  RandomGenerator  rng  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.25	90	90	1	replace	int  sampleSize  =  rng.getSampleSize()  +  populationSize;	      int    sampleSize    =    rng.getSampleSize();    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
16	[BUG]  [BUGGY]  if(sampleSize  <  =  0)  {  if(numberOfSuccesses  >  populationSize)  {  throw  new  NotPositiveException(LocalizedFormats.NUMBER_OF_SUCCESS_LARGER_THAN_POP  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]    throws  NotPositiveException,  NotStrictlyPositiveException,  NumberIsTooLargeException  {  super(rng);  if  (populationSize  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.POPULATION_SIZE,  populationSize);  }    [BUGGY]  if(sampleSize  <  =  0)  {  if(numberOfSuccesses  >  populationSize)  {  throw  new  NotPositiveException(LocalizedFormats.NUMBER_OF_SUCCESS_LARGER_THAN_POP  [BUGGY]    if  (numberOfSuccesses  <  0)  {  throw  new  NotPositiveException(LocalizedFormats.NUMBER_OF_SUCCESSES,  numberOfSuccesses);  }  if  (sampleSize  <  0)  {  throw  new  NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,  sampleSize);  }  if  (numberOfSuccesses  >  populationSize)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.NUMBER_OF_SUCCESS_LARGER_THAN_POPULATION_SIZE,  [CLASS]  HypergeometricDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,int,int,int)  RandomGenerator  rng  int  populationSize  int  numberOfSuccesses  int  sampleSize  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  long  serialVersionUID  int  numberOfSuccesses  populationSize  sampleSize  RandomGenerator  rng  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.25	90	90	1	replace	if(sampleSize  <  =  0)  {  if(numberOfSuccesses  >  populationSize)  {  throw  new  NotPositiveException(LocalizedFormats.NUMBER_OF_SUCCESS_LARGER_THAN_POP	      if(numberOfSuccesses    >    populationSize)    {    if(numberOfSuccesses    >    populationSize)    {    throw    new    NotPositiveException(LocalizedFormats.NUMBER_OF_SUCCESS_LARGER_THAN_POP    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
17	[BUG]  [BUGGY]  if(sampleSize  <  =  0)  {  if(numberOfSuccesses  >  populationSize)  {  throw  new  NotPositiveException(LocalizedFormats.NUMBER_OF_SUCCESS_LARGER_THAN_POP  }  [CE]  illegal  start  of  expression  [FE]            AssertionError    [CONTEXT]    throws  NotPositiveException,  NotStrictlyPositiveException,  NumberIsTooLargeException  {  super(rng);  if  (populationSize  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.POPULATION_SIZE,  populationSize);  }    [BUGGY]  if(sampleSize  <  =  0)  {  if(numberOfSuccesses  >  populationSize)  {  throw  new  NotPositiveException(LocalizedFormats.NUMBER_OF_SUCCESS_LARGER_THAN_POP  }  [BUGGY]    if  (numberOfSuccesses  <  0)  {  throw  new  NotPositiveException(LocalizedFormats.NUMBER_OF_SUCCESSES,  numberOfSuccesses);  }  if  (sampleSize  <  0)  {  throw  new  NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,  sampleSize);  }  if  (numberOfSuccesses  >  populationSize)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.NUMBER_OF_SUCCESS_LARGER_THAN_POPULATION_SIZE,  [CLASS]  HypergeometricDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,int,int,int)  RandomGenerator  rng  int  populationSize  int  numberOfSuccesses  int  sampleSize  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  long  serialVersionUID  int  numberOfSuccesses  populationSize  sampleSize  RandomGenerator  rng  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.25	90	90	1	replace	if(sampleSize  <  =  0)  {  if(numberOfSuccesses  >  populationSize)  {  throw  new  NotPositiveException(LocalizedFormats.NUMBER_OF_SUCCESS_LARGER_THAN_POP  }	      if(numberOfSuccesses    >    populationSize)    {    if(numberOfSuccesses    >    populationSize)    {    throw    new    NotPositiveException(LocalizedFormats.NUMBER_OF_SUCCESS_LARGER_THAN_POP    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
18	[BUG]  [BUGGY]  int  numberOfSuccesses  =  rng.getNumberOfSuccesses()  +  populationSize;  [CE]  illegal  start  of  type  [FE]        AssertionError    [CONTEXT]    throws  NotPositiveException,  NotStrictlyPositiveException,  NumberIsTooLargeException  {  super(rng);  if  (populationSize  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.POPULATION_SIZE,  populationSize);  }    [BUGGY]  int  numberOfSuccesses  =  rng.getNumberOfSuccesses()  +  populationSize;  [BUGGY]    if  (numberOfSuccesses  <  0)  {  throw  new  NotPositiveException(LocalizedFormats.NUMBER_OF_SUCCESSES,  numberOfSuccesses);  }  if  (sampleSize  <  0)  {  throw  new  NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,  sampleSize);  }  if  (numberOfSuccesses  >  populationSize)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.NUMBER_OF_SUCCESS_LARGER_THAN_POPULATION_SIZE,  [CLASS]  HypergeometricDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,int,int,int)  RandomGenerator  rng  int  populationSize  int  numberOfSuccesses  int  sampleSize  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  long  serialVersionUID  int  numberOfSuccesses  populationSize  sampleSize  RandomGenerator  rng  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.25	90	90	1	replace	int  numberOfSuccesses  =  rng.getNumberOfSuccesses()  +  populationSize;	      int    numberOfSuccesses    =    rng.getNumberOfSuccesses();    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
19	[BUG]  [BUGGY]  if(sampleSize  <  =  0)  {  if(numberOfSuccesses  >  populationSize)  {  throw  new  NotPositiveException(LocalizedFormats.NUMBER_OF_SUCCESS_LARGER_THAN_POPUL  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]    throws  NotPositiveException,  NotStrictlyPositiveException,  NumberIsTooLargeException  {  super(rng);  if  (populationSize  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.POPULATION_SIZE,  populationSize);  }    [BUGGY]  if(sampleSize  <  =  0)  {  if(numberOfSuccesses  >  populationSize)  {  throw  new  NotPositiveException(LocalizedFormats.NUMBER_OF_SUCCESS_LARGER_THAN_POPUL  [BUGGY]    if  (numberOfSuccesses  <  0)  {  throw  new  NotPositiveException(LocalizedFormats.NUMBER_OF_SUCCESSES,  numberOfSuccesses);  }  if  (sampleSize  <  0)  {  throw  new  NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,  sampleSize);  }  if  (numberOfSuccesses  >  populationSize)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.NUMBER_OF_SUCCESS_LARGER_THAN_POPULATION_SIZE,  [CLASS]  HypergeometricDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,int,int,int)  RandomGenerator  rng  int  populationSize  int  numberOfSuccesses  int  sampleSize  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  long  serialVersionUID  int  numberOfSuccesses  populationSize  sampleSize  RandomGenerator  rng  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.25	90	90	1	replace	if(sampleSize  <  =  0)  {  if(numberOfSuccesses  >  populationSize)  {  throw  new  NotPositiveException(LocalizedFormats.NUMBER_OF_SUCCESS_LARGER_THAN_POPUL	      if(numberOfSuccesses    >    populationSize)    {    if(numberOfSuccesses    >    populationSize)    {    throw    new    NotPositiveException(LocalizedFormats.NUMBER_OF_SUCCESS_LARGER_THAN_POPUL    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
20	[BUG]  [BUGGY]  if(sampleSize  <  =  0)  {  if(numberOfSuccesses  >  PopulationSize)  {  throw  new  NotPositiveException(LocalizedFormats.NUMBER_OF_SUCCESS_LARGER_THAN_POPUL  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]    throws  NotPositiveException,  NotStrictlyPositiveException,  NumberIsTooLargeException  {  super(rng);  if  (populationSize  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.POPULATION_SIZE,  populationSize);  }    [BUGGY]  if(sampleSize  <  =  0)  {  if(numberOfSuccesses  >  PopulationSize)  {  throw  new  NotPositiveException(LocalizedFormats.NUMBER_OF_SUCCESS_LARGER_THAN_POPUL  [BUGGY]    if  (numberOfSuccesses  <  0)  {  throw  new  NotPositiveException(LocalizedFormats.NUMBER_OF_SUCCESSES,  numberOfSuccesses);  }  if  (sampleSize  <  0)  {  throw  new  NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,  sampleSize);  }  if  (numberOfSuccesses  >  populationSize)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.NUMBER_OF_SUCCESS_LARGER_THAN_POPULATION_SIZE,  [CLASS]  HypergeometricDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,int,int,int)  RandomGenerator  rng  int  populationSize  int  numberOfSuccesses  int  sampleSize  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  long  serialVersionUID  int  numberOfSuccesses  populationSize  sampleSize  RandomGenerator  rng  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.25	90	90	1	replace	if(sampleSize  <  =  0)  {  if(numberOfSuccesses  >  PopulationSize)  {  throw  new  NotPositiveException(LocalizedFormats.NUMBER_OF_SUCCESS_LARGER_THAN_POPUL	      if(numberOfSuccesses    >    populationSize)    {    if(numberOfSuccesses    >    populationSize)    {    throw    new    NotPositiveException(LocalizedFormats.NUMBER_OF_SUCCESS_LARGER_THAN_POPUL    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
21	[BUG]  [BUGGY]  if(sampleSize  <  =  0)  {  if(numberOfSuccesses  >  populationSize)  {  throw  new  NotPositiveException(LocalizedFormats.NUMBER_OF_SUCCESS_LARGER_THAN_POPULATION  [CE]  illegal  start  of  expression  [FE]            AssertionError    [CONTEXT]    throws  NotPositiveException,  NotStrictlyPositiveException,  NumberIsTooLargeException  {  super(rng);  if  (populationSize  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.POPULATION_SIZE,  populationSize);  }    [BUGGY]  if(sampleSize  <  =  0)  {  if(numberOfSuccesses  >  populationSize)  {  throw  new  NotPositiveException(LocalizedFormats.NUMBER_OF_SUCCESS_LARGER_THAN_POPULATION  [BUGGY]    if  (numberOfSuccesses  <  0)  {  throw  new  NotPositiveException(LocalizedFormats.NUMBER_OF_SUCCESSES,  numberOfSuccesses);  }  if  (sampleSize  <  0)  {  throw  new  NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,  sampleSize);  }  if  (numberOfSuccesses  >  populationSize)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.NUMBER_OF_SUCCESS_LARGER_THAN_POPULATION_SIZE,  [CLASS]  HypergeometricDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,int,int,int)  RandomGenerator  rng  int  populationSize  int  numberOfSuccesses  int  sampleSize  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  long  serialVersionUID  int  numberOfSuccesses  populationSize  sampleSize  RandomGenerator  rng  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.25	90	90	1	replace	if(sampleSize  <  =  0)  {  if(numberOfSuccesses  >  populationSize)  {  throw  new  NotPositiveException(LocalizedFormats.NUMBER_OF_SUCCESS_LARGER_THAN_POPULATION	      if(numberOfSuccesses    >    populationSize)    {    if(numberOfSuccesses    >    populationSize)    {    throw    new    NotPositiveException(LocalizedFormats.NUMBER_OF_SUCCESS_LARGER_THAN_POPULATION    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
22	[BUG]  [BUGGY]  if(sampleSize  <  =  0)  {  if(numberOfSuccesses  >  populationSize)  {  throw  new  NotPositiveException(LocalizedFormats.NUMBER_OF_SUCCESS_LARGER_THAN_POPULATION);  }  [CE]  illegal  start  of  expression  [FE]              AssertionError    [CONTEXT]    throws  NotPositiveException,  NotStrictlyPositiveException,  NumberIsTooLargeException  {  super(rng);  if  (populationSize  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.POPULATION_SIZE,  populationSize);  }    [BUGGY]  if(sampleSize  <  =  0)  {  if(numberOfSuccesses  >  populationSize)  {  throw  new  NotPositiveException(LocalizedFormats.NUMBER_OF_SUCCESS_LARGER_THAN_POPULATION);  }  [BUGGY]    if  (numberOfSuccesses  <  0)  {  throw  new  NotPositiveException(LocalizedFormats.NUMBER_OF_SUCCESSES,  numberOfSuccesses);  }  if  (sampleSize  <  0)  {  throw  new  NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,  sampleSize);  }  if  (numberOfSuccesses  >  populationSize)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.NUMBER_OF_SUCCESS_LARGER_THAN_POPULATION_SIZE,  [CLASS]  HypergeometricDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,int,int,int)  RandomGenerator  rng  int  populationSize  int  numberOfSuccesses  int  sampleSize  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  long  serialVersionUID  int  numberOfSuccesses  populationSize  sampleSize  RandomGenerator  rng  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.25	90	90	1	replace	if(sampleSize  <  =  0)  {  if(numberOfSuccesses  >  populationSize)  {  throw  new  NotPositiveException(LocalizedFormats.NUMBER_OF_SUCCESS_LARGER_THAN_POPULATION);  }	      if(numberOfSuccesses    >    populationSize)    {    if(numberOfSuccesses    >    populationSize)    {    throw    new    NotPositiveException(LocalizedFormats.NUMBER_OF_SUCCESS_LARGER_THAN_POPULATION    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
