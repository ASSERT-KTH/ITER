bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]    int  numberOfSuccesses  =  rng.getNumberOfSuccesses();  [CE]  variable  numberOfSuccesses  is  already  defined  in  constructor  HypergeometricDistribution(RandomGenerator,int,int,int)  [FE]    AssertionError  [CONTEXT]  throws  NotPositiveException,  NotStrictlyPositiveException,  NumberIsTooLargeException  {  super(rng);  if  (populationSize  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.POPULATION_SIZE,  populationSize);  }  [BUGGY]    int  numberOfSuccesses  =  rng.getNumberOfSuccesses();  [BUGGY]  if  (numberOfSuccesses  <  0)  {  throw  new  NotPositiveException(LocalizedFormats.NUMBER_OF_SUCCESSES,  numberOfSuccesses);  }  if  (sampleSize  <  0)  {  throw  new  NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,  sampleSize);  }  if  (numberOfSuccesses  >  populationSize)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.NUMBER_OF_SUCCESS_LARGER_THAN_POPULATION_SIZE,  [CLASS]  HypergeometricDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,int,int,int)  RandomGenerator  rng  int  populationSize  int  numberOfSuccesses  int  sampleSize  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  long  serialVersionUID  int  numberOfSuccesses  populationSize  sampleSize  RandomGenerator  rng  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.25	90	90	1	replace	    int  numberOfSuccesses  =  rng.getNumberOfSuccesses();		non-compiled	[CE]  variable  numberOfSuccesses  is  already  defined  in  constructor  HypergeometricDistribution(RandomGenerator,int,int,int)	42	None	add
2	[BUG]  [BUGGY]    int  sampleSize  =  rng.getSampleSize();  [CE]  variable  sampleSize  is  already  defined  in  constructor  HypergeometricDistribution(RandomGenerator,int,int,int)  [FE]      AssertionError  [CONTEXT]  throws  NotPositiveException,  NotStrictlyPositiveException,  NumberIsTooLargeException  {  super(rng);  if  (populationSize  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.POPULATION_SIZE,  populationSize);  }  [BUGGY]    int  sampleSize  =  rng.getSampleSize();  [BUGGY]  if  (numberOfSuccesses  <  0)  {  throw  new  NotPositiveException(LocalizedFormats.NUMBER_OF_SUCCESSES,  numberOfSuccesses);  }  if  (sampleSize  <  0)  {  throw  new  NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,  sampleSize);  }  if  (numberOfSuccesses  >  populationSize)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.NUMBER_OF_SUCCESS_LARGER_THAN_POPULATION_SIZE,  [CLASS]  HypergeometricDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,int,int,int)  RandomGenerator  rng  int  populationSize  int  numberOfSuccesses  int  sampleSize  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  long  serialVersionUID  int  numberOfSuccesses  populationSize  sampleSize  RandomGenerator  rng  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.25	90	90	1	replace	    int  sampleSize  =  rng.getSampleSize();		non-compiled	[CE]  variable  sampleSize  is  already  defined  in  constructor  HypergeometricDistribution(RandomGenerator,int,int,int)	42	None	add
3	[BUG]  [BUGGY]    int  numberOfSuccesses  =  rng.getNumberOfSuffix();  [CE]  variable  numberOfSuccesses  is  already  defined  in  constructor  HypergeometricDistribution(RandomGenerator,int,int,int)  [FE]        AssertionError  [CONTEXT]  throws  NotPositiveException,  NotStrictlyPositiveException,  NumberIsTooLargeException  {  super(rng);  if  (populationSize  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.POPULATION_SIZE,  populationSize);  }  [BUGGY]    int  numberOfSuccesses  =  rng.getNumberOfSuffix();  [BUGGY]  if  (numberOfSuccesses  <  0)  {  throw  new  NotPositiveException(LocalizedFormats.NUMBER_OF_SUCCESSES,  numberOfSuccesses);  }  if  (sampleSize  <  0)  {  throw  new  NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,  sampleSize);  }  if  (numberOfSuccesses  >  populationSize)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.NUMBER_OF_SUCCESS_LARGER_THAN_POPULATION_SIZE,  [CLASS]  HypergeometricDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,int,int,int)  RandomGenerator  rng  int  populationSize  int  numberOfSuccesses  int  sampleSize  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  long  serialVersionUID  int  numberOfSuccesses  populationSize  sampleSize  RandomGenerator  rng  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.25	90	90	1	replace	    int  numberOfSuccesses  =  rng.getNumberOfSuffix();		non-compiled	[CE]  variable  numberOfSuccesses  is  already  defined  in  constructor  HypergeometricDistribution(RandomGenerator,int,int,int)	42	None	add
4	[BUG]  [BUGGY]  [FE]  NotPositiveException  [FE]    AssertionError  [CONTEXT]  throws  NotPositiveException,  NotStrictlyPositiveException,  NumberIsTooLargeException  {  super(rng);  if  (populationSize  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.POPULATION_SIZE,  populationSize);  }  [BUGGY]  if(numberOfSuccesses  >  0)  {  [BUGGY]  throw  new  NotPositiveException(LocalizedFormats.NUMBER_OF_SUCCESSES,  numberOfSuccesses);  }  if  (sampleSize  <  0)  {  throw  new  NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,  sampleSize);  }  if  (numberOfSuccesses  >  populationSize)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.NUMBER_OF_SUCCESS_LARGER_THAN_POPULATION_SIZE,  [CLASS]  HypergeometricDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,int,int,int)  RandomGenerator  rng  int  populationSize  int  numberOfSuccesses  int  sampleSize  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  long  serialVersionUID  int  numberOfSuccesses  populationSize  sampleSize  RandomGenerator  rng  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.25	90	90	1	add	if(numberOfSuccesses  >  0)  {	if  (numberOfSuccesses  <  0)  {  	compilable	  [FE]  NotPositiveException  	41	16	replace
5	[BUG]  [BUGGY]  if(numberOfSuccesses  >  0)  {  [FE]  NotPositiveException  [FE]    AssertionError  [CONTEXT]  throws  NotPositiveException,  NotStrictlyPositiveException,  NumberIsTooLargeException  {  super(rng);  if  (populationSize  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.POPULATION_SIZE,  populationSize);  }  [BUGGY]  if(numberOfSuccesses  >  0)  {  [BUGGY]  throw  new  NotPositiveException(LocalizedFormats.NUMBER_OF_SUCCESSES,  numberOfSuccesses);  }  if  (sampleSize  <  0)  {  throw  new  NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,  sampleSize);  }  if  (numberOfSuccesses  >  populationSize)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.NUMBER_OF_SUCCESS_LARGER_THAN_POPULATION_SIZE,  [CLASS]  HypergeometricDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,int,int,int)  RandomGenerator  rng  int  populationSize  int  numberOfSuccesses  int  sampleSize  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  long  serialVersionUID  int  numberOfSuccesses  populationSize  sampleSize  RandomGenerator  rng  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.25	90	90	1	replace	if(numberOfSuccesses  >  0)  {	if  (numberOfSuccesses  <  0)  {  	compilable	  [FE]  NotPositiveException  	41	16	replace
6	[BUG]  [BUGGY]  if(numberOfSuccesses  <  =  0)  {  [CE]  illegal  start  of  expression  [FE]      AssertionError  [CONTEXT]  throws  NotPositiveException,  NotStrictlyPositiveException,  NumberIsTooLargeException  {  super(rng);  if  (populationSize  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.POPULATION_SIZE,  populationSize);  }  [BUGGY]  if(numberOfSuccesses  <  =  0)  {  [BUGGY]  throw  new  NotPositiveException(LocalizedFormats.NUMBER_OF_SUCCESSES,  numberOfSuccesses);  }  if  (sampleSize  <  0)  {  throw  new  NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,  sampleSize);  }  if  (numberOfSuccesses  >  populationSize)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.NUMBER_OF_SUCCESS_LARGER_THAN_POPULATION_SIZE,  [CLASS]  HypergeometricDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,int,int,int)  RandomGenerator  rng  int  populationSize  int  numberOfSuccesses  int  sampleSize  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  long  serialVersionUID  int  numberOfSuccesses  populationSize  sampleSize  RandomGenerator  rng  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.25	90	90	1	replace	if(numberOfSuccesses  <  =  0)  {	if  (numberOfSuccesses  <  0)  {  	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
7	[BUG]  [BUGGY]    int  sampleSize  =  numberOfSuccesses  -  populationSize;  [CE]  variable  sampleSize  is  already  defined  in  constructor  HypergeometricDistribution(RandomGenerator,int,int,int)  [FE]    AssertionError  [CONTEXT]  throws  NotPositiveException,  NotStrictlyPositiveException,  NumberIsTooLargeException  {  super(rng);  if  (populationSize  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.POPULATION_SIZE,  populationSize);  }  [BUGGY]    int  sampleSize  =  numberOfSuccesses  -  populationSize;  [BUGGY]  if  (numberOfSuccesses  <  0)  {  throw  new  NotPositiveException(LocalizedFormats.NUMBER_OF_SUCCESSES,  numberOfSuccesses);  }  if  (sampleSize  <  0)  {  throw  new  NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,  sampleSize);  }  if  (numberOfSuccesses  >  populationSize)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.NUMBER_OF_SUCCESS_LARGER_THAN_POPULATION_SIZE,  [CLASS]  HypergeometricDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,int,int,int)  RandomGenerator  rng  int  populationSize  int  numberOfSuccesses  int  sampleSize  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  long  serialVersionUID  int  numberOfSuccesses  populationSize  sampleSize  RandomGenerator  rng  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.25	90	90	1	replace	    int  sampleSize  =  numberOfSuccesses  -  populationSize;		non-compiled	[CE]  variable  sampleSize  is  already  defined  in  constructor  HypergeometricDistribution(RandomGenerator,int,int,int)	42	None	add
8	[BUG]  [BUGGY]    if(numberOfSuccesses  >  populationSize)  {  if(numberOfSuccesses  >  populationSize)  {  throw  new  NotPositiveException(LocalizedFormats.NUMBER_OF_SUCCESS_LARGER_THAN_POPUL  [CE]  ')'  expected  [FE]    AssertionError  [CONTEXT]  throws  NotPositiveException,  NotStrictlyPositiveException,  NumberIsTooLargeException  {  super(rng);  if  (populationSize  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.POPULATION_SIZE,  populationSize);  }  [BUGGY]    if(numberOfSuccesses  >  populationSize)  {  if(numberOfSuccesses  >  populationSize)  {  throw  new  NotPositiveException(LocalizedFormats.NUMBER_OF_SUCCESS_LARGER_THAN_POPUL  [BUGGY]  if  (numberOfSuccesses  <  0)  {  throw  new  NotPositiveException(LocalizedFormats.NUMBER_OF_SUCCESSES,  numberOfSuccesses);  }  if  (sampleSize  <  0)  {  throw  new  NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,  sampleSize);  }  if  (numberOfSuccesses  >  populationSize)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.NUMBER_OF_SUCCESS_LARGER_THAN_POPULATION_SIZE,  [CLASS]  HypergeometricDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,int,int,int)  RandomGenerator  rng  int  populationSize  int  numberOfSuccesses  int  sampleSize  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  long  serialVersionUID  int  numberOfSuccesses  populationSize  sampleSize  RandomGenerator  rng  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.25	90	90	1	replace	    if(numberOfSuccesses  >  populationSize)  {  if(numberOfSuccesses  >  populationSize)  {  throw  new  NotPositiveException(LocalizedFormats.NUMBER_OF_SUCCESS_LARGER_THAN_POPUL		non-compiled	[CE]  ')'  expected	42	None	add
9	[BUG]  [BUGGY]    if(numberOfSuccesses  >  populationSize)  {  if(numberOfSuccesses  >  populationSize)  {  throw  new  NotPositiveException(LocalizedFormats.NUMBER_OF_SUCCESS_LARGER_THAN_POP  [CE]  ')'  expected  [FE]      AssertionError  [CONTEXT]  throws  NotPositiveException,  NotStrictlyPositiveException,  NumberIsTooLargeException  {  super(rng);  if  (populationSize  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.POPULATION_SIZE,  populationSize);  }  [BUGGY]    if(numberOfSuccesses  >  populationSize)  {  if(numberOfSuccesses  >  populationSize)  {  throw  new  NotPositiveException(LocalizedFormats.NUMBER_OF_SUCCESS_LARGER_THAN_POP  [BUGGY]  if  (numberOfSuccesses  <  0)  {  throw  new  NotPositiveException(LocalizedFormats.NUMBER_OF_SUCCESSES,  numberOfSuccesses);  }  if  (sampleSize  <  0)  {  throw  new  NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,  sampleSize);  }  if  (numberOfSuccesses  >  populationSize)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.NUMBER_OF_SUCCESS_LARGER_THAN_POPULATION_SIZE,  [CLASS]  HypergeometricDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,int,int,int)  RandomGenerator  rng  int  populationSize  int  numberOfSuccesses  int  sampleSize  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  long  serialVersionUID  int  numberOfSuccesses  populationSize  sampleSize  RandomGenerator  rng  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.25	90	90	1	replace	    if(numberOfSuccesses  >  populationSize)  {  if(numberOfSuccesses  >  populationSize)  {  throw  new  NotPositiveException(LocalizedFormats.NUMBER_OF_SUCCESS_LARGER_THAN_POP		non-compiled	[CE]  ')'  expected	42	None	add
10	[BUG]  [BUGGY]    if(numberOfSuccesses  >  populationSize)  {  if(numberOfSuccesses  >  populationSize)  {  throw  new  NotPositiveException(LocalizedFormats.NUMBER_OF_SUCCESS_LARGER_THAN_POPULATION  [CE]  ')'  expected  [FE]        AssertionError  [CONTEXT]  throws  NotPositiveException,  NotStrictlyPositiveException,  NumberIsTooLargeException  {  super(rng);  if  (populationSize  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.POPULATION_SIZE,  populationSize);  }  [BUGGY]    if(numberOfSuccesses  >  populationSize)  {  if(numberOfSuccesses  >  populationSize)  {  throw  new  NotPositiveException(LocalizedFormats.NUMBER_OF_SUCCESS_LARGER_THAN_POPULATION  [BUGGY]  if  (numberOfSuccesses  <  0)  {  throw  new  NotPositiveException(LocalizedFormats.NUMBER_OF_SUCCESSES,  numberOfSuccesses);  }  if  (sampleSize  <  0)  {  throw  new  NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,  sampleSize);  }  if  (numberOfSuccesses  >  populationSize)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.NUMBER_OF_SUCCESS_LARGER_THAN_POPULATION_SIZE,  [CLASS]  HypergeometricDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,int,int,int)  RandomGenerator  rng  int  populationSize  int  numberOfSuccesses  int  sampleSize  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  long  serialVersionUID  int  numberOfSuccesses  populationSize  sampleSize  RandomGenerator  rng  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.25	90	90	1	replace	    if(numberOfSuccesses  >  populationSize)  {  if(numberOfSuccesses  >  populationSize)  {  throw  new  NotPositiveException(LocalizedFormats.NUMBER_OF_SUCCESS_LARGER_THAN_POPULATION		non-compiled	[CE]  ')'  expected	42	None	add
