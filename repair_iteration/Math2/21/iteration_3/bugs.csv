bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  int  sampleSize  =  populationSize  /  numberOfSuccesses;  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      throws  NotPositiveException,  NotStrictlyPositiveException,  NumberIsTooLargeException  {  super(rng);  if  (populationSize  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.POPULATION_SIZE,  populationSize);  }      [BUGGY]  int  sampleSize  =  populationSize  /  numberOfSuccesses;  [BUGGY]      if  (numberOfSuccesses  <  0)  {  throw  new  NotPositiveException(LocalizedFormats.NUMBER_OF_SUCCESSES,  numberOfSuccesses);  }  if  (sampleSize  <  0)  {  throw  new  NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,  sampleSize);  }  if  (numberOfSuccesses  >  populationSize)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.NUMBER_OF_SUCCESS_LARGER_THAN_POPULATION_SIZE,  [CLASS]  HypergeometricDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,int,int,int)  RandomGenerator  rng  int  populationSize  int  numberOfSuccesses  int  sampleSize  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  long  serialVersionUID  int  numberOfSuccesses  populationSize  sampleSize  RandomGenerator  rng  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.25	90	90	1	replace	int  sampleSize  =  populationSize  /  numberOfSuccesses;	  int    sampleSize    =    populationSize    -    numberOfSuccesses;    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
2	[BUG]  [BUGGY]  if(numberOfSuccesses  <  =  0)  {  if(numberOfSuccesses  >  populationSize)  {  throw  new  NotPositiveException(LocalizedFormats.NUMBER_OF_SUCCESS_LARGER_THAN_POPUL  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      throws  NotPositiveException,  NotStrictlyPositiveException,  NumberIsTooLargeException  {  super(rng);  if  (populationSize  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.POPULATION_SIZE,  populationSize);  }      [BUGGY]  if(numberOfSuccesses  <  =  0)  {  if(numberOfSuccesses  >  populationSize)  {  throw  new  NotPositiveException(LocalizedFormats.NUMBER_OF_SUCCESS_LARGER_THAN_POPUL  [BUGGY]      if  (numberOfSuccesses  <  0)  {  throw  new  NotPositiveException(LocalizedFormats.NUMBER_OF_SUCCESSES,  numberOfSuccesses);  }  if  (sampleSize  <  0)  {  throw  new  NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,  sampleSize);  }  if  (numberOfSuccesses  >  populationSize)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.NUMBER_OF_SUCCESS_LARGER_THAN_POPULATION_SIZE,  [CLASS]  HypergeometricDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,int,int,int)  RandomGenerator  rng  int  populationSize  int  numberOfSuccesses  int  sampleSize  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  long  serialVersionUID  int  numberOfSuccesses  populationSize  sampleSize  RandomGenerator  rng  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.25	90	90	1	replace	if(numberOfSuccesses  <  =  0)  {  if(numberOfSuccesses  >  populationSize)  {  throw  new  NotPositiveException(LocalizedFormats.NUMBER_OF_SUCCESS_LARGER_THAN_POPUL	  if(sampleSize    <    =    0)    {    if(numberOfSuccesses    >    populationSize)    {    throw    new    NotPositiveException(LocalizedFormats.NUMBER_OF_SUCCESS_LARGER_THAN_POPUL    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
3	[BUG]  [BUGGY]  if(numberOfSuccesses  <  =  0)  {  if(numberOfSuccesses  >  populationSize)  {  throw  new  NotPositiveException(LocalizedFormats.NUMBER_OF_SUCCESS_LARGER_THAN_POP  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      throws  NotPositiveException,  NotStrictlyPositiveException,  NumberIsTooLargeException  {  super(rng);  if  (populationSize  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.POPULATION_SIZE,  populationSize);  }      [BUGGY]  if(numberOfSuccesses  <  =  0)  {  if(numberOfSuccesses  >  populationSize)  {  throw  new  NotPositiveException(LocalizedFormats.NUMBER_OF_SUCCESS_LARGER_THAN_POP  [BUGGY]      if  (numberOfSuccesses  <  0)  {  throw  new  NotPositiveException(LocalizedFormats.NUMBER_OF_SUCCESSES,  numberOfSuccesses);  }  if  (sampleSize  <  0)  {  throw  new  NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,  sampleSize);  }  if  (numberOfSuccesses  >  populationSize)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.NUMBER_OF_SUCCESS_LARGER_THAN_POPULATION_SIZE,  [CLASS]  HypergeometricDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,int,int,int)  RandomGenerator  rng  int  populationSize  int  numberOfSuccesses  int  sampleSize  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  long  serialVersionUID  int  numberOfSuccesses  populationSize  sampleSize  RandomGenerator  rng  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.25	90	90	1	replace	if(numberOfSuccesses  <  =  0)  {  if(numberOfSuccesses  >  populationSize)  {  throw  new  NotPositiveException(LocalizedFormats.NUMBER_OF_SUCCESS_LARGER_THAN_POP	  if(sampleSize    <    =    0)    {    if(numberOfSuccesses    >    populationSize)    {    throw    new    NotPositiveException(LocalizedFormats.NUMBER_OF_SUCCESS_LARGER_THAN_POPUL    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
4	[BUG]  [BUGGY]  If(numberOfSuccesses  >  0)  {  [CE]  ';'  expected  [FE]          NotPositiveException      [CONTEXT]      throws  NotPositiveException,  NotStrictlyPositiveException,  NumberIsTooLargeException  {  super(rng);  if  (populationSize  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.POPULATION_SIZE,  populationSize);  }      [BUGGY]  If(numberOfSuccesses  >  0)  {  [BUGGY]      throw  new  NotPositiveException(LocalizedFormats.NUMBER_OF_SUCCESSES,  numberOfSuccesses);  }  if  (sampleSize  <  0)  {  throw  new  NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,  sampleSize);  }  if  (numberOfSuccesses  >  populationSize)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.NUMBER_OF_SUCCESS_LARGER_THAN_POPULATION_SIZE,  [CLASS]  HypergeometricDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,int,int,int)  RandomGenerator  rng  int  populationSize  int  numberOfSuccesses  int  sampleSize  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  long  serialVersionUID  int  numberOfSuccesses  populationSize  sampleSize  RandomGenerator  rng  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.25	90	90	1	replace	If(numberOfSuccesses  >  0)  {	  if(numberOfSuccesses    >    0)    {    If(numberOfSuccesses    >    0)    {    	non-compiled	[CE]  ';'  expected	8	None	replace
5	[BUG]  [BUGGY]  If(numberOfSuccesses  >  1)  {  [CE]  ';'  expected  [FE]            NotPositiveException      [CONTEXT]      throws  NotPositiveException,  NotStrictlyPositiveException,  NumberIsTooLargeException  {  super(rng);  if  (populationSize  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.POPULATION_SIZE,  populationSize);  }      [BUGGY]  If(numberOfSuccesses  >  1)  {  [BUGGY]      throw  new  NotPositiveException(LocalizedFormats.NUMBER_OF_SUCCESSES,  numberOfSuccesses);  }  if  (sampleSize  <  0)  {  throw  new  NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,  sampleSize);  }  if  (numberOfSuccesses  >  populationSize)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.NUMBER_OF_SUCCESS_LARGER_THAN_POPULATION_SIZE,  [CLASS]  HypergeometricDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,int,int,int)  RandomGenerator  rng  int  populationSize  int  numberOfSuccesses  int  sampleSize  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  long  serialVersionUID  int  numberOfSuccesses  populationSize  sampleSize  RandomGenerator  rng  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.25	90	90	1	replace	If(numberOfSuccesses  >  1)  {	  if(numberOfSuccesses    >    0)    {    If(numberOfSuccesses    >    0)    {    	non-compiled	[CE]  ';'  expected	8	None	replace
6	[BUG]  [BUGGY]  if(numberOfSuccesses  >  1)  {  if(numberOfSuccesses  >  1)  {  [CE]  illegal  start  of  expression  [FE]    NotPositiveException    [CONTEXT]      throws  NotPositiveException,  NotStrictlyPositiveException,  NumberIsTooLargeException  {  super(rng);  if  (populationSize  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.POPULATION_SIZE,  populationSize);  }      [BUGGY]  if(numberOfSuccesses  >  1)  {  if(numberOfSuccesses  >  1)  {  [BUGGY]      throw  new  NotPositiveException(LocalizedFormats.NUMBER_OF_SUCCESSES,  numberOfSuccesses);  }  if  (sampleSize  <  0)  {  throw  new  NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,  sampleSize);  }  if  (numberOfSuccesses  >  populationSize)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.NUMBER_OF_SUCCESS_LARGER_THAN_POPULATION_SIZE,  [CLASS]  HypergeometricDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,int,int,int)  RandomGenerator  rng  int  populationSize  int  numberOfSuccesses  int  sampleSize  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  long  serialVersionUID  int  numberOfSuccesses  populationSize  sampleSize  RandomGenerator  rng  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.25	90	90	1	replace	if(numberOfSuccesses    >    1)    {    if(numberOfSuccesses  >  1)  {	  	non-compiled	[CE]  illegal  start  of  expression	11	None	add
7	[BUG]  [BUGGY]  if(numberOfSuccesses  >  1)  {  If(numberOfSuccesses  >  1)  {  [CE]  ';'  expected  [FE]      NotPositiveException    [CONTEXT]      throws  NotPositiveException,  NotStrictlyPositiveException,  NumberIsTooLargeException  {  super(rng);  if  (populationSize  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.POPULATION_SIZE,  populationSize);  }      [BUGGY]  if(numberOfSuccesses  >  1)  {  If(numberOfSuccesses  >  1)  {  [BUGGY]      throw  new  NotPositiveException(LocalizedFormats.NUMBER_OF_SUCCESSES,  numberOfSuccesses);  }  if  (sampleSize  <  0)  {  throw  new  NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,  sampleSize);  }  if  (numberOfSuccesses  >  populationSize)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.NUMBER_OF_SUCCESS_LARGER_THAN_POPULATION_SIZE,  [CLASS]  HypergeometricDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,int,int,int)  RandomGenerator  rng  int  populationSize  int  numberOfSuccesses  int  sampleSize  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  long  serialVersionUID  int  numberOfSuccesses  populationSize  sampleSize  RandomGenerator  rng  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.25	90	90	1	replace	if(numberOfSuccesses    >    1)    {    If(numberOfSuccesses  >  1)  {	  	non-compiled	[CE]  ';'  expected	11	None	add
8	[BUG]  [BUGGY]  int  numberOfSuccesses  =  populationSize;  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      throws  NotPositiveException,  NotStrictlyPositiveException,  NumberIsTooLargeException  {  super(rng);  if  (populationSize  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.POPULATION_SIZE,  populationSize);  }      [BUGGY]  int  numberOfSuccesses  =  populationSize;  [BUGGY]      if  (numberOfSuccesses  <  0)  {  throw  new  NotPositiveException(LocalizedFormats.NUMBER_OF_SUCCESSES,  numberOfSuccesses);  }  if  (sampleSize  <  0)  {  throw  new  NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,  sampleSize);  }  if  (numberOfSuccesses  >  populationSize)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.NUMBER_OF_SUCCESS_LARGER_THAN_POPULATION_SIZE,  [CLASS]  HypergeometricDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,int,int,int)  RandomGenerator  rng  int  populationSize  int  numberOfSuccesses  int  sampleSize  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  long  serialVersionUID  int  numberOfSuccesses  populationSize  sampleSize  RandomGenerator  rng  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.25	90	90	1	replace	int  numberOfSuccesses  =  populationSize;	  int    numberOfSuccesses    =    numberOfSuccesses;    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
9	[BUG]  [BUGGY]  int  numberOfSuccesses  =  0;  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      throws  NotPositiveException,  NotStrictlyPositiveException,  NumberIsTooLargeException  {  super(rng);  if  (populationSize  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.POPULATION_SIZE,  populationSize);  }      [BUGGY]  int  numberOfSuccesses  =  0;  [BUGGY]      if  (numberOfSuccesses  <  0)  {  throw  new  NotPositiveException(LocalizedFormats.NUMBER_OF_SUCCESSES,  numberOfSuccesses);  }  if  (sampleSize  <  0)  {  throw  new  NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,  sampleSize);  }  if  (numberOfSuccesses  >  populationSize)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.NUMBER_OF_SUCCESS_LARGER_THAN_POPULATION_SIZE,  [CLASS]  HypergeometricDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,int,int,int)  RandomGenerator  rng  int  populationSize  int  numberOfSuccesses  int  sampleSize  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  long  serialVersionUID  int  numberOfSuccesses  populationSize  sampleSize  RandomGenerator  rng  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.25	90	90	1	replace	int  numberOfSuccesses  =  0;	  int    numberOfSuccesses    =    numberOfSuccesses;    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
10	[BUG]  [BUGGY]  int  sampleSize  =  rng.getSampleSize()  *  populationSize;  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      throws  NotPositiveException,  NotStrictlyPositiveException,  NumberIsTooLargeException  {  super(rng);  if  (populationSize  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.POPULATION_SIZE,  populationSize);  }      [BUGGY]  int  sampleSize  =  rng.getSampleSize()  *  populationSize;  [BUGGY]      if  (numberOfSuccesses  <  0)  {  throw  new  NotPositiveException(LocalizedFormats.NUMBER_OF_SUCCESSES,  numberOfSuccesses);  }  if  (sampleSize  <  0)  {  throw  new  NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,  sampleSize);  }  if  (numberOfSuccesses  >  populationSize)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.NUMBER_OF_SUCCESS_LARGER_THAN_POPULATION_SIZE,  [CLASS]  HypergeometricDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,int,int,int)  RandomGenerator  rng  int  populationSize  int  numberOfSuccesses  int  sampleSize  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  long  serialVersionUID  int  numberOfSuccesses  populationSize  sampleSize  RandomGenerator  rng  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.25	90	90	1	replace	int  sampleSize  =  rng.getSampleSize()  *  populationSize;	  int    sampleSize    =    rng.getSampleSize()    +    populationSize;    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
11	[BUG]  [BUGGY]  int  sampleSize  =  rng.getSampleSize()  +  numberOfSuccesses;  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      throws  NotPositiveException,  NotStrictlyPositiveException,  NumberIsTooLargeException  {  super(rng);  if  (populationSize  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.POPULATION_SIZE,  populationSize);  }      [BUGGY]  int  sampleSize  =  rng.getSampleSize()  +  numberOfSuccesses;  [BUGGY]      if  (numberOfSuccesses  <  0)  {  throw  new  NotPositiveException(LocalizedFormats.NUMBER_OF_SUCCESSES,  numberOfSuccesses);  }  if  (sampleSize  <  0)  {  throw  new  NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,  sampleSize);  }  if  (numberOfSuccesses  >  populationSize)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.NUMBER_OF_SUCCESS_LARGER_THAN_POPULATION_SIZE,  [CLASS]  HypergeometricDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,int,int,int)  RandomGenerator  rng  int  populationSize  int  numberOfSuccesses  int  sampleSize  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  long  serialVersionUID  int  numberOfSuccesses  populationSize  sampleSize  RandomGenerator  rng  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.25	90	90	1	replace	int  sampleSize  =  rng.getSampleSize()  +  numberOfSuccesses;	  int    sampleSize    =    rng.getSampleSize()    +    populationSize;    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
12	[BUG]  [BUGGY]  int  numberSize  =  populationSize  -  numberOfSuccesses;  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      throws  NotPositiveException,  NotStrictlyPositiveException,  NumberIsTooLargeException  {  super(rng);  if  (populationSize  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.POPULATION_SIZE,  populationSize);  }      [BUGGY]  int  numberSize  =  populationSize  -  numberOfSuccesses;  [BUGGY]      if  (numberOfSuccesses  <  0)  {  throw  new  NotPositiveException(LocalizedFormats.NUMBER_OF_SUCCESSES,  numberOfSuccesses);  }  if  (sampleSize  <  0)  {  throw  new  NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,  sampleSize);  }  if  (numberOfSuccesses  >  populationSize)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.NUMBER_OF_SUCCESS_LARGER_THAN_POPULATION_SIZE,  [CLASS]  HypergeometricDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,int,int,int)  RandomGenerator  rng  int  populationSize  int  numberOfSuccesses  int  sampleSize  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  long  serialVersionUID  int  numberOfSuccesses  populationSize  sampleSize  RandomGenerator  rng  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.25	90	90	1	replace	int  numberSize  =  populationSize  -  numberOfSuccesses;	  int    numberSize    =    numberOfSuccesses    -    populationSize;    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
13	[BUG]  [BUGGY]  int  numberSize  =  numberOfSuccesses  -  sampleSize;  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      throws  NotPositiveException,  NotStrictlyPositiveException,  NumberIsTooLargeException  {  super(rng);  if  (populationSize  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.POPULATION_SIZE,  populationSize);  }      [BUGGY]  int  numberSize  =  numberOfSuccesses  -  sampleSize;  [BUGGY]      if  (numberOfSuccesses  <  0)  {  throw  new  NotPositiveException(LocalizedFormats.NUMBER_OF_SUCCESSES,  numberOfSuccesses);  }  if  (sampleSize  <  0)  {  throw  new  NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,  sampleSize);  }  if  (numberOfSuccesses  >  populationSize)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.NUMBER_OF_SUCCESS_LARGER_THAN_POPULATION_SIZE,  [CLASS]  HypergeometricDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,int,int,int)  RandomGenerator  rng  int  populationSize  int  numberOfSuccesses  int  sampleSize  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  long  serialVersionUID  int  numberOfSuccesses  populationSize  sampleSize  RandomGenerator  rng  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.25	90	90	1	replace	int  numberSize  =  numberOfSuccesses  -  sampleSize;	  int    numberSize    =    numberOfSuccesses    -    populationSize;    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
14	[BUG]  [BUGGY]  int  sampleSize  =  numberOfSuccesses  *  populationSize;  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      throws  NotPositiveException,  NotStrictlyPositiveException,  NumberIsTooLargeException  {  super(rng);  if  (populationSize  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.POPULATION_SIZE,  populationSize);  }      [BUGGY]  int  sampleSize  =  numberOfSuccesses  *  populationSize;  [BUGGY]      if  (numberOfSuccesses  <  0)  {  throw  new  NotPositiveException(LocalizedFormats.NUMBER_OF_SUCCESSES,  numberOfSuccesses);  }  if  (sampleSize  <  0)  {  throw  new  NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,  sampleSize);  }  if  (numberOfSuccesses  >  populationSize)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.NUMBER_OF_SUCCESS_LARGER_THAN_POPULATION_SIZE,  [CLASS]  HypergeometricDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,int,int,int)  RandomGenerator  rng  int  populationSize  int  numberOfSuccesses  int  sampleSize  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  long  serialVersionUID  int  numberOfSuccesses  populationSize  sampleSize  RandomGenerator  rng  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.25	90	90	1	replace	int  sampleSize  =  numberOfSuccesses  *  populationSize;	  int    sampleSize    =    numberOfSuccesses    /    populationSize;    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
15	[BUG]  [BUGGY]  int  sampleSize  =  rng.getSampleSize(populationSize,  numberOfSuccesses);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      throws  NotPositiveException,  NotStrictlyPositiveException,  NumberIsTooLargeException  {  super(rng);  if  (populationSize  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.POPULATION_SIZE,  populationSize);  }      [BUGGY]  int  sampleSize  =  rng.getSampleSize(populationSize,  numberOfSuccesses);  [BUGGY]      if  (numberOfSuccesses  <  0)  {  throw  new  NotPositiveException(LocalizedFormats.NUMBER_OF_SUCCESSES,  numberOfSuccesses);  }  if  (sampleSize  <  0)  {  throw  new  NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,  sampleSize);  }  if  (numberOfSuccesses  >  populationSize)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.NUMBER_OF_SUCCESS_LARGER_THAN_POPULATION_SIZE,  [CLASS]  HypergeometricDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,int,int,int)  RandomGenerator  rng  int  populationSize  int  numberOfSuccesses  int  sampleSize  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  long  serialVersionUID  int  numberOfSuccesses  populationSize  sampleSize  RandomGenerator  rng  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.25	90	90	1	replace	int  sampleSize  =  rng.getSampleSize(populationSize,  numberOfSuccesses);	  int    sampleSize    =    rng.getSampleSize(populationSize);    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
16	[BUG]  [BUGGY]  Integer  numberOfSuccesses  =  rng.getIntValue(populationSize,  populationSize);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      throws  NotPositiveException,  NotStrictlyPositiveException,  NumberIsTooLargeException  {  super(rng);  if  (populationSize  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.POPULATION_SIZE,  populationSize);  }      [BUGGY]  Integer  numberOfSuccesses  =  rng.getIntValue(populationSize,  populationSize);  [BUGGY]      if  (numberOfSuccesses  <  0)  {  throw  new  NotPositiveException(LocalizedFormats.NUMBER_OF_SUCCESSES,  numberOfSuccesses);  }  if  (sampleSize  <  0)  {  throw  new  NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,  sampleSize);  }  if  (numberOfSuccesses  >  populationSize)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.NUMBER_OF_SUCCESS_LARGER_THAN_POPULATION_SIZE,  [CLASS]  HypergeometricDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,int,int,int)  RandomGenerator  rng  int  populationSize  int  numberOfSuccesses  int  sampleSize  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  long  serialVersionUID  int  numberOfSuccesses  populationSize  sampleSize  RandomGenerator  rng  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.25	90	90	1	replace	Integer  numberOfSuccesses  =  rng.getIntValue(populationSize,  populationSize);	  Integer    numberOfSuccesses    =    rng.getIntValue(populationSize);    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
17	[BUG]  [BUGGY]  if(numberOfSuccesses  <  =  0)  {  if(numberOfSuccesses  >  PopulationSize)  {  throw  new  NotPositiveException(LocalizedFormats.NUMBER_OF_SUCCESS_LARGER_THAN_POPUL  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      throws  NotPositiveException,  NotStrictlyPositiveException,  NumberIsTooLargeException  {  super(rng);  if  (populationSize  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.POPULATION_SIZE,  populationSize);  }      [BUGGY]  if(numberOfSuccesses  <  =  0)  {  if(numberOfSuccesses  >  PopulationSize)  {  throw  new  NotPositiveException(LocalizedFormats.NUMBER_OF_SUCCESS_LARGER_THAN_POPUL  [BUGGY]      if  (numberOfSuccesses  <  0)  {  throw  new  NotPositiveException(LocalizedFormats.NUMBER_OF_SUCCESSES,  numberOfSuccesses);  }  if  (sampleSize  <  0)  {  throw  new  NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,  sampleSize);  }  if  (numberOfSuccesses  >  populationSize)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.NUMBER_OF_SUCCESS_LARGER_THAN_POPULATION_SIZE,  [CLASS]  HypergeometricDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,int,int,int)  RandomGenerator  rng  int  populationSize  int  numberOfSuccesses  int  sampleSize  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  long  serialVersionUID  int  numberOfSuccesses  populationSize  sampleSize  RandomGenerator  rng  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.25	90	90	1	replace	if(numberOfSuccesses  <  =  0)  {  if(numberOfSuccesses  >  PopulationSize)  {  throw  new  NotPositiveException(LocalizedFormats.NUMBER_OF_SUCCESS_LARGER_THAN_POPUL	  if(sampleSize    <    =    0)    {    if(numberOfSuccesses    >    PopulationSize)    {    throw    new    NotPositiveException(LocalizedFormats.NUMBER_OF_SUCCESS_LARGER_THAN_POPUL    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
18	[BUG]  [BUGGY]  if(numberOfSuccesses  <  =  0)  {  if(numberOfSuccesses  >  PopulationSize)  {  throw  new  NotPositiveException(LocalizedFormats.NUMBER_OF_SUCCESS_LARGER_THAN_POP  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      throws  NotPositiveException,  NotStrictlyPositiveException,  NumberIsTooLargeException  {  super(rng);  if  (populationSize  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.POPULATION_SIZE,  populationSize);  }      [BUGGY]  if(numberOfSuccesses  <  =  0)  {  if(numberOfSuccesses  >  PopulationSize)  {  throw  new  NotPositiveException(LocalizedFormats.NUMBER_OF_SUCCESS_LARGER_THAN_POP  [BUGGY]      if  (numberOfSuccesses  <  0)  {  throw  new  NotPositiveException(LocalizedFormats.NUMBER_OF_SUCCESSES,  numberOfSuccesses);  }  if  (sampleSize  <  0)  {  throw  new  NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,  sampleSize);  }  if  (numberOfSuccesses  >  populationSize)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.NUMBER_OF_SUCCESS_LARGER_THAN_POPULATION_SIZE,  [CLASS]  HypergeometricDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,int,int,int)  RandomGenerator  rng  int  populationSize  int  numberOfSuccesses  int  sampleSize  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  long  serialVersionUID  int  numberOfSuccesses  populationSize  sampleSize  RandomGenerator  rng  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.25	90	90	1	replace	if(numberOfSuccesses  <  =  0)  {  if(numberOfSuccesses  >  PopulationSize)  {  throw  new  NotPositiveException(LocalizedFormats.NUMBER_OF_SUCCESS_LARGER_THAN_POP	  if(sampleSize    <    =    0)    {    if(numberOfSuccesses    >    PopulationSize)    {    throw    new    NotPositiveException(LocalizedFormats.NUMBER_OF_SUCCESS_LARGER_THAN_POPUL    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
19	[BUG]  [BUGGY]  if(numberOfSuccesses  <  =  0)  {  if(numberOfSuccesses  >  populationSize)  {  throw  new  NotPositiveException(LocalizedFormats.NUMBER_OF_SUCCESSES,  numberOfSuccesses);  }  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      throws  NotPositiveException,  NotStrictlyPositiveException,  NumberIsTooLargeException  {  super(rng);  if  (populationSize  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.POPULATION_SIZE,  populationSize);  }      [BUGGY]  if(numberOfSuccesses  <  =  0)  {  if(numberOfSuccesses  >  populationSize)  {  throw  new  NotPositiveException(LocalizedFormats.NUMBER_OF_SUCCESSES,  numberOfSuccesses);  }  [BUGGY]      if  (numberOfSuccesses  <  0)  {  throw  new  NotPositiveException(LocalizedFormats.NUMBER_OF_SUCCESSES,  numberOfSuccesses);  }  if  (sampleSize  <  0)  {  throw  new  NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,  sampleSize);  }  if  (numberOfSuccesses  >  populationSize)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.NUMBER_OF_SUCCESS_LARGER_THAN_POPULATION_SIZE,  [CLASS]  HypergeometricDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,int,int,int)  RandomGenerator  rng  int  populationSize  int  numberOfSuccesses  int  sampleSize  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  long  serialVersionUID  int  numberOfSuccesses  populationSize  sampleSize  RandomGenerator  rng  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.25	90	90	1	replace	if(numberOfSuccesses  <  =  0)  {  if(numberOfSuccesses  >  populationSize)  {  throw  new  NotPositiveException(LocalizedFormats.NUMBER_OF_SUCCESSES,  numberOfSuccesses);  }	  if(sampleSize    <    =    0)    {    if(numberOfSuccesses    >    populationSize)    {    throw    new    NotPositiveException(LocalizedFormats.NUMBER_OF_SUCCESS_LARGER_THAN_POP    }    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
20	[BUG]  [BUGGY]  if(numberOfSuccesses  <  =  0)  {  if(numberOfSuccesses  >  populationSize)  {  throw  new  NotPositiveException(LocalizedFormats.NUMBER_OF_SUCCESSES,  numberOfS  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      throws  NotPositiveException,  NotStrictlyPositiveException,  NumberIsTooLargeException  {  super(rng);  if  (populationSize  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.POPULATION_SIZE,  populationSize);  }      [BUGGY]  if(numberOfSuccesses  <  =  0)  {  if(numberOfSuccesses  >  populationSize)  {  throw  new  NotPositiveException(LocalizedFormats.NUMBER_OF_SUCCESSES,  numberOfS  [BUGGY]      if  (numberOfSuccesses  <  0)  {  throw  new  NotPositiveException(LocalizedFormats.NUMBER_OF_SUCCESSES,  numberOfSuccesses);  }  if  (sampleSize  <  0)  {  throw  new  NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,  sampleSize);  }  if  (numberOfSuccesses  >  populationSize)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.NUMBER_OF_SUCCESS_LARGER_THAN_POPULATION_SIZE,  [CLASS]  HypergeometricDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,int,int,int)  RandomGenerator  rng  int  populationSize  int  numberOfSuccesses  int  sampleSize  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  long  serialVersionUID  int  numberOfSuccesses  populationSize  sampleSize  RandomGenerator  rng  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.25	90	90	1	replace	if(numberOfSuccesses  <  =  0)  {  if(numberOfSuccesses  >  populationSize)  {  throw  new  NotPositiveException(LocalizedFormats.NUMBER_OF_SUCCESSES,  numberOfS	  if(sampleSize    <    =    0)    {    if(numberOfSuccesses    >    populationSize)    {    throw    new    NotPositiveException(LocalizedFormats.NUMBER_OF_SUCCESS_LARGER_THAN_POP    }    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
21	[BUG]  [BUGGY]  Integer  numberOfSuccesses  =  new  Integer(0);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      throws  NotPositiveException,  NotStrictlyPositiveException,  NumberIsTooLargeException  {  super(rng);  if  (populationSize  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.POPULATION_SIZE,  populationSize);  }      [BUGGY]  Integer  numberOfSuccesses  =  new  Integer(0);  [BUGGY]      if  (numberOfSuccesses  <  0)  {  throw  new  NotPositiveException(LocalizedFormats.NUMBER_OF_SUCCESSES,  numberOfSuccesses);  }  if  (sampleSize  <  0)  {  throw  new  NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,  sampleSize);  }  if  (numberOfSuccesses  >  populationSize)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.NUMBER_OF_SUCCESS_LARGER_THAN_POPULATION_SIZE,  [CLASS]  HypergeometricDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,int,int,int)  RandomGenerator  rng  int  populationSize  int  numberOfSuccesses  int  sampleSize  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  long  serialVersionUID  int  numberOfSuccesses  populationSize  sampleSize  RandomGenerator  rng  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.25	90	90	1	replace	Integer  numberOfSuccesses  =  new  Integer(0);	  Integer    numberOfSuccesses    =    new    Integer(populationSize);    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
22	[BUG]  [BUGGY]  int  numberOfSuccesses  =  new  Integer(populationSize);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      throws  NotPositiveException,  NotStrictlyPositiveException,  NumberIsTooLargeException  {  super(rng);  if  (populationSize  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.POPULATION_SIZE,  populationSize);  }      [BUGGY]  int  numberOfSuccesses  =  new  Integer(populationSize);  [BUGGY]      if  (numberOfSuccesses  <  0)  {  throw  new  NotPositiveException(LocalizedFormats.NUMBER_OF_SUCCESSES,  numberOfSuccesses);  }  if  (sampleSize  <  0)  {  throw  new  NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,  sampleSize);  }  if  (numberOfSuccesses  >  populationSize)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.NUMBER_OF_SUCCESS_LARGER_THAN_POPULATION_SIZE,  [CLASS]  HypergeometricDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,int,int,int)  RandomGenerator  rng  int  populationSize  int  numberOfSuccesses  int  sampleSize  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  long  serialVersionUID  int  numberOfSuccesses  populationSize  sampleSize  RandomGenerator  rng  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.25	90	90	1	replace	int  numberOfSuccesses  =  new  Integer(populationSize);	  Integer    numberOfSuccesses    =    new    Integer(populationSize);    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
23	[BUG]  [BUGGY]  Integer  numberOfSuccesses  =  rng.getIntValue()  +  1;  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      throws  NotPositiveException,  NotStrictlyPositiveException,  NumberIsTooLargeException  {  super(rng);  if  (populationSize  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.POPULATION_SIZE,  populationSize);  }      [BUGGY]  Integer  numberOfSuccesses  =  rng.getIntValue()  +  1;  [BUGGY]      if  (numberOfSuccesses  <  0)  {  throw  new  NotPositiveException(LocalizedFormats.NUMBER_OF_SUCCESSES,  numberOfSuccesses);  }  if  (sampleSize  <  0)  {  throw  new  NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,  sampleSize);  }  if  (numberOfSuccesses  >  populationSize)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.NUMBER_OF_SUCCESS_LARGER_THAN_POPULATION_SIZE,  [CLASS]  HypergeometricDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,int,int,int)  RandomGenerator  rng  int  populationSize  int  numberOfSuccesses  int  sampleSize  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  long  serialVersionUID  int  numberOfSuccesses  populationSize  sampleSize  RandomGenerator  rng  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.25	90	90	1	replace	Integer  numberOfSuccesses  =  rng.getIntValue()  +  1;	  Integer    numberOfSuccesses    =    rng.getIntValue();    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
24	[BUG]  [BUGGY]  NumberSuccesses  numberOfSuccesses  =  numberOfSuccesses;  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      throws  NotPositiveException,  NotStrictlyPositiveException,  NumberIsTooLargeException  {  super(rng);  if  (populationSize  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.POPULATION_SIZE,  populationSize);  }      [BUGGY]  NumberSuccesses  numberOfSuccesses  =  numberOfSuccesses;  [BUGGY]      if  (numberOfSuccesses  <  0)  {  throw  new  NotPositiveException(LocalizedFormats.NUMBER_OF_SUCCESSES,  numberOfSuccesses);  }  if  (sampleSize  <  0)  {  throw  new  NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,  sampleSize);  }  if  (numberOfSuccesses  >  populationSize)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.NUMBER_OF_SUCCESS_LARGER_THAN_POPULATION_SIZE,  [CLASS]  HypergeometricDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,int,int,int)  RandomGenerator  rng  int  populationSize  int  numberOfSuccesses  int  sampleSize  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  long  serialVersionUID  int  numberOfSuccesses  populationSize  sampleSize  RandomGenerator  rng  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.25	90	90	1	replace	NumberSuccesses  numberOfSuccesses  =  numberOfSuccesses;	  if(sampleSize    <    =    0)    {    if(numberOfSuccesses    >    populationSize)    {    throw    new    NotPositiveException(LocalizedFormats.NUMBER_OF_SUCCESS_LARGER_THAN_POPULATION);    }    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
25	[BUG]  [BUGGY]  luate(rng,  sampleSize,  numberOfSuccesses);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      throws  NotPositiveException,  NotStrictlyPositiveException,  NumberIsTooLargeException  {  super(rng);  if  (populationSize  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.POPULATION_SIZE,  populationSize);  }      [BUGGY]  luate(rng,  sampleSize,  numberOfSuccesses);  [BUGGY]      if  (numberOfSuccesses  <  0)  {  throw  new  NotPositiveException(LocalizedFormats.NUMBER_OF_SUCCESSES,  numberOfSuccesses);  }  if  (sampleSize  <  0)  {  throw  new  NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,  sampleSize);  }  if  (numberOfSuccesses  >  populationSize)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.NUMBER_OF_SUCCESS_LARGER_THAN_POPULATION_SIZE,  [CLASS]  HypergeometricDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,int,int,int)  RandomGenerator  rng  int  populationSize  int  numberOfSuccesses  int  sampleSize  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  long  serialVersionUID  int  numberOfSuccesses  populationSize  sampleSize  RandomGenerator  rng  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.25	90	90	1	replace	luate(rng,  sampleSize,  numberOfSuccesses);	  if(sampleSize    <    =    0)    {    if(numberOfSuccesses    >    populationSize)    {    throw    new    NotPositiveException(LocalizedFormats.NUMBER_OF_SUCCESS_LARGER_THAN_POPULATION);    }    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
26	[BUG]  [BUGGY]  if(numberOfSuccesses  <  =  0)  {  if(numberOfSuccesses  >  populationSize)  {  throw  new  NotPositiveException(LocalizedFormats.NUMBER_OF_SUCCESS_LARGER_THAN_  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      throws  NotPositiveException,  NotStrictlyPositiveException,  NumberIsTooLargeException  {  super(rng);  if  (populationSize  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.POPULATION_SIZE,  populationSize);  }      [BUGGY]  if(numberOfSuccesses  <  =  0)  {  if(numberOfSuccesses  >  populationSize)  {  throw  new  NotPositiveException(LocalizedFormats.NUMBER_OF_SUCCESS_LARGER_THAN_  [BUGGY]      if  (numberOfSuccesses  <  0)  {  throw  new  NotPositiveException(LocalizedFormats.NUMBER_OF_SUCCESSES,  numberOfSuccesses);  }  if  (sampleSize  <  0)  {  throw  new  NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,  sampleSize);  }  if  (numberOfSuccesses  >  populationSize)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.NUMBER_OF_SUCCESS_LARGER_THAN_POPULATION_SIZE,  [CLASS]  HypergeometricDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,int,int,int)  RandomGenerator  rng  int  populationSize  int  numberOfSuccesses  int  sampleSize  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  long  serialVersionUID  int  numberOfSuccesses  populationSize  sampleSize  RandomGenerator  rng  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.25	90	90	1	replace	if(numberOfSuccesses  <  =  0)  {  if(numberOfSuccesses  >  populationSize)  {  throw  new  NotPositiveException(LocalizedFormats.NUMBER_OF_SUCCESS_LARGER_THAN_	  if(sampleSize    <    =    0)    {    if(numberOfSuccesses    >    populationSize)    {    throw    new    NotPositiveException(LocalizedFormats.NUMBER_OF_SUCCESS_LARGER_THAN_POP    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
27	[BUG]  [BUGGY]  int  numberOfSuccesses  =  rng.getNumberOfSuccesses()  *  populationSize;  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      throws  NotPositiveException,  NotStrictlyPositiveException,  NumberIsTooLargeException  {  super(rng);  if  (populationSize  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.POPULATION_SIZE,  populationSize);  }      [BUGGY]  int  numberOfSuccesses  =  rng.getNumberOfSuccesses()  *  populationSize;  [BUGGY]      if  (numberOfSuccesses  <  0)  {  throw  new  NotPositiveException(LocalizedFormats.NUMBER_OF_SUCCESSES,  numberOfSuccesses);  }  if  (sampleSize  <  0)  {  throw  new  NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,  sampleSize);  }  if  (numberOfSuccesses  >  populationSize)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.NUMBER_OF_SUCCESS_LARGER_THAN_POPULATION_SIZE,  [CLASS]  HypergeometricDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,int,int,int)  RandomGenerator  rng  int  populationSize  int  numberOfSuccesses  int  sampleSize  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  long  serialVersionUID  int  numberOfSuccesses  populationSize  sampleSize  RandomGenerator  rng  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.25	90	90	1	replace	int  numberOfSuccesses  =  rng.getNumberOfSuccesses()  *  populationSize;	  int    numberOfSuccesses    =    rng.getNumberOfSuccesses()    +    populationSize;    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
28	[BUG]  [BUGGY]  [FE]  NotPositiveException  [FE]    NotPositiveException    [CONTEXT]      throws  NotPositiveException,  NotStrictlyPositiveException,  NumberIsTooLargeException  {  super(rng);  if  (populationSize  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.POPULATION_SIZE,  populationSize);  }      [BUGGY]  if(numberOfSuccesses  <  1)  {  [BUGGY]      throw  new  NotPositiveException(LocalizedFormats.NUMBER_OF_SUCCESSES,  numberOfSuccesses);  }  if  (sampleSize  <  0)  {  throw  new  NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,  sampleSize);  }  if  (numberOfSuccesses  >  populationSize)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.NUMBER_OF_SUCCESS_LARGER_THAN_POPULATION_SIZE,  [CLASS]  HypergeometricDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,int,int,int)  RandomGenerator  rng  int  populationSize  int  numberOfSuccesses  int  sampleSize  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  long  serialVersionUID  int  numberOfSuccesses  populationSize  sampleSize  RandomGenerator  rng  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.25	90	90	1	add	if(numberOfSuccesses  <  1)  {	  if(numberOfSuccesses    >    1)    {    	compilable	  [FE]  NotPositiveException  	12	2	replace
29	[BUG]  [BUGGY]  if(numberOfSuccesses  <  1)  {  [FE]  NotPositiveException  [FE]    NotPositiveException    [CONTEXT]      throws  NotPositiveException,  NotStrictlyPositiveException,  NumberIsTooLargeException  {  super(rng);  if  (populationSize  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.POPULATION_SIZE,  populationSize);  }      [BUGGY]  if(numberOfSuccesses  <  1)  {  [BUGGY]      throw  new  NotPositiveException(LocalizedFormats.NUMBER_OF_SUCCESSES,  numberOfSuccesses);  }  if  (sampleSize  <  0)  {  throw  new  NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,  sampleSize);  }  if  (numberOfSuccesses  >  populationSize)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.NUMBER_OF_SUCCESS_LARGER_THAN_POPULATION_SIZE,  [CLASS]  HypergeometricDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,int,int,int)  RandomGenerator  rng  int  populationSize  int  numberOfSuccesses  int  sampleSize  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  long  serialVersionUID  int  numberOfSuccesses  populationSize  sampleSize  RandomGenerator  rng  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.25	90	90	1	replace	if(numberOfSuccesses  <  1)  {	  if(numberOfSuccesses    >    1)    {    	compilable	  [FE]  NotPositiveException  	12	2	replace
30	[BUG]  [BUGGY]  if(sampleSize  <  =  0)  {  [CE]  illegal  start  of  expression  [FE]        NotPositiveException      [CONTEXT]      throws  NotPositiveException,  NotStrictlyPositiveException,  NumberIsTooLargeException  {  super(rng);  if  (populationSize  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.POPULATION_SIZE,  populationSize);  }      [BUGGY]  if(sampleSize  <  =  0)  {  [BUGGY]      throw  new  NotPositiveException(LocalizedFormats.NUMBER_OF_SUCCESSES,  numberOfSuccesses);  }  if  (sampleSize  <  0)  {  throw  new  NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,  sampleSize);  }  if  (numberOfSuccesses  >  populationSize)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.NUMBER_OF_SUCCESS_LARGER_THAN_POPULATION_SIZE,  [CLASS]  HypergeometricDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,int,int,int)  RandomGenerator  rng  int  populationSize  int  numberOfSuccesses  int  sampleSize  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  long  serialVersionUID  int  numberOfSuccesses  populationSize  sampleSize  RandomGenerator  rng  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.25	90	90	1	replace	if(sampleSize  <  =  0)  {	  if(numberOfSuccesses    >    0)    {    if(numberOfSuccesses    >    0)    {    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
31	[BUG]  [BUGGY]  if(numberOfSuccesses  <  0)  {  if(numberOfSuccesses  >  populationSize)  {  throw  new  NotPositiveException(LocalizedFormats.NUMBER_OF_SUCCESS_LARGER_THAN_POPUL  [CE]  ')'  expected  [FE]            AssertionError      [CONTEXT]      throws  NotPositiveException,  NotStrictlyPositiveException,  NumberIsTooLargeException  {  super(rng);  if  (populationSize  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.POPULATION_SIZE,  populationSize);  }      [BUGGY]  if(numberOfSuccesses  <  0)  {  if(numberOfSuccesses  >  populationSize)  {  throw  new  NotPositiveException(LocalizedFormats.NUMBER_OF_SUCCESS_LARGER_THAN_POPUL  [BUGGY]      if  (numberOfSuccesses  <  0)  {  throw  new  NotPositiveException(LocalizedFormats.NUMBER_OF_SUCCESSES,  numberOfSuccesses);  }  if  (sampleSize  <  0)  {  throw  new  NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,  sampleSize);  }  if  (numberOfSuccesses  >  populationSize)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.NUMBER_OF_SUCCESS_LARGER_THAN_POPULATION_SIZE,  [CLASS]  HypergeometricDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,int,int,int)  RandomGenerator  rng  int  populationSize  int  numberOfSuccesses  int  sampleSize  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  long  serialVersionUID  int  numberOfSuccesses  populationSize  sampleSize  RandomGenerator  rng  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.25	90	90	1	replace	if(numberOfSuccesses  <  0)  {  if(numberOfSuccesses  >  populationSize)  {  throw  new  NotPositiveException(LocalizedFormats.NUMBER_OF_SUCCESS_LARGER_THAN_POPUL	  if(sampleSize    <    =    0)    {    if(numberOfSuccesses    >    populationSize)    {    throw    new    NotPositiveException(LocalizedFormats.NUMBER_OF_SUCCESS_LARGER_THAN_POPUL    	non-compiled	[CE]  ')'  expected	19	None	replace
32	[BUG]  [BUGGY]  int  sampleSize  =  populationSize  -  numberOfSuccesses  +  1;  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      throws  NotPositiveException,  NotStrictlyPositiveException,  NumberIsTooLargeException  {  super(rng);  if  (populationSize  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.POPULATION_SIZE,  populationSize);  }      [BUGGY]  int  sampleSize  =  populationSize  -  numberOfSuccesses  +  1;  [BUGGY]      if  (numberOfSuccesses  <  0)  {  throw  new  NotPositiveException(LocalizedFormats.NUMBER_OF_SUCCESSES,  numberOfSuccesses);  }  if  (sampleSize  <  0)  {  throw  new  NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,  sampleSize);  }  if  (numberOfSuccesses  >  populationSize)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.NUMBER_OF_SUCCESS_LARGER_THAN_POPULATION_SIZE,  [CLASS]  HypergeometricDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,int,int,int)  RandomGenerator  rng  int  populationSize  int  numberOfSuccesses  int  sampleSize  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  long  serialVersionUID  int  numberOfSuccesses  populationSize  sampleSize  RandomGenerator  rng  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.25	90	90	1	replace	int  sampleSize  =  populationSize  -  numberOfSuccesses  +  1;	  int    sampleSize    =    populationSize    -    numberOfSuccesses;    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
33	[BUG]  [BUGGY]  if(numberOfSuccesses  >  populationSize)  {  if(sampleSize  <  =  0)  {  throw  new  NotPositiveException(LocalizedFormats.NUMBER_OF_SUCCESS_LARGER_THAN_POPULATION  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      throws  NotPositiveException,  NotStrictlyPositiveException,  NumberIsTooLargeException  {  super(rng);  if  (populationSize  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.POPULATION_SIZE,  populationSize);  }      [BUGGY]  if(numberOfSuccesses  >  populationSize)  {  if(sampleSize  <  =  0)  {  throw  new  NotPositiveException(LocalizedFormats.NUMBER_OF_SUCCESS_LARGER_THAN_POPULATION  [BUGGY]      if  (numberOfSuccesses  <  0)  {  throw  new  NotPositiveException(LocalizedFormats.NUMBER_OF_SUCCESSES,  numberOfSuccesses);  }  if  (sampleSize  <  0)  {  throw  new  NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,  sampleSize);  }  if  (numberOfSuccesses  >  populationSize)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.NUMBER_OF_SUCCESS_LARGER_THAN_POPULATION_SIZE,  [CLASS]  HypergeometricDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,int,int,int)  RandomGenerator  rng  int  populationSize  int  numberOfSuccesses  int  sampleSize  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  long  serialVersionUID  int  numberOfSuccesses  populationSize  sampleSize  RandomGenerator  rng  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.25	90	90	1	replace	if(numberOfSuccesses  >  populationSize)  {  if(sampleSize  <  =  0)  {  throw  new  NotPositiveException(LocalizedFormats.NUMBER_OF_SUCCESS_LARGER_THAN_POPULATION	  if(sampleSize    <    =    0)    {    if(numberOfSuccesses    >    populationSize)    {    throw    new    NotPositiveException(LocalizedFormats.NUMBER_OF_SUCCESS_LARGER_THAN_POPULATION);    }    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
34	[BUG]  [BUGGY]  if(numberOfSuccesses  <  0)  {  if(numberOfSuccesses  >  populationSize)  {  throw  new  NotPositiveException(LocalizedFormats.NUMBER_OF_SUCCESS_LARGER_THAN_POP  [CE]  ')'  expected  [FE]                    AssertionError      [CONTEXT]      throws  NotPositiveException,  NotStrictlyPositiveException,  NumberIsTooLargeException  {  super(rng);  if  (populationSize  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.POPULATION_SIZE,  populationSize);  }      [BUGGY]  if(numberOfSuccesses  <  0)  {  if(numberOfSuccesses  >  populationSize)  {  throw  new  NotPositiveException(LocalizedFormats.NUMBER_OF_SUCCESS_LARGER_THAN_POP  [BUGGY]      if  (numberOfSuccesses  <  0)  {  throw  new  NotPositiveException(LocalizedFormats.NUMBER_OF_SUCCESSES,  numberOfSuccesses);  }  if  (sampleSize  <  0)  {  throw  new  NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,  sampleSize);  }  if  (numberOfSuccesses  >  populationSize)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.NUMBER_OF_SUCCESS_LARGER_THAN_POPULATION_SIZE,  [CLASS]  HypergeometricDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,int,int,int)  RandomGenerator  rng  int  populationSize  int  numberOfSuccesses  int  sampleSize  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  long  serialVersionUID  int  numberOfSuccesses  populationSize  sampleSize  RandomGenerator  rng  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.25	90	90	1	replace	if(numberOfSuccesses  <  0)  {  if(numberOfSuccesses  >  populationSize)  {  throw  new  NotPositiveException(LocalizedFormats.NUMBER_OF_SUCCESS_LARGER_THAN_POP	  if(sampleSize    <    =    0)    {    if(numberOfSuccesses    >    populationSize)    {    throw    new    NotPositiveException(LocalizedFormats.NUMBER_OF_SUCCESS_LARGER_THAN_POPULATION);    }    	non-compiled	[CE]  ')'  expected	22	None	replace
35	[BUG]  [BUGGY]  if(numberOfSuccesses  <  =  0)  {  if(numberOfSuccesses  >  PopulationSize)  {  throw  new  NotPositiveException(LocalizedFormats.NUMBER_OF_SUCCESS_LARGER_THAN_  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      throws  NotPositiveException,  NotStrictlyPositiveException,  NumberIsTooLargeException  {  super(rng);  if  (populationSize  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.POPULATION_SIZE,  populationSize);  }      [BUGGY]  if(numberOfSuccesses  <  =  0)  {  if(numberOfSuccesses  >  PopulationSize)  {  throw  new  NotPositiveException(LocalizedFormats.NUMBER_OF_SUCCESS_LARGER_THAN_  [BUGGY]      if  (numberOfSuccesses  <  0)  {  throw  new  NotPositiveException(LocalizedFormats.NUMBER_OF_SUCCESSES,  numberOfSuccesses);  }  if  (sampleSize  <  0)  {  throw  new  NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,  sampleSize);  }  if  (numberOfSuccesses  >  populationSize)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.NUMBER_OF_SUCCESS_LARGER_THAN_POPULATION_SIZE,  [CLASS]  HypergeometricDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,int,int,int)  RandomGenerator  rng  int  populationSize  int  numberOfSuccesses  int  sampleSize  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  long  serialVersionUID  int  numberOfSuccesses  populationSize  sampleSize  RandomGenerator  rng  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.25	90	90	1	replace	if(numberOfSuccesses  <  =  0)  {  if(numberOfSuccesses  >  PopulationSize)  {  throw  new  NotPositiveException(LocalizedFormats.NUMBER_OF_SUCCESS_LARGER_THAN_	  if(sampleSize    <    =    0)    {    if(numberOfSuccesses    >    PopulationSize)    {    throw    new    NotPositiveException(LocalizedFormats.NUMBER_OF_SUCCESS_LARGER_THAN_POPUL    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
36	[BUG]  [BUGGY]  if(numberOfSuccesses  <  0)  {  if(numberOfSuccesses  >  PopulationSize)  {  throw  new  NotPositiveException(LocalizedFormats.NUMBER_OF_SUCCESS_LARGER_THAN_POP  [CE]  ')'  expected  [FE]                AssertionError      [CONTEXT]      throws  NotPositiveException,  NotStrictlyPositiveException,  NumberIsTooLargeException  {  super(rng);  if  (populationSize  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.POPULATION_SIZE,  populationSize);  }      [BUGGY]  if(numberOfSuccesses  <  0)  {  if(numberOfSuccesses  >  PopulationSize)  {  throw  new  NotPositiveException(LocalizedFormats.NUMBER_OF_SUCCESS_LARGER_THAN_POP  [BUGGY]      if  (numberOfSuccesses  <  0)  {  throw  new  NotPositiveException(LocalizedFormats.NUMBER_OF_SUCCESSES,  numberOfSuccesses);  }  if  (sampleSize  <  0)  {  throw  new  NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,  sampleSize);  }  if  (numberOfSuccesses  >  populationSize)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.NUMBER_OF_SUCCESS_LARGER_THAN_POPULATION_SIZE,  [CLASS]  HypergeometricDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,int,int,int)  RandomGenerator  rng  int  populationSize  int  numberOfSuccesses  int  sampleSize  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  long  serialVersionUID  int  numberOfSuccesses  populationSize  sampleSize  RandomGenerator  rng  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.25	90	90	1	replace	if(numberOfSuccesses  <  0)  {  if(numberOfSuccesses  >  PopulationSize)  {  throw  new  NotPositiveException(LocalizedFormats.NUMBER_OF_SUCCESS_LARGER_THAN_POP	  if(sampleSize    <    =    0)    {    if(numberOfSuccesses    >    PopulationSize)    {    throw    new    NotPositiveException(LocalizedFormats.NUMBER_OF_SUCCESS_LARGER_THAN_POPUL    	non-compiled	[CE]  ')'  expected	20	None	replace
37	[BUG]  [BUGGY]  Integer  numberOfSuccesses  =  new  Integer(populationSize  -  populationSize);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      throws  NotPositiveException,  NotStrictlyPositiveException,  NumberIsTooLargeException  {  super(rng);  if  (populationSize  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.POPULATION_SIZE,  populationSize);  }      [BUGGY]  Integer  numberOfSuccesses  =  new  Integer(populationSize  -  populationSize);  [BUGGY]      if  (numberOfSuccesses  <  0)  {  throw  new  NotPositiveException(LocalizedFormats.NUMBER_OF_SUCCESSES,  numberOfSuccesses);  }  if  (sampleSize  <  0)  {  throw  new  NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,  sampleSize);  }  if  (numberOfSuccesses  >  populationSize)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.NUMBER_OF_SUCCESS_LARGER_THAN_POPULATION_SIZE,  [CLASS]  HypergeometricDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,int,int,int)  RandomGenerator  rng  int  populationSize  int  numberOfSuccesses  int  sampleSize  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  long  serialVersionUID  int  numberOfSuccesses  populationSize  sampleSize  RandomGenerator  rng  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.25	90	90	1	replace	Integer  numberOfSuccesses  =  new  Integer(populationSize  -  populationSize);	  Integer    numberOfSuccesses    =    new    Integer(populationSize);    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
38	[BUG]  [BUGGY]  if(numberOfSuccesses  >  populationSize)  {  if(sampleSize  <  =  0)  {  throw  new  NotPositiveException(LocalizedFormats.NUMBER_OF_SUCCESS_LARGER_THAN_POP  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      throws  NotPositiveException,  NotStrictlyPositiveException,  NumberIsTooLargeException  {  super(rng);  if  (populationSize  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.POPULATION_SIZE,  populationSize);  }      [BUGGY]  if(numberOfSuccesses  >  populationSize)  {  if(sampleSize  <  =  0)  {  throw  new  NotPositiveException(LocalizedFormats.NUMBER_OF_SUCCESS_LARGER_THAN_POP  [BUGGY]      if  (numberOfSuccesses  <  0)  {  throw  new  NotPositiveException(LocalizedFormats.NUMBER_OF_SUCCESSES,  numberOfSuccesses);  }  if  (sampleSize  <  0)  {  throw  new  NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,  sampleSize);  }  if  (numberOfSuccesses  >  populationSize)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.NUMBER_OF_SUCCESS_LARGER_THAN_POPULATION_SIZE,  [CLASS]  HypergeometricDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,int,int,int)  RandomGenerator  rng  int  populationSize  int  numberOfSuccesses  int  sampleSize  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  long  serialVersionUID  int  numberOfSuccesses  populationSize  sampleSize  RandomGenerator  rng  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.25	90	90	1	replace	if(numberOfSuccesses  >  populationSize)  {  if(sampleSize  <  =  0)  {  throw  new  NotPositiveException(LocalizedFormats.NUMBER_OF_SUCCESS_LARGER_THAN_POP	  if(sampleSize    <    =    0)    {    if(numberOfSuccesses    >    populationSize)    {    throw    new    NotPositiveException(LocalizedFormats.NUMBER_OF_SUCCESS_LARGER_THAN_POP    }    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
39	[BUG]  [BUGGY]  Integer  numberOfSuccesses  =  new  Integer(sampleSize);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      throws  NotPositiveException,  NotStrictlyPositiveException,  NumberIsTooLargeException  {  super(rng);  if  (populationSize  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.POPULATION_SIZE,  populationSize);  }      [BUGGY]  Integer  numberOfSuccesses  =  new  Integer(sampleSize);  [BUGGY]      if  (numberOfSuccesses  <  0)  {  throw  new  NotPositiveException(LocalizedFormats.NUMBER_OF_SUCCESSES,  numberOfSuccesses);  }  if  (sampleSize  <  0)  {  throw  new  NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,  sampleSize);  }  if  (numberOfSuccesses  >  populationSize)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.NUMBER_OF_SUCCESS_LARGER_THAN_POPULATION_SIZE,  [CLASS]  HypergeometricDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,int,int,int)  RandomGenerator  rng  int  populationSize  int  numberOfSuccesses  int  sampleSize  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  long  serialVersionUID  int  numberOfSuccesses  populationSize  sampleSize  RandomGenerator  rng  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.25	90	90	1	replace	Integer  numberOfSuccesses  =  new  Integer(sampleSize);	  Integer    numberOfSuccesses    =    new    Integer(populationSize);    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
40	[BUG]  [BUGGY]  if(numberOfSuccesses  >  populationSize)  {  throw  new  NotPositiveException(LocalizedFormats.NUMBER_OF_SUCCESS_LARGER_THAN_POPULATION);  }  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      throws  NotPositiveException,  NotStrictlyPositiveException,  NumberIsTooLargeException  {  super(rng);  if  (populationSize  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.POPULATION_SIZE,  populationSize);  }      [BUGGY]  if(numberOfSuccesses  >  populationSize)  {  throw  new  NotPositiveException(LocalizedFormats.NUMBER_OF_SUCCESS_LARGER_THAN_POPULATION);  }  [BUGGY]      if  (numberOfSuccesses  <  0)  {  throw  new  NotPositiveException(LocalizedFormats.NUMBER_OF_SUCCESSES,  numberOfSuccesses);  }  if  (sampleSize  <  0)  {  throw  new  NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,  sampleSize);  }  if  (numberOfSuccesses  >  populationSize)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.NUMBER_OF_SUCCESS_LARGER_THAN_POPULATION_SIZE,  [CLASS]  HypergeometricDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,int,int,int)  RandomGenerator  rng  int  populationSize  int  numberOfSuccesses  int  sampleSize  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  long  serialVersionUID  int  numberOfSuccesses  populationSize  sampleSize  RandomGenerator  rng  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.25	90	90	1	replace	if(numberOfSuccesses  >  populationSize)  {  throw  new  NotPositiveException(LocalizedFormats.NUMBER_OF_SUCCESS_LARGER_THAN_POPULATION);  }	  if(sampleSize    <    =    0)    {    if(numberOfSuccesses    >    populationSize)    {    throw    new    NotPositiveException(LocalizedFormats.NUMBER_OF_SUCCESS_LARGER_THAN_POPULATION);    }    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
41	[BUG]  [BUGGY]  if(numberOfSuccesses  >  populationSize)  {  if(sampleSize  <  =  0)  {  throw  new  NotPositiveException(LocalizedFormats.NUMBER_OF_SUCCESS_LARGER_THAN_POPUL  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      throws  NotPositiveException,  NotStrictlyPositiveException,  NumberIsTooLargeException  {  super(rng);  if  (populationSize  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.POPULATION_SIZE,  populationSize);  }      [BUGGY]  if(numberOfSuccesses  >  populationSize)  {  if(sampleSize  <  =  0)  {  throw  new  NotPositiveException(LocalizedFormats.NUMBER_OF_SUCCESS_LARGER_THAN_POPUL  [BUGGY]      if  (numberOfSuccesses  <  0)  {  throw  new  NotPositiveException(LocalizedFormats.NUMBER_OF_SUCCESSES,  numberOfSuccesses);  }  if  (sampleSize  <  0)  {  throw  new  NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,  sampleSize);  }  if  (numberOfSuccesses  >  populationSize)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.NUMBER_OF_SUCCESS_LARGER_THAN_POPULATION_SIZE,  [CLASS]  HypergeometricDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,int,int,int)  RandomGenerator  rng  int  populationSize  int  numberOfSuccesses  int  sampleSize  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  long  serialVersionUID  int  numberOfSuccesses  populationSize  sampleSize  RandomGenerator  rng  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.25	90	90	1	replace	if(numberOfSuccesses  >  populationSize)  {  if(sampleSize  <  =  0)  {  throw  new  NotPositiveException(LocalizedFormats.NUMBER_OF_SUCCESS_LARGER_THAN_POPUL	  if(sampleSize    <    =    0)    {    if(numberOfSuccesses    >    populationSize)    {    throw    new    NotPositiveException(LocalizedFormats.NUMBER_OF_SUCCESS_LARGER_THAN_POPUL    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
42	[BUG]  [BUGGY]  Integer  numberOfSuccesses  =  rng.getIntValue()  *  populationSize;  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      throws  NotPositiveException,  NotStrictlyPositiveException,  NumberIsTooLargeException  {  super(rng);  if  (populationSize  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.POPULATION_SIZE,  populationSize);  }      [BUGGY]  Integer  numberOfSuccesses  =  rng.getIntValue()  *  populationSize;  [BUGGY]      if  (numberOfSuccesses  <  0)  {  throw  new  NotPositiveException(LocalizedFormats.NUMBER_OF_SUCCESSES,  numberOfSuccesses);  }  if  (sampleSize  <  0)  {  throw  new  NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,  sampleSize);  }  if  (numberOfSuccesses  >  populationSize)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.NUMBER_OF_SUCCESS_LARGER_THAN_POPULATION_SIZE,  [CLASS]  HypergeometricDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,int,int,int)  RandomGenerator  rng  int  populationSize  int  numberOfSuccesses  int  sampleSize  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  long  serialVersionUID  int  numberOfSuccesses  populationSize  sampleSize  RandomGenerator  rng  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.25	90	90	1	replace	Integer  numberOfSuccesses  =  rng.getIntValue()  *  populationSize;	  Integer    numberOfSuccesses    =    rng.getIntValue();    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
43	[BUG]  [BUGGY]  if(numberOfSuccesses  >  PopulationSize)  {  if(sampleSize  <  =  0)  {  throw  new  NotPositiveException(LocalizedFormats.NUMBER_OF_SUCCESS_LARGER_THAN_POPUL  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      throws  NotPositiveException,  NotStrictlyPositiveException,  NumberIsTooLargeException  {  super(rng);  if  (populationSize  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.POPULATION_SIZE,  populationSize);  }      [BUGGY]  if(numberOfSuccesses  >  PopulationSize)  {  if(sampleSize  <  =  0)  {  throw  new  NotPositiveException(LocalizedFormats.NUMBER_OF_SUCCESS_LARGER_THAN_POPUL  [BUGGY]      if  (numberOfSuccesses  <  0)  {  throw  new  NotPositiveException(LocalizedFormats.NUMBER_OF_SUCCESSES,  numberOfSuccesses);  }  if  (sampleSize  <  0)  {  throw  new  NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,  sampleSize);  }  if  (numberOfSuccesses  >  populationSize)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.NUMBER_OF_SUCCESS_LARGER_THAN_POPULATION_SIZE,  [CLASS]  HypergeometricDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,int,int,int)  RandomGenerator  rng  int  populationSize  int  numberOfSuccesses  int  sampleSize  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  long  serialVersionUID  int  numberOfSuccesses  populationSize  sampleSize  RandomGenerator  rng  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.25	90	90	1	replace	if(numberOfSuccesses  >  PopulationSize)  {  if(sampleSize  <  =  0)  {  throw  new  NotPositiveException(LocalizedFormats.NUMBER_OF_SUCCESS_LARGER_THAN_POPUL	  if(sampleSize    <    =    0)    {    if(numberOfSuccesses    >    PopulationSize)    {    throw    new    NotPositiveException(LocalizedFormats.NUMBER_OF_SUCCESS_LARGER_THAN_POPUL    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
44	[BUG]  [BUGGY]  int  numberOfSuccesses  =  rng.getNumberOfSuccesses()  *  1;  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      throws  NotPositiveException,  NotStrictlyPositiveException,  NumberIsTooLargeException  {  super(rng);  if  (populationSize  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.POPULATION_SIZE,  populationSize);  }      [BUGGY]  int  numberOfSuccesses  =  rng.getNumberOfSuccesses()  *  1;  [BUGGY]      if  (numberOfSuccesses  <  0)  {  throw  new  NotPositiveException(LocalizedFormats.NUMBER_OF_SUCCESSES,  numberOfSuccesses);  }  if  (sampleSize  <  0)  {  throw  new  NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,  sampleSize);  }  if  (numberOfSuccesses  >  populationSize)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.NUMBER_OF_SUCCESS_LARGER_THAN_POPULATION_SIZE,  [CLASS]  HypergeometricDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,int,int,int)  RandomGenerator  rng  int  populationSize  int  numberOfSuccesses  int  sampleSize  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  long  serialVersionUID  int  numberOfSuccesses  populationSize  sampleSize  RandomGenerator  rng  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.25	90	90	1	replace	int  numberOfSuccesses  =  rng.getNumberOfSuccesses()  *  1;	  int    numberOfSuccesses    =    rng.getNumberOfSuccesses()    +    1;    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
45	[BUG]  [BUGGY]  Integer  numberOfSuccesses  =  rng.getIntValue(sampleSize);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      throws  NotPositiveException,  NotStrictlyPositiveException,  NumberIsTooLargeException  {  super(rng);  if  (populationSize  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.POPULATION_SIZE,  populationSize);  }      [BUGGY]  Integer  numberOfSuccesses  =  rng.getIntValue(sampleSize);  [BUGGY]      if  (numberOfSuccesses  <  0)  {  throw  new  NotPositiveException(LocalizedFormats.NUMBER_OF_SUCCESSES,  numberOfSuccesses);  }  if  (sampleSize  <  0)  {  throw  new  NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,  sampleSize);  }  if  (numberOfSuccesses  >  populationSize)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.NUMBER_OF_SUCCESS_LARGER_THAN_POPULATION_SIZE,  [CLASS]  HypergeometricDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,int,int,int)  RandomGenerator  rng  int  populationSize  int  numberOfSuccesses  int  sampleSize  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  long  serialVersionUID  int  numberOfSuccesses  populationSize  sampleSize  RandomGenerator  rng  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.25	90	90	1	replace	Integer  numberOfSuccesses  =  rng.getIntValue(sampleSize);	  Integer    numberOfSuccesses    =    rng.getIntValue(populationSize);    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
