bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError  [CONTEXT]  public  int  getSupportUpperBound()  {  [BUGGY]    int  sampleSize  =  getSampleSize();  [BUGGY]  return  FastMath.min(getNumberOfSuccesses(),  getSampleSize());  }  [CLASS]  HypergeometricDistribution  [METHOD]  getSupportUpperBound  [RETURN_TYPE]  int  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	321	321	1	add	    int  sampleSize  =  getSampleSize();		compilable	  [FE]  AssertionError  	22	1	add
2	[BUG]  [BUGGY]    int  sampleSize  =  getSampleSize();  [FE]  AssertionError  [FE]    AssertionError  [CONTEXT]  public  int  getSupportUpperBound()  {  [BUGGY]    int  sampleSize  =  getSampleSize();  [BUGGY]  return  FastMath.min(getNumberOfSuccesses(),  getSampleSize());  }  [CLASS]  HypergeometricDistribution  [METHOD]  getSupportUpperBound  [RETURN_TYPE]  int  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	321	321	1	replace	    int  sampleSize  =  getSampleSize();		compilable	  [FE]  AssertionError  	22	1	add
3	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError  [CONTEXT]  public  int  getSupportUpperBound()  {  [BUGGY]    int  sampleSize  =  getNumberOfSuccesses();  [BUGGY]  return  FastMath.min(getNumberOfSuccesses(),  getSampleSize());  }  [CLASS]  HypergeometricDistribution  [METHOD]  getSupportUpperBound  [RETURN_TYPE]  int  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	321	321	1	add	    int  sampleSize  =  getNumberOfSuccesses();		compilable	  [FE]  AssertionError  	22	1	add
4	[BUG]  [BUGGY]    int  sampleSize  =  getNumberOfSuccesses();  [FE]  AssertionError  [FE]      AssertionError  [CONTEXT]  public  int  getSupportUpperBound()  {  [BUGGY]    int  sampleSize  =  getNumberOfSuccesses();  [BUGGY]  return  FastMath.min(getNumberOfSuccesses(),  getSampleSize());  }  [CLASS]  HypergeometricDistribution  [METHOD]  getSupportUpperBound  [RETURN_TYPE]  int  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	321	321	1	replace	    int  sampleSize  =  getNumberOfSuccesses();		compilable	  [FE]  AssertionError  	22	1	add
5	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError  [CONTEXT]  public  int  getSupportUpperBound()  {  [BUGGY]    Integer  sampleSize  =  getSampleSize();  [BUGGY]  return  FastMath.min(getNumberOfSuccesses(),  getSampleSize());  }  [CLASS]  HypergeometricDistribution  [METHOD]  getSupportUpperBound  [RETURN_TYPE]  int  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	321	321	1	add	    Integer  sampleSize  =  getSampleSize();		compilable	  [FE]  AssertionError  	22	1	add
6	[BUG]  [BUGGY]    Integer  sampleSize  =  getSampleSize();  [FE]  AssertionError  [FE]        AssertionError  [CONTEXT]  public  int  getSupportUpperBound()  {  [BUGGY]    Integer  sampleSize  =  getSampleSize();  [BUGGY]  return  FastMath.min(getNumberOfSuccesses(),  getSampleSize());  }  [CLASS]  HypergeometricDistribution  [METHOD]  getSupportUpperBound  [RETURN_TYPE]  int  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	321	321	1	replace	    Integer  sampleSize  =  getSampleSize();		compilable	  [FE]  AssertionError  	22	1	add
7	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError  [CONTEXT]  public  int  getSupportUpperBound()  {  [BUGGY]  return  FastMath.min(getSampleSize(),  getNumberOfSuccesses());  [BUGGY]  }  [CLASS]  HypergeometricDistribution  [METHOD]  getSupportUpperBound  [RETURN_TYPE]  int  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	321	321	1	add	return  FastMath.min(getSampleSize(),  getNumberOfSuccesses());	return  FastMath.min(getNumberOfSuccesses(),  getSampleSize());  	compilable	  [FE]  AssertionError  	21	1	replace
8	[BUG]  [BUGGY]  return  FastMath.min(getSampleSize(),  getNumberOfSuccesses());  [FE]  AssertionError  [FE]    AssertionError  [CONTEXT]  public  int  getSupportUpperBound()  {  [BUGGY]  return  FastMath.min(getSampleSize(),  getNumberOfSuccesses());  [BUGGY]  }  [CLASS]  HypergeometricDistribution  [METHOD]  getSupportUpperBound  [RETURN_TYPE]  int  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	321	321	1	replace	return  FastMath.min(getSampleSize(),  getNumberOfSuccesses());	return  FastMath.min(getNumberOfSuccesses(),  getSampleSize());  	compilable	  [FE]  AssertionError  	21	1	replace
9	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError  [CONTEXT]  public  int  getSupportUpperBound()  {  [BUGGY]  return  FastMath.min(getNumberOfSuccesses(),  getSampleSize()  +  1);  [BUGGY]  }  [CLASS]  HypergeometricDistribution  [METHOD]  getSupportUpperBound  [RETURN_TYPE]  int  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	321	321	1	add	return  FastMath.min(getNumberOfSuccesses(),  getSampleSize()  +  1);	return  FastMath.min(getNumberOfSuccesses(),  getSampleSize());  	compilable	  [FE]  AssertionError  	21	2	replace
10	[BUG]  [BUGGY]  return  FastMath.min(getNumberOfSuccesses(),  getSampleSize()  +  1);  [FE]  AssertionError  [FE]      AssertionError  [CONTEXT]  public  int  getSupportUpperBound()  {  [BUGGY]  return  FastMath.min(getNumberOfSuccesses(),  getSampleSize()  +  1);  [BUGGY]  }  [CLASS]  HypergeometricDistribution  [METHOD]  getSupportUpperBound  [RETURN_TYPE]  int  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	321	321	1	replace	return  FastMath.min(getNumberOfSuccesses(),  getSampleSize()  +  1);	return  FastMath.min(getNumberOfSuccesses(),  getSampleSize());  	compilable	  [FE]  AssertionError  	21	2	replace
11	[BUG]  [BUGGY]  return  FastMath.min(getNumberOfSuccesses(),  getUpperBound());  [CE]  cannot  find  symbol  [FE]    AssertionError  [CONTEXT]  public  int  getSupportUpperBound()  {  [BUGGY]  return  FastMath.min(getNumberOfSuccesses(),  getUpperBound());  [BUGGY]  }  [CLASS]  HypergeometricDistribution  [METHOD]  getSupportUpperBound  [RETURN_TYPE]  int  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	321	321	1	replace	return  FastMath.min(getNumberOfSuccesses(),  getUpperBound());	return  FastMath.min(getNumberOfSuccesses(),  getSampleSize());  	non-compiled	[CE]  cannot  find  symbol	21	None	replace
