bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]      int  sampleSize  =  getSampleSize();  int  sampleSize  =  getSampleSize();  [CE]  variable  sampleSize  is  already  defined  in  method  getSupportUpperBound()  [FE]    AssertionError    [CONTEXT]    public  int  getSupportUpperBound()  {    [BUGGY]      int  sampleSize  =  getSampleSize();  int  sampleSize  =  getSampleSize();  [BUGGY]    return  FastMath.min(getNumberOfSuccesses(),  getSampleSize());  }  [CLASS]  HypergeometricDistribution  [METHOD]  getSupportUpperBound  [RETURN_TYPE]  int  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	321	321	1	replace	        int    sampleSize    =    getSampleSize();    int  sampleSize  =  getSampleSize();	  	non-compiled	[CE]  variable  sampleSize  is  already  defined  in  method  getSupportUpperBound()	1	None	add
2	[BUG]  [BUGGY]      int  sampleSize  =  getSampleSize();  Int  sampleSize  =  getSampleSize();  [CE]  cannot  find  symbol  [FE]      AssertionError    [CONTEXT]    public  int  getSupportUpperBound()  {    [BUGGY]      int  sampleSize  =  getSampleSize();  Int  sampleSize  =  getSampleSize();  [BUGGY]    return  FastMath.min(getNumberOfSuccesses(),  getSampleSize());  }  [CLASS]  HypergeometricDistribution  [METHOD]  getSupportUpperBound  [RETURN_TYPE]  int  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	321	321	1	replace	        int    sampleSize    =    getSampleSize();    Int  sampleSize  =  getSampleSize();	  	non-compiled	[CE]  cannot  find  symbol	1	None	add
3	[BUG]  [BUGGY]  return  FastMath.min(getSampleSize(),  getNumberOfSuccesses());  int  sampleSize  =  getSampleSize();  [CE]  unreachable  statement  [FE]    AssertionError    [CONTEXT]    public  int  getSupportUpperBound()  {    [BUGGY]  return  FastMath.min(getSampleSize(),  getNumberOfSuccesses());  int  sampleSize  =  getSampleSize();  [BUGGY]    }  [CLASS]  HypergeometricDistribution  [METHOD]  getSupportUpperBound  [RETURN_TYPE]  int  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	321	321	1	replace	return    FastMath.min(getSampleSize(),    getNumberOfSuccesses());    int  sampleSize  =  getSampleSize();	  	non-compiled	[CE]  unreachable  statement	7	None	add
4	[BUG]  [BUGGY]  return  FastMath.min(getSampleSize(),  getNumberOfSuccesses());  int  sampleSize  =  getNumberOfSuccesses();  [CE]  unreachable  statement  [FE]      AssertionError    [CONTEXT]    public  int  getSupportUpperBound()  {    [BUGGY]  return  FastMath.min(getSampleSize(),  getNumberOfSuccesses());  int  sampleSize  =  getNumberOfSuccesses();  [BUGGY]    }  [CLASS]  HypergeometricDistribution  [METHOD]  getSupportUpperBound  [RETURN_TYPE]  int  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	321	321	1	replace	return    FastMath.min(getSampleSize(),    getNumberOfSuccesses());    int  sampleSize  =  getNumberOfSuccesses();	  	non-compiled	[CE]  unreachable  statement	7	None	add
5	[BUG]  [BUGGY]  return  FastMath.min(getSampleSize(),  getNumberOfSuccesses());  Integer  sampleSize  =  getSampleSize();  [CE]  unreachable  statement  [FE]        AssertionError    [CONTEXT]    public  int  getSupportUpperBound()  {    [BUGGY]  return  FastMath.min(getSampleSize(),  getNumberOfSuccesses());  Integer  sampleSize  =  getSampleSize();  [BUGGY]    }  [CLASS]  HypergeometricDistribution  [METHOD]  getSupportUpperBound  [RETURN_TYPE]  int  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	321	321	1	replace	return    FastMath.min(getSampleSize(),    getNumberOfSuccesses());    Integer  sampleSize  =  getSampleSize();	  	non-compiled	[CE]  unreachable  statement	7	None	add
6	[BUG]  [BUGGY]  int  sampleSize  =  getNumberOfSuccesses()  -  1;  [CE]  missing  return  statement  [FE]    AssertionError    [CONTEXT]    public  int  getSupportUpperBound()  {    [BUGGY]  int  sampleSize  =  getNumberOfSuccesses()  -  1;  [BUGGY]    return  FastMath.min(getNumberOfSuccesses(),  getSampleSize());  }  [CLASS]  HypergeometricDistribution  [METHOD]  getSupportUpperBound  [RETURN_TYPE]  int  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	321	321	1	replace	int  sampleSize  =  getNumberOfSuccesses()  -  1;	      int    sampleSize    =    getNumberOfSuccesses();    	non-compiled	[CE]  missing  return  statement	4	None	replace
7	[BUG]  [BUGGY]  return  FastMath.min(getNumberOfSuccesses(),  getSampleSize()  +  1);  int  sampleSize  =  getSampleSize()  +  1;  [CE]  unreachable  statement  [FE]    AssertionError    [CONTEXT]    public  int  getSupportUpperBound()  {    [BUGGY]  return  FastMath.min(getNumberOfSuccesses(),  getSampleSize()  +  1);  int  sampleSize  =  getSampleSize()  +  1;  [BUGGY]    }  [CLASS]  HypergeometricDistribution  [METHOD]  getSupportUpperBound  [RETURN_TYPE]  int  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	321	321	1	replace	return    FastMath.min(getNumberOfSuccesses(),    getSampleSize()    +    1);    int  sampleSize  =  getSampleSize()  +  1;	  	non-compiled	[CE]  unreachable  statement	9	None	add
8	[BUG]  [BUGGY]  return  FastMath.min(getNumberOfSuccesses(),  getSampleSize()  +  1);  int  sampleSize  =  getSampleSize();  [CE]  unreachable  statement  [FE]      AssertionError    [CONTEXT]    public  int  getSupportUpperBound()  {    [BUGGY]  return  FastMath.min(getNumberOfSuccesses(),  getSampleSize()  +  1);  int  sampleSize  =  getSampleSize();  [BUGGY]    }  [CLASS]  HypergeometricDistribution  [METHOD]  getSupportUpperBound  [RETURN_TYPE]  int  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	321	321	1	replace	return    FastMath.min(getNumberOfSuccesses(),    getSampleSize()    +    1);    int  sampleSize  =  getSampleSize();	  	non-compiled	[CE]  unreachable  statement	9	None	add
9	[BUG]  [BUGGY]  return  FastMath.min(getNumberOfSuccesses(),  getSampleSize()  +  1);  int  sampleSize  =  getNumberOfSuccesses();  [CE]  unreachable  statement  [FE]        AssertionError    [CONTEXT]    public  int  getSupportUpperBound()  {    [BUGGY]  return  FastMath.min(getNumberOfSuccesses(),  getSampleSize()  +  1);  int  sampleSize  =  getNumberOfSuccesses();  [BUGGY]    }  [CLASS]  HypergeometricDistribution  [METHOD]  getSupportUpperBound  [RETURN_TYPE]  int  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	321	321	1	replace	return    FastMath.min(getNumberOfSuccesses(),    getSampleSize()    +    1);    int  sampleSize  =  getNumberOfSuccesses();	  	non-compiled	[CE]  unreachable  statement	9	None	add
10	[BUG]  [BUGGY]  Integer  sampleSize  =  getNumberOfSuccesses();  [CE]  missing  return  statement  [FE]    AssertionError    [CONTEXT]    public  int  getSupportUpperBound()  {    [BUGGY]  Integer  sampleSize  =  getNumberOfSuccesses();  [BUGGY]    return  FastMath.min(getNumberOfSuccesses(),  getSampleSize());  }  [CLASS]  HypergeometricDistribution  [METHOD]  getSupportUpperBound  [RETURN_TYPE]  int  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	321	321	1	replace	Integer  sampleSize  =  getNumberOfSuccesses();	      Integer    sampleSize    =    getSampleSize();    	non-compiled	[CE]  missing  return  statement	6	None	replace
11	[BUG]  [BUGGY]  Integer  sampleSize  =  getPopulationSize();  [CE]  missing  return  statement  [FE]      AssertionError    [CONTEXT]    public  int  getSupportUpperBound()  {    [BUGGY]  Integer  sampleSize  =  getPopulationSize();  [BUGGY]    return  FastMath.min(getNumberOfSuccesses(),  getSampleSize());  }  [CLASS]  HypergeometricDistribution  [METHOD]  getSupportUpperBound  [RETURN_TYPE]  int  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	321	321	1	replace	Integer  sampleSize  =  getPopulationSize();	      Integer    sampleSize    =    getSampleSize();    	non-compiled	[CE]  missing  return  statement	6	None	replace
12	[BUG]  [BUGGY]  int  sampleSize  =  getSampleSize()  +  1;  [CE]  missing  return  statement  [FE]    AssertionError    [CONTEXT]    public  int  getSupportUpperBound()  {    [BUGGY]  int  sampleSize  =  getSampleSize()  +  1;  [BUGGY]    return  FastMath.min(getNumberOfSuccesses(),  getSampleSize());  }  [CLASS]  HypergeometricDistribution  [METHOD]  getSupportUpperBound  [RETURN_TYPE]  int  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	321	321	1	replace	int  sampleSize  =  getSampleSize()  +  1;	      int    sampleSize    =    getSampleSize();    	non-compiled	[CE]  missing  return  statement	2	None	replace
13	[BUG]  [BUGGY]      int  sampleSize  =  getNumberOfSuccesses();  int  sampleSize  =  getNumberOfSuccesses();  [CE]  variable  sampleSize  is  already  defined  in  method  getSupportUpperBound()  [FE]    AssertionError    [CONTEXT]    public  int  getSupportUpperBound()  {    [BUGGY]      int  sampleSize  =  getNumberOfSuccesses();  int  sampleSize  =  getNumberOfSuccesses();  [BUGGY]    return  FastMath.min(getNumberOfSuccesses(),  getSampleSize());  }  [CLASS]  HypergeometricDistribution  [METHOD]  getSupportUpperBound  [RETURN_TYPE]  int  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	321	321	1	replace	        int    sampleSize    =    getNumberOfSuccesses();    int  sampleSize  =  getNumberOfSuccesses();	  	non-compiled	[CE]  variable  sampleSize  is  already  defined  in  method  getSupportUpperBound()	3	None	add
14	[BUG]  [BUGGY]      int  sampleSize  =  getNumberOfSuccesses();  Integer  sampleSize  =  getNumberOfSuccesses();  [CE]  variable  sampleSize  is  already  defined  in  method  getSupportUpperBound()  [FE]      AssertionError    [CONTEXT]    public  int  getSupportUpperBound()  {    [BUGGY]      int  sampleSize  =  getNumberOfSuccesses();  Integer  sampleSize  =  getNumberOfSuccesses();  [BUGGY]    return  FastMath.min(getNumberOfSuccesses(),  getSampleSize());  }  [CLASS]  HypergeometricDistribution  [METHOD]  getSupportUpperBound  [RETURN_TYPE]  int  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	321	321	1	replace	        int    sampleSize    =    getNumberOfSuccesses();    Integer  sampleSize  =  getNumberOfSuccesses();	  	non-compiled	[CE]  variable  sampleSize  is  already  defined  in  method  getSupportUpperBound()	3	None	add
15	[BUG]  [BUGGY]      Integer  sampleSize  =  getSampleSize();  Integer  sampleSize  =  getSampleSize();  [CE]  variable  sampleSize  is  already  defined  in  method  getSupportUpperBound()  [FE]    AssertionError    [CONTEXT]    public  int  getSupportUpperBound()  {    [BUGGY]      Integer  sampleSize  =  getSampleSize();  Integer  sampleSize  =  getSampleSize();  [BUGGY]    return  FastMath.min(getNumberOfSuccesses(),  getSampleSize());  }  [CLASS]  HypergeometricDistribution  [METHOD]  getSupportUpperBound  [RETURN_TYPE]  int  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	321	321	1	replace	        Integer    sampleSize    =    getSampleSize();    Integer  sampleSize  =  getSampleSize();	  	non-compiled	[CE]  variable  sampleSize  is  already  defined  in  method  getSupportUpperBound()	5	None	add
16	[BUG]  [BUGGY]      Integer  sampleSize  =  getSampleSize();  int  sampleSize  =  getSampleSize();  [CE]  variable  sampleSize  is  already  defined  in  method  getSupportUpperBound()  [FE]      AssertionError    [CONTEXT]    public  int  getSupportUpperBound()  {    [BUGGY]      Integer  sampleSize  =  getSampleSize();  int  sampleSize  =  getSampleSize();  [BUGGY]    return  FastMath.min(getNumberOfSuccesses(),  getSampleSize());  }  [CLASS]  HypergeometricDistribution  [METHOD]  getSupportUpperBound  [RETURN_TYPE]  int  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	321	321	1	replace	        Integer    sampleSize    =    getSampleSize();    int  sampleSize  =  getSampleSize();	  	non-compiled	[CE]  variable  sampleSize  is  already  defined  in  method  getSupportUpperBound()	5	None	add
17	[BUG]  [BUGGY]  return  FastMath.min(getNumberOfSuccesses(),  getUpperBound()  +  1);  [CE]  cannot  find  symbol  [FE]        AssertionError    [CONTEXT]    public  int  getSupportUpperBound()  {    [BUGGY]  return  FastMath.min(getNumberOfSuccesses(),  getUpperBound()  +  1);  [BUGGY]    }  [CLASS]  HypergeometricDistribution  [METHOD]  getSupportUpperBound  [RETURN_TYPE]  int  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	321	321	1	replace	return  FastMath.min(getNumberOfSuccesses(),  getUpperBound()  +  1);	  return    FastMath.min(getNumberOfSuccesses(),    getUpperBound());    	non-compiled	[CE]  cannot  find  symbol	11	None	replace
18	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    public  int  getSupportUpperBound()  {    [BUGGY]  return  FastMath.min(getSampleSize(),  getNumberOfSuccesses()  +  1);  [BUGGY]    }  [CLASS]  HypergeometricDistribution  [METHOD]  getSupportUpperBound  [RETURN_TYPE]  int  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	321	321	1	add	return  FastMath.min(getSampleSize(),  getNumberOfSuccesses()  +  1);	  return    FastMath.min(getSampleSize(),    getNumberOfSuccesses());    	compilable	  [FE]  AssertionError  	8	3	replace
19	[BUG]  [BUGGY]  return  FastMath.min(getSampleSize(),  getNumberOfSuccesses()  +  1);  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    public  int  getSupportUpperBound()  {    [BUGGY]  return  FastMath.min(getSampleSize(),  getNumberOfSuccesses()  +  1);  [BUGGY]    }  [CLASS]  HypergeometricDistribution  [METHOD]  getSupportUpperBound  [RETURN_TYPE]  int  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	321	321	1	replace	return  FastMath.min(getSampleSize(),  getNumberOfSuccesses()  +  1);	  return    FastMath.min(getSampleSize(),    getNumberOfSuccesses());    	compilable	  [FE]  AssertionError  	8	3	replace
20	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]    public  int  getSupportUpperBound()  {    [BUGGY]  return  FastMath.min(getSampleSize(),  getNumberOfSuccesses()  -  1);  [BUGGY]    }  [CLASS]  HypergeometricDistribution  [METHOD]  getSupportUpperBound  [RETURN_TYPE]  int  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	321	321	1	add	return  FastMath.min(getSampleSize(),  getNumberOfSuccesses()  -  1);	  return    FastMath.min(getSampleSize(),    getNumberOfSuccesses());    	compilable	  [FE]  AssertionError  	8	5	replace
21	[BUG]  [BUGGY]  return  FastMath.min(getSampleSize(),  getNumberOfSuccesses()  -  1);  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]    public  int  getSupportUpperBound()  {    [BUGGY]  return  FastMath.min(getSampleSize(),  getNumberOfSuccesses()  -  1);  [BUGGY]    }  [CLASS]  HypergeometricDistribution  [METHOD]  getSupportUpperBound  [RETURN_TYPE]  int  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	321	321	1	replace	return  FastMath.min(getSampleSize(),  getNumberOfSuccesses()  -  1);	  return    FastMath.min(getSampleSize(),    getNumberOfSuccesses());    	compilable	  [FE]  AssertionError  	8	5	replace
22	[BUG]  [BUGGY]  return  FastMath.min(getNumberOfSuccesses(),  getSampleSize()  +  1);  int  sampleSize  =  FastMath.min(getNumberOfSuccesses(),  getSampleSize()  +  1);  [CE]  unreachable  statement  [FE]    AssertionError    [CONTEXT]    public  int  getSupportUpperBound()  {    [BUGGY]  return  FastMath.min(getNumberOfSuccesses(),  getSampleSize()  +  1);  int  sampleSize  =  FastMath.min(getNumberOfSuccesses(),  getSampleSize()  +  1);  [BUGGY]    }  [CLASS]  HypergeometricDistribution  [METHOD]  getSupportUpperBound  [RETURN_TYPE]  int  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	321	321	1	replace	return    FastMath.min(getNumberOfSuccesses(),    getSampleSize()    +    1);    int  sampleSize  =  FastMath.min(getNumberOfSuccesses(),  getSampleSize()  +  1);	  	non-compiled	[CE]  unreachable  statement	9	None	add
23	[BUG]  [BUGGY]  return  FastMath.min(getNumberOfSuccesses(),  getSampleSize()  +  1);  int  sampleSize  =  FastMath.max(getNumberOfSuccesses(),  getSampleSize()  +  1);  [CE]  unreachable  statement  [FE]      AssertionError    [CONTEXT]    public  int  getSupportUpperBound()  {    [BUGGY]  return  FastMath.min(getNumberOfSuccesses(),  getSampleSize()  +  1);  int  sampleSize  =  FastMath.max(getNumberOfSuccesses(),  getSampleSize()  +  1);  [BUGGY]    }  [CLASS]  HypergeometricDistribution  [METHOD]  getSupportUpperBound  [RETURN_TYPE]  int  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	321	321	1	replace	return    FastMath.min(getNumberOfSuccesses(),    getSampleSize()    +    1);    int  sampleSize  =  FastMath.max(getNumberOfSuccesses(),  getSampleSize()  +  1);	  	non-compiled	[CE]  unreachable  statement	9	None	add
24	[BUG]  [BUGGY]  return  FastMath.min(getNumberOfSuccesses(),  getSampleSize()  +  1);  int  sampleSize  =  FastMath.min(getNumberOfSuccesses()  +  1,  getSampleSize()  +  1);  [CE]  unreachable  statement  [FE]        AssertionError    [CONTEXT]    public  int  getSupportUpperBound()  {    [BUGGY]  return  FastMath.min(getNumberOfSuccesses(),  getSampleSize()  +  1);  int  sampleSize  =  FastMath.min(getNumberOfSuccesses()  +  1,  getSampleSize()  +  1);  [BUGGY]    }  [CLASS]  HypergeometricDistribution  [METHOD]  getSupportUpperBound  [RETURN_TYPE]  int  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	321	321	1	replace	return    FastMath.min(getNumberOfSuccesses(),    getSampleSize()    +    1);    int  sampleSize  =  FastMath.min(getNumberOfSuccesses()  +  1,  getSampleSize()  +  1);	  	non-compiled	[CE]  unreachable  statement	9	None	add
25	[BUG]  [BUGGY]  int  sampleSize  =  getPopulationSize();  [CE]  missing  return  statement  [FE]    AssertionError    [CONTEXT]    public  int  getSupportUpperBound()  {    [BUGGY]  int  sampleSize  =  getPopulationSize();  [BUGGY]    return  FastMath.min(getNumberOfSuccesses(),  getSampleSize());  }  [CLASS]  HypergeometricDistribution  [METHOD]  getSupportUpperBound  [RETURN_TYPE]  int  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	321	321	1	replace	int  sampleSize  =  getPopulationSize();	      int    sampleSize    =    getSampleSize();    	non-compiled	[CE]  missing  return  statement	2	None	replace
26	[BUG]  [BUGGY]  return  FastMath.min(getNumberOfSuccesses(),  getLowerBound());  [CE]  cannot  find  symbol  [FE]        AssertionError    [CONTEXT]    public  int  getSupportUpperBound()  {    [BUGGY]  return  FastMath.min(getNumberOfSuccesses(),  getLowerBound());  [BUGGY]    }  [CLASS]  HypergeometricDistribution  [METHOD]  getSupportUpperBound  [RETURN_TYPE]  int  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	321	321	1	replace	return  FastMath.min(getNumberOfSuccesses(),  getLowerBound());	  return    FastMath.min(getNumberOfSuccesses(),    getUpperBound());    	non-compiled	[CE]  cannot  find  symbol	11	None	replace
27	[BUG]  [BUGGY]  return  FastMath.min(getSampleSize(),  getNumberOfSuccesses());  int  sampleSize  =  FastMath.min(getSampleSize(),  getNumberOfSuccesses());  [CE]  unreachable  statement  [FE]    AssertionError    [CONTEXT]    public  int  getSupportUpperBound()  {    [BUGGY]  return  FastMath.min(getSampleSize(),  getNumberOfSuccesses());  int  sampleSize  =  FastMath.min(getSampleSize(),  getNumberOfSuccesses());  [BUGGY]    }  [CLASS]  HypergeometricDistribution  [METHOD]  getSupportUpperBound  [RETURN_TYPE]  int  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	321	321	1	replace	return    FastMath.min(getSampleSize(),    getNumberOfSuccesses());    int  sampleSize  =  FastMath.min(getSampleSize(),  getNumberOfSuccesses());	  	non-compiled	[CE]  unreachable  statement	7	None	add
28	[BUG]  [BUGGY]      int  sampleSize  =  getSampleSize();  Integer  sampleSize  =  getSampleSize();  [CE]  variable  sampleSize  is  already  defined  in  method  getSupportUpperBound()  [FE]    AssertionError    [CONTEXT]    public  int  getSupportUpperBound()  {    [BUGGY]      int  sampleSize  =  getSampleSize();  Integer  sampleSize  =  getSampleSize();  [BUGGY]    return  FastMath.min(getNumberOfSuccesses(),  getSampleSize());  }  [CLASS]  HypergeometricDistribution  [METHOD]  getSupportUpperBound  [RETURN_TYPE]  int  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	321	321	1	replace	        int    sampleSize    =    getSampleSize();    Integer  sampleSize  =  getSampleSize();	  	non-compiled	[CE]  variable  sampleSize  is  already  defined  in  method  getSupportUpperBound()	1	None	add
29	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    public  int  getSupportUpperBound()  {    [BUGGY]  return  FastMath.max(getNumberOfSuccesses(),  getSampleSize());  [BUGGY]    }  [CLASS]  HypergeometricDistribution  [METHOD]  getSupportUpperBound  [RETURN_TYPE]  int  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	321	321	1	add	return  FastMath.max(getNumberOfSuccesses(),  getSampleSize());	  return    FastMath.min(getNumberOfSuccesses(),    getSampleSize()    +    1);    	compilable	  [FE]  AssertionError  	10	4	replace
30	[BUG]  [BUGGY]  return  FastMath.max(getNumberOfSuccesses(),  getSampleSize());  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    public  int  getSupportUpperBound()  {    [BUGGY]  return  FastMath.max(getNumberOfSuccesses(),  getSampleSize());  [BUGGY]    }  [CLASS]  HypergeometricDistribution  [METHOD]  getSupportUpperBound  [RETURN_TYPE]  int  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	321	321	1	replace	return  FastMath.max(getNumberOfSuccesses(),  getSampleSize());	  return    FastMath.min(getNumberOfSuccesses(),    getSampleSize()    +    1);    	compilable	  [FE]  AssertionError  	10	4	replace
31	[BUG]  [BUGGY]      int  sampleSize  =  getNumberOfSuccesses();  Int  sampleSize  =  getNumberOfSuccesses();  [CE]  cannot  find  symbol  [FE]    AssertionError    [CONTEXT]    public  int  getSupportUpperBound()  {    [BUGGY]      int  sampleSize  =  getNumberOfSuccesses();  Int  sampleSize  =  getNumberOfSuccesses();  [BUGGY]    return  FastMath.min(getNumberOfSuccesses(),  getSampleSize());  }  [CLASS]  HypergeometricDistribution  [METHOD]  getSupportUpperBound  [RETURN_TYPE]  int  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	321	321	1	replace	        int    sampleSize    =    getNumberOfSuccesses();    Int  sampleSize  =  getNumberOfSuccesses();	  	non-compiled	[CE]  cannot  find  symbol	3	None	add
