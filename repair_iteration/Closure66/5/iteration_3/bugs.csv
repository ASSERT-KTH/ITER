bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  Node  rightType  =  assign.getLastChild();  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      JSType  rvalueType  =  getJSType(assign.getLastChild());  Var  var  =  t.getScope().getVar(lvalue.getString());  if  (var  !=  null)  {  if  (var.isTypeInferred())  {  return;  }  }  }        [BUGGY]  Node  rightType  =  assign.getLastChild();  [BUGGY]      Node  rightChild  =  assign.getLastChild();  JSType  rightType  =  getJSType(rightChild);  if  (validator.expectCanAssignTo(  t,  assign,  rightType,  leftType,       "assignment     "))  {  ensureTyped(t,  assign,  rightType);  }  else  {  ensureTyped(t,  assign);  }  }  [CLASS]  TypeCheck  [METHOD]  visitAssign  [RETURN_TYPE]  void  NodeTraversal  t  Node  assign  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  jsType  leftType  objectJsType  rightType  rvalueType  NodeTraversal  t  DiagnosticGroup  ALL_DIAGNOSTICS  CheckLevel  reportMissingOverride  reportUnknownTypes  Var  var  Node  assign  lvalue  object  object2  rightChild  rvalue  FunctionType  functionType  ScopeCreator  scopeCreator  String  OVERRIDING_PROTOTYPE_WITH_NON_OBJECT  functionPrivateName  message  property  property2  JSDocInfo  info  int  noTypeCheckSection  nullCount  typedCount  unknownCount  TypeValidator  validator  ObjectType  type  AbstractCompiler  compiler  JSTypeRegistry  typeRegistry  boolean  enterSection  externs  inExterns  report  reportMissingProperties  typeable  Scope  outerScope  topScope  DiagnosticType  BAD_DELETE  BAD_IMPLEMENTED_TYPE  BIT_OPERATION  CONFLICTING_EXTENDED_TYPE  CONFLICTING_IMPLEMENTED_TYPE  CONSTRUCTOR_NOT_CALLABLE  DETERMINISTIC_TEST  DETERMINISTIC_TEST_NO_RESULT  ENUM_DUP  ENUM_NOT_CONSTANT  EXPECTED_THIS_TYPE  FUNCTION_MASKS_VARIABLE  HIDDEN_INTERFACE_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY_MISMATCH  ILLEGAL_IMPLICIT_CAST  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE  INEXISTENT_ENUM_ELEMENT  INEXISTENT_PROPERTY  INTERFACE_FUNCTION_NOT_EMPTY  INTERFACE_METHOD_OVERRIDE  INVALID_INTERFACE_MEMBER_DECLARATION  MULTIPLE_VAR_DEF  NOT_A_CONSTRUCTOR  NOT_CALLABLE  UNEXPECTED_TOKEN  UNKNOWN_EXPR_TYPE  UNKNOWN_OVERRIDE  UNRESOLVED_TYPE  WRONG_ARGUMENT_COUNT  diagnosticType  InferJSDocInfo  inferJSDocInfo  	projects/Closure66/src/com/google/javascript/jscomp/TypeCheck.java	0.21320071635561041	938	938	2	replace	Node  rightType  =  assign.getLastChild();	  Node    rightType    =    assign.getFirstChild();    	non-compiled	[CE]  orphaned  case	23	None	replace
2	[BUG]  [BUGGY]  Node  rightType  =  var.getFirstChild();  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      JSType  rvalueType  =  getJSType(assign.getLastChild());  Var  var  =  t.getScope().getVar(lvalue.getString());  if  (var  !=  null)  {  if  (var.isTypeInferred())  {  return;  }  }  }        [BUGGY]  Node  rightType  =  var.getFirstChild();  [BUGGY]      Node  rightChild  =  assign.getLastChild();  JSType  rightType  =  getJSType(rightChild);  if  (validator.expectCanAssignTo(  t,  assign,  rightType,  leftType,       "assignment     "))  {  ensureTyped(t,  assign,  rightType);  }  else  {  ensureTyped(t,  assign);  }  }  [CLASS]  TypeCheck  [METHOD]  visitAssign  [RETURN_TYPE]  void  NodeTraversal  t  Node  assign  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  jsType  leftType  objectJsType  rightType  rvalueType  NodeTraversal  t  DiagnosticGroup  ALL_DIAGNOSTICS  CheckLevel  reportMissingOverride  reportUnknownTypes  Var  var  Node  assign  lvalue  object  object2  rightChild  rvalue  FunctionType  functionType  ScopeCreator  scopeCreator  String  OVERRIDING_PROTOTYPE_WITH_NON_OBJECT  functionPrivateName  message  property  property2  JSDocInfo  info  int  noTypeCheckSection  nullCount  typedCount  unknownCount  TypeValidator  validator  ObjectType  type  AbstractCompiler  compiler  JSTypeRegistry  typeRegistry  boolean  enterSection  externs  inExterns  report  reportMissingProperties  typeable  Scope  outerScope  topScope  DiagnosticType  BAD_DELETE  BAD_IMPLEMENTED_TYPE  BIT_OPERATION  CONFLICTING_EXTENDED_TYPE  CONFLICTING_IMPLEMENTED_TYPE  CONSTRUCTOR_NOT_CALLABLE  DETERMINISTIC_TEST  DETERMINISTIC_TEST_NO_RESULT  ENUM_DUP  ENUM_NOT_CONSTANT  EXPECTED_THIS_TYPE  FUNCTION_MASKS_VARIABLE  HIDDEN_INTERFACE_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY_MISMATCH  ILLEGAL_IMPLICIT_CAST  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE  INEXISTENT_ENUM_ELEMENT  INEXISTENT_PROPERTY  INTERFACE_FUNCTION_NOT_EMPTY  INTERFACE_METHOD_OVERRIDE  INVALID_INTERFACE_MEMBER_DECLARATION  MULTIPLE_VAR_DEF  NOT_A_CONSTRUCTOR  NOT_CALLABLE  UNEXPECTED_TOKEN  UNKNOWN_EXPR_TYPE  UNKNOWN_OVERRIDE  UNRESOLVED_TYPE  WRONG_ARGUMENT_COUNT  diagnosticType  InferJSDocInfo  inferJSDocInfo  	projects/Closure66/src/com/google/javascript/jscomp/TypeCheck.java	0.21320071635561041	938	938	2	replace	Node  rightType  =  var.getFirstChild();	  Node    rightType    =    assign.getFirstChild();    	non-compiled	[CE]  orphaned  case	23	None	replace
3	[BUG]  [BUGGY]  Node  rightType  =  getJSType(assign.getFirstChild());  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      JSType  rvalueType  =  getJSType(assign.getLastChild());  Var  var  =  t.getScope().getVar(lvalue.getString());  if  (var  !=  null)  {  if  (var.isTypeInferred())  {  return;  }  }  }        [BUGGY]  Node  rightType  =  getJSType(assign.getFirstChild());  [BUGGY]      Node  rightChild  =  assign.getLastChild();  JSType  rightType  =  getJSType(rightChild);  if  (validator.expectCanAssignTo(  t,  assign,  rightType,  leftType,       "assignment     "))  {  ensureTyped(t,  assign,  rightType);  }  else  {  ensureTyped(t,  assign);  }  }  [CLASS]  TypeCheck  [METHOD]  visitAssign  [RETURN_TYPE]  void  NodeTraversal  t  Node  assign  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  jsType  leftType  objectJsType  rightType  rvalueType  NodeTraversal  t  DiagnosticGroup  ALL_DIAGNOSTICS  CheckLevel  reportMissingOverride  reportUnknownTypes  Var  var  Node  assign  lvalue  object  object2  rightChild  rvalue  FunctionType  functionType  ScopeCreator  scopeCreator  String  OVERRIDING_PROTOTYPE_WITH_NON_OBJECT  functionPrivateName  message  property  property2  JSDocInfo  info  int  noTypeCheckSection  nullCount  typedCount  unknownCount  TypeValidator  validator  ObjectType  type  AbstractCompiler  compiler  JSTypeRegistry  typeRegistry  boolean  enterSection  externs  inExterns  report  reportMissingProperties  typeable  Scope  outerScope  topScope  DiagnosticType  BAD_DELETE  BAD_IMPLEMENTED_TYPE  BIT_OPERATION  CONFLICTING_EXTENDED_TYPE  CONFLICTING_IMPLEMENTED_TYPE  CONSTRUCTOR_NOT_CALLABLE  DETERMINISTIC_TEST  DETERMINISTIC_TEST_NO_RESULT  ENUM_DUP  ENUM_NOT_CONSTANT  EXPECTED_THIS_TYPE  FUNCTION_MASKS_VARIABLE  HIDDEN_INTERFACE_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY_MISMATCH  ILLEGAL_IMPLICIT_CAST  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE  INEXISTENT_ENUM_ELEMENT  INEXISTENT_PROPERTY  INTERFACE_FUNCTION_NOT_EMPTY  INTERFACE_METHOD_OVERRIDE  INVALID_INTERFACE_MEMBER_DECLARATION  MULTIPLE_VAR_DEF  NOT_A_CONSTRUCTOR  NOT_CALLABLE  UNEXPECTED_TOKEN  UNKNOWN_EXPR_TYPE  UNKNOWN_OVERRIDE  UNRESOLVED_TYPE  WRONG_ARGUMENT_COUNT  diagnosticType  InferJSDocInfo  inferJSDocInfo  	projects/Closure66/src/com/google/javascript/jscomp/TypeCheck.java	0.21320071635561041	938	938	2	replace	Node  rightType  =  getJSType(assign.getFirstChild());	  Node    rightType    =    assign.getFirstChild();    	non-compiled	[CE]  orphaned  case	23	None	replace
4	[BUG]  [BUGGY]  Node  rightType  =  rvalue.getFirstChild();  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]      JSType  rvalueType  =  getJSType(assign.getLastChild());  Var  var  =  t.getScope().getVar(lvalue.getString());  if  (var  !=  null)  {  if  (var.isTypeInferred())  {  return;  }  }  }        [BUGGY]  Node  rightType  =  rvalue.getFirstChild();  [BUGGY]      Node  rightChild  =  assign.getLastChild();  JSType  rightType  =  getJSType(rightChild);  if  (validator.expectCanAssignTo(  t,  assign,  rightType,  leftType,       "assignment     "))  {  ensureTyped(t,  assign,  rightType);  }  else  {  ensureTyped(t,  assign);  }  }  [CLASS]  TypeCheck  [METHOD]  visitAssign  [RETURN_TYPE]  void  NodeTraversal  t  Node  assign  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  jsType  leftType  objectJsType  rightType  rvalueType  NodeTraversal  t  DiagnosticGroup  ALL_DIAGNOSTICS  CheckLevel  reportMissingOverride  reportUnknownTypes  Var  var  Node  assign  lvalue  object  object2  rightChild  rvalue  FunctionType  functionType  ScopeCreator  scopeCreator  String  OVERRIDING_PROTOTYPE_WITH_NON_OBJECT  functionPrivateName  message  property  property2  JSDocInfo  info  int  noTypeCheckSection  nullCount  typedCount  unknownCount  TypeValidator  validator  ObjectType  type  AbstractCompiler  compiler  JSTypeRegistry  typeRegistry  boolean  enterSection  externs  inExterns  report  reportMissingProperties  typeable  Scope  outerScope  topScope  DiagnosticType  BAD_DELETE  BAD_IMPLEMENTED_TYPE  BIT_OPERATION  CONFLICTING_EXTENDED_TYPE  CONFLICTING_IMPLEMENTED_TYPE  CONSTRUCTOR_NOT_CALLABLE  DETERMINISTIC_TEST  DETERMINISTIC_TEST_NO_RESULT  ENUM_DUP  ENUM_NOT_CONSTANT  EXPECTED_THIS_TYPE  FUNCTION_MASKS_VARIABLE  HIDDEN_INTERFACE_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY_MISMATCH  ILLEGAL_IMPLICIT_CAST  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE  INEXISTENT_ENUM_ELEMENT  INEXISTENT_PROPERTY  INTERFACE_FUNCTION_NOT_EMPTY  INTERFACE_METHOD_OVERRIDE  INVALID_INTERFACE_MEMBER_DECLARATION  MULTIPLE_VAR_DEF  NOT_A_CONSTRUCTOR  NOT_CALLABLE  UNEXPECTED_TOKEN  UNKNOWN_EXPR_TYPE  UNKNOWN_OVERRIDE  UNRESOLVED_TYPE  WRONG_ARGUMENT_COUNT  diagnosticType  InferJSDocInfo  inferJSDocInfo  	projects/Closure66/src/com/google/javascript/jscomp/TypeCheck.java	0.21320071635561041	938	938	2	replace	Node  rightType  =  rvalue.getFirstChild();	  Node    rightType    =    assign.getFirstChild();    	non-compiled	[CE]  orphaned  case	23	None	replace
5	[BUG]  [BUGGY]  Node  rightType  =  assign.getLocalPart();  [CE]  orphaned  case  [FE]                                AssertionFailedError      [CONTEXT]      JSType  rvalueType  =  getJSType(assign.getLastChild());  Var  var  =  t.getScope().getVar(lvalue.getString());  if  (var  !=  null)  {  if  (var.isTypeInferred())  {  return;  }  }  }        [BUGGY]  Node  rightType  =  assign.getLocalPart();  [BUGGY]      Node  rightChild  =  assign.getLastChild();  JSType  rightType  =  getJSType(rightChild);  if  (validator.expectCanAssignTo(  t,  assign,  rightType,  leftType,       "assignment     "))  {  ensureTyped(t,  assign,  rightType);  }  else  {  ensureTyped(t,  assign);  }  }  [CLASS]  TypeCheck  [METHOD]  visitAssign  [RETURN_TYPE]  void  NodeTraversal  t  Node  assign  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  jsType  leftType  objectJsType  rightType  rvalueType  NodeTraversal  t  DiagnosticGroup  ALL_DIAGNOSTICS  CheckLevel  reportMissingOverride  reportUnknownTypes  Var  var  Node  assign  lvalue  object  object2  rightChild  rvalue  FunctionType  functionType  ScopeCreator  scopeCreator  String  OVERRIDING_PROTOTYPE_WITH_NON_OBJECT  functionPrivateName  message  property  property2  JSDocInfo  info  int  noTypeCheckSection  nullCount  typedCount  unknownCount  TypeValidator  validator  ObjectType  type  AbstractCompiler  compiler  JSTypeRegistry  typeRegistry  boolean  enterSection  externs  inExterns  report  reportMissingProperties  typeable  Scope  outerScope  topScope  DiagnosticType  BAD_DELETE  BAD_IMPLEMENTED_TYPE  BIT_OPERATION  CONFLICTING_EXTENDED_TYPE  CONFLICTING_IMPLEMENTED_TYPE  CONSTRUCTOR_NOT_CALLABLE  DETERMINISTIC_TEST  DETERMINISTIC_TEST_NO_RESULT  ENUM_DUP  ENUM_NOT_CONSTANT  EXPECTED_THIS_TYPE  FUNCTION_MASKS_VARIABLE  HIDDEN_INTERFACE_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY_MISMATCH  ILLEGAL_IMPLICIT_CAST  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE  INEXISTENT_ENUM_ELEMENT  INEXISTENT_PROPERTY  INTERFACE_FUNCTION_NOT_EMPTY  INTERFACE_METHOD_OVERRIDE  INVALID_INTERFACE_MEMBER_DECLARATION  MULTIPLE_VAR_DEF  NOT_A_CONSTRUCTOR  NOT_CALLABLE  UNEXPECTED_TOKEN  UNKNOWN_EXPR_TYPE  UNKNOWN_OVERRIDE  UNRESOLVED_TYPE  WRONG_ARGUMENT_COUNT  diagnosticType  InferJSDocInfo  inferJSDocInfo  	projects/Closure66/src/com/google/javascript/jscomp/TypeCheck.java	0.21320071635561041	938	938	2	replace	Node  rightType  =  assign.getLocalPart();	  Node    rightType    =    assign.getFirstChild();    	non-compiled	[CE]  orphaned  case	23	None	replace
6	[BUG]  [BUGGY]  JSType  rightType  =  getJSType(assign.getFirstChild(),  assign.getLastChild());  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      JSType  rvalueType  =  getJSType(assign.getLastChild());  Var  var  =  t.getScope().getVar(lvalue.getString());  if  (var  !=  null)  {  if  (var.isTypeInferred())  {  return;  }  }  }        [BUGGY]  JSType  rightType  =  getJSType(assign.getFirstChild(),  assign.getLastChild());  [BUGGY]      Node  rightChild  =  assign.getLastChild();  JSType  rightType  =  getJSType(rightChild);  if  (validator.expectCanAssignTo(  t,  assign,  rightType,  leftType,       "assignment     "))  {  ensureTyped(t,  assign,  rightType);  }  else  {  ensureTyped(t,  assign);  }  }  [CLASS]  TypeCheck  [METHOD]  visitAssign  [RETURN_TYPE]  void  NodeTraversal  t  Node  assign  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  jsType  leftType  objectJsType  rightType  rvalueType  NodeTraversal  t  DiagnosticGroup  ALL_DIAGNOSTICS  CheckLevel  reportMissingOverride  reportUnknownTypes  Var  var  Node  assign  lvalue  object  object2  rightChild  rvalue  FunctionType  functionType  ScopeCreator  scopeCreator  String  OVERRIDING_PROTOTYPE_WITH_NON_OBJECT  functionPrivateName  message  property  property2  JSDocInfo  info  int  noTypeCheckSection  nullCount  typedCount  unknownCount  TypeValidator  validator  ObjectType  type  AbstractCompiler  compiler  JSTypeRegistry  typeRegistry  boolean  enterSection  externs  inExterns  report  reportMissingProperties  typeable  Scope  outerScope  topScope  DiagnosticType  BAD_DELETE  BAD_IMPLEMENTED_TYPE  BIT_OPERATION  CONFLICTING_EXTENDED_TYPE  CONFLICTING_IMPLEMENTED_TYPE  CONSTRUCTOR_NOT_CALLABLE  DETERMINISTIC_TEST  DETERMINISTIC_TEST_NO_RESULT  ENUM_DUP  ENUM_NOT_CONSTANT  EXPECTED_THIS_TYPE  FUNCTION_MASKS_VARIABLE  HIDDEN_INTERFACE_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY_MISMATCH  ILLEGAL_IMPLICIT_CAST  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE  INEXISTENT_ENUM_ELEMENT  INEXISTENT_PROPERTY  INTERFACE_FUNCTION_NOT_EMPTY  INTERFACE_METHOD_OVERRIDE  INVALID_INTERFACE_MEMBER_DECLARATION  MULTIPLE_VAR_DEF  NOT_A_CONSTRUCTOR  NOT_CALLABLE  UNEXPECTED_TOKEN  UNKNOWN_EXPR_TYPE  UNKNOWN_OVERRIDE  UNRESOLVED_TYPE  WRONG_ARGUMENT_COUNT  diagnosticType  InferJSDocInfo  inferJSDocInfo  	projects/Closure66/src/com/google/javascript/jscomp/TypeCheck.java	0.21320071635561041	938	938	2	replace	JSType  rightType  =  getJSType(assign.getFirstChild(),  assign.getLastChild());	  JSType    rightType    =    getJSType(assign.getFirstChild());    	non-compiled	[CE]  orphaned  case	2	None	replace
7	[BUG]  [BUGGY]  JSType  rightType  =  getJSType(assign.getFirstChild(),  assign);  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      JSType  rvalueType  =  getJSType(assign.getLastChild());  Var  var  =  t.getScope().getVar(lvalue.getString());  if  (var  !=  null)  {  if  (var.isTypeInferred())  {  return;  }  }  }        [BUGGY]  JSType  rightType  =  getJSType(assign.getFirstChild(),  assign);  [BUGGY]      Node  rightChild  =  assign.getLastChild();  JSType  rightType  =  getJSType(rightChild);  if  (validator.expectCanAssignTo(  t,  assign,  rightType,  leftType,       "assignment     "))  {  ensureTyped(t,  assign,  rightType);  }  else  {  ensureTyped(t,  assign);  }  }  [CLASS]  TypeCheck  [METHOD]  visitAssign  [RETURN_TYPE]  void  NodeTraversal  t  Node  assign  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  jsType  leftType  objectJsType  rightType  rvalueType  NodeTraversal  t  DiagnosticGroup  ALL_DIAGNOSTICS  CheckLevel  reportMissingOverride  reportUnknownTypes  Var  var  Node  assign  lvalue  object  object2  rightChild  rvalue  FunctionType  functionType  ScopeCreator  scopeCreator  String  OVERRIDING_PROTOTYPE_WITH_NON_OBJECT  functionPrivateName  message  property  property2  JSDocInfo  info  int  noTypeCheckSection  nullCount  typedCount  unknownCount  TypeValidator  validator  ObjectType  type  AbstractCompiler  compiler  JSTypeRegistry  typeRegistry  boolean  enterSection  externs  inExterns  report  reportMissingProperties  typeable  Scope  outerScope  topScope  DiagnosticType  BAD_DELETE  BAD_IMPLEMENTED_TYPE  BIT_OPERATION  CONFLICTING_EXTENDED_TYPE  CONFLICTING_IMPLEMENTED_TYPE  CONSTRUCTOR_NOT_CALLABLE  DETERMINISTIC_TEST  DETERMINISTIC_TEST_NO_RESULT  ENUM_DUP  ENUM_NOT_CONSTANT  EXPECTED_THIS_TYPE  FUNCTION_MASKS_VARIABLE  HIDDEN_INTERFACE_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY_MISMATCH  ILLEGAL_IMPLICIT_CAST  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE  INEXISTENT_ENUM_ELEMENT  INEXISTENT_PROPERTY  INTERFACE_FUNCTION_NOT_EMPTY  INTERFACE_METHOD_OVERRIDE  INVALID_INTERFACE_MEMBER_DECLARATION  MULTIPLE_VAR_DEF  NOT_A_CONSTRUCTOR  NOT_CALLABLE  UNEXPECTED_TOKEN  UNKNOWN_EXPR_TYPE  UNKNOWN_OVERRIDE  UNRESOLVED_TYPE  WRONG_ARGUMENT_COUNT  diagnosticType  InferJSDocInfo  inferJSDocInfo  	projects/Closure66/src/com/google/javascript/jscomp/TypeCheck.java	0.21320071635561041	938	938	2	replace	JSType  rightType  =  getJSType(assign.getFirstChild(),  assign);	  JSType    rightType    =    getJSType(assign.getFirstChild());    	non-compiled	[CE]  orphaned  case	2	None	replace
8	[BUG]  [BUGGY]  JSType  rightType  =  getJSType(lvalue.getFirstChild());  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      JSType  rvalueType  =  getJSType(assign.getLastChild());  Var  var  =  t.getScope().getVar(lvalue.getString());  if  (var  !=  null)  {  if  (var.isTypeInferred())  {  return;  }  }  }        [BUGGY]  JSType  rightType  =  getJSType(lvalue.getFirstChild());  [BUGGY]      Node  rightChild  =  assign.getLastChild();  JSType  rightType  =  getJSType(rightChild);  if  (validator.expectCanAssignTo(  t,  assign,  rightType,  leftType,       "assignment     "))  {  ensureTyped(t,  assign,  rightType);  }  else  {  ensureTyped(t,  assign);  }  }  [CLASS]  TypeCheck  [METHOD]  visitAssign  [RETURN_TYPE]  void  NodeTraversal  t  Node  assign  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  jsType  leftType  objectJsType  rightType  rvalueType  NodeTraversal  t  DiagnosticGroup  ALL_DIAGNOSTICS  CheckLevel  reportMissingOverride  reportUnknownTypes  Var  var  Node  assign  lvalue  object  object2  rightChild  rvalue  FunctionType  functionType  ScopeCreator  scopeCreator  String  OVERRIDING_PROTOTYPE_WITH_NON_OBJECT  functionPrivateName  message  property  property2  JSDocInfo  info  int  noTypeCheckSection  nullCount  typedCount  unknownCount  TypeValidator  validator  ObjectType  type  AbstractCompiler  compiler  JSTypeRegistry  typeRegistry  boolean  enterSection  externs  inExterns  report  reportMissingProperties  typeable  Scope  outerScope  topScope  DiagnosticType  BAD_DELETE  BAD_IMPLEMENTED_TYPE  BIT_OPERATION  CONFLICTING_EXTENDED_TYPE  CONFLICTING_IMPLEMENTED_TYPE  CONSTRUCTOR_NOT_CALLABLE  DETERMINISTIC_TEST  DETERMINISTIC_TEST_NO_RESULT  ENUM_DUP  ENUM_NOT_CONSTANT  EXPECTED_THIS_TYPE  FUNCTION_MASKS_VARIABLE  HIDDEN_INTERFACE_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY_MISMATCH  ILLEGAL_IMPLICIT_CAST  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE  INEXISTENT_ENUM_ELEMENT  INEXISTENT_PROPERTY  INTERFACE_FUNCTION_NOT_EMPTY  INTERFACE_METHOD_OVERRIDE  INVALID_INTERFACE_MEMBER_DECLARATION  MULTIPLE_VAR_DEF  NOT_A_CONSTRUCTOR  NOT_CALLABLE  UNEXPECTED_TOKEN  UNKNOWN_EXPR_TYPE  UNKNOWN_OVERRIDE  UNRESOLVED_TYPE  WRONG_ARGUMENT_COUNT  diagnosticType  InferJSDocInfo  inferJSDocInfo  	projects/Closure66/src/com/google/javascript/jscomp/TypeCheck.java	0.21320071635561041	938	938	2	replace	JSType  rightType  =  getJSType(lvalue.getFirstChild());	  JSType    rightType    =    getJSType(assign.getFirstChild());    	non-compiled	[CE]  orphaned  case	2	None	replace
9	[BUG]  [BUGGY]  Node  rightChild  =  object.getLastChild();  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      JSType  rvalueType  =  getJSType(assign.getLastChild());  Var  var  =  t.getScope().getVar(lvalue.getString());  if  (var  !=  null)  {  if  (var.isTypeInferred())  {  return;  }  }  }        [BUGGY]  Node  rightChild  =  object.getLastChild();  [BUGGY]      Node  rightChild  =  assign.getLastChild();  JSType  rightType  =  getJSType(rightChild);  if  (validator.expectCanAssignTo(  t,  assign,  rightType,  leftType,       "assignment     "))  {  ensureTyped(t,  assign,  rightType);  }  else  {  ensureTyped(t,  assign);  }  }  [CLASS]  TypeCheck  [METHOD]  visitAssign  [RETURN_TYPE]  void  NodeTraversal  t  Node  assign  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  jsType  leftType  objectJsType  rightType  rvalueType  NodeTraversal  t  DiagnosticGroup  ALL_DIAGNOSTICS  CheckLevel  reportMissingOverride  reportUnknownTypes  Var  var  Node  assign  lvalue  object  object2  rightChild  rvalue  FunctionType  functionType  ScopeCreator  scopeCreator  String  OVERRIDING_PROTOTYPE_WITH_NON_OBJECT  functionPrivateName  message  property  property2  JSDocInfo  info  int  noTypeCheckSection  nullCount  typedCount  unknownCount  TypeValidator  validator  ObjectType  type  AbstractCompiler  compiler  JSTypeRegistry  typeRegistry  boolean  enterSection  externs  inExterns  report  reportMissingProperties  typeable  Scope  outerScope  topScope  DiagnosticType  BAD_DELETE  BAD_IMPLEMENTED_TYPE  BIT_OPERATION  CONFLICTING_EXTENDED_TYPE  CONFLICTING_IMPLEMENTED_TYPE  CONSTRUCTOR_NOT_CALLABLE  DETERMINISTIC_TEST  DETERMINISTIC_TEST_NO_RESULT  ENUM_DUP  ENUM_NOT_CONSTANT  EXPECTED_THIS_TYPE  FUNCTION_MASKS_VARIABLE  HIDDEN_INTERFACE_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY_MISMATCH  ILLEGAL_IMPLICIT_CAST  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE  INEXISTENT_ENUM_ELEMENT  INEXISTENT_PROPERTY  INTERFACE_FUNCTION_NOT_EMPTY  INTERFACE_METHOD_OVERRIDE  INVALID_INTERFACE_MEMBER_DECLARATION  MULTIPLE_VAR_DEF  NOT_A_CONSTRUCTOR  NOT_CALLABLE  UNEXPECTED_TOKEN  UNKNOWN_EXPR_TYPE  UNKNOWN_OVERRIDE  UNRESOLVED_TYPE  WRONG_ARGUMENT_COUNT  diagnosticType  InferJSDocInfo  inferJSDocInfo  	projects/Closure66/src/com/google/javascript/jscomp/TypeCheck.java	0.21320071635561041	938	938	2	replace	Node  rightChild  =  object.getLastChild();	  Node    rightChild    =    object.getFirstChild();    	non-compiled	[CE]  orphaned  case	13	None	replace
10	[BUG]  [BUGGY]  Node  rightChild  =  lvalue.getFirstChild();  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      JSType  rvalueType  =  getJSType(assign.getLastChild());  Var  var  =  t.getScope().getVar(lvalue.getString());  if  (var  !=  null)  {  if  (var.isTypeInferred())  {  return;  }  }  }        [BUGGY]  Node  rightChild  =  lvalue.getFirstChild();  [BUGGY]      Node  rightChild  =  assign.getLastChild();  JSType  rightType  =  getJSType(rightChild);  if  (validator.expectCanAssignTo(  t,  assign,  rightType,  leftType,       "assignment     "))  {  ensureTyped(t,  assign,  rightType);  }  else  {  ensureTyped(t,  assign);  }  }  [CLASS]  TypeCheck  [METHOD]  visitAssign  [RETURN_TYPE]  void  NodeTraversal  t  Node  assign  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  jsType  leftType  objectJsType  rightType  rvalueType  NodeTraversal  t  DiagnosticGroup  ALL_DIAGNOSTICS  CheckLevel  reportMissingOverride  reportUnknownTypes  Var  var  Node  assign  lvalue  object  object2  rightChild  rvalue  FunctionType  functionType  ScopeCreator  scopeCreator  String  OVERRIDING_PROTOTYPE_WITH_NON_OBJECT  functionPrivateName  message  property  property2  JSDocInfo  info  int  noTypeCheckSection  nullCount  typedCount  unknownCount  TypeValidator  validator  ObjectType  type  AbstractCompiler  compiler  JSTypeRegistry  typeRegistry  boolean  enterSection  externs  inExterns  report  reportMissingProperties  typeable  Scope  outerScope  topScope  DiagnosticType  BAD_DELETE  BAD_IMPLEMENTED_TYPE  BIT_OPERATION  CONFLICTING_EXTENDED_TYPE  CONFLICTING_IMPLEMENTED_TYPE  CONSTRUCTOR_NOT_CALLABLE  DETERMINISTIC_TEST  DETERMINISTIC_TEST_NO_RESULT  ENUM_DUP  ENUM_NOT_CONSTANT  EXPECTED_THIS_TYPE  FUNCTION_MASKS_VARIABLE  HIDDEN_INTERFACE_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY_MISMATCH  ILLEGAL_IMPLICIT_CAST  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE  INEXISTENT_ENUM_ELEMENT  INEXISTENT_PROPERTY  INTERFACE_FUNCTION_NOT_EMPTY  INTERFACE_METHOD_OVERRIDE  INVALID_INTERFACE_MEMBER_DECLARATION  MULTIPLE_VAR_DEF  NOT_A_CONSTRUCTOR  NOT_CALLABLE  UNEXPECTED_TOKEN  UNKNOWN_EXPR_TYPE  UNKNOWN_OVERRIDE  UNRESOLVED_TYPE  WRONG_ARGUMENT_COUNT  diagnosticType  InferJSDocInfo  inferJSDocInfo  	projects/Closure66/src/com/google/javascript/jscomp/TypeCheck.java	0.21320071635561041	938	938	2	replace	Node  rightChild  =  lvalue.getFirstChild();	  Node    rightChild    =    object.getFirstChild();    	non-compiled	[CE]  orphaned  case	13	None	replace
11	[BUG]  [BUGGY]  Node  rightChild  =  assign.getLastChild();  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      JSType  rvalueType  =  getJSType(assign.getLastChild());  Var  var  =  t.getScope().getVar(lvalue.getString());  if  (var  !=  null)  {  if  (var.isTypeInferred())  {  return;  }  }  }        [BUGGY]  Node  rightChild  =  assign.getLastChild();  [BUGGY]      Node  rightChild  =  assign.getLastChild();  JSType  rightType  =  getJSType(rightChild);  if  (validator.expectCanAssignTo(  t,  assign,  rightType,  leftType,       "assignment     "))  {  ensureTyped(t,  assign,  rightType);  }  else  {  ensureTyped(t,  assign);  }  }  [CLASS]  TypeCheck  [METHOD]  visitAssign  [RETURN_TYPE]  void  NodeTraversal  t  Node  assign  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  jsType  leftType  objectJsType  rightType  rvalueType  NodeTraversal  t  DiagnosticGroup  ALL_DIAGNOSTICS  CheckLevel  reportMissingOverride  reportUnknownTypes  Var  var  Node  assign  lvalue  object  object2  rightChild  rvalue  FunctionType  functionType  ScopeCreator  scopeCreator  String  OVERRIDING_PROTOTYPE_WITH_NON_OBJECT  functionPrivateName  message  property  property2  JSDocInfo  info  int  noTypeCheckSection  nullCount  typedCount  unknownCount  TypeValidator  validator  ObjectType  type  AbstractCompiler  compiler  JSTypeRegistry  typeRegistry  boolean  enterSection  externs  inExterns  report  reportMissingProperties  typeable  Scope  outerScope  topScope  DiagnosticType  BAD_DELETE  BAD_IMPLEMENTED_TYPE  BIT_OPERATION  CONFLICTING_EXTENDED_TYPE  CONFLICTING_IMPLEMENTED_TYPE  CONSTRUCTOR_NOT_CALLABLE  DETERMINISTIC_TEST  DETERMINISTIC_TEST_NO_RESULT  ENUM_DUP  ENUM_NOT_CONSTANT  EXPECTED_THIS_TYPE  FUNCTION_MASKS_VARIABLE  HIDDEN_INTERFACE_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY_MISMATCH  ILLEGAL_IMPLICIT_CAST  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE  INEXISTENT_ENUM_ELEMENT  INEXISTENT_PROPERTY  INTERFACE_FUNCTION_NOT_EMPTY  INTERFACE_METHOD_OVERRIDE  INVALID_INTERFACE_MEMBER_DECLARATION  MULTIPLE_VAR_DEF  NOT_A_CONSTRUCTOR  NOT_CALLABLE  UNEXPECTED_TOKEN  UNKNOWN_EXPR_TYPE  UNKNOWN_OVERRIDE  UNRESOLVED_TYPE  WRONG_ARGUMENT_COUNT  diagnosticType  InferJSDocInfo  inferJSDocInfo  	projects/Closure66/src/com/google/javascript/jscomp/TypeCheck.java	0.21320071635561041	938	938	2	replace	Node  rightChild  =  assign.getLastChild();	  Node    rightChild    =    object.getFirstChild();    	non-compiled	[CE]  orphaned  case	13	None	replace
12	[BUG]  [BUGGY]  Node  rightChild  =  assignment.getFirstChild();  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      JSType  rvalueType  =  getJSType(assign.getLastChild());  Var  var  =  t.getScope().getVar(lvalue.getString());  if  (var  !=  null)  {  if  (var.isTypeInferred())  {  return;  }  }  }        [BUGGY]  Node  rightChild  =  assignment.getFirstChild();  [BUGGY]      Node  rightChild  =  assign.getLastChild();  JSType  rightType  =  getJSType(rightChild);  if  (validator.expectCanAssignTo(  t,  assign,  rightType,  leftType,       "assignment     "))  {  ensureTyped(t,  assign,  rightType);  }  else  {  ensureTyped(t,  assign);  }  }  [CLASS]  TypeCheck  [METHOD]  visitAssign  [RETURN_TYPE]  void  NodeTraversal  t  Node  assign  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  jsType  leftType  objectJsType  rightType  rvalueType  NodeTraversal  t  DiagnosticGroup  ALL_DIAGNOSTICS  CheckLevel  reportMissingOverride  reportUnknownTypes  Var  var  Node  assign  lvalue  object  object2  rightChild  rvalue  FunctionType  functionType  ScopeCreator  scopeCreator  String  OVERRIDING_PROTOTYPE_WITH_NON_OBJECT  functionPrivateName  message  property  property2  JSDocInfo  info  int  noTypeCheckSection  nullCount  typedCount  unknownCount  TypeValidator  validator  ObjectType  type  AbstractCompiler  compiler  JSTypeRegistry  typeRegistry  boolean  enterSection  externs  inExterns  report  reportMissingProperties  typeable  Scope  outerScope  topScope  DiagnosticType  BAD_DELETE  BAD_IMPLEMENTED_TYPE  BIT_OPERATION  CONFLICTING_EXTENDED_TYPE  CONFLICTING_IMPLEMENTED_TYPE  CONSTRUCTOR_NOT_CALLABLE  DETERMINISTIC_TEST  DETERMINISTIC_TEST_NO_RESULT  ENUM_DUP  ENUM_NOT_CONSTANT  EXPECTED_THIS_TYPE  FUNCTION_MASKS_VARIABLE  HIDDEN_INTERFACE_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY_MISMATCH  ILLEGAL_IMPLICIT_CAST  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE  INEXISTENT_ENUM_ELEMENT  INEXISTENT_PROPERTY  INTERFACE_FUNCTION_NOT_EMPTY  INTERFACE_METHOD_OVERRIDE  INVALID_INTERFACE_MEMBER_DECLARATION  MULTIPLE_VAR_DEF  NOT_A_CONSTRUCTOR  NOT_CALLABLE  UNEXPECTED_TOKEN  UNKNOWN_EXPR_TYPE  UNKNOWN_OVERRIDE  UNRESOLVED_TYPE  WRONG_ARGUMENT_COUNT  diagnosticType  InferJSDocInfo  inferJSDocInfo  	projects/Closure66/src/com/google/javascript/jscomp/TypeCheck.java	0.21320071635561041	938	938	2	replace	Node  rightChild  =  assignment.getFirstChild();	  Node    rightChild    =    object.getFirstChild();    	non-compiled	[CE]  orphaned  case	13	None	replace
13	[BUG]  [BUGGY]  Node  rightChild  =  object2.getFirstChild();  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      JSType  rvalueType  =  getJSType(assign.getLastChild());  Var  var  =  t.getScope().getVar(lvalue.getString());  if  (var  !=  null)  {  if  (var.isTypeInferred())  {  return;  }  }  }        [BUGGY]  Node  rightChild  =  object2.getFirstChild();  [BUGGY]      Node  rightChild  =  assign.getLastChild();  JSType  rightType  =  getJSType(rightChild);  if  (validator.expectCanAssignTo(  t,  assign,  rightType,  leftType,       "assignment     "))  {  ensureTyped(t,  assign,  rightType);  }  else  {  ensureTyped(t,  assign);  }  }  [CLASS]  TypeCheck  [METHOD]  visitAssign  [RETURN_TYPE]  void  NodeTraversal  t  Node  assign  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  jsType  leftType  objectJsType  rightType  rvalueType  NodeTraversal  t  DiagnosticGroup  ALL_DIAGNOSTICS  CheckLevel  reportMissingOverride  reportUnknownTypes  Var  var  Node  assign  lvalue  object  object2  rightChild  rvalue  FunctionType  functionType  ScopeCreator  scopeCreator  String  OVERRIDING_PROTOTYPE_WITH_NON_OBJECT  functionPrivateName  message  property  property2  JSDocInfo  info  int  noTypeCheckSection  nullCount  typedCount  unknownCount  TypeValidator  validator  ObjectType  type  AbstractCompiler  compiler  JSTypeRegistry  typeRegistry  boolean  enterSection  externs  inExterns  report  reportMissingProperties  typeable  Scope  outerScope  topScope  DiagnosticType  BAD_DELETE  BAD_IMPLEMENTED_TYPE  BIT_OPERATION  CONFLICTING_EXTENDED_TYPE  CONFLICTING_IMPLEMENTED_TYPE  CONSTRUCTOR_NOT_CALLABLE  DETERMINISTIC_TEST  DETERMINISTIC_TEST_NO_RESULT  ENUM_DUP  ENUM_NOT_CONSTANT  EXPECTED_THIS_TYPE  FUNCTION_MASKS_VARIABLE  HIDDEN_INTERFACE_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY_MISMATCH  ILLEGAL_IMPLICIT_CAST  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE  INEXISTENT_ENUM_ELEMENT  INEXISTENT_PROPERTY  INTERFACE_FUNCTION_NOT_EMPTY  INTERFACE_METHOD_OVERRIDE  INVALID_INTERFACE_MEMBER_DECLARATION  MULTIPLE_VAR_DEF  NOT_A_CONSTRUCTOR  NOT_CALLABLE  UNEXPECTED_TOKEN  UNKNOWN_EXPR_TYPE  UNKNOWN_OVERRIDE  UNRESOLVED_TYPE  WRONG_ARGUMENT_COUNT  diagnosticType  InferJSDocInfo  inferJSDocInfo  	projects/Closure66/src/com/google/javascript/jscomp/TypeCheck.java	0.21320071635561041	938	938	2	replace	Node  rightChild  =  object2.getFirstChild();	  Node    rightChild    =    object.getFirstChild();    	non-compiled	[CE]  orphaned  case	13	None	replace
14	[BUG]  [BUGGY]  JsType  leftType  =  getJSType(assign.getLastChild());  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      JSType  rvalueType  =  getJSType(assign.getLastChild());  Var  var  =  t.getScope().getVar(lvalue.getString());  if  (var  !=  null)  {  if  (var.isTypeInferred())  {  return;  }  }  }        [BUGGY]  JsType  leftType  =  getJSType(assign.getLastChild());  [BUGGY]      Node  rightChild  =  assign.getLastChild();  JSType  rightType  =  getJSType(rightChild);  if  (validator.expectCanAssignTo(  t,  assign,  rightType,  leftType,       "assignment     "))  {  ensureTyped(t,  assign,  rightType);  }  else  {  ensureTyped(t,  assign);  }  }  [CLASS]  TypeCheck  [METHOD]  visitAssign  [RETURN_TYPE]  void  NodeTraversal  t  Node  assign  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  jsType  leftType  objectJsType  rightType  rvalueType  NodeTraversal  t  DiagnosticGroup  ALL_DIAGNOSTICS  CheckLevel  reportMissingOverride  reportUnknownTypes  Var  var  Node  assign  lvalue  object  object2  rightChild  rvalue  FunctionType  functionType  ScopeCreator  scopeCreator  String  OVERRIDING_PROTOTYPE_WITH_NON_OBJECT  functionPrivateName  message  property  property2  JSDocInfo  info  int  noTypeCheckSection  nullCount  typedCount  unknownCount  TypeValidator  validator  ObjectType  type  AbstractCompiler  compiler  JSTypeRegistry  typeRegistry  boolean  enterSection  externs  inExterns  report  reportMissingProperties  typeable  Scope  outerScope  topScope  DiagnosticType  BAD_DELETE  BAD_IMPLEMENTED_TYPE  BIT_OPERATION  CONFLICTING_EXTENDED_TYPE  CONFLICTING_IMPLEMENTED_TYPE  CONSTRUCTOR_NOT_CALLABLE  DETERMINISTIC_TEST  DETERMINISTIC_TEST_NO_RESULT  ENUM_DUP  ENUM_NOT_CONSTANT  EXPECTED_THIS_TYPE  FUNCTION_MASKS_VARIABLE  HIDDEN_INTERFACE_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY_MISMATCH  ILLEGAL_IMPLICIT_CAST  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE  INEXISTENT_ENUM_ELEMENT  INEXISTENT_PROPERTY  INTERFACE_FUNCTION_NOT_EMPTY  INTERFACE_METHOD_OVERRIDE  INVALID_INTERFACE_MEMBER_DECLARATION  MULTIPLE_VAR_DEF  NOT_A_CONSTRUCTOR  NOT_CALLABLE  UNEXPECTED_TOKEN  UNKNOWN_EXPR_TYPE  UNKNOWN_OVERRIDE  UNRESOLVED_TYPE  WRONG_ARGUMENT_COUNT  diagnosticType  InferJSDocInfo  inferJSDocInfo  	projects/Closure66/src/com/google/javascript/jscomp/TypeCheck.java	0.21320071635561041	938	938	2	replace	JsType  leftType  =  getJSType(assign.getLastChild());	  JsType    leftType    =    getJSType(assign.getFirstChild());    	non-compiled	[CE]  orphaned  case	3	None	replace
15	[BUG]  [BUGGY]  JsType  leftType  =  getJSType(assign.getFirstChild(),  assign);  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      JSType  rvalueType  =  getJSType(assign.getLastChild());  Var  var  =  t.getScope().getVar(lvalue.getString());  if  (var  !=  null)  {  if  (var.isTypeInferred())  {  return;  }  }  }        [BUGGY]  JsType  leftType  =  getJSType(assign.getFirstChild(),  assign);  [BUGGY]      Node  rightChild  =  assign.getLastChild();  JSType  rightType  =  getJSType(rightChild);  if  (validator.expectCanAssignTo(  t,  assign,  rightType,  leftType,       "assignment     "))  {  ensureTyped(t,  assign,  rightType);  }  else  {  ensureTyped(t,  assign);  }  }  [CLASS]  TypeCheck  [METHOD]  visitAssign  [RETURN_TYPE]  void  NodeTraversal  t  Node  assign  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  jsType  leftType  objectJsType  rightType  rvalueType  NodeTraversal  t  DiagnosticGroup  ALL_DIAGNOSTICS  CheckLevel  reportMissingOverride  reportUnknownTypes  Var  var  Node  assign  lvalue  object  object2  rightChild  rvalue  FunctionType  functionType  ScopeCreator  scopeCreator  String  OVERRIDING_PROTOTYPE_WITH_NON_OBJECT  functionPrivateName  message  property  property2  JSDocInfo  info  int  noTypeCheckSection  nullCount  typedCount  unknownCount  TypeValidator  validator  ObjectType  type  AbstractCompiler  compiler  JSTypeRegistry  typeRegistry  boolean  enterSection  externs  inExterns  report  reportMissingProperties  typeable  Scope  outerScope  topScope  DiagnosticType  BAD_DELETE  BAD_IMPLEMENTED_TYPE  BIT_OPERATION  CONFLICTING_EXTENDED_TYPE  CONFLICTING_IMPLEMENTED_TYPE  CONSTRUCTOR_NOT_CALLABLE  DETERMINISTIC_TEST  DETERMINISTIC_TEST_NO_RESULT  ENUM_DUP  ENUM_NOT_CONSTANT  EXPECTED_THIS_TYPE  FUNCTION_MASKS_VARIABLE  HIDDEN_INTERFACE_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY_MISMATCH  ILLEGAL_IMPLICIT_CAST  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE  INEXISTENT_ENUM_ELEMENT  INEXISTENT_PROPERTY  INTERFACE_FUNCTION_NOT_EMPTY  INTERFACE_METHOD_OVERRIDE  INVALID_INTERFACE_MEMBER_DECLARATION  MULTIPLE_VAR_DEF  NOT_A_CONSTRUCTOR  NOT_CALLABLE  UNEXPECTED_TOKEN  UNKNOWN_EXPR_TYPE  UNKNOWN_OVERRIDE  UNRESOLVED_TYPE  WRONG_ARGUMENT_COUNT  diagnosticType  InferJSDocInfo  inferJSDocInfo  	projects/Closure66/src/com/google/javascript/jscomp/TypeCheck.java	0.21320071635561041	938	938	2	replace	JsType  leftType  =  getJSType(assign.getFirstChild(),  assign);	  JsType    leftType    =    getJSType(assign.getFirstChild());    	non-compiled	[CE]  orphaned  case	3	None	replace
16	[BUG]  [BUGGY]  JsType  leftType  =  getJSType(assign.getFirstChild(),  var);  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      JSType  rvalueType  =  getJSType(assign.getLastChild());  Var  var  =  t.getScope().getVar(lvalue.getString());  if  (var  !=  null)  {  if  (var.isTypeInferred())  {  return;  }  }  }        [BUGGY]  JsType  leftType  =  getJSType(assign.getFirstChild(),  var);  [BUGGY]      Node  rightChild  =  assign.getLastChild();  JSType  rightType  =  getJSType(rightChild);  if  (validator.expectCanAssignTo(  t,  assign,  rightType,  leftType,       "assignment     "))  {  ensureTyped(t,  assign,  rightType);  }  else  {  ensureTyped(t,  assign);  }  }  [CLASS]  TypeCheck  [METHOD]  visitAssign  [RETURN_TYPE]  void  NodeTraversal  t  Node  assign  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  jsType  leftType  objectJsType  rightType  rvalueType  NodeTraversal  t  DiagnosticGroup  ALL_DIAGNOSTICS  CheckLevel  reportMissingOverride  reportUnknownTypes  Var  var  Node  assign  lvalue  object  object2  rightChild  rvalue  FunctionType  functionType  ScopeCreator  scopeCreator  String  OVERRIDING_PROTOTYPE_WITH_NON_OBJECT  functionPrivateName  message  property  property2  JSDocInfo  info  int  noTypeCheckSection  nullCount  typedCount  unknownCount  TypeValidator  validator  ObjectType  type  AbstractCompiler  compiler  JSTypeRegistry  typeRegistry  boolean  enterSection  externs  inExterns  report  reportMissingProperties  typeable  Scope  outerScope  topScope  DiagnosticType  BAD_DELETE  BAD_IMPLEMENTED_TYPE  BIT_OPERATION  CONFLICTING_EXTENDED_TYPE  CONFLICTING_IMPLEMENTED_TYPE  CONSTRUCTOR_NOT_CALLABLE  DETERMINISTIC_TEST  DETERMINISTIC_TEST_NO_RESULT  ENUM_DUP  ENUM_NOT_CONSTANT  EXPECTED_THIS_TYPE  FUNCTION_MASKS_VARIABLE  HIDDEN_INTERFACE_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY_MISMATCH  ILLEGAL_IMPLICIT_CAST  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE  INEXISTENT_ENUM_ELEMENT  INEXISTENT_PROPERTY  INTERFACE_FUNCTION_NOT_EMPTY  INTERFACE_METHOD_OVERRIDE  INVALID_INTERFACE_MEMBER_DECLARATION  MULTIPLE_VAR_DEF  NOT_A_CONSTRUCTOR  NOT_CALLABLE  UNEXPECTED_TOKEN  UNKNOWN_EXPR_TYPE  UNKNOWN_OVERRIDE  UNRESOLVED_TYPE  WRONG_ARGUMENT_COUNT  diagnosticType  InferJSDocInfo  inferJSDocInfo  	projects/Closure66/src/com/google/javascript/jscomp/TypeCheck.java	0.21320071635561041	938	938	2	replace	JsType  leftType  =  getJSType(assign.getFirstChild(),  var);	  JsType    leftType    =    getJSType(assign.getFirstChild());    	non-compiled	[CE]  orphaned  case	3	None	replace
17	[BUG]  [BUGGY]  JSType  leftType  =  getJSType(assign.getLastChild(),  assign.getFirstChild());  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      JSType  rvalueType  =  getJSType(assign.getLastChild());  Var  var  =  t.getScope().getVar(lvalue.getString());  if  (var  !=  null)  {  if  (var.isTypeInferred())  {  return;  }  }  }        [BUGGY]  JSType  leftType  =  getJSType(assign.getLastChild(),  assign.getFirstChild());  [BUGGY]      Node  rightChild  =  assign.getLastChild();  JSType  rightType  =  getJSType(rightChild);  if  (validator.expectCanAssignTo(  t,  assign,  rightType,  leftType,       "assignment     "))  {  ensureTyped(t,  assign,  rightType);  }  else  {  ensureTyped(t,  assign);  }  }  [CLASS]  TypeCheck  [METHOD]  visitAssign  [RETURN_TYPE]  void  NodeTraversal  t  Node  assign  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  jsType  leftType  objectJsType  rightType  rvalueType  NodeTraversal  t  DiagnosticGroup  ALL_DIAGNOSTICS  CheckLevel  reportMissingOverride  reportUnknownTypes  Var  var  Node  assign  lvalue  object  object2  rightChild  rvalue  FunctionType  functionType  ScopeCreator  scopeCreator  String  OVERRIDING_PROTOTYPE_WITH_NON_OBJECT  functionPrivateName  message  property  property2  JSDocInfo  info  int  noTypeCheckSection  nullCount  typedCount  unknownCount  TypeValidator  validator  ObjectType  type  AbstractCompiler  compiler  JSTypeRegistry  typeRegistry  boolean  enterSection  externs  inExterns  report  reportMissingProperties  typeable  Scope  outerScope  topScope  DiagnosticType  BAD_DELETE  BAD_IMPLEMENTED_TYPE  BIT_OPERATION  CONFLICTING_EXTENDED_TYPE  CONFLICTING_IMPLEMENTED_TYPE  CONSTRUCTOR_NOT_CALLABLE  DETERMINISTIC_TEST  DETERMINISTIC_TEST_NO_RESULT  ENUM_DUP  ENUM_NOT_CONSTANT  EXPECTED_THIS_TYPE  FUNCTION_MASKS_VARIABLE  HIDDEN_INTERFACE_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY_MISMATCH  ILLEGAL_IMPLICIT_CAST  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE  INEXISTENT_ENUM_ELEMENT  INEXISTENT_PROPERTY  INTERFACE_FUNCTION_NOT_EMPTY  INTERFACE_METHOD_OVERRIDE  INVALID_INTERFACE_MEMBER_DECLARATION  MULTIPLE_VAR_DEF  NOT_A_CONSTRUCTOR  NOT_CALLABLE  UNEXPECTED_TOKEN  UNKNOWN_EXPR_TYPE  UNKNOWN_OVERRIDE  UNRESOLVED_TYPE  WRONG_ARGUMENT_COUNT  diagnosticType  InferJSDocInfo  inferJSDocInfo  	projects/Closure66/src/com/google/javascript/jscomp/TypeCheck.java	0.21320071635561041	938	938	2	replace	JSType  leftType  =  getJSType(assign.getLastChild(),  assign.getFirstChild());	  JSType    leftType    =    getJSType(assign.getFirstChild(),    assign.getLastChild());    	non-compiled	[CE]  orphaned  case	5	None	replace
18	[BUG]  [BUGGY]  JSType  leftType  =  getJSType(assign.getFirstChild(),  assign.getFirstChild());  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      JSType  rvalueType  =  getJSType(assign.getLastChild());  Var  var  =  t.getScope().getVar(lvalue.getString());  if  (var  !=  null)  {  if  (var.isTypeInferred())  {  return;  }  }  }        [BUGGY]  JSType  leftType  =  getJSType(assign.getFirstChild(),  assign.getFirstChild());  [BUGGY]      Node  rightChild  =  assign.getLastChild();  JSType  rightType  =  getJSType(rightChild);  if  (validator.expectCanAssignTo(  t,  assign,  rightType,  leftType,       "assignment     "))  {  ensureTyped(t,  assign,  rightType);  }  else  {  ensureTyped(t,  assign);  }  }  [CLASS]  TypeCheck  [METHOD]  visitAssign  [RETURN_TYPE]  void  NodeTraversal  t  Node  assign  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  jsType  leftType  objectJsType  rightType  rvalueType  NodeTraversal  t  DiagnosticGroup  ALL_DIAGNOSTICS  CheckLevel  reportMissingOverride  reportUnknownTypes  Var  var  Node  assign  lvalue  object  object2  rightChild  rvalue  FunctionType  functionType  ScopeCreator  scopeCreator  String  OVERRIDING_PROTOTYPE_WITH_NON_OBJECT  functionPrivateName  message  property  property2  JSDocInfo  info  int  noTypeCheckSection  nullCount  typedCount  unknownCount  TypeValidator  validator  ObjectType  type  AbstractCompiler  compiler  JSTypeRegistry  typeRegistry  boolean  enterSection  externs  inExterns  report  reportMissingProperties  typeable  Scope  outerScope  topScope  DiagnosticType  BAD_DELETE  BAD_IMPLEMENTED_TYPE  BIT_OPERATION  CONFLICTING_EXTENDED_TYPE  CONFLICTING_IMPLEMENTED_TYPE  CONSTRUCTOR_NOT_CALLABLE  DETERMINISTIC_TEST  DETERMINISTIC_TEST_NO_RESULT  ENUM_DUP  ENUM_NOT_CONSTANT  EXPECTED_THIS_TYPE  FUNCTION_MASKS_VARIABLE  HIDDEN_INTERFACE_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY_MISMATCH  ILLEGAL_IMPLICIT_CAST  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE  INEXISTENT_ENUM_ELEMENT  INEXISTENT_PROPERTY  INTERFACE_FUNCTION_NOT_EMPTY  INTERFACE_METHOD_OVERRIDE  INVALID_INTERFACE_MEMBER_DECLARATION  MULTIPLE_VAR_DEF  NOT_A_CONSTRUCTOR  NOT_CALLABLE  UNEXPECTED_TOKEN  UNKNOWN_EXPR_TYPE  UNKNOWN_OVERRIDE  UNRESOLVED_TYPE  WRONG_ARGUMENT_COUNT  diagnosticType  InferJSDocInfo  inferJSDocInfo  	projects/Closure66/src/com/google/javascript/jscomp/TypeCheck.java	0.21320071635561041	938	938	2	replace	JSType  leftType  =  getJSType(assign.getFirstChild(),  assign.getFirstChild());	  JSType    leftType    =    getJSType(assign.getFirstChild(),    assign.getLastChild());    	non-compiled	[CE]  orphaned  case	5	None	replace
19	[BUG]  [BUGGY]  JSType  leftType  =  getJSType(assign.getFirstChild(),  assign.getLastChild(),  lvalue);  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      JSType  rvalueType  =  getJSType(assign.getLastChild());  Var  var  =  t.getScope().getVar(lvalue.getString());  if  (var  !=  null)  {  if  (var.isTypeInferred())  {  return;  }  }  }        [BUGGY]  JSType  leftType  =  getJSType(assign.getFirstChild(),  assign.getLastChild(),  lvalue);  [BUGGY]      Node  rightChild  =  assign.getLastChild();  JSType  rightType  =  getJSType(rightChild);  if  (validator.expectCanAssignTo(  t,  assign,  rightType,  leftType,       "assignment     "))  {  ensureTyped(t,  assign,  rightType);  }  else  {  ensureTyped(t,  assign);  }  }  [CLASS]  TypeCheck  [METHOD]  visitAssign  [RETURN_TYPE]  void  NodeTraversal  t  Node  assign  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  jsType  leftType  objectJsType  rightType  rvalueType  NodeTraversal  t  DiagnosticGroup  ALL_DIAGNOSTICS  CheckLevel  reportMissingOverride  reportUnknownTypes  Var  var  Node  assign  lvalue  object  object2  rightChild  rvalue  FunctionType  functionType  ScopeCreator  scopeCreator  String  OVERRIDING_PROTOTYPE_WITH_NON_OBJECT  functionPrivateName  message  property  property2  JSDocInfo  info  int  noTypeCheckSection  nullCount  typedCount  unknownCount  TypeValidator  validator  ObjectType  type  AbstractCompiler  compiler  JSTypeRegistry  typeRegistry  boolean  enterSection  externs  inExterns  report  reportMissingProperties  typeable  Scope  outerScope  topScope  DiagnosticType  BAD_DELETE  BAD_IMPLEMENTED_TYPE  BIT_OPERATION  CONFLICTING_EXTENDED_TYPE  CONFLICTING_IMPLEMENTED_TYPE  CONSTRUCTOR_NOT_CALLABLE  DETERMINISTIC_TEST  DETERMINISTIC_TEST_NO_RESULT  ENUM_DUP  ENUM_NOT_CONSTANT  EXPECTED_THIS_TYPE  FUNCTION_MASKS_VARIABLE  HIDDEN_INTERFACE_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY_MISMATCH  ILLEGAL_IMPLICIT_CAST  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE  INEXISTENT_ENUM_ELEMENT  INEXISTENT_PROPERTY  INTERFACE_FUNCTION_NOT_EMPTY  INTERFACE_METHOD_OVERRIDE  INVALID_INTERFACE_MEMBER_DECLARATION  MULTIPLE_VAR_DEF  NOT_A_CONSTRUCTOR  NOT_CALLABLE  UNEXPECTED_TOKEN  UNKNOWN_EXPR_TYPE  UNKNOWN_OVERRIDE  UNRESOLVED_TYPE  WRONG_ARGUMENT_COUNT  diagnosticType  InferJSDocInfo  inferJSDocInfo  	projects/Closure66/src/com/google/javascript/jscomp/TypeCheck.java	0.21320071635561041	938	938	2	replace	JSType  leftType  =  getJSType(assign.getFirstChild(),  assign.getLastChild(),  lvalue);	  JSType    leftType    =    getJSType(assign.getFirstChild(),    assign.getLastChild());    	non-compiled	[CE]  orphaned  case	5	None	replace
20	[BUG]  [BUGGY]  JSType  leftType  =  getJSType(assign.getFirstChild(),  assign.getLastChild(),  var);  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      JSType  rvalueType  =  getJSType(assign.getLastChild());  Var  var  =  t.getScope().getVar(lvalue.getString());  if  (var  !=  null)  {  if  (var.isTypeInferred())  {  return;  }  }  }        [BUGGY]  JSType  leftType  =  getJSType(assign.getFirstChild(),  assign.getLastChild(),  var);  [BUGGY]      Node  rightChild  =  assign.getLastChild();  JSType  rightType  =  getJSType(rightChild);  if  (validator.expectCanAssignTo(  t,  assign,  rightType,  leftType,       "assignment     "))  {  ensureTyped(t,  assign,  rightType);  }  else  {  ensureTyped(t,  assign);  }  }  [CLASS]  TypeCheck  [METHOD]  visitAssign  [RETURN_TYPE]  void  NodeTraversal  t  Node  assign  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  jsType  leftType  objectJsType  rightType  rvalueType  NodeTraversal  t  DiagnosticGroup  ALL_DIAGNOSTICS  CheckLevel  reportMissingOverride  reportUnknownTypes  Var  var  Node  assign  lvalue  object  object2  rightChild  rvalue  FunctionType  functionType  ScopeCreator  scopeCreator  String  OVERRIDING_PROTOTYPE_WITH_NON_OBJECT  functionPrivateName  message  property  property2  JSDocInfo  info  int  noTypeCheckSection  nullCount  typedCount  unknownCount  TypeValidator  validator  ObjectType  type  AbstractCompiler  compiler  JSTypeRegistry  typeRegistry  boolean  enterSection  externs  inExterns  report  reportMissingProperties  typeable  Scope  outerScope  topScope  DiagnosticType  BAD_DELETE  BAD_IMPLEMENTED_TYPE  BIT_OPERATION  CONFLICTING_EXTENDED_TYPE  CONFLICTING_IMPLEMENTED_TYPE  CONSTRUCTOR_NOT_CALLABLE  DETERMINISTIC_TEST  DETERMINISTIC_TEST_NO_RESULT  ENUM_DUP  ENUM_NOT_CONSTANT  EXPECTED_THIS_TYPE  FUNCTION_MASKS_VARIABLE  HIDDEN_INTERFACE_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY_MISMATCH  ILLEGAL_IMPLICIT_CAST  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE  INEXISTENT_ENUM_ELEMENT  INEXISTENT_PROPERTY  INTERFACE_FUNCTION_NOT_EMPTY  INTERFACE_METHOD_OVERRIDE  INVALID_INTERFACE_MEMBER_DECLARATION  MULTIPLE_VAR_DEF  NOT_A_CONSTRUCTOR  NOT_CALLABLE  UNEXPECTED_TOKEN  UNKNOWN_EXPR_TYPE  UNKNOWN_OVERRIDE  UNRESOLVED_TYPE  WRONG_ARGUMENT_COUNT  diagnosticType  InferJSDocInfo  inferJSDocInfo  	projects/Closure66/src/com/google/javascript/jscomp/TypeCheck.java	0.21320071635561041	938	938	2	replace	JSType  leftType  =  getJSType(assign.getFirstChild(),  assign.getLastChild(),  var);	  JSType    leftType    =    getJSType(assign.getFirstChild(),    assign.getLastChild());    	non-compiled	[CE]  orphaned  case	5	None	replace
21	[BUG]  [BUGGY]  JSType  leftType  =  getJSType(lvalue.getString());  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      JSType  rvalueType  =  getJSType(assign.getLastChild());  Var  var  =  t.getScope().getVar(lvalue.getString());  if  (var  !=  null)  {  if  (var.isTypeInferred())  {  return;  }  }  }        [BUGGY]  JSType  leftType  =  getJSType(lvalue.getString());  [BUGGY]      Node  rightChild  =  assign.getLastChild();  JSType  rightType  =  getJSType(rightChild);  if  (validator.expectCanAssignTo(  t,  assign,  rightType,  leftType,       "assignment     "))  {  ensureTyped(t,  assign,  rightType);  }  else  {  ensureTyped(t,  assign);  }  }  [CLASS]  TypeCheck  [METHOD]  visitAssign  [RETURN_TYPE]  void  NodeTraversal  t  Node  assign  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  jsType  leftType  objectJsType  rightType  rvalueType  NodeTraversal  t  DiagnosticGroup  ALL_DIAGNOSTICS  CheckLevel  reportMissingOverride  reportUnknownTypes  Var  var  Node  assign  lvalue  object  object2  rightChild  rvalue  FunctionType  functionType  ScopeCreator  scopeCreator  String  OVERRIDING_PROTOTYPE_WITH_NON_OBJECT  functionPrivateName  message  property  property2  JSDocInfo  info  int  noTypeCheckSection  nullCount  typedCount  unknownCount  TypeValidator  validator  ObjectType  type  AbstractCompiler  compiler  JSTypeRegistry  typeRegistry  boolean  enterSection  externs  inExterns  report  reportMissingProperties  typeable  Scope  outerScope  topScope  DiagnosticType  BAD_DELETE  BAD_IMPLEMENTED_TYPE  BIT_OPERATION  CONFLICTING_EXTENDED_TYPE  CONFLICTING_IMPLEMENTED_TYPE  CONSTRUCTOR_NOT_CALLABLE  DETERMINISTIC_TEST  DETERMINISTIC_TEST_NO_RESULT  ENUM_DUP  ENUM_NOT_CONSTANT  EXPECTED_THIS_TYPE  FUNCTION_MASKS_VARIABLE  HIDDEN_INTERFACE_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY_MISMATCH  ILLEGAL_IMPLICIT_CAST  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE  INEXISTENT_ENUM_ELEMENT  INEXISTENT_PROPERTY  INTERFACE_FUNCTION_NOT_EMPTY  INTERFACE_METHOD_OVERRIDE  INVALID_INTERFACE_MEMBER_DECLARATION  MULTIPLE_VAR_DEF  NOT_A_CONSTRUCTOR  NOT_CALLABLE  UNEXPECTED_TOKEN  UNKNOWN_EXPR_TYPE  UNKNOWN_OVERRIDE  UNRESOLVED_TYPE  WRONG_ARGUMENT_COUNT  diagnosticType  InferJSDocInfo  inferJSDocInfo  	projects/Closure66/src/com/google/javascript/jscomp/TypeCheck.java	0.21320071635561041	938	938	2	replace	JSType  leftType  =  getJSType(lvalue.getString());	  JSType    leftType    =    getJSType(assign.getString());    	non-compiled	[CE]  orphaned  case	17	None	replace
22	[BUG]  [BUGGY]  Node  assign  =  var.getNext();  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      JSType  rvalueType  =  getJSType(assign.getLastChild());  Var  var  =  t.getScope().getVar(lvalue.getString());  if  (var  !=  null)  {  if  (var.isTypeInferred())  {  return;  }  }  }        [BUGGY]  Node  assign  =  var.getNext();  [BUGGY]      Node  rightChild  =  assign.getLastChild();  JSType  rightType  =  getJSType(rightChild);  if  (validator.expectCanAssignTo(  t,  assign,  rightType,  leftType,       "assignment     "))  {  ensureTyped(t,  assign,  rightType);  }  else  {  ensureTyped(t,  assign);  }  }  [CLASS]  TypeCheck  [METHOD]  visitAssign  [RETURN_TYPE]  void  NodeTraversal  t  Node  assign  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  jsType  leftType  objectJsType  rightType  rvalueType  NodeTraversal  t  DiagnosticGroup  ALL_DIAGNOSTICS  CheckLevel  reportMissingOverride  reportUnknownTypes  Var  var  Node  assign  lvalue  object  object2  rightChild  rvalue  FunctionType  functionType  ScopeCreator  scopeCreator  String  OVERRIDING_PROTOTYPE_WITH_NON_OBJECT  functionPrivateName  message  property  property2  JSDocInfo  info  int  noTypeCheckSection  nullCount  typedCount  unknownCount  TypeValidator  validator  ObjectType  type  AbstractCompiler  compiler  JSTypeRegistry  typeRegistry  boolean  enterSection  externs  inExterns  report  reportMissingProperties  typeable  Scope  outerScope  topScope  DiagnosticType  BAD_DELETE  BAD_IMPLEMENTED_TYPE  BIT_OPERATION  CONFLICTING_EXTENDED_TYPE  CONFLICTING_IMPLEMENTED_TYPE  CONSTRUCTOR_NOT_CALLABLE  DETERMINISTIC_TEST  DETERMINISTIC_TEST_NO_RESULT  ENUM_DUP  ENUM_NOT_CONSTANT  EXPECTED_THIS_TYPE  FUNCTION_MASKS_VARIABLE  HIDDEN_INTERFACE_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY_MISMATCH  ILLEGAL_IMPLICIT_CAST  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE  INEXISTENT_ENUM_ELEMENT  INEXISTENT_PROPERTY  INTERFACE_FUNCTION_NOT_EMPTY  INTERFACE_METHOD_OVERRIDE  INVALID_INTERFACE_MEMBER_DECLARATION  MULTIPLE_VAR_DEF  NOT_A_CONSTRUCTOR  NOT_CALLABLE  UNEXPECTED_TOKEN  UNKNOWN_EXPR_TYPE  UNKNOWN_OVERRIDE  UNRESOLVED_TYPE  WRONG_ARGUMENT_COUNT  diagnosticType  InferJSDocInfo  inferJSDocInfo  	projects/Closure66/src/com/google/javascript/jscomp/TypeCheck.java	0.21320071635561041	938	938	2	replace	Node  assign  =  var.getNext();	  Node    assign    =    lvalue.getNext();    	non-compiled	[CE]  orphaned  case	8	None	replace
23	[BUG]  [BUGGY]  Node  assign  =  lvalue.getLastChild();  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      JSType  rvalueType  =  getJSType(assign.getLastChild());  Var  var  =  t.getScope().getVar(lvalue.getString());  if  (var  !=  null)  {  if  (var.isTypeInferred())  {  return;  }  }  }        [BUGGY]  Node  assign  =  lvalue.getLastChild();  [BUGGY]      Node  rightChild  =  assign.getLastChild();  JSType  rightType  =  getJSType(rightChild);  if  (validator.expectCanAssignTo(  t,  assign,  rightType,  leftType,       "assignment     "))  {  ensureTyped(t,  assign,  rightType);  }  else  {  ensureTyped(t,  assign);  }  }  [CLASS]  TypeCheck  [METHOD]  visitAssign  [RETURN_TYPE]  void  NodeTraversal  t  Node  assign  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  jsType  leftType  objectJsType  rightType  rvalueType  NodeTraversal  t  DiagnosticGroup  ALL_DIAGNOSTICS  CheckLevel  reportMissingOverride  reportUnknownTypes  Var  var  Node  assign  lvalue  object  object2  rightChild  rvalue  FunctionType  functionType  ScopeCreator  scopeCreator  String  OVERRIDING_PROTOTYPE_WITH_NON_OBJECT  functionPrivateName  message  property  property2  JSDocInfo  info  int  noTypeCheckSection  nullCount  typedCount  unknownCount  TypeValidator  validator  ObjectType  type  AbstractCompiler  compiler  JSTypeRegistry  typeRegistry  boolean  enterSection  externs  inExterns  report  reportMissingProperties  typeable  Scope  outerScope  topScope  DiagnosticType  BAD_DELETE  BAD_IMPLEMENTED_TYPE  BIT_OPERATION  CONFLICTING_EXTENDED_TYPE  CONFLICTING_IMPLEMENTED_TYPE  CONSTRUCTOR_NOT_CALLABLE  DETERMINISTIC_TEST  DETERMINISTIC_TEST_NO_RESULT  ENUM_DUP  ENUM_NOT_CONSTANT  EXPECTED_THIS_TYPE  FUNCTION_MASKS_VARIABLE  HIDDEN_INTERFACE_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY_MISMATCH  ILLEGAL_IMPLICIT_CAST  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE  INEXISTENT_ENUM_ELEMENT  INEXISTENT_PROPERTY  INTERFACE_FUNCTION_NOT_EMPTY  INTERFACE_METHOD_OVERRIDE  INVALID_INTERFACE_MEMBER_DECLARATION  MULTIPLE_VAR_DEF  NOT_A_CONSTRUCTOR  NOT_CALLABLE  UNEXPECTED_TOKEN  UNKNOWN_EXPR_TYPE  UNKNOWN_OVERRIDE  UNRESOLVED_TYPE  WRONG_ARGUMENT_COUNT  diagnosticType  InferJSDocInfo  inferJSDocInfo  	projects/Closure66/src/com/google/javascript/jscomp/TypeCheck.java	0.21320071635561041	938	938	2	replace	Node  assign  =  lvalue.getLastChild();	  Node    assign    =    lvalue.getNext();    	non-compiled	[CE]  orphaned  case	8	None	replace
24	[BUG]  [BUGGY]  Node  assign  =  lvalue.getParent();  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      JSType  rvalueType  =  getJSType(assign.getLastChild());  Var  var  =  t.getScope().getVar(lvalue.getString());  if  (var  !=  null)  {  if  (var.isTypeInferred())  {  return;  }  }  }        [BUGGY]  Node  assign  =  lvalue.getParent();  [BUGGY]      Node  rightChild  =  assign.getLastChild();  JSType  rightType  =  getJSType(rightChild);  if  (validator.expectCanAssignTo(  t,  assign,  rightType,  leftType,       "assignment     "))  {  ensureTyped(t,  assign,  rightType);  }  else  {  ensureTyped(t,  assign);  }  }  [CLASS]  TypeCheck  [METHOD]  visitAssign  [RETURN_TYPE]  void  NodeTraversal  t  Node  assign  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  jsType  leftType  objectJsType  rightType  rvalueType  NodeTraversal  t  DiagnosticGroup  ALL_DIAGNOSTICS  CheckLevel  reportMissingOverride  reportUnknownTypes  Var  var  Node  assign  lvalue  object  object2  rightChild  rvalue  FunctionType  functionType  ScopeCreator  scopeCreator  String  OVERRIDING_PROTOTYPE_WITH_NON_OBJECT  functionPrivateName  message  property  property2  JSDocInfo  info  int  noTypeCheckSection  nullCount  typedCount  unknownCount  TypeValidator  validator  ObjectType  type  AbstractCompiler  compiler  JSTypeRegistry  typeRegistry  boolean  enterSection  externs  inExterns  report  reportMissingProperties  typeable  Scope  outerScope  topScope  DiagnosticType  BAD_DELETE  BAD_IMPLEMENTED_TYPE  BIT_OPERATION  CONFLICTING_EXTENDED_TYPE  CONFLICTING_IMPLEMENTED_TYPE  CONSTRUCTOR_NOT_CALLABLE  DETERMINISTIC_TEST  DETERMINISTIC_TEST_NO_RESULT  ENUM_DUP  ENUM_NOT_CONSTANT  EXPECTED_THIS_TYPE  FUNCTION_MASKS_VARIABLE  HIDDEN_INTERFACE_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY_MISMATCH  ILLEGAL_IMPLICIT_CAST  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE  INEXISTENT_ENUM_ELEMENT  INEXISTENT_PROPERTY  INTERFACE_FUNCTION_NOT_EMPTY  INTERFACE_METHOD_OVERRIDE  INVALID_INTERFACE_MEMBER_DECLARATION  MULTIPLE_VAR_DEF  NOT_A_CONSTRUCTOR  NOT_CALLABLE  UNEXPECTED_TOKEN  UNKNOWN_EXPR_TYPE  UNKNOWN_OVERRIDE  UNRESOLVED_TYPE  WRONG_ARGUMENT_COUNT  diagnosticType  InferJSDocInfo  inferJSDocInfo  	projects/Closure66/src/com/google/javascript/jscomp/TypeCheck.java	0.21320071635561041	938	938	2	replace	Node  assign  =  lvalue.getParent();	  Node    assign    =    lvalue.getNext();    	non-compiled	[CE]  orphaned  case	8	None	replace
25	[BUG]  [BUGGY]  Node  assign  =  rvalue.getNext();  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      JSType  rvalueType  =  getJSType(assign.getLastChild());  Var  var  =  t.getScope().getVar(lvalue.getString());  if  (var  !=  null)  {  if  (var.isTypeInferred())  {  return;  }  }  }        [BUGGY]  Node  assign  =  rvalue.getNext();  [BUGGY]      Node  rightChild  =  assign.getLastChild();  JSType  rightType  =  getJSType(rightChild);  if  (validator.expectCanAssignTo(  t,  assign,  rightType,  leftType,       "assignment     "))  {  ensureTyped(t,  assign,  rightType);  }  else  {  ensureTyped(t,  assign);  }  }  [CLASS]  TypeCheck  [METHOD]  visitAssign  [RETURN_TYPE]  void  NodeTraversal  t  Node  assign  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  jsType  leftType  objectJsType  rightType  rvalueType  NodeTraversal  t  DiagnosticGroup  ALL_DIAGNOSTICS  CheckLevel  reportMissingOverride  reportUnknownTypes  Var  var  Node  assign  lvalue  object  object2  rightChild  rvalue  FunctionType  functionType  ScopeCreator  scopeCreator  String  OVERRIDING_PROTOTYPE_WITH_NON_OBJECT  functionPrivateName  message  property  property2  JSDocInfo  info  int  noTypeCheckSection  nullCount  typedCount  unknownCount  TypeValidator  validator  ObjectType  type  AbstractCompiler  compiler  JSTypeRegistry  typeRegistry  boolean  enterSection  externs  inExterns  report  reportMissingProperties  typeable  Scope  outerScope  topScope  DiagnosticType  BAD_DELETE  BAD_IMPLEMENTED_TYPE  BIT_OPERATION  CONFLICTING_EXTENDED_TYPE  CONFLICTING_IMPLEMENTED_TYPE  CONSTRUCTOR_NOT_CALLABLE  DETERMINISTIC_TEST  DETERMINISTIC_TEST_NO_RESULT  ENUM_DUP  ENUM_NOT_CONSTANT  EXPECTED_THIS_TYPE  FUNCTION_MASKS_VARIABLE  HIDDEN_INTERFACE_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY_MISMATCH  ILLEGAL_IMPLICIT_CAST  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE  INEXISTENT_ENUM_ELEMENT  INEXISTENT_PROPERTY  INTERFACE_FUNCTION_NOT_EMPTY  INTERFACE_METHOD_OVERRIDE  INVALID_INTERFACE_MEMBER_DECLARATION  MULTIPLE_VAR_DEF  NOT_A_CONSTRUCTOR  NOT_CALLABLE  UNEXPECTED_TOKEN  UNKNOWN_EXPR_TYPE  UNKNOWN_OVERRIDE  UNRESOLVED_TYPE  WRONG_ARGUMENT_COUNT  diagnosticType  InferJSDocInfo  inferJSDocInfo  	projects/Closure66/src/com/google/javascript/jscomp/TypeCheck.java	0.21320071635561041	938	938	2	replace	Node  assign  =  rvalue.getNext();	  Node    assign    =    lvalue.getNext();    	non-compiled	[CE]  orphaned  case	8	None	replace
26	[BUG]  [BUGGY]  Node  assign  =  lvalue.getAssignmentOp();  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      JSType  rvalueType  =  getJSType(assign.getLastChild());  Var  var  =  t.getScope().getVar(lvalue.getString());  if  (var  !=  null)  {  if  (var.isTypeInferred())  {  return;  }  }  }        [BUGGY]  Node  assign  =  lvalue.getAssignmentOp();  [BUGGY]      Node  rightChild  =  assign.getLastChild();  JSType  rightType  =  getJSType(rightChild);  if  (validator.expectCanAssignTo(  t,  assign,  rightType,  leftType,       "assignment     "))  {  ensureTyped(t,  assign,  rightType);  }  else  {  ensureTyped(t,  assign);  }  }  [CLASS]  TypeCheck  [METHOD]  visitAssign  [RETURN_TYPE]  void  NodeTraversal  t  Node  assign  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  jsType  leftType  objectJsType  rightType  rvalueType  NodeTraversal  t  DiagnosticGroup  ALL_DIAGNOSTICS  CheckLevel  reportMissingOverride  reportUnknownTypes  Var  var  Node  assign  lvalue  object  object2  rightChild  rvalue  FunctionType  functionType  ScopeCreator  scopeCreator  String  OVERRIDING_PROTOTYPE_WITH_NON_OBJECT  functionPrivateName  message  property  property2  JSDocInfo  info  int  noTypeCheckSection  nullCount  typedCount  unknownCount  TypeValidator  validator  ObjectType  type  AbstractCompiler  compiler  JSTypeRegistry  typeRegistry  boolean  enterSection  externs  inExterns  report  reportMissingProperties  typeable  Scope  outerScope  topScope  DiagnosticType  BAD_DELETE  BAD_IMPLEMENTED_TYPE  BIT_OPERATION  CONFLICTING_EXTENDED_TYPE  CONFLICTING_IMPLEMENTED_TYPE  CONSTRUCTOR_NOT_CALLABLE  DETERMINISTIC_TEST  DETERMINISTIC_TEST_NO_RESULT  ENUM_DUP  ENUM_NOT_CONSTANT  EXPECTED_THIS_TYPE  FUNCTION_MASKS_VARIABLE  HIDDEN_INTERFACE_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY_MISMATCH  ILLEGAL_IMPLICIT_CAST  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE  INEXISTENT_ENUM_ELEMENT  INEXISTENT_PROPERTY  INTERFACE_FUNCTION_NOT_EMPTY  INTERFACE_METHOD_OVERRIDE  INVALID_INTERFACE_MEMBER_DECLARATION  MULTIPLE_VAR_DEF  NOT_A_CONSTRUCTOR  NOT_CALLABLE  UNEXPECTED_TOKEN  UNKNOWN_EXPR_TYPE  UNKNOWN_OVERRIDE  UNRESOLVED_TYPE  WRONG_ARGUMENT_COUNT  diagnosticType  InferJSDocInfo  inferJSDocInfo  	projects/Closure66/src/com/google/javascript/jscomp/TypeCheck.java	0.21320071635561041	938	938	2	replace	Node  assign  =  lvalue.getAssignmentOp();	  Node    assign    =    lvalue.getNext();    	non-compiled	[CE]  orphaned  case	8	None	replace
27	[BUG]  [BUGGY]  Node  leftType  =  assign.getLastChild();  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      JSType  rvalueType  =  getJSType(assign.getLastChild());  Var  var  =  t.getScope().getVar(lvalue.getString());  if  (var  !=  null)  {  if  (var.isTypeInferred())  {  return;  }  }  }        [BUGGY]  Node  leftType  =  assign.getLastChild();  [BUGGY]      Node  rightChild  =  assign.getLastChild();  JSType  rightType  =  getJSType(rightChild);  if  (validator.expectCanAssignTo(  t,  assign,  rightType,  leftType,       "assignment     "))  {  ensureTyped(t,  assign,  rightType);  }  else  {  ensureTyped(t,  assign);  }  }  [CLASS]  TypeCheck  [METHOD]  visitAssign  [RETURN_TYPE]  void  NodeTraversal  t  Node  assign  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  jsType  leftType  objectJsType  rightType  rvalueType  NodeTraversal  t  DiagnosticGroup  ALL_DIAGNOSTICS  CheckLevel  reportMissingOverride  reportUnknownTypes  Var  var  Node  assign  lvalue  object  object2  rightChild  rvalue  FunctionType  functionType  ScopeCreator  scopeCreator  String  OVERRIDING_PROTOTYPE_WITH_NON_OBJECT  functionPrivateName  message  property  property2  JSDocInfo  info  int  noTypeCheckSection  nullCount  typedCount  unknownCount  TypeValidator  validator  ObjectType  type  AbstractCompiler  compiler  JSTypeRegistry  typeRegistry  boolean  enterSection  externs  inExterns  report  reportMissingProperties  typeable  Scope  outerScope  topScope  DiagnosticType  BAD_DELETE  BAD_IMPLEMENTED_TYPE  BIT_OPERATION  CONFLICTING_EXTENDED_TYPE  CONFLICTING_IMPLEMENTED_TYPE  CONSTRUCTOR_NOT_CALLABLE  DETERMINISTIC_TEST  DETERMINISTIC_TEST_NO_RESULT  ENUM_DUP  ENUM_NOT_CONSTANT  EXPECTED_THIS_TYPE  FUNCTION_MASKS_VARIABLE  HIDDEN_INTERFACE_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY_MISMATCH  ILLEGAL_IMPLICIT_CAST  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE  INEXISTENT_ENUM_ELEMENT  INEXISTENT_PROPERTY  INTERFACE_FUNCTION_NOT_EMPTY  INTERFACE_METHOD_OVERRIDE  INVALID_INTERFACE_MEMBER_DECLARATION  MULTIPLE_VAR_DEF  NOT_A_CONSTRUCTOR  NOT_CALLABLE  UNEXPECTED_TOKEN  UNKNOWN_EXPR_TYPE  UNKNOWN_OVERRIDE  UNRESOLVED_TYPE  WRONG_ARGUMENT_COUNT  diagnosticType  InferJSDocInfo  inferJSDocInfo  	projects/Closure66/src/com/google/javascript/jscomp/TypeCheck.java	0.21320071635561041	938	938	2	replace	Node  leftType  =  assign.getLastChild();	  Node    leftType    =    assign.getFirstChild();    	non-compiled	[CE]  orphaned  case	15	None	replace
28	[BUG]  [BUGGY]  Node  leftType  =  var.getFirstChild();  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      JSType  rvalueType  =  getJSType(assign.getLastChild());  Var  var  =  t.getScope().getVar(lvalue.getString());  if  (var  !=  null)  {  if  (var.isTypeInferred())  {  return;  }  }  }        [BUGGY]  Node  leftType  =  var.getFirstChild();  [BUGGY]      Node  rightChild  =  assign.getLastChild();  JSType  rightType  =  getJSType(rightChild);  if  (validator.expectCanAssignTo(  t,  assign,  rightType,  leftType,       "assignment     "))  {  ensureTyped(t,  assign,  rightType);  }  else  {  ensureTyped(t,  assign);  }  }  [CLASS]  TypeCheck  [METHOD]  visitAssign  [RETURN_TYPE]  void  NodeTraversal  t  Node  assign  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  jsType  leftType  objectJsType  rightType  rvalueType  NodeTraversal  t  DiagnosticGroup  ALL_DIAGNOSTICS  CheckLevel  reportMissingOverride  reportUnknownTypes  Var  var  Node  assign  lvalue  object  object2  rightChild  rvalue  FunctionType  functionType  ScopeCreator  scopeCreator  String  OVERRIDING_PROTOTYPE_WITH_NON_OBJECT  functionPrivateName  message  property  property2  JSDocInfo  info  int  noTypeCheckSection  nullCount  typedCount  unknownCount  TypeValidator  validator  ObjectType  type  AbstractCompiler  compiler  JSTypeRegistry  typeRegistry  boolean  enterSection  externs  inExterns  report  reportMissingProperties  typeable  Scope  outerScope  topScope  DiagnosticType  BAD_DELETE  BAD_IMPLEMENTED_TYPE  BIT_OPERATION  CONFLICTING_EXTENDED_TYPE  CONFLICTING_IMPLEMENTED_TYPE  CONSTRUCTOR_NOT_CALLABLE  DETERMINISTIC_TEST  DETERMINISTIC_TEST_NO_RESULT  ENUM_DUP  ENUM_NOT_CONSTANT  EXPECTED_THIS_TYPE  FUNCTION_MASKS_VARIABLE  HIDDEN_INTERFACE_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY_MISMATCH  ILLEGAL_IMPLICIT_CAST  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE  INEXISTENT_ENUM_ELEMENT  INEXISTENT_PROPERTY  INTERFACE_FUNCTION_NOT_EMPTY  INTERFACE_METHOD_OVERRIDE  INVALID_INTERFACE_MEMBER_DECLARATION  MULTIPLE_VAR_DEF  NOT_A_CONSTRUCTOR  NOT_CALLABLE  UNEXPECTED_TOKEN  UNKNOWN_EXPR_TYPE  UNKNOWN_OVERRIDE  UNRESOLVED_TYPE  WRONG_ARGUMENT_COUNT  diagnosticType  InferJSDocInfo  inferJSDocInfo  	projects/Closure66/src/com/google/javascript/jscomp/TypeCheck.java	0.21320071635561041	938	938	2	replace	Node  leftType  =  var.getFirstChild();	  Node    leftType    =    assign.getFirstChild();    	non-compiled	[CE]  orphaned  case	15	None	replace
29	[BUG]  [BUGGY]  Node  leftType  =  lvalue.getFirstChild();  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      JSType  rvalueType  =  getJSType(assign.getLastChild());  Var  var  =  t.getScope().getVar(lvalue.getString());  if  (var  !=  null)  {  if  (var.isTypeInferred())  {  return;  }  }  }        [BUGGY]  Node  leftType  =  lvalue.getFirstChild();  [BUGGY]      Node  rightChild  =  assign.getLastChild();  JSType  rightType  =  getJSType(rightChild);  if  (validator.expectCanAssignTo(  t,  assign,  rightType,  leftType,       "assignment     "))  {  ensureTyped(t,  assign,  rightType);  }  else  {  ensureTyped(t,  assign);  }  }  [CLASS]  TypeCheck  [METHOD]  visitAssign  [RETURN_TYPE]  void  NodeTraversal  t  Node  assign  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  jsType  leftType  objectJsType  rightType  rvalueType  NodeTraversal  t  DiagnosticGroup  ALL_DIAGNOSTICS  CheckLevel  reportMissingOverride  reportUnknownTypes  Var  var  Node  assign  lvalue  object  object2  rightChild  rvalue  FunctionType  functionType  ScopeCreator  scopeCreator  String  OVERRIDING_PROTOTYPE_WITH_NON_OBJECT  functionPrivateName  message  property  property2  JSDocInfo  info  int  noTypeCheckSection  nullCount  typedCount  unknownCount  TypeValidator  validator  ObjectType  type  AbstractCompiler  compiler  JSTypeRegistry  typeRegistry  boolean  enterSection  externs  inExterns  report  reportMissingProperties  typeable  Scope  outerScope  topScope  DiagnosticType  BAD_DELETE  BAD_IMPLEMENTED_TYPE  BIT_OPERATION  CONFLICTING_EXTENDED_TYPE  CONFLICTING_IMPLEMENTED_TYPE  CONSTRUCTOR_NOT_CALLABLE  DETERMINISTIC_TEST  DETERMINISTIC_TEST_NO_RESULT  ENUM_DUP  ENUM_NOT_CONSTANT  EXPECTED_THIS_TYPE  FUNCTION_MASKS_VARIABLE  HIDDEN_INTERFACE_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY_MISMATCH  ILLEGAL_IMPLICIT_CAST  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE  INEXISTENT_ENUM_ELEMENT  INEXISTENT_PROPERTY  INTERFACE_FUNCTION_NOT_EMPTY  INTERFACE_METHOD_OVERRIDE  INVALID_INTERFACE_MEMBER_DECLARATION  MULTIPLE_VAR_DEF  NOT_A_CONSTRUCTOR  NOT_CALLABLE  UNEXPECTED_TOKEN  UNKNOWN_EXPR_TYPE  UNKNOWN_OVERRIDE  UNRESOLVED_TYPE  WRONG_ARGUMENT_COUNT  diagnosticType  InferJSDocInfo  inferJSDocInfo  	projects/Closure66/src/com/google/javascript/jscomp/TypeCheck.java	0.21320071635561041	938	938	2	replace	Node  leftType  =  lvalue.getFirstChild();	  Node    leftType    =    assign.getFirstChild();    	non-compiled	[CE]  orphaned  case	15	None	replace
30	[BUG]  [BUGGY]  Node  leftType  =  var.getLastChild();  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]      JSType  rvalueType  =  getJSType(assign.getLastChild());  Var  var  =  t.getScope().getVar(lvalue.getString());  if  (var  !=  null)  {  if  (var.isTypeInferred())  {  return;  }  }  }        [BUGGY]  Node  leftType  =  var.getLastChild();  [BUGGY]      Node  rightChild  =  assign.getLastChild();  JSType  rightType  =  getJSType(rightChild);  if  (validator.expectCanAssignTo(  t,  assign,  rightType,  leftType,       "assignment     "))  {  ensureTyped(t,  assign,  rightType);  }  else  {  ensureTyped(t,  assign);  }  }  [CLASS]  TypeCheck  [METHOD]  visitAssign  [RETURN_TYPE]  void  NodeTraversal  t  Node  assign  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  jsType  leftType  objectJsType  rightType  rvalueType  NodeTraversal  t  DiagnosticGroup  ALL_DIAGNOSTICS  CheckLevel  reportMissingOverride  reportUnknownTypes  Var  var  Node  assign  lvalue  object  object2  rightChild  rvalue  FunctionType  functionType  ScopeCreator  scopeCreator  String  OVERRIDING_PROTOTYPE_WITH_NON_OBJECT  functionPrivateName  message  property  property2  JSDocInfo  info  int  noTypeCheckSection  nullCount  typedCount  unknownCount  TypeValidator  validator  ObjectType  type  AbstractCompiler  compiler  JSTypeRegistry  typeRegistry  boolean  enterSection  externs  inExterns  report  reportMissingProperties  typeable  Scope  outerScope  topScope  DiagnosticType  BAD_DELETE  BAD_IMPLEMENTED_TYPE  BIT_OPERATION  CONFLICTING_EXTENDED_TYPE  CONFLICTING_IMPLEMENTED_TYPE  CONSTRUCTOR_NOT_CALLABLE  DETERMINISTIC_TEST  DETERMINISTIC_TEST_NO_RESULT  ENUM_DUP  ENUM_NOT_CONSTANT  EXPECTED_THIS_TYPE  FUNCTION_MASKS_VARIABLE  HIDDEN_INTERFACE_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY_MISMATCH  ILLEGAL_IMPLICIT_CAST  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE  INEXISTENT_ENUM_ELEMENT  INEXISTENT_PROPERTY  INTERFACE_FUNCTION_NOT_EMPTY  INTERFACE_METHOD_OVERRIDE  INVALID_INTERFACE_MEMBER_DECLARATION  MULTIPLE_VAR_DEF  NOT_A_CONSTRUCTOR  NOT_CALLABLE  UNEXPECTED_TOKEN  UNKNOWN_EXPR_TYPE  UNKNOWN_OVERRIDE  UNRESOLVED_TYPE  WRONG_ARGUMENT_COUNT  diagnosticType  InferJSDocInfo  inferJSDocInfo  	projects/Closure66/src/com/google/javascript/jscomp/TypeCheck.java	0.21320071635561041	938	938	2	replace	Node  leftType  =  var.getLastChild();	  Node    leftType    =    assign.getFirstChild();    	non-compiled	[CE]  orphaned  case	15	None	replace
31	[BUG]  [BUGGY]  Node  leftType  =  assignment.getLastChild();  [CE]  orphaned  case  [FE]                                AssertionFailedError      [CONTEXT]      JSType  rvalueType  =  getJSType(assign.getLastChild());  Var  var  =  t.getScope().getVar(lvalue.getString());  if  (var  !=  null)  {  if  (var.isTypeInferred())  {  return;  }  }  }        [BUGGY]  Node  leftType  =  assignment.getLastChild();  [BUGGY]      Node  rightChild  =  assign.getLastChild();  JSType  rightType  =  getJSType(rightChild);  if  (validator.expectCanAssignTo(  t,  assign,  rightType,  leftType,       "assignment     "))  {  ensureTyped(t,  assign,  rightType);  }  else  {  ensureTyped(t,  assign);  }  }  [CLASS]  TypeCheck  [METHOD]  visitAssign  [RETURN_TYPE]  void  NodeTraversal  t  Node  assign  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  jsType  leftType  objectJsType  rightType  rvalueType  NodeTraversal  t  DiagnosticGroup  ALL_DIAGNOSTICS  CheckLevel  reportMissingOverride  reportUnknownTypes  Var  var  Node  assign  lvalue  object  object2  rightChild  rvalue  FunctionType  functionType  ScopeCreator  scopeCreator  String  OVERRIDING_PROTOTYPE_WITH_NON_OBJECT  functionPrivateName  message  property  property2  JSDocInfo  info  int  noTypeCheckSection  nullCount  typedCount  unknownCount  TypeValidator  validator  ObjectType  type  AbstractCompiler  compiler  JSTypeRegistry  typeRegistry  boolean  enterSection  externs  inExterns  report  reportMissingProperties  typeable  Scope  outerScope  topScope  DiagnosticType  BAD_DELETE  BAD_IMPLEMENTED_TYPE  BIT_OPERATION  CONFLICTING_EXTENDED_TYPE  CONFLICTING_IMPLEMENTED_TYPE  CONSTRUCTOR_NOT_CALLABLE  DETERMINISTIC_TEST  DETERMINISTIC_TEST_NO_RESULT  ENUM_DUP  ENUM_NOT_CONSTANT  EXPECTED_THIS_TYPE  FUNCTION_MASKS_VARIABLE  HIDDEN_INTERFACE_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY_MISMATCH  ILLEGAL_IMPLICIT_CAST  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE  INEXISTENT_ENUM_ELEMENT  INEXISTENT_PROPERTY  INTERFACE_FUNCTION_NOT_EMPTY  INTERFACE_METHOD_OVERRIDE  INVALID_INTERFACE_MEMBER_DECLARATION  MULTIPLE_VAR_DEF  NOT_A_CONSTRUCTOR  NOT_CALLABLE  UNEXPECTED_TOKEN  UNKNOWN_EXPR_TYPE  UNKNOWN_OVERRIDE  UNRESOLVED_TYPE  WRONG_ARGUMENT_COUNT  diagnosticType  InferJSDocInfo  inferJSDocInfo  	projects/Closure66/src/com/google/javascript/jscomp/TypeCheck.java	0.21320071635561041	938	938	2	replace	Node  leftType  =  assignment.getLastChild();	  Node    leftType    =    assign.getFirstChild();    	non-compiled	[CE]  orphaned  case	15	None	replace
32	[BUG]  [BUGGY]  Preconditions.checkState(assign.getType()!=  Token.ASSIGN);  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      JSType  rvalueType  =  getJSType(assign.getLastChild());  Var  var  =  t.getScope().getVar(lvalue.getString());  if  (var  !=  null)  {  if  (var.isTypeInferred())  {  return;  }  }  }        [BUGGY]  Preconditions.checkState(assign.getType()!=  Token.ASSIGN);  [BUGGY]      Node  rightChild  =  assign.getLastChild();  JSType  rightType  =  getJSType(rightChild);  if  (validator.expectCanAssignTo(  t,  assign,  rightType,  leftType,       "assignment     "))  {  ensureTyped(t,  assign,  rightType);  }  else  {  ensureTyped(t,  assign);  }  }  [CLASS]  TypeCheck  [METHOD]  visitAssign  [RETURN_TYPE]  void  NodeTraversal  t  Node  assign  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  jsType  leftType  objectJsType  rightType  rvalueType  NodeTraversal  t  DiagnosticGroup  ALL_DIAGNOSTICS  CheckLevel  reportMissingOverride  reportUnknownTypes  Var  var  Node  assign  lvalue  object  object2  rightChild  rvalue  FunctionType  functionType  ScopeCreator  scopeCreator  String  OVERRIDING_PROTOTYPE_WITH_NON_OBJECT  functionPrivateName  message  property  property2  JSDocInfo  info  int  noTypeCheckSection  nullCount  typedCount  unknownCount  TypeValidator  validator  ObjectType  type  AbstractCompiler  compiler  JSTypeRegistry  typeRegistry  boolean  enterSection  externs  inExterns  report  reportMissingProperties  typeable  Scope  outerScope  topScope  DiagnosticType  BAD_DELETE  BAD_IMPLEMENTED_TYPE  BIT_OPERATION  CONFLICTING_EXTENDED_TYPE  CONFLICTING_IMPLEMENTED_TYPE  CONSTRUCTOR_NOT_CALLABLE  DETERMINISTIC_TEST  DETERMINISTIC_TEST_NO_RESULT  ENUM_DUP  ENUM_NOT_CONSTANT  EXPECTED_THIS_TYPE  FUNCTION_MASKS_VARIABLE  HIDDEN_INTERFACE_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY_MISMATCH  ILLEGAL_IMPLICIT_CAST  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE  INEXISTENT_ENUM_ELEMENT  INEXISTENT_PROPERTY  INTERFACE_FUNCTION_NOT_EMPTY  INTERFACE_METHOD_OVERRIDE  INVALID_INTERFACE_MEMBER_DECLARATION  MULTIPLE_VAR_DEF  NOT_A_CONSTRUCTOR  NOT_CALLABLE  UNEXPECTED_TOKEN  UNKNOWN_EXPR_TYPE  UNKNOWN_OVERRIDE  UNRESOLVED_TYPE  WRONG_ARGUMENT_COUNT  diagnosticType  InferJSDocInfo  inferJSDocInfo  	projects/Closure66/src/com/google/javascript/jscomp/TypeCheck.java	0.21320071635561041	938	938	2	replace	Preconditions.checkState(assign.getType()!=  Token.ASSIGN);	  Preconditions.checkState(assign.getType()    ==    Token.ASSIGN);    	non-compiled	[CE]  orphaned  case	11	None	replace
33	[BUG]  [BUGGY]  Preconditions.checkState(assign.getType()  ==  Token.ASSIGN  ||  assign.getType()  ==  Token.NAME);  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      JSType  rvalueType  =  getJSType(assign.getLastChild());  Var  var  =  t.getScope().getVar(lvalue.getString());  if  (var  !=  null)  {  if  (var.isTypeInferred())  {  return;  }  }  }        [BUGGY]  Preconditions.checkState(assign.getType()  ==  Token.ASSIGN  ||  assign.getType()  ==  Token.NAME);  [BUGGY]      Node  rightChild  =  assign.getLastChild();  JSType  rightType  =  getJSType(rightChild);  if  (validator.expectCanAssignTo(  t,  assign,  rightType,  leftType,       "assignment     "))  {  ensureTyped(t,  assign,  rightType);  }  else  {  ensureTyped(t,  assign);  }  }  [CLASS]  TypeCheck  [METHOD]  visitAssign  [RETURN_TYPE]  void  NodeTraversal  t  Node  assign  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  jsType  leftType  objectJsType  rightType  rvalueType  NodeTraversal  t  DiagnosticGroup  ALL_DIAGNOSTICS  CheckLevel  reportMissingOverride  reportUnknownTypes  Var  var  Node  assign  lvalue  object  object2  rightChild  rvalue  FunctionType  functionType  ScopeCreator  scopeCreator  String  OVERRIDING_PROTOTYPE_WITH_NON_OBJECT  functionPrivateName  message  property  property2  JSDocInfo  info  int  noTypeCheckSection  nullCount  typedCount  unknownCount  TypeValidator  validator  ObjectType  type  AbstractCompiler  compiler  JSTypeRegistry  typeRegistry  boolean  enterSection  externs  inExterns  report  reportMissingProperties  typeable  Scope  outerScope  topScope  DiagnosticType  BAD_DELETE  BAD_IMPLEMENTED_TYPE  BIT_OPERATION  CONFLICTING_EXTENDED_TYPE  CONFLICTING_IMPLEMENTED_TYPE  CONSTRUCTOR_NOT_CALLABLE  DETERMINISTIC_TEST  DETERMINISTIC_TEST_NO_RESULT  ENUM_DUP  ENUM_NOT_CONSTANT  EXPECTED_THIS_TYPE  FUNCTION_MASKS_VARIABLE  HIDDEN_INTERFACE_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY_MISMATCH  ILLEGAL_IMPLICIT_CAST  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE  INEXISTENT_ENUM_ELEMENT  INEXISTENT_PROPERTY  INTERFACE_FUNCTION_NOT_EMPTY  INTERFACE_METHOD_OVERRIDE  INVALID_INTERFACE_MEMBER_DECLARATION  MULTIPLE_VAR_DEF  NOT_A_CONSTRUCTOR  NOT_CALLABLE  UNEXPECTED_TOKEN  UNKNOWN_EXPR_TYPE  UNKNOWN_OVERRIDE  UNRESOLVED_TYPE  WRONG_ARGUMENT_COUNT  diagnosticType  InferJSDocInfo  inferJSDocInfo  	projects/Closure66/src/com/google/javascript/jscomp/TypeCheck.java	0.21320071635561041	938	938	2	replace	Preconditions.checkState(assign.getType()  ==  Token.ASSIGN  ||  assign.getType()  ==  Token.NAME);	  Preconditions.checkState(assign.getType()    ==    Token.ASSIGN);    	non-compiled	[CE]  orphaned  case	11	None	replace
34	[BUG]  [BUGGY]  Preconditions.checkState(assign.getType()  ==  Token.ASSIGN  ||  assign.getType()  ==  Token.FUNCTION);  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]      JSType  rvalueType  =  getJSType(assign.getLastChild());  Var  var  =  t.getScope().getVar(lvalue.getString());  if  (var  !=  null)  {  if  (var.isTypeInferred())  {  return;  }  }  }        [BUGGY]  Preconditions.checkState(assign.getType()  ==  Token.ASSIGN  ||  assign.getType()  ==  Token.FUNCTION);  [BUGGY]      Node  rightChild  =  assign.getLastChild();  JSType  rightType  =  getJSType(rightChild);  if  (validator.expectCanAssignTo(  t,  assign,  rightType,  leftType,       "assignment     "))  {  ensureTyped(t,  assign,  rightType);  }  else  {  ensureTyped(t,  assign);  }  }  [CLASS]  TypeCheck  [METHOD]  visitAssign  [RETURN_TYPE]  void  NodeTraversal  t  Node  assign  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  jsType  leftType  objectJsType  rightType  rvalueType  NodeTraversal  t  DiagnosticGroup  ALL_DIAGNOSTICS  CheckLevel  reportMissingOverride  reportUnknownTypes  Var  var  Node  assign  lvalue  object  object2  rightChild  rvalue  FunctionType  functionType  ScopeCreator  scopeCreator  String  OVERRIDING_PROTOTYPE_WITH_NON_OBJECT  functionPrivateName  message  property  property2  JSDocInfo  info  int  noTypeCheckSection  nullCount  typedCount  unknownCount  TypeValidator  validator  ObjectType  type  AbstractCompiler  compiler  JSTypeRegistry  typeRegistry  boolean  enterSection  externs  inExterns  report  reportMissingProperties  typeable  Scope  outerScope  topScope  DiagnosticType  BAD_DELETE  BAD_IMPLEMENTED_TYPE  BIT_OPERATION  CONFLICTING_EXTENDED_TYPE  CONFLICTING_IMPLEMENTED_TYPE  CONSTRUCTOR_NOT_CALLABLE  DETERMINISTIC_TEST  DETERMINISTIC_TEST_NO_RESULT  ENUM_DUP  ENUM_NOT_CONSTANT  EXPECTED_THIS_TYPE  FUNCTION_MASKS_VARIABLE  HIDDEN_INTERFACE_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY_MISMATCH  ILLEGAL_IMPLICIT_CAST  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE  INEXISTENT_ENUM_ELEMENT  INEXISTENT_PROPERTY  INTERFACE_FUNCTION_NOT_EMPTY  INTERFACE_METHOD_OVERRIDE  INVALID_INTERFACE_MEMBER_DECLARATION  MULTIPLE_VAR_DEF  NOT_A_CONSTRUCTOR  NOT_CALLABLE  UNEXPECTED_TOKEN  UNKNOWN_EXPR_TYPE  UNKNOWN_OVERRIDE  UNRESOLVED_TYPE  WRONG_ARGUMENT_COUNT  diagnosticType  InferJSDocInfo  inferJSDocInfo  	projects/Closure66/src/com/google/javascript/jscomp/TypeCheck.java	0.21320071635561041	938	938	2	replace	Preconditions.checkState(assign.getType()  ==  Token.ASSIGN  ||  assign.getType()  ==  Token.FUNCTION);	  Preconditions.checkState(assign.getType()    ==    Token.ASSIGN);    	non-compiled	[CE]  orphaned  case	11	None	replace
35	[BUG]  [BUGGY]  Preconditions.checkState(assign.getType()  ==  Token.ASSIGN  ||  assign.getType()  ==  Token.GETPROP);  [CE]  orphaned  case  [FE]                                AssertionFailedError      [CONTEXT]      JSType  rvalueType  =  getJSType(assign.getLastChild());  Var  var  =  t.getScope().getVar(lvalue.getString());  if  (var  !=  null)  {  if  (var.isTypeInferred())  {  return;  }  }  }        [BUGGY]  Preconditions.checkState(assign.getType()  ==  Token.ASSIGN  ||  assign.getType()  ==  Token.GETPROP);  [BUGGY]      Node  rightChild  =  assign.getLastChild();  JSType  rightType  =  getJSType(rightChild);  if  (validator.expectCanAssignTo(  t,  assign,  rightType,  leftType,       "assignment     "))  {  ensureTyped(t,  assign,  rightType);  }  else  {  ensureTyped(t,  assign);  }  }  [CLASS]  TypeCheck  [METHOD]  visitAssign  [RETURN_TYPE]  void  NodeTraversal  t  Node  assign  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  jsType  leftType  objectJsType  rightType  rvalueType  NodeTraversal  t  DiagnosticGroup  ALL_DIAGNOSTICS  CheckLevel  reportMissingOverride  reportUnknownTypes  Var  var  Node  assign  lvalue  object  object2  rightChild  rvalue  FunctionType  functionType  ScopeCreator  scopeCreator  String  OVERRIDING_PROTOTYPE_WITH_NON_OBJECT  functionPrivateName  message  property  property2  JSDocInfo  info  int  noTypeCheckSection  nullCount  typedCount  unknownCount  TypeValidator  validator  ObjectType  type  AbstractCompiler  compiler  JSTypeRegistry  typeRegistry  boolean  enterSection  externs  inExterns  report  reportMissingProperties  typeable  Scope  outerScope  topScope  DiagnosticType  BAD_DELETE  BAD_IMPLEMENTED_TYPE  BIT_OPERATION  CONFLICTING_EXTENDED_TYPE  CONFLICTING_IMPLEMENTED_TYPE  CONSTRUCTOR_NOT_CALLABLE  DETERMINISTIC_TEST  DETERMINISTIC_TEST_NO_RESULT  ENUM_DUP  ENUM_NOT_CONSTANT  EXPECTED_THIS_TYPE  FUNCTION_MASKS_VARIABLE  HIDDEN_INTERFACE_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY_MISMATCH  ILLEGAL_IMPLICIT_CAST  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE  INEXISTENT_ENUM_ELEMENT  INEXISTENT_PROPERTY  INTERFACE_FUNCTION_NOT_EMPTY  INTERFACE_METHOD_OVERRIDE  INVALID_INTERFACE_MEMBER_DECLARATION  MULTIPLE_VAR_DEF  NOT_A_CONSTRUCTOR  NOT_CALLABLE  UNEXPECTED_TOKEN  UNKNOWN_EXPR_TYPE  UNKNOWN_OVERRIDE  UNRESOLVED_TYPE  WRONG_ARGUMENT_COUNT  diagnosticType  InferJSDocInfo  inferJSDocInfo  	projects/Closure66/src/com/google/javascript/jscomp/TypeCheck.java	0.21320071635561041	938	938	2	replace	Preconditions.checkState(assign.getType()  ==  Token.ASSIGN  ||  assign.getType()  ==  Token.GETPROP);	  Preconditions.checkState(assign.getType()    ==    Token.ASSIGN);    	non-compiled	[CE]  orphaned  case	11	None	replace
36	[BUG]  [BUGGY]  Preconditions.checkState(lvalue.getType()  ==  Token.ASSIGN);  [CE]  orphaned  case  [FE]                                  AssertionFailedError      [CONTEXT]      JSType  rvalueType  =  getJSType(assign.getLastChild());  Var  var  =  t.getScope().getVar(lvalue.getString());  if  (var  !=  null)  {  if  (var.isTypeInferred())  {  return;  }  }  }        [BUGGY]  Preconditions.checkState(lvalue.getType()  ==  Token.ASSIGN);  [BUGGY]      Node  rightChild  =  assign.getLastChild();  JSType  rightType  =  getJSType(rightChild);  if  (validator.expectCanAssignTo(  t,  assign,  rightType,  leftType,       "assignment     "))  {  ensureTyped(t,  assign,  rightType);  }  else  {  ensureTyped(t,  assign);  }  }  [CLASS]  TypeCheck  [METHOD]  visitAssign  [RETURN_TYPE]  void  NodeTraversal  t  Node  assign  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  jsType  leftType  objectJsType  rightType  rvalueType  NodeTraversal  t  DiagnosticGroup  ALL_DIAGNOSTICS  CheckLevel  reportMissingOverride  reportUnknownTypes  Var  var  Node  assign  lvalue  object  object2  rightChild  rvalue  FunctionType  functionType  ScopeCreator  scopeCreator  String  OVERRIDING_PROTOTYPE_WITH_NON_OBJECT  functionPrivateName  message  property  property2  JSDocInfo  info  int  noTypeCheckSection  nullCount  typedCount  unknownCount  TypeValidator  validator  ObjectType  type  AbstractCompiler  compiler  JSTypeRegistry  typeRegistry  boolean  enterSection  externs  inExterns  report  reportMissingProperties  typeable  Scope  outerScope  topScope  DiagnosticType  BAD_DELETE  BAD_IMPLEMENTED_TYPE  BIT_OPERATION  CONFLICTING_EXTENDED_TYPE  CONFLICTING_IMPLEMENTED_TYPE  CONSTRUCTOR_NOT_CALLABLE  DETERMINISTIC_TEST  DETERMINISTIC_TEST_NO_RESULT  ENUM_DUP  ENUM_NOT_CONSTANT  EXPECTED_THIS_TYPE  FUNCTION_MASKS_VARIABLE  HIDDEN_INTERFACE_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY_MISMATCH  ILLEGAL_IMPLICIT_CAST  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE  INEXISTENT_ENUM_ELEMENT  INEXISTENT_PROPERTY  INTERFACE_FUNCTION_NOT_EMPTY  INTERFACE_METHOD_OVERRIDE  INVALID_INTERFACE_MEMBER_DECLARATION  MULTIPLE_VAR_DEF  NOT_A_CONSTRUCTOR  NOT_CALLABLE  UNEXPECTED_TOKEN  UNKNOWN_EXPR_TYPE  UNKNOWN_OVERRIDE  UNRESOLVED_TYPE  WRONG_ARGUMENT_COUNT  diagnosticType  InferJSDocInfo  inferJSDocInfo  	projects/Closure66/src/com/google/javascript/jscomp/TypeCheck.java	0.21320071635561041	938	938	2	replace	Preconditions.checkState(lvalue.getType()  ==  Token.ASSIGN);	  Preconditions.checkState(assign.getType()    ==    Token.ASSIGN);    	non-compiled	[CE]  orphaned  case	11	None	replace
37	[BUG]  [BUGGY]  Preconditions.checkState(assign.getType()  ==  Token.ASSIGN  ||  assign.getType()  ==  Token.OBJECTLIT);  [CE]  orphaned  case  [FE]                                    AssertionFailedError      [CONTEXT]      JSType  rvalueType  =  getJSType(assign.getLastChild());  Var  var  =  t.getScope().getVar(lvalue.getString());  if  (var  !=  null)  {  if  (var.isTypeInferred())  {  return;  }  }  }        [BUGGY]  Preconditions.checkState(assign.getType()  ==  Token.ASSIGN  ||  assign.getType()  ==  Token.OBJECTLIT);  [BUGGY]      Node  rightChild  =  assign.getLastChild();  JSType  rightType  =  getJSType(rightChild);  if  (validator.expectCanAssignTo(  t,  assign,  rightType,  leftType,       "assignment     "))  {  ensureTyped(t,  assign,  rightType);  }  else  {  ensureTyped(t,  assign);  }  }  [CLASS]  TypeCheck  [METHOD]  visitAssign  [RETURN_TYPE]  void  NodeTraversal  t  Node  assign  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  jsType  leftType  objectJsType  rightType  rvalueType  NodeTraversal  t  DiagnosticGroup  ALL_DIAGNOSTICS  CheckLevel  reportMissingOverride  reportUnknownTypes  Var  var  Node  assign  lvalue  object  object2  rightChild  rvalue  FunctionType  functionType  ScopeCreator  scopeCreator  String  OVERRIDING_PROTOTYPE_WITH_NON_OBJECT  functionPrivateName  message  property  property2  JSDocInfo  info  int  noTypeCheckSection  nullCount  typedCount  unknownCount  TypeValidator  validator  ObjectType  type  AbstractCompiler  compiler  JSTypeRegistry  typeRegistry  boolean  enterSection  externs  inExterns  report  reportMissingProperties  typeable  Scope  outerScope  topScope  DiagnosticType  BAD_DELETE  BAD_IMPLEMENTED_TYPE  BIT_OPERATION  CONFLICTING_EXTENDED_TYPE  CONFLICTING_IMPLEMENTED_TYPE  CONSTRUCTOR_NOT_CALLABLE  DETERMINISTIC_TEST  DETERMINISTIC_TEST_NO_RESULT  ENUM_DUP  ENUM_NOT_CONSTANT  EXPECTED_THIS_TYPE  FUNCTION_MASKS_VARIABLE  HIDDEN_INTERFACE_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY_MISMATCH  ILLEGAL_IMPLICIT_CAST  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE  INEXISTENT_ENUM_ELEMENT  INEXISTENT_PROPERTY  INTERFACE_FUNCTION_NOT_EMPTY  INTERFACE_METHOD_OVERRIDE  INVALID_INTERFACE_MEMBER_DECLARATION  MULTIPLE_VAR_DEF  NOT_A_CONSTRUCTOR  NOT_CALLABLE  UNEXPECTED_TOKEN  UNKNOWN_EXPR_TYPE  UNKNOWN_OVERRIDE  UNRESOLVED_TYPE  WRONG_ARGUMENT_COUNT  diagnosticType  InferJSDocInfo  inferJSDocInfo  	projects/Closure66/src/com/google/javascript/jscomp/TypeCheck.java	0.21320071635561041	938	938	2	replace	Preconditions.checkState(assign.getType()  ==  Token.ASSIGN  ||  assign.getType()  ==  Token.OBJECTLIT);	  Preconditions.checkState(assign.getType()    ==    Token.ASSIGN);    	non-compiled	[CE]  orphaned  case	11	None	replace
38	[BUG]  [BUGGY]  JSType  leftType  =  getJSType(assign.getLastChild(),  assign);  [CE]  orphaned  case  [FE]            AssertionFailedError      [CONTEXT]      JSType  rvalueType  =  getJSType(assign.getLastChild());  Var  var  =  t.getScope().getVar(lvalue.getString());  if  (var  !=  null)  {  if  (var.isTypeInferred())  {  return;  }  }  }        [BUGGY]  JSType  leftType  =  getJSType(assign.getLastChild(),  assign);  [BUGGY]      Node  rightChild  =  assign.getLastChild();  JSType  rightType  =  getJSType(rightChild);  if  (validator.expectCanAssignTo(  t,  assign,  rightType,  leftType,       "assignment     "))  {  ensureTyped(t,  assign,  rightType);  }  else  {  ensureTyped(t,  assign);  }  }  [CLASS]  TypeCheck  [METHOD]  visitAssign  [RETURN_TYPE]  void  NodeTraversal  t  Node  assign  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  jsType  leftType  objectJsType  rightType  rvalueType  NodeTraversal  t  DiagnosticGroup  ALL_DIAGNOSTICS  CheckLevel  reportMissingOverride  reportUnknownTypes  Var  var  Node  assign  lvalue  object  object2  rightChild  rvalue  FunctionType  functionType  ScopeCreator  scopeCreator  String  OVERRIDING_PROTOTYPE_WITH_NON_OBJECT  functionPrivateName  message  property  property2  JSDocInfo  info  int  noTypeCheckSection  nullCount  typedCount  unknownCount  TypeValidator  validator  ObjectType  type  AbstractCompiler  compiler  JSTypeRegistry  typeRegistry  boolean  enterSection  externs  inExterns  report  reportMissingProperties  typeable  Scope  outerScope  topScope  DiagnosticType  BAD_DELETE  BAD_IMPLEMENTED_TYPE  BIT_OPERATION  CONFLICTING_EXTENDED_TYPE  CONFLICTING_IMPLEMENTED_TYPE  CONSTRUCTOR_NOT_CALLABLE  DETERMINISTIC_TEST  DETERMINISTIC_TEST_NO_RESULT  ENUM_DUP  ENUM_NOT_CONSTANT  EXPECTED_THIS_TYPE  FUNCTION_MASKS_VARIABLE  HIDDEN_INTERFACE_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY_MISMATCH  ILLEGAL_IMPLICIT_CAST  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE  INEXISTENT_ENUM_ELEMENT  INEXISTENT_PROPERTY  INTERFACE_FUNCTION_NOT_EMPTY  INTERFACE_METHOD_OVERRIDE  INVALID_INTERFACE_MEMBER_DECLARATION  MULTIPLE_VAR_DEF  NOT_A_CONSTRUCTOR  NOT_CALLABLE  UNEXPECTED_TOKEN  UNKNOWN_EXPR_TYPE  UNKNOWN_OVERRIDE  UNRESOLVED_TYPE  WRONG_ARGUMENT_COUNT  diagnosticType  InferJSDocInfo  inferJSDocInfo  	projects/Closure66/src/com/google/javascript/jscomp/TypeCheck.java	0.21320071635561041	938	938	2	replace	JSType  leftType  =  getJSType(assign.getLastChild(),  assign);	  JSType    leftType    =    getJSType(assign.getFirstChild(),    assign);    	non-compiled	[CE]  orphaned  case	4	None	replace
39	[BUG]  [BUGGY]  JSType  leftType  =  getJSType(assign.getFirstChild(),  assignment);  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      JSType  rvalueType  =  getJSType(assign.getLastChild());  Var  var  =  t.getScope().getVar(lvalue.getString());  if  (var  !=  null)  {  if  (var.isTypeInferred())  {  return;  }  }  }        [BUGGY]  JSType  leftType  =  getJSType(assign.getFirstChild(),  assignment);  [BUGGY]      Node  rightChild  =  assign.getLastChild();  JSType  rightType  =  getJSType(rightChild);  if  (validator.expectCanAssignTo(  t,  assign,  rightType,  leftType,       "assignment     "))  {  ensureTyped(t,  assign,  rightType);  }  else  {  ensureTyped(t,  assign);  }  }  [CLASS]  TypeCheck  [METHOD]  visitAssign  [RETURN_TYPE]  void  NodeTraversal  t  Node  assign  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  jsType  leftType  objectJsType  rightType  rvalueType  NodeTraversal  t  DiagnosticGroup  ALL_DIAGNOSTICS  CheckLevel  reportMissingOverride  reportUnknownTypes  Var  var  Node  assign  lvalue  object  object2  rightChild  rvalue  FunctionType  functionType  ScopeCreator  scopeCreator  String  OVERRIDING_PROTOTYPE_WITH_NON_OBJECT  functionPrivateName  message  property  property2  JSDocInfo  info  int  noTypeCheckSection  nullCount  typedCount  unknownCount  TypeValidator  validator  ObjectType  type  AbstractCompiler  compiler  JSTypeRegistry  typeRegistry  boolean  enterSection  externs  inExterns  report  reportMissingProperties  typeable  Scope  outerScope  topScope  DiagnosticType  BAD_DELETE  BAD_IMPLEMENTED_TYPE  BIT_OPERATION  CONFLICTING_EXTENDED_TYPE  CONFLICTING_IMPLEMENTED_TYPE  CONSTRUCTOR_NOT_CALLABLE  DETERMINISTIC_TEST  DETERMINISTIC_TEST_NO_RESULT  ENUM_DUP  ENUM_NOT_CONSTANT  EXPECTED_THIS_TYPE  FUNCTION_MASKS_VARIABLE  HIDDEN_INTERFACE_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY_MISMATCH  ILLEGAL_IMPLICIT_CAST  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE  INEXISTENT_ENUM_ELEMENT  INEXISTENT_PROPERTY  INTERFACE_FUNCTION_NOT_EMPTY  INTERFACE_METHOD_OVERRIDE  INVALID_INTERFACE_MEMBER_DECLARATION  MULTIPLE_VAR_DEF  NOT_A_CONSTRUCTOR  NOT_CALLABLE  UNEXPECTED_TOKEN  UNKNOWN_EXPR_TYPE  UNKNOWN_OVERRIDE  UNRESOLVED_TYPE  WRONG_ARGUMENT_COUNT  diagnosticType  InferJSDocInfo  inferJSDocInfo  	projects/Closure66/src/com/google/javascript/jscomp/TypeCheck.java	0.21320071635561041	938	938	2	replace	JSType  leftType  =  getJSType(assign.getFirstChild(),  assignment);	  JSType    leftType    =    getJSType(assign.getFirstChild(),    assign);    	non-compiled	[CE]  orphaned  case	4	None	replace
40	[BUG]  [BUGGY]  JSType  leftType  =  getJSType(assign.getFirstChild(),  assign,  lvalue);  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      JSType  rvalueType  =  getJSType(assign.getLastChild());  Var  var  =  t.getScope().getVar(lvalue.getString());  if  (var  !=  null)  {  if  (var.isTypeInferred())  {  return;  }  }  }        [BUGGY]  JSType  leftType  =  getJSType(assign.getFirstChild(),  assign,  lvalue);  [BUGGY]      Node  rightChild  =  assign.getLastChild();  JSType  rightType  =  getJSType(rightChild);  if  (validator.expectCanAssignTo(  t,  assign,  rightType,  leftType,       "assignment     "))  {  ensureTyped(t,  assign,  rightType);  }  else  {  ensureTyped(t,  assign);  }  }  [CLASS]  TypeCheck  [METHOD]  visitAssign  [RETURN_TYPE]  void  NodeTraversal  t  Node  assign  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  jsType  leftType  objectJsType  rightType  rvalueType  NodeTraversal  t  DiagnosticGroup  ALL_DIAGNOSTICS  CheckLevel  reportMissingOverride  reportUnknownTypes  Var  var  Node  assign  lvalue  object  object2  rightChild  rvalue  FunctionType  functionType  ScopeCreator  scopeCreator  String  OVERRIDING_PROTOTYPE_WITH_NON_OBJECT  functionPrivateName  message  property  property2  JSDocInfo  info  int  noTypeCheckSection  nullCount  typedCount  unknownCount  TypeValidator  validator  ObjectType  type  AbstractCompiler  compiler  JSTypeRegistry  typeRegistry  boolean  enterSection  externs  inExterns  report  reportMissingProperties  typeable  Scope  outerScope  topScope  DiagnosticType  BAD_DELETE  BAD_IMPLEMENTED_TYPE  BIT_OPERATION  CONFLICTING_EXTENDED_TYPE  CONFLICTING_IMPLEMENTED_TYPE  CONSTRUCTOR_NOT_CALLABLE  DETERMINISTIC_TEST  DETERMINISTIC_TEST_NO_RESULT  ENUM_DUP  ENUM_NOT_CONSTANT  EXPECTED_THIS_TYPE  FUNCTION_MASKS_VARIABLE  HIDDEN_INTERFACE_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY_MISMATCH  ILLEGAL_IMPLICIT_CAST  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE  INEXISTENT_ENUM_ELEMENT  INEXISTENT_PROPERTY  INTERFACE_FUNCTION_NOT_EMPTY  INTERFACE_METHOD_OVERRIDE  INVALID_INTERFACE_MEMBER_DECLARATION  MULTIPLE_VAR_DEF  NOT_A_CONSTRUCTOR  NOT_CALLABLE  UNEXPECTED_TOKEN  UNKNOWN_EXPR_TYPE  UNKNOWN_OVERRIDE  UNRESOLVED_TYPE  WRONG_ARGUMENT_COUNT  diagnosticType  InferJSDocInfo  inferJSDocInfo  	projects/Closure66/src/com/google/javascript/jscomp/TypeCheck.java	0.21320071635561041	938	938	2	replace	JSType  leftType  =  getJSType(assign.getFirstChild(),  assign,  lvalue);	  JSType    leftType    =    getJSType(assign.getFirstChild(),    assign);    	non-compiled	[CE]  orphaned  case	4	None	replace
41	[BUG]  [BUGGY]  JSType  leftType  =  getJSType(assign.getFirstChild(),  assign,  rvalue);  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      JSType  rvalueType  =  getJSType(assign.getLastChild());  Var  var  =  t.getScope().getVar(lvalue.getString());  if  (var  !=  null)  {  if  (var.isTypeInferred())  {  return;  }  }  }        [BUGGY]  JSType  leftType  =  getJSType(assign.getFirstChild(),  assign,  rvalue);  [BUGGY]      Node  rightChild  =  assign.getLastChild();  JSType  rightType  =  getJSType(rightChild);  if  (validator.expectCanAssignTo(  t,  assign,  rightType,  leftType,       "assignment     "))  {  ensureTyped(t,  assign,  rightType);  }  else  {  ensureTyped(t,  assign);  }  }  [CLASS]  TypeCheck  [METHOD]  visitAssign  [RETURN_TYPE]  void  NodeTraversal  t  Node  assign  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  jsType  leftType  objectJsType  rightType  rvalueType  NodeTraversal  t  DiagnosticGroup  ALL_DIAGNOSTICS  CheckLevel  reportMissingOverride  reportUnknownTypes  Var  var  Node  assign  lvalue  object  object2  rightChild  rvalue  FunctionType  functionType  ScopeCreator  scopeCreator  String  OVERRIDING_PROTOTYPE_WITH_NON_OBJECT  functionPrivateName  message  property  property2  JSDocInfo  info  int  noTypeCheckSection  nullCount  typedCount  unknownCount  TypeValidator  validator  ObjectType  type  AbstractCompiler  compiler  JSTypeRegistry  typeRegistry  boolean  enterSection  externs  inExterns  report  reportMissingProperties  typeable  Scope  outerScope  topScope  DiagnosticType  BAD_DELETE  BAD_IMPLEMENTED_TYPE  BIT_OPERATION  CONFLICTING_EXTENDED_TYPE  CONFLICTING_IMPLEMENTED_TYPE  CONSTRUCTOR_NOT_CALLABLE  DETERMINISTIC_TEST  DETERMINISTIC_TEST_NO_RESULT  ENUM_DUP  ENUM_NOT_CONSTANT  EXPECTED_THIS_TYPE  FUNCTION_MASKS_VARIABLE  HIDDEN_INTERFACE_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY_MISMATCH  ILLEGAL_IMPLICIT_CAST  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE  INEXISTENT_ENUM_ELEMENT  INEXISTENT_PROPERTY  INTERFACE_FUNCTION_NOT_EMPTY  INTERFACE_METHOD_OVERRIDE  INVALID_INTERFACE_MEMBER_DECLARATION  MULTIPLE_VAR_DEF  NOT_A_CONSTRUCTOR  NOT_CALLABLE  UNEXPECTED_TOKEN  UNKNOWN_EXPR_TYPE  UNKNOWN_OVERRIDE  UNRESOLVED_TYPE  WRONG_ARGUMENT_COUNT  diagnosticType  InferJSDocInfo  inferJSDocInfo  	projects/Closure66/src/com/google/javascript/jscomp/TypeCheck.java	0.21320071635561041	938	938	2	replace	JSType  leftType  =  getJSType(assign.getFirstChild(),  assign,  rvalue);	  JSType    leftType    =    getJSType(assign.getFirstChild(),    assign);    	non-compiled	[CE]  orphaned  case	4	None	replace
42	[BUG]  [BUGGY]  Node  rightChild  =  var.getFirstChild();  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      JSType  rvalueType  =  getJSType(assign.getLastChild());  Var  var  =  t.getScope().getVar(lvalue.getString());  if  (var  !=  null)  {  if  (var.isTypeInferred())  {  return;  }  }  }        [BUGGY]  Node  rightChild  =  var.getFirstChild();  [BUGGY]      Node  rightChild  =  assign.getLastChild();  JSType  rightType  =  getJSType(rightChild);  if  (validator.expectCanAssignTo(  t,  assign,  rightType,  leftType,       "assignment     "))  {  ensureTyped(t,  assign,  rightType);  }  else  {  ensureTyped(t,  assign);  }  }  [CLASS]  TypeCheck  [METHOD]  visitAssign  [RETURN_TYPE]  void  NodeTraversal  t  Node  assign  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  jsType  leftType  objectJsType  rightType  rvalueType  NodeTraversal  t  DiagnosticGroup  ALL_DIAGNOSTICS  CheckLevel  reportMissingOverride  reportUnknownTypes  Var  var  Node  assign  lvalue  object  object2  rightChild  rvalue  FunctionType  functionType  ScopeCreator  scopeCreator  String  OVERRIDING_PROTOTYPE_WITH_NON_OBJECT  functionPrivateName  message  property  property2  JSDocInfo  info  int  noTypeCheckSection  nullCount  typedCount  unknownCount  TypeValidator  validator  ObjectType  type  AbstractCompiler  compiler  JSTypeRegistry  typeRegistry  boolean  enterSection  externs  inExterns  report  reportMissingProperties  typeable  Scope  outerScope  topScope  DiagnosticType  BAD_DELETE  BAD_IMPLEMENTED_TYPE  BIT_OPERATION  CONFLICTING_EXTENDED_TYPE  CONFLICTING_IMPLEMENTED_TYPE  CONSTRUCTOR_NOT_CALLABLE  DETERMINISTIC_TEST  DETERMINISTIC_TEST_NO_RESULT  ENUM_DUP  ENUM_NOT_CONSTANT  EXPECTED_THIS_TYPE  FUNCTION_MASKS_VARIABLE  HIDDEN_INTERFACE_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY_MISMATCH  ILLEGAL_IMPLICIT_CAST  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE  INEXISTENT_ENUM_ELEMENT  INEXISTENT_PROPERTY  INTERFACE_FUNCTION_NOT_EMPTY  INTERFACE_METHOD_OVERRIDE  INVALID_INTERFACE_MEMBER_DECLARATION  MULTIPLE_VAR_DEF  NOT_A_CONSTRUCTOR  NOT_CALLABLE  UNEXPECTED_TOKEN  UNKNOWN_EXPR_TYPE  UNKNOWN_OVERRIDE  UNRESOLVED_TYPE  WRONG_ARGUMENT_COUNT  diagnosticType  InferJSDocInfo  inferJSDocInfo  	projects/Closure66/src/com/google/javascript/jscomp/TypeCheck.java	0.21320071635561041	938	938	2	replace	Node  rightChild  =  var.getFirstChild();	  Node    rightChild    =    assign.getFirstChild();    	non-compiled	[CE]  orphaned  case	9	None	replace
43	[BUG]  [BUGGY]  Node  rightChild  =  assign.getRightChild();  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      JSType  rvalueType  =  getJSType(assign.getLastChild());  Var  var  =  t.getScope().getVar(lvalue.getString());  if  (var  !=  null)  {  if  (var.isTypeInferred())  {  return;  }  }  }        [BUGGY]  Node  rightChild  =  assign.getRightChild();  [BUGGY]      Node  rightChild  =  assign.getLastChild();  JSType  rightType  =  getJSType(rightChild);  if  (validator.expectCanAssignTo(  t,  assign,  rightType,  leftType,       "assignment     "))  {  ensureTyped(t,  assign,  rightType);  }  else  {  ensureTyped(t,  assign);  }  }  [CLASS]  TypeCheck  [METHOD]  visitAssign  [RETURN_TYPE]  void  NodeTraversal  t  Node  assign  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  jsType  leftType  objectJsType  rightType  rvalueType  NodeTraversal  t  DiagnosticGroup  ALL_DIAGNOSTICS  CheckLevel  reportMissingOverride  reportUnknownTypes  Var  var  Node  assign  lvalue  object  object2  rightChild  rvalue  FunctionType  functionType  ScopeCreator  scopeCreator  String  OVERRIDING_PROTOTYPE_WITH_NON_OBJECT  functionPrivateName  message  property  property2  JSDocInfo  info  int  noTypeCheckSection  nullCount  typedCount  unknownCount  TypeValidator  validator  ObjectType  type  AbstractCompiler  compiler  JSTypeRegistry  typeRegistry  boolean  enterSection  externs  inExterns  report  reportMissingProperties  typeable  Scope  outerScope  topScope  DiagnosticType  BAD_DELETE  BAD_IMPLEMENTED_TYPE  BIT_OPERATION  CONFLICTING_EXTENDED_TYPE  CONFLICTING_IMPLEMENTED_TYPE  CONSTRUCTOR_NOT_CALLABLE  DETERMINISTIC_TEST  DETERMINISTIC_TEST_NO_RESULT  ENUM_DUP  ENUM_NOT_CONSTANT  EXPECTED_THIS_TYPE  FUNCTION_MASKS_VARIABLE  HIDDEN_INTERFACE_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY_MISMATCH  ILLEGAL_IMPLICIT_CAST  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE  INEXISTENT_ENUM_ELEMENT  INEXISTENT_PROPERTY  INTERFACE_FUNCTION_NOT_EMPTY  INTERFACE_METHOD_OVERRIDE  INVALID_INTERFACE_MEMBER_DECLARATION  MULTIPLE_VAR_DEF  NOT_A_CONSTRUCTOR  NOT_CALLABLE  UNEXPECTED_TOKEN  UNKNOWN_EXPR_TYPE  UNKNOWN_OVERRIDE  UNRESOLVED_TYPE  WRONG_ARGUMENT_COUNT  diagnosticType  InferJSDocInfo  inferJSDocInfo  	projects/Closure66/src/com/google/javascript/jscomp/TypeCheck.java	0.21320071635561041	938	938	2	replace	Node  rightChild  =  assign.getRightChild();	  Node    rightChild    =    assign.getFirstChild();    	non-compiled	[CE]  orphaned  case	9	None	replace
44	[BUG]  [BUGGY]  Node  rightChild  =  assign.getNext();  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      JSType  rvalueType  =  getJSType(assign.getLastChild());  Var  var  =  t.getScope().getVar(lvalue.getString());  if  (var  !=  null)  {  if  (var.isTypeInferred())  {  return;  }  }  }        [BUGGY]  Node  rightChild  =  assign.getNext();  [BUGGY]      Node  rightChild  =  assign.getLastChild();  JSType  rightType  =  getJSType(rightChild);  if  (validator.expectCanAssignTo(  t,  assign,  rightType,  leftType,       "assignment     "))  {  ensureTyped(t,  assign,  rightType);  }  else  {  ensureTyped(t,  assign);  }  }  [CLASS]  TypeCheck  [METHOD]  visitAssign  [RETURN_TYPE]  void  NodeTraversal  t  Node  assign  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  jsType  leftType  objectJsType  rightType  rvalueType  NodeTraversal  t  DiagnosticGroup  ALL_DIAGNOSTICS  CheckLevel  reportMissingOverride  reportUnknownTypes  Var  var  Node  assign  lvalue  object  object2  rightChild  rvalue  FunctionType  functionType  ScopeCreator  scopeCreator  String  OVERRIDING_PROTOTYPE_WITH_NON_OBJECT  functionPrivateName  message  property  property2  JSDocInfo  info  int  noTypeCheckSection  nullCount  typedCount  unknownCount  TypeValidator  validator  ObjectType  type  AbstractCompiler  compiler  JSTypeRegistry  typeRegistry  boolean  enterSection  externs  inExterns  report  reportMissingProperties  typeable  Scope  outerScope  topScope  DiagnosticType  BAD_DELETE  BAD_IMPLEMENTED_TYPE  BIT_OPERATION  CONFLICTING_EXTENDED_TYPE  CONFLICTING_IMPLEMENTED_TYPE  CONSTRUCTOR_NOT_CALLABLE  DETERMINISTIC_TEST  DETERMINISTIC_TEST_NO_RESULT  ENUM_DUP  ENUM_NOT_CONSTANT  EXPECTED_THIS_TYPE  FUNCTION_MASKS_VARIABLE  HIDDEN_INTERFACE_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY_MISMATCH  ILLEGAL_IMPLICIT_CAST  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE  INEXISTENT_ENUM_ELEMENT  INEXISTENT_PROPERTY  INTERFACE_FUNCTION_NOT_EMPTY  INTERFACE_METHOD_OVERRIDE  INVALID_INTERFACE_MEMBER_DECLARATION  MULTIPLE_VAR_DEF  NOT_A_CONSTRUCTOR  NOT_CALLABLE  UNEXPECTED_TOKEN  UNKNOWN_EXPR_TYPE  UNKNOWN_OVERRIDE  UNRESOLVED_TYPE  WRONG_ARGUMENT_COUNT  diagnosticType  InferJSDocInfo  inferJSDocInfo  	projects/Closure66/src/com/google/javascript/jscomp/TypeCheck.java	0.21320071635561041	938	938	2	replace	Node  rightChild  =  assign.getNext();	  Node    rightChild    =    assign.getFirstChild();    	non-compiled	[CE]  orphaned  case	9	None	replace
45	[BUG]  [BUGGY]  Node  right  =  assign.getLastChild();  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      JSType  rvalueType  =  getJSType(assign.getLastChild());  Var  var  =  t.getScope().getVar(lvalue.getString());  if  (var  !=  null)  {  if  (var.isTypeInferred())  {  return;  }  }  }        [BUGGY]  Node  right  =  assign.getLastChild();  [BUGGY]      Node  rightChild  =  assign.getLastChild();  JSType  rightType  =  getJSType(rightChild);  if  (validator.expectCanAssignTo(  t,  assign,  rightType,  leftType,       "assignment     "))  {  ensureTyped(t,  assign,  rightType);  }  else  {  ensureTyped(t,  assign);  }  }  [CLASS]  TypeCheck  [METHOD]  visitAssign  [RETURN_TYPE]  void  NodeTraversal  t  Node  assign  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  jsType  leftType  objectJsType  rightType  rvalueType  NodeTraversal  t  DiagnosticGroup  ALL_DIAGNOSTICS  CheckLevel  reportMissingOverride  reportUnknownTypes  Var  var  Node  assign  lvalue  object  object2  rightChild  rvalue  FunctionType  functionType  ScopeCreator  scopeCreator  String  OVERRIDING_PROTOTYPE_WITH_NON_OBJECT  functionPrivateName  message  property  property2  JSDocInfo  info  int  noTypeCheckSection  nullCount  typedCount  unknownCount  TypeValidator  validator  ObjectType  type  AbstractCompiler  compiler  JSTypeRegistry  typeRegistry  boolean  enterSection  externs  inExterns  report  reportMissingProperties  typeable  Scope  outerScope  topScope  DiagnosticType  BAD_DELETE  BAD_IMPLEMENTED_TYPE  BIT_OPERATION  CONFLICTING_EXTENDED_TYPE  CONFLICTING_IMPLEMENTED_TYPE  CONSTRUCTOR_NOT_CALLABLE  DETERMINISTIC_TEST  DETERMINISTIC_TEST_NO_RESULT  ENUM_DUP  ENUM_NOT_CONSTANT  EXPECTED_THIS_TYPE  FUNCTION_MASKS_VARIABLE  HIDDEN_INTERFACE_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY_MISMATCH  ILLEGAL_IMPLICIT_CAST  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE  INEXISTENT_ENUM_ELEMENT  INEXISTENT_PROPERTY  INTERFACE_FUNCTION_NOT_EMPTY  INTERFACE_METHOD_OVERRIDE  INVALID_INTERFACE_MEMBER_DECLARATION  MULTIPLE_VAR_DEF  NOT_A_CONSTRUCTOR  NOT_CALLABLE  UNEXPECTED_TOKEN  UNKNOWN_EXPR_TYPE  UNKNOWN_OVERRIDE  UNRESOLVED_TYPE  WRONG_ARGUMENT_COUNT  diagnosticType  InferJSDocInfo  inferJSDocInfo  	projects/Closure66/src/com/google/javascript/jscomp/TypeCheck.java	0.21320071635561041	938	938	2	replace	Node  right  =  assign.getLastChild();	  Node    right    =    assign.getFirstChild();    	non-compiled	[CE]  orphaned  case	12	None	replace
46	[BUG]  [BUGGY]  Node  right  =  lvalue.getFirstChild();  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      JSType  rvalueType  =  getJSType(assign.getLastChild());  Var  var  =  t.getScope().getVar(lvalue.getString());  if  (var  !=  null)  {  if  (var.isTypeInferred())  {  return;  }  }  }        [BUGGY]  Node  right  =  lvalue.getFirstChild();  [BUGGY]      Node  rightChild  =  assign.getLastChild();  JSType  rightType  =  getJSType(rightChild);  if  (validator.expectCanAssignTo(  t,  assign,  rightType,  leftType,       "assignment     "))  {  ensureTyped(t,  assign,  rightType);  }  else  {  ensureTyped(t,  assign);  }  }  [CLASS]  TypeCheck  [METHOD]  visitAssign  [RETURN_TYPE]  void  NodeTraversal  t  Node  assign  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  jsType  leftType  objectJsType  rightType  rvalueType  NodeTraversal  t  DiagnosticGroup  ALL_DIAGNOSTICS  CheckLevel  reportMissingOverride  reportUnknownTypes  Var  var  Node  assign  lvalue  object  object2  rightChild  rvalue  FunctionType  functionType  ScopeCreator  scopeCreator  String  OVERRIDING_PROTOTYPE_WITH_NON_OBJECT  functionPrivateName  message  property  property2  JSDocInfo  info  int  noTypeCheckSection  nullCount  typedCount  unknownCount  TypeValidator  validator  ObjectType  type  AbstractCompiler  compiler  JSTypeRegistry  typeRegistry  boolean  enterSection  externs  inExterns  report  reportMissingProperties  typeable  Scope  outerScope  topScope  DiagnosticType  BAD_DELETE  BAD_IMPLEMENTED_TYPE  BIT_OPERATION  CONFLICTING_EXTENDED_TYPE  CONFLICTING_IMPLEMENTED_TYPE  CONSTRUCTOR_NOT_CALLABLE  DETERMINISTIC_TEST  DETERMINISTIC_TEST_NO_RESULT  ENUM_DUP  ENUM_NOT_CONSTANT  EXPECTED_THIS_TYPE  FUNCTION_MASKS_VARIABLE  HIDDEN_INTERFACE_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY_MISMATCH  ILLEGAL_IMPLICIT_CAST  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE  INEXISTENT_ENUM_ELEMENT  INEXISTENT_PROPERTY  INTERFACE_FUNCTION_NOT_EMPTY  INTERFACE_METHOD_OVERRIDE  INVALID_INTERFACE_MEMBER_DECLARATION  MULTIPLE_VAR_DEF  NOT_A_CONSTRUCTOR  NOT_CALLABLE  UNEXPECTED_TOKEN  UNKNOWN_EXPR_TYPE  UNKNOWN_OVERRIDE  UNRESOLVED_TYPE  WRONG_ARGUMENT_COUNT  diagnosticType  InferJSDocInfo  inferJSDocInfo  	projects/Closure66/src/com/google/javascript/jscomp/TypeCheck.java	0.21320071635561041	938	938	2	replace	Node  right  =  lvalue.getFirstChild();	  Node    right    =    assign.getFirstChild();    	non-compiled	[CE]  orphaned  case	12	None	replace
47	[BUG]  [BUGGY]  Node  right  =  var.getFirstChild();  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      JSType  rvalueType  =  getJSType(assign.getLastChild());  Var  var  =  t.getScope().getVar(lvalue.getString());  if  (var  !=  null)  {  if  (var.isTypeInferred())  {  return;  }  }  }        [BUGGY]  Node  right  =  var.getFirstChild();  [BUGGY]      Node  rightChild  =  assign.getLastChild();  JSType  rightType  =  getJSType(rightChild);  if  (validator.expectCanAssignTo(  t,  assign,  rightType,  leftType,       "assignment     "))  {  ensureTyped(t,  assign,  rightType);  }  else  {  ensureTyped(t,  assign);  }  }  [CLASS]  TypeCheck  [METHOD]  visitAssign  [RETURN_TYPE]  void  NodeTraversal  t  Node  assign  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  jsType  leftType  objectJsType  rightType  rvalueType  NodeTraversal  t  DiagnosticGroup  ALL_DIAGNOSTICS  CheckLevel  reportMissingOverride  reportUnknownTypes  Var  var  Node  assign  lvalue  object  object2  rightChild  rvalue  FunctionType  functionType  ScopeCreator  scopeCreator  String  OVERRIDING_PROTOTYPE_WITH_NON_OBJECT  functionPrivateName  message  property  property2  JSDocInfo  info  int  noTypeCheckSection  nullCount  typedCount  unknownCount  TypeValidator  validator  ObjectType  type  AbstractCompiler  compiler  JSTypeRegistry  typeRegistry  boolean  enterSection  externs  inExterns  report  reportMissingProperties  typeable  Scope  outerScope  topScope  DiagnosticType  BAD_DELETE  BAD_IMPLEMENTED_TYPE  BIT_OPERATION  CONFLICTING_EXTENDED_TYPE  CONFLICTING_IMPLEMENTED_TYPE  CONSTRUCTOR_NOT_CALLABLE  DETERMINISTIC_TEST  DETERMINISTIC_TEST_NO_RESULT  ENUM_DUP  ENUM_NOT_CONSTANT  EXPECTED_THIS_TYPE  FUNCTION_MASKS_VARIABLE  HIDDEN_INTERFACE_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY_MISMATCH  ILLEGAL_IMPLICIT_CAST  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE  INEXISTENT_ENUM_ELEMENT  INEXISTENT_PROPERTY  INTERFACE_FUNCTION_NOT_EMPTY  INTERFACE_METHOD_OVERRIDE  INVALID_INTERFACE_MEMBER_DECLARATION  MULTIPLE_VAR_DEF  NOT_A_CONSTRUCTOR  NOT_CALLABLE  UNEXPECTED_TOKEN  UNKNOWN_EXPR_TYPE  UNKNOWN_OVERRIDE  UNRESOLVED_TYPE  WRONG_ARGUMENT_COUNT  diagnosticType  InferJSDocInfo  inferJSDocInfo  	projects/Closure66/src/com/google/javascript/jscomp/TypeCheck.java	0.21320071635561041	938	938	2	replace	Node  right  =  var.getFirstChild();	  Node    right    =    assign.getFirstChild();    	non-compiled	[CE]  orphaned  case	12	None	replace
48	[BUG]  [BUGGY]  Node  right  =  t.getScope().getLastChild();  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      JSType  rvalueType  =  getJSType(assign.getLastChild());  Var  var  =  t.getScope().getVar(lvalue.getString());  if  (var  !=  null)  {  if  (var.isTypeInferred())  {  return;  }  }  }        [BUGGY]  Node  right  =  t.getScope().getLastChild();  [BUGGY]      Node  rightChild  =  assign.getLastChild();  JSType  rightType  =  getJSType(rightChild);  if  (validator.expectCanAssignTo(  t,  assign,  rightType,  leftType,       "assignment     "))  {  ensureTyped(t,  assign,  rightType);  }  else  {  ensureTyped(t,  assign);  }  }  [CLASS]  TypeCheck  [METHOD]  visitAssign  [RETURN_TYPE]  void  NodeTraversal  t  Node  assign  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  jsType  leftType  objectJsType  rightType  rvalueType  NodeTraversal  t  DiagnosticGroup  ALL_DIAGNOSTICS  CheckLevel  reportMissingOverride  reportUnknownTypes  Var  var  Node  assign  lvalue  object  object2  rightChild  rvalue  FunctionType  functionType  ScopeCreator  scopeCreator  String  OVERRIDING_PROTOTYPE_WITH_NON_OBJECT  functionPrivateName  message  property  property2  JSDocInfo  info  int  noTypeCheckSection  nullCount  typedCount  unknownCount  TypeValidator  validator  ObjectType  type  AbstractCompiler  compiler  JSTypeRegistry  typeRegistry  boolean  enterSection  externs  inExterns  report  reportMissingProperties  typeable  Scope  outerScope  topScope  DiagnosticType  BAD_DELETE  BAD_IMPLEMENTED_TYPE  BIT_OPERATION  CONFLICTING_EXTENDED_TYPE  CONFLICTING_IMPLEMENTED_TYPE  CONSTRUCTOR_NOT_CALLABLE  DETERMINISTIC_TEST  DETERMINISTIC_TEST_NO_RESULT  ENUM_DUP  ENUM_NOT_CONSTANT  EXPECTED_THIS_TYPE  FUNCTION_MASKS_VARIABLE  HIDDEN_INTERFACE_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY_MISMATCH  ILLEGAL_IMPLICIT_CAST  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE  INEXISTENT_ENUM_ELEMENT  INEXISTENT_PROPERTY  INTERFACE_FUNCTION_NOT_EMPTY  INTERFACE_METHOD_OVERRIDE  INVALID_INTERFACE_MEMBER_DECLARATION  MULTIPLE_VAR_DEF  NOT_A_CONSTRUCTOR  NOT_CALLABLE  UNEXPECTED_TOKEN  UNKNOWN_EXPR_TYPE  UNKNOWN_OVERRIDE  UNRESOLVED_TYPE  WRONG_ARGUMENT_COUNT  diagnosticType  InferJSDocInfo  inferJSDocInfo  	projects/Closure66/src/com/google/javascript/jscomp/TypeCheck.java	0.21320071635561041	938	938	2	replace	Node  right  =  t.getScope().getLastChild();	  Node    right    =    assign.getFirstChild();    	non-compiled	[CE]  orphaned  case	12	None	replace
49	[BUG]  [BUGGY]  Node  right  =  assignment.getLastChild();  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      JSType  rvalueType  =  getJSType(assign.getLastChild());  Var  var  =  t.getScope().getVar(lvalue.getString());  if  (var  !=  null)  {  if  (var.isTypeInferred())  {  return;  }  }  }        [BUGGY]  Node  right  =  assignment.getLastChild();  [BUGGY]      Node  rightChild  =  assign.getLastChild();  JSType  rightType  =  getJSType(rightChild);  if  (validator.expectCanAssignTo(  t,  assign,  rightType,  leftType,       "assignment     "))  {  ensureTyped(t,  assign,  rightType);  }  else  {  ensureTyped(t,  assign);  }  }  [CLASS]  TypeCheck  [METHOD]  visitAssign  [RETURN_TYPE]  void  NodeTraversal  t  Node  assign  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  jsType  leftType  objectJsType  rightType  rvalueType  NodeTraversal  t  DiagnosticGroup  ALL_DIAGNOSTICS  CheckLevel  reportMissingOverride  reportUnknownTypes  Var  var  Node  assign  lvalue  object  object2  rightChild  rvalue  FunctionType  functionType  ScopeCreator  scopeCreator  String  OVERRIDING_PROTOTYPE_WITH_NON_OBJECT  functionPrivateName  message  property  property2  JSDocInfo  info  int  noTypeCheckSection  nullCount  typedCount  unknownCount  TypeValidator  validator  ObjectType  type  AbstractCompiler  compiler  JSTypeRegistry  typeRegistry  boolean  enterSection  externs  inExterns  report  reportMissingProperties  typeable  Scope  outerScope  topScope  DiagnosticType  BAD_DELETE  BAD_IMPLEMENTED_TYPE  BIT_OPERATION  CONFLICTING_EXTENDED_TYPE  CONFLICTING_IMPLEMENTED_TYPE  CONSTRUCTOR_NOT_CALLABLE  DETERMINISTIC_TEST  DETERMINISTIC_TEST_NO_RESULT  ENUM_DUP  ENUM_NOT_CONSTANT  EXPECTED_THIS_TYPE  FUNCTION_MASKS_VARIABLE  HIDDEN_INTERFACE_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY_MISMATCH  ILLEGAL_IMPLICIT_CAST  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE  INEXISTENT_ENUM_ELEMENT  INEXISTENT_PROPERTY  INTERFACE_FUNCTION_NOT_EMPTY  INTERFACE_METHOD_OVERRIDE  INVALID_INTERFACE_MEMBER_DECLARATION  MULTIPLE_VAR_DEF  NOT_A_CONSTRUCTOR  NOT_CALLABLE  UNEXPECTED_TOKEN  UNKNOWN_EXPR_TYPE  UNKNOWN_OVERRIDE  UNRESOLVED_TYPE  WRONG_ARGUMENT_COUNT  diagnosticType  InferJSDocInfo  inferJSDocInfo  	projects/Closure66/src/com/google/javascript/jscomp/TypeCheck.java	0.21320071635561041	938	938	2	replace	Node  right  =  assignment.getLastChild();	  Node    right    =    assign.getFirstChild();    	non-compiled	[CE]  orphaned  case	12	None	replace
50	[BUG]  [BUGGY]  Node  right  =  t.getScope().getFirstChild();  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      JSType  rvalueType  =  getJSType(assign.getLastChild());  Var  var  =  t.getScope().getVar(lvalue.getString());  if  (var  !=  null)  {  if  (var.isTypeInferred())  {  return;  }  }  }        [BUGGY]  Node  right  =  t.getScope().getFirstChild();  [BUGGY]      Node  rightChild  =  assign.getLastChild();  JSType  rightType  =  getJSType(rightChild);  if  (validator.expectCanAssignTo(  t,  assign,  rightType,  leftType,       "assignment     "))  {  ensureTyped(t,  assign,  rightType);  }  else  {  ensureTyped(t,  assign);  }  }  [CLASS]  TypeCheck  [METHOD]  visitAssign  [RETURN_TYPE]  void  NodeTraversal  t  Node  assign  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  jsType  leftType  objectJsType  rightType  rvalueType  NodeTraversal  t  DiagnosticGroup  ALL_DIAGNOSTICS  CheckLevel  reportMissingOverride  reportUnknownTypes  Var  var  Node  assign  lvalue  object  object2  rightChild  rvalue  FunctionType  functionType  ScopeCreator  scopeCreator  String  OVERRIDING_PROTOTYPE_WITH_NON_OBJECT  functionPrivateName  message  property  property2  JSDocInfo  info  int  noTypeCheckSection  nullCount  typedCount  unknownCount  TypeValidator  validator  ObjectType  type  AbstractCompiler  compiler  JSTypeRegistry  typeRegistry  boolean  enterSection  externs  inExterns  report  reportMissingProperties  typeable  Scope  outerScope  topScope  DiagnosticType  BAD_DELETE  BAD_IMPLEMENTED_TYPE  BIT_OPERATION  CONFLICTING_EXTENDED_TYPE  CONFLICTING_IMPLEMENTED_TYPE  CONSTRUCTOR_NOT_CALLABLE  DETERMINISTIC_TEST  DETERMINISTIC_TEST_NO_RESULT  ENUM_DUP  ENUM_NOT_CONSTANT  EXPECTED_THIS_TYPE  FUNCTION_MASKS_VARIABLE  HIDDEN_INTERFACE_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY_MISMATCH  ILLEGAL_IMPLICIT_CAST  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE  INEXISTENT_ENUM_ELEMENT  INEXISTENT_PROPERTY  INTERFACE_FUNCTION_NOT_EMPTY  INTERFACE_METHOD_OVERRIDE  INVALID_INTERFACE_MEMBER_DECLARATION  MULTIPLE_VAR_DEF  NOT_A_CONSTRUCTOR  NOT_CALLABLE  UNEXPECTED_TOKEN  UNKNOWN_EXPR_TYPE  UNKNOWN_OVERRIDE  UNRESOLVED_TYPE  WRONG_ARGUMENT_COUNT  diagnosticType  InferJSDocInfo  inferJSDocInfo  	projects/Closure66/src/com/google/javascript/jscomp/TypeCheck.java	0.21320071635561041	938	938	2	replace	Node  right  =  t.getScope().getFirstChild();	  Node    right    =    assign.getFirstChild();    	non-compiled	[CE]  orphaned  case	12	None	replace
51	[BUG]  [BUGGY]  Node  rightType  =  lvalue.getLastChild();  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      JSType  rvalueType  =  getJSType(assign.getLastChild());  Var  var  =  t.getScope().getVar(lvalue.getString());  if  (var  !=  null)  {  if  (var.isTypeInferred())  {  return;  }  }  }        [BUGGY]  Node  rightType  =  lvalue.getLastChild();  [BUGGY]      Node  rightChild  =  assign.getLastChild();  JSType  rightType  =  getJSType(rightChild);  if  (validator.expectCanAssignTo(  t,  assign,  rightType,  leftType,       "assignment     "))  {  ensureTyped(t,  assign,  rightType);  }  else  {  ensureTyped(t,  assign);  }  }  [CLASS]  TypeCheck  [METHOD]  visitAssign  [RETURN_TYPE]  void  NodeTraversal  t  Node  assign  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  jsType  leftType  objectJsType  rightType  rvalueType  NodeTraversal  t  DiagnosticGroup  ALL_DIAGNOSTICS  CheckLevel  reportMissingOverride  reportUnknownTypes  Var  var  Node  assign  lvalue  object  object2  rightChild  rvalue  FunctionType  functionType  ScopeCreator  scopeCreator  String  OVERRIDING_PROTOTYPE_WITH_NON_OBJECT  functionPrivateName  message  property  property2  JSDocInfo  info  int  noTypeCheckSection  nullCount  typedCount  unknownCount  TypeValidator  validator  ObjectType  type  AbstractCompiler  compiler  JSTypeRegistry  typeRegistry  boolean  enterSection  externs  inExterns  report  reportMissingProperties  typeable  Scope  outerScope  topScope  DiagnosticType  BAD_DELETE  BAD_IMPLEMENTED_TYPE  BIT_OPERATION  CONFLICTING_EXTENDED_TYPE  CONFLICTING_IMPLEMENTED_TYPE  CONSTRUCTOR_NOT_CALLABLE  DETERMINISTIC_TEST  DETERMINISTIC_TEST_NO_RESULT  ENUM_DUP  ENUM_NOT_CONSTANT  EXPECTED_THIS_TYPE  FUNCTION_MASKS_VARIABLE  HIDDEN_INTERFACE_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY_MISMATCH  ILLEGAL_IMPLICIT_CAST  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE  INEXISTENT_ENUM_ELEMENT  INEXISTENT_PROPERTY  INTERFACE_FUNCTION_NOT_EMPTY  INTERFACE_METHOD_OVERRIDE  INVALID_INTERFACE_MEMBER_DECLARATION  MULTIPLE_VAR_DEF  NOT_A_CONSTRUCTOR  NOT_CALLABLE  UNEXPECTED_TOKEN  UNKNOWN_EXPR_TYPE  UNKNOWN_OVERRIDE  UNRESOLVED_TYPE  WRONG_ARGUMENT_COUNT  diagnosticType  InferJSDocInfo  inferJSDocInfo  	projects/Closure66/src/com/google/javascript/jscomp/TypeCheck.java	0.21320071635561041	938	938	2	replace	Node  rightType  =  lvalue.getLastChild();	  Node    rightType    =    lvalue.getFirstChild();    	non-compiled	[CE]  orphaned  case	21	None	replace
52	[BUG]  [BUGGY]  Node  rightType  =  object.getFirstChild();  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      JSType  rvalueType  =  getJSType(assign.getLastChild());  Var  var  =  t.getScope().getVar(lvalue.getString());  if  (var  !=  null)  {  if  (var.isTypeInferred())  {  return;  }  }  }        [BUGGY]  Node  rightType  =  object.getFirstChild();  [BUGGY]      Node  rightChild  =  assign.getLastChild();  JSType  rightType  =  getJSType(rightChild);  if  (validator.expectCanAssignTo(  t,  assign,  rightType,  leftType,       "assignment     "))  {  ensureTyped(t,  assign,  rightType);  }  else  {  ensureTyped(t,  assign);  }  }  [CLASS]  TypeCheck  [METHOD]  visitAssign  [RETURN_TYPE]  void  NodeTraversal  t  Node  assign  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  jsType  leftType  objectJsType  rightType  rvalueType  NodeTraversal  t  DiagnosticGroup  ALL_DIAGNOSTICS  CheckLevel  reportMissingOverride  reportUnknownTypes  Var  var  Node  assign  lvalue  object  object2  rightChild  rvalue  FunctionType  functionType  ScopeCreator  scopeCreator  String  OVERRIDING_PROTOTYPE_WITH_NON_OBJECT  functionPrivateName  message  property  property2  JSDocInfo  info  int  noTypeCheckSection  nullCount  typedCount  unknownCount  TypeValidator  validator  ObjectType  type  AbstractCompiler  compiler  JSTypeRegistry  typeRegistry  boolean  enterSection  externs  inExterns  report  reportMissingProperties  typeable  Scope  outerScope  topScope  DiagnosticType  BAD_DELETE  BAD_IMPLEMENTED_TYPE  BIT_OPERATION  CONFLICTING_EXTENDED_TYPE  CONFLICTING_IMPLEMENTED_TYPE  CONSTRUCTOR_NOT_CALLABLE  DETERMINISTIC_TEST  DETERMINISTIC_TEST_NO_RESULT  ENUM_DUP  ENUM_NOT_CONSTANT  EXPECTED_THIS_TYPE  FUNCTION_MASKS_VARIABLE  HIDDEN_INTERFACE_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY_MISMATCH  ILLEGAL_IMPLICIT_CAST  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE  INEXISTENT_ENUM_ELEMENT  INEXISTENT_PROPERTY  INTERFACE_FUNCTION_NOT_EMPTY  INTERFACE_METHOD_OVERRIDE  INVALID_INTERFACE_MEMBER_DECLARATION  MULTIPLE_VAR_DEF  NOT_A_CONSTRUCTOR  NOT_CALLABLE  UNEXPECTED_TOKEN  UNKNOWN_EXPR_TYPE  UNKNOWN_OVERRIDE  UNRESOLVED_TYPE  WRONG_ARGUMENT_COUNT  diagnosticType  InferJSDocInfo  inferJSDocInfo  	projects/Closure66/src/com/google/javascript/jscomp/TypeCheck.java	0.21320071635561041	938	938	2	replace	Node  rightType  =  object.getFirstChild();	  Node    rightType    =    lvalue.getFirstChild();    	non-compiled	[CE]  orphaned  case	21	None	replace
53	[BUG]  [BUGGY]  Node  rightType  =  assignment.getFirstChild();  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      JSType  rvalueType  =  getJSType(assign.getLastChild());  Var  var  =  t.getScope().getVar(lvalue.getString());  if  (var  !=  null)  {  if  (var.isTypeInferred())  {  return;  }  }  }        [BUGGY]  Node  rightType  =  assignment.getFirstChild();  [BUGGY]      Node  rightChild  =  assign.getLastChild();  JSType  rightType  =  getJSType(rightChild);  if  (validator.expectCanAssignTo(  t,  assign,  rightType,  leftType,       "assignment     "))  {  ensureTyped(t,  assign,  rightType);  }  else  {  ensureTyped(t,  assign);  }  }  [CLASS]  TypeCheck  [METHOD]  visitAssign  [RETURN_TYPE]  void  NodeTraversal  t  Node  assign  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  jsType  leftType  objectJsType  rightType  rvalueType  NodeTraversal  t  DiagnosticGroup  ALL_DIAGNOSTICS  CheckLevel  reportMissingOverride  reportUnknownTypes  Var  var  Node  assign  lvalue  object  object2  rightChild  rvalue  FunctionType  functionType  ScopeCreator  scopeCreator  String  OVERRIDING_PROTOTYPE_WITH_NON_OBJECT  functionPrivateName  message  property  property2  JSDocInfo  info  int  noTypeCheckSection  nullCount  typedCount  unknownCount  TypeValidator  validator  ObjectType  type  AbstractCompiler  compiler  JSTypeRegistry  typeRegistry  boolean  enterSection  externs  inExterns  report  reportMissingProperties  typeable  Scope  outerScope  topScope  DiagnosticType  BAD_DELETE  BAD_IMPLEMENTED_TYPE  BIT_OPERATION  CONFLICTING_EXTENDED_TYPE  CONFLICTING_IMPLEMENTED_TYPE  CONSTRUCTOR_NOT_CALLABLE  DETERMINISTIC_TEST  DETERMINISTIC_TEST_NO_RESULT  ENUM_DUP  ENUM_NOT_CONSTANT  EXPECTED_THIS_TYPE  FUNCTION_MASKS_VARIABLE  HIDDEN_INTERFACE_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY_MISMATCH  ILLEGAL_IMPLICIT_CAST  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE  INEXISTENT_ENUM_ELEMENT  INEXISTENT_PROPERTY  INTERFACE_FUNCTION_NOT_EMPTY  INTERFACE_METHOD_OVERRIDE  INVALID_INTERFACE_MEMBER_DECLARATION  MULTIPLE_VAR_DEF  NOT_A_CONSTRUCTOR  NOT_CALLABLE  UNEXPECTED_TOKEN  UNKNOWN_EXPR_TYPE  UNKNOWN_OVERRIDE  UNRESOLVED_TYPE  WRONG_ARGUMENT_COUNT  diagnosticType  InferJSDocInfo  inferJSDocInfo  	projects/Closure66/src/com/google/javascript/jscomp/TypeCheck.java	0.21320071635561041	938	938	2	replace	Node  rightType  =  assignment.getFirstChild();	  Node    rightType    =    lvalue.getFirstChild();    	non-compiled	[CE]  orphaned  case	21	None	replace
54	[BUG]  [BUGGY]  Node  assign  =  var.getFirstChild();  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      JSType  rvalueType  =  getJSType(assign.getLastChild());  Var  var  =  t.getScope().getVar(lvalue.getString());  if  (var  !=  null)  {  if  (var.isTypeInferred())  {  return;  }  }  }        [BUGGY]  Node  assign  =  var.getFirstChild();  [BUGGY]      Node  rightChild  =  assign.getLastChild();  JSType  rightType  =  getJSType(rightChild);  if  (validator.expectCanAssignTo(  t,  assign,  rightType,  leftType,       "assignment     "))  {  ensureTyped(t,  assign,  rightType);  }  else  {  ensureTyped(t,  assign);  }  }  [CLASS]  TypeCheck  [METHOD]  visitAssign  [RETURN_TYPE]  void  NodeTraversal  t  Node  assign  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  jsType  leftType  objectJsType  rightType  rvalueType  NodeTraversal  t  DiagnosticGroup  ALL_DIAGNOSTICS  CheckLevel  reportMissingOverride  reportUnknownTypes  Var  var  Node  assign  lvalue  object  object2  rightChild  rvalue  FunctionType  functionType  ScopeCreator  scopeCreator  String  OVERRIDING_PROTOTYPE_WITH_NON_OBJECT  functionPrivateName  message  property  property2  JSDocInfo  info  int  noTypeCheckSection  nullCount  typedCount  unknownCount  TypeValidator  validator  ObjectType  type  AbstractCompiler  compiler  JSTypeRegistry  typeRegistry  boolean  enterSection  externs  inExterns  report  reportMissingProperties  typeable  Scope  outerScope  topScope  DiagnosticType  BAD_DELETE  BAD_IMPLEMENTED_TYPE  BIT_OPERATION  CONFLICTING_EXTENDED_TYPE  CONFLICTING_IMPLEMENTED_TYPE  CONSTRUCTOR_NOT_CALLABLE  DETERMINISTIC_TEST  DETERMINISTIC_TEST_NO_RESULT  ENUM_DUP  ENUM_NOT_CONSTANT  EXPECTED_THIS_TYPE  FUNCTION_MASKS_VARIABLE  HIDDEN_INTERFACE_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY_MISMATCH  ILLEGAL_IMPLICIT_CAST  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE  INEXISTENT_ENUM_ELEMENT  INEXISTENT_PROPERTY  INTERFACE_FUNCTION_NOT_EMPTY  INTERFACE_METHOD_OVERRIDE  INVALID_INTERFACE_MEMBER_DECLARATION  MULTIPLE_VAR_DEF  NOT_A_CONSTRUCTOR  NOT_CALLABLE  UNEXPECTED_TOKEN  UNKNOWN_EXPR_TYPE  UNKNOWN_OVERRIDE  UNRESOLVED_TYPE  WRONG_ARGUMENT_COUNT  diagnosticType  InferJSDocInfo  inferJSDocInfo  	projects/Closure66/src/com/google/javascript/jscomp/TypeCheck.java	0.21320071635561041	938	938	2	replace	Node  assign  =  var.getFirstChild();	  Node    assign    =    lvalue.getFirstChild();    	non-compiled	[CE]  orphaned  case	7	None	replace
55	[BUG]  [BUGGY]  Node  assign  =  rvalue.getFirstChild();  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      JSType  rvalueType  =  getJSType(assign.getLastChild());  Var  var  =  t.getScope().getVar(lvalue.getString());  if  (var  !=  null)  {  if  (var.isTypeInferred())  {  return;  }  }  }        [BUGGY]  Node  assign  =  rvalue.getFirstChild();  [BUGGY]      Node  rightChild  =  assign.getLastChild();  JSType  rightType  =  getJSType(rightChild);  if  (validator.expectCanAssignTo(  t,  assign,  rightType,  leftType,       "assignment     "))  {  ensureTyped(t,  assign,  rightType);  }  else  {  ensureTyped(t,  assign);  }  }  [CLASS]  TypeCheck  [METHOD]  visitAssign  [RETURN_TYPE]  void  NodeTraversal  t  Node  assign  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  jsType  leftType  objectJsType  rightType  rvalueType  NodeTraversal  t  DiagnosticGroup  ALL_DIAGNOSTICS  CheckLevel  reportMissingOverride  reportUnknownTypes  Var  var  Node  assign  lvalue  object  object2  rightChild  rvalue  FunctionType  functionType  ScopeCreator  scopeCreator  String  OVERRIDING_PROTOTYPE_WITH_NON_OBJECT  functionPrivateName  message  property  property2  JSDocInfo  info  int  noTypeCheckSection  nullCount  typedCount  unknownCount  TypeValidator  validator  ObjectType  type  AbstractCompiler  compiler  JSTypeRegistry  typeRegistry  boolean  enterSection  externs  inExterns  report  reportMissingProperties  typeable  Scope  outerScope  topScope  DiagnosticType  BAD_DELETE  BAD_IMPLEMENTED_TYPE  BIT_OPERATION  CONFLICTING_EXTENDED_TYPE  CONFLICTING_IMPLEMENTED_TYPE  CONSTRUCTOR_NOT_CALLABLE  DETERMINISTIC_TEST  DETERMINISTIC_TEST_NO_RESULT  ENUM_DUP  ENUM_NOT_CONSTANT  EXPECTED_THIS_TYPE  FUNCTION_MASKS_VARIABLE  HIDDEN_INTERFACE_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY_MISMATCH  ILLEGAL_IMPLICIT_CAST  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE  INEXISTENT_ENUM_ELEMENT  INEXISTENT_PROPERTY  INTERFACE_FUNCTION_NOT_EMPTY  INTERFACE_METHOD_OVERRIDE  INVALID_INTERFACE_MEMBER_DECLARATION  MULTIPLE_VAR_DEF  NOT_A_CONSTRUCTOR  NOT_CALLABLE  UNEXPECTED_TOKEN  UNKNOWN_EXPR_TYPE  UNKNOWN_OVERRIDE  UNRESOLVED_TYPE  WRONG_ARGUMENT_COUNT  diagnosticType  InferJSDocInfo  inferJSDocInfo  	projects/Closure66/src/com/google/javascript/jscomp/TypeCheck.java	0.21320071635561041	938	938	2	replace	Node  assign  =  rvalue.getFirstChild();	  Node    assign    =    lvalue.getFirstChild();    	non-compiled	[CE]  orphaned  case	7	None	replace
56	[BUG]  [BUGGY]  Node  assign  =  lvalue!=  null?  lvalue.getFirstChild()  :  assign;  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      JSType  rvalueType  =  getJSType(assign.getLastChild());  Var  var  =  t.getScope().getVar(lvalue.getString());  if  (var  !=  null)  {  if  (var.isTypeInferred())  {  return;  }  }  }        [BUGGY]  Node  assign  =  lvalue!=  null?  lvalue.getFirstChild()  :  assign;  [BUGGY]      Node  rightChild  =  assign.getLastChild();  JSType  rightType  =  getJSType(rightChild);  if  (validator.expectCanAssignTo(  t,  assign,  rightType,  leftType,       "assignment     "))  {  ensureTyped(t,  assign,  rightType);  }  else  {  ensureTyped(t,  assign);  }  }  [CLASS]  TypeCheck  [METHOD]  visitAssign  [RETURN_TYPE]  void  NodeTraversal  t  Node  assign  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  jsType  leftType  objectJsType  rightType  rvalueType  NodeTraversal  t  DiagnosticGroup  ALL_DIAGNOSTICS  CheckLevel  reportMissingOverride  reportUnknownTypes  Var  var  Node  assign  lvalue  object  object2  rightChild  rvalue  FunctionType  functionType  ScopeCreator  scopeCreator  String  OVERRIDING_PROTOTYPE_WITH_NON_OBJECT  functionPrivateName  message  property  property2  JSDocInfo  info  int  noTypeCheckSection  nullCount  typedCount  unknownCount  TypeValidator  validator  ObjectType  type  AbstractCompiler  compiler  JSTypeRegistry  typeRegistry  boolean  enterSection  externs  inExterns  report  reportMissingProperties  typeable  Scope  outerScope  topScope  DiagnosticType  BAD_DELETE  BAD_IMPLEMENTED_TYPE  BIT_OPERATION  CONFLICTING_EXTENDED_TYPE  CONFLICTING_IMPLEMENTED_TYPE  CONSTRUCTOR_NOT_CALLABLE  DETERMINISTIC_TEST  DETERMINISTIC_TEST_NO_RESULT  ENUM_DUP  ENUM_NOT_CONSTANT  EXPECTED_THIS_TYPE  FUNCTION_MASKS_VARIABLE  HIDDEN_INTERFACE_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY_MISMATCH  ILLEGAL_IMPLICIT_CAST  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE  INEXISTENT_ENUM_ELEMENT  INEXISTENT_PROPERTY  INTERFACE_FUNCTION_NOT_EMPTY  INTERFACE_METHOD_OVERRIDE  INVALID_INTERFACE_MEMBER_DECLARATION  MULTIPLE_VAR_DEF  NOT_A_CONSTRUCTOR  NOT_CALLABLE  UNEXPECTED_TOKEN  UNKNOWN_EXPR_TYPE  UNKNOWN_OVERRIDE  UNRESOLVED_TYPE  WRONG_ARGUMENT_COUNT  diagnosticType  InferJSDocInfo  inferJSDocInfo  	projects/Closure66/src/com/google/javascript/jscomp/TypeCheck.java	0.21320071635561041	938	938	2	replace	Node  assign  =  lvalue!=  null?  lvalue.getFirstChild()  :  assign;	  Node    assign    =    lvalue.getFirstChild();    	non-compiled	[CE]  orphaned  case	7	None	replace
57	[BUG]  [BUGGY]  Node  assign  =  object.getFirstChild();  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      JSType  rvalueType  =  getJSType(assign.getLastChild());  Var  var  =  t.getScope().getVar(lvalue.getString());  if  (var  !=  null)  {  if  (var.isTypeInferred())  {  return;  }  }  }        [BUGGY]  Node  assign  =  object.getFirstChild();  [BUGGY]      Node  rightChild  =  assign.getLastChild();  JSType  rightType  =  getJSType(rightChild);  if  (validator.expectCanAssignTo(  t,  assign,  rightType,  leftType,       "assignment     "))  {  ensureTyped(t,  assign,  rightType);  }  else  {  ensureTyped(t,  assign);  }  }  [CLASS]  TypeCheck  [METHOD]  visitAssign  [RETURN_TYPE]  void  NodeTraversal  t  Node  assign  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  jsType  leftType  objectJsType  rightType  rvalueType  NodeTraversal  t  DiagnosticGroup  ALL_DIAGNOSTICS  CheckLevel  reportMissingOverride  reportUnknownTypes  Var  var  Node  assign  lvalue  object  object2  rightChild  rvalue  FunctionType  functionType  ScopeCreator  scopeCreator  String  OVERRIDING_PROTOTYPE_WITH_NON_OBJECT  functionPrivateName  message  property  property2  JSDocInfo  info  int  noTypeCheckSection  nullCount  typedCount  unknownCount  TypeValidator  validator  ObjectType  type  AbstractCompiler  compiler  JSTypeRegistry  typeRegistry  boolean  enterSection  externs  inExterns  report  reportMissingProperties  typeable  Scope  outerScope  topScope  DiagnosticType  BAD_DELETE  BAD_IMPLEMENTED_TYPE  BIT_OPERATION  CONFLICTING_EXTENDED_TYPE  CONFLICTING_IMPLEMENTED_TYPE  CONSTRUCTOR_NOT_CALLABLE  DETERMINISTIC_TEST  DETERMINISTIC_TEST_NO_RESULT  ENUM_DUP  ENUM_NOT_CONSTANT  EXPECTED_THIS_TYPE  FUNCTION_MASKS_VARIABLE  HIDDEN_INTERFACE_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY_MISMATCH  ILLEGAL_IMPLICIT_CAST  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE  INEXISTENT_ENUM_ELEMENT  INEXISTENT_PROPERTY  INTERFACE_FUNCTION_NOT_EMPTY  INTERFACE_METHOD_OVERRIDE  INVALID_INTERFACE_MEMBER_DECLARATION  MULTIPLE_VAR_DEF  NOT_A_CONSTRUCTOR  NOT_CALLABLE  UNEXPECTED_TOKEN  UNKNOWN_EXPR_TYPE  UNKNOWN_OVERRIDE  UNRESOLVED_TYPE  WRONG_ARGUMENT_COUNT  diagnosticType  InferJSDocInfo  inferJSDocInfo  	projects/Closure66/src/com/google/javascript/jscomp/TypeCheck.java	0.21320071635561041	938	938	2	replace	Node  assign  =  object.getFirstChild();	  Node    assign    =    lvalue.getFirstChild();    	non-compiled	[CE]  orphaned  case	7	None	replace
58	[BUG]  [BUGGY]  Node  assign  =  getJSType(lvalue.getFirstChild());  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      JSType  rvalueType  =  getJSType(assign.getLastChild());  Var  var  =  t.getScope().getVar(lvalue.getString());  if  (var  !=  null)  {  if  (var.isTypeInferred())  {  return;  }  }  }        [BUGGY]  Node  assign  =  getJSType(lvalue.getFirstChild());  [BUGGY]      Node  rightChild  =  assign.getLastChild();  JSType  rightType  =  getJSType(rightChild);  if  (validator.expectCanAssignTo(  t,  assign,  rightType,  leftType,       "assignment     "))  {  ensureTyped(t,  assign,  rightType);  }  else  {  ensureTyped(t,  assign);  }  }  [CLASS]  TypeCheck  [METHOD]  visitAssign  [RETURN_TYPE]  void  NodeTraversal  t  Node  assign  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  jsType  leftType  objectJsType  rightType  rvalueType  NodeTraversal  t  DiagnosticGroup  ALL_DIAGNOSTICS  CheckLevel  reportMissingOverride  reportUnknownTypes  Var  var  Node  assign  lvalue  object  object2  rightChild  rvalue  FunctionType  functionType  ScopeCreator  scopeCreator  String  OVERRIDING_PROTOTYPE_WITH_NON_OBJECT  functionPrivateName  message  property  property2  JSDocInfo  info  int  noTypeCheckSection  nullCount  typedCount  unknownCount  TypeValidator  validator  ObjectType  type  AbstractCompiler  compiler  JSTypeRegistry  typeRegistry  boolean  enterSection  externs  inExterns  report  reportMissingProperties  typeable  Scope  outerScope  topScope  DiagnosticType  BAD_DELETE  BAD_IMPLEMENTED_TYPE  BIT_OPERATION  CONFLICTING_EXTENDED_TYPE  CONFLICTING_IMPLEMENTED_TYPE  CONSTRUCTOR_NOT_CALLABLE  DETERMINISTIC_TEST  DETERMINISTIC_TEST_NO_RESULT  ENUM_DUP  ENUM_NOT_CONSTANT  EXPECTED_THIS_TYPE  FUNCTION_MASKS_VARIABLE  HIDDEN_INTERFACE_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY_MISMATCH  ILLEGAL_IMPLICIT_CAST  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE  INEXISTENT_ENUM_ELEMENT  INEXISTENT_PROPERTY  INTERFACE_FUNCTION_NOT_EMPTY  INTERFACE_METHOD_OVERRIDE  INVALID_INTERFACE_MEMBER_DECLARATION  MULTIPLE_VAR_DEF  NOT_A_CONSTRUCTOR  NOT_CALLABLE  UNEXPECTED_TOKEN  UNKNOWN_EXPR_TYPE  UNKNOWN_OVERRIDE  UNRESOLVED_TYPE  WRONG_ARGUMENT_COUNT  diagnosticType  InferJSDocInfo  inferJSDocInfo  	projects/Closure66/src/com/google/javascript/jscomp/TypeCheck.java	0.21320071635561041	938	938	2	replace	Node  assign  =  getJSType(lvalue.getFirstChild());	  Node    assign    =    getJSType(assign.getFirstChild());    	non-compiled	[CE]  orphaned  case	10	None	replace
59	[BUG]  [BUGGY]  Node  assign  =  getJSType(assign.getLastChild());  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      JSType  rvalueType  =  getJSType(assign.getLastChild());  Var  var  =  t.getScope().getVar(lvalue.getString());  if  (var  !=  null)  {  if  (var.isTypeInferred())  {  return;  }  }  }        [BUGGY]  Node  assign  =  getJSType(assign.getLastChild());  [BUGGY]      Node  rightChild  =  assign.getLastChild();  JSType  rightType  =  getJSType(rightChild);  if  (validator.expectCanAssignTo(  t,  assign,  rightType,  leftType,       "assignment     "))  {  ensureTyped(t,  assign,  rightType);  }  else  {  ensureTyped(t,  assign);  }  }  [CLASS]  TypeCheck  [METHOD]  visitAssign  [RETURN_TYPE]  void  NodeTraversal  t  Node  assign  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  jsType  leftType  objectJsType  rightType  rvalueType  NodeTraversal  t  DiagnosticGroup  ALL_DIAGNOSTICS  CheckLevel  reportMissingOverride  reportUnknownTypes  Var  var  Node  assign  lvalue  object  object2  rightChild  rvalue  FunctionType  functionType  ScopeCreator  scopeCreator  String  OVERRIDING_PROTOTYPE_WITH_NON_OBJECT  functionPrivateName  message  property  property2  JSDocInfo  info  int  noTypeCheckSection  nullCount  typedCount  unknownCount  TypeValidator  validator  ObjectType  type  AbstractCompiler  compiler  JSTypeRegistry  typeRegistry  boolean  enterSection  externs  inExterns  report  reportMissingProperties  typeable  Scope  outerScope  topScope  DiagnosticType  BAD_DELETE  BAD_IMPLEMENTED_TYPE  BIT_OPERATION  CONFLICTING_EXTENDED_TYPE  CONFLICTING_IMPLEMENTED_TYPE  CONSTRUCTOR_NOT_CALLABLE  DETERMINISTIC_TEST  DETERMINISTIC_TEST_NO_RESULT  ENUM_DUP  ENUM_NOT_CONSTANT  EXPECTED_THIS_TYPE  FUNCTION_MASKS_VARIABLE  HIDDEN_INTERFACE_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY_MISMATCH  ILLEGAL_IMPLICIT_CAST  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE  INEXISTENT_ENUM_ELEMENT  INEXISTENT_PROPERTY  INTERFACE_FUNCTION_NOT_EMPTY  INTERFACE_METHOD_OVERRIDE  INVALID_INTERFACE_MEMBER_DECLARATION  MULTIPLE_VAR_DEF  NOT_A_CONSTRUCTOR  NOT_CALLABLE  UNEXPECTED_TOKEN  UNKNOWN_EXPR_TYPE  UNKNOWN_OVERRIDE  UNRESOLVED_TYPE  WRONG_ARGUMENT_COUNT  diagnosticType  InferJSDocInfo  inferJSDocInfo  	projects/Closure66/src/com/google/javascript/jscomp/TypeCheck.java	0.21320071635561041	938	938	2	replace	Node  assign  =  getJSType(assign.getLastChild());	  Node    assign    =    getJSType(assign.getFirstChild());    	non-compiled	[CE]  orphaned  case	10	None	replace
60	[BUG]  [BUGGY]  Node  assign  =  getJSType(assign.getFirstChild(),  lvalue);  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      JSType  rvalueType  =  getJSType(assign.getLastChild());  Var  var  =  t.getScope().getVar(lvalue.getString());  if  (var  !=  null)  {  if  (var.isTypeInferred())  {  return;  }  }  }        [BUGGY]  Node  assign  =  getJSType(assign.getFirstChild(),  lvalue);  [BUGGY]      Node  rightChild  =  assign.getLastChild();  JSType  rightType  =  getJSType(rightChild);  if  (validator.expectCanAssignTo(  t,  assign,  rightType,  leftType,       "assignment     "))  {  ensureTyped(t,  assign,  rightType);  }  else  {  ensureTyped(t,  assign);  }  }  [CLASS]  TypeCheck  [METHOD]  visitAssign  [RETURN_TYPE]  void  NodeTraversal  t  Node  assign  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  jsType  leftType  objectJsType  rightType  rvalueType  NodeTraversal  t  DiagnosticGroup  ALL_DIAGNOSTICS  CheckLevel  reportMissingOverride  reportUnknownTypes  Var  var  Node  assign  lvalue  object  object2  rightChild  rvalue  FunctionType  functionType  ScopeCreator  scopeCreator  String  OVERRIDING_PROTOTYPE_WITH_NON_OBJECT  functionPrivateName  message  property  property2  JSDocInfo  info  int  noTypeCheckSection  nullCount  typedCount  unknownCount  TypeValidator  validator  ObjectType  type  AbstractCompiler  compiler  JSTypeRegistry  typeRegistry  boolean  enterSection  externs  inExterns  report  reportMissingProperties  typeable  Scope  outerScope  topScope  DiagnosticType  BAD_DELETE  BAD_IMPLEMENTED_TYPE  BIT_OPERATION  CONFLICTING_EXTENDED_TYPE  CONFLICTING_IMPLEMENTED_TYPE  CONSTRUCTOR_NOT_CALLABLE  DETERMINISTIC_TEST  DETERMINISTIC_TEST_NO_RESULT  ENUM_DUP  ENUM_NOT_CONSTANT  EXPECTED_THIS_TYPE  FUNCTION_MASKS_VARIABLE  HIDDEN_INTERFACE_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY_MISMATCH  ILLEGAL_IMPLICIT_CAST  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE  INEXISTENT_ENUM_ELEMENT  INEXISTENT_PROPERTY  INTERFACE_FUNCTION_NOT_EMPTY  INTERFACE_METHOD_OVERRIDE  INVALID_INTERFACE_MEMBER_DECLARATION  MULTIPLE_VAR_DEF  NOT_A_CONSTRUCTOR  NOT_CALLABLE  UNEXPECTED_TOKEN  UNKNOWN_EXPR_TYPE  UNKNOWN_OVERRIDE  UNRESOLVED_TYPE  WRONG_ARGUMENT_COUNT  diagnosticType  InferJSDocInfo  inferJSDocInfo  	projects/Closure66/src/com/google/javascript/jscomp/TypeCheck.java	0.21320071635561041	938	938	2	replace	Node  assign  =  getJSType(assign.getFirstChild(),  lvalue);	  Node    assign    =    getJSType(assign.getFirstChild());    	non-compiled	[CE]  orphaned  case	10	None	replace
61	[BUG]  [BUGGY]  Node  assign  =  getJSType(var.getFirstChild());  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]      JSType  rvalueType  =  getJSType(assign.getLastChild());  Var  var  =  t.getScope().getVar(lvalue.getString());  if  (var  !=  null)  {  if  (var.isTypeInferred())  {  return;  }  }  }        [BUGGY]  Node  assign  =  getJSType(var.getFirstChild());  [BUGGY]      Node  rightChild  =  assign.getLastChild();  JSType  rightType  =  getJSType(rightChild);  if  (validator.expectCanAssignTo(  t,  assign,  rightType,  leftType,       "assignment     "))  {  ensureTyped(t,  assign,  rightType);  }  else  {  ensureTyped(t,  assign);  }  }  [CLASS]  TypeCheck  [METHOD]  visitAssign  [RETURN_TYPE]  void  NodeTraversal  t  Node  assign  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  jsType  leftType  objectJsType  rightType  rvalueType  NodeTraversal  t  DiagnosticGroup  ALL_DIAGNOSTICS  CheckLevel  reportMissingOverride  reportUnknownTypes  Var  var  Node  assign  lvalue  object  object2  rightChild  rvalue  FunctionType  functionType  ScopeCreator  scopeCreator  String  OVERRIDING_PROTOTYPE_WITH_NON_OBJECT  functionPrivateName  message  property  property2  JSDocInfo  info  int  noTypeCheckSection  nullCount  typedCount  unknownCount  TypeValidator  validator  ObjectType  type  AbstractCompiler  compiler  JSTypeRegistry  typeRegistry  boolean  enterSection  externs  inExterns  report  reportMissingProperties  typeable  Scope  outerScope  topScope  DiagnosticType  BAD_DELETE  BAD_IMPLEMENTED_TYPE  BIT_OPERATION  CONFLICTING_EXTENDED_TYPE  CONFLICTING_IMPLEMENTED_TYPE  CONSTRUCTOR_NOT_CALLABLE  DETERMINISTIC_TEST  DETERMINISTIC_TEST_NO_RESULT  ENUM_DUP  ENUM_NOT_CONSTANT  EXPECTED_THIS_TYPE  FUNCTION_MASKS_VARIABLE  HIDDEN_INTERFACE_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY_MISMATCH  ILLEGAL_IMPLICIT_CAST  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE  INEXISTENT_ENUM_ELEMENT  INEXISTENT_PROPERTY  INTERFACE_FUNCTION_NOT_EMPTY  INTERFACE_METHOD_OVERRIDE  INVALID_INTERFACE_MEMBER_DECLARATION  MULTIPLE_VAR_DEF  NOT_A_CONSTRUCTOR  NOT_CALLABLE  UNEXPECTED_TOKEN  UNKNOWN_EXPR_TYPE  UNKNOWN_OVERRIDE  UNRESOLVED_TYPE  WRONG_ARGUMENT_COUNT  diagnosticType  InferJSDocInfo  inferJSDocInfo  	projects/Closure66/src/com/google/javascript/jscomp/TypeCheck.java	0.21320071635561041	938	938	2	replace	Node  assign  =  getJSType(var.getFirstChild());	  Node    assign    =    getJSType(assign.getFirstChild());    	non-compiled	[CE]  orphaned  case	10	None	replace
62	[BUG]  [BUGGY]  Node  assign  =  getJSType(rvalue.getFirstChild());  [CE]  orphaned  case  [FE]                                AssertionFailedError      [CONTEXT]      JSType  rvalueType  =  getJSType(assign.getLastChild());  Var  var  =  t.getScope().getVar(lvalue.getString());  if  (var  !=  null)  {  if  (var.isTypeInferred())  {  return;  }  }  }        [BUGGY]  Node  assign  =  getJSType(rvalue.getFirstChild());  [BUGGY]      Node  rightChild  =  assign.getLastChild();  JSType  rightType  =  getJSType(rightChild);  if  (validator.expectCanAssignTo(  t,  assign,  rightType,  leftType,       "assignment     "))  {  ensureTyped(t,  assign,  rightType);  }  else  {  ensureTyped(t,  assign);  }  }  [CLASS]  TypeCheck  [METHOD]  visitAssign  [RETURN_TYPE]  void  NodeTraversal  t  Node  assign  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  jsType  leftType  objectJsType  rightType  rvalueType  NodeTraversal  t  DiagnosticGroup  ALL_DIAGNOSTICS  CheckLevel  reportMissingOverride  reportUnknownTypes  Var  var  Node  assign  lvalue  object  object2  rightChild  rvalue  FunctionType  functionType  ScopeCreator  scopeCreator  String  OVERRIDING_PROTOTYPE_WITH_NON_OBJECT  functionPrivateName  message  property  property2  JSDocInfo  info  int  noTypeCheckSection  nullCount  typedCount  unknownCount  TypeValidator  validator  ObjectType  type  AbstractCompiler  compiler  JSTypeRegistry  typeRegistry  boolean  enterSection  externs  inExterns  report  reportMissingProperties  typeable  Scope  outerScope  topScope  DiagnosticType  BAD_DELETE  BAD_IMPLEMENTED_TYPE  BIT_OPERATION  CONFLICTING_EXTENDED_TYPE  CONFLICTING_IMPLEMENTED_TYPE  CONSTRUCTOR_NOT_CALLABLE  DETERMINISTIC_TEST  DETERMINISTIC_TEST_NO_RESULT  ENUM_DUP  ENUM_NOT_CONSTANT  EXPECTED_THIS_TYPE  FUNCTION_MASKS_VARIABLE  HIDDEN_INTERFACE_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY_MISMATCH  ILLEGAL_IMPLICIT_CAST  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE  INEXISTENT_ENUM_ELEMENT  INEXISTENT_PROPERTY  INTERFACE_FUNCTION_NOT_EMPTY  INTERFACE_METHOD_OVERRIDE  INVALID_INTERFACE_MEMBER_DECLARATION  MULTIPLE_VAR_DEF  NOT_A_CONSTRUCTOR  NOT_CALLABLE  UNEXPECTED_TOKEN  UNKNOWN_EXPR_TYPE  UNKNOWN_OVERRIDE  UNRESOLVED_TYPE  WRONG_ARGUMENT_COUNT  diagnosticType  InferJSDocInfo  inferJSDocInfo  	projects/Closure66/src/com/google/javascript/jscomp/TypeCheck.java	0.21320071635561041	938	938	2	replace	Node  assign  =  getJSType(rvalue.getFirstChild());	  Node    assign    =    getJSType(assign.getFirstChild());    	non-compiled	[CE]  orphaned  case	10	None	replace
63	[BUG]  [BUGGY]  Node  assign  =  getJSType(assign.getFirstChild(),  var);  [CE]  orphaned  case  [FE]                                  AssertionFailedError      [CONTEXT]      JSType  rvalueType  =  getJSType(assign.getLastChild());  Var  var  =  t.getScope().getVar(lvalue.getString());  if  (var  !=  null)  {  if  (var.isTypeInferred())  {  return;  }  }  }        [BUGGY]  Node  assign  =  getJSType(assign.getFirstChild(),  var);  [BUGGY]      Node  rightChild  =  assign.getLastChild();  JSType  rightType  =  getJSType(rightChild);  if  (validator.expectCanAssignTo(  t,  assign,  rightType,  leftType,       "assignment     "))  {  ensureTyped(t,  assign,  rightType);  }  else  {  ensureTyped(t,  assign);  }  }  [CLASS]  TypeCheck  [METHOD]  visitAssign  [RETURN_TYPE]  void  NodeTraversal  t  Node  assign  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  jsType  leftType  objectJsType  rightType  rvalueType  NodeTraversal  t  DiagnosticGroup  ALL_DIAGNOSTICS  CheckLevel  reportMissingOverride  reportUnknownTypes  Var  var  Node  assign  lvalue  object  object2  rightChild  rvalue  FunctionType  functionType  ScopeCreator  scopeCreator  String  OVERRIDING_PROTOTYPE_WITH_NON_OBJECT  functionPrivateName  message  property  property2  JSDocInfo  info  int  noTypeCheckSection  nullCount  typedCount  unknownCount  TypeValidator  validator  ObjectType  type  AbstractCompiler  compiler  JSTypeRegistry  typeRegistry  boolean  enterSection  externs  inExterns  report  reportMissingProperties  typeable  Scope  outerScope  topScope  DiagnosticType  BAD_DELETE  BAD_IMPLEMENTED_TYPE  BIT_OPERATION  CONFLICTING_EXTENDED_TYPE  CONFLICTING_IMPLEMENTED_TYPE  CONSTRUCTOR_NOT_CALLABLE  DETERMINISTIC_TEST  DETERMINISTIC_TEST_NO_RESULT  ENUM_DUP  ENUM_NOT_CONSTANT  EXPECTED_THIS_TYPE  FUNCTION_MASKS_VARIABLE  HIDDEN_INTERFACE_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY_MISMATCH  ILLEGAL_IMPLICIT_CAST  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE  INEXISTENT_ENUM_ELEMENT  INEXISTENT_PROPERTY  INTERFACE_FUNCTION_NOT_EMPTY  INTERFACE_METHOD_OVERRIDE  INVALID_INTERFACE_MEMBER_DECLARATION  MULTIPLE_VAR_DEF  NOT_A_CONSTRUCTOR  NOT_CALLABLE  UNEXPECTED_TOKEN  UNKNOWN_EXPR_TYPE  UNKNOWN_OVERRIDE  UNRESOLVED_TYPE  WRONG_ARGUMENT_COUNT  diagnosticType  InferJSDocInfo  inferJSDocInfo  	projects/Closure66/src/com/google/javascript/jscomp/TypeCheck.java	0.21320071635561041	938	938	2	replace	Node  assign  =  getJSType(assign.getFirstChild(),  var);	  Node    assign    =    getJSType(assign.getFirstChild());    	non-compiled	[CE]  orphaned  case	10	None	replace
64	[BUG]  [BUGGY]  JSType  leftType  =  findJSType(assign.getLastChild());  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      JSType  rvalueType  =  getJSType(assign.getLastChild());  Var  var  =  t.getScope().getVar(lvalue.getString());  if  (var  !=  null)  {  if  (var.isTypeInferred())  {  return;  }  }  }        [BUGGY]  JSType  leftType  =  findJSType(assign.getLastChild());  [BUGGY]      Node  rightChild  =  assign.getLastChild();  JSType  rightType  =  getJSType(rightChild);  if  (validator.expectCanAssignTo(  t,  assign,  rightType,  leftType,       "assignment     "))  {  ensureTyped(t,  assign,  rightType);  }  else  {  ensureTyped(t,  assign);  }  }  [CLASS]  TypeCheck  [METHOD]  visitAssign  [RETURN_TYPE]  void  NodeTraversal  t  Node  assign  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  jsType  leftType  objectJsType  rightType  rvalueType  NodeTraversal  t  DiagnosticGroup  ALL_DIAGNOSTICS  CheckLevel  reportMissingOverride  reportUnknownTypes  Var  var  Node  assign  lvalue  object  object2  rightChild  rvalue  FunctionType  functionType  ScopeCreator  scopeCreator  String  OVERRIDING_PROTOTYPE_WITH_NON_OBJECT  functionPrivateName  message  property  property2  JSDocInfo  info  int  noTypeCheckSection  nullCount  typedCount  unknownCount  TypeValidator  validator  ObjectType  type  AbstractCompiler  compiler  JSTypeRegistry  typeRegistry  boolean  enterSection  externs  inExterns  report  reportMissingProperties  typeable  Scope  outerScope  topScope  DiagnosticType  BAD_DELETE  BAD_IMPLEMENTED_TYPE  BIT_OPERATION  CONFLICTING_EXTENDED_TYPE  CONFLICTING_IMPLEMENTED_TYPE  CONSTRUCTOR_NOT_CALLABLE  DETERMINISTIC_TEST  DETERMINISTIC_TEST_NO_RESULT  ENUM_DUP  ENUM_NOT_CONSTANT  EXPECTED_THIS_TYPE  FUNCTION_MASKS_VARIABLE  HIDDEN_INTERFACE_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY_MISMATCH  ILLEGAL_IMPLICIT_CAST  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE  INEXISTENT_ENUM_ELEMENT  INEXISTENT_PROPERTY  INTERFACE_FUNCTION_NOT_EMPTY  INTERFACE_METHOD_OVERRIDE  INVALID_INTERFACE_MEMBER_DECLARATION  MULTIPLE_VAR_DEF  NOT_A_CONSTRUCTOR  NOT_CALLABLE  UNEXPECTED_TOKEN  UNKNOWN_EXPR_TYPE  UNKNOWN_OVERRIDE  UNRESOLVED_TYPE  WRONG_ARGUMENT_COUNT  diagnosticType  InferJSDocInfo  inferJSDocInfo  	projects/Closure66/src/com/google/javascript/jscomp/TypeCheck.java	0.21320071635561041	938	938	2	replace	JSType  leftType  =  findJSType(assign.getLastChild());	  JSType    leftType    =    findJSType(assign.getFirstChild());    	non-compiled	[CE]  orphaned  case	16	None	replace
65	[BUG]  [BUGGY]  JSType  leftType  =  findJSType(assign.getFirstChild(),  assign);  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      JSType  rvalueType  =  getJSType(assign.getLastChild());  Var  var  =  t.getScope().getVar(lvalue.getString());  if  (var  !=  null)  {  if  (var.isTypeInferred())  {  return;  }  }  }        [BUGGY]  JSType  leftType  =  findJSType(assign.getFirstChild(),  assign);  [BUGGY]      Node  rightChild  =  assign.getLastChild();  JSType  rightType  =  getJSType(rightChild);  if  (validator.expectCanAssignTo(  t,  assign,  rightType,  leftType,       "assignment     "))  {  ensureTyped(t,  assign,  rightType);  }  else  {  ensureTyped(t,  assign);  }  }  [CLASS]  TypeCheck  [METHOD]  visitAssign  [RETURN_TYPE]  void  NodeTraversal  t  Node  assign  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  jsType  leftType  objectJsType  rightType  rvalueType  NodeTraversal  t  DiagnosticGroup  ALL_DIAGNOSTICS  CheckLevel  reportMissingOverride  reportUnknownTypes  Var  var  Node  assign  lvalue  object  object2  rightChild  rvalue  FunctionType  functionType  ScopeCreator  scopeCreator  String  OVERRIDING_PROTOTYPE_WITH_NON_OBJECT  functionPrivateName  message  property  property2  JSDocInfo  info  int  noTypeCheckSection  nullCount  typedCount  unknownCount  TypeValidator  validator  ObjectType  type  AbstractCompiler  compiler  JSTypeRegistry  typeRegistry  boolean  enterSection  externs  inExterns  report  reportMissingProperties  typeable  Scope  outerScope  topScope  DiagnosticType  BAD_DELETE  BAD_IMPLEMENTED_TYPE  BIT_OPERATION  CONFLICTING_EXTENDED_TYPE  CONFLICTING_IMPLEMENTED_TYPE  CONSTRUCTOR_NOT_CALLABLE  DETERMINISTIC_TEST  DETERMINISTIC_TEST_NO_RESULT  ENUM_DUP  ENUM_NOT_CONSTANT  EXPECTED_THIS_TYPE  FUNCTION_MASKS_VARIABLE  HIDDEN_INTERFACE_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY_MISMATCH  ILLEGAL_IMPLICIT_CAST  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE  INEXISTENT_ENUM_ELEMENT  INEXISTENT_PROPERTY  INTERFACE_FUNCTION_NOT_EMPTY  INTERFACE_METHOD_OVERRIDE  INVALID_INTERFACE_MEMBER_DECLARATION  MULTIPLE_VAR_DEF  NOT_A_CONSTRUCTOR  NOT_CALLABLE  UNEXPECTED_TOKEN  UNKNOWN_EXPR_TYPE  UNKNOWN_OVERRIDE  UNRESOLVED_TYPE  WRONG_ARGUMENT_COUNT  diagnosticType  InferJSDocInfo  inferJSDocInfo  	projects/Closure66/src/com/google/javascript/jscomp/TypeCheck.java	0.21320071635561041	938	938	2	replace	JSType  leftType  =  findJSType(assign.getFirstChild(),  assign);	  JSType    leftType    =    findJSType(assign.getFirstChild());    	non-compiled	[CE]  orphaned  case	16	None	replace
66	[BUG]  [BUGGY]  JSType  rightType  =  getJSType(lvalue.getLastChild());  [CE]  orphaned  case  [FE]            AssertionFailedError      [CONTEXT]      JSType  rvalueType  =  getJSType(assign.getLastChild());  Var  var  =  t.getScope().getVar(lvalue.getString());  if  (var  !=  null)  {  if  (var.isTypeInferred())  {  return;  }  }  }        [BUGGY]  JSType  rightType  =  getJSType(lvalue.getLastChild());  [BUGGY]      Node  rightChild  =  assign.getLastChild();  JSType  rightType  =  getJSType(rightChild);  if  (validator.expectCanAssignTo(  t,  assign,  rightType,  leftType,       "assignment     "))  {  ensureTyped(t,  assign,  rightType);  }  else  {  ensureTyped(t,  assign);  }  }  [CLASS]  TypeCheck  [METHOD]  visitAssign  [RETURN_TYPE]  void  NodeTraversal  t  Node  assign  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  jsType  leftType  objectJsType  rightType  rvalueType  NodeTraversal  t  DiagnosticGroup  ALL_DIAGNOSTICS  CheckLevel  reportMissingOverride  reportUnknownTypes  Var  var  Node  assign  lvalue  object  object2  rightChild  rvalue  FunctionType  functionType  ScopeCreator  scopeCreator  String  OVERRIDING_PROTOTYPE_WITH_NON_OBJECT  functionPrivateName  message  property  property2  JSDocInfo  info  int  noTypeCheckSection  nullCount  typedCount  unknownCount  TypeValidator  validator  ObjectType  type  AbstractCompiler  compiler  JSTypeRegistry  typeRegistry  boolean  enterSection  externs  inExterns  report  reportMissingProperties  typeable  Scope  outerScope  topScope  DiagnosticType  BAD_DELETE  BAD_IMPLEMENTED_TYPE  BIT_OPERATION  CONFLICTING_EXTENDED_TYPE  CONFLICTING_IMPLEMENTED_TYPE  CONSTRUCTOR_NOT_CALLABLE  DETERMINISTIC_TEST  DETERMINISTIC_TEST_NO_RESULT  ENUM_DUP  ENUM_NOT_CONSTANT  EXPECTED_THIS_TYPE  FUNCTION_MASKS_VARIABLE  HIDDEN_INTERFACE_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY_MISMATCH  ILLEGAL_IMPLICIT_CAST  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE  INEXISTENT_ENUM_ELEMENT  INEXISTENT_PROPERTY  INTERFACE_FUNCTION_NOT_EMPTY  INTERFACE_METHOD_OVERRIDE  INVALID_INTERFACE_MEMBER_DECLARATION  MULTIPLE_VAR_DEF  NOT_A_CONSTRUCTOR  NOT_CALLABLE  UNEXPECTED_TOKEN  UNKNOWN_EXPR_TYPE  UNKNOWN_OVERRIDE  UNRESOLVED_TYPE  WRONG_ARGUMENT_COUNT  diagnosticType  InferJSDocInfo  inferJSDocInfo  	projects/Closure66/src/com/google/javascript/jscomp/TypeCheck.java	0.21320071635561041	938	938	2	replace	JSType  rightType  =  getJSType(lvalue.getLastChild());	  JSType    rightType    =    getJSType(assign.getLastChild());    	non-compiled	[CE]  orphaned  case	18	None	replace
67	[BUG]  [BUGGY]  Node  rightType  =  t.getScope().getVar(assign.getString());  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      JSType  rvalueType  =  getJSType(assign.getLastChild());  Var  var  =  t.getScope().getVar(lvalue.getString());  if  (var  !=  null)  {  if  (var.isTypeInferred())  {  return;  }  }  }        [BUGGY]  Node  rightType  =  t.getScope().getVar(assign.getString());  [BUGGY]      Node  rightChild  =  assign.getLastChild();  JSType  rightType  =  getJSType(rightChild);  if  (validator.expectCanAssignTo(  t,  assign,  rightType,  leftType,       "assignment     "))  {  ensureTyped(t,  assign,  rightType);  }  else  {  ensureTyped(t,  assign);  }  }  [CLASS]  TypeCheck  [METHOD]  visitAssign  [RETURN_TYPE]  void  NodeTraversal  t  Node  assign  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  jsType  leftType  objectJsType  rightType  rvalueType  NodeTraversal  t  DiagnosticGroup  ALL_DIAGNOSTICS  CheckLevel  reportMissingOverride  reportUnknownTypes  Var  var  Node  assign  lvalue  object  object2  rightChild  rvalue  FunctionType  functionType  ScopeCreator  scopeCreator  String  OVERRIDING_PROTOTYPE_WITH_NON_OBJECT  functionPrivateName  message  property  property2  JSDocInfo  info  int  noTypeCheckSection  nullCount  typedCount  unknownCount  TypeValidator  validator  ObjectType  type  AbstractCompiler  compiler  JSTypeRegistry  typeRegistry  boolean  enterSection  externs  inExterns  report  reportMissingProperties  typeable  Scope  outerScope  topScope  DiagnosticType  BAD_DELETE  BAD_IMPLEMENTED_TYPE  BIT_OPERATION  CONFLICTING_EXTENDED_TYPE  CONFLICTING_IMPLEMENTED_TYPE  CONSTRUCTOR_NOT_CALLABLE  DETERMINISTIC_TEST  DETERMINISTIC_TEST_NO_RESULT  ENUM_DUP  ENUM_NOT_CONSTANT  EXPECTED_THIS_TYPE  FUNCTION_MASKS_VARIABLE  HIDDEN_INTERFACE_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY_MISMATCH  ILLEGAL_IMPLICIT_CAST  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE  INEXISTENT_ENUM_ELEMENT  INEXISTENT_PROPERTY  INTERFACE_FUNCTION_NOT_EMPTY  INTERFACE_METHOD_OVERRIDE  INVALID_INTERFACE_MEMBER_DECLARATION  MULTIPLE_VAR_DEF  NOT_A_CONSTRUCTOR  NOT_CALLABLE  UNEXPECTED_TOKEN  UNKNOWN_EXPR_TYPE  UNKNOWN_OVERRIDE  UNRESOLVED_TYPE  WRONG_ARGUMENT_COUNT  diagnosticType  InferJSDocInfo  inferJSDocInfo  	projects/Closure66/src/com/google/javascript/jscomp/TypeCheck.java	0.21320071635561041	938	938	2	replace	Node  rightType  =  t.getScope().getVar(assign.getString());	  Node    rightType    =    t.getScope().getVar(lvalue.getString());    	non-compiled	[CE]  orphaned  case	20	None	replace
68	[BUG]  [BUGGY]  Node  rightType  =  t.getScope().getVar(lvalue.getString()  +  1);  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      JSType  rvalueType  =  getJSType(assign.getLastChild());  Var  var  =  t.getScope().getVar(lvalue.getString());  if  (var  !=  null)  {  if  (var.isTypeInferred())  {  return;  }  }  }        [BUGGY]  Node  rightType  =  t.getScope().getVar(lvalue.getString()  +  1);  [BUGGY]      Node  rightChild  =  assign.getLastChild();  JSType  rightType  =  getJSType(rightChild);  if  (validator.expectCanAssignTo(  t,  assign,  rightType,  leftType,       "assignment     "))  {  ensureTyped(t,  assign,  rightType);  }  else  {  ensureTyped(t,  assign);  }  }  [CLASS]  TypeCheck  [METHOD]  visitAssign  [RETURN_TYPE]  void  NodeTraversal  t  Node  assign  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  jsType  leftType  objectJsType  rightType  rvalueType  NodeTraversal  t  DiagnosticGroup  ALL_DIAGNOSTICS  CheckLevel  reportMissingOverride  reportUnknownTypes  Var  var  Node  assign  lvalue  object  object2  rightChild  rvalue  FunctionType  functionType  ScopeCreator  scopeCreator  String  OVERRIDING_PROTOTYPE_WITH_NON_OBJECT  functionPrivateName  message  property  property2  JSDocInfo  info  int  noTypeCheckSection  nullCount  typedCount  unknownCount  TypeValidator  validator  ObjectType  type  AbstractCompiler  compiler  JSTypeRegistry  typeRegistry  boolean  enterSection  externs  inExterns  report  reportMissingProperties  typeable  Scope  outerScope  topScope  DiagnosticType  BAD_DELETE  BAD_IMPLEMENTED_TYPE  BIT_OPERATION  CONFLICTING_EXTENDED_TYPE  CONFLICTING_IMPLEMENTED_TYPE  CONSTRUCTOR_NOT_CALLABLE  DETERMINISTIC_TEST  DETERMINISTIC_TEST_NO_RESULT  ENUM_DUP  ENUM_NOT_CONSTANT  EXPECTED_THIS_TYPE  FUNCTION_MASKS_VARIABLE  HIDDEN_INTERFACE_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY_MISMATCH  ILLEGAL_IMPLICIT_CAST  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE  INEXISTENT_ENUM_ELEMENT  INEXISTENT_PROPERTY  INTERFACE_FUNCTION_NOT_EMPTY  INTERFACE_METHOD_OVERRIDE  INVALID_INTERFACE_MEMBER_DECLARATION  MULTIPLE_VAR_DEF  NOT_A_CONSTRUCTOR  NOT_CALLABLE  UNEXPECTED_TOKEN  UNKNOWN_EXPR_TYPE  UNKNOWN_OVERRIDE  UNRESOLVED_TYPE  WRONG_ARGUMENT_COUNT  diagnosticType  InferJSDocInfo  inferJSDocInfo  	projects/Closure66/src/com/google/javascript/jscomp/TypeCheck.java	0.21320071635561041	938	938	2	replace	Node  rightType  =  t.getScope().getVar(lvalue.getString()  +  1);	  Node    rightType    =    t.getScope().getVar(lvalue.getString());    	non-compiled	[CE]  orphaned  case	20	None	replace
69	[BUG]  [BUGGY]  Node  rightType  =  t.getScope().getVar(rvalue.getString());  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      JSType  rvalueType  =  getJSType(assign.getLastChild());  Var  var  =  t.getScope().getVar(lvalue.getString());  if  (var  !=  null)  {  if  (var.isTypeInferred())  {  return;  }  }  }        [BUGGY]  Node  rightType  =  t.getScope().getVar(rvalue.getString());  [BUGGY]      Node  rightChild  =  assign.getLastChild();  JSType  rightType  =  getJSType(rightChild);  if  (validator.expectCanAssignTo(  t,  assign,  rightType,  leftType,       "assignment     "))  {  ensureTyped(t,  assign,  rightType);  }  else  {  ensureTyped(t,  assign);  }  }  [CLASS]  TypeCheck  [METHOD]  visitAssign  [RETURN_TYPE]  void  NodeTraversal  t  Node  assign  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  jsType  leftType  objectJsType  rightType  rvalueType  NodeTraversal  t  DiagnosticGroup  ALL_DIAGNOSTICS  CheckLevel  reportMissingOverride  reportUnknownTypes  Var  var  Node  assign  lvalue  object  object2  rightChild  rvalue  FunctionType  functionType  ScopeCreator  scopeCreator  String  OVERRIDING_PROTOTYPE_WITH_NON_OBJECT  functionPrivateName  message  property  property2  JSDocInfo  info  int  noTypeCheckSection  nullCount  typedCount  unknownCount  TypeValidator  validator  ObjectType  type  AbstractCompiler  compiler  JSTypeRegistry  typeRegistry  boolean  enterSection  externs  inExterns  report  reportMissingProperties  typeable  Scope  outerScope  topScope  DiagnosticType  BAD_DELETE  BAD_IMPLEMENTED_TYPE  BIT_OPERATION  CONFLICTING_EXTENDED_TYPE  CONFLICTING_IMPLEMENTED_TYPE  CONSTRUCTOR_NOT_CALLABLE  DETERMINISTIC_TEST  DETERMINISTIC_TEST_NO_RESULT  ENUM_DUP  ENUM_NOT_CONSTANT  EXPECTED_THIS_TYPE  FUNCTION_MASKS_VARIABLE  HIDDEN_INTERFACE_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY_MISMATCH  ILLEGAL_IMPLICIT_CAST  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE  INEXISTENT_ENUM_ELEMENT  INEXISTENT_PROPERTY  INTERFACE_FUNCTION_NOT_EMPTY  INTERFACE_METHOD_OVERRIDE  INVALID_INTERFACE_MEMBER_DECLARATION  MULTIPLE_VAR_DEF  NOT_A_CONSTRUCTOR  NOT_CALLABLE  UNEXPECTED_TOKEN  UNKNOWN_EXPR_TYPE  UNKNOWN_OVERRIDE  UNRESOLVED_TYPE  WRONG_ARGUMENT_COUNT  diagnosticType  InferJSDocInfo  inferJSDocInfo  	projects/Closure66/src/com/google/javascript/jscomp/TypeCheck.java	0.21320071635561041	938	938	2	replace	Node  rightType  =  t.getScope().getVar(rvalue.getString());	  Node    rightType    =    t.getScope().getVar(lvalue.getString());    	non-compiled	[CE]  orphaned  case	20	None	replace
70	[BUG]  [BUGGY]  Node  rightType  =  t.getScope().getVar(lvalue.getString(),  rvalue);  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      JSType  rvalueType  =  getJSType(assign.getLastChild());  Var  var  =  t.getScope().getVar(lvalue.getString());  if  (var  !=  null)  {  if  (var.isTypeInferred())  {  return;  }  }  }        [BUGGY]  Node  rightType  =  t.getScope().getVar(lvalue.getString(),  rvalue);  [BUGGY]      Node  rightChild  =  assign.getLastChild();  JSType  rightType  =  getJSType(rightChild);  if  (validator.expectCanAssignTo(  t,  assign,  rightType,  leftType,       "assignment     "))  {  ensureTyped(t,  assign,  rightType);  }  else  {  ensureTyped(t,  assign);  }  }  [CLASS]  TypeCheck  [METHOD]  visitAssign  [RETURN_TYPE]  void  NodeTraversal  t  Node  assign  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  jsType  leftType  objectJsType  rightType  rvalueType  NodeTraversal  t  DiagnosticGroup  ALL_DIAGNOSTICS  CheckLevel  reportMissingOverride  reportUnknownTypes  Var  var  Node  assign  lvalue  object  object2  rightChild  rvalue  FunctionType  functionType  ScopeCreator  scopeCreator  String  OVERRIDING_PROTOTYPE_WITH_NON_OBJECT  functionPrivateName  message  property  property2  JSDocInfo  info  int  noTypeCheckSection  nullCount  typedCount  unknownCount  TypeValidator  validator  ObjectType  type  AbstractCompiler  compiler  JSTypeRegistry  typeRegistry  boolean  enterSection  externs  inExterns  report  reportMissingProperties  typeable  Scope  outerScope  topScope  DiagnosticType  BAD_DELETE  BAD_IMPLEMENTED_TYPE  BIT_OPERATION  CONFLICTING_EXTENDED_TYPE  CONFLICTING_IMPLEMENTED_TYPE  CONSTRUCTOR_NOT_CALLABLE  DETERMINISTIC_TEST  DETERMINISTIC_TEST_NO_RESULT  ENUM_DUP  ENUM_NOT_CONSTANT  EXPECTED_THIS_TYPE  FUNCTION_MASKS_VARIABLE  HIDDEN_INTERFACE_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY_MISMATCH  ILLEGAL_IMPLICIT_CAST  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE  INEXISTENT_ENUM_ELEMENT  INEXISTENT_PROPERTY  INTERFACE_FUNCTION_NOT_EMPTY  INTERFACE_METHOD_OVERRIDE  INVALID_INTERFACE_MEMBER_DECLARATION  MULTIPLE_VAR_DEF  NOT_A_CONSTRUCTOR  NOT_CALLABLE  UNEXPECTED_TOKEN  UNKNOWN_EXPR_TYPE  UNKNOWN_OVERRIDE  UNRESOLVED_TYPE  WRONG_ARGUMENT_COUNT  diagnosticType  InferJSDocInfo  inferJSDocInfo  	projects/Closure66/src/com/google/javascript/jscomp/TypeCheck.java	0.21320071635561041	938	938	2	replace	Node  rightType  =  t.getScope().getVar(lvalue.getString(),  rvalue);	  Node    rightType    =    t.getScope().getVar(lvalue.getString());    	non-compiled	[CE]  orphaned  case	20	None	replace
71	[BUG]  [BUGGY]  Node  rightType  =  lvalue.getScope().getVar(lvalue.getString());  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      JSType  rvalueType  =  getJSType(assign.getLastChild());  Var  var  =  t.getScope().getVar(lvalue.getString());  if  (var  !=  null)  {  if  (var.isTypeInferred())  {  return;  }  }  }        [BUGGY]  Node  rightType  =  lvalue.getScope().getVar(lvalue.getString());  [BUGGY]      Node  rightChild  =  assign.getLastChild();  JSType  rightType  =  getJSType(rightChild);  if  (validator.expectCanAssignTo(  t,  assign,  rightType,  leftType,       "assignment     "))  {  ensureTyped(t,  assign,  rightType);  }  else  {  ensureTyped(t,  assign);  }  }  [CLASS]  TypeCheck  [METHOD]  visitAssign  [RETURN_TYPE]  void  NodeTraversal  t  Node  assign  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  jsType  leftType  objectJsType  rightType  rvalueType  NodeTraversal  t  DiagnosticGroup  ALL_DIAGNOSTICS  CheckLevel  reportMissingOverride  reportUnknownTypes  Var  var  Node  assign  lvalue  object  object2  rightChild  rvalue  FunctionType  functionType  ScopeCreator  scopeCreator  String  OVERRIDING_PROTOTYPE_WITH_NON_OBJECT  functionPrivateName  message  property  property2  JSDocInfo  info  int  noTypeCheckSection  nullCount  typedCount  unknownCount  TypeValidator  validator  ObjectType  type  AbstractCompiler  compiler  JSTypeRegistry  typeRegistry  boolean  enterSection  externs  inExterns  report  reportMissingProperties  typeable  Scope  outerScope  topScope  DiagnosticType  BAD_DELETE  BAD_IMPLEMENTED_TYPE  BIT_OPERATION  CONFLICTING_EXTENDED_TYPE  CONFLICTING_IMPLEMENTED_TYPE  CONSTRUCTOR_NOT_CALLABLE  DETERMINISTIC_TEST  DETERMINISTIC_TEST_NO_RESULT  ENUM_DUP  ENUM_NOT_CONSTANT  EXPECTED_THIS_TYPE  FUNCTION_MASKS_VARIABLE  HIDDEN_INTERFACE_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY_MISMATCH  ILLEGAL_IMPLICIT_CAST  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE  INEXISTENT_ENUM_ELEMENT  INEXISTENT_PROPERTY  INTERFACE_FUNCTION_NOT_EMPTY  INTERFACE_METHOD_OVERRIDE  INVALID_INTERFACE_MEMBER_DECLARATION  MULTIPLE_VAR_DEF  NOT_A_CONSTRUCTOR  NOT_CALLABLE  UNEXPECTED_TOKEN  UNKNOWN_EXPR_TYPE  UNKNOWN_OVERRIDE  UNRESOLVED_TYPE  WRONG_ARGUMENT_COUNT  diagnosticType  InferJSDocInfo  inferJSDocInfo  	projects/Closure66/src/com/google/javascript/jscomp/TypeCheck.java	0.21320071635561041	938	938	2	replace	Node  rightType  =  lvalue.getScope().getVar(lvalue.getString());	  Node    rightType    =    t.getScope().getVar(lvalue.getString());    	non-compiled	[CE]  orphaned  case	20	None	replace
72	[BUG]  [BUGGY]  Node  rightType  =  t.getScope().getVar(var.getString());  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      JSType  rvalueType  =  getJSType(assign.getLastChild());  Var  var  =  t.getScope().getVar(lvalue.getString());  if  (var  !=  null)  {  if  (var.isTypeInferred())  {  return;  }  }  }        [BUGGY]  Node  rightType  =  t.getScope().getVar(var.getString());  [BUGGY]      Node  rightChild  =  assign.getLastChild();  JSType  rightType  =  getJSType(rightChild);  if  (validator.expectCanAssignTo(  t,  assign,  rightType,  leftType,       "assignment     "))  {  ensureTyped(t,  assign,  rightType);  }  else  {  ensureTyped(t,  assign);  }  }  [CLASS]  TypeCheck  [METHOD]  visitAssign  [RETURN_TYPE]  void  NodeTraversal  t  Node  assign  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  jsType  leftType  objectJsType  rightType  rvalueType  NodeTraversal  t  DiagnosticGroup  ALL_DIAGNOSTICS  CheckLevel  reportMissingOverride  reportUnknownTypes  Var  var  Node  assign  lvalue  object  object2  rightChild  rvalue  FunctionType  functionType  ScopeCreator  scopeCreator  String  OVERRIDING_PROTOTYPE_WITH_NON_OBJECT  functionPrivateName  message  property  property2  JSDocInfo  info  int  noTypeCheckSection  nullCount  typedCount  unknownCount  TypeValidator  validator  ObjectType  type  AbstractCompiler  compiler  JSTypeRegistry  typeRegistry  boolean  enterSection  externs  inExterns  report  reportMissingProperties  typeable  Scope  outerScope  topScope  DiagnosticType  BAD_DELETE  BAD_IMPLEMENTED_TYPE  BIT_OPERATION  CONFLICTING_EXTENDED_TYPE  CONFLICTING_IMPLEMENTED_TYPE  CONSTRUCTOR_NOT_CALLABLE  DETERMINISTIC_TEST  DETERMINISTIC_TEST_NO_RESULT  ENUM_DUP  ENUM_NOT_CONSTANT  EXPECTED_THIS_TYPE  FUNCTION_MASKS_VARIABLE  HIDDEN_INTERFACE_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY_MISMATCH  ILLEGAL_IMPLICIT_CAST  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE  INEXISTENT_ENUM_ELEMENT  INEXISTENT_PROPERTY  INTERFACE_FUNCTION_NOT_EMPTY  INTERFACE_METHOD_OVERRIDE  INVALID_INTERFACE_MEMBER_DECLARATION  MULTIPLE_VAR_DEF  NOT_A_CONSTRUCTOR  NOT_CALLABLE  UNEXPECTED_TOKEN  UNKNOWN_EXPR_TYPE  UNKNOWN_OVERRIDE  UNRESOLVED_TYPE  WRONG_ARGUMENT_COUNT  diagnosticType  InferJSDocInfo  inferJSDocInfo  	projects/Closure66/src/com/google/javascript/jscomp/TypeCheck.java	0.21320071635561041	938	938	2	replace	Node  rightType  =  t.getScope().getVar(var.getString());	  Node    rightType    =    t.getScope().getVar(lvalue.getString());    	non-compiled	[CE]  orphaned  case	20	None	replace
73	[BUG]  [BUGGY]  Node  assign  =  lvalue.removeFirstChild();  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      JSType  rvalueType  =  getJSType(assign.getLastChild());  Var  var  =  t.getScope().getVar(lvalue.getString());  if  (var  !=  null)  {  if  (var.isTypeInferred())  {  return;  }  }  }        [BUGGY]  Node  assign  =  lvalue.removeFirstChild();  [BUGGY]      Node  rightChild  =  assign.getLastChild();  JSType  rightType  =  getJSType(rightChild);  if  (validator.expectCanAssignTo(  t,  assign,  rightType,  leftType,       "assignment     "))  {  ensureTyped(t,  assign,  rightType);  }  else  {  ensureTyped(t,  assign);  }  }  [CLASS]  TypeCheck  [METHOD]  visitAssign  [RETURN_TYPE]  void  NodeTraversal  t  Node  assign  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  jsType  leftType  objectJsType  rightType  rvalueType  NodeTraversal  t  DiagnosticGroup  ALL_DIAGNOSTICS  CheckLevel  reportMissingOverride  reportUnknownTypes  Var  var  Node  assign  lvalue  object  object2  rightChild  rvalue  FunctionType  functionType  ScopeCreator  scopeCreator  String  OVERRIDING_PROTOTYPE_WITH_NON_OBJECT  functionPrivateName  message  property  property2  JSDocInfo  info  int  noTypeCheckSection  nullCount  typedCount  unknownCount  TypeValidator  validator  ObjectType  type  AbstractCompiler  compiler  JSTypeRegistry  typeRegistry  boolean  enterSection  externs  inExterns  report  reportMissingProperties  typeable  Scope  outerScope  topScope  DiagnosticType  BAD_DELETE  BAD_IMPLEMENTED_TYPE  BIT_OPERATION  CONFLICTING_EXTENDED_TYPE  CONFLICTING_IMPLEMENTED_TYPE  CONSTRUCTOR_NOT_CALLABLE  DETERMINISTIC_TEST  DETERMINISTIC_TEST_NO_RESULT  ENUM_DUP  ENUM_NOT_CONSTANT  EXPECTED_THIS_TYPE  FUNCTION_MASKS_VARIABLE  HIDDEN_INTERFACE_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY_MISMATCH  ILLEGAL_IMPLICIT_CAST  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE  INEXISTENT_ENUM_ELEMENT  INEXISTENT_PROPERTY  INTERFACE_FUNCTION_NOT_EMPTY  INTERFACE_METHOD_OVERRIDE  INVALID_INTERFACE_MEMBER_DECLARATION  MULTIPLE_VAR_DEF  NOT_A_CONSTRUCTOR  NOT_CALLABLE  UNEXPECTED_TOKEN  UNKNOWN_EXPR_TYPE  UNKNOWN_OVERRIDE  UNRESOLVED_TYPE  WRONG_ARGUMENT_COUNT  diagnosticType  InferJSDocInfo  inferJSDocInfo  	projects/Closure66/src/com/google/javascript/jscomp/TypeCheck.java	0.21320071635561041	938	938	2	replace	Node  assign  =  lvalue.removeFirstChild();	  Node    assign    =    lvalue.getFirstChild();    	non-compiled	[CE]  orphaned  case	7	None	replace
74	[BUG]  [BUGGY]  Node  assign  =  lvalue.getAssignedValue();  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      JSType  rvalueType  =  getJSType(assign.getLastChild());  Var  var  =  t.getScope().getVar(lvalue.getString());  if  (var  !=  null)  {  if  (var.isTypeInferred())  {  return;  }  }  }        [BUGGY]  Node  assign  =  lvalue.getAssignedValue();  [BUGGY]      Node  rightChild  =  assign.getLastChild();  JSType  rightType  =  getJSType(rightChild);  if  (validator.expectCanAssignTo(  t,  assign,  rightType,  leftType,       "assignment     "))  {  ensureTyped(t,  assign,  rightType);  }  else  {  ensureTyped(t,  assign);  }  }  [CLASS]  TypeCheck  [METHOD]  visitAssign  [RETURN_TYPE]  void  NodeTraversal  t  Node  assign  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  jsType  leftType  objectJsType  rightType  rvalueType  NodeTraversal  t  DiagnosticGroup  ALL_DIAGNOSTICS  CheckLevel  reportMissingOverride  reportUnknownTypes  Var  var  Node  assign  lvalue  object  object2  rightChild  rvalue  FunctionType  functionType  ScopeCreator  scopeCreator  String  OVERRIDING_PROTOTYPE_WITH_NON_OBJECT  functionPrivateName  message  property  property2  JSDocInfo  info  int  noTypeCheckSection  nullCount  typedCount  unknownCount  TypeValidator  validator  ObjectType  type  AbstractCompiler  compiler  JSTypeRegistry  typeRegistry  boolean  enterSection  externs  inExterns  report  reportMissingProperties  typeable  Scope  outerScope  topScope  DiagnosticType  BAD_DELETE  BAD_IMPLEMENTED_TYPE  BIT_OPERATION  CONFLICTING_EXTENDED_TYPE  CONFLICTING_IMPLEMENTED_TYPE  CONSTRUCTOR_NOT_CALLABLE  DETERMINISTIC_TEST  DETERMINISTIC_TEST_NO_RESULT  ENUM_DUP  ENUM_NOT_CONSTANT  EXPECTED_THIS_TYPE  FUNCTION_MASKS_VARIABLE  HIDDEN_INTERFACE_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY_MISMATCH  ILLEGAL_IMPLICIT_CAST  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE  INEXISTENT_ENUM_ELEMENT  INEXISTENT_PROPERTY  INTERFACE_FUNCTION_NOT_EMPTY  INTERFACE_METHOD_OVERRIDE  INVALID_INTERFACE_MEMBER_DECLARATION  MULTIPLE_VAR_DEF  NOT_A_CONSTRUCTOR  NOT_CALLABLE  UNEXPECTED_TOKEN  UNKNOWN_EXPR_TYPE  UNKNOWN_OVERRIDE  UNRESOLVED_TYPE  WRONG_ARGUMENT_COUNT  diagnosticType  InferJSDocInfo  inferJSDocInfo  	projects/Closure66/src/com/google/javascript/jscomp/TypeCheck.java	0.21320071635561041	938	938	2	replace	Node  assign  =  lvalue.getAssignedValue();	  Node    assign    =    lvalue.getNext();    	non-compiled	[CE]  orphaned  case	8	None	replace
75	[BUG]  [BUGGY]  Node  assign  =  object.getNext();  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      JSType  rvalueType  =  getJSType(assign.getLastChild());  Var  var  =  t.getScope().getVar(lvalue.getString());  if  (var  !=  null)  {  if  (var.isTypeInferred())  {  return;  }  }  }        [BUGGY]  Node  assign  =  object.getNext();  [BUGGY]      Node  rightChild  =  assign.getLastChild();  JSType  rightType  =  getJSType(rightChild);  if  (validator.expectCanAssignTo(  t,  assign,  rightType,  leftType,       "assignment     "))  {  ensureTyped(t,  assign,  rightType);  }  else  {  ensureTyped(t,  assign);  }  }  [CLASS]  TypeCheck  [METHOD]  visitAssign  [RETURN_TYPE]  void  NodeTraversal  t  Node  assign  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  jsType  leftType  objectJsType  rightType  rvalueType  NodeTraversal  t  DiagnosticGroup  ALL_DIAGNOSTICS  CheckLevel  reportMissingOverride  reportUnknownTypes  Var  var  Node  assign  lvalue  object  object2  rightChild  rvalue  FunctionType  functionType  ScopeCreator  scopeCreator  String  OVERRIDING_PROTOTYPE_WITH_NON_OBJECT  functionPrivateName  message  property  property2  JSDocInfo  info  int  noTypeCheckSection  nullCount  typedCount  unknownCount  TypeValidator  validator  ObjectType  type  AbstractCompiler  compiler  JSTypeRegistry  typeRegistry  boolean  enterSection  externs  inExterns  report  reportMissingProperties  typeable  Scope  outerScope  topScope  DiagnosticType  BAD_DELETE  BAD_IMPLEMENTED_TYPE  BIT_OPERATION  CONFLICTING_EXTENDED_TYPE  CONFLICTING_IMPLEMENTED_TYPE  CONSTRUCTOR_NOT_CALLABLE  DETERMINISTIC_TEST  DETERMINISTIC_TEST_NO_RESULT  ENUM_DUP  ENUM_NOT_CONSTANT  EXPECTED_THIS_TYPE  FUNCTION_MASKS_VARIABLE  HIDDEN_INTERFACE_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY_MISMATCH  ILLEGAL_IMPLICIT_CAST  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE  INEXISTENT_ENUM_ELEMENT  INEXISTENT_PROPERTY  INTERFACE_FUNCTION_NOT_EMPTY  INTERFACE_METHOD_OVERRIDE  INVALID_INTERFACE_MEMBER_DECLARATION  MULTIPLE_VAR_DEF  NOT_A_CONSTRUCTOR  NOT_CALLABLE  UNEXPECTED_TOKEN  UNKNOWN_EXPR_TYPE  UNKNOWN_OVERRIDE  UNRESOLVED_TYPE  WRONG_ARGUMENT_COUNT  diagnosticType  InferJSDocInfo  inferJSDocInfo  	projects/Closure66/src/com/google/javascript/jscomp/TypeCheck.java	0.21320071635561041	938	938	2	replace	Node  assign  =  object.getNext();	  Node    assign    =    lvalue.getNext();    	non-compiled	[CE]  orphaned  case	8	None	replace
76	[BUG]  [BUGGY]  Node  assign  =  getJSType(assign.getFirstChild(),  rvalue);  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      JSType  rvalueType  =  getJSType(assign.getLastChild());  Var  var  =  t.getScope().getVar(lvalue.getString());  if  (var  !=  null)  {  if  (var.isTypeInferred())  {  return;  }  }  }        [BUGGY]  Node  assign  =  getJSType(assign.getFirstChild(),  rvalue);  [BUGGY]      Node  rightChild  =  assign.getLastChild();  JSType  rightType  =  getJSType(rightChild);  if  (validator.expectCanAssignTo(  t,  assign,  rightType,  leftType,       "assignment     "))  {  ensureTyped(t,  assign,  rightType);  }  else  {  ensureTyped(t,  assign);  }  }  [CLASS]  TypeCheck  [METHOD]  visitAssign  [RETURN_TYPE]  void  NodeTraversal  t  Node  assign  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  jsType  leftType  objectJsType  rightType  rvalueType  NodeTraversal  t  DiagnosticGroup  ALL_DIAGNOSTICS  CheckLevel  reportMissingOverride  reportUnknownTypes  Var  var  Node  assign  lvalue  object  object2  rightChild  rvalue  FunctionType  functionType  ScopeCreator  scopeCreator  String  OVERRIDING_PROTOTYPE_WITH_NON_OBJECT  functionPrivateName  message  property  property2  JSDocInfo  info  int  noTypeCheckSection  nullCount  typedCount  unknownCount  TypeValidator  validator  ObjectType  type  AbstractCompiler  compiler  JSTypeRegistry  typeRegistry  boolean  enterSection  externs  inExterns  report  reportMissingProperties  typeable  Scope  outerScope  topScope  DiagnosticType  BAD_DELETE  BAD_IMPLEMENTED_TYPE  BIT_OPERATION  CONFLICTING_EXTENDED_TYPE  CONFLICTING_IMPLEMENTED_TYPE  CONSTRUCTOR_NOT_CALLABLE  DETERMINISTIC_TEST  DETERMINISTIC_TEST_NO_RESULT  ENUM_DUP  ENUM_NOT_CONSTANT  EXPECTED_THIS_TYPE  FUNCTION_MASKS_VARIABLE  HIDDEN_INTERFACE_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY_MISMATCH  ILLEGAL_IMPLICIT_CAST  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE  INEXISTENT_ENUM_ELEMENT  INEXISTENT_PROPERTY  INTERFACE_FUNCTION_NOT_EMPTY  INTERFACE_METHOD_OVERRIDE  INVALID_INTERFACE_MEMBER_DECLARATION  MULTIPLE_VAR_DEF  NOT_A_CONSTRUCTOR  NOT_CALLABLE  UNEXPECTED_TOKEN  UNKNOWN_EXPR_TYPE  UNKNOWN_OVERRIDE  UNRESOLVED_TYPE  WRONG_ARGUMENT_COUNT  diagnosticType  InferJSDocInfo  inferJSDocInfo  	projects/Closure66/src/com/google/javascript/jscomp/TypeCheck.java	0.21320071635561041	938	938	2	replace	Node  assign  =  getJSType(assign.getFirstChild(),  rvalue);	  Node    assign    =    getJSType(assign.getFirstChild());    	non-compiled	[CE]  orphaned  case	10	None	replace
77	[BUG]  [BUGGY]  JSType  leftType  =  getJSType(left.getFirstChild());  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      JSType  rvalueType  =  getJSType(assign.getLastChild());  Var  var  =  t.getScope().getVar(lvalue.getString());  if  (var  !=  null)  {  if  (var.isTypeInferred())  {  return;  }  }  }        [BUGGY]  JSType  leftType  =  getJSType(left.getFirstChild());  [BUGGY]      Node  rightChild  =  assign.getLastChild();  JSType  rightType  =  getJSType(rightChild);  if  (validator.expectCanAssignTo(  t,  assign,  rightType,  leftType,       "assignment     "))  {  ensureTyped(t,  assign,  rightType);  }  else  {  ensureTyped(t,  assign);  }  }  [CLASS]  TypeCheck  [METHOD]  visitAssign  [RETURN_TYPE]  void  NodeTraversal  t  Node  assign  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  jsType  leftType  objectJsType  rightType  rvalueType  NodeTraversal  t  DiagnosticGroup  ALL_DIAGNOSTICS  CheckLevel  reportMissingOverride  reportUnknownTypes  Var  var  Node  assign  lvalue  object  object2  rightChild  rvalue  FunctionType  functionType  ScopeCreator  scopeCreator  String  OVERRIDING_PROTOTYPE_WITH_NON_OBJECT  functionPrivateName  message  property  property2  JSDocInfo  info  int  noTypeCheckSection  nullCount  typedCount  unknownCount  TypeValidator  validator  ObjectType  type  AbstractCompiler  compiler  JSTypeRegistry  typeRegistry  boolean  enterSection  externs  inExterns  report  reportMissingProperties  typeable  Scope  outerScope  topScope  DiagnosticType  BAD_DELETE  BAD_IMPLEMENTED_TYPE  BIT_OPERATION  CONFLICTING_EXTENDED_TYPE  CONFLICTING_IMPLEMENTED_TYPE  CONSTRUCTOR_NOT_CALLABLE  DETERMINISTIC_TEST  DETERMINISTIC_TEST_NO_RESULT  ENUM_DUP  ENUM_NOT_CONSTANT  EXPECTED_THIS_TYPE  FUNCTION_MASKS_VARIABLE  HIDDEN_INTERFACE_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY_MISMATCH  ILLEGAL_IMPLICIT_CAST  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE  INEXISTENT_ENUM_ELEMENT  INEXISTENT_PROPERTY  INTERFACE_FUNCTION_NOT_EMPTY  INTERFACE_METHOD_OVERRIDE  INVALID_INTERFACE_MEMBER_DECLARATION  MULTIPLE_VAR_DEF  NOT_A_CONSTRUCTOR  NOT_CALLABLE  UNEXPECTED_TOKEN  UNKNOWN_EXPR_TYPE  UNKNOWN_OVERRIDE  UNRESOLVED_TYPE  WRONG_ARGUMENT_COUNT  diagnosticType  InferJSDocInfo  inferJSDocInfo  	projects/Closure66/src/com/google/javascript/jscomp/TypeCheck.java	0.21320071635561041	938	938	2	replace	JSType  leftType  =  getJSType(left.getFirstChild());	  JSType    leftType    =    getJSType(left);    	non-compiled	[CE]  orphaned  case	22	None	replace
78	[BUG]  [BUGGY]  Node  right  =  object.getFirstChild();  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      JSType  rvalueType  =  getJSType(assign.getLastChild());  Var  var  =  t.getScope().getVar(lvalue.getString());  if  (var  !=  null)  {  if  (var.isTypeInferred())  {  return;  }  }  }        [BUGGY]  Node  right  =  object.getFirstChild();  [BUGGY]      Node  rightChild  =  assign.getLastChild();  JSType  rightType  =  getJSType(rightChild);  if  (validator.expectCanAssignTo(  t,  assign,  rightType,  leftType,       "assignment     "))  {  ensureTyped(t,  assign,  rightType);  }  else  {  ensureTyped(t,  assign);  }  }  [CLASS]  TypeCheck  [METHOD]  visitAssign  [RETURN_TYPE]  void  NodeTraversal  t  Node  assign  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  jsType  leftType  objectJsType  rightType  rvalueType  NodeTraversal  t  DiagnosticGroup  ALL_DIAGNOSTICS  CheckLevel  reportMissingOverride  reportUnknownTypes  Var  var  Node  assign  lvalue  object  object2  rightChild  rvalue  FunctionType  functionType  ScopeCreator  scopeCreator  String  OVERRIDING_PROTOTYPE_WITH_NON_OBJECT  functionPrivateName  message  property  property2  JSDocInfo  info  int  noTypeCheckSection  nullCount  typedCount  unknownCount  TypeValidator  validator  ObjectType  type  AbstractCompiler  compiler  JSTypeRegistry  typeRegistry  boolean  enterSection  externs  inExterns  report  reportMissingProperties  typeable  Scope  outerScope  topScope  DiagnosticType  BAD_DELETE  BAD_IMPLEMENTED_TYPE  BIT_OPERATION  CONFLICTING_EXTENDED_TYPE  CONFLICTING_IMPLEMENTED_TYPE  CONSTRUCTOR_NOT_CALLABLE  DETERMINISTIC_TEST  DETERMINISTIC_TEST_NO_RESULT  ENUM_DUP  ENUM_NOT_CONSTANT  EXPECTED_THIS_TYPE  FUNCTION_MASKS_VARIABLE  HIDDEN_INTERFACE_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY_MISMATCH  ILLEGAL_IMPLICIT_CAST  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE  INEXISTENT_ENUM_ELEMENT  INEXISTENT_PROPERTY  INTERFACE_FUNCTION_NOT_EMPTY  INTERFACE_METHOD_OVERRIDE  INVALID_INTERFACE_MEMBER_DECLARATION  MULTIPLE_VAR_DEF  NOT_A_CONSTRUCTOR  NOT_CALLABLE  UNEXPECTED_TOKEN  UNKNOWN_EXPR_TYPE  UNKNOWN_OVERRIDE  UNRESOLVED_TYPE  WRONG_ARGUMENT_COUNT  diagnosticType  InferJSDocInfo  inferJSDocInfo  	projects/Closure66/src/com/google/javascript/jscomp/TypeCheck.java	0.21320071635561041	938	938	2	replace	Node  right  =  object.getFirstChild();	  Node    right    =    assign.getFirstChild();    	non-compiled	[CE]  orphaned  case	12	None	replace
79	[BUG]  [BUGGY]  Node  right  =  getJSType(assign.getFirstChild());  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      JSType  rvalueType  =  getJSType(assign.getLastChild());  Var  var  =  t.getScope().getVar(lvalue.getString());  if  (var  !=  null)  {  if  (var.isTypeInferred())  {  return;  }  }  }        [BUGGY]  Node  right  =  getJSType(assign.getFirstChild());  [BUGGY]      Node  rightChild  =  assign.getLastChild();  JSType  rightType  =  getJSType(rightChild);  if  (validator.expectCanAssignTo(  t,  assign,  rightType,  leftType,       "assignment     "))  {  ensureTyped(t,  assign,  rightType);  }  else  {  ensureTyped(t,  assign);  }  }  [CLASS]  TypeCheck  [METHOD]  visitAssign  [RETURN_TYPE]  void  NodeTraversal  t  Node  assign  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  jsType  leftType  objectJsType  rightType  rvalueType  NodeTraversal  t  DiagnosticGroup  ALL_DIAGNOSTICS  CheckLevel  reportMissingOverride  reportUnknownTypes  Var  var  Node  assign  lvalue  object  object2  rightChild  rvalue  FunctionType  functionType  ScopeCreator  scopeCreator  String  OVERRIDING_PROTOTYPE_WITH_NON_OBJECT  functionPrivateName  message  property  property2  JSDocInfo  info  int  noTypeCheckSection  nullCount  typedCount  unknownCount  TypeValidator  validator  ObjectType  type  AbstractCompiler  compiler  JSTypeRegistry  typeRegistry  boolean  enterSection  externs  inExterns  report  reportMissingProperties  typeable  Scope  outerScope  topScope  DiagnosticType  BAD_DELETE  BAD_IMPLEMENTED_TYPE  BIT_OPERATION  CONFLICTING_EXTENDED_TYPE  CONFLICTING_IMPLEMENTED_TYPE  CONSTRUCTOR_NOT_CALLABLE  DETERMINISTIC_TEST  DETERMINISTIC_TEST_NO_RESULT  ENUM_DUP  ENUM_NOT_CONSTANT  EXPECTED_THIS_TYPE  FUNCTION_MASKS_VARIABLE  HIDDEN_INTERFACE_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY_MISMATCH  ILLEGAL_IMPLICIT_CAST  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE  INEXISTENT_ENUM_ELEMENT  INEXISTENT_PROPERTY  INTERFACE_FUNCTION_NOT_EMPTY  INTERFACE_METHOD_OVERRIDE  INVALID_INTERFACE_MEMBER_DECLARATION  MULTIPLE_VAR_DEF  NOT_A_CONSTRUCTOR  NOT_CALLABLE  UNEXPECTED_TOKEN  UNKNOWN_EXPR_TYPE  UNKNOWN_OVERRIDE  UNRESOLVED_TYPE  WRONG_ARGUMENT_COUNT  diagnosticType  InferJSDocInfo  inferJSDocInfo  	projects/Closure66/src/com/google/javascript/jscomp/TypeCheck.java	0.21320071635561041	938	938	2	replace	Node  right  =  getJSType(assign.getFirstChild());	  Node    right    =    assign.getFirstChild();    	non-compiled	[CE]  orphaned  case	12	None	replace
80	[BUG]  [BUGGY]  JSType  leftType  =  getJSType(assign.getFirstChild(),  object);  [CE]  orphaned  case  [FE]            AssertionFailedError      [CONTEXT]      JSType  rvalueType  =  getJSType(assign.getLastChild());  Var  var  =  t.getScope().getVar(lvalue.getString());  if  (var  !=  null)  {  if  (var.isTypeInferred())  {  return;  }  }  }        [BUGGY]  JSType  leftType  =  getJSType(assign.getFirstChild(),  object);  [BUGGY]      Node  rightChild  =  assign.getLastChild();  JSType  rightType  =  getJSType(rightChild);  if  (validator.expectCanAssignTo(  t,  assign,  rightType,  leftType,       "assignment     "))  {  ensureTyped(t,  assign,  rightType);  }  else  {  ensureTyped(t,  assign);  }  }  [CLASS]  TypeCheck  [METHOD]  visitAssign  [RETURN_TYPE]  void  NodeTraversal  t  Node  assign  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  jsType  leftType  objectJsType  rightType  rvalueType  NodeTraversal  t  DiagnosticGroup  ALL_DIAGNOSTICS  CheckLevel  reportMissingOverride  reportUnknownTypes  Var  var  Node  assign  lvalue  object  object2  rightChild  rvalue  FunctionType  functionType  ScopeCreator  scopeCreator  String  OVERRIDING_PROTOTYPE_WITH_NON_OBJECT  functionPrivateName  message  property  property2  JSDocInfo  info  int  noTypeCheckSection  nullCount  typedCount  unknownCount  TypeValidator  validator  ObjectType  type  AbstractCompiler  compiler  JSTypeRegistry  typeRegistry  boolean  enterSection  externs  inExterns  report  reportMissingProperties  typeable  Scope  outerScope  topScope  DiagnosticType  BAD_DELETE  BAD_IMPLEMENTED_TYPE  BIT_OPERATION  CONFLICTING_EXTENDED_TYPE  CONFLICTING_IMPLEMENTED_TYPE  CONSTRUCTOR_NOT_CALLABLE  DETERMINISTIC_TEST  DETERMINISTIC_TEST_NO_RESULT  ENUM_DUP  ENUM_NOT_CONSTANT  EXPECTED_THIS_TYPE  FUNCTION_MASKS_VARIABLE  HIDDEN_INTERFACE_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY_MISMATCH  ILLEGAL_IMPLICIT_CAST  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE  INEXISTENT_ENUM_ELEMENT  INEXISTENT_PROPERTY  INTERFACE_FUNCTION_NOT_EMPTY  INTERFACE_METHOD_OVERRIDE  INVALID_INTERFACE_MEMBER_DECLARATION  MULTIPLE_VAR_DEF  NOT_A_CONSTRUCTOR  NOT_CALLABLE  UNEXPECTED_TOKEN  UNKNOWN_EXPR_TYPE  UNKNOWN_OVERRIDE  UNRESOLVED_TYPE  WRONG_ARGUMENT_COUNT  diagnosticType  InferJSDocInfo  inferJSDocInfo  	projects/Closure66/src/com/google/javascript/jscomp/TypeCheck.java	0.21320071635561041	938	938	2	replace	JSType  leftType  =  getJSType(assign.getFirstChild(),  object);	  JSType    leftType    =    getJSType(assign.getFirstChild(),    assign);    	non-compiled	[CE]  orphaned  case	4	None	replace
81	[BUG]  [BUGGY]  JSType  leftType  =  getJSType(assign.getFirstChild(),  var);  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      JSType  rvalueType  =  getJSType(assign.getLastChild());  Var  var  =  t.getScope().getVar(lvalue.getString());  if  (var  !=  null)  {  if  (var.isTypeInferred())  {  return;  }  }  }        [BUGGY]  JSType  leftType  =  getJSType(assign.getFirstChild(),  var);  [BUGGY]      Node  rightChild  =  assign.getLastChild();  JSType  rightType  =  getJSType(rightChild);  if  (validator.expectCanAssignTo(  t,  assign,  rightType,  leftType,       "assignment     "))  {  ensureTyped(t,  assign,  rightType);  }  else  {  ensureTyped(t,  assign);  }  }  [CLASS]  TypeCheck  [METHOD]  visitAssign  [RETURN_TYPE]  void  NodeTraversal  t  Node  assign  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  jsType  leftType  objectJsType  rightType  rvalueType  NodeTraversal  t  DiagnosticGroup  ALL_DIAGNOSTICS  CheckLevel  reportMissingOverride  reportUnknownTypes  Var  var  Node  assign  lvalue  object  object2  rightChild  rvalue  FunctionType  functionType  ScopeCreator  scopeCreator  String  OVERRIDING_PROTOTYPE_WITH_NON_OBJECT  functionPrivateName  message  property  property2  JSDocInfo  info  int  noTypeCheckSection  nullCount  typedCount  unknownCount  TypeValidator  validator  ObjectType  type  AbstractCompiler  compiler  JSTypeRegistry  typeRegistry  boolean  enterSection  externs  inExterns  report  reportMissingProperties  typeable  Scope  outerScope  topScope  DiagnosticType  BAD_DELETE  BAD_IMPLEMENTED_TYPE  BIT_OPERATION  CONFLICTING_EXTENDED_TYPE  CONFLICTING_IMPLEMENTED_TYPE  CONSTRUCTOR_NOT_CALLABLE  DETERMINISTIC_TEST  DETERMINISTIC_TEST_NO_RESULT  ENUM_DUP  ENUM_NOT_CONSTANT  EXPECTED_THIS_TYPE  FUNCTION_MASKS_VARIABLE  HIDDEN_INTERFACE_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY_MISMATCH  ILLEGAL_IMPLICIT_CAST  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE  INEXISTENT_ENUM_ELEMENT  INEXISTENT_PROPERTY  INTERFACE_FUNCTION_NOT_EMPTY  INTERFACE_METHOD_OVERRIDE  INVALID_INTERFACE_MEMBER_DECLARATION  MULTIPLE_VAR_DEF  NOT_A_CONSTRUCTOR  NOT_CALLABLE  UNEXPECTED_TOKEN  UNKNOWN_EXPR_TYPE  UNKNOWN_OVERRIDE  UNRESOLVED_TYPE  WRONG_ARGUMENT_COUNT  diagnosticType  InferJSDocInfo  inferJSDocInfo  	projects/Closure66/src/com/google/javascript/jscomp/TypeCheck.java	0.21320071635561041	938	938	2	replace	JSType  leftType  =  getJSType(assign.getFirstChild(),  var);	  JSType    leftType    =    getJSType(assign.getFirstChild(),    assign);    	non-compiled	[CE]  orphaned  case	4	None	replace
82	[BUG]  [BUGGY]  Node  rightType  =  t.getScope().getVar(lvalue.getString(),  assign);  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      JSType  rvalueType  =  getJSType(assign.getLastChild());  Var  var  =  t.getScope().getVar(lvalue.getString());  if  (var  !=  null)  {  if  (var.isTypeInferred())  {  return;  }  }  }        [BUGGY]  Node  rightType  =  t.getScope().getVar(lvalue.getString(),  assign);  [BUGGY]      Node  rightChild  =  assign.getLastChild();  JSType  rightType  =  getJSType(rightChild);  if  (validator.expectCanAssignTo(  t,  assign,  rightType,  leftType,       "assignment     "))  {  ensureTyped(t,  assign,  rightType);  }  else  {  ensureTyped(t,  assign);  }  }  [CLASS]  TypeCheck  [METHOD]  visitAssign  [RETURN_TYPE]  void  NodeTraversal  t  Node  assign  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  jsType  leftType  objectJsType  rightType  rvalueType  NodeTraversal  t  DiagnosticGroup  ALL_DIAGNOSTICS  CheckLevel  reportMissingOverride  reportUnknownTypes  Var  var  Node  assign  lvalue  object  object2  rightChild  rvalue  FunctionType  functionType  ScopeCreator  scopeCreator  String  OVERRIDING_PROTOTYPE_WITH_NON_OBJECT  functionPrivateName  message  property  property2  JSDocInfo  info  int  noTypeCheckSection  nullCount  typedCount  unknownCount  TypeValidator  validator  ObjectType  type  AbstractCompiler  compiler  JSTypeRegistry  typeRegistry  boolean  enterSection  externs  inExterns  report  reportMissingProperties  typeable  Scope  outerScope  topScope  DiagnosticType  BAD_DELETE  BAD_IMPLEMENTED_TYPE  BIT_OPERATION  CONFLICTING_EXTENDED_TYPE  CONFLICTING_IMPLEMENTED_TYPE  CONSTRUCTOR_NOT_CALLABLE  DETERMINISTIC_TEST  DETERMINISTIC_TEST_NO_RESULT  ENUM_DUP  ENUM_NOT_CONSTANT  EXPECTED_THIS_TYPE  FUNCTION_MASKS_VARIABLE  HIDDEN_INTERFACE_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY_MISMATCH  ILLEGAL_IMPLICIT_CAST  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE  INEXISTENT_ENUM_ELEMENT  INEXISTENT_PROPERTY  INTERFACE_FUNCTION_NOT_EMPTY  INTERFACE_METHOD_OVERRIDE  INVALID_INTERFACE_MEMBER_DECLARATION  MULTIPLE_VAR_DEF  NOT_A_CONSTRUCTOR  NOT_CALLABLE  UNEXPECTED_TOKEN  UNKNOWN_EXPR_TYPE  UNKNOWN_OVERRIDE  UNRESOLVED_TYPE  WRONG_ARGUMENT_COUNT  diagnosticType  InferJSDocInfo  inferJSDocInfo  	projects/Closure66/src/com/google/javascript/jscomp/TypeCheck.java	0.21320071635561041	938	938	2	replace	Node  rightType  =  t.getScope().getVar(lvalue.getString(),  assign);	  Node    rightType    =    t.getScope().getVar(lvalue.getString());    	non-compiled	[CE]  orphaned  case	20	None	replace
83	[BUG]  [BUGGY]  Node  rightType  =  t.getScope().getVar(lvalue.getString(),  object);  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      JSType  rvalueType  =  getJSType(assign.getLastChild());  Var  var  =  t.getScope().getVar(lvalue.getString());  if  (var  !=  null)  {  if  (var.isTypeInferred())  {  return;  }  }  }        [BUGGY]  Node  rightType  =  t.getScope().getVar(lvalue.getString(),  object);  [BUGGY]      Node  rightChild  =  assign.getLastChild();  JSType  rightType  =  getJSType(rightChild);  if  (validator.expectCanAssignTo(  t,  assign,  rightType,  leftType,       "assignment     "))  {  ensureTyped(t,  assign,  rightType);  }  else  {  ensureTyped(t,  assign);  }  }  [CLASS]  TypeCheck  [METHOD]  visitAssign  [RETURN_TYPE]  void  NodeTraversal  t  Node  assign  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  jsType  leftType  objectJsType  rightType  rvalueType  NodeTraversal  t  DiagnosticGroup  ALL_DIAGNOSTICS  CheckLevel  reportMissingOverride  reportUnknownTypes  Var  var  Node  assign  lvalue  object  object2  rightChild  rvalue  FunctionType  functionType  ScopeCreator  scopeCreator  String  OVERRIDING_PROTOTYPE_WITH_NON_OBJECT  functionPrivateName  message  property  property2  JSDocInfo  info  int  noTypeCheckSection  nullCount  typedCount  unknownCount  TypeValidator  validator  ObjectType  type  AbstractCompiler  compiler  JSTypeRegistry  typeRegistry  boolean  enterSection  externs  inExterns  report  reportMissingProperties  typeable  Scope  outerScope  topScope  DiagnosticType  BAD_DELETE  BAD_IMPLEMENTED_TYPE  BIT_OPERATION  CONFLICTING_EXTENDED_TYPE  CONFLICTING_IMPLEMENTED_TYPE  CONSTRUCTOR_NOT_CALLABLE  DETERMINISTIC_TEST  DETERMINISTIC_TEST_NO_RESULT  ENUM_DUP  ENUM_NOT_CONSTANT  EXPECTED_THIS_TYPE  FUNCTION_MASKS_VARIABLE  HIDDEN_INTERFACE_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY_MISMATCH  ILLEGAL_IMPLICIT_CAST  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE  INEXISTENT_ENUM_ELEMENT  INEXISTENT_PROPERTY  INTERFACE_FUNCTION_NOT_EMPTY  INTERFACE_METHOD_OVERRIDE  INVALID_INTERFACE_MEMBER_DECLARATION  MULTIPLE_VAR_DEF  NOT_A_CONSTRUCTOR  NOT_CALLABLE  UNEXPECTED_TOKEN  UNKNOWN_EXPR_TYPE  UNKNOWN_OVERRIDE  UNRESOLVED_TYPE  WRONG_ARGUMENT_COUNT  diagnosticType  InferJSDocInfo  inferJSDocInfo  	projects/Closure66/src/com/google/javascript/jscomp/TypeCheck.java	0.21320071635561041	938	938	2	replace	Node  rightType  =  t.getScope().getVar(lvalue.getString(),  object);	  Node    rightType    =    t.getScope().getVar(lvalue.getString());    	non-compiled	[CE]  orphaned  case	20	None	replace
84	[BUG]  [BUGGY]  Preconditions.checkState(assign.getType()  ==  Token.EXPR_RESULT);  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      JSType  rvalueType  =  getJSType(assign.getLastChild());  Var  var  =  t.getScope().getVar(lvalue.getString());  if  (var  !=  null)  {  if  (var.isTypeInferred())  {  return;  }  }  }        [BUGGY]  Preconditions.checkState(assign.getType()  ==  Token.EXPR_RESULT);  [BUGGY]      Node  rightChild  =  assign.getLastChild();  JSType  rightType  =  getJSType(rightChild);  if  (validator.expectCanAssignTo(  t,  assign,  rightType,  leftType,       "assignment     "))  {  ensureTyped(t,  assign,  rightType);  }  else  {  ensureTyped(t,  assign);  }  }  [CLASS]  TypeCheck  [METHOD]  visitAssign  [RETURN_TYPE]  void  NodeTraversal  t  Node  assign  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  jsType  leftType  objectJsType  rightType  rvalueType  NodeTraversal  t  DiagnosticGroup  ALL_DIAGNOSTICS  CheckLevel  reportMissingOverride  reportUnknownTypes  Var  var  Node  assign  lvalue  object  object2  rightChild  rvalue  FunctionType  functionType  ScopeCreator  scopeCreator  String  OVERRIDING_PROTOTYPE_WITH_NON_OBJECT  functionPrivateName  message  property  property2  JSDocInfo  info  int  noTypeCheckSection  nullCount  typedCount  unknownCount  TypeValidator  validator  ObjectType  type  AbstractCompiler  compiler  JSTypeRegistry  typeRegistry  boolean  enterSection  externs  inExterns  report  reportMissingProperties  typeable  Scope  outerScope  topScope  DiagnosticType  BAD_DELETE  BAD_IMPLEMENTED_TYPE  BIT_OPERATION  CONFLICTING_EXTENDED_TYPE  CONFLICTING_IMPLEMENTED_TYPE  CONSTRUCTOR_NOT_CALLABLE  DETERMINISTIC_TEST  DETERMINISTIC_TEST_NO_RESULT  ENUM_DUP  ENUM_NOT_CONSTANT  EXPECTED_THIS_TYPE  FUNCTION_MASKS_VARIABLE  HIDDEN_INTERFACE_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY_MISMATCH  ILLEGAL_IMPLICIT_CAST  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE  INEXISTENT_ENUM_ELEMENT  INEXISTENT_PROPERTY  INTERFACE_FUNCTION_NOT_EMPTY  INTERFACE_METHOD_OVERRIDE  INVALID_INTERFACE_MEMBER_DECLARATION  MULTIPLE_VAR_DEF  NOT_A_CONSTRUCTOR  NOT_CALLABLE  UNEXPECTED_TOKEN  UNKNOWN_EXPR_TYPE  UNKNOWN_OVERRIDE  UNRESOLVED_TYPE  WRONG_ARGUMENT_COUNT  diagnosticType  InferJSDocInfo  inferJSDocInfo  	projects/Closure66/src/com/google/javascript/jscomp/TypeCheck.java	0.21320071635561041	938	938	2	replace	Preconditions.checkState(assign.getType()  ==  Token.EXPR_RESULT);	  Preconditions.checkState(assign.getType()    ==    Token.ASSIGN);    	non-compiled	[CE]  orphaned  case	11	None	replace
85	[BUG]  [BUGGY]  Node  rightType  =  assign.getRightChild();  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      JSType  rvalueType  =  getJSType(assign.getLastChild());  Var  var  =  t.getScope().getVar(lvalue.getString());  if  (var  !=  null)  {  if  (var.isTypeInferred())  {  return;  }  }  }        [BUGGY]  Node  rightType  =  assign.getRightChild();  [BUGGY]      Node  rightChild  =  assign.getLastChild();  JSType  rightType  =  getJSType(rightChild);  if  (validator.expectCanAssignTo(  t,  assign,  rightType,  leftType,       "assignment     "))  {  ensureTyped(t,  assign,  rightType);  }  else  {  ensureTyped(t,  assign);  }  }  [CLASS]  TypeCheck  [METHOD]  visitAssign  [RETURN_TYPE]  void  NodeTraversal  t  Node  assign  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  jsType  leftType  objectJsType  rightType  rvalueType  NodeTraversal  t  DiagnosticGroup  ALL_DIAGNOSTICS  CheckLevel  reportMissingOverride  reportUnknownTypes  Var  var  Node  assign  lvalue  object  object2  rightChild  rvalue  FunctionType  functionType  ScopeCreator  scopeCreator  String  OVERRIDING_PROTOTYPE_WITH_NON_OBJECT  functionPrivateName  message  property  property2  JSDocInfo  info  int  noTypeCheckSection  nullCount  typedCount  unknownCount  TypeValidator  validator  ObjectType  type  AbstractCompiler  compiler  JSTypeRegistry  typeRegistry  boolean  enterSection  externs  inExterns  report  reportMissingProperties  typeable  Scope  outerScope  topScope  DiagnosticType  BAD_DELETE  BAD_IMPLEMENTED_TYPE  BIT_OPERATION  CONFLICTING_EXTENDED_TYPE  CONFLICTING_IMPLEMENTED_TYPE  CONSTRUCTOR_NOT_CALLABLE  DETERMINISTIC_TEST  DETERMINISTIC_TEST_NO_RESULT  ENUM_DUP  ENUM_NOT_CONSTANT  EXPECTED_THIS_TYPE  FUNCTION_MASKS_VARIABLE  HIDDEN_INTERFACE_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY_MISMATCH  ILLEGAL_IMPLICIT_CAST  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE  INEXISTENT_ENUM_ELEMENT  INEXISTENT_PROPERTY  INTERFACE_FUNCTION_NOT_EMPTY  INTERFACE_METHOD_OVERRIDE  INVALID_INTERFACE_MEMBER_DECLARATION  MULTIPLE_VAR_DEF  NOT_A_CONSTRUCTOR  NOT_CALLABLE  UNEXPECTED_TOKEN  UNKNOWN_EXPR_TYPE  UNKNOWN_OVERRIDE  UNRESOLVED_TYPE  WRONG_ARGUMENT_COUNT  diagnosticType  InferJSDocInfo  inferJSDocInfo  	projects/Closure66/src/com/google/javascript/jscomp/TypeCheck.java	0.21320071635561041	938	938	2	replace	Node  rightType  =  assign.getRightChild();	  Node    rightType    =    assign.getFirstChild();    	non-compiled	[CE]  orphaned  case	23	None	replace
86	[BUG]  [BUGGY]  Node  rightType  =  assign.getNext();  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      JSType  rvalueType  =  getJSType(assign.getLastChild());  Var  var  =  t.getScope().getVar(lvalue.getString());  if  (var  !=  null)  {  if  (var.isTypeInferred())  {  return;  }  }  }        [BUGGY]  Node  rightType  =  assign.getNext();  [BUGGY]      Node  rightChild  =  assign.getLastChild();  JSType  rightType  =  getJSType(rightChild);  if  (validator.expectCanAssignTo(  t,  assign,  rightType,  leftType,       "assignment     "))  {  ensureTyped(t,  assign,  rightType);  }  else  {  ensureTyped(t,  assign);  }  }  [CLASS]  TypeCheck  [METHOD]  visitAssign  [RETURN_TYPE]  void  NodeTraversal  t  Node  assign  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  jsType  leftType  objectJsType  rightType  rvalueType  NodeTraversal  t  DiagnosticGroup  ALL_DIAGNOSTICS  CheckLevel  reportMissingOverride  reportUnknownTypes  Var  var  Node  assign  lvalue  object  object2  rightChild  rvalue  FunctionType  functionType  ScopeCreator  scopeCreator  String  OVERRIDING_PROTOTYPE_WITH_NON_OBJECT  functionPrivateName  message  property  property2  JSDocInfo  info  int  noTypeCheckSection  nullCount  typedCount  unknownCount  TypeValidator  validator  ObjectType  type  AbstractCompiler  compiler  JSTypeRegistry  typeRegistry  boolean  enterSection  externs  inExterns  report  reportMissingProperties  typeable  Scope  outerScope  topScope  DiagnosticType  BAD_DELETE  BAD_IMPLEMENTED_TYPE  BIT_OPERATION  CONFLICTING_EXTENDED_TYPE  CONFLICTING_IMPLEMENTED_TYPE  CONSTRUCTOR_NOT_CALLABLE  DETERMINISTIC_TEST  DETERMINISTIC_TEST_NO_RESULT  ENUM_DUP  ENUM_NOT_CONSTANT  EXPECTED_THIS_TYPE  FUNCTION_MASKS_VARIABLE  HIDDEN_INTERFACE_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY_MISMATCH  ILLEGAL_IMPLICIT_CAST  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE  INEXISTENT_ENUM_ELEMENT  INEXISTENT_PROPERTY  INTERFACE_FUNCTION_NOT_EMPTY  INTERFACE_METHOD_OVERRIDE  INVALID_INTERFACE_MEMBER_DECLARATION  MULTIPLE_VAR_DEF  NOT_A_CONSTRUCTOR  NOT_CALLABLE  UNEXPECTED_TOKEN  UNKNOWN_EXPR_TYPE  UNKNOWN_OVERRIDE  UNRESOLVED_TYPE  WRONG_ARGUMENT_COUNT  diagnosticType  InferJSDocInfo  inferJSDocInfo  	projects/Closure66/src/com/google/javascript/jscomp/TypeCheck.java	0.21320071635561041	938	938	2	replace	Node  rightType  =  assign.getNext();	  Node    rightType    =    assign.getFirstChild();    	non-compiled	[CE]  orphaned  case	23	None	replace
87	[BUG]  [BUGGY]  JSType  leftType  =  getJSType(lvalue.getFirstChild(),  assign.getLastChild());  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      JSType  rvalueType  =  getJSType(assign.getLastChild());  Var  var  =  t.getScope().getVar(lvalue.getString());  if  (var  !=  null)  {  if  (var.isTypeInferred())  {  return;  }  }  }        [BUGGY]  JSType  leftType  =  getJSType(lvalue.getFirstChild(),  assign.getLastChild());  [BUGGY]      Node  rightChild  =  assign.getLastChild();  JSType  rightType  =  getJSType(rightChild);  if  (validator.expectCanAssignTo(  t,  assign,  rightType,  leftType,       "assignment     "))  {  ensureTyped(t,  assign,  rightType);  }  else  {  ensureTyped(t,  assign);  }  }  [CLASS]  TypeCheck  [METHOD]  visitAssign  [RETURN_TYPE]  void  NodeTraversal  t  Node  assign  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  jsType  leftType  objectJsType  rightType  rvalueType  NodeTraversal  t  DiagnosticGroup  ALL_DIAGNOSTICS  CheckLevel  reportMissingOverride  reportUnknownTypes  Var  var  Node  assign  lvalue  object  object2  rightChild  rvalue  FunctionType  functionType  ScopeCreator  scopeCreator  String  OVERRIDING_PROTOTYPE_WITH_NON_OBJECT  functionPrivateName  message  property  property2  JSDocInfo  info  int  noTypeCheckSection  nullCount  typedCount  unknownCount  TypeValidator  validator  ObjectType  type  AbstractCompiler  compiler  JSTypeRegistry  typeRegistry  boolean  enterSection  externs  inExterns  report  reportMissingProperties  typeable  Scope  outerScope  topScope  DiagnosticType  BAD_DELETE  BAD_IMPLEMENTED_TYPE  BIT_OPERATION  CONFLICTING_EXTENDED_TYPE  CONFLICTING_IMPLEMENTED_TYPE  CONSTRUCTOR_NOT_CALLABLE  DETERMINISTIC_TEST  DETERMINISTIC_TEST_NO_RESULT  ENUM_DUP  ENUM_NOT_CONSTANT  EXPECTED_THIS_TYPE  FUNCTION_MASKS_VARIABLE  HIDDEN_INTERFACE_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY_MISMATCH  ILLEGAL_IMPLICIT_CAST  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE  INEXISTENT_ENUM_ELEMENT  INEXISTENT_PROPERTY  INTERFACE_FUNCTION_NOT_EMPTY  INTERFACE_METHOD_OVERRIDE  INVALID_INTERFACE_MEMBER_DECLARATION  MULTIPLE_VAR_DEF  NOT_A_CONSTRUCTOR  NOT_CALLABLE  UNEXPECTED_TOKEN  UNKNOWN_EXPR_TYPE  UNKNOWN_OVERRIDE  UNRESOLVED_TYPE  WRONG_ARGUMENT_COUNT  diagnosticType  InferJSDocInfo  inferJSDocInfo  	projects/Closure66/src/com/google/javascript/jscomp/TypeCheck.java	0.21320071635561041	938	938	2	replace	JSType  leftType  =  getJSType(lvalue.getFirstChild(),  assign.getLastChild());	  JSType    leftType    =    getJSType(assign.getFirstChild(),    assign.getLastChild());    	non-compiled	[CE]  orphaned  case	5	None	replace
88	[BUG]  [BUGGY]  JSType  leftType  =  getJSType(attribute.getFirstChild(),  assign.getLastChild());  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      JSType  rvalueType  =  getJSType(assign.getLastChild());  Var  var  =  t.getScope().getVar(lvalue.getString());  if  (var  !=  null)  {  if  (var.isTypeInferred())  {  return;  }  }  }        [BUGGY]  JSType  leftType  =  getJSType(attribute.getFirstChild(),  assign.getLastChild());  [BUGGY]      Node  rightChild  =  assign.getLastChild();  JSType  rightType  =  getJSType(rightChild);  if  (validator.expectCanAssignTo(  t,  assign,  rightType,  leftType,       "assignment     "))  {  ensureTyped(t,  assign,  rightType);  }  else  {  ensureTyped(t,  assign);  }  }  [CLASS]  TypeCheck  [METHOD]  visitAssign  [RETURN_TYPE]  void  NodeTraversal  t  Node  assign  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  jsType  leftType  objectJsType  rightType  rvalueType  NodeTraversal  t  DiagnosticGroup  ALL_DIAGNOSTICS  CheckLevel  reportMissingOverride  reportUnknownTypes  Var  var  Node  assign  lvalue  object  object2  rightChild  rvalue  FunctionType  functionType  ScopeCreator  scopeCreator  String  OVERRIDING_PROTOTYPE_WITH_NON_OBJECT  functionPrivateName  message  property  property2  JSDocInfo  info  int  noTypeCheckSection  nullCount  typedCount  unknownCount  TypeValidator  validator  ObjectType  type  AbstractCompiler  compiler  JSTypeRegistry  typeRegistry  boolean  enterSection  externs  inExterns  report  reportMissingProperties  typeable  Scope  outerScope  topScope  DiagnosticType  BAD_DELETE  BAD_IMPLEMENTED_TYPE  BIT_OPERATION  CONFLICTING_EXTENDED_TYPE  CONFLICTING_IMPLEMENTED_TYPE  CONSTRUCTOR_NOT_CALLABLE  DETERMINISTIC_TEST  DETERMINISTIC_TEST_NO_RESULT  ENUM_DUP  ENUM_NOT_CONSTANT  EXPECTED_THIS_TYPE  FUNCTION_MASKS_VARIABLE  HIDDEN_INTERFACE_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY_MISMATCH  ILLEGAL_IMPLICIT_CAST  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE  INEXISTENT_ENUM_ELEMENT  INEXISTENT_PROPERTY  INTERFACE_FUNCTION_NOT_EMPTY  INTERFACE_METHOD_OVERRIDE  INVALID_INTERFACE_MEMBER_DECLARATION  MULTIPLE_VAR_DEF  NOT_A_CONSTRUCTOR  NOT_CALLABLE  UNEXPECTED_TOKEN  UNKNOWN_EXPR_TYPE  UNKNOWN_OVERRIDE  UNRESOLVED_TYPE  WRONG_ARGUMENT_COUNT  diagnosticType  InferJSDocInfo  inferJSDocInfo  	projects/Closure66/src/com/google/javascript/jscomp/TypeCheck.java	0.21320071635561041	938	938	2	replace	JSType  leftType  =  getJSType(attribute.getFirstChild(),  assign.getLastChild());	  JSType    leftType    =    getJSType(assign.getFirstChild(),    assign.getLastChild());    	non-compiled	[CE]  orphaned  case	5	None	replace
89	[BUG]  [BUGGY]  JSType  rightType  =  getJSType(assign);  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      JSType  rvalueType  =  getJSType(assign.getLastChild());  Var  var  =  t.getScope().getVar(lvalue.getString());  if  (var  !=  null)  {  if  (var.isTypeInferred())  {  return;  }  }  }        [BUGGY]  JSType  rightType  =  getJSType(assign);  [BUGGY]      Node  rightChild  =  assign.getLastChild();  JSType  rightType  =  getJSType(rightChild);  if  (validator.expectCanAssignTo(  t,  assign,  rightType,  leftType,       "assignment     "))  {  ensureTyped(t,  assign,  rightType);  }  else  {  ensureTyped(t,  assign);  }  }  [CLASS]  TypeCheck  [METHOD]  visitAssign  [RETURN_TYPE]  void  NodeTraversal  t  Node  assign  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  jsType  leftType  objectJsType  rightType  rvalueType  NodeTraversal  t  DiagnosticGroup  ALL_DIAGNOSTICS  CheckLevel  reportMissingOverride  reportUnknownTypes  Var  var  Node  assign  lvalue  object  object2  rightChild  rvalue  FunctionType  functionType  ScopeCreator  scopeCreator  String  OVERRIDING_PROTOTYPE_WITH_NON_OBJECT  functionPrivateName  message  property  property2  JSDocInfo  info  int  noTypeCheckSection  nullCount  typedCount  unknownCount  TypeValidator  validator  ObjectType  type  AbstractCompiler  compiler  JSTypeRegistry  typeRegistry  boolean  enterSection  externs  inExterns  report  reportMissingProperties  typeable  Scope  outerScope  topScope  DiagnosticType  BAD_DELETE  BAD_IMPLEMENTED_TYPE  BIT_OPERATION  CONFLICTING_EXTENDED_TYPE  CONFLICTING_IMPLEMENTED_TYPE  CONSTRUCTOR_NOT_CALLABLE  DETERMINISTIC_TEST  DETERMINISTIC_TEST_NO_RESULT  ENUM_DUP  ENUM_NOT_CONSTANT  EXPECTED_THIS_TYPE  FUNCTION_MASKS_VARIABLE  HIDDEN_INTERFACE_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY_MISMATCH  ILLEGAL_IMPLICIT_CAST  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE  INEXISTENT_ENUM_ELEMENT  INEXISTENT_PROPERTY  INTERFACE_FUNCTION_NOT_EMPTY  INTERFACE_METHOD_OVERRIDE  INVALID_INTERFACE_MEMBER_DECLARATION  MULTIPLE_VAR_DEF  NOT_A_CONSTRUCTOR  NOT_CALLABLE  UNEXPECTED_TOKEN  UNKNOWN_EXPR_TYPE  UNKNOWN_OVERRIDE  UNRESOLVED_TYPE  WRONG_ARGUMENT_COUNT  diagnosticType  InferJSDocInfo  inferJSDocInfo  	projects/Closure66/src/com/google/javascript/jscomp/TypeCheck.java	0.21320071635561041	938	938	2	replace	JSType  rightType  =  getJSType(assign);	  JSType    leftType    =    getJSType(rightChild);    	non-compiled	[CE]  orphaned  case	24	None	replace
90	[BUG]  [BUGGY]  Node  leftType  =  getJSType(assign.getFirstChild());  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      JSType  rvalueType  =  getJSType(assign.getLastChild());  Var  var  =  t.getScope().getVar(lvalue.getString());  if  (var  !=  null)  {  if  (var.isTypeInferred())  {  return;  }  }  }        [BUGGY]  Node  leftType  =  getJSType(assign.getFirstChild());  [BUGGY]      Node  rightChild  =  assign.getLastChild();  JSType  rightType  =  getJSType(rightChild);  if  (validator.expectCanAssignTo(  t,  assign,  rightType,  leftType,       "assignment     "))  {  ensureTyped(t,  assign,  rightType);  }  else  {  ensureTyped(t,  assign);  }  }  [CLASS]  TypeCheck  [METHOD]  visitAssign  [RETURN_TYPE]  void  NodeTraversal  t  Node  assign  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  jsType  leftType  objectJsType  rightType  rvalueType  NodeTraversal  t  DiagnosticGroup  ALL_DIAGNOSTICS  CheckLevel  reportMissingOverride  reportUnknownTypes  Var  var  Node  assign  lvalue  object  object2  rightChild  rvalue  FunctionType  functionType  ScopeCreator  scopeCreator  String  OVERRIDING_PROTOTYPE_WITH_NON_OBJECT  functionPrivateName  message  property  property2  JSDocInfo  info  int  noTypeCheckSection  nullCount  typedCount  unknownCount  TypeValidator  validator  ObjectType  type  AbstractCompiler  compiler  JSTypeRegistry  typeRegistry  boolean  enterSection  externs  inExterns  report  reportMissingProperties  typeable  Scope  outerScope  topScope  DiagnosticType  BAD_DELETE  BAD_IMPLEMENTED_TYPE  BIT_OPERATION  CONFLICTING_EXTENDED_TYPE  CONFLICTING_IMPLEMENTED_TYPE  CONSTRUCTOR_NOT_CALLABLE  DETERMINISTIC_TEST  DETERMINISTIC_TEST_NO_RESULT  ENUM_DUP  ENUM_NOT_CONSTANT  EXPECTED_THIS_TYPE  FUNCTION_MASKS_VARIABLE  HIDDEN_INTERFACE_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY_MISMATCH  ILLEGAL_IMPLICIT_CAST  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE  INEXISTENT_ENUM_ELEMENT  INEXISTENT_PROPERTY  INTERFACE_FUNCTION_NOT_EMPTY  INTERFACE_METHOD_OVERRIDE  INVALID_INTERFACE_MEMBER_DECLARATION  MULTIPLE_VAR_DEF  NOT_A_CONSTRUCTOR  NOT_CALLABLE  UNEXPECTED_TOKEN  UNKNOWN_EXPR_TYPE  UNKNOWN_OVERRIDE  UNRESOLVED_TYPE  WRONG_ARGUMENT_COUNT  diagnosticType  InferJSDocInfo  inferJSDocInfo  	projects/Closure66/src/com/google/javascript/jscomp/TypeCheck.java	0.21320071635561041	938	938	2	replace	Node  leftType  =  getJSType(assign.getFirstChild());	  Node    leftType    =    assign.getFirstChild();    	non-compiled	[CE]  orphaned  case	15	None	replace
91	[BUG]  [BUGGY]  Node  leftType  =  object.getFirstChild();  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      JSType  rvalueType  =  getJSType(assign.getLastChild());  Var  var  =  t.getScope().getVar(lvalue.getString());  if  (var  !=  null)  {  if  (var.isTypeInferred())  {  return;  }  }  }        [BUGGY]  Node  leftType  =  object.getFirstChild();  [BUGGY]      Node  rightChild  =  assign.getLastChild();  JSType  rightType  =  getJSType(rightChild);  if  (validator.expectCanAssignTo(  t,  assign,  rightType,  leftType,       "assignment     "))  {  ensureTyped(t,  assign,  rightType);  }  else  {  ensureTyped(t,  assign);  }  }  [CLASS]  TypeCheck  [METHOD]  visitAssign  [RETURN_TYPE]  void  NodeTraversal  t  Node  assign  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  jsType  leftType  objectJsType  rightType  rvalueType  NodeTraversal  t  DiagnosticGroup  ALL_DIAGNOSTICS  CheckLevel  reportMissingOverride  reportUnknownTypes  Var  var  Node  assign  lvalue  object  object2  rightChild  rvalue  FunctionType  functionType  ScopeCreator  scopeCreator  String  OVERRIDING_PROTOTYPE_WITH_NON_OBJECT  functionPrivateName  message  property  property2  JSDocInfo  info  int  noTypeCheckSection  nullCount  typedCount  unknownCount  TypeValidator  validator  ObjectType  type  AbstractCompiler  compiler  JSTypeRegistry  typeRegistry  boolean  enterSection  externs  inExterns  report  reportMissingProperties  typeable  Scope  outerScope  topScope  DiagnosticType  BAD_DELETE  BAD_IMPLEMENTED_TYPE  BIT_OPERATION  CONFLICTING_EXTENDED_TYPE  CONFLICTING_IMPLEMENTED_TYPE  CONSTRUCTOR_NOT_CALLABLE  DETERMINISTIC_TEST  DETERMINISTIC_TEST_NO_RESULT  ENUM_DUP  ENUM_NOT_CONSTANT  EXPECTED_THIS_TYPE  FUNCTION_MASKS_VARIABLE  HIDDEN_INTERFACE_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY_MISMATCH  ILLEGAL_IMPLICIT_CAST  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE  INEXISTENT_ENUM_ELEMENT  INEXISTENT_PROPERTY  INTERFACE_FUNCTION_NOT_EMPTY  INTERFACE_METHOD_OVERRIDE  INVALID_INTERFACE_MEMBER_DECLARATION  MULTIPLE_VAR_DEF  NOT_A_CONSTRUCTOR  NOT_CALLABLE  UNEXPECTED_TOKEN  UNKNOWN_EXPR_TYPE  UNKNOWN_OVERRIDE  UNRESOLVED_TYPE  WRONG_ARGUMENT_COUNT  diagnosticType  InferJSDocInfo  inferJSDocInfo  	projects/Closure66/src/com/google/javascript/jscomp/TypeCheck.java	0.21320071635561041	938	938	2	replace	Node  leftType  =  object.getFirstChild();	  Node    leftType    =    assign.getFirstChild();    	non-compiled	[CE]  orphaned  case	15	None	replace
92	[BUG]  [BUGGY]  Node  rightChild  =  assignment.getLastChild();  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      JSType  rvalueType  =  getJSType(assign.getLastChild());  Var  var  =  t.getScope().getVar(lvalue.getString());  if  (var  !=  null)  {  if  (var.isTypeInferred())  {  return;  }  }  }        [BUGGY]  Node  rightChild  =  assignment.getLastChild();  [BUGGY]      Node  rightChild  =  assign.getLastChild();  JSType  rightType  =  getJSType(rightChild);  if  (validator.expectCanAssignTo(  t,  assign,  rightType,  leftType,       "assignment     "))  {  ensureTyped(t,  assign,  rightType);  }  else  {  ensureTyped(t,  assign);  }  }  [CLASS]  TypeCheck  [METHOD]  visitAssign  [RETURN_TYPE]  void  NodeTraversal  t  Node  assign  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  jsType  leftType  objectJsType  rightType  rvalueType  NodeTraversal  t  DiagnosticGroup  ALL_DIAGNOSTICS  CheckLevel  reportMissingOverride  reportUnknownTypes  Var  var  Node  assign  lvalue  object  object2  rightChild  rvalue  FunctionType  functionType  ScopeCreator  scopeCreator  String  OVERRIDING_PROTOTYPE_WITH_NON_OBJECT  functionPrivateName  message  property  property2  JSDocInfo  info  int  noTypeCheckSection  nullCount  typedCount  unknownCount  TypeValidator  validator  ObjectType  type  AbstractCompiler  compiler  JSTypeRegistry  typeRegistry  boolean  enterSection  externs  inExterns  report  reportMissingProperties  typeable  Scope  outerScope  topScope  DiagnosticType  BAD_DELETE  BAD_IMPLEMENTED_TYPE  BIT_OPERATION  CONFLICTING_EXTENDED_TYPE  CONFLICTING_IMPLEMENTED_TYPE  CONSTRUCTOR_NOT_CALLABLE  DETERMINISTIC_TEST  DETERMINISTIC_TEST_NO_RESULT  ENUM_DUP  ENUM_NOT_CONSTANT  EXPECTED_THIS_TYPE  FUNCTION_MASKS_VARIABLE  HIDDEN_INTERFACE_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY_MISMATCH  ILLEGAL_IMPLICIT_CAST  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE  INEXISTENT_ENUM_ELEMENT  INEXISTENT_PROPERTY  INTERFACE_FUNCTION_NOT_EMPTY  INTERFACE_METHOD_OVERRIDE  INVALID_INTERFACE_MEMBER_DECLARATION  MULTIPLE_VAR_DEF  NOT_A_CONSTRUCTOR  NOT_CALLABLE  UNEXPECTED_TOKEN  UNKNOWN_EXPR_TYPE  UNKNOWN_OVERRIDE  UNRESOLVED_TYPE  WRONG_ARGUMENT_COUNT  diagnosticType  InferJSDocInfo  inferJSDocInfo  	projects/Closure66/src/com/google/javascript/jscomp/TypeCheck.java	0.21320071635561041	938	938	2	replace	Node  rightChild  =  assignment.getLastChild();	  Node    rightChild    =    assign.getFirstChild();    	non-compiled	[CE]  orphaned  case	9	None	replace
93	[BUG]  [BUGGY]  JSType  leftType  =  findJSType(lvalue.getFirstChild());  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      JSType  rvalueType  =  getJSType(assign.getLastChild());  Var  var  =  t.getScope().getVar(lvalue.getString());  if  (var  !=  null)  {  if  (var.isTypeInferred())  {  return;  }  }  }        [BUGGY]  JSType  leftType  =  findJSType(lvalue.getFirstChild());  [BUGGY]      Node  rightChild  =  assign.getLastChild();  JSType  rightType  =  getJSType(rightChild);  if  (validator.expectCanAssignTo(  t,  assign,  rightType,  leftType,       "assignment     "))  {  ensureTyped(t,  assign,  rightType);  }  else  {  ensureTyped(t,  assign);  }  }  [CLASS]  TypeCheck  [METHOD]  visitAssign  [RETURN_TYPE]  void  NodeTraversal  t  Node  assign  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  jsType  leftType  objectJsType  rightType  rvalueType  NodeTraversal  t  DiagnosticGroup  ALL_DIAGNOSTICS  CheckLevel  reportMissingOverride  reportUnknownTypes  Var  var  Node  assign  lvalue  object  object2  rightChild  rvalue  FunctionType  functionType  ScopeCreator  scopeCreator  String  OVERRIDING_PROTOTYPE_WITH_NON_OBJECT  functionPrivateName  message  property  property2  JSDocInfo  info  int  noTypeCheckSection  nullCount  typedCount  unknownCount  TypeValidator  validator  ObjectType  type  AbstractCompiler  compiler  JSTypeRegistry  typeRegistry  boolean  enterSection  externs  inExterns  report  reportMissingProperties  typeable  Scope  outerScope  topScope  DiagnosticType  BAD_DELETE  BAD_IMPLEMENTED_TYPE  BIT_OPERATION  CONFLICTING_EXTENDED_TYPE  CONFLICTING_IMPLEMENTED_TYPE  CONSTRUCTOR_NOT_CALLABLE  DETERMINISTIC_TEST  DETERMINISTIC_TEST_NO_RESULT  ENUM_DUP  ENUM_NOT_CONSTANT  EXPECTED_THIS_TYPE  FUNCTION_MASKS_VARIABLE  HIDDEN_INTERFACE_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY_MISMATCH  ILLEGAL_IMPLICIT_CAST  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE  INEXISTENT_ENUM_ELEMENT  INEXISTENT_PROPERTY  INTERFACE_FUNCTION_NOT_EMPTY  INTERFACE_METHOD_OVERRIDE  INVALID_INTERFACE_MEMBER_DECLARATION  MULTIPLE_VAR_DEF  NOT_A_CONSTRUCTOR  NOT_CALLABLE  UNEXPECTED_TOKEN  UNKNOWN_EXPR_TYPE  UNKNOWN_OVERRIDE  UNRESOLVED_TYPE  WRONG_ARGUMENT_COUNT  diagnosticType  InferJSDocInfo  inferJSDocInfo  	projects/Closure66/src/com/google/javascript/jscomp/TypeCheck.java	0.21320071635561041	938	938	2	replace	JSType  leftType  =  findJSType(lvalue.getFirstChild());	  JSType    leftType    =    findJSType(assign.getFirstChild());    	non-compiled	[CE]  orphaned  case	16	None	replace
94	[BUG]  [BUGGY]  JSType  leftType  =  getJSType(assign.getFirstChild(),  lvalue);  [CE]  orphaned  case  [FE]            AssertionFailedError      [CONTEXT]      JSType  rvalueType  =  getJSType(assign.getLastChild());  Var  var  =  t.getScope().getVar(lvalue.getString());  if  (var  !=  null)  {  if  (var.isTypeInferred())  {  return;  }  }  }        [BUGGY]  JSType  leftType  =  getJSType(assign.getFirstChild(),  lvalue);  [BUGGY]      Node  rightChild  =  assign.getLastChild();  JSType  rightType  =  getJSType(rightChild);  if  (validator.expectCanAssignTo(  t,  assign,  rightType,  leftType,       "assignment     "))  {  ensureTyped(t,  assign,  rightType);  }  else  {  ensureTyped(t,  assign);  }  }  [CLASS]  TypeCheck  [METHOD]  visitAssign  [RETURN_TYPE]  void  NodeTraversal  t  Node  assign  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  jsType  leftType  objectJsType  rightType  rvalueType  NodeTraversal  t  DiagnosticGroup  ALL_DIAGNOSTICS  CheckLevel  reportMissingOverride  reportUnknownTypes  Var  var  Node  assign  lvalue  object  object2  rightChild  rvalue  FunctionType  functionType  ScopeCreator  scopeCreator  String  OVERRIDING_PROTOTYPE_WITH_NON_OBJECT  functionPrivateName  message  property  property2  JSDocInfo  info  int  noTypeCheckSection  nullCount  typedCount  unknownCount  TypeValidator  validator  ObjectType  type  AbstractCompiler  compiler  JSTypeRegistry  typeRegistry  boolean  enterSection  externs  inExterns  report  reportMissingProperties  typeable  Scope  outerScope  topScope  DiagnosticType  BAD_DELETE  BAD_IMPLEMENTED_TYPE  BIT_OPERATION  CONFLICTING_EXTENDED_TYPE  CONFLICTING_IMPLEMENTED_TYPE  CONSTRUCTOR_NOT_CALLABLE  DETERMINISTIC_TEST  DETERMINISTIC_TEST_NO_RESULT  ENUM_DUP  ENUM_NOT_CONSTANT  EXPECTED_THIS_TYPE  FUNCTION_MASKS_VARIABLE  HIDDEN_INTERFACE_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY_MISMATCH  ILLEGAL_IMPLICIT_CAST  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE  INEXISTENT_ENUM_ELEMENT  INEXISTENT_PROPERTY  INTERFACE_FUNCTION_NOT_EMPTY  INTERFACE_METHOD_OVERRIDE  INVALID_INTERFACE_MEMBER_DECLARATION  MULTIPLE_VAR_DEF  NOT_A_CONSTRUCTOR  NOT_CALLABLE  UNEXPECTED_TOKEN  UNKNOWN_EXPR_TYPE  UNKNOWN_OVERRIDE  UNRESOLVED_TYPE  WRONG_ARGUMENT_COUNT  diagnosticType  InferJSDocInfo  inferJSDocInfo  	projects/Closure66/src/com/google/javascript/jscomp/TypeCheck.java	0.21320071635561041	938	938	2	replace	JSType  leftType  =  getJSType(assign.getFirstChild(),  lvalue);	  JSType    leftType    =    getJSType(assign.getFirstChild(),    assign);    	non-compiled	[CE]  orphaned  case	4	None	replace
95	[BUG]  [BUGGY]  Node  rightType  =  t.getScope().getVar(lvalue.getString(),  var);  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      JSType  rvalueType  =  getJSType(assign.getLastChild());  Var  var  =  t.getScope().getVar(lvalue.getString());  if  (var  !=  null)  {  if  (var.isTypeInferred())  {  return;  }  }  }        [BUGGY]  Node  rightType  =  t.getScope().getVar(lvalue.getString(),  var);  [BUGGY]      Node  rightChild  =  assign.getLastChild();  JSType  rightType  =  getJSType(rightChild);  if  (validator.expectCanAssignTo(  t,  assign,  rightType,  leftType,       "assignment     "))  {  ensureTyped(t,  assign,  rightType);  }  else  {  ensureTyped(t,  assign);  }  }  [CLASS]  TypeCheck  [METHOD]  visitAssign  [RETURN_TYPE]  void  NodeTraversal  t  Node  assign  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  jsType  leftType  objectJsType  rightType  rvalueType  NodeTraversal  t  DiagnosticGroup  ALL_DIAGNOSTICS  CheckLevel  reportMissingOverride  reportUnknownTypes  Var  var  Node  assign  lvalue  object  object2  rightChild  rvalue  FunctionType  functionType  ScopeCreator  scopeCreator  String  OVERRIDING_PROTOTYPE_WITH_NON_OBJECT  functionPrivateName  message  property  property2  JSDocInfo  info  int  noTypeCheckSection  nullCount  typedCount  unknownCount  TypeValidator  validator  ObjectType  type  AbstractCompiler  compiler  JSTypeRegistry  typeRegistry  boolean  enterSection  externs  inExterns  report  reportMissingProperties  typeable  Scope  outerScope  topScope  DiagnosticType  BAD_DELETE  BAD_IMPLEMENTED_TYPE  BIT_OPERATION  CONFLICTING_EXTENDED_TYPE  CONFLICTING_IMPLEMENTED_TYPE  CONSTRUCTOR_NOT_CALLABLE  DETERMINISTIC_TEST  DETERMINISTIC_TEST_NO_RESULT  ENUM_DUP  ENUM_NOT_CONSTANT  EXPECTED_THIS_TYPE  FUNCTION_MASKS_VARIABLE  HIDDEN_INTERFACE_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY_MISMATCH  ILLEGAL_IMPLICIT_CAST  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE  INEXISTENT_ENUM_ELEMENT  INEXISTENT_PROPERTY  INTERFACE_FUNCTION_NOT_EMPTY  INTERFACE_METHOD_OVERRIDE  INVALID_INTERFACE_MEMBER_DECLARATION  MULTIPLE_VAR_DEF  NOT_A_CONSTRUCTOR  NOT_CALLABLE  UNEXPECTED_TOKEN  UNKNOWN_EXPR_TYPE  UNKNOWN_OVERRIDE  UNRESOLVED_TYPE  WRONG_ARGUMENT_COUNT  diagnosticType  InferJSDocInfo  inferJSDocInfo  	projects/Closure66/src/com/google/javascript/jscomp/TypeCheck.java	0.21320071635561041	938	938	2	replace	Node  rightType  =  t.getScope().getVar(lvalue.getString(),  var);	  Node    rightType    =    t.getScope().getVar(lvalue.getString());    	non-compiled	[CE]  orphaned  case	20	None	replace
96	[BUG]  [BUGGY]  Node  rightType  =  t.getScope().getVar(lvalue.getString())+  1;  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      JSType  rvalueType  =  getJSType(assign.getLastChild());  Var  var  =  t.getScope().getVar(lvalue.getString());  if  (var  !=  null)  {  if  (var.isTypeInferred())  {  return;  }  }  }        [BUGGY]  Node  rightType  =  t.getScope().getVar(lvalue.getString())+  1;  [BUGGY]      Node  rightChild  =  assign.getLastChild();  JSType  rightType  =  getJSType(rightChild);  if  (validator.expectCanAssignTo(  t,  assign,  rightType,  leftType,       "assignment     "))  {  ensureTyped(t,  assign,  rightType);  }  else  {  ensureTyped(t,  assign);  }  }  [CLASS]  TypeCheck  [METHOD]  visitAssign  [RETURN_TYPE]  void  NodeTraversal  t  Node  assign  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  jsType  leftType  objectJsType  rightType  rvalueType  NodeTraversal  t  DiagnosticGroup  ALL_DIAGNOSTICS  CheckLevel  reportMissingOverride  reportUnknownTypes  Var  var  Node  assign  lvalue  object  object2  rightChild  rvalue  FunctionType  functionType  ScopeCreator  scopeCreator  String  OVERRIDING_PROTOTYPE_WITH_NON_OBJECT  functionPrivateName  message  property  property2  JSDocInfo  info  int  noTypeCheckSection  nullCount  typedCount  unknownCount  TypeValidator  validator  ObjectType  type  AbstractCompiler  compiler  JSTypeRegistry  typeRegistry  boolean  enterSection  externs  inExterns  report  reportMissingProperties  typeable  Scope  outerScope  topScope  DiagnosticType  BAD_DELETE  BAD_IMPLEMENTED_TYPE  BIT_OPERATION  CONFLICTING_EXTENDED_TYPE  CONFLICTING_IMPLEMENTED_TYPE  CONSTRUCTOR_NOT_CALLABLE  DETERMINISTIC_TEST  DETERMINISTIC_TEST_NO_RESULT  ENUM_DUP  ENUM_NOT_CONSTANT  EXPECTED_THIS_TYPE  FUNCTION_MASKS_VARIABLE  HIDDEN_INTERFACE_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY_MISMATCH  ILLEGAL_IMPLICIT_CAST  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE  INEXISTENT_ENUM_ELEMENT  INEXISTENT_PROPERTY  INTERFACE_FUNCTION_NOT_EMPTY  INTERFACE_METHOD_OVERRIDE  INVALID_INTERFACE_MEMBER_DECLARATION  MULTIPLE_VAR_DEF  NOT_A_CONSTRUCTOR  NOT_CALLABLE  UNEXPECTED_TOKEN  UNKNOWN_EXPR_TYPE  UNKNOWN_OVERRIDE  UNRESOLVED_TYPE  WRONG_ARGUMENT_COUNT  diagnosticType  InferJSDocInfo  inferJSDocInfo  	projects/Closure66/src/com/google/javascript/jscomp/TypeCheck.java	0.21320071635561041	938	938	2	replace	Node  rightType  =  t.getScope().getVar(lvalue.getString())+  1;	  Node    rightType    =    t.getScope().getVar(lvalue.getString());    	non-compiled	[CE]  orphaned  case	20	None	replace
97	[BUG]  [BUGGY]  JSType  leftType  =  getJSType(leftChild.getFirstChild());  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      JSType  rvalueType  =  getJSType(assign.getLastChild());  Var  var  =  t.getScope().getVar(lvalue.getString());  if  (var  !=  null)  {  if  (var.isTypeInferred())  {  return;  }  }  }        [BUGGY]  JSType  leftType  =  getJSType(leftChild.getFirstChild());  [BUGGY]      Node  rightChild  =  assign.getLastChild();  JSType  rightType  =  getJSType(rightChild);  if  (validator.expectCanAssignTo(  t,  assign,  rightType,  leftType,       "assignment     "))  {  ensureTyped(t,  assign,  rightType);  }  else  {  ensureTyped(t,  assign);  }  }  [CLASS]  TypeCheck  [METHOD]  visitAssign  [RETURN_TYPE]  void  NodeTraversal  t  Node  assign  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  jsType  leftType  objectJsType  rightType  rvalueType  NodeTraversal  t  DiagnosticGroup  ALL_DIAGNOSTICS  CheckLevel  reportMissingOverride  reportUnknownTypes  Var  var  Node  assign  lvalue  object  object2  rightChild  rvalue  FunctionType  functionType  ScopeCreator  scopeCreator  String  OVERRIDING_PROTOTYPE_WITH_NON_OBJECT  functionPrivateName  message  property  property2  JSDocInfo  info  int  noTypeCheckSection  nullCount  typedCount  unknownCount  TypeValidator  validator  ObjectType  type  AbstractCompiler  compiler  JSTypeRegistry  typeRegistry  boolean  enterSection  externs  inExterns  report  reportMissingProperties  typeable  Scope  outerScope  topScope  DiagnosticType  BAD_DELETE  BAD_IMPLEMENTED_TYPE  BIT_OPERATION  CONFLICTING_EXTENDED_TYPE  CONFLICTING_IMPLEMENTED_TYPE  CONSTRUCTOR_NOT_CALLABLE  DETERMINISTIC_TEST  DETERMINISTIC_TEST_NO_RESULT  ENUM_DUP  ENUM_NOT_CONSTANT  EXPECTED_THIS_TYPE  FUNCTION_MASKS_VARIABLE  HIDDEN_INTERFACE_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY_MISMATCH  ILLEGAL_IMPLICIT_CAST  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE  INEXISTENT_ENUM_ELEMENT  INEXISTENT_PROPERTY  INTERFACE_FUNCTION_NOT_EMPTY  INTERFACE_METHOD_OVERRIDE  INVALID_INTERFACE_MEMBER_DECLARATION  MULTIPLE_VAR_DEF  NOT_A_CONSTRUCTOR  NOT_CALLABLE  UNEXPECTED_TOKEN  UNKNOWN_EXPR_TYPE  UNKNOWN_OVERRIDE  UNRESOLVED_TYPE  WRONG_ARGUMENT_COUNT  diagnosticType  InferJSDocInfo  inferJSDocInfo  	projects/Closure66/src/com/google/javascript/jscomp/TypeCheck.java	0.21320071635561041	938	938	2	replace	JSType  leftType  =  getJSType(leftChild.getFirstChild());	  JSType    leftType    =    getJSType(leftChild);    	non-compiled	[CE]  orphaned  case	14	None	replace
98	[BUG]  [BUGGY]  Node  rightType  =  lvalue.removeFirstChild();  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      JSType  rvalueType  =  getJSType(assign.getLastChild());  Var  var  =  t.getScope().getVar(lvalue.getString());  if  (var  !=  null)  {  if  (var.isTypeInferred())  {  return;  }  }  }        [BUGGY]  Node  rightType  =  lvalue.removeFirstChild();  [BUGGY]      Node  rightChild  =  assign.getLastChild();  JSType  rightType  =  getJSType(rightChild);  if  (validator.expectCanAssignTo(  t,  assign,  rightType,  leftType,       "assignment     "))  {  ensureTyped(t,  assign,  rightType);  }  else  {  ensureTyped(t,  assign);  }  }  [CLASS]  TypeCheck  [METHOD]  visitAssign  [RETURN_TYPE]  void  NodeTraversal  t  Node  assign  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  jsType  leftType  objectJsType  rightType  rvalueType  NodeTraversal  t  DiagnosticGroup  ALL_DIAGNOSTICS  CheckLevel  reportMissingOverride  reportUnknownTypes  Var  var  Node  assign  lvalue  object  object2  rightChild  rvalue  FunctionType  functionType  ScopeCreator  scopeCreator  String  OVERRIDING_PROTOTYPE_WITH_NON_OBJECT  functionPrivateName  message  property  property2  JSDocInfo  info  int  noTypeCheckSection  nullCount  typedCount  unknownCount  TypeValidator  validator  ObjectType  type  AbstractCompiler  compiler  JSTypeRegistry  typeRegistry  boolean  enterSection  externs  inExterns  report  reportMissingProperties  typeable  Scope  outerScope  topScope  DiagnosticType  BAD_DELETE  BAD_IMPLEMENTED_TYPE  BIT_OPERATION  CONFLICTING_EXTENDED_TYPE  CONFLICTING_IMPLEMENTED_TYPE  CONSTRUCTOR_NOT_CALLABLE  DETERMINISTIC_TEST  DETERMINISTIC_TEST_NO_RESULT  ENUM_DUP  ENUM_NOT_CONSTANT  EXPECTED_THIS_TYPE  FUNCTION_MASKS_VARIABLE  HIDDEN_INTERFACE_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY_MISMATCH  ILLEGAL_IMPLICIT_CAST  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE  INEXISTENT_ENUM_ELEMENT  INEXISTENT_PROPERTY  INTERFACE_FUNCTION_NOT_EMPTY  INTERFACE_METHOD_OVERRIDE  INVALID_INTERFACE_MEMBER_DECLARATION  MULTIPLE_VAR_DEF  NOT_A_CONSTRUCTOR  NOT_CALLABLE  UNEXPECTED_TOKEN  UNKNOWN_EXPR_TYPE  UNKNOWN_OVERRIDE  UNRESOLVED_TYPE  WRONG_ARGUMENT_COUNT  diagnosticType  InferJSDocInfo  inferJSDocInfo  	projects/Closure66/src/com/google/javascript/jscomp/TypeCheck.java	0.21320071635561041	938	938	2	replace	Node  rightType  =  lvalue.removeFirstChild();	  Node    rightType    =    lvalue.getFirstChild();    	non-compiled	[CE]  orphaned  case	21	None	replace
99	[BUG]  [BUGGY]  Node  rightChild  =  t.getScope().getVar(lvalue.getString());  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      JSType  rvalueType  =  getJSType(assign.getLastChild());  Var  var  =  t.getScope().getVar(lvalue.getString());  if  (var  !=  null)  {  if  (var.isTypeInferred())  {  return;  }  }  }        [BUGGY]  Node  rightChild  =  t.getScope().getVar(lvalue.getString());  [BUGGY]      Node  rightChild  =  assign.getLastChild();  JSType  rightType  =  getJSType(rightChild);  if  (validator.expectCanAssignTo(  t,  assign,  rightType,  leftType,       "assignment     "))  {  ensureTyped(t,  assign,  rightType);  }  else  {  ensureTyped(t,  assign);  }  }  [CLASS]  TypeCheck  [METHOD]  visitAssign  [RETURN_TYPE]  void  NodeTraversal  t  Node  assign  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  jsType  leftType  objectJsType  rightType  rvalueType  NodeTraversal  t  DiagnosticGroup  ALL_DIAGNOSTICS  CheckLevel  reportMissingOverride  reportUnknownTypes  Var  var  Node  assign  lvalue  object  object2  rightChild  rvalue  FunctionType  functionType  ScopeCreator  scopeCreator  String  OVERRIDING_PROTOTYPE_WITH_NON_OBJECT  functionPrivateName  message  property  property2  JSDocInfo  info  int  noTypeCheckSection  nullCount  typedCount  unknownCount  TypeValidator  validator  ObjectType  type  AbstractCompiler  compiler  JSTypeRegistry  typeRegistry  boolean  enterSection  externs  inExterns  report  reportMissingProperties  typeable  Scope  outerScope  topScope  DiagnosticType  BAD_DELETE  BAD_IMPLEMENTED_TYPE  BIT_OPERATION  CONFLICTING_EXTENDED_TYPE  CONFLICTING_IMPLEMENTED_TYPE  CONSTRUCTOR_NOT_CALLABLE  DETERMINISTIC_TEST  DETERMINISTIC_TEST_NO_RESULT  ENUM_DUP  ENUM_NOT_CONSTANT  EXPECTED_THIS_TYPE  FUNCTION_MASKS_VARIABLE  HIDDEN_INTERFACE_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY_MISMATCH  ILLEGAL_IMPLICIT_CAST  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE  INEXISTENT_ENUM_ELEMENT  INEXISTENT_PROPERTY  INTERFACE_FUNCTION_NOT_EMPTY  INTERFACE_METHOD_OVERRIDE  INVALID_INTERFACE_MEMBER_DECLARATION  MULTIPLE_VAR_DEF  NOT_A_CONSTRUCTOR  NOT_CALLABLE  UNEXPECTED_TOKEN  UNKNOWN_EXPR_TYPE  UNKNOWN_OVERRIDE  UNRESOLVED_TYPE  WRONG_ARGUMENT_COUNT  diagnosticType  InferJSDocInfo  inferJSDocInfo  	projects/Closure66/src/com/google/javascript/jscomp/TypeCheck.java	0.21320071635561041	938	938	2	replace	Node  rightChild  =  t.getScope().getVar(lvalue.getString());	  Node    rightChild    =    assign.getFirstChild();    	non-compiled	[CE]  orphaned  case	9	None	replace
100	[BUG]  [BUGGY]  Node  rightChild  =  t.getScope().getRootNode();  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      JSType  rvalueType  =  getJSType(assign.getLastChild());  Var  var  =  t.getScope().getVar(lvalue.getString());  if  (var  !=  null)  {  if  (var.isTypeInferred())  {  return;  }  }  }        [BUGGY]  Node  rightChild  =  t.getScope().getRootNode();  [BUGGY]      Node  rightChild  =  assign.getLastChild();  JSType  rightType  =  getJSType(rightChild);  if  (validator.expectCanAssignTo(  t,  assign,  rightType,  leftType,       "assignment     "))  {  ensureTyped(t,  assign,  rightType);  }  else  {  ensureTyped(t,  assign);  }  }  [CLASS]  TypeCheck  [METHOD]  visitAssign  [RETURN_TYPE]  void  NodeTraversal  t  Node  assign  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  jsType  leftType  objectJsType  rightType  rvalueType  NodeTraversal  t  DiagnosticGroup  ALL_DIAGNOSTICS  CheckLevel  reportMissingOverride  reportUnknownTypes  Var  var  Node  assign  lvalue  object  object2  rightChild  rvalue  FunctionType  functionType  ScopeCreator  scopeCreator  String  OVERRIDING_PROTOTYPE_WITH_NON_OBJECT  functionPrivateName  message  property  property2  JSDocInfo  info  int  noTypeCheckSection  nullCount  typedCount  unknownCount  TypeValidator  validator  ObjectType  type  AbstractCompiler  compiler  JSTypeRegistry  typeRegistry  boolean  enterSection  externs  inExterns  report  reportMissingProperties  typeable  Scope  outerScope  topScope  DiagnosticType  BAD_DELETE  BAD_IMPLEMENTED_TYPE  BIT_OPERATION  CONFLICTING_EXTENDED_TYPE  CONFLICTING_IMPLEMENTED_TYPE  CONSTRUCTOR_NOT_CALLABLE  DETERMINISTIC_TEST  DETERMINISTIC_TEST_NO_RESULT  ENUM_DUP  ENUM_NOT_CONSTANT  EXPECTED_THIS_TYPE  FUNCTION_MASKS_VARIABLE  HIDDEN_INTERFACE_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY_MISMATCH  ILLEGAL_IMPLICIT_CAST  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE  INEXISTENT_ENUM_ELEMENT  INEXISTENT_PROPERTY  INTERFACE_FUNCTION_NOT_EMPTY  INTERFACE_METHOD_OVERRIDE  INVALID_INTERFACE_MEMBER_DECLARATION  MULTIPLE_VAR_DEF  NOT_A_CONSTRUCTOR  NOT_CALLABLE  UNEXPECTED_TOKEN  UNKNOWN_EXPR_TYPE  UNKNOWN_OVERRIDE  UNRESOLVED_TYPE  WRONG_ARGUMENT_COUNT  diagnosticType  InferJSDocInfo  inferJSDocInfo  	projects/Closure66/src/com/google/javascript/jscomp/TypeCheck.java	0.21320071635561041	938	938	2	replace	Node  rightChild  =  t.getScope().getRootNode();	  Node    rightChild    =    assign.getFirstChild();    	non-compiled	[CE]  orphaned  case	9	None	replace
101	[BUG]  [BUGGY]  Node  rightChild  =  t.getScope().getOwnSlot(lvalue.getString());  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      JSType  rvalueType  =  getJSType(assign.getLastChild());  Var  var  =  t.getScope().getVar(lvalue.getString());  if  (var  !=  null)  {  if  (var.isTypeInferred())  {  return;  }  }  }        [BUGGY]  Node  rightChild  =  t.getScope().getOwnSlot(lvalue.getString());  [BUGGY]      Node  rightChild  =  assign.getLastChild();  JSType  rightType  =  getJSType(rightChild);  if  (validator.expectCanAssignTo(  t,  assign,  rightType,  leftType,       "assignment     "))  {  ensureTyped(t,  assign,  rightType);  }  else  {  ensureTyped(t,  assign);  }  }  [CLASS]  TypeCheck  [METHOD]  visitAssign  [RETURN_TYPE]  void  NodeTraversal  t  Node  assign  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  jsType  leftType  objectJsType  rightType  rvalueType  NodeTraversal  t  DiagnosticGroup  ALL_DIAGNOSTICS  CheckLevel  reportMissingOverride  reportUnknownTypes  Var  var  Node  assign  lvalue  object  object2  rightChild  rvalue  FunctionType  functionType  ScopeCreator  scopeCreator  String  OVERRIDING_PROTOTYPE_WITH_NON_OBJECT  functionPrivateName  message  property  property2  JSDocInfo  info  int  noTypeCheckSection  nullCount  typedCount  unknownCount  TypeValidator  validator  ObjectType  type  AbstractCompiler  compiler  JSTypeRegistry  typeRegistry  boolean  enterSection  externs  inExterns  report  reportMissingProperties  typeable  Scope  outerScope  topScope  DiagnosticType  BAD_DELETE  BAD_IMPLEMENTED_TYPE  BIT_OPERATION  CONFLICTING_EXTENDED_TYPE  CONFLICTING_IMPLEMENTED_TYPE  CONSTRUCTOR_NOT_CALLABLE  DETERMINISTIC_TEST  DETERMINISTIC_TEST_NO_RESULT  ENUM_DUP  ENUM_NOT_CONSTANT  EXPECTED_THIS_TYPE  FUNCTION_MASKS_VARIABLE  HIDDEN_INTERFACE_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY_MISMATCH  ILLEGAL_IMPLICIT_CAST  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE  INEXISTENT_ENUM_ELEMENT  INEXISTENT_PROPERTY  INTERFACE_FUNCTION_NOT_EMPTY  INTERFACE_METHOD_OVERRIDE  INVALID_INTERFACE_MEMBER_DECLARATION  MULTIPLE_VAR_DEF  NOT_A_CONSTRUCTOR  NOT_CALLABLE  UNEXPECTED_TOKEN  UNKNOWN_EXPR_TYPE  UNKNOWN_OVERRIDE  UNRESOLVED_TYPE  WRONG_ARGUMENT_COUNT  diagnosticType  InferJSDocInfo  inferJSDocInfo  	projects/Closure66/src/com/google/javascript/jscomp/TypeCheck.java	0.21320071635561041	938	938	2	replace	Node  rightChild  =  t.getScope().getOwnSlot(lvalue.getString());	  Node    rightChild    =    assign.getFirstChild();    	non-compiled	[CE]  orphaned  case	9	None	replace
102	[BUG]  [BUGGY]  Preconditions.checkState(assign.getType()  ==  Token.ASSIGN  ||  assign.getType()  ==  Token.VAR);  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      JSType  rvalueType  =  getJSType(assign.getLastChild());  Var  var  =  t.getScope().getVar(lvalue.getString());  if  (var  !=  null)  {  if  (var.isTypeInferred())  {  return;  }  }  }        [BUGGY]  Preconditions.checkState(assign.getType()  ==  Token.ASSIGN  ||  assign.getType()  ==  Token.VAR);  [BUGGY]      Node  rightChild  =  assign.getLastChild();  JSType  rightType  =  getJSType(rightChild);  if  (validator.expectCanAssignTo(  t,  assign,  rightType,  leftType,       "assignment     "))  {  ensureTyped(t,  assign,  rightType);  }  else  {  ensureTyped(t,  assign);  }  }  [CLASS]  TypeCheck  [METHOD]  visitAssign  [RETURN_TYPE]  void  NodeTraversal  t  Node  assign  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  jsType  leftType  objectJsType  rightType  rvalueType  NodeTraversal  t  DiagnosticGroup  ALL_DIAGNOSTICS  CheckLevel  reportMissingOverride  reportUnknownTypes  Var  var  Node  assign  lvalue  object  object2  rightChild  rvalue  FunctionType  functionType  ScopeCreator  scopeCreator  String  OVERRIDING_PROTOTYPE_WITH_NON_OBJECT  functionPrivateName  message  property  property2  JSDocInfo  info  int  noTypeCheckSection  nullCount  typedCount  unknownCount  TypeValidator  validator  ObjectType  type  AbstractCompiler  compiler  JSTypeRegistry  typeRegistry  boolean  enterSection  externs  inExterns  report  reportMissingProperties  typeable  Scope  outerScope  topScope  DiagnosticType  BAD_DELETE  BAD_IMPLEMENTED_TYPE  BIT_OPERATION  CONFLICTING_EXTENDED_TYPE  CONFLICTING_IMPLEMENTED_TYPE  CONSTRUCTOR_NOT_CALLABLE  DETERMINISTIC_TEST  DETERMINISTIC_TEST_NO_RESULT  ENUM_DUP  ENUM_NOT_CONSTANT  EXPECTED_THIS_TYPE  FUNCTION_MASKS_VARIABLE  HIDDEN_INTERFACE_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY_MISMATCH  ILLEGAL_IMPLICIT_CAST  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE  INEXISTENT_ENUM_ELEMENT  INEXISTENT_PROPERTY  INTERFACE_FUNCTION_NOT_EMPTY  INTERFACE_METHOD_OVERRIDE  INVALID_INTERFACE_MEMBER_DECLARATION  MULTIPLE_VAR_DEF  NOT_A_CONSTRUCTOR  NOT_CALLABLE  UNEXPECTED_TOKEN  UNKNOWN_EXPR_TYPE  UNKNOWN_OVERRIDE  UNRESOLVED_TYPE  WRONG_ARGUMENT_COUNT  diagnosticType  InferJSDocInfo  inferJSDocInfo  	projects/Closure66/src/com/google/javascript/jscomp/TypeCheck.java	0.21320071635561041	938	938	2	replace	Preconditions.checkState(assign.getType()  ==  Token.ASSIGN  ||  assign.getType()  ==  Token.VAR);	  Preconditions.checkState(assign.getType()    ==    Token.ASSIGN);    	non-compiled	[CE]  orphaned  case	11	None	replace
103	[BUG]  [BUGGY]  Preconditions.checkState(assign.getType()  ==  Token.ASSIGN  ||  assign.getType()  ==  Token.BLOCK);  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      JSType  rvalueType  =  getJSType(assign.getLastChild());  Var  var  =  t.getScope().getVar(lvalue.getString());  if  (var  !=  null)  {  if  (var.isTypeInferred())  {  return;  }  }  }        [BUGGY]  Preconditions.checkState(assign.getType()  ==  Token.ASSIGN  ||  assign.getType()  ==  Token.BLOCK);  [BUGGY]      Node  rightChild  =  assign.getLastChild();  JSType  rightType  =  getJSType(rightChild);  if  (validator.expectCanAssignTo(  t,  assign,  rightType,  leftType,       "assignment     "))  {  ensureTyped(t,  assign,  rightType);  }  else  {  ensureTyped(t,  assign);  }  }  [CLASS]  TypeCheck  [METHOD]  visitAssign  [RETURN_TYPE]  void  NodeTraversal  t  Node  assign  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  jsType  leftType  objectJsType  rightType  rvalueType  NodeTraversal  t  DiagnosticGroup  ALL_DIAGNOSTICS  CheckLevel  reportMissingOverride  reportUnknownTypes  Var  var  Node  assign  lvalue  object  object2  rightChild  rvalue  FunctionType  functionType  ScopeCreator  scopeCreator  String  OVERRIDING_PROTOTYPE_WITH_NON_OBJECT  functionPrivateName  message  property  property2  JSDocInfo  info  int  noTypeCheckSection  nullCount  typedCount  unknownCount  TypeValidator  validator  ObjectType  type  AbstractCompiler  compiler  JSTypeRegistry  typeRegistry  boolean  enterSection  externs  inExterns  report  reportMissingProperties  typeable  Scope  outerScope  topScope  DiagnosticType  BAD_DELETE  BAD_IMPLEMENTED_TYPE  BIT_OPERATION  CONFLICTING_EXTENDED_TYPE  CONFLICTING_IMPLEMENTED_TYPE  CONSTRUCTOR_NOT_CALLABLE  DETERMINISTIC_TEST  DETERMINISTIC_TEST_NO_RESULT  ENUM_DUP  ENUM_NOT_CONSTANT  EXPECTED_THIS_TYPE  FUNCTION_MASKS_VARIABLE  HIDDEN_INTERFACE_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY_MISMATCH  ILLEGAL_IMPLICIT_CAST  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE  INEXISTENT_ENUM_ELEMENT  INEXISTENT_PROPERTY  INTERFACE_FUNCTION_NOT_EMPTY  INTERFACE_METHOD_OVERRIDE  INVALID_INTERFACE_MEMBER_DECLARATION  MULTIPLE_VAR_DEF  NOT_A_CONSTRUCTOR  NOT_CALLABLE  UNEXPECTED_TOKEN  UNKNOWN_EXPR_TYPE  UNKNOWN_OVERRIDE  UNRESOLVED_TYPE  WRONG_ARGUMENT_COUNT  diagnosticType  InferJSDocInfo  inferJSDocInfo  	projects/Closure66/src/com/google/javascript/jscomp/TypeCheck.java	0.21320071635561041	938	938	2	replace	Preconditions.checkState(assign.getType()  ==  Token.ASSIGN  ||  assign.getType()  ==  Token.BLOCK);	  Preconditions.checkState(assign.getType()    ==    Token.ASSIGN);    	non-compiled	[CE]  orphaned  case	11	None	replace
104	[BUG]  [BUGGY]  JSType  leftType  =  getJSType(assign.getNext());  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      JSType  rvalueType  =  getJSType(assign.getLastChild());  Var  var  =  t.getScope().getVar(lvalue.getString());  if  (var  !=  null)  {  if  (var.isTypeInferred())  {  return;  }  }  }        [BUGGY]  JSType  leftType  =  getJSType(assign.getNext());  [BUGGY]      Node  rightChild  =  assign.getLastChild();  JSType  rightType  =  getJSType(rightChild);  if  (validator.expectCanAssignTo(  t,  assign,  rightType,  leftType,       "assignment     "))  {  ensureTyped(t,  assign,  rightType);  }  else  {  ensureTyped(t,  assign);  }  }  [CLASS]  TypeCheck  [METHOD]  visitAssign  [RETURN_TYPE]  void  NodeTraversal  t  Node  assign  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  jsType  leftType  objectJsType  rightType  rvalueType  NodeTraversal  t  DiagnosticGroup  ALL_DIAGNOSTICS  CheckLevel  reportMissingOverride  reportUnknownTypes  Var  var  Node  assign  lvalue  object  object2  rightChild  rvalue  FunctionType  functionType  ScopeCreator  scopeCreator  String  OVERRIDING_PROTOTYPE_WITH_NON_OBJECT  functionPrivateName  message  property  property2  JSDocInfo  info  int  noTypeCheckSection  nullCount  typedCount  unknownCount  TypeValidator  validator  ObjectType  type  AbstractCompiler  compiler  JSTypeRegistry  typeRegistry  boolean  enterSection  externs  inExterns  report  reportMissingProperties  typeable  Scope  outerScope  topScope  DiagnosticType  BAD_DELETE  BAD_IMPLEMENTED_TYPE  BIT_OPERATION  CONFLICTING_EXTENDED_TYPE  CONFLICTING_IMPLEMENTED_TYPE  CONSTRUCTOR_NOT_CALLABLE  DETERMINISTIC_TEST  DETERMINISTIC_TEST_NO_RESULT  ENUM_DUP  ENUM_NOT_CONSTANT  EXPECTED_THIS_TYPE  FUNCTION_MASKS_VARIABLE  HIDDEN_INTERFACE_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY_MISMATCH  ILLEGAL_IMPLICIT_CAST  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE  INEXISTENT_ENUM_ELEMENT  INEXISTENT_PROPERTY  INTERFACE_FUNCTION_NOT_EMPTY  INTERFACE_METHOD_OVERRIDE  INVALID_INTERFACE_MEMBER_DECLARATION  MULTIPLE_VAR_DEF  NOT_A_CONSTRUCTOR  NOT_CALLABLE  UNEXPECTED_TOKEN  UNKNOWN_EXPR_TYPE  UNKNOWN_OVERRIDE  UNRESOLVED_TYPE  WRONG_ARGUMENT_COUNT  diagnosticType  InferJSDocInfo  inferJSDocInfo  	projects/Closure66/src/com/google/javascript/jscomp/TypeCheck.java	0.21320071635561041	938	938	2	replace	JSType  leftType  =  getJSType(assign.getNext());	  JSType    leftType    =    getJSType(assign.getString());    	non-compiled	[CE]  orphaned  case	17	None	replace
105	[BUG]  [BUGGY]  Node  right  =  t.getScope().getVar(lvalue.getString());  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      JSType  rvalueType  =  getJSType(assign.getLastChild());  Var  var  =  t.getScope().getVar(lvalue.getString());  if  (var  !=  null)  {  if  (var.isTypeInferred())  {  return;  }  }  }        [BUGGY]  Node  right  =  t.getScope().getVar(lvalue.getString());  [BUGGY]      Node  rightChild  =  assign.getLastChild();  JSType  rightType  =  getJSType(rightChild);  if  (validator.expectCanAssignTo(  t,  assign,  rightType,  leftType,       "assignment     "))  {  ensureTyped(t,  assign,  rightType);  }  else  {  ensureTyped(t,  assign);  }  }  [CLASS]  TypeCheck  [METHOD]  visitAssign  [RETURN_TYPE]  void  NodeTraversal  t  Node  assign  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  jsType  leftType  objectJsType  rightType  rvalueType  NodeTraversal  t  DiagnosticGroup  ALL_DIAGNOSTICS  CheckLevel  reportMissingOverride  reportUnknownTypes  Var  var  Node  assign  lvalue  object  object2  rightChild  rvalue  FunctionType  functionType  ScopeCreator  scopeCreator  String  OVERRIDING_PROTOTYPE_WITH_NON_OBJECT  functionPrivateName  message  property  property2  JSDocInfo  info  int  noTypeCheckSection  nullCount  typedCount  unknownCount  TypeValidator  validator  ObjectType  type  AbstractCompiler  compiler  JSTypeRegistry  typeRegistry  boolean  enterSection  externs  inExterns  report  reportMissingProperties  typeable  Scope  outerScope  topScope  DiagnosticType  BAD_DELETE  BAD_IMPLEMENTED_TYPE  BIT_OPERATION  CONFLICTING_EXTENDED_TYPE  CONFLICTING_IMPLEMENTED_TYPE  CONSTRUCTOR_NOT_CALLABLE  DETERMINISTIC_TEST  DETERMINISTIC_TEST_NO_RESULT  ENUM_DUP  ENUM_NOT_CONSTANT  EXPECTED_THIS_TYPE  FUNCTION_MASKS_VARIABLE  HIDDEN_INTERFACE_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY_MISMATCH  ILLEGAL_IMPLICIT_CAST  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE  INEXISTENT_ENUM_ELEMENT  INEXISTENT_PROPERTY  INTERFACE_FUNCTION_NOT_EMPTY  INTERFACE_METHOD_OVERRIDE  INVALID_INTERFACE_MEMBER_DECLARATION  MULTIPLE_VAR_DEF  NOT_A_CONSTRUCTOR  NOT_CALLABLE  UNEXPECTED_TOKEN  UNKNOWN_EXPR_TYPE  UNKNOWN_OVERRIDE  UNRESOLVED_TYPE  WRONG_ARGUMENT_COUNT  diagnosticType  InferJSDocInfo  inferJSDocInfo  	projects/Closure66/src/com/google/javascript/jscomp/TypeCheck.java	0.21320071635561041	938	938	2	replace	Node  right  =  t.getScope().getVar(lvalue.getString());	  Node    right    =    assign.getFirstChild();    	non-compiled	[CE]  orphaned  case	12	None	replace
106	[BUG]  [BUGGY]  Node  right  =  t.getScope().getRootNode();  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      JSType  rvalueType  =  getJSType(assign.getLastChild());  Var  var  =  t.getScope().getVar(lvalue.getString());  if  (var  !=  null)  {  if  (var.isTypeInferred())  {  return;  }  }  }        [BUGGY]  Node  right  =  t.getScope().getRootNode();  [BUGGY]      Node  rightChild  =  assign.getLastChild();  JSType  rightType  =  getJSType(rightChild);  if  (validator.expectCanAssignTo(  t,  assign,  rightType,  leftType,       "assignment     "))  {  ensureTyped(t,  assign,  rightType);  }  else  {  ensureTyped(t,  assign);  }  }  [CLASS]  TypeCheck  [METHOD]  visitAssign  [RETURN_TYPE]  void  NodeTraversal  t  Node  assign  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  jsType  leftType  objectJsType  rightType  rvalueType  NodeTraversal  t  DiagnosticGroup  ALL_DIAGNOSTICS  CheckLevel  reportMissingOverride  reportUnknownTypes  Var  var  Node  assign  lvalue  object  object2  rightChild  rvalue  FunctionType  functionType  ScopeCreator  scopeCreator  String  OVERRIDING_PROTOTYPE_WITH_NON_OBJECT  functionPrivateName  message  property  property2  JSDocInfo  info  int  noTypeCheckSection  nullCount  typedCount  unknownCount  TypeValidator  validator  ObjectType  type  AbstractCompiler  compiler  JSTypeRegistry  typeRegistry  boolean  enterSection  externs  inExterns  report  reportMissingProperties  typeable  Scope  outerScope  topScope  DiagnosticType  BAD_DELETE  BAD_IMPLEMENTED_TYPE  BIT_OPERATION  CONFLICTING_EXTENDED_TYPE  CONFLICTING_IMPLEMENTED_TYPE  CONSTRUCTOR_NOT_CALLABLE  DETERMINISTIC_TEST  DETERMINISTIC_TEST_NO_RESULT  ENUM_DUP  ENUM_NOT_CONSTANT  EXPECTED_THIS_TYPE  FUNCTION_MASKS_VARIABLE  HIDDEN_INTERFACE_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY_MISMATCH  ILLEGAL_IMPLICIT_CAST  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE  INEXISTENT_ENUM_ELEMENT  INEXISTENT_PROPERTY  INTERFACE_FUNCTION_NOT_EMPTY  INTERFACE_METHOD_OVERRIDE  INVALID_INTERFACE_MEMBER_DECLARATION  MULTIPLE_VAR_DEF  NOT_A_CONSTRUCTOR  NOT_CALLABLE  UNEXPECTED_TOKEN  UNKNOWN_EXPR_TYPE  UNKNOWN_OVERRIDE  UNRESOLVED_TYPE  WRONG_ARGUMENT_COUNT  diagnosticType  InferJSDocInfo  inferJSDocInfo  	projects/Closure66/src/com/google/javascript/jscomp/TypeCheck.java	0.21320071635561041	938	938	2	replace	Node  right  =  t.getScope().getRootNode();	  Node    right    =    assign.getFirstChild();    	non-compiled	[CE]  orphaned  case	12	None	replace
107	[BUG]  [BUGGY]  Node  right  =  t.getScope().getOwnSlot(lvalue.getString());  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      JSType  rvalueType  =  getJSType(assign.getLastChild());  Var  var  =  t.getScope().getVar(lvalue.getString());  if  (var  !=  null)  {  if  (var.isTypeInferred())  {  return;  }  }  }        [BUGGY]  Node  right  =  t.getScope().getOwnSlot(lvalue.getString());  [BUGGY]      Node  rightChild  =  assign.getLastChild();  JSType  rightType  =  getJSType(rightChild);  if  (validator.expectCanAssignTo(  t,  assign,  rightType,  leftType,       "assignment     "))  {  ensureTyped(t,  assign,  rightType);  }  else  {  ensureTyped(t,  assign);  }  }  [CLASS]  TypeCheck  [METHOD]  visitAssign  [RETURN_TYPE]  void  NodeTraversal  t  Node  assign  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  jsType  leftType  objectJsType  rightType  rvalueType  NodeTraversal  t  DiagnosticGroup  ALL_DIAGNOSTICS  CheckLevel  reportMissingOverride  reportUnknownTypes  Var  var  Node  assign  lvalue  object  object2  rightChild  rvalue  FunctionType  functionType  ScopeCreator  scopeCreator  String  OVERRIDING_PROTOTYPE_WITH_NON_OBJECT  functionPrivateName  message  property  property2  JSDocInfo  info  int  noTypeCheckSection  nullCount  typedCount  unknownCount  TypeValidator  validator  ObjectType  type  AbstractCompiler  compiler  JSTypeRegistry  typeRegistry  boolean  enterSection  externs  inExterns  report  reportMissingProperties  typeable  Scope  outerScope  topScope  DiagnosticType  BAD_DELETE  BAD_IMPLEMENTED_TYPE  BIT_OPERATION  CONFLICTING_EXTENDED_TYPE  CONFLICTING_IMPLEMENTED_TYPE  CONSTRUCTOR_NOT_CALLABLE  DETERMINISTIC_TEST  DETERMINISTIC_TEST_NO_RESULT  ENUM_DUP  ENUM_NOT_CONSTANT  EXPECTED_THIS_TYPE  FUNCTION_MASKS_VARIABLE  HIDDEN_INTERFACE_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY_MISMATCH  ILLEGAL_IMPLICIT_CAST  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE  INEXISTENT_ENUM_ELEMENT  INEXISTENT_PROPERTY  INTERFACE_FUNCTION_NOT_EMPTY  INTERFACE_METHOD_OVERRIDE  INVALID_INTERFACE_MEMBER_DECLARATION  MULTIPLE_VAR_DEF  NOT_A_CONSTRUCTOR  NOT_CALLABLE  UNEXPECTED_TOKEN  UNKNOWN_EXPR_TYPE  UNKNOWN_OVERRIDE  UNRESOLVED_TYPE  WRONG_ARGUMENT_COUNT  diagnosticType  InferJSDocInfo  inferJSDocInfo  	projects/Closure66/src/com/google/javascript/jscomp/TypeCheck.java	0.21320071635561041	938	938	2	replace	Node  right  =  t.getScope().getOwnSlot(lvalue.getString());	  Node    right    =    assign.getFirstChild();    	non-compiled	[CE]  orphaned  case	12	None	replace
108	[BUG]  [BUGGY]  JSType  rightType  =  getJSType(rightChild);  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      JSType  rvalueType  =  getJSType(assign.getLastChild());  Var  var  =  t.getScope().getVar(lvalue.getString());  if  (var  !=  null)  {  if  (var.isTypeInferred())  {  return;  }  }  }        [BUGGY]  JSType  rightType  =  getJSType(rightChild);  [BUGGY]      Node  rightChild  =  assign.getLastChild();  JSType  rightType  =  getJSType(rightChild);  if  (validator.expectCanAssignTo(  t,  assign,  rightType,  leftType,       "assignment     "))  {  ensureTyped(t,  assign,  rightType);  }  else  {  ensureTyped(t,  assign);  }  }  [CLASS]  TypeCheck  [METHOD]  visitAssign  [RETURN_TYPE]  void  NodeTraversal  t  Node  assign  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  jsType  leftType  objectJsType  rightType  rvalueType  NodeTraversal  t  DiagnosticGroup  ALL_DIAGNOSTICS  CheckLevel  reportMissingOverride  reportUnknownTypes  Var  var  Node  assign  lvalue  object  object2  rightChild  rvalue  FunctionType  functionType  ScopeCreator  scopeCreator  String  OVERRIDING_PROTOTYPE_WITH_NON_OBJECT  functionPrivateName  message  property  property2  JSDocInfo  info  int  noTypeCheckSection  nullCount  typedCount  unknownCount  TypeValidator  validator  ObjectType  type  AbstractCompiler  compiler  JSTypeRegistry  typeRegistry  boolean  enterSection  externs  inExterns  report  reportMissingProperties  typeable  Scope  outerScope  topScope  DiagnosticType  BAD_DELETE  BAD_IMPLEMENTED_TYPE  BIT_OPERATION  CONFLICTING_EXTENDED_TYPE  CONFLICTING_IMPLEMENTED_TYPE  CONSTRUCTOR_NOT_CALLABLE  DETERMINISTIC_TEST  DETERMINISTIC_TEST_NO_RESULT  ENUM_DUP  ENUM_NOT_CONSTANT  EXPECTED_THIS_TYPE  FUNCTION_MASKS_VARIABLE  HIDDEN_INTERFACE_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY_MISMATCH  ILLEGAL_IMPLICIT_CAST  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE  INEXISTENT_ENUM_ELEMENT  INEXISTENT_PROPERTY  INTERFACE_FUNCTION_NOT_EMPTY  INTERFACE_METHOD_OVERRIDE  INVALID_INTERFACE_MEMBER_DECLARATION  MULTIPLE_VAR_DEF  NOT_A_CONSTRUCTOR  NOT_CALLABLE  UNEXPECTED_TOKEN  UNKNOWN_EXPR_TYPE  UNKNOWN_OVERRIDE  UNRESOLVED_TYPE  WRONG_ARGUMENT_COUNT  diagnosticType  InferJSDocInfo  inferJSDocInfo  	projects/Closure66/src/com/google/javascript/jscomp/TypeCheck.java	0.21320071635561041	938	938	2	replace	JSType  rightType  =  getJSType(rightChild);	  JSType    leftType    =    getJSType(rightChild);    	non-compiled	[CE]  orphaned  case	24	None	replace
109	[BUG]  [BUGGY]  Node  rightChild  =  assigned.getFirstChild();  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      JSType  rvalueType  =  getJSType(assign.getLastChild());  Var  var  =  t.getScope().getVar(lvalue.getString());  if  (var  !=  null)  {  if  (var.isTypeInferred())  {  return;  }  }  }        [BUGGY]  Node  rightChild  =  assigned.getFirstChild();  [BUGGY]      Node  rightChild  =  assign.getLastChild();  JSType  rightType  =  getJSType(rightChild);  if  (validator.expectCanAssignTo(  t,  assign,  rightType,  leftType,       "assignment     "))  {  ensureTyped(t,  assign,  rightType);  }  else  {  ensureTyped(t,  assign);  }  }  [CLASS]  TypeCheck  [METHOD]  visitAssign  [RETURN_TYPE]  void  NodeTraversal  t  Node  assign  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  jsType  leftType  objectJsType  rightType  rvalueType  NodeTraversal  t  DiagnosticGroup  ALL_DIAGNOSTICS  CheckLevel  reportMissingOverride  reportUnknownTypes  Var  var  Node  assign  lvalue  object  object2  rightChild  rvalue  FunctionType  functionType  ScopeCreator  scopeCreator  String  OVERRIDING_PROTOTYPE_WITH_NON_OBJECT  functionPrivateName  message  property  property2  JSDocInfo  info  int  noTypeCheckSection  nullCount  typedCount  unknownCount  TypeValidator  validator  ObjectType  type  AbstractCompiler  compiler  JSTypeRegistry  typeRegistry  boolean  enterSection  externs  inExterns  report  reportMissingProperties  typeable  Scope  outerScope  topScope  DiagnosticType  BAD_DELETE  BAD_IMPLEMENTED_TYPE  BIT_OPERATION  CONFLICTING_EXTENDED_TYPE  CONFLICTING_IMPLEMENTED_TYPE  CONSTRUCTOR_NOT_CALLABLE  DETERMINISTIC_TEST  DETERMINISTIC_TEST_NO_RESULT  ENUM_DUP  ENUM_NOT_CONSTANT  EXPECTED_THIS_TYPE  FUNCTION_MASKS_VARIABLE  HIDDEN_INTERFACE_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY_MISMATCH  ILLEGAL_IMPLICIT_CAST  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE  INEXISTENT_ENUM_ELEMENT  INEXISTENT_PROPERTY  INTERFACE_FUNCTION_NOT_EMPTY  INTERFACE_METHOD_OVERRIDE  INVALID_INTERFACE_MEMBER_DECLARATION  MULTIPLE_VAR_DEF  NOT_A_CONSTRUCTOR  NOT_CALLABLE  UNEXPECTED_TOKEN  UNKNOWN_EXPR_TYPE  UNKNOWN_OVERRIDE  UNRESOLVED_TYPE  WRONG_ARGUMENT_COUNT  diagnosticType  InferJSDocInfo  inferJSDocInfo  	projects/Closure66/src/com/google/javascript/jscomp/TypeCheck.java	0.21320071635561041	938	938	2	replace	Node  rightChild  =  assigned.getFirstChild();	  Node    rightChild    =    object.getFirstChild();    	non-compiled	[CE]  orphaned  case	13	None	replace
110	[BUG]  [BUGGY]  JSType  leftType  =  getJSType(t,  assign.getFirstChild(),  assign.getLastChild());  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      JSType  rvalueType  =  getJSType(assign.getLastChild());  Var  var  =  t.getScope().getVar(lvalue.getString());  if  (var  !=  null)  {  if  (var.isTypeInferred())  {  return;  }  }  }        [BUGGY]  JSType  leftType  =  getJSType(t,  assign.getFirstChild(),  assign.getLastChild());  [BUGGY]      Node  rightChild  =  assign.getLastChild();  JSType  rightType  =  getJSType(rightChild);  if  (validator.expectCanAssignTo(  t,  assign,  rightType,  leftType,       "assignment     "))  {  ensureTyped(t,  assign,  rightType);  }  else  {  ensureTyped(t,  assign);  }  }  [CLASS]  TypeCheck  [METHOD]  visitAssign  [RETURN_TYPE]  void  NodeTraversal  t  Node  assign  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  jsType  leftType  objectJsType  rightType  rvalueType  NodeTraversal  t  DiagnosticGroup  ALL_DIAGNOSTICS  CheckLevel  reportMissingOverride  reportUnknownTypes  Var  var  Node  assign  lvalue  object  object2  rightChild  rvalue  FunctionType  functionType  ScopeCreator  scopeCreator  String  OVERRIDING_PROTOTYPE_WITH_NON_OBJECT  functionPrivateName  message  property  property2  JSDocInfo  info  int  noTypeCheckSection  nullCount  typedCount  unknownCount  TypeValidator  validator  ObjectType  type  AbstractCompiler  compiler  JSTypeRegistry  typeRegistry  boolean  enterSection  externs  inExterns  report  reportMissingProperties  typeable  Scope  outerScope  topScope  DiagnosticType  BAD_DELETE  BAD_IMPLEMENTED_TYPE  BIT_OPERATION  CONFLICTING_EXTENDED_TYPE  CONFLICTING_IMPLEMENTED_TYPE  CONSTRUCTOR_NOT_CALLABLE  DETERMINISTIC_TEST  DETERMINISTIC_TEST_NO_RESULT  ENUM_DUP  ENUM_NOT_CONSTANT  EXPECTED_THIS_TYPE  FUNCTION_MASKS_VARIABLE  HIDDEN_INTERFACE_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY_MISMATCH  ILLEGAL_IMPLICIT_CAST  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE  INEXISTENT_ENUM_ELEMENT  INEXISTENT_PROPERTY  INTERFACE_FUNCTION_NOT_EMPTY  INTERFACE_METHOD_OVERRIDE  INVALID_INTERFACE_MEMBER_DECLARATION  MULTIPLE_VAR_DEF  NOT_A_CONSTRUCTOR  NOT_CALLABLE  UNEXPECTED_TOKEN  UNKNOWN_EXPR_TYPE  UNKNOWN_OVERRIDE  UNRESOLVED_TYPE  WRONG_ARGUMENT_COUNT  diagnosticType  InferJSDocInfo  inferJSDocInfo  	projects/Closure66/src/com/google/javascript/jscomp/TypeCheck.java	0.21320071635561041	938	938	2	replace	JSType  leftType  =  getJSType(t,  assign.getFirstChild(),  assign.getLastChild());	  JSType    leftType    =    getJSType(assign.getFirstChild(),    assign.getLastChild());    	non-compiled	[CE]  orphaned  case	5	None	replace
111	[BUG]  [BUGGY]  Node  assign  =  t.getScope().getVar(lvalue.getString());  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      JSType  rvalueType  =  getJSType(assign.getLastChild());  Var  var  =  t.getScope().getVar(lvalue.getString());  if  (var  !=  null)  {  if  (var.isTypeInferred())  {  return;  }  }  }        [BUGGY]  Node  assign  =  t.getScope().getVar(lvalue.getString());  [BUGGY]      Node  rightChild  =  assign.getLastChild();  JSType  rightType  =  getJSType(rightChild);  if  (validator.expectCanAssignTo(  t,  assign,  rightType,  leftType,       "assignment     "))  {  ensureTyped(t,  assign,  rightType);  }  else  {  ensureTyped(t,  assign);  }  }  [CLASS]  TypeCheck  [METHOD]  visitAssign  [RETURN_TYPE]  void  NodeTraversal  t  Node  assign  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  jsType  leftType  objectJsType  rightType  rvalueType  NodeTraversal  t  DiagnosticGroup  ALL_DIAGNOSTICS  CheckLevel  reportMissingOverride  reportUnknownTypes  Var  var  Node  assign  lvalue  object  object2  rightChild  rvalue  FunctionType  functionType  ScopeCreator  scopeCreator  String  OVERRIDING_PROTOTYPE_WITH_NON_OBJECT  functionPrivateName  message  property  property2  JSDocInfo  info  int  noTypeCheckSection  nullCount  typedCount  unknownCount  TypeValidator  validator  ObjectType  type  AbstractCompiler  compiler  JSTypeRegistry  typeRegistry  boolean  enterSection  externs  inExterns  report  reportMissingProperties  typeable  Scope  outerScope  topScope  DiagnosticType  BAD_DELETE  BAD_IMPLEMENTED_TYPE  BIT_OPERATION  CONFLICTING_EXTENDED_TYPE  CONFLICTING_IMPLEMENTED_TYPE  CONSTRUCTOR_NOT_CALLABLE  DETERMINISTIC_TEST  DETERMINISTIC_TEST_NO_RESULT  ENUM_DUP  ENUM_NOT_CONSTANT  EXPECTED_THIS_TYPE  FUNCTION_MASKS_VARIABLE  HIDDEN_INTERFACE_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY_MISMATCH  ILLEGAL_IMPLICIT_CAST  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE  INEXISTENT_ENUM_ELEMENT  INEXISTENT_PROPERTY  INTERFACE_FUNCTION_NOT_EMPTY  INTERFACE_METHOD_OVERRIDE  INVALID_INTERFACE_MEMBER_DECLARATION  MULTIPLE_VAR_DEF  NOT_A_CONSTRUCTOR  NOT_CALLABLE  UNEXPECTED_TOKEN  UNKNOWN_EXPR_TYPE  UNKNOWN_OVERRIDE  UNRESOLVED_TYPE  WRONG_ARGUMENT_COUNT  diagnosticType  InferJSDocInfo  inferJSDocInfo  	projects/Closure66/src/com/google/javascript/jscomp/TypeCheck.java	0.21320071635561041	938	938	2	replace	Node  assign  =  t.getScope().getVar(lvalue.getString());	  Node    assign    =    lvalue.getFirstChild();    	non-compiled	[CE]  orphaned  case	7	None	replace
112	[BUG]  [BUGGY]  Node  rightType  =  t.getScope().getRootNode();  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      JSType  rvalueType  =  getJSType(assign.getLastChild());  Var  var  =  t.getScope().getVar(lvalue.getString());  if  (var  !=  null)  {  if  (var.isTypeInferred())  {  return;  }  }  }        [BUGGY]  Node  rightType  =  t.getScope().getRootNode();  [BUGGY]      Node  rightChild  =  assign.getLastChild();  JSType  rightType  =  getJSType(rightChild);  if  (validator.expectCanAssignTo(  t,  assign,  rightType,  leftType,       "assignment     "))  {  ensureTyped(t,  assign,  rightType);  }  else  {  ensureTyped(t,  assign);  }  }  [CLASS]  TypeCheck  [METHOD]  visitAssign  [RETURN_TYPE]  void  NodeTraversal  t  Node  assign  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  jsType  leftType  objectJsType  rightType  rvalueType  NodeTraversal  t  DiagnosticGroup  ALL_DIAGNOSTICS  CheckLevel  reportMissingOverride  reportUnknownTypes  Var  var  Node  assign  lvalue  object  object2  rightChild  rvalue  FunctionType  functionType  ScopeCreator  scopeCreator  String  OVERRIDING_PROTOTYPE_WITH_NON_OBJECT  functionPrivateName  message  property  property2  JSDocInfo  info  int  noTypeCheckSection  nullCount  typedCount  unknownCount  TypeValidator  validator  ObjectType  type  AbstractCompiler  compiler  JSTypeRegistry  typeRegistry  boolean  enterSection  externs  inExterns  report  reportMissingProperties  typeable  Scope  outerScope  topScope  DiagnosticType  BAD_DELETE  BAD_IMPLEMENTED_TYPE  BIT_OPERATION  CONFLICTING_EXTENDED_TYPE  CONFLICTING_IMPLEMENTED_TYPE  CONSTRUCTOR_NOT_CALLABLE  DETERMINISTIC_TEST  DETERMINISTIC_TEST_NO_RESULT  ENUM_DUP  ENUM_NOT_CONSTANT  EXPECTED_THIS_TYPE  FUNCTION_MASKS_VARIABLE  HIDDEN_INTERFACE_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY_MISMATCH  ILLEGAL_IMPLICIT_CAST  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE  INEXISTENT_ENUM_ELEMENT  INEXISTENT_PROPERTY  INTERFACE_FUNCTION_NOT_EMPTY  INTERFACE_METHOD_OVERRIDE  INVALID_INTERFACE_MEMBER_DECLARATION  MULTIPLE_VAR_DEF  NOT_A_CONSTRUCTOR  NOT_CALLABLE  UNEXPECTED_TOKEN  UNKNOWN_EXPR_TYPE  UNKNOWN_OVERRIDE  UNRESOLVED_TYPE  WRONG_ARGUMENT_COUNT  diagnosticType  InferJSDocInfo  inferJSDocInfo  	projects/Closure66/src/com/google/javascript/jscomp/TypeCheck.java	0.21320071635561041	938	938	2	replace	Node  rightType  =  t.getScope().getRootNode();	  Node    rightType    =    assign.getFirstChild();    	non-compiled	[CE]  orphaned  case	23	None	replace
113	[BUG]  [BUGGY]  Node  assign  =  getJSType(attribute.getFirstChild());  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      JSType  rvalueType  =  getJSType(assign.getLastChild());  Var  var  =  t.getScope().getVar(lvalue.getString());  if  (var  !=  null)  {  if  (var.isTypeInferred())  {  return;  }  }  }        [BUGGY]  Node  assign  =  getJSType(attribute.getFirstChild());  [BUGGY]      Node  rightChild  =  assign.getLastChild();  JSType  rightType  =  getJSType(rightChild);  if  (validator.expectCanAssignTo(  t,  assign,  rightType,  leftType,       "assignment     "))  {  ensureTyped(t,  assign,  rightType);  }  else  {  ensureTyped(t,  assign);  }  }  [CLASS]  TypeCheck  [METHOD]  visitAssign  [RETURN_TYPE]  void  NodeTraversal  t  Node  assign  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  jsType  leftType  objectJsType  rightType  rvalueType  NodeTraversal  t  DiagnosticGroup  ALL_DIAGNOSTICS  CheckLevel  reportMissingOverride  reportUnknownTypes  Var  var  Node  assign  lvalue  object  object2  rightChild  rvalue  FunctionType  functionType  ScopeCreator  scopeCreator  String  OVERRIDING_PROTOTYPE_WITH_NON_OBJECT  functionPrivateName  message  property  property2  JSDocInfo  info  int  noTypeCheckSection  nullCount  typedCount  unknownCount  TypeValidator  validator  ObjectType  type  AbstractCompiler  compiler  JSTypeRegistry  typeRegistry  boolean  enterSection  externs  inExterns  report  reportMissingProperties  typeable  Scope  outerScope  topScope  DiagnosticType  BAD_DELETE  BAD_IMPLEMENTED_TYPE  BIT_OPERATION  CONFLICTING_EXTENDED_TYPE  CONFLICTING_IMPLEMENTED_TYPE  CONSTRUCTOR_NOT_CALLABLE  DETERMINISTIC_TEST  DETERMINISTIC_TEST_NO_RESULT  ENUM_DUP  ENUM_NOT_CONSTANT  EXPECTED_THIS_TYPE  FUNCTION_MASKS_VARIABLE  HIDDEN_INTERFACE_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY_MISMATCH  ILLEGAL_IMPLICIT_CAST  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE  INEXISTENT_ENUM_ELEMENT  INEXISTENT_PROPERTY  INTERFACE_FUNCTION_NOT_EMPTY  INTERFACE_METHOD_OVERRIDE  INVALID_INTERFACE_MEMBER_DECLARATION  MULTIPLE_VAR_DEF  NOT_A_CONSTRUCTOR  NOT_CALLABLE  UNEXPECTED_TOKEN  UNKNOWN_EXPR_TYPE  UNKNOWN_OVERRIDE  UNRESOLVED_TYPE  WRONG_ARGUMENT_COUNT  diagnosticType  InferJSDocInfo  inferJSDocInfo  	projects/Closure66/src/com/google/javascript/jscomp/TypeCheck.java	0.21320071635561041	938	938	2	replace	Node  assign  =  getJSType(attribute.getFirstChild());	  Node    assign    =    getJSType(assign.getFirstChild());    	non-compiled	[CE]  orphaned  case	10	None	replace
114	[BUG]  [BUGGY]  Node  assign  =  getJSType(assign.getFirstChild()).return;  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      JSType  rvalueType  =  getJSType(assign.getLastChild());  Var  var  =  t.getScope().getVar(lvalue.getString());  if  (var  !=  null)  {  if  (var.isTypeInferred())  {  return;  }  }  }        [BUGGY]  Node  assign  =  getJSType(assign.getFirstChild()).return;  [BUGGY]      Node  rightChild  =  assign.getLastChild();  JSType  rightType  =  getJSType(rightChild);  if  (validator.expectCanAssignTo(  t,  assign,  rightType,  leftType,       "assignment     "))  {  ensureTyped(t,  assign,  rightType);  }  else  {  ensureTyped(t,  assign);  }  }  [CLASS]  TypeCheck  [METHOD]  visitAssign  [RETURN_TYPE]  void  NodeTraversal  t  Node  assign  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  jsType  leftType  objectJsType  rightType  rvalueType  NodeTraversal  t  DiagnosticGroup  ALL_DIAGNOSTICS  CheckLevel  reportMissingOverride  reportUnknownTypes  Var  var  Node  assign  lvalue  object  object2  rightChild  rvalue  FunctionType  functionType  ScopeCreator  scopeCreator  String  OVERRIDING_PROTOTYPE_WITH_NON_OBJECT  functionPrivateName  message  property  property2  JSDocInfo  info  int  noTypeCheckSection  nullCount  typedCount  unknownCount  TypeValidator  validator  ObjectType  type  AbstractCompiler  compiler  JSTypeRegistry  typeRegistry  boolean  enterSection  externs  inExterns  report  reportMissingProperties  typeable  Scope  outerScope  topScope  DiagnosticType  BAD_DELETE  BAD_IMPLEMENTED_TYPE  BIT_OPERATION  CONFLICTING_EXTENDED_TYPE  CONFLICTING_IMPLEMENTED_TYPE  CONSTRUCTOR_NOT_CALLABLE  DETERMINISTIC_TEST  DETERMINISTIC_TEST_NO_RESULT  ENUM_DUP  ENUM_NOT_CONSTANT  EXPECTED_THIS_TYPE  FUNCTION_MASKS_VARIABLE  HIDDEN_INTERFACE_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY_MISMATCH  ILLEGAL_IMPLICIT_CAST  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE  INEXISTENT_ENUM_ELEMENT  INEXISTENT_PROPERTY  INTERFACE_FUNCTION_NOT_EMPTY  INTERFACE_METHOD_OVERRIDE  INVALID_INTERFACE_MEMBER_DECLARATION  MULTIPLE_VAR_DEF  NOT_A_CONSTRUCTOR  NOT_CALLABLE  UNEXPECTED_TOKEN  UNKNOWN_EXPR_TYPE  UNKNOWN_OVERRIDE  UNRESOLVED_TYPE  WRONG_ARGUMENT_COUNT  diagnosticType  InferJSDocInfo  inferJSDocInfo  	projects/Closure66/src/com/google/javascript/jscomp/TypeCheck.java	0.21320071635561041	938	938	2	replace	Node  assign  =  getJSType(assign.getFirstChild()).return;	  Node    assign    =    getJSType(assign.getFirstChild());    	non-compiled	[CE]  orphaned  case	10	None	replace
115	[BUG]  [BUGGY]  Node  leftType  =  t.getFirstChild();  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      JSType  rvalueType  =  getJSType(assign.getLastChild());  Var  var  =  t.getScope().getVar(lvalue.getString());  if  (var  !=  null)  {  if  (var.isTypeInferred())  {  return;  }  }  }        [BUGGY]  Node  leftType  =  t.getFirstChild();  [BUGGY]      Node  rightChild  =  assign.getLastChild();  JSType  rightType  =  getJSType(rightChild);  if  (validator.expectCanAssignTo(  t,  assign,  rightType,  leftType,       "assignment     "))  {  ensureTyped(t,  assign,  rightType);  }  else  {  ensureTyped(t,  assign);  }  }  [CLASS]  TypeCheck  [METHOD]  visitAssign  [RETURN_TYPE]  void  NodeTraversal  t  Node  assign  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  jsType  leftType  objectJsType  rightType  rvalueType  NodeTraversal  t  DiagnosticGroup  ALL_DIAGNOSTICS  CheckLevel  reportMissingOverride  reportUnknownTypes  Var  var  Node  assign  lvalue  object  object2  rightChild  rvalue  FunctionType  functionType  ScopeCreator  scopeCreator  String  OVERRIDING_PROTOTYPE_WITH_NON_OBJECT  functionPrivateName  message  property  property2  JSDocInfo  info  int  noTypeCheckSection  nullCount  typedCount  unknownCount  TypeValidator  validator  ObjectType  type  AbstractCompiler  compiler  JSTypeRegistry  typeRegistry  boolean  enterSection  externs  inExterns  report  reportMissingProperties  typeable  Scope  outerScope  topScope  DiagnosticType  BAD_DELETE  BAD_IMPLEMENTED_TYPE  BIT_OPERATION  CONFLICTING_EXTENDED_TYPE  CONFLICTING_IMPLEMENTED_TYPE  CONSTRUCTOR_NOT_CALLABLE  DETERMINISTIC_TEST  DETERMINISTIC_TEST_NO_RESULT  ENUM_DUP  ENUM_NOT_CONSTANT  EXPECTED_THIS_TYPE  FUNCTION_MASKS_VARIABLE  HIDDEN_INTERFACE_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY_MISMATCH  ILLEGAL_IMPLICIT_CAST  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE  INEXISTENT_ENUM_ELEMENT  INEXISTENT_PROPERTY  INTERFACE_FUNCTION_NOT_EMPTY  INTERFACE_METHOD_OVERRIDE  INVALID_INTERFACE_MEMBER_DECLARATION  MULTIPLE_VAR_DEF  NOT_A_CONSTRUCTOR  NOT_CALLABLE  UNEXPECTED_TOKEN  UNKNOWN_EXPR_TYPE  UNKNOWN_OVERRIDE  UNRESOLVED_TYPE  WRONG_ARGUMENT_COUNT  diagnosticType  InferJSDocInfo  inferJSDocInfo  	projects/Closure66/src/com/google/javascript/jscomp/TypeCheck.java	0.21320071635561041	938	938	2	replace	Node  leftType  =  t.getFirstChild();	  Node    leftType    =    assign.getFirstChild();    	non-compiled	[CE]  orphaned  case	15	None	replace
116	[BUG]  [BUGGY]  JsType  leftType  =  getJSType(assign.getFirstChild(),  lvalue);  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      JSType  rvalueType  =  getJSType(assign.getLastChild());  Var  var  =  t.getScope().getVar(lvalue.getString());  if  (var  !=  null)  {  if  (var.isTypeInferred())  {  return;  }  }  }        [BUGGY]  JsType  leftType  =  getJSType(assign.getFirstChild(),  lvalue);  [BUGGY]      Node  rightChild  =  assign.getLastChild();  JSType  rightType  =  getJSType(rightChild);  if  (validator.expectCanAssignTo(  t,  assign,  rightType,  leftType,       "assignment     "))  {  ensureTyped(t,  assign,  rightType);  }  else  {  ensureTyped(t,  assign);  }  }  [CLASS]  TypeCheck  [METHOD]  visitAssign  [RETURN_TYPE]  void  NodeTraversal  t  Node  assign  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  jsType  leftType  objectJsType  rightType  rvalueType  NodeTraversal  t  DiagnosticGroup  ALL_DIAGNOSTICS  CheckLevel  reportMissingOverride  reportUnknownTypes  Var  var  Node  assign  lvalue  object  object2  rightChild  rvalue  FunctionType  functionType  ScopeCreator  scopeCreator  String  OVERRIDING_PROTOTYPE_WITH_NON_OBJECT  functionPrivateName  message  property  property2  JSDocInfo  info  int  noTypeCheckSection  nullCount  typedCount  unknownCount  TypeValidator  validator  ObjectType  type  AbstractCompiler  compiler  JSTypeRegistry  typeRegistry  boolean  enterSection  externs  inExterns  report  reportMissingProperties  typeable  Scope  outerScope  topScope  DiagnosticType  BAD_DELETE  BAD_IMPLEMENTED_TYPE  BIT_OPERATION  CONFLICTING_EXTENDED_TYPE  CONFLICTING_IMPLEMENTED_TYPE  CONSTRUCTOR_NOT_CALLABLE  DETERMINISTIC_TEST  DETERMINISTIC_TEST_NO_RESULT  ENUM_DUP  ENUM_NOT_CONSTANT  EXPECTED_THIS_TYPE  FUNCTION_MASKS_VARIABLE  HIDDEN_INTERFACE_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY_MISMATCH  ILLEGAL_IMPLICIT_CAST  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE  INEXISTENT_ENUM_ELEMENT  INEXISTENT_PROPERTY  INTERFACE_FUNCTION_NOT_EMPTY  INTERFACE_METHOD_OVERRIDE  INVALID_INTERFACE_MEMBER_DECLARATION  MULTIPLE_VAR_DEF  NOT_A_CONSTRUCTOR  NOT_CALLABLE  UNEXPECTED_TOKEN  UNKNOWN_EXPR_TYPE  UNKNOWN_OVERRIDE  UNRESOLVED_TYPE  WRONG_ARGUMENT_COUNT  diagnosticType  InferJSDocInfo  inferJSDocInfo  	projects/Closure66/src/com/google/javascript/jscomp/TypeCheck.java	0.21320071635561041	938	938	2	replace	JsType  leftType  =  getJSType(assign.getFirstChild(),  lvalue);	  JsType    leftType    =    getJSType(assign.getFirstChild());    	non-compiled	[CE]  orphaned  case	3	None	replace
117	[BUG]  [BUGGY]  JSType  leftType  =  findJSType(assign.getFirstChild(),  lvalue);  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      JSType  rvalueType  =  getJSType(assign.getLastChild());  Var  var  =  t.getScope().getVar(lvalue.getString());  if  (var  !=  null)  {  if  (var.isTypeInferred())  {  return;  }  }  }        [BUGGY]  JSType  leftType  =  findJSType(assign.getFirstChild(),  lvalue);  [BUGGY]      Node  rightChild  =  assign.getLastChild();  JSType  rightType  =  getJSType(rightChild);  if  (validator.expectCanAssignTo(  t,  assign,  rightType,  leftType,       "assignment     "))  {  ensureTyped(t,  assign,  rightType);  }  else  {  ensureTyped(t,  assign);  }  }  [CLASS]  TypeCheck  [METHOD]  visitAssign  [RETURN_TYPE]  void  NodeTraversal  t  Node  assign  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  jsType  leftType  objectJsType  rightType  rvalueType  NodeTraversal  t  DiagnosticGroup  ALL_DIAGNOSTICS  CheckLevel  reportMissingOverride  reportUnknownTypes  Var  var  Node  assign  lvalue  object  object2  rightChild  rvalue  FunctionType  functionType  ScopeCreator  scopeCreator  String  OVERRIDING_PROTOTYPE_WITH_NON_OBJECT  functionPrivateName  message  property  property2  JSDocInfo  info  int  noTypeCheckSection  nullCount  typedCount  unknownCount  TypeValidator  validator  ObjectType  type  AbstractCompiler  compiler  JSTypeRegistry  typeRegistry  boolean  enterSection  externs  inExterns  report  reportMissingProperties  typeable  Scope  outerScope  topScope  DiagnosticType  BAD_DELETE  BAD_IMPLEMENTED_TYPE  BIT_OPERATION  CONFLICTING_EXTENDED_TYPE  CONFLICTING_IMPLEMENTED_TYPE  CONSTRUCTOR_NOT_CALLABLE  DETERMINISTIC_TEST  DETERMINISTIC_TEST_NO_RESULT  ENUM_DUP  ENUM_NOT_CONSTANT  EXPECTED_THIS_TYPE  FUNCTION_MASKS_VARIABLE  HIDDEN_INTERFACE_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY_MISMATCH  ILLEGAL_IMPLICIT_CAST  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE  INEXISTENT_ENUM_ELEMENT  INEXISTENT_PROPERTY  INTERFACE_FUNCTION_NOT_EMPTY  INTERFACE_METHOD_OVERRIDE  INVALID_INTERFACE_MEMBER_DECLARATION  MULTIPLE_VAR_DEF  NOT_A_CONSTRUCTOR  NOT_CALLABLE  UNEXPECTED_TOKEN  UNKNOWN_EXPR_TYPE  UNKNOWN_OVERRIDE  UNRESOLVED_TYPE  WRONG_ARGUMENT_COUNT  diagnosticType  InferJSDocInfo  inferJSDocInfo  	projects/Closure66/src/com/google/javascript/jscomp/TypeCheck.java	0.21320071635561041	938	938	2	replace	JSType  leftType  =  findJSType(assign.getFirstChild(),  lvalue);	  JSType    leftType    =    findJSType(assign.getFirstChild());    	non-compiled	[CE]  orphaned  case	16	None	replace
