bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  Node  rightChild  =  t.getScope().getFirstChild();  [CE]  orphaned  case  [FE]              AssertionFailedError    [CONTEXT]    Var  var  =  t.getScope().getVar(lvalue.getString());  if  (var  !=  null)  {  if  (var.isTypeInferred())  {  return;  }  }  }  JSType  leftType  =  getJSType(lvalue);    [BUGGY]  Node  rightChild  =  t.getScope().getFirstChild();  [BUGGY]    JSType  rightType  =  getJSType(rightChild);  if  (validator.expectCanAssignTo(  t,  assign,  rightType,  leftType,     "assignment   "))  {  ensureTyped(t,  assign,  rightType);  }  else  {  ensureTyped(t,  assign);  }  }  [CLASS]  TypeCheck  [METHOD]  visitAssign  [RETURN_TYPE]  void  NodeTraversal  t  Node  assign  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  jsType  leftType  objectJsType  rightType  rvalueType  NodeTraversal  t  DiagnosticGroup  ALL_DIAGNOSTICS  CheckLevel  reportMissingOverride  reportUnknownTypes  Var  var  Node  assign  lvalue  object  object2  rightChild  rvalue  FunctionType  functionType  ScopeCreator  scopeCreator  String  OVERRIDING_PROTOTYPE_WITH_NON_OBJECT  functionPrivateName  message  property  property2  JSDocInfo  info  int  noTypeCheckSection  nullCount  typedCount  unknownCount  TypeValidator  validator  ObjectType  type  AbstractCompiler  compiler  JSTypeRegistry  typeRegistry  boolean  enterSection  externs  inExterns  report  reportMissingProperties  typeable  Scope  outerScope  topScope  DiagnosticType  BAD_DELETE  BAD_IMPLEMENTED_TYPE  BIT_OPERATION  CONFLICTING_EXTENDED_TYPE  CONFLICTING_IMPLEMENTED_TYPE  CONSTRUCTOR_NOT_CALLABLE  DETERMINISTIC_TEST  DETERMINISTIC_TEST_NO_RESULT  ENUM_DUP  ENUM_NOT_CONSTANT  EXPECTED_THIS_TYPE  FUNCTION_MASKS_VARIABLE  HIDDEN_INTERFACE_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY_MISMATCH  ILLEGAL_IMPLICIT_CAST  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE  INEXISTENT_ENUM_ELEMENT  INEXISTENT_PROPERTY  INTERFACE_FUNCTION_NOT_EMPTY  INTERFACE_METHOD_OVERRIDE  INVALID_INTERFACE_MEMBER_DECLARATION  MULTIPLE_VAR_DEF  NOT_A_CONSTRUCTOR  NOT_CALLABLE  UNEXPECTED_TOKEN  UNKNOWN_EXPR_TYPE  UNKNOWN_OVERRIDE  UNRESOLVED_TYPE  WRONG_ARGUMENT_COUNT  diagnosticType  InferJSDocInfo  inferJSDocInfo  	projects/Closure66/src/com/google/javascript/jscomp/TypeCheck.java	0.21320071635561041	939	939	2	replace	Node  rightChild  =  t.getScope().getFirstChild();	  Node    rightChild    =    t.getScope().getLastChild();    	non-compiled	[CE]  orphaned  case	4	None	replace
2	[BUG]  [BUGGY]  Node  rightChild  =  t.getScope().getRightChild();  [CE]  orphaned  case  [FE]                AssertionFailedError    [CONTEXT]    Var  var  =  t.getScope().getVar(lvalue.getString());  if  (var  !=  null)  {  if  (var.isTypeInferred())  {  return;  }  }  }  JSType  leftType  =  getJSType(lvalue);    [BUGGY]  Node  rightChild  =  t.getScope().getRightChild();  [BUGGY]    JSType  rightType  =  getJSType(rightChild);  if  (validator.expectCanAssignTo(  t,  assign,  rightType,  leftType,     "assignment   "))  {  ensureTyped(t,  assign,  rightType);  }  else  {  ensureTyped(t,  assign);  }  }  [CLASS]  TypeCheck  [METHOD]  visitAssign  [RETURN_TYPE]  void  NodeTraversal  t  Node  assign  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  jsType  leftType  objectJsType  rightType  rvalueType  NodeTraversal  t  DiagnosticGroup  ALL_DIAGNOSTICS  CheckLevel  reportMissingOverride  reportUnknownTypes  Var  var  Node  assign  lvalue  object  object2  rightChild  rvalue  FunctionType  functionType  ScopeCreator  scopeCreator  String  OVERRIDING_PROTOTYPE_WITH_NON_OBJECT  functionPrivateName  message  property  property2  JSDocInfo  info  int  noTypeCheckSection  nullCount  typedCount  unknownCount  TypeValidator  validator  ObjectType  type  AbstractCompiler  compiler  JSTypeRegistry  typeRegistry  boolean  enterSection  externs  inExterns  report  reportMissingProperties  typeable  Scope  outerScope  topScope  DiagnosticType  BAD_DELETE  BAD_IMPLEMENTED_TYPE  BIT_OPERATION  CONFLICTING_EXTENDED_TYPE  CONFLICTING_IMPLEMENTED_TYPE  CONSTRUCTOR_NOT_CALLABLE  DETERMINISTIC_TEST  DETERMINISTIC_TEST_NO_RESULT  ENUM_DUP  ENUM_NOT_CONSTANT  EXPECTED_THIS_TYPE  FUNCTION_MASKS_VARIABLE  HIDDEN_INTERFACE_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY_MISMATCH  ILLEGAL_IMPLICIT_CAST  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE  INEXISTENT_ENUM_ELEMENT  INEXISTENT_PROPERTY  INTERFACE_FUNCTION_NOT_EMPTY  INTERFACE_METHOD_OVERRIDE  INVALID_INTERFACE_MEMBER_DECLARATION  MULTIPLE_VAR_DEF  NOT_A_CONSTRUCTOR  NOT_CALLABLE  UNEXPECTED_TOKEN  UNKNOWN_EXPR_TYPE  UNKNOWN_OVERRIDE  UNRESOLVED_TYPE  WRONG_ARGUMENT_COUNT  diagnosticType  InferJSDocInfo  inferJSDocInfo  	projects/Closure66/src/com/google/javascript/jscomp/TypeCheck.java	0.21320071635561041	939	939	2	replace	Node  rightChild  =  t.getScope().getRightChild();	  Node    rightChild    =    t.getScope().getLastChild();    	non-compiled	[CE]  orphaned  case	4	None	replace
3	[BUG]  [BUGGY]  Node  rightChild  =  t.getScope().getNext();  [CE]  orphaned  case  [FE]                  AssertionFailedError    [CONTEXT]    Var  var  =  t.getScope().getVar(lvalue.getString());  if  (var  !=  null)  {  if  (var.isTypeInferred())  {  return;  }  }  }  JSType  leftType  =  getJSType(lvalue);    [BUGGY]  Node  rightChild  =  t.getScope().getNext();  [BUGGY]    JSType  rightType  =  getJSType(rightChild);  if  (validator.expectCanAssignTo(  t,  assign,  rightType,  leftType,     "assignment   "))  {  ensureTyped(t,  assign,  rightType);  }  else  {  ensureTyped(t,  assign);  }  }  [CLASS]  TypeCheck  [METHOD]  visitAssign  [RETURN_TYPE]  void  NodeTraversal  t  Node  assign  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  jsType  leftType  objectJsType  rightType  rvalueType  NodeTraversal  t  DiagnosticGroup  ALL_DIAGNOSTICS  CheckLevel  reportMissingOverride  reportUnknownTypes  Var  var  Node  assign  lvalue  object  object2  rightChild  rvalue  FunctionType  functionType  ScopeCreator  scopeCreator  String  OVERRIDING_PROTOTYPE_WITH_NON_OBJECT  functionPrivateName  message  property  property2  JSDocInfo  info  int  noTypeCheckSection  nullCount  typedCount  unknownCount  TypeValidator  validator  ObjectType  type  AbstractCompiler  compiler  JSTypeRegistry  typeRegistry  boolean  enterSection  externs  inExterns  report  reportMissingProperties  typeable  Scope  outerScope  topScope  DiagnosticType  BAD_DELETE  BAD_IMPLEMENTED_TYPE  BIT_OPERATION  CONFLICTING_EXTENDED_TYPE  CONFLICTING_IMPLEMENTED_TYPE  CONSTRUCTOR_NOT_CALLABLE  DETERMINISTIC_TEST  DETERMINISTIC_TEST_NO_RESULT  ENUM_DUP  ENUM_NOT_CONSTANT  EXPECTED_THIS_TYPE  FUNCTION_MASKS_VARIABLE  HIDDEN_INTERFACE_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY_MISMATCH  ILLEGAL_IMPLICIT_CAST  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE  INEXISTENT_ENUM_ELEMENT  INEXISTENT_PROPERTY  INTERFACE_FUNCTION_NOT_EMPTY  INTERFACE_METHOD_OVERRIDE  INVALID_INTERFACE_MEMBER_DECLARATION  MULTIPLE_VAR_DEF  NOT_A_CONSTRUCTOR  NOT_CALLABLE  UNEXPECTED_TOKEN  UNKNOWN_EXPR_TYPE  UNKNOWN_OVERRIDE  UNRESOLVED_TYPE  WRONG_ARGUMENT_COUNT  diagnosticType  InferJSDocInfo  inferJSDocInfo  	projects/Closure66/src/com/google/javascript/jscomp/TypeCheck.java	0.21320071635561041	939	939	2	replace	Node  rightChild  =  t.getScope().getNext();	  Node    rightChild    =    t.getScope().getLastChild();    	non-compiled	[CE]  orphaned  case	4	None	replace
4	[BUG]  [BUGGY]  Node  rightChild  =  t.getScope().getLeastChild();  [CE]  orphaned  case  [FE]                    AssertionFailedError    [CONTEXT]    Var  var  =  t.getScope().getVar(lvalue.getString());  if  (var  !=  null)  {  if  (var.isTypeInferred())  {  return;  }  }  }  JSType  leftType  =  getJSType(lvalue);    [BUGGY]  Node  rightChild  =  t.getScope().getLeastChild();  [BUGGY]    JSType  rightType  =  getJSType(rightChild);  if  (validator.expectCanAssignTo(  t,  assign,  rightType,  leftType,     "assignment   "))  {  ensureTyped(t,  assign,  rightType);  }  else  {  ensureTyped(t,  assign);  }  }  [CLASS]  TypeCheck  [METHOD]  visitAssign  [RETURN_TYPE]  void  NodeTraversal  t  Node  assign  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  jsType  leftType  objectJsType  rightType  rvalueType  NodeTraversal  t  DiagnosticGroup  ALL_DIAGNOSTICS  CheckLevel  reportMissingOverride  reportUnknownTypes  Var  var  Node  assign  lvalue  object  object2  rightChild  rvalue  FunctionType  functionType  ScopeCreator  scopeCreator  String  OVERRIDING_PROTOTYPE_WITH_NON_OBJECT  functionPrivateName  message  property  property2  JSDocInfo  info  int  noTypeCheckSection  nullCount  typedCount  unknownCount  TypeValidator  validator  ObjectType  type  AbstractCompiler  compiler  JSTypeRegistry  typeRegistry  boolean  enterSection  externs  inExterns  report  reportMissingProperties  typeable  Scope  outerScope  topScope  DiagnosticType  BAD_DELETE  BAD_IMPLEMENTED_TYPE  BIT_OPERATION  CONFLICTING_EXTENDED_TYPE  CONFLICTING_IMPLEMENTED_TYPE  CONSTRUCTOR_NOT_CALLABLE  DETERMINISTIC_TEST  DETERMINISTIC_TEST_NO_RESULT  ENUM_DUP  ENUM_NOT_CONSTANT  EXPECTED_THIS_TYPE  FUNCTION_MASKS_VARIABLE  HIDDEN_INTERFACE_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY_MISMATCH  ILLEGAL_IMPLICIT_CAST  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE  INEXISTENT_ENUM_ELEMENT  INEXISTENT_PROPERTY  INTERFACE_FUNCTION_NOT_EMPTY  INTERFACE_METHOD_OVERRIDE  INVALID_INTERFACE_MEMBER_DECLARATION  MULTIPLE_VAR_DEF  NOT_A_CONSTRUCTOR  NOT_CALLABLE  UNEXPECTED_TOKEN  UNKNOWN_EXPR_TYPE  UNKNOWN_OVERRIDE  UNRESOLVED_TYPE  WRONG_ARGUMENT_COUNT  diagnosticType  InferJSDocInfo  inferJSDocInfo  	projects/Closure66/src/com/google/javascript/jscomp/TypeCheck.java	0.21320071635561041	939	939	2	replace	Node  rightChild  =  t.getScope().getLeastChild();	  Node    rightChild    =    t.getScope().getLastChild();    	non-compiled	[CE]  orphaned  case	4	None	replace
5	[BUG]  [BUGGY]  Node  rightChild  =  t.getScope().getParent();  [CE]  orphaned  case  [FE]                      AssertionFailedError    [CONTEXT]    Var  var  =  t.getScope().getVar(lvalue.getString());  if  (var  !=  null)  {  if  (var.isTypeInferred())  {  return;  }  }  }  JSType  leftType  =  getJSType(lvalue);    [BUGGY]  Node  rightChild  =  t.getScope().getParent();  [BUGGY]    JSType  rightType  =  getJSType(rightChild);  if  (validator.expectCanAssignTo(  t,  assign,  rightType,  leftType,     "assignment   "))  {  ensureTyped(t,  assign,  rightType);  }  else  {  ensureTyped(t,  assign);  }  }  [CLASS]  TypeCheck  [METHOD]  visitAssign  [RETURN_TYPE]  void  NodeTraversal  t  Node  assign  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  jsType  leftType  objectJsType  rightType  rvalueType  NodeTraversal  t  DiagnosticGroup  ALL_DIAGNOSTICS  CheckLevel  reportMissingOverride  reportUnknownTypes  Var  var  Node  assign  lvalue  object  object2  rightChild  rvalue  FunctionType  functionType  ScopeCreator  scopeCreator  String  OVERRIDING_PROTOTYPE_WITH_NON_OBJECT  functionPrivateName  message  property  property2  JSDocInfo  info  int  noTypeCheckSection  nullCount  typedCount  unknownCount  TypeValidator  validator  ObjectType  type  AbstractCompiler  compiler  JSTypeRegistry  typeRegistry  boolean  enterSection  externs  inExterns  report  reportMissingProperties  typeable  Scope  outerScope  topScope  DiagnosticType  BAD_DELETE  BAD_IMPLEMENTED_TYPE  BIT_OPERATION  CONFLICTING_EXTENDED_TYPE  CONFLICTING_IMPLEMENTED_TYPE  CONSTRUCTOR_NOT_CALLABLE  DETERMINISTIC_TEST  DETERMINISTIC_TEST_NO_RESULT  ENUM_DUP  ENUM_NOT_CONSTANT  EXPECTED_THIS_TYPE  FUNCTION_MASKS_VARIABLE  HIDDEN_INTERFACE_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY_MISMATCH  ILLEGAL_IMPLICIT_CAST  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE  INEXISTENT_ENUM_ELEMENT  INEXISTENT_PROPERTY  INTERFACE_FUNCTION_NOT_EMPTY  INTERFACE_METHOD_OVERRIDE  INVALID_INTERFACE_MEMBER_DECLARATION  MULTIPLE_VAR_DEF  NOT_A_CONSTRUCTOR  NOT_CALLABLE  UNEXPECTED_TOKEN  UNKNOWN_EXPR_TYPE  UNKNOWN_OVERRIDE  UNRESOLVED_TYPE  WRONG_ARGUMENT_COUNT  diagnosticType  InferJSDocInfo  inferJSDocInfo  	projects/Closure66/src/com/google/javascript/jscomp/TypeCheck.java	0.21320071635561041	939	939	2	replace	Node  rightChild  =  t.getScope().getParent();	  Node    rightChild    =    t.getScope().getLastChild();    	non-compiled	[CE]  orphaned  case	4	None	replace
6	[BUG]  [BUGGY]  Node  rightChild  =  t.getScope().getLastChild().getNext();  [CE]  orphaned  case  [FE]                        AssertionFailedError    [CONTEXT]    Var  var  =  t.getScope().getVar(lvalue.getString());  if  (var  !=  null)  {  if  (var.isTypeInferred())  {  return;  }  }  }  JSType  leftType  =  getJSType(lvalue);    [BUGGY]  Node  rightChild  =  t.getScope().getLastChild().getNext();  [BUGGY]    JSType  rightType  =  getJSType(rightChild);  if  (validator.expectCanAssignTo(  t,  assign,  rightType,  leftType,     "assignment   "))  {  ensureTyped(t,  assign,  rightType);  }  else  {  ensureTyped(t,  assign);  }  }  [CLASS]  TypeCheck  [METHOD]  visitAssign  [RETURN_TYPE]  void  NodeTraversal  t  Node  assign  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  jsType  leftType  objectJsType  rightType  rvalueType  NodeTraversal  t  DiagnosticGroup  ALL_DIAGNOSTICS  CheckLevel  reportMissingOverride  reportUnknownTypes  Var  var  Node  assign  lvalue  object  object2  rightChild  rvalue  FunctionType  functionType  ScopeCreator  scopeCreator  String  OVERRIDING_PROTOTYPE_WITH_NON_OBJECT  functionPrivateName  message  property  property2  JSDocInfo  info  int  noTypeCheckSection  nullCount  typedCount  unknownCount  TypeValidator  validator  ObjectType  type  AbstractCompiler  compiler  JSTypeRegistry  typeRegistry  boolean  enterSection  externs  inExterns  report  reportMissingProperties  typeable  Scope  outerScope  topScope  DiagnosticType  BAD_DELETE  BAD_IMPLEMENTED_TYPE  BIT_OPERATION  CONFLICTING_EXTENDED_TYPE  CONFLICTING_IMPLEMENTED_TYPE  CONSTRUCTOR_NOT_CALLABLE  DETERMINISTIC_TEST  DETERMINISTIC_TEST_NO_RESULT  ENUM_DUP  ENUM_NOT_CONSTANT  EXPECTED_THIS_TYPE  FUNCTION_MASKS_VARIABLE  HIDDEN_INTERFACE_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY_MISMATCH  ILLEGAL_IMPLICIT_CAST  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE  INEXISTENT_ENUM_ELEMENT  INEXISTENT_PROPERTY  INTERFACE_FUNCTION_NOT_EMPTY  INTERFACE_METHOD_OVERRIDE  INVALID_INTERFACE_MEMBER_DECLARATION  MULTIPLE_VAR_DEF  NOT_A_CONSTRUCTOR  NOT_CALLABLE  UNEXPECTED_TOKEN  UNKNOWN_EXPR_TYPE  UNKNOWN_OVERRIDE  UNRESOLVED_TYPE  WRONG_ARGUMENT_COUNT  diagnosticType  InferJSDocInfo  inferJSDocInfo  	projects/Closure66/src/com/google/javascript/jscomp/TypeCheck.java	0.21320071635561041	939	939	2	replace	Node  rightChild  =  t.getScope().getLastChild().getNext();	  Node    rightChild    =    t.getScope().getLastChild();    	non-compiled	[CE]  orphaned  case	4	None	replace
7	[BUG]  [BUGGY]  Node  rightChild  =  t.getScope().getVar(leftType.getString());  [CE]  orphaned  case  [FE]        AssertionFailedError    [CONTEXT]    Var  var  =  t.getScope().getVar(lvalue.getString());  if  (var  !=  null)  {  if  (var.isTypeInferred())  {  return;  }  }  }  JSType  leftType  =  getJSType(lvalue);    [BUGGY]  Node  rightChild  =  t.getScope().getVar(leftType.getString());  [BUGGY]    JSType  rightType  =  getJSType(rightChild);  if  (validator.expectCanAssignTo(  t,  assign,  rightType,  leftType,     "assignment   "))  {  ensureTyped(t,  assign,  rightType);  }  else  {  ensureTyped(t,  assign);  }  }  [CLASS]  TypeCheck  [METHOD]  visitAssign  [RETURN_TYPE]  void  NodeTraversal  t  Node  assign  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  jsType  leftType  objectJsType  rightType  rvalueType  NodeTraversal  t  DiagnosticGroup  ALL_DIAGNOSTICS  CheckLevel  reportMissingOverride  reportUnknownTypes  Var  var  Node  assign  lvalue  object  object2  rightChild  rvalue  FunctionType  functionType  ScopeCreator  scopeCreator  String  OVERRIDING_PROTOTYPE_WITH_NON_OBJECT  functionPrivateName  message  property  property2  JSDocInfo  info  int  noTypeCheckSection  nullCount  typedCount  unknownCount  TypeValidator  validator  ObjectType  type  AbstractCompiler  compiler  JSTypeRegistry  typeRegistry  boolean  enterSection  externs  inExterns  report  reportMissingProperties  typeable  Scope  outerScope  topScope  DiagnosticType  BAD_DELETE  BAD_IMPLEMENTED_TYPE  BIT_OPERATION  CONFLICTING_EXTENDED_TYPE  CONFLICTING_IMPLEMENTED_TYPE  CONSTRUCTOR_NOT_CALLABLE  DETERMINISTIC_TEST  DETERMINISTIC_TEST_NO_RESULT  ENUM_DUP  ENUM_NOT_CONSTANT  EXPECTED_THIS_TYPE  FUNCTION_MASKS_VARIABLE  HIDDEN_INTERFACE_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY_MISMATCH  ILLEGAL_IMPLICIT_CAST  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE  INEXISTENT_ENUM_ELEMENT  INEXISTENT_PROPERTY  INTERFACE_FUNCTION_NOT_EMPTY  INTERFACE_METHOD_OVERRIDE  INVALID_INTERFACE_MEMBER_DECLARATION  MULTIPLE_VAR_DEF  NOT_A_CONSTRUCTOR  NOT_CALLABLE  UNEXPECTED_TOKEN  UNKNOWN_EXPR_TYPE  UNKNOWN_OVERRIDE  UNRESOLVED_TYPE  WRONG_ARGUMENT_COUNT  diagnosticType  InferJSDocInfo  inferJSDocInfo  	projects/Closure66/src/com/google/javascript/jscomp/TypeCheck.java	0.21320071635561041	939	939	2	replace	Node  rightChild  =  t.getScope().getVar(leftType.getString());	  Node    rightChild    =    t.getScope().getVar(lvalue.getString());    	non-compiled	[CE]  orphaned  case	11	None	replace
8	[BUG]  [BUGGY]  Node  rightChild  =  t.getScope().getVar(lvalue.getString(),  leftType);  [CE]  orphaned  case  [FE]          AssertionFailedError    [CONTEXT]    Var  var  =  t.getScope().getVar(lvalue.getString());  if  (var  !=  null)  {  if  (var.isTypeInferred())  {  return;  }  }  }  JSType  leftType  =  getJSType(lvalue);    [BUGGY]  Node  rightChild  =  t.getScope().getVar(lvalue.getString(),  leftType);  [BUGGY]    JSType  rightType  =  getJSType(rightChild);  if  (validator.expectCanAssignTo(  t,  assign,  rightType,  leftType,     "assignment   "))  {  ensureTyped(t,  assign,  rightType);  }  else  {  ensureTyped(t,  assign);  }  }  [CLASS]  TypeCheck  [METHOD]  visitAssign  [RETURN_TYPE]  void  NodeTraversal  t  Node  assign  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  jsType  leftType  objectJsType  rightType  rvalueType  NodeTraversal  t  DiagnosticGroup  ALL_DIAGNOSTICS  CheckLevel  reportMissingOverride  reportUnknownTypes  Var  var  Node  assign  lvalue  object  object2  rightChild  rvalue  FunctionType  functionType  ScopeCreator  scopeCreator  String  OVERRIDING_PROTOTYPE_WITH_NON_OBJECT  functionPrivateName  message  property  property2  JSDocInfo  info  int  noTypeCheckSection  nullCount  typedCount  unknownCount  TypeValidator  validator  ObjectType  type  AbstractCompiler  compiler  JSTypeRegistry  typeRegistry  boolean  enterSection  externs  inExterns  report  reportMissingProperties  typeable  Scope  outerScope  topScope  DiagnosticType  BAD_DELETE  BAD_IMPLEMENTED_TYPE  BIT_OPERATION  CONFLICTING_EXTENDED_TYPE  CONFLICTING_IMPLEMENTED_TYPE  CONSTRUCTOR_NOT_CALLABLE  DETERMINISTIC_TEST  DETERMINISTIC_TEST_NO_RESULT  ENUM_DUP  ENUM_NOT_CONSTANT  EXPECTED_THIS_TYPE  FUNCTION_MASKS_VARIABLE  HIDDEN_INTERFACE_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY_MISMATCH  ILLEGAL_IMPLICIT_CAST  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE  INEXISTENT_ENUM_ELEMENT  INEXISTENT_PROPERTY  INTERFACE_FUNCTION_NOT_EMPTY  INTERFACE_METHOD_OVERRIDE  INVALID_INTERFACE_MEMBER_DECLARATION  MULTIPLE_VAR_DEF  NOT_A_CONSTRUCTOR  NOT_CALLABLE  UNEXPECTED_TOKEN  UNKNOWN_EXPR_TYPE  UNKNOWN_OVERRIDE  UNRESOLVED_TYPE  WRONG_ARGUMENT_COUNT  diagnosticType  InferJSDocInfo  inferJSDocInfo  	projects/Closure66/src/com/google/javascript/jscomp/TypeCheck.java	0.21320071635561041	939	939	2	replace	Node  rightChild  =  t.getScope().getVar(lvalue.getString(),  leftType);	  Node    rightChild    =    t.getScope().getVar(lvalue.getString());    	non-compiled	[CE]  orphaned  case	11	None	replace
9	[BUG]  [BUGGY]  Node  rightChild  =  t.getScope().getVar(lvalue.getString()  +  1);  [CE]  orphaned  case  [FE]            AssertionFailedError    [CONTEXT]    Var  var  =  t.getScope().getVar(lvalue.getString());  if  (var  !=  null)  {  if  (var.isTypeInferred())  {  return;  }  }  }  JSType  leftType  =  getJSType(lvalue);    [BUGGY]  Node  rightChild  =  t.getScope().getVar(lvalue.getString()  +  1);  [BUGGY]    JSType  rightType  =  getJSType(rightChild);  if  (validator.expectCanAssignTo(  t,  assign,  rightType,  leftType,     "assignment   "))  {  ensureTyped(t,  assign,  rightType);  }  else  {  ensureTyped(t,  assign);  }  }  [CLASS]  TypeCheck  [METHOD]  visitAssign  [RETURN_TYPE]  void  NodeTraversal  t  Node  assign  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  jsType  leftType  objectJsType  rightType  rvalueType  NodeTraversal  t  DiagnosticGroup  ALL_DIAGNOSTICS  CheckLevel  reportMissingOverride  reportUnknownTypes  Var  var  Node  assign  lvalue  object  object2  rightChild  rvalue  FunctionType  functionType  ScopeCreator  scopeCreator  String  OVERRIDING_PROTOTYPE_WITH_NON_OBJECT  functionPrivateName  message  property  property2  JSDocInfo  info  int  noTypeCheckSection  nullCount  typedCount  unknownCount  TypeValidator  validator  ObjectType  type  AbstractCompiler  compiler  JSTypeRegistry  typeRegistry  boolean  enterSection  externs  inExterns  report  reportMissingProperties  typeable  Scope  outerScope  topScope  DiagnosticType  BAD_DELETE  BAD_IMPLEMENTED_TYPE  BIT_OPERATION  CONFLICTING_EXTENDED_TYPE  CONFLICTING_IMPLEMENTED_TYPE  CONSTRUCTOR_NOT_CALLABLE  DETERMINISTIC_TEST  DETERMINISTIC_TEST_NO_RESULT  ENUM_DUP  ENUM_NOT_CONSTANT  EXPECTED_THIS_TYPE  FUNCTION_MASKS_VARIABLE  HIDDEN_INTERFACE_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY_MISMATCH  ILLEGAL_IMPLICIT_CAST  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE  INEXISTENT_ENUM_ELEMENT  INEXISTENT_PROPERTY  INTERFACE_FUNCTION_NOT_EMPTY  INTERFACE_METHOD_OVERRIDE  INVALID_INTERFACE_MEMBER_DECLARATION  MULTIPLE_VAR_DEF  NOT_A_CONSTRUCTOR  NOT_CALLABLE  UNEXPECTED_TOKEN  UNKNOWN_EXPR_TYPE  UNKNOWN_OVERRIDE  UNRESOLVED_TYPE  WRONG_ARGUMENT_COUNT  diagnosticType  InferJSDocInfo  inferJSDocInfo  	projects/Closure66/src/com/google/javascript/jscomp/TypeCheck.java	0.21320071635561041	939	939	2	replace	Node  rightChild  =  t.getScope().getVar(lvalue.getString()  +  1);	  Node    rightChild    =    t.getScope().getVar(lvalue.getString());    	non-compiled	[CE]  orphaned  case	11	None	replace
10	[BUG]  [BUGGY]  Node  rightChild  =  t.getScope().getVar(rightType.getString());  [CE]  orphaned  case  [FE]              AssertionFailedError    [CONTEXT]    Var  var  =  t.getScope().getVar(lvalue.getString());  if  (var  !=  null)  {  if  (var.isTypeInferred())  {  return;  }  }  }  JSType  leftType  =  getJSType(lvalue);    [BUGGY]  Node  rightChild  =  t.getScope().getVar(rightType.getString());  [BUGGY]    JSType  rightType  =  getJSType(rightChild);  if  (validator.expectCanAssignTo(  t,  assign,  rightType,  leftType,     "assignment   "))  {  ensureTyped(t,  assign,  rightType);  }  else  {  ensureTyped(t,  assign);  }  }  [CLASS]  TypeCheck  [METHOD]  visitAssign  [RETURN_TYPE]  void  NodeTraversal  t  Node  assign  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  jsType  leftType  objectJsType  rightType  rvalueType  NodeTraversal  t  DiagnosticGroup  ALL_DIAGNOSTICS  CheckLevel  reportMissingOverride  reportUnknownTypes  Var  var  Node  assign  lvalue  object  object2  rightChild  rvalue  FunctionType  functionType  ScopeCreator  scopeCreator  String  OVERRIDING_PROTOTYPE_WITH_NON_OBJECT  functionPrivateName  message  property  property2  JSDocInfo  info  int  noTypeCheckSection  nullCount  typedCount  unknownCount  TypeValidator  validator  ObjectType  type  AbstractCompiler  compiler  JSTypeRegistry  typeRegistry  boolean  enterSection  externs  inExterns  report  reportMissingProperties  typeable  Scope  outerScope  topScope  DiagnosticType  BAD_DELETE  BAD_IMPLEMENTED_TYPE  BIT_OPERATION  CONFLICTING_EXTENDED_TYPE  CONFLICTING_IMPLEMENTED_TYPE  CONSTRUCTOR_NOT_CALLABLE  DETERMINISTIC_TEST  DETERMINISTIC_TEST_NO_RESULT  ENUM_DUP  ENUM_NOT_CONSTANT  EXPECTED_THIS_TYPE  FUNCTION_MASKS_VARIABLE  HIDDEN_INTERFACE_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY_MISMATCH  ILLEGAL_IMPLICIT_CAST  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE  INEXISTENT_ENUM_ELEMENT  INEXISTENT_PROPERTY  INTERFACE_FUNCTION_NOT_EMPTY  INTERFACE_METHOD_OVERRIDE  INVALID_INTERFACE_MEMBER_DECLARATION  MULTIPLE_VAR_DEF  NOT_A_CONSTRUCTOR  NOT_CALLABLE  UNEXPECTED_TOKEN  UNKNOWN_EXPR_TYPE  UNKNOWN_OVERRIDE  UNRESOLVED_TYPE  WRONG_ARGUMENT_COUNT  diagnosticType  InferJSDocInfo  inferJSDocInfo  	projects/Closure66/src/com/google/javascript/jscomp/TypeCheck.java	0.21320071635561041	939	939	2	replace	Node  rightChild  =  t.getScope().getVar(rightType.getString());	  Node    rightChild    =    t.getScope().getVar(lvalue.getString());    	non-compiled	[CE]  orphaned  case	11	None	replace
11	[BUG]  [BUGGY]  Node  rightChild  =  t.getScope().getVar(lvalue.toString());  [CE]  orphaned  case  [FE]                AssertionFailedError    [CONTEXT]    Var  var  =  t.getScope().getVar(lvalue.getString());  if  (var  !=  null)  {  if  (var.isTypeInferred())  {  return;  }  }  }  JSType  leftType  =  getJSType(lvalue);    [BUGGY]  Node  rightChild  =  t.getScope().getVar(lvalue.toString());  [BUGGY]    JSType  rightType  =  getJSType(rightChild);  if  (validator.expectCanAssignTo(  t,  assign,  rightType,  leftType,     "assignment   "))  {  ensureTyped(t,  assign,  rightType);  }  else  {  ensureTyped(t,  assign);  }  }  [CLASS]  TypeCheck  [METHOD]  visitAssign  [RETURN_TYPE]  void  NodeTraversal  t  Node  assign  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  jsType  leftType  objectJsType  rightType  rvalueType  NodeTraversal  t  DiagnosticGroup  ALL_DIAGNOSTICS  CheckLevel  reportMissingOverride  reportUnknownTypes  Var  var  Node  assign  lvalue  object  object2  rightChild  rvalue  FunctionType  functionType  ScopeCreator  scopeCreator  String  OVERRIDING_PROTOTYPE_WITH_NON_OBJECT  functionPrivateName  message  property  property2  JSDocInfo  info  int  noTypeCheckSection  nullCount  typedCount  unknownCount  TypeValidator  validator  ObjectType  type  AbstractCompiler  compiler  JSTypeRegistry  typeRegistry  boolean  enterSection  externs  inExterns  report  reportMissingProperties  typeable  Scope  outerScope  topScope  DiagnosticType  BAD_DELETE  BAD_IMPLEMENTED_TYPE  BIT_OPERATION  CONFLICTING_EXTENDED_TYPE  CONFLICTING_IMPLEMENTED_TYPE  CONSTRUCTOR_NOT_CALLABLE  DETERMINISTIC_TEST  DETERMINISTIC_TEST_NO_RESULT  ENUM_DUP  ENUM_NOT_CONSTANT  EXPECTED_THIS_TYPE  FUNCTION_MASKS_VARIABLE  HIDDEN_INTERFACE_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY_MISMATCH  ILLEGAL_IMPLICIT_CAST  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE  INEXISTENT_ENUM_ELEMENT  INEXISTENT_PROPERTY  INTERFACE_FUNCTION_NOT_EMPTY  INTERFACE_METHOD_OVERRIDE  INVALID_INTERFACE_MEMBER_DECLARATION  MULTIPLE_VAR_DEF  NOT_A_CONSTRUCTOR  NOT_CALLABLE  UNEXPECTED_TOKEN  UNKNOWN_EXPR_TYPE  UNKNOWN_OVERRIDE  UNRESOLVED_TYPE  WRONG_ARGUMENT_COUNT  diagnosticType  InferJSDocInfo  inferJSDocInfo  	projects/Closure66/src/com/google/javascript/jscomp/TypeCheck.java	0.21320071635561041	939	939	2	replace	Node  rightChild  =  t.getScope().getVar(lvalue.toString());	  Node    rightChild    =    t.getScope().getVar(lvalue.getString());    	non-compiled	[CE]  orphaned  case	11	None	replace
12	[BUG]  [BUGGY]  Node  rightChild  =  t.getScope().getVar(rvalue.getString());  [CE]  orphaned  case  [FE]                  AssertionFailedError    [CONTEXT]    Var  var  =  t.getScope().getVar(lvalue.getString());  if  (var  !=  null)  {  if  (var.isTypeInferred())  {  return;  }  }  }  JSType  leftType  =  getJSType(lvalue);    [BUGGY]  Node  rightChild  =  t.getScope().getVar(rvalue.getString());  [BUGGY]    JSType  rightType  =  getJSType(rightChild);  if  (validator.expectCanAssignTo(  t,  assign,  rightType,  leftType,     "assignment   "))  {  ensureTyped(t,  assign,  rightType);  }  else  {  ensureTyped(t,  assign);  }  }  [CLASS]  TypeCheck  [METHOD]  visitAssign  [RETURN_TYPE]  void  NodeTraversal  t  Node  assign  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  jsType  leftType  objectJsType  rightType  rvalueType  NodeTraversal  t  DiagnosticGroup  ALL_DIAGNOSTICS  CheckLevel  reportMissingOverride  reportUnknownTypes  Var  var  Node  assign  lvalue  object  object2  rightChild  rvalue  FunctionType  functionType  ScopeCreator  scopeCreator  String  OVERRIDING_PROTOTYPE_WITH_NON_OBJECT  functionPrivateName  message  property  property2  JSDocInfo  info  int  noTypeCheckSection  nullCount  typedCount  unknownCount  TypeValidator  validator  ObjectType  type  AbstractCompiler  compiler  JSTypeRegistry  typeRegistry  boolean  enterSection  externs  inExterns  report  reportMissingProperties  typeable  Scope  outerScope  topScope  DiagnosticType  BAD_DELETE  BAD_IMPLEMENTED_TYPE  BIT_OPERATION  CONFLICTING_EXTENDED_TYPE  CONFLICTING_IMPLEMENTED_TYPE  CONSTRUCTOR_NOT_CALLABLE  DETERMINISTIC_TEST  DETERMINISTIC_TEST_NO_RESULT  ENUM_DUP  ENUM_NOT_CONSTANT  EXPECTED_THIS_TYPE  FUNCTION_MASKS_VARIABLE  HIDDEN_INTERFACE_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY_MISMATCH  ILLEGAL_IMPLICIT_CAST  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE  INEXISTENT_ENUM_ELEMENT  INEXISTENT_PROPERTY  INTERFACE_FUNCTION_NOT_EMPTY  INTERFACE_METHOD_OVERRIDE  INVALID_INTERFACE_MEMBER_DECLARATION  MULTIPLE_VAR_DEF  NOT_A_CONSTRUCTOR  NOT_CALLABLE  UNEXPECTED_TOKEN  UNKNOWN_EXPR_TYPE  UNKNOWN_OVERRIDE  UNRESOLVED_TYPE  WRONG_ARGUMENT_COUNT  diagnosticType  InferJSDocInfo  inferJSDocInfo  	projects/Closure66/src/com/google/javascript/jscomp/TypeCheck.java	0.21320071635561041	939	939	2	replace	Node  rightChild  =  t.getScope().getVar(rvalue.getString());	  Node    rightChild    =    t.getScope().getVar(lvalue.getString());    	non-compiled	[CE]  orphaned  case	11	None	replace
13	[BUG]  [BUGGY]  Node  rightChild  =  lvalue.getFirstChild();  [CE]  orphaned  case  [FE]                AssertionFailedError    [CONTEXT]    Var  var  =  t.getScope().getVar(lvalue.getString());  if  (var  !=  null)  {  if  (var.isTypeInferred())  {  return;  }  }  }  JSType  leftType  =  getJSType(lvalue);    [BUGGY]  Node  rightChild  =  lvalue.getFirstChild();  [BUGGY]    JSType  rightType  =  getJSType(rightChild);  if  (validator.expectCanAssignTo(  t,  assign,  rightType,  leftType,     "assignment   "))  {  ensureTyped(t,  assign,  rightType);  }  else  {  ensureTyped(t,  assign);  }  }  [CLASS]  TypeCheck  [METHOD]  visitAssign  [RETURN_TYPE]  void  NodeTraversal  t  Node  assign  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  jsType  leftType  objectJsType  rightType  rvalueType  NodeTraversal  t  DiagnosticGroup  ALL_DIAGNOSTICS  CheckLevel  reportMissingOverride  reportUnknownTypes  Var  var  Node  assign  lvalue  object  object2  rightChild  rvalue  FunctionType  functionType  ScopeCreator  scopeCreator  String  OVERRIDING_PROTOTYPE_WITH_NON_OBJECT  functionPrivateName  message  property  property2  JSDocInfo  info  int  noTypeCheckSection  nullCount  typedCount  unknownCount  TypeValidator  validator  ObjectType  type  AbstractCompiler  compiler  JSTypeRegistry  typeRegistry  boolean  enterSection  externs  inExterns  report  reportMissingProperties  typeable  Scope  outerScope  topScope  DiagnosticType  BAD_DELETE  BAD_IMPLEMENTED_TYPE  BIT_OPERATION  CONFLICTING_EXTENDED_TYPE  CONFLICTING_IMPLEMENTED_TYPE  CONSTRUCTOR_NOT_CALLABLE  DETERMINISTIC_TEST  DETERMINISTIC_TEST_NO_RESULT  ENUM_DUP  ENUM_NOT_CONSTANT  EXPECTED_THIS_TYPE  FUNCTION_MASKS_VARIABLE  HIDDEN_INTERFACE_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY_MISMATCH  ILLEGAL_IMPLICIT_CAST  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE  INEXISTENT_ENUM_ELEMENT  INEXISTENT_PROPERTY  INTERFACE_FUNCTION_NOT_EMPTY  INTERFACE_METHOD_OVERRIDE  INVALID_INTERFACE_MEMBER_DECLARATION  MULTIPLE_VAR_DEF  NOT_A_CONSTRUCTOR  NOT_CALLABLE  UNEXPECTED_TOKEN  UNKNOWN_EXPR_TYPE  UNKNOWN_OVERRIDE  UNRESOLVED_TYPE  WRONG_ARGUMENT_COUNT  diagnosticType  InferJSDocInfo  inferJSDocInfo  	projects/Closure66/src/com/google/javascript/jscomp/TypeCheck.java	0.21320071635561041	939	939	2	replace	Node  rightChild  =  lvalue.getFirstChild();	  Node    rightChild    =    lvalue.getLastChild();    	non-compiled	[CE]  orphaned  case	5	None	replace
14	[BUG]  [BUGGY]  Node  rightChild  =  lvalue.getNext();  [CE]  orphaned  case  [FE]                  AssertionFailedError    [CONTEXT]    Var  var  =  t.getScope().getVar(lvalue.getString());  if  (var  !=  null)  {  if  (var.isTypeInferred())  {  return;  }  }  }  JSType  leftType  =  getJSType(lvalue);    [BUGGY]  Node  rightChild  =  lvalue.getNext();  [BUGGY]    JSType  rightType  =  getJSType(rightChild);  if  (validator.expectCanAssignTo(  t,  assign,  rightType,  leftType,     "assignment   "))  {  ensureTyped(t,  assign,  rightType);  }  else  {  ensureTyped(t,  assign);  }  }  [CLASS]  TypeCheck  [METHOD]  visitAssign  [RETURN_TYPE]  void  NodeTraversal  t  Node  assign  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  jsType  leftType  objectJsType  rightType  rvalueType  NodeTraversal  t  DiagnosticGroup  ALL_DIAGNOSTICS  CheckLevel  reportMissingOverride  reportUnknownTypes  Var  var  Node  assign  lvalue  object  object2  rightChild  rvalue  FunctionType  functionType  ScopeCreator  scopeCreator  String  OVERRIDING_PROTOTYPE_WITH_NON_OBJECT  functionPrivateName  message  property  property2  JSDocInfo  info  int  noTypeCheckSection  nullCount  typedCount  unknownCount  TypeValidator  validator  ObjectType  type  AbstractCompiler  compiler  JSTypeRegistry  typeRegistry  boolean  enterSection  externs  inExterns  report  reportMissingProperties  typeable  Scope  outerScope  topScope  DiagnosticType  BAD_DELETE  BAD_IMPLEMENTED_TYPE  BIT_OPERATION  CONFLICTING_EXTENDED_TYPE  CONFLICTING_IMPLEMENTED_TYPE  CONSTRUCTOR_NOT_CALLABLE  DETERMINISTIC_TEST  DETERMINISTIC_TEST_NO_RESULT  ENUM_DUP  ENUM_NOT_CONSTANT  EXPECTED_THIS_TYPE  FUNCTION_MASKS_VARIABLE  HIDDEN_INTERFACE_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY_MISMATCH  ILLEGAL_IMPLICIT_CAST  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE  INEXISTENT_ENUM_ELEMENT  INEXISTENT_PROPERTY  INTERFACE_FUNCTION_NOT_EMPTY  INTERFACE_METHOD_OVERRIDE  INVALID_INTERFACE_MEMBER_DECLARATION  MULTIPLE_VAR_DEF  NOT_A_CONSTRUCTOR  NOT_CALLABLE  UNEXPECTED_TOKEN  UNKNOWN_EXPR_TYPE  UNKNOWN_OVERRIDE  UNRESOLVED_TYPE  WRONG_ARGUMENT_COUNT  diagnosticType  InferJSDocInfo  inferJSDocInfo  	projects/Closure66/src/com/google/javascript/jscomp/TypeCheck.java	0.21320071635561041	939	939	2	replace	Node  rightChild  =  lvalue.getNext();	  Node    rightChild    =    lvalue.getLastChild();    	non-compiled	[CE]  orphaned  case	5	None	replace
15	[BUG]  [BUGGY]  JSType  rightChild  =  getJSType(right);  [CE]  orphaned  case  [FE]                      AssertionFailedError    [CONTEXT]    Var  var  =  t.getScope().getVar(lvalue.getString());  if  (var  !=  null)  {  if  (var.isTypeInferred())  {  return;  }  }  }  JSType  leftType  =  getJSType(lvalue);    [BUGGY]  JSType  rightChild  =  getJSType(right);  [BUGGY]    JSType  rightType  =  getJSType(rightChild);  if  (validator.expectCanAssignTo(  t,  assign,  rightType,  leftType,     "assignment   "))  {  ensureTyped(t,  assign,  rightType);  }  else  {  ensureTyped(t,  assign);  }  }  [CLASS]  TypeCheck  [METHOD]  visitAssign  [RETURN_TYPE]  void  NodeTraversal  t  Node  assign  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  jsType  leftType  objectJsType  rightType  rvalueType  NodeTraversal  t  DiagnosticGroup  ALL_DIAGNOSTICS  CheckLevel  reportMissingOverride  reportUnknownTypes  Var  var  Node  assign  lvalue  object  object2  rightChild  rvalue  FunctionType  functionType  ScopeCreator  scopeCreator  String  OVERRIDING_PROTOTYPE_WITH_NON_OBJECT  functionPrivateName  message  property  property2  JSDocInfo  info  int  noTypeCheckSection  nullCount  typedCount  unknownCount  TypeValidator  validator  ObjectType  type  AbstractCompiler  compiler  JSTypeRegistry  typeRegistry  boolean  enterSection  externs  inExterns  report  reportMissingProperties  typeable  Scope  outerScope  topScope  DiagnosticType  BAD_DELETE  BAD_IMPLEMENTED_TYPE  BIT_OPERATION  CONFLICTING_EXTENDED_TYPE  CONFLICTING_IMPLEMENTED_TYPE  CONSTRUCTOR_NOT_CALLABLE  DETERMINISTIC_TEST  DETERMINISTIC_TEST_NO_RESULT  ENUM_DUP  ENUM_NOT_CONSTANT  EXPECTED_THIS_TYPE  FUNCTION_MASKS_VARIABLE  HIDDEN_INTERFACE_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY_MISMATCH  ILLEGAL_IMPLICIT_CAST  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE  INEXISTENT_ENUM_ELEMENT  INEXISTENT_PROPERTY  INTERFACE_FUNCTION_NOT_EMPTY  INTERFACE_METHOD_OVERRIDE  INVALID_INTERFACE_MEMBER_DECLARATION  MULTIPLE_VAR_DEF  NOT_A_CONSTRUCTOR  NOT_CALLABLE  UNEXPECTED_TOKEN  UNKNOWN_EXPR_TYPE  UNKNOWN_OVERRIDE  UNRESOLVED_TYPE  WRONG_ARGUMENT_COUNT  diagnosticType  InferJSDocInfo  inferJSDocInfo  	projects/Closure66/src/com/google/javascript/jscomp/TypeCheck.java	0.21320071635561041	939	939	2	replace	JSType  rightChild  =  getJSType(right);	      	non-compiled	[CE]  orphaned  case	8	None	replace
16	[BUG]  [BUGGY]  JSType  rightType  =  getJSType(rightChild);  [CE]  orphaned  case  [FE]                        AssertionFailedError    [CONTEXT]    Var  var  =  t.getScope().getVar(lvalue.getString());  if  (var  !=  null)  {  if  (var.isTypeInferred())  {  return;  }  }  }  JSType  leftType  =  getJSType(lvalue);    [BUGGY]  JSType  rightType  =  getJSType(rightChild);  [BUGGY]    JSType  rightType  =  getJSType(rightChild);  if  (validator.expectCanAssignTo(  t,  assign,  rightType,  leftType,     "assignment   "))  {  ensureTyped(t,  assign,  rightType);  }  else  {  ensureTyped(t,  assign);  }  }  [CLASS]  TypeCheck  [METHOD]  visitAssign  [RETURN_TYPE]  void  NodeTraversal  t  Node  assign  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  jsType  leftType  objectJsType  rightType  rvalueType  NodeTraversal  t  DiagnosticGroup  ALL_DIAGNOSTICS  CheckLevel  reportMissingOverride  reportUnknownTypes  Var  var  Node  assign  lvalue  object  object2  rightChild  rvalue  FunctionType  functionType  ScopeCreator  scopeCreator  String  OVERRIDING_PROTOTYPE_WITH_NON_OBJECT  functionPrivateName  message  property  property2  JSDocInfo  info  int  noTypeCheckSection  nullCount  typedCount  unknownCount  TypeValidator  validator  ObjectType  type  AbstractCompiler  compiler  JSTypeRegistry  typeRegistry  boolean  enterSection  externs  inExterns  report  reportMissingProperties  typeable  Scope  outerScope  topScope  DiagnosticType  BAD_DELETE  BAD_IMPLEMENTED_TYPE  BIT_OPERATION  CONFLICTING_EXTENDED_TYPE  CONFLICTING_IMPLEMENTED_TYPE  CONSTRUCTOR_NOT_CALLABLE  DETERMINISTIC_TEST  DETERMINISTIC_TEST_NO_RESULT  ENUM_DUP  ENUM_NOT_CONSTANT  EXPECTED_THIS_TYPE  FUNCTION_MASKS_VARIABLE  HIDDEN_INTERFACE_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY_MISMATCH  ILLEGAL_IMPLICIT_CAST  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE  INEXISTENT_ENUM_ELEMENT  INEXISTENT_PROPERTY  INTERFACE_FUNCTION_NOT_EMPTY  INTERFACE_METHOD_OVERRIDE  INVALID_INTERFACE_MEMBER_DECLARATION  MULTIPLE_VAR_DEF  NOT_A_CONSTRUCTOR  NOT_CALLABLE  UNEXPECTED_TOKEN  UNKNOWN_EXPR_TYPE  UNKNOWN_OVERRIDE  UNRESOLVED_TYPE  WRONG_ARGUMENT_COUNT  diagnosticType  InferJSDocInfo  inferJSDocInfo  	projects/Closure66/src/com/google/javascript/jscomp/TypeCheck.java	0.21320071635561041	939	939	2	replace	JSType  rightType  =  getJSType(rightChild);	      	non-compiled	[CE]  orphaned  case	8	None	replace
17	[BUG]  [BUGGY]  Node  rightChild  =  var.getNext();  [CE]  orphaned  case  [FE]                          AssertionFailedError    [CONTEXT]    Var  var  =  t.getScope().getVar(lvalue.getString());  if  (var  !=  null)  {  if  (var.isTypeInferred())  {  return;  }  }  }  JSType  leftType  =  getJSType(lvalue);    [BUGGY]  Node  rightChild  =  var.getNext();  [BUGGY]    JSType  rightType  =  getJSType(rightChild);  if  (validator.expectCanAssignTo(  t,  assign,  rightType,  leftType,     "assignment   "))  {  ensureTyped(t,  assign,  rightType);  }  else  {  ensureTyped(t,  assign);  }  }  [CLASS]  TypeCheck  [METHOD]  visitAssign  [RETURN_TYPE]  void  NodeTraversal  t  Node  assign  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  jsType  leftType  objectJsType  rightType  rvalueType  NodeTraversal  t  DiagnosticGroup  ALL_DIAGNOSTICS  CheckLevel  reportMissingOverride  reportUnknownTypes  Var  var  Node  assign  lvalue  object  object2  rightChild  rvalue  FunctionType  functionType  ScopeCreator  scopeCreator  String  OVERRIDING_PROTOTYPE_WITH_NON_OBJECT  functionPrivateName  message  property  property2  JSDocInfo  info  int  noTypeCheckSection  nullCount  typedCount  unknownCount  TypeValidator  validator  ObjectType  type  AbstractCompiler  compiler  JSTypeRegistry  typeRegistry  boolean  enterSection  externs  inExterns  report  reportMissingProperties  typeable  Scope  outerScope  topScope  DiagnosticType  BAD_DELETE  BAD_IMPLEMENTED_TYPE  BIT_OPERATION  CONFLICTING_EXTENDED_TYPE  CONFLICTING_IMPLEMENTED_TYPE  CONSTRUCTOR_NOT_CALLABLE  DETERMINISTIC_TEST  DETERMINISTIC_TEST_NO_RESULT  ENUM_DUP  ENUM_NOT_CONSTANT  EXPECTED_THIS_TYPE  FUNCTION_MASKS_VARIABLE  HIDDEN_INTERFACE_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY_MISMATCH  ILLEGAL_IMPLICIT_CAST  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE  INEXISTENT_ENUM_ELEMENT  INEXISTENT_PROPERTY  INTERFACE_FUNCTION_NOT_EMPTY  INTERFACE_METHOD_OVERRIDE  INVALID_INTERFACE_MEMBER_DECLARATION  MULTIPLE_VAR_DEF  NOT_A_CONSTRUCTOR  NOT_CALLABLE  UNEXPECTED_TOKEN  UNKNOWN_EXPR_TYPE  UNKNOWN_OVERRIDE  UNRESOLVED_TYPE  WRONG_ARGUMENT_COUNT  diagnosticType  InferJSDocInfo  inferJSDocInfo  	projects/Closure66/src/com/google/javascript/jscomp/TypeCheck.java	0.21320071635561041	939	939	2	replace	Node  rightChild  =  var.getNext();	      	non-compiled	[CE]  orphaned  case	8	None	replace
18	[BUG]  [BUGGY]  Node  rightChild  =  t.getScope().getRightNode();  [CE]  orphaned  case  [FE]          AssertionFailedError    [CONTEXT]    Var  var  =  t.getScope().getVar(lvalue.getString());  if  (var  !=  null)  {  if  (var.isTypeInferred())  {  return;  }  }  }  JSType  leftType  =  getJSType(lvalue);    [BUGGY]  Node  rightChild  =  t.getScope().getRightNode();  [BUGGY]    JSType  rightType  =  getJSType(rightChild);  if  (validator.expectCanAssignTo(  t,  assign,  rightType,  leftType,     "assignment   "))  {  ensureTyped(t,  assign,  rightType);  }  else  {  ensureTyped(t,  assign);  }  }  [CLASS]  TypeCheck  [METHOD]  visitAssign  [RETURN_TYPE]  void  NodeTraversal  t  Node  assign  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  jsType  leftType  objectJsType  rightType  rvalueType  NodeTraversal  t  DiagnosticGroup  ALL_DIAGNOSTICS  CheckLevel  reportMissingOverride  reportUnknownTypes  Var  var  Node  assign  lvalue  object  object2  rightChild  rvalue  FunctionType  functionType  ScopeCreator  scopeCreator  String  OVERRIDING_PROTOTYPE_WITH_NON_OBJECT  functionPrivateName  message  property  property2  JSDocInfo  info  int  noTypeCheckSection  nullCount  typedCount  unknownCount  TypeValidator  validator  ObjectType  type  AbstractCompiler  compiler  JSTypeRegistry  typeRegistry  boolean  enterSection  externs  inExterns  report  reportMissingProperties  typeable  Scope  outerScope  topScope  DiagnosticType  BAD_DELETE  BAD_IMPLEMENTED_TYPE  BIT_OPERATION  CONFLICTING_EXTENDED_TYPE  CONFLICTING_IMPLEMENTED_TYPE  CONSTRUCTOR_NOT_CALLABLE  DETERMINISTIC_TEST  DETERMINISTIC_TEST_NO_RESULT  ENUM_DUP  ENUM_NOT_CONSTANT  EXPECTED_THIS_TYPE  FUNCTION_MASKS_VARIABLE  HIDDEN_INTERFACE_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY_MISMATCH  ILLEGAL_IMPLICIT_CAST  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE  INEXISTENT_ENUM_ELEMENT  INEXISTENT_PROPERTY  INTERFACE_FUNCTION_NOT_EMPTY  INTERFACE_METHOD_OVERRIDE  INVALID_INTERFACE_MEMBER_DECLARATION  MULTIPLE_VAR_DEF  NOT_A_CONSTRUCTOR  NOT_CALLABLE  UNEXPECTED_TOKEN  UNKNOWN_EXPR_TYPE  UNKNOWN_OVERRIDE  UNRESOLVED_TYPE  WRONG_ARGUMENT_COUNT  diagnosticType  InferJSDocInfo  inferJSDocInfo  	projects/Closure66/src/com/google/javascript/jscomp/TypeCheck.java	0.21320071635561041	939	939	2	replace	Node  rightChild  =  t.getScope().getRightNode();	  Node    rightChild    =    t.getScope().getRootNode();    	non-compiled	[CE]  orphaned  case	12	None	replace
19	[BUG]  [BUGGY]  Node  rightChild  =  t.getScope().getRootNode(lvalue);  [CE]  orphaned  case  [FE]            AssertionFailedError    [CONTEXT]    Var  var  =  t.getScope().getVar(lvalue.getString());  if  (var  !=  null)  {  if  (var.isTypeInferred())  {  return;  }  }  }  JSType  leftType  =  getJSType(lvalue);    [BUGGY]  Node  rightChild  =  t.getScope().getRootNode(lvalue);  [BUGGY]    JSType  rightType  =  getJSType(rightChild);  if  (validator.expectCanAssignTo(  t,  assign,  rightType,  leftType,     "assignment   "))  {  ensureTyped(t,  assign,  rightType);  }  else  {  ensureTyped(t,  assign);  }  }  [CLASS]  TypeCheck  [METHOD]  visitAssign  [RETURN_TYPE]  void  NodeTraversal  t  Node  assign  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  jsType  leftType  objectJsType  rightType  rvalueType  NodeTraversal  t  DiagnosticGroup  ALL_DIAGNOSTICS  CheckLevel  reportMissingOverride  reportUnknownTypes  Var  var  Node  assign  lvalue  object  object2  rightChild  rvalue  FunctionType  functionType  ScopeCreator  scopeCreator  String  OVERRIDING_PROTOTYPE_WITH_NON_OBJECT  functionPrivateName  message  property  property2  JSDocInfo  info  int  noTypeCheckSection  nullCount  typedCount  unknownCount  TypeValidator  validator  ObjectType  type  AbstractCompiler  compiler  JSTypeRegistry  typeRegistry  boolean  enterSection  externs  inExterns  report  reportMissingProperties  typeable  Scope  outerScope  topScope  DiagnosticType  BAD_DELETE  BAD_IMPLEMENTED_TYPE  BIT_OPERATION  CONFLICTING_EXTENDED_TYPE  CONFLICTING_IMPLEMENTED_TYPE  CONSTRUCTOR_NOT_CALLABLE  DETERMINISTIC_TEST  DETERMINISTIC_TEST_NO_RESULT  ENUM_DUP  ENUM_NOT_CONSTANT  EXPECTED_THIS_TYPE  FUNCTION_MASKS_VARIABLE  HIDDEN_INTERFACE_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY_MISMATCH  ILLEGAL_IMPLICIT_CAST  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE  INEXISTENT_ENUM_ELEMENT  INEXISTENT_PROPERTY  INTERFACE_FUNCTION_NOT_EMPTY  INTERFACE_METHOD_OVERRIDE  INVALID_INTERFACE_MEMBER_DECLARATION  MULTIPLE_VAR_DEF  NOT_A_CONSTRUCTOR  NOT_CALLABLE  UNEXPECTED_TOKEN  UNKNOWN_EXPR_TYPE  UNKNOWN_OVERRIDE  UNRESOLVED_TYPE  WRONG_ARGUMENT_COUNT  diagnosticType  InferJSDocInfo  inferJSDocInfo  	projects/Closure66/src/com/google/javascript/jscomp/TypeCheck.java	0.21320071635561041	939	939	2	replace	Node  rightChild  =  t.getScope().getRootNode(lvalue);	  Node    rightChild    =    t.getScope().getRootNode();    	non-compiled	[CE]  orphaned  case	12	None	replace
20	[BUG]  [BUGGY]  Node  rightChild  =  t.getScope().getRawNode();  [CE]  orphaned  case  [FE]              AssertionFailedError    [CONTEXT]    Var  var  =  t.getScope().getVar(lvalue.getString());  if  (var  !=  null)  {  if  (var.isTypeInferred())  {  return;  }  }  }  JSType  leftType  =  getJSType(lvalue);    [BUGGY]  Node  rightChild  =  t.getScope().getRawNode();  [BUGGY]    JSType  rightType  =  getJSType(rightChild);  if  (validator.expectCanAssignTo(  t,  assign,  rightType,  leftType,     "assignment   "))  {  ensureTyped(t,  assign,  rightType);  }  else  {  ensureTyped(t,  assign);  }  }  [CLASS]  TypeCheck  [METHOD]  visitAssign  [RETURN_TYPE]  void  NodeTraversal  t  Node  assign  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  jsType  leftType  objectJsType  rightType  rvalueType  NodeTraversal  t  DiagnosticGroup  ALL_DIAGNOSTICS  CheckLevel  reportMissingOverride  reportUnknownTypes  Var  var  Node  assign  lvalue  object  object2  rightChild  rvalue  FunctionType  functionType  ScopeCreator  scopeCreator  String  OVERRIDING_PROTOTYPE_WITH_NON_OBJECT  functionPrivateName  message  property  property2  JSDocInfo  info  int  noTypeCheckSection  nullCount  typedCount  unknownCount  TypeValidator  validator  ObjectType  type  AbstractCompiler  compiler  JSTypeRegistry  typeRegistry  boolean  enterSection  externs  inExterns  report  reportMissingProperties  typeable  Scope  outerScope  topScope  DiagnosticType  BAD_DELETE  BAD_IMPLEMENTED_TYPE  BIT_OPERATION  CONFLICTING_EXTENDED_TYPE  CONFLICTING_IMPLEMENTED_TYPE  CONSTRUCTOR_NOT_CALLABLE  DETERMINISTIC_TEST  DETERMINISTIC_TEST_NO_RESULT  ENUM_DUP  ENUM_NOT_CONSTANT  EXPECTED_THIS_TYPE  FUNCTION_MASKS_VARIABLE  HIDDEN_INTERFACE_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY_MISMATCH  ILLEGAL_IMPLICIT_CAST  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE  INEXISTENT_ENUM_ELEMENT  INEXISTENT_PROPERTY  INTERFACE_FUNCTION_NOT_EMPTY  INTERFACE_METHOD_OVERRIDE  INVALID_INTERFACE_MEMBER_DECLARATION  MULTIPLE_VAR_DEF  NOT_A_CONSTRUCTOR  NOT_CALLABLE  UNEXPECTED_TOKEN  UNKNOWN_EXPR_TYPE  UNKNOWN_OVERRIDE  UNRESOLVED_TYPE  WRONG_ARGUMENT_COUNT  diagnosticType  InferJSDocInfo  inferJSDocInfo  	projects/Closure66/src/com/google/javascript/jscomp/TypeCheck.java	0.21320071635561041	939	939	2	replace	Node  rightChild  =  t.getScope().getRawNode();	  Node    rightChild    =    t.getScope().getRootNode();    	non-compiled	[CE]  orphaned  case	12	None	replace
21	[BUG]  [BUGGY]  Node  rightChild  =  t.getScope().getRootNode(null);  [CE]  orphaned  case  [FE]                AssertionFailedError    [CONTEXT]    Var  var  =  t.getScope().getVar(lvalue.getString());  if  (var  !=  null)  {  if  (var.isTypeInferred())  {  return;  }  }  }  JSType  leftType  =  getJSType(lvalue);    [BUGGY]  Node  rightChild  =  t.getScope().getRootNode(null);  [BUGGY]    JSType  rightType  =  getJSType(rightChild);  if  (validator.expectCanAssignTo(  t,  assign,  rightType,  leftType,     "assignment   "))  {  ensureTyped(t,  assign,  rightType);  }  else  {  ensureTyped(t,  assign);  }  }  [CLASS]  TypeCheck  [METHOD]  visitAssign  [RETURN_TYPE]  void  NodeTraversal  t  Node  assign  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  jsType  leftType  objectJsType  rightType  rvalueType  NodeTraversal  t  DiagnosticGroup  ALL_DIAGNOSTICS  CheckLevel  reportMissingOverride  reportUnknownTypes  Var  var  Node  assign  lvalue  object  object2  rightChild  rvalue  FunctionType  functionType  ScopeCreator  scopeCreator  String  OVERRIDING_PROTOTYPE_WITH_NON_OBJECT  functionPrivateName  message  property  property2  JSDocInfo  info  int  noTypeCheckSection  nullCount  typedCount  unknownCount  TypeValidator  validator  ObjectType  type  AbstractCompiler  compiler  JSTypeRegistry  typeRegistry  boolean  enterSection  externs  inExterns  report  reportMissingProperties  typeable  Scope  outerScope  topScope  DiagnosticType  BAD_DELETE  BAD_IMPLEMENTED_TYPE  BIT_OPERATION  CONFLICTING_EXTENDED_TYPE  CONFLICTING_IMPLEMENTED_TYPE  CONSTRUCTOR_NOT_CALLABLE  DETERMINISTIC_TEST  DETERMINISTIC_TEST_NO_RESULT  ENUM_DUP  ENUM_NOT_CONSTANT  EXPECTED_THIS_TYPE  FUNCTION_MASKS_VARIABLE  HIDDEN_INTERFACE_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY_MISMATCH  ILLEGAL_IMPLICIT_CAST  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE  INEXISTENT_ENUM_ELEMENT  INEXISTENT_PROPERTY  INTERFACE_FUNCTION_NOT_EMPTY  INTERFACE_METHOD_OVERRIDE  INVALID_INTERFACE_MEMBER_DECLARATION  MULTIPLE_VAR_DEF  NOT_A_CONSTRUCTOR  NOT_CALLABLE  UNEXPECTED_TOKEN  UNKNOWN_EXPR_TYPE  UNKNOWN_OVERRIDE  UNRESOLVED_TYPE  WRONG_ARGUMENT_COUNT  diagnosticType  InferJSDocInfo  inferJSDocInfo  	projects/Closure66/src/com/google/javascript/jscomp/TypeCheck.java	0.21320071635561041	939	939	2	replace	Node  rightChild  =  t.getScope().getRootNode(null);	  Node    rightChild    =    t.getScope().getRootNode();    	non-compiled	[CE]  orphaned  case	12	None	replace
22	[BUG]  [BUGGY]  Node  rightChild  =  t.getScope().getRootNode(assign);  [CE]  orphaned  case  [FE]                  AssertionFailedError    [CONTEXT]    Var  var  =  t.getScope().getVar(lvalue.getString());  if  (var  !=  null)  {  if  (var.isTypeInferred())  {  return;  }  }  }  JSType  leftType  =  getJSType(lvalue);    [BUGGY]  Node  rightChild  =  t.getScope().getRootNode(assign);  [BUGGY]    JSType  rightType  =  getJSType(rightChild);  if  (validator.expectCanAssignTo(  t,  assign,  rightType,  leftType,     "assignment   "))  {  ensureTyped(t,  assign,  rightType);  }  else  {  ensureTyped(t,  assign);  }  }  [CLASS]  TypeCheck  [METHOD]  visitAssign  [RETURN_TYPE]  void  NodeTraversal  t  Node  assign  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  jsType  leftType  objectJsType  rightType  rvalueType  NodeTraversal  t  DiagnosticGroup  ALL_DIAGNOSTICS  CheckLevel  reportMissingOverride  reportUnknownTypes  Var  var  Node  assign  lvalue  object  object2  rightChild  rvalue  FunctionType  functionType  ScopeCreator  scopeCreator  String  OVERRIDING_PROTOTYPE_WITH_NON_OBJECT  functionPrivateName  message  property  property2  JSDocInfo  info  int  noTypeCheckSection  nullCount  typedCount  unknownCount  TypeValidator  validator  ObjectType  type  AbstractCompiler  compiler  JSTypeRegistry  typeRegistry  boolean  enterSection  externs  inExterns  report  reportMissingProperties  typeable  Scope  outerScope  topScope  DiagnosticType  BAD_DELETE  BAD_IMPLEMENTED_TYPE  BIT_OPERATION  CONFLICTING_EXTENDED_TYPE  CONFLICTING_IMPLEMENTED_TYPE  CONSTRUCTOR_NOT_CALLABLE  DETERMINISTIC_TEST  DETERMINISTIC_TEST_NO_RESULT  ENUM_DUP  ENUM_NOT_CONSTANT  EXPECTED_THIS_TYPE  FUNCTION_MASKS_VARIABLE  HIDDEN_INTERFACE_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY_MISMATCH  ILLEGAL_IMPLICIT_CAST  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE  INEXISTENT_ENUM_ELEMENT  INEXISTENT_PROPERTY  INTERFACE_FUNCTION_NOT_EMPTY  INTERFACE_METHOD_OVERRIDE  INVALID_INTERFACE_MEMBER_DECLARATION  MULTIPLE_VAR_DEF  NOT_A_CONSTRUCTOR  NOT_CALLABLE  UNEXPECTED_TOKEN  UNKNOWN_EXPR_TYPE  UNKNOWN_OVERRIDE  UNRESOLVED_TYPE  WRONG_ARGUMENT_COUNT  diagnosticType  InferJSDocInfo  inferJSDocInfo  	projects/Closure66/src/com/google/javascript/jscomp/TypeCheck.java	0.21320071635561041	939	939	2	replace	Node  rightChild  =  t.getScope().getRootNode(assign);	  Node    rightChild    =    t.getScope().getRootNode();    	non-compiled	[CE]  orphaned  case	12	None	replace
23	[BUG]  [BUGGY]  Node  rightChild  =  t.getScope().getRawParentNode();  [CE]  orphaned  case  [FE]                    AssertionFailedError    [CONTEXT]    Var  var  =  t.getScope().getVar(lvalue.getString());  if  (var  !=  null)  {  if  (var.isTypeInferred())  {  return;  }  }  }  JSType  leftType  =  getJSType(lvalue);    [BUGGY]  Node  rightChild  =  t.getScope().getRawParentNode();  [BUGGY]    JSType  rightType  =  getJSType(rightChild);  if  (validator.expectCanAssignTo(  t,  assign,  rightType,  leftType,     "assignment   "))  {  ensureTyped(t,  assign,  rightType);  }  else  {  ensureTyped(t,  assign);  }  }  [CLASS]  TypeCheck  [METHOD]  visitAssign  [RETURN_TYPE]  void  NodeTraversal  t  Node  assign  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  jsType  leftType  objectJsType  rightType  rvalueType  NodeTraversal  t  DiagnosticGroup  ALL_DIAGNOSTICS  CheckLevel  reportMissingOverride  reportUnknownTypes  Var  var  Node  assign  lvalue  object  object2  rightChild  rvalue  FunctionType  functionType  ScopeCreator  scopeCreator  String  OVERRIDING_PROTOTYPE_WITH_NON_OBJECT  functionPrivateName  message  property  property2  JSDocInfo  info  int  noTypeCheckSection  nullCount  typedCount  unknownCount  TypeValidator  validator  ObjectType  type  AbstractCompiler  compiler  JSTypeRegistry  typeRegistry  boolean  enterSection  externs  inExterns  report  reportMissingProperties  typeable  Scope  outerScope  topScope  DiagnosticType  BAD_DELETE  BAD_IMPLEMENTED_TYPE  BIT_OPERATION  CONFLICTING_EXTENDED_TYPE  CONFLICTING_IMPLEMENTED_TYPE  CONSTRUCTOR_NOT_CALLABLE  DETERMINISTIC_TEST  DETERMINISTIC_TEST_NO_RESULT  ENUM_DUP  ENUM_NOT_CONSTANT  EXPECTED_THIS_TYPE  FUNCTION_MASKS_VARIABLE  HIDDEN_INTERFACE_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY_MISMATCH  ILLEGAL_IMPLICIT_CAST  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE  INEXISTENT_ENUM_ELEMENT  INEXISTENT_PROPERTY  INTERFACE_FUNCTION_NOT_EMPTY  INTERFACE_METHOD_OVERRIDE  INVALID_INTERFACE_MEMBER_DECLARATION  MULTIPLE_VAR_DEF  NOT_A_CONSTRUCTOR  NOT_CALLABLE  UNEXPECTED_TOKEN  UNKNOWN_EXPR_TYPE  UNKNOWN_OVERRIDE  UNRESOLVED_TYPE  WRONG_ARGUMENT_COUNT  diagnosticType  InferJSDocInfo  inferJSDocInfo  	projects/Closure66/src/com/google/javascript/jscomp/TypeCheck.java	0.21320071635561041	939	939	2	replace	Node  rightChild  =  t.getScope().getRawParentNode();	  Node    rightChild    =    t.getScope().getRootNode();    	non-compiled	[CE]  orphaned  case	12	None	replace
24	[BUG]  [BUGGY]  Node  rightChild  =  t.getFirstChild();  [CE]  orphaned  case  [FE]                    AssertionFailedError    [CONTEXT]    Var  var  =  t.getScope().getVar(lvalue.getString());  if  (var  !=  null)  {  if  (var.isTypeInferred())  {  return;  }  }  }  JSType  leftType  =  getJSType(lvalue);    [BUGGY]  Node  rightChild  =  t.getFirstChild();  [BUGGY]    JSType  rightType  =  getJSType(rightChild);  if  (validator.expectCanAssignTo(  t,  assign,  rightType,  leftType,     "assignment   "))  {  ensureTyped(t,  assign,  rightType);  }  else  {  ensureTyped(t,  assign);  }  }  [CLASS]  TypeCheck  [METHOD]  visitAssign  [RETURN_TYPE]  void  NodeTraversal  t  Node  assign  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  jsType  leftType  objectJsType  rightType  rvalueType  NodeTraversal  t  DiagnosticGroup  ALL_DIAGNOSTICS  CheckLevel  reportMissingOverride  reportUnknownTypes  Var  var  Node  assign  lvalue  object  object2  rightChild  rvalue  FunctionType  functionType  ScopeCreator  scopeCreator  String  OVERRIDING_PROTOTYPE_WITH_NON_OBJECT  functionPrivateName  message  property  property2  JSDocInfo  info  int  noTypeCheckSection  nullCount  typedCount  unknownCount  TypeValidator  validator  ObjectType  type  AbstractCompiler  compiler  JSTypeRegistry  typeRegistry  boolean  enterSection  externs  inExterns  report  reportMissingProperties  typeable  Scope  outerScope  topScope  DiagnosticType  BAD_DELETE  BAD_IMPLEMENTED_TYPE  BIT_OPERATION  CONFLICTING_EXTENDED_TYPE  CONFLICTING_IMPLEMENTED_TYPE  CONSTRUCTOR_NOT_CALLABLE  DETERMINISTIC_TEST  DETERMINISTIC_TEST_NO_RESULT  ENUM_DUP  ENUM_NOT_CONSTANT  EXPECTED_THIS_TYPE  FUNCTION_MASKS_VARIABLE  HIDDEN_INTERFACE_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY_MISMATCH  ILLEGAL_IMPLICIT_CAST  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE  INEXISTENT_ENUM_ELEMENT  INEXISTENT_PROPERTY  INTERFACE_FUNCTION_NOT_EMPTY  INTERFACE_METHOD_OVERRIDE  INVALID_INTERFACE_MEMBER_DECLARATION  MULTIPLE_VAR_DEF  NOT_A_CONSTRUCTOR  NOT_CALLABLE  UNEXPECTED_TOKEN  UNKNOWN_EXPR_TYPE  UNKNOWN_OVERRIDE  UNRESOLVED_TYPE  WRONG_ARGUMENT_COUNT  diagnosticType  InferJSDocInfo  inferJSDocInfo  	projects/Closure66/src/com/google/javascript/jscomp/TypeCheck.java	0.21320071635561041	939	939	2	replace	Node  rightChild  =  t.getFirstChild();	  Node    rightChild    =    t.getLastChild();    	non-compiled	[CE]  orphaned  case	7	None	replace
25	[BUG]  [BUGGY]  Node  rightChild  =  t.getNext();  [CE]  orphaned  case  [FE]                      AssertionFailedError    [CONTEXT]    Var  var  =  t.getScope().getVar(lvalue.getString());  if  (var  !=  null)  {  if  (var.isTypeInferred())  {  return;  }  }  }  JSType  leftType  =  getJSType(lvalue);    [BUGGY]  Node  rightChild  =  t.getNext();  [BUGGY]    JSType  rightType  =  getJSType(rightChild);  if  (validator.expectCanAssignTo(  t,  assign,  rightType,  leftType,     "assignment   "))  {  ensureTyped(t,  assign,  rightType);  }  else  {  ensureTyped(t,  assign);  }  }  [CLASS]  TypeCheck  [METHOD]  visitAssign  [RETURN_TYPE]  void  NodeTraversal  t  Node  assign  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  jsType  leftType  objectJsType  rightType  rvalueType  NodeTraversal  t  DiagnosticGroup  ALL_DIAGNOSTICS  CheckLevel  reportMissingOverride  reportUnknownTypes  Var  var  Node  assign  lvalue  object  object2  rightChild  rvalue  FunctionType  functionType  ScopeCreator  scopeCreator  String  OVERRIDING_PROTOTYPE_WITH_NON_OBJECT  functionPrivateName  message  property  property2  JSDocInfo  info  int  noTypeCheckSection  nullCount  typedCount  unknownCount  TypeValidator  validator  ObjectType  type  AbstractCompiler  compiler  JSTypeRegistry  typeRegistry  boolean  enterSection  externs  inExterns  report  reportMissingProperties  typeable  Scope  outerScope  topScope  DiagnosticType  BAD_DELETE  BAD_IMPLEMENTED_TYPE  BIT_OPERATION  CONFLICTING_EXTENDED_TYPE  CONFLICTING_IMPLEMENTED_TYPE  CONSTRUCTOR_NOT_CALLABLE  DETERMINISTIC_TEST  DETERMINISTIC_TEST_NO_RESULT  ENUM_DUP  ENUM_NOT_CONSTANT  EXPECTED_THIS_TYPE  FUNCTION_MASKS_VARIABLE  HIDDEN_INTERFACE_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY_MISMATCH  ILLEGAL_IMPLICIT_CAST  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE  INEXISTENT_ENUM_ELEMENT  INEXISTENT_PROPERTY  INTERFACE_FUNCTION_NOT_EMPTY  INTERFACE_METHOD_OVERRIDE  INVALID_INTERFACE_MEMBER_DECLARATION  MULTIPLE_VAR_DEF  NOT_A_CONSTRUCTOR  NOT_CALLABLE  UNEXPECTED_TOKEN  UNKNOWN_EXPR_TYPE  UNKNOWN_OVERRIDE  UNRESOLVED_TYPE  WRONG_ARGUMENT_COUNT  diagnosticType  InferJSDocInfo  inferJSDocInfo  	projects/Closure66/src/com/google/javascript/jscomp/TypeCheck.java	0.21320071635561041	939	939	2	replace	Node  rightChild  =  t.getNext();	  Node    rightChild    =    t.getLastChild();    	non-compiled	[CE]  orphaned  case	7	None	replace
26	[BUG]  [BUGGY]  Node  rightChild  =  leftType.getFirstChild();  [CE]  orphaned  case  [FE]        AssertionFailedError    [CONTEXT]    Var  var  =  t.getScope().getVar(lvalue.getString());  if  (var  !=  null)  {  if  (var.isTypeInferred())  {  return;  }  }  }  JSType  leftType  =  getJSType(lvalue);    [BUGGY]  Node  rightChild  =  leftType.getFirstChild();  [BUGGY]    JSType  rightType  =  getJSType(rightChild);  if  (validator.expectCanAssignTo(  t,  assign,  rightType,  leftType,     "assignment   "))  {  ensureTyped(t,  assign,  rightType);  }  else  {  ensureTyped(t,  assign);  }  }  [CLASS]  TypeCheck  [METHOD]  visitAssign  [RETURN_TYPE]  void  NodeTraversal  t  Node  assign  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  jsType  leftType  objectJsType  rightType  rvalueType  NodeTraversal  t  DiagnosticGroup  ALL_DIAGNOSTICS  CheckLevel  reportMissingOverride  reportUnknownTypes  Var  var  Node  assign  lvalue  object  object2  rightChild  rvalue  FunctionType  functionType  ScopeCreator  scopeCreator  String  OVERRIDING_PROTOTYPE_WITH_NON_OBJECT  functionPrivateName  message  property  property2  JSDocInfo  info  int  noTypeCheckSection  nullCount  typedCount  unknownCount  TypeValidator  validator  ObjectType  type  AbstractCompiler  compiler  JSTypeRegistry  typeRegistry  boolean  enterSection  externs  inExterns  report  reportMissingProperties  typeable  Scope  outerScope  topScope  DiagnosticType  BAD_DELETE  BAD_IMPLEMENTED_TYPE  BIT_OPERATION  CONFLICTING_EXTENDED_TYPE  CONFLICTING_IMPLEMENTED_TYPE  CONSTRUCTOR_NOT_CALLABLE  DETERMINISTIC_TEST  DETERMINISTIC_TEST_NO_RESULT  ENUM_DUP  ENUM_NOT_CONSTANT  EXPECTED_THIS_TYPE  FUNCTION_MASKS_VARIABLE  HIDDEN_INTERFACE_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY_MISMATCH  ILLEGAL_IMPLICIT_CAST  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE  INEXISTENT_ENUM_ELEMENT  INEXISTENT_PROPERTY  INTERFACE_FUNCTION_NOT_EMPTY  INTERFACE_METHOD_OVERRIDE  INVALID_INTERFACE_MEMBER_DECLARATION  MULTIPLE_VAR_DEF  NOT_A_CONSTRUCTOR  NOT_CALLABLE  UNEXPECTED_TOKEN  UNKNOWN_EXPR_TYPE  UNKNOWN_OVERRIDE  UNRESOLVED_TYPE  WRONG_ARGUMENT_COUNT  diagnosticType  InferJSDocInfo  inferJSDocInfo  	projects/Closure66/src/com/google/javascript/jscomp/TypeCheck.java	0.21320071635561041	939	939	2	replace	Node  rightChild  =  leftType.getFirstChild();	  Node    rightChild    =    var.getLastChild();    	non-compiled	[CE]  orphaned  case	1	None	replace
27	[BUG]  [BUGGY]  Node  rightChild  =  leftType.getNext();  [CE]  orphaned  case  [FE]            AssertionFailedError    [CONTEXT]    Var  var  =  t.getScope().getVar(lvalue.getString());  if  (var  !=  null)  {  if  (var.isTypeInferred())  {  return;  }  }  }  JSType  leftType  =  getJSType(lvalue);    [BUGGY]  Node  rightChild  =  leftType.getNext();  [BUGGY]    JSType  rightType  =  getJSType(rightChild);  if  (validator.expectCanAssignTo(  t,  assign,  rightType,  leftType,     "assignment   "))  {  ensureTyped(t,  assign,  rightType);  }  else  {  ensureTyped(t,  assign);  }  }  [CLASS]  TypeCheck  [METHOD]  visitAssign  [RETURN_TYPE]  void  NodeTraversal  t  Node  assign  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  jsType  leftType  objectJsType  rightType  rvalueType  NodeTraversal  t  DiagnosticGroup  ALL_DIAGNOSTICS  CheckLevel  reportMissingOverride  reportUnknownTypes  Var  var  Node  assign  lvalue  object  object2  rightChild  rvalue  FunctionType  functionType  ScopeCreator  scopeCreator  String  OVERRIDING_PROTOTYPE_WITH_NON_OBJECT  functionPrivateName  message  property  property2  JSDocInfo  info  int  noTypeCheckSection  nullCount  typedCount  unknownCount  TypeValidator  validator  ObjectType  type  AbstractCompiler  compiler  JSTypeRegistry  typeRegistry  boolean  enterSection  externs  inExterns  report  reportMissingProperties  typeable  Scope  outerScope  topScope  DiagnosticType  BAD_DELETE  BAD_IMPLEMENTED_TYPE  BIT_OPERATION  CONFLICTING_EXTENDED_TYPE  CONFLICTING_IMPLEMENTED_TYPE  CONSTRUCTOR_NOT_CALLABLE  DETERMINISTIC_TEST  DETERMINISTIC_TEST_NO_RESULT  ENUM_DUP  ENUM_NOT_CONSTANT  EXPECTED_THIS_TYPE  FUNCTION_MASKS_VARIABLE  HIDDEN_INTERFACE_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY_MISMATCH  ILLEGAL_IMPLICIT_CAST  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE  INEXISTENT_ENUM_ELEMENT  INEXISTENT_PROPERTY  INTERFACE_FUNCTION_NOT_EMPTY  INTERFACE_METHOD_OVERRIDE  INVALID_INTERFACE_MEMBER_DECLARATION  MULTIPLE_VAR_DEF  NOT_A_CONSTRUCTOR  NOT_CALLABLE  UNEXPECTED_TOKEN  UNKNOWN_EXPR_TYPE  UNKNOWN_OVERRIDE  UNRESOLVED_TYPE  WRONG_ARGUMENT_COUNT  diagnosticType  InferJSDocInfo  inferJSDocInfo  	projects/Closure66/src/com/google/javascript/jscomp/TypeCheck.java	0.21320071635561041	939	939	2	replace	Node  rightChild  =  leftType.getNext();	  Node    rightChild    =    leftType.getLastChild();    	non-compiled	[CE]  orphaned  case	3	None	replace
28	[BUG]  [BUGGY]  Node  rightChild  =  leftType!=  null?  leftType.getFirstChild()  :  leftType.getLastChild();  [CE]  orphaned  case  [FE]              AssertionFailedError    [CONTEXT]    Var  var  =  t.getScope().getVar(lvalue.getString());  if  (var  !=  null)  {  if  (var.isTypeInferred())  {  return;  }  }  }  JSType  leftType  =  getJSType(lvalue);    [BUGGY]  Node  rightChild  =  leftType!=  null?  leftType.getFirstChild()  :  leftType.getLastChild();  [BUGGY]    JSType  rightType  =  getJSType(rightChild);  if  (validator.expectCanAssignTo(  t,  assign,  rightType,  leftType,     "assignment   "))  {  ensureTyped(t,  assign,  rightType);  }  else  {  ensureTyped(t,  assign);  }  }  [CLASS]  TypeCheck  [METHOD]  visitAssign  [RETURN_TYPE]  void  NodeTraversal  t  Node  assign  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  jsType  leftType  objectJsType  rightType  rvalueType  NodeTraversal  t  DiagnosticGroup  ALL_DIAGNOSTICS  CheckLevel  reportMissingOverride  reportUnknownTypes  Var  var  Node  assign  lvalue  object  object2  rightChild  rvalue  FunctionType  functionType  ScopeCreator  scopeCreator  String  OVERRIDING_PROTOTYPE_WITH_NON_OBJECT  functionPrivateName  message  property  property2  JSDocInfo  info  int  noTypeCheckSection  nullCount  typedCount  unknownCount  TypeValidator  validator  ObjectType  type  AbstractCompiler  compiler  JSTypeRegistry  typeRegistry  boolean  enterSection  externs  inExterns  report  reportMissingProperties  typeable  Scope  outerScope  topScope  DiagnosticType  BAD_DELETE  BAD_IMPLEMENTED_TYPE  BIT_OPERATION  CONFLICTING_EXTENDED_TYPE  CONFLICTING_IMPLEMENTED_TYPE  CONSTRUCTOR_NOT_CALLABLE  DETERMINISTIC_TEST  DETERMINISTIC_TEST_NO_RESULT  ENUM_DUP  ENUM_NOT_CONSTANT  EXPECTED_THIS_TYPE  FUNCTION_MASKS_VARIABLE  HIDDEN_INTERFACE_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY_MISMATCH  ILLEGAL_IMPLICIT_CAST  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE  INEXISTENT_ENUM_ELEMENT  INEXISTENT_PROPERTY  INTERFACE_FUNCTION_NOT_EMPTY  INTERFACE_METHOD_OVERRIDE  INVALID_INTERFACE_MEMBER_DECLARATION  MULTIPLE_VAR_DEF  NOT_A_CONSTRUCTOR  NOT_CALLABLE  UNEXPECTED_TOKEN  UNKNOWN_EXPR_TYPE  UNKNOWN_OVERRIDE  UNRESOLVED_TYPE  WRONG_ARGUMENT_COUNT  diagnosticType  InferJSDocInfo  inferJSDocInfo  	projects/Closure66/src/com/google/javascript/jscomp/TypeCheck.java	0.21320071635561041	939	939	2	replace	Node  rightChild  =  leftType!=  null?  leftType.getFirstChild()  :  leftType.getLastChild();	  Node    rightChild    =    leftType.getLastChild();    	non-compiled	[CE]  orphaned  case	3	None	replace
29	[BUG]  [BUGGY]  Node  rightChild  =  leftType!=  null?  leftType.getLastChild()  :  var.getString();  [CE]  orphaned  case  [FE]                AssertionFailedError    [CONTEXT]    Var  var  =  t.getScope().getVar(lvalue.getString());  if  (var  !=  null)  {  if  (var.isTypeInferred())  {  return;  }  }  }  JSType  leftType  =  getJSType(lvalue);    [BUGGY]  Node  rightChild  =  leftType!=  null?  leftType.getLastChild()  :  var.getString();  [BUGGY]    JSType  rightType  =  getJSType(rightChild);  if  (validator.expectCanAssignTo(  t,  assign,  rightType,  leftType,     "assignment   "))  {  ensureTyped(t,  assign,  rightType);  }  else  {  ensureTyped(t,  assign);  }  }  [CLASS]  TypeCheck  [METHOD]  visitAssign  [RETURN_TYPE]  void  NodeTraversal  t  Node  assign  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  jsType  leftType  objectJsType  rightType  rvalueType  NodeTraversal  t  DiagnosticGroup  ALL_DIAGNOSTICS  CheckLevel  reportMissingOverride  reportUnknownTypes  Var  var  Node  assign  lvalue  object  object2  rightChild  rvalue  FunctionType  functionType  ScopeCreator  scopeCreator  String  OVERRIDING_PROTOTYPE_WITH_NON_OBJECT  functionPrivateName  message  property  property2  JSDocInfo  info  int  noTypeCheckSection  nullCount  typedCount  unknownCount  TypeValidator  validator  ObjectType  type  AbstractCompiler  compiler  JSTypeRegistry  typeRegistry  boolean  enterSection  externs  inExterns  report  reportMissingProperties  typeable  Scope  outerScope  topScope  DiagnosticType  BAD_DELETE  BAD_IMPLEMENTED_TYPE  BIT_OPERATION  CONFLICTING_EXTENDED_TYPE  CONFLICTING_IMPLEMENTED_TYPE  CONSTRUCTOR_NOT_CALLABLE  DETERMINISTIC_TEST  DETERMINISTIC_TEST_NO_RESULT  ENUM_DUP  ENUM_NOT_CONSTANT  EXPECTED_THIS_TYPE  FUNCTION_MASKS_VARIABLE  HIDDEN_INTERFACE_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY_MISMATCH  ILLEGAL_IMPLICIT_CAST  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE  INEXISTENT_ENUM_ELEMENT  INEXISTENT_PROPERTY  INTERFACE_FUNCTION_NOT_EMPTY  INTERFACE_METHOD_OVERRIDE  INVALID_INTERFACE_MEMBER_DECLARATION  MULTIPLE_VAR_DEF  NOT_A_CONSTRUCTOR  NOT_CALLABLE  UNEXPECTED_TOKEN  UNKNOWN_EXPR_TYPE  UNKNOWN_OVERRIDE  UNRESOLVED_TYPE  WRONG_ARGUMENT_COUNT  diagnosticType  InferJSDocInfo  inferJSDocInfo  	projects/Closure66/src/com/google/javascript/jscomp/TypeCheck.java	0.21320071635561041	939	939	2	replace	Node  rightChild  =  leftType!=  null?  leftType.getLastChild()  :  var.getString();	  Node    rightChild    =    leftType.getLastChild();    	non-compiled	[CE]  orphaned  case	3	None	replace
30	[BUG]  [BUGGY]  Node  rightChild  =  var.getLowerCase();  [CE]  orphaned  case  [FE]                  AssertionFailedError    [CONTEXT]    Var  var  =  t.getScope().getVar(lvalue.getString());  if  (var  !=  null)  {  if  (var.isTypeInferred())  {  return;  }  }  }  JSType  leftType  =  getJSType(lvalue);    [BUGGY]  Node  rightChild  =  var.getLowerCase();  [BUGGY]    JSType  rightType  =  getJSType(rightChild);  if  (validator.expectCanAssignTo(  t,  assign,  rightType,  leftType,     "assignment   "))  {  ensureTyped(t,  assign,  rightType);  }  else  {  ensureTyped(t,  assign);  }  }  [CLASS]  TypeCheck  [METHOD]  visitAssign  [RETURN_TYPE]  void  NodeTraversal  t  Node  assign  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  jsType  leftType  objectJsType  rightType  rvalueType  NodeTraversal  t  DiagnosticGroup  ALL_DIAGNOSTICS  CheckLevel  reportMissingOverride  reportUnknownTypes  Var  var  Node  assign  lvalue  object  object2  rightChild  rvalue  FunctionType  functionType  ScopeCreator  scopeCreator  String  OVERRIDING_PROTOTYPE_WITH_NON_OBJECT  functionPrivateName  message  property  property2  JSDocInfo  info  int  noTypeCheckSection  nullCount  typedCount  unknownCount  TypeValidator  validator  ObjectType  type  AbstractCompiler  compiler  JSTypeRegistry  typeRegistry  boolean  enterSection  externs  inExterns  report  reportMissingProperties  typeable  Scope  outerScope  topScope  DiagnosticType  BAD_DELETE  BAD_IMPLEMENTED_TYPE  BIT_OPERATION  CONFLICTING_EXTENDED_TYPE  CONFLICTING_IMPLEMENTED_TYPE  CONSTRUCTOR_NOT_CALLABLE  DETERMINISTIC_TEST  DETERMINISTIC_TEST_NO_RESULT  ENUM_DUP  ENUM_NOT_CONSTANT  EXPECTED_THIS_TYPE  FUNCTION_MASKS_VARIABLE  HIDDEN_INTERFACE_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY_MISMATCH  ILLEGAL_IMPLICIT_CAST  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE  INEXISTENT_ENUM_ELEMENT  INEXISTENT_PROPERTY  INTERFACE_FUNCTION_NOT_EMPTY  INTERFACE_METHOD_OVERRIDE  INVALID_INTERFACE_MEMBER_DECLARATION  MULTIPLE_VAR_DEF  NOT_A_CONSTRUCTOR  NOT_CALLABLE  UNEXPECTED_TOKEN  UNKNOWN_EXPR_TYPE  UNKNOWN_OVERRIDE  UNRESOLVED_TYPE  WRONG_ARGUMENT_COUNT  diagnosticType  InferJSDocInfo  inferJSDocInfo  	projects/Closure66/src/com/google/javascript/jscomp/TypeCheck.java	0.21320071635561041	939	939	2	replace	Node  rightChild  =  var.getLowerCase();	  Node    rightChild    =    var.getFirstChild();    	non-compiled	[CE]  orphaned  case	6	None	replace
31	[BUG]  [BUGGY]  Node  rightChild  =  var.getLocalPart();  [CE]  orphaned  case  [FE]                    AssertionFailedError    [CONTEXT]    Var  var  =  t.getScope().getVar(lvalue.getString());  if  (var  !=  null)  {  if  (var.isTypeInferred())  {  return;  }  }  }  JSType  leftType  =  getJSType(lvalue);    [BUGGY]  Node  rightChild  =  var.getLocalPart();  [BUGGY]    JSType  rightType  =  getJSType(rightChild);  if  (validator.expectCanAssignTo(  t,  assign,  rightType,  leftType,     "assignment   "))  {  ensureTyped(t,  assign,  rightType);  }  else  {  ensureTyped(t,  assign);  }  }  [CLASS]  TypeCheck  [METHOD]  visitAssign  [RETURN_TYPE]  void  NodeTraversal  t  Node  assign  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  jsType  leftType  objectJsType  rightType  rvalueType  NodeTraversal  t  DiagnosticGroup  ALL_DIAGNOSTICS  CheckLevel  reportMissingOverride  reportUnknownTypes  Var  var  Node  assign  lvalue  object  object2  rightChild  rvalue  FunctionType  functionType  ScopeCreator  scopeCreator  String  OVERRIDING_PROTOTYPE_WITH_NON_OBJECT  functionPrivateName  message  property  property2  JSDocInfo  info  int  noTypeCheckSection  nullCount  typedCount  unknownCount  TypeValidator  validator  ObjectType  type  AbstractCompiler  compiler  JSTypeRegistry  typeRegistry  boolean  enterSection  externs  inExterns  report  reportMissingProperties  typeable  Scope  outerScope  topScope  DiagnosticType  BAD_DELETE  BAD_IMPLEMENTED_TYPE  BIT_OPERATION  CONFLICTING_EXTENDED_TYPE  CONFLICTING_IMPLEMENTED_TYPE  CONSTRUCTOR_NOT_CALLABLE  DETERMINISTIC_TEST  DETERMINISTIC_TEST_NO_RESULT  ENUM_DUP  ENUM_NOT_CONSTANT  EXPECTED_THIS_TYPE  FUNCTION_MASKS_VARIABLE  HIDDEN_INTERFACE_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY_MISMATCH  ILLEGAL_IMPLICIT_CAST  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE  INEXISTENT_ENUM_ELEMENT  INEXISTENT_PROPERTY  INTERFACE_FUNCTION_NOT_EMPTY  INTERFACE_METHOD_OVERRIDE  INVALID_INTERFACE_MEMBER_DECLARATION  MULTIPLE_VAR_DEF  NOT_A_CONSTRUCTOR  NOT_CALLABLE  UNEXPECTED_TOKEN  UNKNOWN_EXPR_TYPE  UNKNOWN_OVERRIDE  UNRESOLVED_TYPE  WRONG_ARGUMENT_COUNT  diagnosticType  InferJSDocInfo  inferJSDocInfo  	projects/Closure66/src/com/google/javascript/jscomp/TypeCheck.java	0.21320071635561041	939	939	2	replace	Node  rightChild  =  var.getLocalPart();	  Node    rightChild    =    var.getFirstChild();    	non-compiled	[CE]  orphaned  case	6	None	replace
32	[BUG]  [BUGGY]  Node  rightChild  =  object2.getFirstChild();  [CE]  orphaned  case  [FE]          AssertionFailedError    [CONTEXT]    Var  var  =  t.getScope().getVar(lvalue.getString());  if  (var  !=  null)  {  if  (var.isTypeInferred())  {  return;  }  }  }  JSType  leftType  =  getJSType(lvalue);    [BUGGY]  Node  rightChild  =  object2.getFirstChild();  [BUGGY]    JSType  rightType  =  getJSType(rightChild);  if  (validator.expectCanAssignTo(  t,  assign,  rightType,  leftType,     "assignment   "))  {  ensureTyped(t,  assign,  rightType);  }  else  {  ensureTyped(t,  assign);  }  }  [CLASS]  TypeCheck  [METHOD]  visitAssign  [RETURN_TYPE]  void  NodeTraversal  t  Node  assign  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  jsType  leftType  objectJsType  rightType  rvalueType  NodeTraversal  t  DiagnosticGroup  ALL_DIAGNOSTICS  CheckLevel  reportMissingOverride  reportUnknownTypes  Var  var  Node  assign  lvalue  object  object2  rightChild  rvalue  FunctionType  functionType  ScopeCreator  scopeCreator  String  OVERRIDING_PROTOTYPE_WITH_NON_OBJECT  functionPrivateName  message  property  property2  JSDocInfo  info  int  noTypeCheckSection  nullCount  typedCount  unknownCount  TypeValidator  validator  ObjectType  type  AbstractCompiler  compiler  JSTypeRegistry  typeRegistry  boolean  enterSection  externs  inExterns  report  reportMissingProperties  typeable  Scope  outerScope  topScope  DiagnosticType  BAD_DELETE  BAD_IMPLEMENTED_TYPE  BIT_OPERATION  CONFLICTING_EXTENDED_TYPE  CONFLICTING_IMPLEMENTED_TYPE  CONSTRUCTOR_NOT_CALLABLE  DETERMINISTIC_TEST  DETERMINISTIC_TEST_NO_RESULT  ENUM_DUP  ENUM_NOT_CONSTANT  EXPECTED_THIS_TYPE  FUNCTION_MASKS_VARIABLE  HIDDEN_INTERFACE_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY_MISMATCH  ILLEGAL_IMPLICIT_CAST  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE  INEXISTENT_ENUM_ELEMENT  INEXISTENT_PROPERTY  INTERFACE_FUNCTION_NOT_EMPTY  INTERFACE_METHOD_OVERRIDE  INVALID_INTERFACE_MEMBER_DECLARATION  MULTIPLE_VAR_DEF  NOT_A_CONSTRUCTOR  NOT_CALLABLE  UNEXPECTED_TOKEN  UNKNOWN_EXPR_TYPE  UNKNOWN_OVERRIDE  UNRESOLVED_TYPE  WRONG_ARGUMENT_COUNT  diagnosticType  InferJSDocInfo  inferJSDocInfo  	projects/Closure66/src/com/google/javascript/jscomp/TypeCheck.java	0.21320071635561041	939	939	2	replace	Node  rightChild  =  object2.getFirstChild();	  Node    rightChild    =    object.getFirstChild();    	non-compiled	[CE]  orphaned  case	10	None	replace
33	[BUG]  [BUGGY]  Node  rightChild  =  object2.getLastChild();  [CE]  orphaned  case  [FE]            AssertionFailedError    [CONTEXT]    Var  var  =  t.getScope().getVar(lvalue.getString());  if  (var  !=  null)  {  if  (var.isTypeInferred())  {  return;  }  }  }  JSType  leftType  =  getJSType(lvalue);    [BUGGY]  Node  rightChild  =  object2.getLastChild();  [BUGGY]    JSType  rightType  =  getJSType(rightChild);  if  (validator.expectCanAssignTo(  t,  assign,  rightType,  leftType,     "assignment   "))  {  ensureTyped(t,  assign,  rightType);  }  else  {  ensureTyped(t,  assign);  }  }  [CLASS]  TypeCheck  [METHOD]  visitAssign  [RETURN_TYPE]  void  NodeTraversal  t  Node  assign  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  jsType  leftType  objectJsType  rightType  rvalueType  NodeTraversal  t  DiagnosticGroup  ALL_DIAGNOSTICS  CheckLevel  reportMissingOverride  reportUnknownTypes  Var  var  Node  assign  lvalue  object  object2  rightChild  rvalue  FunctionType  functionType  ScopeCreator  scopeCreator  String  OVERRIDING_PROTOTYPE_WITH_NON_OBJECT  functionPrivateName  message  property  property2  JSDocInfo  info  int  noTypeCheckSection  nullCount  typedCount  unknownCount  TypeValidator  validator  ObjectType  type  AbstractCompiler  compiler  JSTypeRegistry  typeRegistry  boolean  enterSection  externs  inExterns  report  reportMissingProperties  typeable  Scope  outerScope  topScope  DiagnosticType  BAD_DELETE  BAD_IMPLEMENTED_TYPE  BIT_OPERATION  CONFLICTING_EXTENDED_TYPE  CONFLICTING_IMPLEMENTED_TYPE  CONSTRUCTOR_NOT_CALLABLE  DETERMINISTIC_TEST  DETERMINISTIC_TEST_NO_RESULT  ENUM_DUP  ENUM_NOT_CONSTANT  EXPECTED_THIS_TYPE  FUNCTION_MASKS_VARIABLE  HIDDEN_INTERFACE_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY_MISMATCH  ILLEGAL_IMPLICIT_CAST  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE  INEXISTENT_ENUM_ELEMENT  INEXISTENT_PROPERTY  INTERFACE_FUNCTION_NOT_EMPTY  INTERFACE_METHOD_OVERRIDE  INVALID_INTERFACE_MEMBER_DECLARATION  MULTIPLE_VAR_DEF  NOT_A_CONSTRUCTOR  NOT_CALLABLE  UNEXPECTED_TOKEN  UNKNOWN_EXPR_TYPE  UNKNOWN_OVERRIDE  UNRESOLVED_TYPE  WRONG_ARGUMENT_COUNT  diagnosticType  InferJSDocInfo  inferJSDocInfo  	projects/Closure66/src/com/google/javascript/jscomp/TypeCheck.java	0.21320071635561041	939	939	2	replace	Node  rightChild  =  object2.getLastChild();	  Node    rightChild    =    object.getFirstChild();    	non-compiled	[CE]  orphaned  case	10	None	replace
34	[BUG]  [BUGGY]  Node  rightChild  =  object.removeFirstChild();  [CE]  orphaned  case  [FE]          AssertionFailedError    [CONTEXT]    Var  var  =  t.getScope().getVar(lvalue.getString());  if  (var  !=  null)  {  if  (var.isTypeInferred())  {  return;  }  }  }  JSType  leftType  =  getJSType(lvalue);    [BUGGY]  Node  rightChild  =  object.removeFirstChild();  [BUGGY]    JSType  rightType  =  getJSType(rightChild);  if  (validator.expectCanAssignTo(  t,  assign,  rightType,  leftType,     "assignment   "))  {  ensureTyped(t,  assign,  rightType);  }  else  {  ensureTyped(t,  assign);  }  }  [CLASS]  TypeCheck  [METHOD]  visitAssign  [RETURN_TYPE]  void  NodeTraversal  t  Node  assign  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  jsType  leftType  objectJsType  rightType  rvalueType  NodeTraversal  t  DiagnosticGroup  ALL_DIAGNOSTICS  CheckLevel  reportMissingOverride  reportUnknownTypes  Var  var  Node  assign  lvalue  object  object2  rightChild  rvalue  FunctionType  functionType  ScopeCreator  scopeCreator  String  OVERRIDING_PROTOTYPE_WITH_NON_OBJECT  functionPrivateName  message  property  property2  JSDocInfo  info  int  noTypeCheckSection  nullCount  typedCount  unknownCount  TypeValidator  validator  ObjectType  type  AbstractCompiler  compiler  JSTypeRegistry  typeRegistry  boolean  enterSection  externs  inExterns  report  reportMissingProperties  typeable  Scope  outerScope  topScope  DiagnosticType  BAD_DELETE  BAD_IMPLEMENTED_TYPE  BIT_OPERATION  CONFLICTING_EXTENDED_TYPE  CONFLICTING_IMPLEMENTED_TYPE  CONSTRUCTOR_NOT_CALLABLE  DETERMINISTIC_TEST  DETERMINISTIC_TEST_NO_RESULT  ENUM_DUP  ENUM_NOT_CONSTANT  EXPECTED_THIS_TYPE  FUNCTION_MASKS_VARIABLE  HIDDEN_INTERFACE_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY_MISMATCH  ILLEGAL_IMPLICIT_CAST  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE  INEXISTENT_ENUM_ELEMENT  INEXISTENT_PROPERTY  INTERFACE_FUNCTION_NOT_EMPTY  INTERFACE_METHOD_OVERRIDE  INVALID_INTERFACE_MEMBER_DECLARATION  MULTIPLE_VAR_DEF  NOT_A_CONSTRUCTOR  NOT_CALLABLE  UNEXPECTED_TOKEN  UNKNOWN_EXPR_TYPE  UNKNOWN_OVERRIDE  UNRESOLVED_TYPE  WRONG_ARGUMENT_COUNT  diagnosticType  InferJSDocInfo  inferJSDocInfo  	projects/Closure66/src/com/google/javascript/jscomp/TypeCheck.java	0.21320071635561041	939	939	2	replace	Node  rightChild  =  object.removeFirstChild();	  Node    rightChild    =    object.getFirstChild();    	non-compiled	[CE]  orphaned  case	10	None	replace
35	[BUG]  [BUGGY]  Node  rightChild  =  object.getNext();  [CE]  orphaned  case  [FE]            AssertionFailedError    [CONTEXT]    Var  var  =  t.getScope().getVar(lvalue.getString());  if  (var  !=  null)  {  if  (var.isTypeInferred())  {  return;  }  }  }  JSType  leftType  =  getJSType(lvalue);    [BUGGY]  Node  rightChild  =  object.getNext();  [BUGGY]    JSType  rightType  =  getJSType(rightChild);  if  (validator.expectCanAssignTo(  t,  assign,  rightType,  leftType,     "assignment   "))  {  ensureTyped(t,  assign,  rightType);  }  else  {  ensureTyped(t,  assign);  }  }  [CLASS]  TypeCheck  [METHOD]  visitAssign  [RETURN_TYPE]  void  NodeTraversal  t  Node  assign  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  jsType  leftType  objectJsType  rightType  rvalueType  NodeTraversal  t  DiagnosticGroup  ALL_DIAGNOSTICS  CheckLevel  reportMissingOverride  reportUnknownTypes  Var  var  Node  assign  lvalue  object  object2  rightChild  rvalue  FunctionType  functionType  ScopeCreator  scopeCreator  String  OVERRIDING_PROTOTYPE_WITH_NON_OBJECT  functionPrivateName  message  property  property2  JSDocInfo  info  int  noTypeCheckSection  nullCount  typedCount  unknownCount  TypeValidator  validator  ObjectType  type  AbstractCompiler  compiler  JSTypeRegistry  typeRegistry  boolean  enterSection  externs  inExterns  report  reportMissingProperties  typeable  Scope  outerScope  topScope  DiagnosticType  BAD_DELETE  BAD_IMPLEMENTED_TYPE  BIT_OPERATION  CONFLICTING_EXTENDED_TYPE  CONFLICTING_IMPLEMENTED_TYPE  CONSTRUCTOR_NOT_CALLABLE  DETERMINISTIC_TEST  DETERMINISTIC_TEST_NO_RESULT  ENUM_DUP  ENUM_NOT_CONSTANT  EXPECTED_THIS_TYPE  FUNCTION_MASKS_VARIABLE  HIDDEN_INTERFACE_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY_MISMATCH  ILLEGAL_IMPLICIT_CAST  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE  INEXISTENT_ENUM_ELEMENT  INEXISTENT_PROPERTY  INTERFACE_FUNCTION_NOT_EMPTY  INTERFACE_METHOD_OVERRIDE  INVALID_INTERFACE_MEMBER_DECLARATION  MULTIPLE_VAR_DEF  NOT_A_CONSTRUCTOR  NOT_CALLABLE  UNEXPECTED_TOKEN  UNKNOWN_EXPR_TYPE  UNKNOWN_OVERRIDE  UNRESOLVED_TYPE  WRONG_ARGUMENT_COUNT  diagnosticType  InferJSDocInfo  inferJSDocInfo  	projects/Closure66/src/com/google/javascript/jscomp/TypeCheck.java	0.21320071635561041	939	939	2	replace	Node  rightChild  =  object.getNext();	  Node    rightChild    =    object.getFirstChild();    	non-compiled	[CE]  orphaned  case	10	None	replace
36	[BUG]  [BUGGY]  Node  rightChild  =  t.getScope().getRightNode(lvalue);  [CE]  orphaned  case  [FE]          AssertionFailedError    [CONTEXT]    Var  var  =  t.getScope().getVar(lvalue.getString());  if  (var  !=  null)  {  if  (var.isTypeInferred())  {  return;  }  }  }  JSType  leftType  =  getJSType(lvalue);    [BUGGY]  Node  rightChild  =  t.getScope().getRightNode(lvalue);  [BUGGY]    JSType  rightType  =  getJSType(rightChild);  if  (validator.expectCanAssignTo(  t,  assign,  rightType,  leftType,     "assignment   "))  {  ensureTyped(t,  assign,  rightType);  }  else  {  ensureTyped(t,  assign);  }  }  [CLASS]  TypeCheck  [METHOD]  visitAssign  [RETURN_TYPE]  void  NodeTraversal  t  Node  assign  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  jsType  leftType  objectJsType  rightType  rvalueType  NodeTraversal  t  DiagnosticGroup  ALL_DIAGNOSTICS  CheckLevel  reportMissingOverride  reportUnknownTypes  Var  var  Node  assign  lvalue  object  object2  rightChild  rvalue  FunctionType  functionType  ScopeCreator  scopeCreator  String  OVERRIDING_PROTOTYPE_WITH_NON_OBJECT  functionPrivateName  message  property  property2  JSDocInfo  info  int  noTypeCheckSection  nullCount  typedCount  unknownCount  TypeValidator  validator  ObjectType  type  AbstractCompiler  compiler  JSTypeRegistry  typeRegistry  boolean  enterSection  externs  inExterns  report  reportMissingProperties  typeable  Scope  outerScope  topScope  DiagnosticType  BAD_DELETE  BAD_IMPLEMENTED_TYPE  BIT_OPERATION  CONFLICTING_EXTENDED_TYPE  CONFLICTING_IMPLEMENTED_TYPE  CONSTRUCTOR_NOT_CALLABLE  DETERMINISTIC_TEST  DETERMINISTIC_TEST_NO_RESULT  ENUM_DUP  ENUM_NOT_CONSTANT  EXPECTED_THIS_TYPE  FUNCTION_MASKS_VARIABLE  HIDDEN_INTERFACE_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY_MISMATCH  ILLEGAL_IMPLICIT_CAST  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE  INEXISTENT_ENUM_ELEMENT  INEXISTENT_PROPERTY  INTERFACE_FUNCTION_NOT_EMPTY  INTERFACE_METHOD_OVERRIDE  INVALID_INTERFACE_MEMBER_DECLARATION  MULTIPLE_VAR_DEF  NOT_A_CONSTRUCTOR  NOT_CALLABLE  UNEXPECTED_TOKEN  UNKNOWN_EXPR_TYPE  UNKNOWN_OVERRIDE  UNRESOLVED_TYPE  WRONG_ARGUMENT_COUNT  diagnosticType  InferJSDocInfo  inferJSDocInfo  	projects/Closure66/src/com/google/javascript/jscomp/TypeCheck.java	0.21320071635561041	939	939	2	replace	Node  rightChild  =  t.getScope().getRightNode(lvalue);	  Node    rightChild    =    t.getScope().getRootNode();    	non-compiled	[CE]  orphaned  case	12	None	replace
37	[BUG]  [BUGGY]  Node  rightChild  =  t.getScope().getRootNode(true);  [CE]  orphaned  case  [FE]            AssertionFailedError    [CONTEXT]    Var  var  =  t.getScope().getVar(lvalue.getString());  if  (var  !=  null)  {  if  (var.isTypeInferred())  {  return;  }  }  }  JSType  leftType  =  getJSType(lvalue);    [BUGGY]  Node  rightChild  =  t.getScope().getRootNode(true);  [BUGGY]    JSType  rightType  =  getJSType(rightChild);  if  (validator.expectCanAssignTo(  t,  assign,  rightType,  leftType,     "assignment   "))  {  ensureTyped(t,  assign,  rightType);  }  else  {  ensureTyped(t,  assign);  }  }  [CLASS]  TypeCheck  [METHOD]  visitAssign  [RETURN_TYPE]  void  NodeTraversal  t  Node  assign  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  jsType  leftType  objectJsType  rightType  rvalueType  NodeTraversal  t  DiagnosticGroup  ALL_DIAGNOSTICS  CheckLevel  reportMissingOverride  reportUnknownTypes  Var  var  Node  assign  lvalue  object  object2  rightChild  rvalue  FunctionType  functionType  ScopeCreator  scopeCreator  String  OVERRIDING_PROTOTYPE_WITH_NON_OBJECT  functionPrivateName  message  property  property2  JSDocInfo  info  int  noTypeCheckSection  nullCount  typedCount  unknownCount  TypeValidator  validator  ObjectType  type  AbstractCompiler  compiler  JSTypeRegistry  typeRegistry  boolean  enterSection  externs  inExterns  report  reportMissingProperties  typeable  Scope  outerScope  topScope  DiagnosticType  BAD_DELETE  BAD_IMPLEMENTED_TYPE  BIT_OPERATION  CONFLICTING_EXTENDED_TYPE  CONFLICTING_IMPLEMENTED_TYPE  CONSTRUCTOR_NOT_CALLABLE  DETERMINISTIC_TEST  DETERMINISTIC_TEST_NO_RESULT  ENUM_DUP  ENUM_NOT_CONSTANT  EXPECTED_THIS_TYPE  FUNCTION_MASKS_VARIABLE  HIDDEN_INTERFACE_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY_MISMATCH  ILLEGAL_IMPLICIT_CAST  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE  INEXISTENT_ENUM_ELEMENT  INEXISTENT_PROPERTY  INTERFACE_FUNCTION_NOT_EMPTY  INTERFACE_METHOD_OVERRIDE  INVALID_INTERFACE_MEMBER_DECLARATION  MULTIPLE_VAR_DEF  NOT_A_CONSTRUCTOR  NOT_CALLABLE  UNEXPECTED_TOKEN  UNKNOWN_EXPR_TYPE  UNKNOWN_OVERRIDE  UNRESOLVED_TYPE  WRONG_ARGUMENT_COUNT  diagnosticType  InferJSDocInfo  inferJSDocInfo  	projects/Closure66/src/com/google/javascript/jscomp/TypeCheck.java	0.21320071635561041	939	939	2	replace	Node  rightChild  =  t.getScope().getRootNode(true);	  Node    rightChild    =    t.getScope().getRootNode();    	non-compiled	[CE]  orphaned  case	12	None	replace
38	[BUG]  [BUGGY]  JSType  rightType  =  getJSType(leftChild);  [CE]  orphaned  case  [FE]                      AssertionFailedError    [CONTEXT]    Var  var  =  t.getScope().getVar(lvalue.getString());  if  (var  !=  null)  {  if  (var.isTypeInferred())  {  return;  }  }  }  JSType  leftType  =  getJSType(lvalue);    [BUGGY]  JSType  rightType  =  getJSType(leftChild);  [BUGGY]    JSType  rightType  =  getJSType(rightChild);  if  (validator.expectCanAssignTo(  t,  assign,  rightType,  leftType,     "assignment   "))  {  ensureTyped(t,  assign,  rightType);  }  else  {  ensureTyped(t,  assign);  }  }  [CLASS]  TypeCheck  [METHOD]  visitAssign  [RETURN_TYPE]  void  NodeTraversal  t  Node  assign  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  jsType  leftType  objectJsType  rightType  rvalueType  NodeTraversal  t  DiagnosticGroup  ALL_DIAGNOSTICS  CheckLevel  reportMissingOverride  reportUnknownTypes  Var  var  Node  assign  lvalue  object  object2  rightChild  rvalue  FunctionType  functionType  ScopeCreator  scopeCreator  String  OVERRIDING_PROTOTYPE_WITH_NON_OBJECT  functionPrivateName  message  property  property2  JSDocInfo  info  int  noTypeCheckSection  nullCount  typedCount  unknownCount  TypeValidator  validator  ObjectType  type  AbstractCompiler  compiler  JSTypeRegistry  typeRegistry  boolean  enterSection  externs  inExterns  report  reportMissingProperties  typeable  Scope  outerScope  topScope  DiagnosticType  BAD_DELETE  BAD_IMPLEMENTED_TYPE  BIT_OPERATION  CONFLICTING_EXTENDED_TYPE  CONFLICTING_IMPLEMENTED_TYPE  CONSTRUCTOR_NOT_CALLABLE  DETERMINISTIC_TEST  DETERMINISTIC_TEST_NO_RESULT  ENUM_DUP  ENUM_NOT_CONSTANT  EXPECTED_THIS_TYPE  FUNCTION_MASKS_VARIABLE  HIDDEN_INTERFACE_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY_MISMATCH  ILLEGAL_IMPLICIT_CAST  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE  INEXISTENT_ENUM_ELEMENT  INEXISTENT_PROPERTY  INTERFACE_FUNCTION_NOT_EMPTY  INTERFACE_METHOD_OVERRIDE  INVALID_INTERFACE_MEMBER_DECLARATION  MULTIPLE_VAR_DEF  NOT_A_CONSTRUCTOR  NOT_CALLABLE  UNEXPECTED_TOKEN  UNKNOWN_EXPR_TYPE  UNKNOWN_OVERRIDE  UNRESOLVED_TYPE  WRONG_ARGUMENT_COUNT  diagnosticType  InferJSDocInfo  inferJSDocInfo  	projects/Closure66/src/com/google/javascript/jscomp/TypeCheck.java	0.21320071635561041	939	939	2	replace	JSType  rightType  =  getJSType(leftChild);	      	non-compiled	[CE]  orphaned  case	8	None	replace
39	[BUG]  [BUGGY]  Node  rightChild  =  t.getScope().getLastChild().getString();  [CE]  orphaned  case  [FE]              AssertionFailedError    [CONTEXT]    Var  var  =  t.getScope().getVar(lvalue.getString());  if  (var  !=  null)  {  if  (var.isTypeInferred())  {  return;  }  }  }  JSType  leftType  =  getJSType(lvalue);    [BUGGY]  Node  rightChild  =  t.getScope().getLastChild().getString();  [BUGGY]    JSType  rightType  =  getJSType(rightChild);  if  (validator.expectCanAssignTo(  t,  assign,  rightType,  leftType,     "assignment   "))  {  ensureTyped(t,  assign,  rightType);  }  else  {  ensureTyped(t,  assign);  }  }  [CLASS]  TypeCheck  [METHOD]  visitAssign  [RETURN_TYPE]  void  NodeTraversal  t  Node  assign  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  jsType  leftType  objectJsType  rightType  rvalueType  NodeTraversal  t  DiagnosticGroup  ALL_DIAGNOSTICS  CheckLevel  reportMissingOverride  reportUnknownTypes  Var  var  Node  assign  lvalue  object  object2  rightChild  rvalue  FunctionType  functionType  ScopeCreator  scopeCreator  String  OVERRIDING_PROTOTYPE_WITH_NON_OBJECT  functionPrivateName  message  property  property2  JSDocInfo  info  int  noTypeCheckSection  nullCount  typedCount  unknownCount  TypeValidator  validator  ObjectType  type  AbstractCompiler  compiler  JSTypeRegistry  typeRegistry  boolean  enterSection  externs  inExterns  report  reportMissingProperties  typeable  Scope  outerScope  topScope  DiagnosticType  BAD_DELETE  BAD_IMPLEMENTED_TYPE  BIT_OPERATION  CONFLICTING_EXTENDED_TYPE  CONFLICTING_IMPLEMENTED_TYPE  CONSTRUCTOR_NOT_CALLABLE  DETERMINISTIC_TEST  DETERMINISTIC_TEST_NO_RESULT  ENUM_DUP  ENUM_NOT_CONSTANT  EXPECTED_THIS_TYPE  FUNCTION_MASKS_VARIABLE  HIDDEN_INTERFACE_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY_MISMATCH  ILLEGAL_IMPLICIT_CAST  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE  INEXISTENT_ENUM_ELEMENT  INEXISTENT_PROPERTY  INTERFACE_FUNCTION_NOT_EMPTY  INTERFACE_METHOD_OVERRIDE  INVALID_INTERFACE_MEMBER_DECLARATION  MULTIPLE_VAR_DEF  NOT_A_CONSTRUCTOR  NOT_CALLABLE  UNEXPECTED_TOKEN  UNKNOWN_EXPR_TYPE  UNKNOWN_OVERRIDE  UNRESOLVED_TYPE  WRONG_ARGUMENT_COUNT  diagnosticType  InferJSDocInfo  inferJSDocInfo  	projects/Closure66/src/com/google/javascript/jscomp/TypeCheck.java	0.21320071635561041	939	939	2	replace	Node  rightChild  =  t.getScope().getLastChild().getString();	  Node    rightChild    =    t.getScope().getLastChild();    	non-compiled	[CE]  orphaned  case	4	None	replace
40	[BUG]  [BUGGY]  Node  rightChild  =  leftType!=  null?  getJSType(leftType):  leftType.getLastChild();  [CE]  orphaned  case  [FE]            AssertionFailedError    [CONTEXT]    Var  var  =  t.getScope().getVar(lvalue.getString());  if  (var  !=  null)  {  if  (var.isTypeInferred())  {  return;  }  }  }  JSType  leftType  =  getJSType(lvalue);    [BUGGY]  Node  rightChild  =  leftType!=  null?  getJSType(leftType):  leftType.getLastChild();  [BUGGY]    JSType  rightType  =  getJSType(rightChild);  if  (validator.expectCanAssignTo(  t,  assign,  rightType,  leftType,     "assignment   "))  {  ensureTyped(t,  assign,  rightType);  }  else  {  ensureTyped(t,  assign);  }  }  [CLASS]  TypeCheck  [METHOD]  visitAssign  [RETURN_TYPE]  void  NodeTraversal  t  Node  assign  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  jsType  leftType  objectJsType  rightType  rvalueType  NodeTraversal  t  DiagnosticGroup  ALL_DIAGNOSTICS  CheckLevel  reportMissingOverride  reportUnknownTypes  Var  var  Node  assign  lvalue  object  object2  rightChild  rvalue  FunctionType  functionType  ScopeCreator  scopeCreator  String  OVERRIDING_PROTOTYPE_WITH_NON_OBJECT  functionPrivateName  message  property  property2  JSDocInfo  info  int  noTypeCheckSection  nullCount  typedCount  unknownCount  TypeValidator  validator  ObjectType  type  AbstractCompiler  compiler  JSTypeRegistry  typeRegistry  boolean  enterSection  externs  inExterns  report  reportMissingProperties  typeable  Scope  outerScope  topScope  DiagnosticType  BAD_DELETE  BAD_IMPLEMENTED_TYPE  BIT_OPERATION  CONFLICTING_EXTENDED_TYPE  CONFLICTING_IMPLEMENTED_TYPE  CONSTRUCTOR_NOT_CALLABLE  DETERMINISTIC_TEST  DETERMINISTIC_TEST_NO_RESULT  ENUM_DUP  ENUM_NOT_CONSTANT  EXPECTED_THIS_TYPE  FUNCTION_MASKS_VARIABLE  HIDDEN_INTERFACE_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY_MISMATCH  ILLEGAL_IMPLICIT_CAST  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE  INEXISTENT_ENUM_ELEMENT  INEXISTENT_PROPERTY  INTERFACE_FUNCTION_NOT_EMPTY  INTERFACE_METHOD_OVERRIDE  INVALID_INTERFACE_MEMBER_DECLARATION  MULTIPLE_VAR_DEF  NOT_A_CONSTRUCTOR  NOT_CALLABLE  UNEXPECTED_TOKEN  UNKNOWN_EXPR_TYPE  UNKNOWN_OVERRIDE  UNRESOLVED_TYPE  WRONG_ARGUMENT_COUNT  diagnosticType  InferJSDocInfo  inferJSDocInfo  	projects/Closure66/src/com/google/javascript/jscomp/TypeCheck.java	0.21320071635561041	939	939	2	replace	Node  rightChild  =  leftType!=  null?  getJSType(leftType):  leftType.getLastChild();	  Node    rightChild    =    leftType.getLastChild();    	non-compiled	[CE]  orphaned  case	3	None	replace
41	[BUG]  [BUGGY]  Node  rightChild  =  var.removeFirstChild();  [CE]  orphaned  case  [FE]        AssertionFailedError    [CONTEXT]    Var  var  =  t.getScope().getVar(lvalue.getString());  if  (var  !=  null)  {  if  (var.isTypeInferred())  {  return;  }  }  }  JSType  leftType  =  getJSType(lvalue);    [BUGGY]  Node  rightChild  =  var.removeFirstChild();  [BUGGY]    JSType  rightType  =  getJSType(rightChild);  if  (validator.expectCanAssignTo(  t,  assign,  rightType,  leftType,     "assignment   "))  {  ensureTyped(t,  assign,  rightType);  }  else  {  ensureTyped(t,  assign);  }  }  [CLASS]  TypeCheck  [METHOD]  visitAssign  [RETURN_TYPE]  void  NodeTraversal  t  Node  assign  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  jsType  leftType  objectJsType  rightType  rvalueType  NodeTraversal  t  DiagnosticGroup  ALL_DIAGNOSTICS  CheckLevel  reportMissingOverride  reportUnknownTypes  Var  var  Node  assign  lvalue  object  object2  rightChild  rvalue  FunctionType  functionType  ScopeCreator  scopeCreator  String  OVERRIDING_PROTOTYPE_WITH_NON_OBJECT  functionPrivateName  message  property  property2  JSDocInfo  info  int  noTypeCheckSection  nullCount  typedCount  unknownCount  TypeValidator  validator  ObjectType  type  AbstractCompiler  compiler  JSTypeRegistry  typeRegistry  boolean  enterSection  externs  inExterns  report  reportMissingProperties  typeable  Scope  outerScope  topScope  DiagnosticType  BAD_DELETE  BAD_IMPLEMENTED_TYPE  BIT_OPERATION  CONFLICTING_EXTENDED_TYPE  CONFLICTING_IMPLEMENTED_TYPE  CONSTRUCTOR_NOT_CALLABLE  DETERMINISTIC_TEST  DETERMINISTIC_TEST_NO_RESULT  ENUM_DUP  ENUM_NOT_CONSTANT  EXPECTED_THIS_TYPE  FUNCTION_MASKS_VARIABLE  HIDDEN_INTERFACE_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY_MISMATCH  ILLEGAL_IMPLICIT_CAST  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE  INEXISTENT_ENUM_ELEMENT  INEXISTENT_PROPERTY  INTERFACE_FUNCTION_NOT_EMPTY  INTERFACE_METHOD_OVERRIDE  INVALID_INTERFACE_MEMBER_DECLARATION  MULTIPLE_VAR_DEF  NOT_A_CONSTRUCTOR  NOT_CALLABLE  UNEXPECTED_TOKEN  UNKNOWN_EXPR_TYPE  UNKNOWN_OVERRIDE  UNRESOLVED_TYPE  WRONG_ARGUMENT_COUNT  diagnosticType  InferJSDocInfo  inferJSDocInfo  	projects/Closure66/src/com/google/javascript/jscomp/TypeCheck.java	0.21320071635561041	939	939	2	replace	Node  rightChild  =  var.removeFirstChild();	  Node    rightChild    =    var.getLastChild();    	non-compiled	[CE]  orphaned  case	1	None	replace
42	[BUG]  [BUGGY]  Node  rightChild  =  t.getScope().getRootNode(rvalue);  [CE]  orphaned  case  [FE]          AssertionFailedError    [CONTEXT]    Var  var  =  t.getScope().getVar(lvalue.getString());  if  (var  !=  null)  {  if  (var.isTypeInferred())  {  return;  }  }  }  JSType  leftType  =  getJSType(lvalue);    [BUGGY]  Node  rightChild  =  t.getScope().getRootNode(rvalue);  [BUGGY]    JSType  rightType  =  getJSType(rightChild);  if  (validator.expectCanAssignTo(  t,  assign,  rightType,  leftType,     "assignment   "))  {  ensureTyped(t,  assign,  rightType);  }  else  {  ensureTyped(t,  assign);  }  }  [CLASS]  TypeCheck  [METHOD]  visitAssign  [RETURN_TYPE]  void  NodeTraversal  t  Node  assign  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  jsType  leftType  objectJsType  rightType  rvalueType  NodeTraversal  t  DiagnosticGroup  ALL_DIAGNOSTICS  CheckLevel  reportMissingOverride  reportUnknownTypes  Var  var  Node  assign  lvalue  object  object2  rightChild  rvalue  FunctionType  functionType  ScopeCreator  scopeCreator  String  OVERRIDING_PROTOTYPE_WITH_NON_OBJECT  functionPrivateName  message  property  property2  JSDocInfo  info  int  noTypeCheckSection  nullCount  typedCount  unknownCount  TypeValidator  validator  ObjectType  type  AbstractCompiler  compiler  JSTypeRegistry  typeRegistry  boolean  enterSection  externs  inExterns  report  reportMissingProperties  typeable  Scope  outerScope  topScope  DiagnosticType  BAD_DELETE  BAD_IMPLEMENTED_TYPE  BIT_OPERATION  CONFLICTING_EXTENDED_TYPE  CONFLICTING_IMPLEMENTED_TYPE  CONSTRUCTOR_NOT_CALLABLE  DETERMINISTIC_TEST  DETERMINISTIC_TEST_NO_RESULT  ENUM_DUP  ENUM_NOT_CONSTANT  EXPECTED_THIS_TYPE  FUNCTION_MASKS_VARIABLE  HIDDEN_INTERFACE_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY_MISMATCH  ILLEGAL_IMPLICIT_CAST  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE  INEXISTENT_ENUM_ELEMENT  INEXISTENT_PROPERTY  INTERFACE_FUNCTION_NOT_EMPTY  INTERFACE_METHOD_OVERRIDE  INVALID_INTERFACE_MEMBER_DECLARATION  MULTIPLE_VAR_DEF  NOT_A_CONSTRUCTOR  NOT_CALLABLE  UNEXPECTED_TOKEN  UNKNOWN_EXPR_TYPE  UNKNOWN_OVERRIDE  UNRESOLVED_TYPE  WRONG_ARGUMENT_COUNT  diagnosticType  InferJSDocInfo  inferJSDocInfo  	projects/Closure66/src/com/google/javascript/jscomp/TypeCheck.java	0.21320071635561041	939	939	2	replace	Node  rightChild  =  t.getScope().getRootNode(rvalue);	  Node    rightChild    =    t.getScope().getRootNode();    	non-compiled	[CE]  orphaned  case	12	None	replace
43	[BUG]  [BUGGY]  Node  rightChild  =  leftType.removeFirstChild();  [CE]  orphaned  case  [FE]            AssertionFailedError    [CONTEXT]    Var  var  =  t.getScope().getVar(lvalue.getString());  if  (var  !=  null)  {  if  (var.isTypeInferred())  {  return;  }  }  }  JSType  leftType  =  getJSType(lvalue);    [BUGGY]  Node  rightChild  =  leftType.removeFirstChild();  [BUGGY]    JSType  rightType  =  getJSType(rightChild);  if  (validator.expectCanAssignTo(  t,  assign,  rightType,  leftType,     "assignment   "))  {  ensureTyped(t,  assign,  rightType);  }  else  {  ensureTyped(t,  assign);  }  }  [CLASS]  TypeCheck  [METHOD]  visitAssign  [RETURN_TYPE]  void  NodeTraversal  t  Node  assign  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  jsType  leftType  objectJsType  rightType  rvalueType  NodeTraversal  t  DiagnosticGroup  ALL_DIAGNOSTICS  CheckLevel  reportMissingOverride  reportUnknownTypes  Var  var  Node  assign  lvalue  object  object2  rightChild  rvalue  FunctionType  functionType  ScopeCreator  scopeCreator  String  OVERRIDING_PROTOTYPE_WITH_NON_OBJECT  functionPrivateName  message  property  property2  JSDocInfo  info  int  noTypeCheckSection  nullCount  typedCount  unknownCount  TypeValidator  validator  ObjectType  type  AbstractCompiler  compiler  JSTypeRegistry  typeRegistry  boolean  enterSection  externs  inExterns  report  reportMissingProperties  typeable  Scope  outerScope  topScope  DiagnosticType  BAD_DELETE  BAD_IMPLEMENTED_TYPE  BIT_OPERATION  CONFLICTING_EXTENDED_TYPE  CONFLICTING_IMPLEMENTED_TYPE  CONSTRUCTOR_NOT_CALLABLE  DETERMINISTIC_TEST  DETERMINISTIC_TEST_NO_RESULT  ENUM_DUP  ENUM_NOT_CONSTANT  EXPECTED_THIS_TYPE  FUNCTION_MASKS_VARIABLE  HIDDEN_INTERFACE_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY_MISMATCH  ILLEGAL_IMPLICIT_CAST  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE  INEXISTENT_ENUM_ELEMENT  INEXISTENT_PROPERTY  INTERFACE_FUNCTION_NOT_EMPTY  INTERFACE_METHOD_OVERRIDE  INVALID_INTERFACE_MEMBER_DECLARATION  MULTIPLE_VAR_DEF  NOT_A_CONSTRUCTOR  NOT_CALLABLE  UNEXPECTED_TOKEN  UNKNOWN_EXPR_TYPE  UNKNOWN_OVERRIDE  UNRESOLVED_TYPE  WRONG_ARGUMENT_COUNT  diagnosticType  InferJSDocInfo  inferJSDocInfo  	projects/Closure66/src/com/google/javascript/jscomp/TypeCheck.java	0.21320071635561041	939	939	2	replace	Node  rightChild  =  leftType.removeFirstChild();	  Node    rightChild    =    leftType.getLastChild();    	non-compiled	[CE]  orphaned  case	3	None	replace
44	[BUG]  [BUGGY]  Node  rightChild  =  leftType.restrictByNotNullOrUndefined();  [CE]  orphaned  case  [FE]              AssertionFailedError    [CONTEXT]    Var  var  =  t.getScope().getVar(lvalue.getString());  if  (var  !=  null)  {  if  (var.isTypeInferred())  {  return;  }  }  }  JSType  leftType  =  getJSType(lvalue);    [BUGGY]  Node  rightChild  =  leftType.restrictByNotNullOrUndefined();  [BUGGY]    JSType  rightType  =  getJSType(rightChild);  if  (validator.expectCanAssignTo(  t,  assign,  rightType,  leftType,     "assignment   "))  {  ensureTyped(t,  assign,  rightType);  }  else  {  ensureTyped(t,  assign);  }  }  [CLASS]  TypeCheck  [METHOD]  visitAssign  [RETURN_TYPE]  void  NodeTraversal  t  Node  assign  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  jsType  leftType  objectJsType  rightType  rvalueType  NodeTraversal  t  DiagnosticGroup  ALL_DIAGNOSTICS  CheckLevel  reportMissingOverride  reportUnknownTypes  Var  var  Node  assign  lvalue  object  object2  rightChild  rvalue  FunctionType  functionType  ScopeCreator  scopeCreator  String  OVERRIDING_PROTOTYPE_WITH_NON_OBJECT  functionPrivateName  message  property  property2  JSDocInfo  info  int  noTypeCheckSection  nullCount  typedCount  unknownCount  TypeValidator  validator  ObjectType  type  AbstractCompiler  compiler  JSTypeRegistry  typeRegistry  boolean  enterSection  externs  inExterns  report  reportMissingProperties  typeable  Scope  outerScope  topScope  DiagnosticType  BAD_DELETE  BAD_IMPLEMENTED_TYPE  BIT_OPERATION  CONFLICTING_EXTENDED_TYPE  CONFLICTING_IMPLEMENTED_TYPE  CONSTRUCTOR_NOT_CALLABLE  DETERMINISTIC_TEST  DETERMINISTIC_TEST_NO_RESULT  ENUM_DUP  ENUM_NOT_CONSTANT  EXPECTED_THIS_TYPE  FUNCTION_MASKS_VARIABLE  HIDDEN_INTERFACE_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY_MISMATCH  ILLEGAL_IMPLICIT_CAST  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE  INEXISTENT_ENUM_ELEMENT  INEXISTENT_PROPERTY  INTERFACE_FUNCTION_NOT_EMPTY  INTERFACE_METHOD_OVERRIDE  INVALID_INTERFACE_MEMBER_DECLARATION  MULTIPLE_VAR_DEF  NOT_A_CONSTRUCTOR  NOT_CALLABLE  UNEXPECTED_TOKEN  UNKNOWN_EXPR_TYPE  UNKNOWN_OVERRIDE  UNRESOLVED_TYPE  WRONG_ARGUMENT_COUNT  diagnosticType  InferJSDocInfo  inferJSDocInfo  	projects/Closure66/src/com/google/javascript/jscomp/TypeCheck.java	0.21320071635561041	939	939	2	replace	Node  rightChild  =  leftType.restrictByNotNullOrUndefined();	  Node    rightChild    =    leftType.getLastChild();    	non-compiled	[CE]  orphaned  case	3	None	replace
45	[BUG]  [BUGGY]  Node  rightChild  =  leftType.cloneTree();  [CE]  orphaned  case  [FE]                AssertionFailedError    [CONTEXT]    Var  var  =  t.getScope().getVar(lvalue.getString());  if  (var  !=  null)  {  if  (var.isTypeInferred())  {  return;  }  }  }  JSType  leftType  =  getJSType(lvalue);    [BUGGY]  Node  rightChild  =  leftType.cloneTree();  [BUGGY]    JSType  rightType  =  getJSType(rightChild);  if  (validator.expectCanAssignTo(  t,  assign,  rightType,  leftType,     "assignment   "))  {  ensureTyped(t,  assign,  rightType);  }  else  {  ensureTyped(t,  assign);  }  }  [CLASS]  TypeCheck  [METHOD]  visitAssign  [RETURN_TYPE]  void  NodeTraversal  t  Node  assign  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  jsType  leftType  objectJsType  rightType  rvalueType  NodeTraversal  t  DiagnosticGroup  ALL_DIAGNOSTICS  CheckLevel  reportMissingOverride  reportUnknownTypes  Var  var  Node  assign  lvalue  object  object2  rightChild  rvalue  FunctionType  functionType  ScopeCreator  scopeCreator  String  OVERRIDING_PROTOTYPE_WITH_NON_OBJECT  functionPrivateName  message  property  property2  JSDocInfo  info  int  noTypeCheckSection  nullCount  typedCount  unknownCount  TypeValidator  validator  ObjectType  type  AbstractCompiler  compiler  JSTypeRegistry  typeRegistry  boolean  enterSection  externs  inExterns  report  reportMissingProperties  typeable  Scope  outerScope  topScope  DiagnosticType  BAD_DELETE  BAD_IMPLEMENTED_TYPE  BIT_OPERATION  CONFLICTING_EXTENDED_TYPE  CONFLICTING_IMPLEMENTED_TYPE  CONSTRUCTOR_NOT_CALLABLE  DETERMINISTIC_TEST  DETERMINISTIC_TEST_NO_RESULT  ENUM_DUP  ENUM_NOT_CONSTANT  EXPECTED_THIS_TYPE  FUNCTION_MASKS_VARIABLE  HIDDEN_INTERFACE_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY_MISMATCH  ILLEGAL_IMPLICIT_CAST  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE  INEXISTENT_ENUM_ELEMENT  INEXISTENT_PROPERTY  INTERFACE_FUNCTION_NOT_EMPTY  INTERFACE_METHOD_OVERRIDE  INVALID_INTERFACE_MEMBER_DECLARATION  MULTIPLE_VAR_DEF  NOT_A_CONSTRUCTOR  NOT_CALLABLE  UNEXPECTED_TOKEN  UNKNOWN_EXPR_TYPE  UNKNOWN_OVERRIDE  UNRESOLVED_TYPE  WRONG_ARGUMENT_COUNT  diagnosticType  InferJSDocInfo  inferJSDocInfo  	projects/Closure66/src/com/google/javascript/jscomp/TypeCheck.java	0.21320071635561041	939	939	2	replace	Node  rightChild  =  leftType.cloneTree();	  Node    rightChild    =    leftType.getLastChild();    	non-compiled	[CE]  orphaned  case	3	None	replace
46	[BUG]  [BUGGY]  Node  rightChild  =  t.getScope().getVar(right.getString());  [CE]  orphaned  case  [FE]        AssertionFailedError    [CONTEXT]    Var  var  =  t.getScope().getVar(lvalue.getString());  if  (var  !=  null)  {  if  (var.isTypeInferred())  {  return;  }  }  }  JSType  leftType  =  getJSType(lvalue);    [BUGGY]  Node  rightChild  =  t.getScope().getVar(right.getString());  [BUGGY]    JSType  rightType  =  getJSType(rightChild);  if  (validator.expectCanAssignTo(  t,  assign,  rightType,  leftType,     "assignment   "))  {  ensureTyped(t,  assign,  rightType);  }  else  {  ensureTyped(t,  assign);  }  }  [CLASS]  TypeCheck  [METHOD]  visitAssign  [RETURN_TYPE]  void  NodeTraversal  t  Node  assign  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  jsType  leftType  objectJsType  rightType  rvalueType  NodeTraversal  t  DiagnosticGroup  ALL_DIAGNOSTICS  CheckLevel  reportMissingOverride  reportUnknownTypes  Var  var  Node  assign  lvalue  object  object2  rightChild  rvalue  FunctionType  functionType  ScopeCreator  scopeCreator  String  OVERRIDING_PROTOTYPE_WITH_NON_OBJECT  functionPrivateName  message  property  property2  JSDocInfo  info  int  noTypeCheckSection  nullCount  typedCount  unknownCount  TypeValidator  validator  ObjectType  type  AbstractCompiler  compiler  JSTypeRegistry  typeRegistry  boolean  enterSection  externs  inExterns  report  reportMissingProperties  typeable  Scope  outerScope  topScope  DiagnosticType  BAD_DELETE  BAD_IMPLEMENTED_TYPE  BIT_OPERATION  CONFLICTING_EXTENDED_TYPE  CONFLICTING_IMPLEMENTED_TYPE  CONSTRUCTOR_NOT_CALLABLE  DETERMINISTIC_TEST  DETERMINISTIC_TEST_NO_RESULT  ENUM_DUP  ENUM_NOT_CONSTANT  EXPECTED_THIS_TYPE  FUNCTION_MASKS_VARIABLE  HIDDEN_INTERFACE_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY_MISMATCH  ILLEGAL_IMPLICIT_CAST  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE  INEXISTENT_ENUM_ELEMENT  INEXISTENT_PROPERTY  INTERFACE_FUNCTION_NOT_EMPTY  INTERFACE_METHOD_OVERRIDE  INVALID_INTERFACE_MEMBER_DECLARATION  MULTIPLE_VAR_DEF  NOT_A_CONSTRUCTOR  NOT_CALLABLE  UNEXPECTED_TOKEN  UNKNOWN_EXPR_TYPE  UNKNOWN_OVERRIDE  UNRESOLVED_TYPE  WRONG_ARGUMENT_COUNT  diagnosticType  InferJSDocInfo  inferJSDocInfo  	projects/Closure66/src/com/google/javascript/jscomp/TypeCheck.java	0.21320071635561041	939	939	2	replace	Node  rightChild  =  t.getScope().getVar(right.getString());	  Node    rightChild    =    t.getScope().getVar(lvalue.getString());    	non-compiled	[CE]  orphaned  case	11	None	replace
47	[BUG]  [BUGGY]  Node  rightChild  =  t.getScope().getOwnSlot(lvalue.getString());  [CE]  orphaned  case  [FE]              AssertionFailedError    [CONTEXT]    Var  var  =  t.getScope().getVar(lvalue.getString());  if  (var  !=  null)  {  if  (var.isTypeInferred())  {  return;  }  }  }  JSType  leftType  =  getJSType(lvalue);    [BUGGY]  Node  rightChild  =  t.getScope().getOwnSlot(lvalue.getString());  [BUGGY]    JSType  rightType  =  getJSType(rightChild);  if  (validator.expectCanAssignTo(  t,  assign,  rightType,  leftType,     "assignment   "))  {  ensureTyped(t,  assign,  rightType);  }  else  {  ensureTyped(t,  assign);  }  }  [CLASS]  TypeCheck  [METHOD]  visitAssign  [RETURN_TYPE]  void  NodeTraversal  t  Node  assign  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  jsType  leftType  objectJsType  rightType  rvalueType  NodeTraversal  t  DiagnosticGroup  ALL_DIAGNOSTICS  CheckLevel  reportMissingOverride  reportUnknownTypes  Var  var  Node  assign  lvalue  object  object2  rightChild  rvalue  FunctionType  functionType  ScopeCreator  scopeCreator  String  OVERRIDING_PROTOTYPE_WITH_NON_OBJECT  functionPrivateName  message  property  property2  JSDocInfo  info  int  noTypeCheckSection  nullCount  typedCount  unknownCount  TypeValidator  validator  ObjectType  type  AbstractCompiler  compiler  JSTypeRegistry  typeRegistry  boolean  enterSection  externs  inExterns  report  reportMissingProperties  typeable  Scope  outerScope  topScope  DiagnosticType  BAD_DELETE  BAD_IMPLEMENTED_TYPE  BIT_OPERATION  CONFLICTING_EXTENDED_TYPE  CONFLICTING_IMPLEMENTED_TYPE  CONSTRUCTOR_NOT_CALLABLE  DETERMINISTIC_TEST  DETERMINISTIC_TEST_NO_RESULT  ENUM_DUP  ENUM_NOT_CONSTANT  EXPECTED_THIS_TYPE  FUNCTION_MASKS_VARIABLE  HIDDEN_INTERFACE_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY_MISMATCH  ILLEGAL_IMPLICIT_CAST  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE  INEXISTENT_ENUM_ELEMENT  INEXISTENT_PROPERTY  INTERFACE_FUNCTION_NOT_EMPTY  INTERFACE_METHOD_OVERRIDE  INVALID_INTERFACE_MEMBER_DECLARATION  MULTIPLE_VAR_DEF  NOT_A_CONSTRUCTOR  NOT_CALLABLE  UNEXPECTED_TOKEN  UNKNOWN_EXPR_TYPE  UNKNOWN_OVERRIDE  UNRESOLVED_TYPE  WRONG_ARGUMENT_COUNT  diagnosticType  InferJSDocInfo  inferJSDocInfo  	projects/Closure66/src/com/google/javascript/jscomp/TypeCheck.java	0.21320071635561041	939	939	2	replace	Node  rightChild  =  t.getScope().getOwnSlot(lvalue.getString());	  Node    rightChild    =    t.getScope().getLastChild();    	non-compiled	[CE]  orphaned  case	4	None	replace
48	[BUG]  [BUGGY]  Node  rightChild  =  t.getScope().getOwnSlot(lvalue);  [CE]  orphaned  case  [FE]                AssertionFailedError    [CONTEXT]    Var  var  =  t.getScope().getVar(lvalue.getString());  if  (var  !=  null)  {  if  (var.isTypeInferred())  {  return;  }  }  }  JSType  leftType  =  getJSType(lvalue);    [BUGGY]  Node  rightChild  =  t.getScope().getOwnSlot(lvalue);  [BUGGY]    JSType  rightType  =  getJSType(rightChild);  if  (validator.expectCanAssignTo(  t,  assign,  rightType,  leftType,     "assignment   "))  {  ensureTyped(t,  assign,  rightType);  }  else  {  ensureTyped(t,  assign);  }  }  [CLASS]  TypeCheck  [METHOD]  visitAssign  [RETURN_TYPE]  void  NodeTraversal  t  Node  assign  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  jsType  leftType  objectJsType  rightType  rvalueType  NodeTraversal  t  DiagnosticGroup  ALL_DIAGNOSTICS  CheckLevel  reportMissingOverride  reportUnknownTypes  Var  var  Node  assign  lvalue  object  object2  rightChild  rvalue  FunctionType  functionType  ScopeCreator  scopeCreator  String  OVERRIDING_PROTOTYPE_WITH_NON_OBJECT  functionPrivateName  message  property  property2  JSDocInfo  info  int  noTypeCheckSection  nullCount  typedCount  unknownCount  TypeValidator  validator  ObjectType  type  AbstractCompiler  compiler  JSTypeRegistry  typeRegistry  boolean  enterSection  externs  inExterns  report  reportMissingProperties  typeable  Scope  outerScope  topScope  DiagnosticType  BAD_DELETE  BAD_IMPLEMENTED_TYPE  BIT_OPERATION  CONFLICTING_EXTENDED_TYPE  CONFLICTING_IMPLEMENTED_TYPE  CONSTRUCTOR_NOT_CALLABLE  DETERMINISTIC_TEST  DETERMINISTIC_TEST_NO_RESULT  ENUM_DUP  ENUM_NOT_CONSTANT  EXPECTED_THIS_TYPE  FUNCTION_MASKS_VARIABLE  HIDDEN_INTERFACE_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY_MISMATCH  ILLEGAL_IMPLICIT_CAST  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE  INEXISTENT_ENUM_ELEMENT  INEXISTENT_PROPERTY  INTERFACE_FUNCTION_NOT_EMPTY  INTERFACE_METHOD_OVERRIDE  INVALID_INTERFACE_MEMBER_DECLARATION  MULTIPLE_VAR_DEF  NOT_A_CONSTRUCTOR  NOT_CALLABLE  UNEXPECTED_TOKEN  UNKNOWN_EXPR_TYPE  UNKNOWN_OVERRIDE  UNRESOLVED_TYPE  WRONG_ARGUMENT_COUNT  diagnosticType  InferJSDocInfo  inferJSDocInfo  	projects/Closure66/src/com/google/javascript/jscomp/TypeCheck.java	0.21320071635561041	939	939	2	replace	Node  rightChild  =  t.getScope().getOwnSlot(lvalue);	  Node    rightChild    =    t.getScope().getLastChild();    	non-compiled	[CE]  orphaned  case	4	None	replace
49	[BUG]  [BUGGY]  Node  rightChild  =  lvalue.removeFirstChild();  [CE]  orphaned  case  [FE]                AssertionFailedError    [CONTEXT]    Var  var  =  t.getScope().getVar(lvalue.getString());  if  (var  !=  null)  {  if  (var.isTypeInferred())  {  return;  }  }  }  JSType  leftType  =  getJSType(lvalue);    [BUGGY]  Node  rightChild  =  lvalue.removeFirstChild();  [BUGGY]    JSType  rightType  =  getJSType(rightChild);  if  (validator.expectCanAssignTo(  t,  assign,  rightType,  leftType,     "assignment   "))  {  ensureTyped(t,  assign,  rightType);  }  else  {  ensureTyped(t,  assign);  }  }  [CLASS]  TypeCheck  [METHOD]  visitAssign  [RETURN_TYPE]  void  NodeTraversal  t  Node  assign  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  jsType  leftType  objectJsType  rightType  rvalueType  NodeTraversal  t  DiagnosticGroup  ALL_DIAGNOSTICS  CheckLevel  reportMissingOverride  reportUnknownTypes  Var  var  Node  assign  lvalue  object  object2  rightChild  rvalue  FunctionType  functionType  ScopeCreator  scopeCreator  String  OVERRIDING_PROTOTYPE_WITH_NON_OBJECT  functionPrivateName  message  property  property2  JSDocInfo  info  int  noTypeCheckSection  nullCount  typedCount  unknownCount  TypeValidator  validator  ObjectType  type  AbstractCompiler  compiler  JSTypeRegistry  typeRegistry  boolean  enterSection  externs  inExterns  report  reportMissingProperties  typeable  Scope  outerScope  topScope  DiagnosticType  BAD_DELETE  BAD_IMPLEMENTED_TYPE  BIT_OPERATION  CONFLICTING_EXTENDED_TYPE  CONFLICTING_IMPLEMENTED_TYPE  CONSTRUCTOR_NOT_CALLABLE  DETERMINISTIC_TEST  DETERMINISTIC_TEST_NO_RESULT  ENUM_DUP  ENUM_NOT_CONSTANT  EXPECTED_THIS_TYPE  FUNCTION_MASKS_VARIABLE  HIDDEN_INTERFACE_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY_MISMATCH  ILLEGAL_IMPLICIT_CAST  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE  INEXISTENT_ENUM_ELEMENT  INEXISTENT_PROPERTY  INTERFACE_FUNCTION_NOT_EMPTY  INTERFACE_METHOD_OVERRIDE  INVALID_INTERFACE_MEMBER_DECLARATION  MULTIPLE_VAR_DEF  NOT_A_CONSTRUCTOR  NOT_CALLABLE  UNEXPECTED_TOKEN  UNKNOWN_EXPR_TYPE  UNKNOWN_OVERRIDE  UNRESOLVED_TYPE  WRONG_ARGUMENT_COUNT  diagnosticType  InferJSDocInfo  inferJSDocInfo  	projects/Closure66/src/com/google/javascript/jscomp/TypeCheck.java	0.21320071635561041	939	939	2	replace	Node  rightChild  =  lvalue.removeFirstChild();	  Node    rightChild    =    lvalue.getLastChild();    	non-compiled	[CE]  orphaned  case	5	None	replace
