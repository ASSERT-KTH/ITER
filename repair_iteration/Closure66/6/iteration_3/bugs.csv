bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  Node  rightChild  =  t.getScope().getRootNode(assign,  rvalue);  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      Var  var  =  t.getScope().getVar(lvalue.getString());  if  (var  !=  null)  {  if  (var.isTypeInferred())  {  return;  }  }  }  JSType  leftType  =  getJSType(lvalue);      [BUGGY]  Node  rightChild  =  t.getScope().getRootNode(assign,  rvalue);  [BUGGY]      JSType  rightType  =  getJSType(rightChild);  if  (validator.expectCanAssignTo(  t,  assign,  rightType,  leftType,       "assignment     "))  {  ensureTyped(t,  assign,  rightType);  }  else  {  ensureTyped(t,  assign);  }  }  [CLASS]  TypeCheck  [METHOD]  visitAssign  [RETURN_TYPE]  void  NodeTraversal  t  Node  assign  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  jsType  leftType  objectJsType  rightType  rvalueType  NodeTraversal  t  DiagnosticGroup  ALL_DIAGNOSTICS  CheckLevel  reportMissingOverride  reportUnknownTypes  Var  var  Node  assign  lvalue  object  object2  rightChild  rvalue  FunctionType  functionType  ScopeCreator  scopeCreator  String  OVERRIDING_PROTOTYPE_WITH_NON_OBJECT  functionPrivateName  message  property  property2  JSDocInfo  info  int  noTypeCheckSection  nullCount  typedCount  unknownCount  TypeValidator  validator  ObjectType  type  AbstractCompiler  compiler  JSTypeRegistry  typeRegistry  boolean  enterSection  externs  inExterns  report  reportMissingProperties  typeable  Scope  outerScope  topScope  DiagnosticType  BAD_DELETE  BAD_IMPLEMENTED_TYPE  BIT_OPERATION  CONFLICTING_EXTENDED_TYPE  CONFLICTING_IMPLEMENTED_TYPE  CONSTRUCTOR_NOT_CALLABLE  DETERMINISTIC_TEST  DETERMINISTIC_TEST_NO_RESULT  ENUM_DUP  ENUM_NOT_CONSTANT  EXPECTED_THIS_TYPE  FUNCTION_MASKS_VARIABLE  HIDDEN_INTERFACE_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY_MISMATCH  ILLEGAL_IMPLICIT_CAST  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE  INEXISTENT_ENUM_ELEMENT  INEXISTENT_PROPERTY  INTERFACE_FUNCTION_NOT_EMPTY  INTERFACE_METHOD_OVERRIDE  INVALID_INTERFACE_MEMBER_DECLARATION  MULTIPLE_VAR_DEF  NOT_A_CONSTRUCTOR  NOT_CALLABLE  UNEXPECTED_TOKEN  UNKNOWN_EXPR_TYPE  UNKNOWN_OVERRIDE  UNRESOLVED_TYPE  WRONG_ARGUMENT_COUNT  diagnosticType  InferJSDocInfo  inferJSDocInfo  	projects/Closure66/src/com/google/javascript/jscomp/TypeCheck.java	0.21320071635561041	939	939	2	replace	Node  rightChild  =  t.getScope().getRootNode(assign,  rvalue);	  Node    rightChild    =    t.getScope().getRootNode(rvalue);    	non-compiled	[CE]  orphaned  case	42	None	replace
2	[BUG]  [BUGGY]  Node  rightChild  =  t.getScope().getRootNode(assign,  leftType);  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      Var  var  =  t.getScope().getVar(lvalue.getString());  if  (var  !=  null)  {  if  (var.isTypeInferred())  {  return;  }  }  }  JSType  leftType  =  getJSType(lvalue);      [BUGGY]  Node  rightChild  =  t.getScope().getRootNode(assign,  leftType);  [BUGGY]      JSType  rightType  =  getJSType(rightChild);  if  (validator.expectCanAssignTo(  t,  assign,  rightType,  leftType,       "assignment     "))  {  ensureTyped(t,  assign,  rightType);  }  else  {  ensureTyped(t,  assign);  }  }  [CLASS]  TypeCheck  [METHOD]  visitAssign  [RETURN_TYPE]  void  NodeTraversal  t  Node  assign  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  jsType  leftType  objectJsType  rightType  rvalueType  NodeTraversal  t  DiagnosticGroup  ALL_DIAGNOSTICS  CheckLevel  reportMissingOverride  reportUnknownTypes  Var  var  Node  assign  lvalue  object  object2  rightChild  rvalue  FunctionType  functionType  ScopeCreator  scopeCreator  String  OVERRIDING_PROTOTYPE_WITH_NON_OBJECT  functionPrivateName  message  property  property2  JSDocInfo  info  int  noTypeCheckSection  nullCount  typedCount  unknownCount  TypeValidator  validator  ObjectType  type  AbstractCompiler  compiler  JSTypeRegistry  typeRegistry  boolean  enterSection  externs  inExterns  report  reportMissingProperties  typeable  Scope  outerScope  topScope  DiagnosticType  BAD_DELETE  BAD_IMPLEMENTED_TYPE  BIT_OPERATION  CONFLICTING_EXTENDED_TYPE  CONFLICTING_IMPLEMENTED_TYPE  CONSTRUCTOR_NOT_CALLABLE  DETERMINISTIC_TEST  DETERMINISTIC_TEST_NO_RESULT  ENUM_DUP  ENUM_NOT_CONSTANT  EXPECTED_THIS_TYPE  FUNCTION_MASKS_VARIABLE  HIDDEN_INTERFACE_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY_MISMATCH  ILLEGAL_IMPLICIT_CAST  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE  INEXISTENT_ENUM_ELEMENT  INEXISTENT_PROPERTY  INTERFACE_FUNCTION_NOT_EMPTY  INTERFACE_METHOD_OVERRIDE  INVALID_INTERFACE_MEMBER_DECLARATION  MULTIPLE_VAR_DEF  NOT_A_CONSTRUCTOR  NOT_CALLABLE  UNEXPECTED_TOKEN  UNKNOWN_EXPR_TYPE  UNKNOWN_OVERRIDE  UNRESOLVED_TYPE  WRONG_ARGUMENT_COUNT  diagnosticType  InferJSDocInfo  inferJSDocInfo  	projects/Closure66/src/com/google/javascript/jscomp/TypeCheck.java	0.21320071635561041	939	939	2	replace	Node  rightChild  =  t.getScope().getRootNode(assign,  leftType);	  Node    rightChild    =    t.getScope().getRootNode(rvalue);    	non-compiled	[CE]  orphaned  case	42	None	replace
3	[BUG]  [BUGGY]  Node  rightChild  =  t.getScope().getRootNode(obj);  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      Var  var  =  t.getScope().getVar(lvalue.getString());  if  (var  !=  null)  {  if  (var.isTypeInferred())  {  return;  }  }  }  JSType  leftType  =  getJSType(lvalue);      [BUGGY]  Node  rightChild  =  t.getScope().getRootNode(obj);  [BUGGY]      JSType  rightType  =  getJSType(rightChild);  if  (validator.expectCanAssignTo(  t,  assign,  rightType,  leftType,       "assignment     "))  {  ensureTyped(t,  assign,  rightType);  }  else  {  ensureTyped(t,  assign);  }  }  [CLASS]  TypeCheck  [METHOD]  visitAssign  [RETURN_TYPE]  void  NodeTraversal  t  Node  assign  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  jsType  leftType  objectJsType  rightType  rvalueType  NodeTraversal  t  DiagnosticGroup  ALL_DIAGNOSTICS  CheckLevel  reportMissingOverride  reportUnknownTypes  Var  var  Node  assign  lvalue  object  object2  rightChild  rvalue  FunctionType  functionType  ScopeCreator  scopeCreator  String  OVERRIDING_PROTOTYPE_WITH_NON_OBJECT  functionPrivateName  message  property  property2  JSDocInfo  info  int  noTypeCheckSection  nullCount  typedCount  unknownCount  TypeValidator  validator  ObjectType  type  AbstractCompiler  compiler  JSTypeRegistry  typeRegistry  boolean  enterSection  externs  inExterns  report  reportMissingProperties  typeable  Scope  outerScope  topScope  DiagnosticType  BAD_DELETE  BAD_IMPLEMENTED_TYPE  BIT_OPERATION  CONFLICTING_EXTENDED_TYPE  CONFLICTING_IMPLEMENTED_TYPE  CONSTRUCTOR_NOT_CALLABLE  DETERMINISTIC_TEST  DETERMINISTIC_TEST_NO_RESULT  ENUM_DUP  ENUM_NOT_CONSTANT  EXPECTED_THIS_TYPE  FUNCTION_MASKS_VARIABLE  HIDDEN_INTERFACE_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY_MISMATCH  ILLEGAL_IMPLICIT_CAST  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE  INEXISTENT_ENUM_ELEMENT  INEXISTENT_PROPERTY  INTERFACE_FUNCTION_NOT_EMPTY  INTERFACE_METHOD_OVERRIDE  INVALID_INTERFACE_MEMBER_DECLARATION  MULTIPLE_VAR_DEF  NOT_A_CONSTRUCTOR  NOT_CALLABLE  UNEXPECTED_TOKEN  UNKNOWN_EXPR_TYPE  UNKNOWN_OVERRIDE  UNRESOLVED_TYPE  WRONG_ARGUMENT_COUNT  diagnosticType  InferJSDocInfo  inferJSDocInfo  	projects/Closure66/src/com/google/javascript/jscomp/TypeCheck.java	0.21320071635561041	939	939	2	replace	Node  rightChild  =  t.getScope().getRootNode(obj);	  Node    rightChild    =    t.getScope().getRootNode(rvalue);    	non-compiled	[CE]  orphaned  case	42	None	replace
4	[BUG]  [BUGGY]  Node  rightChild  =  t.getScope().getRootNode(lvalue,  rvalue);  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      Var  var  =  t.getScope().getVar(lvalue.getString());  if  (var  !=  null)  {  if  (var.isTypeInferred())  {  return;  }  }  }  JSType  leftType  =  getJSType(lvalue);      [BUGGY]  Node  rightChild  =  t.getScope().getRootNode(lvalue,  rvalue);  [BUGGY]      JSType  rightType  =  getJSType(rightChild);  if  (validator.expectCanAssignTo(  t,  assign,  rightType,  leftType,       "assignment     "))  {  ensureTyped(t,  assign,  rightType);  }  else  {  ensureTyped(t,  assign);  }  }  [CLASS]  TypeCheck  [METHOD]  visitAssign  [RETURN_TYPE]  void  NodeTraversal  t  Node  assign  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  jsType  leftType  objectJsType  rightType  rvalueType  NodeTraversal  t  DiagnosticGroup  ALL_DIAGNOSTICS  CheckLevel  reportMissingOverride  reportUnknownTypes  Var  var  Node  assign  lvalue  object  object2  rightChild  rvalue  FunctionType  functionType  ScopeCreator  scopeCreator  String  OVERRIDING_PROTOTYPE_WITH_NON_OBJECT  functionPrivateName  message  property  property2  JSDocInfo  info  int  noTypeCheckSection  nullCount  typedCount  unknownCount  TypeValidator  validator  ObjectType  type  AbstractCompiler  compiler  JSTypeRegistry  typeRegistry  boolean  enterSection  externs  inExterns  report  reportMissingProperties  typeable  Scope  outerScope  topScope  DiagnosticType  BAD_DELETE  BAD_IMPLEMENTED_TYPE  BIT_OPERATION  CONFLICTING_EXTENDED_TYPE  CONFLICTING_IMPLEMENTED_TYPE  CONSTRUCTOR_NOT_CALLABLE  DETERMINISTIC_TEST  DETERMINISTIC_TEST_NO_RESULT  ENUM_DUP  ENUM_NOT_CONSTANT  EXPECTED_THIS_TYPE  FUNCTION_MASKS_VARIABLE  HIDDEN_INTERFACE_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY_MISMATCH  ILLEGAL_IMPLICIT_CAST  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE  INEXISTENT_ENUM_ELEMENT  INEXISTENT_PROPERTY  INTERFACE_FUNCTION_NOT_EMPTY  INTERFACE_METHOD_OVERRIDE  INVALID_INTERFACE_MEMBER_DECLARATION  MULTIPLE_VAR_DEF  NOT_A_CONSTRUCTOR  NOT_CALLABLE  UNEXPECTED_TOKEN  UNKNOWN_EXPR_TYPE  UNKNOWN_OVERRIDE  UNRESOLVED_TYPE  WRONG_ARGUMENT_COUNT  diagnosticType  InferJSDocInfo  inferJSDocInfo  	projects/Closure66/src/com/google/javascript/jscomp/TypeCheck.java	0.21320071635561041	939	939	2	replace	Node  rightChild  =  t.getScope().getRootNode(lvalue,  rvalue);	  Node    rightChild    =    t.getScope().getRootNode(rvalue);    	non-compiled	[CE]  orphaned  case	42	None	replace
5	[BUG]  [BUGGY]  Node  rightChild  =  t.getScope().getRootNode(rvalue,  leftType);  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      Var  var  =  t.getScope().getVar(lvalue.getString());  if  (var  !=  null)  {  if  (var.isTypeInferred())  {  return;  }  }  }  JSType  leftType  =  getJSType(lvalue);      [BUGGY]  Node  rightChild  =  t.getScope().getRootNode(rvalue,  leftType);  [BUGGY]      JSType  rightType  =  getJSType(rightChild);  if  (validator.expectCanAssignTo(  t,  assign,  rightType,  leftType,       "assignment     "))  {  ensureTyped(t,  assign,  rightType);  }  else  {  ensureTyped(t,  assign);  }  }  [CLASS]  TypeCheck  [METHOD]  visitAssign  [RETURN_TYPE]  void  NodeTraversal  t  Node  assign  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  jsType  leftType  objectJsType  rightType  rvalueType  NodeTraversal  t  DiagnosticGroup  ALL_DIAGNOSTICS  CheckLevel  reportMissingOverride  reportUnknownTypes  Var  var  Node  assign  lvalue  object  object2  rightChild  rvalue  FunctionType  functionType  ScopeCreator  scopeCreator  String  OVERRIDING_PROTOTYPE_WITH_NON_OBJECT  functionPrivateName  message  property  property2  JSDocInfo  info  int  noTypeCheckSection  nullCount  typedCount  unknownCount  TypeValidator  validator  ObjectType  type  AbstractCompiler  compiler  JSTypeRegistry  typeRegistry  boolean  enterSection  externs  inExterns  report  reportMissingProperties  typeable  Scope  outerScope  topScope  DiagnosticType  BAD_DELETE  BAD_IMPLEMENTED_TYPE  BIT_OPERATION  CONFLICTING_EXTENDED_TYPE  CONFLICTING_IMPLEMENTED_TYPE  CONSTRUCTOR_NOT_CALLABLE  DETERMINISTIC_TEST  DETERMINISTIC_TEST_NO_RESULT  ENUM_DUP  ENUM_NOT_CONSTANT  EXPECTED_THIS_TYPE  FUNCTION_MASKS_VARIABLE  HIDDEN_INTERFACE_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY_MISMATCH  ILLEGAL_IMPLICIT_CAST  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE  INEXISTENT_ENUM_ELEMENT  INEXISTENT_PROPERTY  INTERFACE_FUNCTION_NOT_EMPTY  INTERFACE_METHOD_OVERRIDE  INVALID_INTERFACE_MEMBER_DECLARATION  MULTIPLE_VAR_DEF  NOT_A_CONSTRUCTOR  NOT_CALLABLE  UNEXPECTED_TOKEN  UNKNOWN_EXPR_TYPE  UNKNOWN_OVERRIDE  UNRESOLVED_TYPE  WRONG_ARGUMENT_COUNT  diagnosticType  InferJSDocInfo  inferJSDocInfo  	projects/Closure66/src/com/google/javascript/jscomp/TypeCheck.java	0.21320071635561041	939	939	2	replace	Node  rightChild  =  t.getScope().getRootNode(rvalue,  leftType);	  Node    rightChild    =    t.getScope().getRootNode(rvalue);    	non-compiled	[CE]  orphaned  case	42	None	replace
6	[BUG]  [BUGGY]  Node  rightChild  =  t.getScope().getRawNode(lvalue);  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      Var  var  =  t.getScope().getVar(lvalue.getString());  if  (var  !=  null)  {  if  (var.isTypeInferred())  {  return;  }  }  }  JSType  leftType  =  getJSType(lvalue);      [BUGGY]  Node  rightChild  =  t.getScope().getRawNode(lvalue);  [BUGGY]      JSType  rightType  =  getJSType(rightChild);  if  (validator.expectCanAssignTo(  t,  assign,  rightType,  leftType,       "assignment     "))  {  ensureTyped(t,  assign,  rightType);  }  else  {  ensureTyped(t,  assign);  }  }  [CLASS]  TypeCheck  [METHOD]  visitAssign  [RETURN_TYPE]  void  NodeTraversal  t  Node  assign  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  jsType  leftType  objectJsType  rightType  rvalueType  NodeTraversal  t  DiagnosticGroup  ALL_DIAGNOSTICS  CheckLevel  reportMissingOverride  reportUnknownTypes  Var  var  Node  assign  lvalue  object  object2  rightChild  rvalue  FunctionType  functionType  ScopeCreator  scopeCreator  String  OVERRIDING_PROTOTYPE_WITH_NON_OBJECT  functionPrivateName  message  property  property2  JSDocInfo  info  int  noTypeCheckSection  nullCount  typedCount  unknownCount  TypeValidator  validator  ObjectType  type  AbstractCompiler  compiler  JSTypeRegistry  typeRegistry  boolean  enterSection  externs  inExterns  report  reportMissingProperties  typeable  Scope  outerScope  topScope  DiagnosticType  BAD_DELETE  BAD_IMPLEMENTED_TYPE  BIT_OPERATION  CONFLICTING_EXTENDED_TYPE  CONFLICTING_IMPLEMENTED_TYPE  CONSTRUCTOR_NOT_CALLABLE  DETERMINISTIC_TEST  DETERMINISTIC_TEST_NO_RESULT  ENUM_DUP  ENUM_NOT_CONSTANT  EXPECTED_THIS_TYPE  FUNCTION_MASKS_VARIABLE  HIDDEN_INTERFACE_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY_MISMATCH  ILLEGAL_IMPLICIT_CAST  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE  INEXISTENT_ENUM_ELEMENT  INEXISTENT_PROPERTY  INTERFACE_FUNCTION_NOT_EMPTY  INTERFACE_METHOD_OVERRIDE  INVALID_INTERFACE_MEMBER_DECLARATION  MULTIPLE_VAR_DEF  NOT_A_CONSTRUCTOR  NOT_CALLABLE  UNEXPECTED_TOKEN  UNKNOWN_EXPR_TYPE  UNKNOWN_OVERRIDE  UNRESOLVED_TYPE  WRONG_ARGUMENT_COUNT  diagnosticType  InferJSDocInfo  inferJSDocInfo  	projects/Closure66/src/com/google/javascript/jscomp/TypeCheck.java	0.21320071635561041	939	939	2	replace	Node  rightChild  =  t.getScope().getRawNode(lvalue);	  Node    rightChild    =    t.getScope().getRawNode();    	non-compiled	[CE]  orphaned  case	20	None	replace
7	[BUG]  [BUGGY]  Node  rightChild  =  t.getScope().getRawParent();  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      Var  var  =  t.getScope().getVar(lvalue.getString());  if  (var  !=  null)  {  if  (var.isTypeInferred())  {  return;  }  }  }  JSType  leftType  =  getJSType(lvalue);      [BUGGY]  Node  rightChild  =  t.getScope().getRawParent();  [BUGGY]      JSType  rightType  =  getJSType(rightChild);  if  (validator.expectCanAssignTo(  t,  assign,  rightType,  leftType,       "assignment     "))  {  ensureTyped(t,  assign,  rightType);  }  else  {  ensureTyped(t,  assign);  }  }  [CLASS]  TypeCheck  [METHOD]  visitAssign  [RETURN_TYPE]  void  NodeTraversal  t  Node  assign  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  jsType  leftType  objectJsType  rightType  rvalueType  NodeTraversal  t  DiagnosticGroup  ALL_DIAGNOSTICS  CheckLevel  reportMissingOverride  reportUnknownTypes  Var  var  Node  assign  lvalue  object  object2  rightChild  rvalue  FunctionType  functionType  ScopeCreator  scopeCreator  String  OVERRIDING_PROTOTYPE_WITH_NON_OBJECT  functionPrivateName  message  property  property2  JSDocInfo  info  int  noTypeCheckSection  nullCount  typedCount  unknownCount  TypeValidator  validator  ObjectType  type  AbstractCompiler  compiler  JSTypeRegistry  typeRegistry  boolean  enterSection  externs  inExterns  report  reportMissingProperties  typeable  Scope  outerScope  topScope  DiagnosticType  BAD_DELETE  BAD_IMPLEMENTED_TYPE  BIT_OPERATION  CONFLICTING_EXTENDED_TYPE  CONFLICTING_IMPLEMENTED_TYPE  CONSTRUCTOR_NOT_CALLABLE  DETERMINISTIC_TEST  DETERMINISTIC_TEST_NO_RESULT  ENUM_DUP  ENUM_NOT_CONSTANT  EXPECTED_THIS_TYPE  FUNCTION_MASKS_VARIABLE  HIDDEN_INTERFACE_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY_MISMATCH  ILLEGAL_IMPLICIT_CAST  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE  INEXISTENT_ENUM_ELEMENT  INEXISTENT_PROPERTY  INTERFACE_FUNCTION_NOT_EMPTY  INTERFACE_METHOD_OVERRIDE  INVALID_INTERFACE_MEMBER_DECLARATION  MULTIPLE_VAR_DEF  NOT_A_CONSTRUCTOR  NOT_CALLABLE  UNEXPECTED_TOKEN  UNKNOWN_EXPR_TYPE  UNKNOWN_OVERRIDE  UNRESOLVED_TYPE  WRONG_ARGUMENT_COUNT  diagnosticType  InferJSDocInfo  inferJSDocInfo  	projects/Closure66/src/com/google/javascript/jscomp/TypeCheck.java	0.21320071635561041	939	939	2	replace	Node  rightChild  =  t.getScope().getRawParent();	  Node    rightChild    =    t.getScope().getRawNode();    	non-compiled	[CE]  orphaned  case	20	None	replace
8	[BUG]  [BUGGY]  Node  rightChild  =  t.getScope().getRawNode(null);  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      Var  var  =  t.getScope().getVar(lvalue.getString());  if  (var  !=  null)  {  if  (var.isTypeInferred())  {  return;  }  }  }  JSType  leftType  =  getJSType(lvalue);      [BUGGY]  Node  rightChild  =  t.getScope().getRawNode(null);  [BUGGY]      JSType  rightType  =  getJSType(rightChild);  if  (validator.expectCanAssignTo(  t,  assign,  rightType,  leftType,       "assignment     "))  {  ensureTyped(t,  assign,  rightType);  }  else  {  ensureTyped(t,  assign);  }  }  [CLASS]  TypeCheck  [METHOD]  visitAssign  [RETURN_TYPE]  void  NodeTraversal  t  Node  assign  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  jsType  leftType  objectJsType  rightType  rvalueType  NodeTraversal  t  DiagnosticGroup  ALL_DIAGNOSTICS  CheckLevel  reportMissingOverride  reportUnknownTypes  Var  var  Node  assign  lvalue  object  object2  rightChild  rvalue  FunctionType  functionType  ScopeCreator  scopeCreator  String  OVERRIDING_PROTOTYPE_WITH_NON_OBJECT  functionPrivateName  message  property  property2  JSDocInfo  info  int  noTypeCheckSection  nullCount  typedCount  unknownCount  TypeValidator  validator  ObjectType  type  AbstractCompiler  compiler  JSTypeRegistry  typeRegistry  boolean  enterSection  externs  inExterns  report  reportMissingProperties  typeable  Scope  outerScope  topScope  DiagnosticType  BAD_DELETE  BAD_IMPLEMENTED_TYPE  BIT_OPERATION  CONFLICTING_EXTENDED_TYPE  CONFLICTING_IMPLEMENTED_TYPE  CONSTRUCTOR_NOT_CALLABLE  DETERMINISTIC_TEST  DETERMINISTIC_TEST_NO_RESULT  ENUM_DUP  ENUM_NOT_CONSTANT  EXPECTED_THIS_TYPE  FUNCTION_MASKS_VARIABLE  HIDDEN_INTERFACE_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY_MISMATCH  ILLEGAL_IMPLICIT_CAST  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE  INEXISTENT_ENUM_ELEMENT  INEXISTENT_PROPERTY  INTERFACE_FUNCTION_NOT_EMPTY  INTERFACE_METHOD_OVERRIDE  INVALID_INTERFACE_MEMBER_DECLARATION  MULTIPLE_VAR_DEF  NOT_A_CONSTRUCTOR  NOT_CALLABLE  UNEXPECTED_TOKEN  UNKNOWN_EXPR_TYPE  UNKNOWN_OVERRIDE  UNRESOLVED_TYPE  WRONG_ARGUMENT_COUNT  diagnosticType  InferJSDocInfo  inferJSDocInfo  	projects/Closure66/src/com/google/javascript/jscomp/TypeCheck.java	0.21320071635561041	939	939	2	replace	Node  rightChild  =  t.getScope().getRawNode(null);	  Node    rightChild    =    t.getScope().getRawNode();    	non-compiled	[CE]  orphaned  case	20	None	replace
9	[BUG]  [BUGGY]  Node  rightChild  =  t.getScope().getRawNode(lvalue.getString());  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      Var  var  =  t.getScope().getVar(lvalue.getString());  if  (var  !=  null)  {  if  (var.isTypeInferred())  {  return;  }  }  }  JSType  leftType  =  getJSType(lvalue);      [BUGGY]  Node  rightChild  =  t.getScope().getRawNode(lvalue.getString());  [BUGGY]      JSType  rightType  =  getJSType(rightChild);  if  (validator.expectCanAssignTo(  t,  assign,  rightType,  leftType,       "assignment     "))  {  ensureTyped(t,  assign,  rightType);  }  else  {  ensureTyped(t,  assign);  }  }  [CLASS]  TypeCheck  [METHOD]  visitAssign  [RETURN_TYPE]  void  NodeTraversal  t  Node  assign  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  jsType  leftType  objectJsType  rightType  rvalueType  NodeTraversal  t  DiagnosticGroup  ALL_DIAGNOSTICS  CheckLevel  reportMissingOverride  reportUnknownTypes  Var  var  Node  assign  lvalue  object  object2  rightChild  rvalue  FunctionType  functionType  ScopeCreator  scopeCreator  String  OVERRIDING_PROTOTYPE_WITH_NON_OBJECT  functionPrivateName  message  property  property2  JSDocInfo  info  int  noTypeCheckSection  nullCount  typedCount  unknownCount  TypeValidator  validator  ObjectType  type  AbstractCompiler  compiler  JSTypeRegistry  typeRegistry  boolean  enterSection  externs  inExterns  report  reportMissingProperties  typeable  Scope  outerScope  topScope  DiagnosticType  BAD_DELETE  BAD_IMPLEMENTED_TYPE  BIT_OPERATION  CONFLICTING_EXTENDED_TYPE  CONFLICTING_IMPLEMENTED_TYPE  CONSTRUCTOR_NOT_CALLABLE  DETERMINISTIC_TEST  DETERMINISTIC_TEST_NO_RESULT  ENUM_DUP  ENUM_NOT_CONSTANT  EXPECTED_THIS_TYPE  FUNCTION_MASKS_VARIABLE  HIDDEN_INTERFACE_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY_MISMATCH  ILLEGAL_IMPLICIT_CAST  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE  INEXISTENT_ENUM_ELEMENT  INEXISTENT_PROPERTY  INTERFACE_FUNCTION_NOT_EMPTY  INTERFACE_METHOD_OVERRIDE  INVALID_INTERFACE_MEMBER_DECLARATION  MULTIPLE_VAR_DEF  NOT_A_CONSTRUCTOR  NOT_CALLABLE  UNEXPECTED_TOKEN  UNKNOWN_EXPR_TYPE  UNKNOWN_OVERRIDE  UNRESOLVED_TYPE  WRONG_ARGUMENT_COUNT  diagnosticType  InferJSDocInfo  inferJSDocInfo  	projects/Closure66/src/com/google/javascript/jscomp/TypeCheck.java	0.21320071635561041	939	939	2	replace	Node  rightChild  =  t.getScope().getRawNode(lvalue.getString());	  Node    rightChild    =    t.getScope().getRawNode();    	non-compiled	[CE]  orphaned  case	20	None	replace
10	[BUG]  [BUGGY]  Node  rightChild  =  t.getScope().getRawType(leftType);  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      Var  var  =  t.getScope().getVar(lvalue.getString());  if  (var  !=  null)  {  if  (var.isTypeInferred())  {  return;  }  }  }  JSType  leftType  =  getJSType(lvalue);      [BUGGY]  Node  rightChild  =  t.getScope().getRawType(leftType);  [BUGGY]      JSType  rightType  =  getJSType(rightChild);  if  (validator.expectCanAssignTo(  t,  assign,  rightType,  leftType,       "assignment     "))  {  ensureTyped(t,  assign,  rightType);  }  else  {  ensureTyped(t,  assign);  }  }  [CLASS]  TypeCheck  [METHOD]  visitAssign  [RETURN_TYPE]  void  NodeTraversal  t  Node  assign  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  jsType  leftType  objectJsType  rightType  rvalueType  NodeTraversal  t  DiagnosticGroup  ALL_DIAGNOSTICS  CheckLevel  reportMissingOverride  reportUnknownTypes  Var  var  Node  assign  lvalue  object  object2  rightChild  rvalue  FunctionType  functionType  ScopeCreator  scopeCreator  String  OVERRIDING_PROTOTYPE_WITH_NON_OBJECT  functionPrivateName  message  property  property2  JSDocInfo  info  int  noTypeCheckSection  nullCount  typedCount  unknownCount  TypeValidator  validator  ObjectType  type  AbstractCompiler  compiler  JSTypeRegistry  typeRegistry  boolean  enterSection  externs  inExterns  report  reportMissingProperties  typeable  Scope  outerScope  topScope  DiagnosticType  BAD_DELETE  BAD_IMPLEMENTED_TYPE  BIT_OPERATION  CONFLICTING_EXTENDED_TYPE  CONFLICTING_IMPLEMENTED_TYPE  CONSTRUCTOR_NOT_CALLABLE  DETERMINISTIC_TEST  DETERMINISTIC_TEST_NO_RESULT  ENUM_DUP  ENUM_NOT_CONSTANT  EXPECTED_THIS_TYPE  FUNCTION_MASKS_VARIABLE  HIDDEN_INTERFACE_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY_MISMATCH  ILLEGAL_IMPLICIT_CAST  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE  INEXISTENT_ENUM_ELEMENT  INEXISTENT_PROPERTY  INTERFACE_FUNCTION_NOT_EMPTY  INTERFACE_METHOD_OVERRIDE  INVALID_INTERFACE_MEMBER_DECLARATION  MULTIPLE_VAR_DEF  NOT_A_CONSTRUCTOR  NOT_CALLABLE  UNEXPECTED_TOKEN  UNKNOWN_EXPR_TYPE  UNKNOWN_OVERRIDE  UNRESOLVED_TYPE  WRONG_ARGUMENT_COUNT  diagnosticType  InferJSDocInfo  inferJSDocInfo  	projects/Closure66/src/com/google/javascript/jscomp/TypeCheck.java	0.21320071635561041	939	939	2	replace	Node  rightChild  =  t.getScope().getRawType(leftType);	  Node    rightChild    =    t.getScope().getRawNode();    	non-compiled	[CE]  orphaned  case	20	None	replace
11	[BUG]  [BUGGY]  Node  rightChild  =  t.getScope().getRawNode(leftType);  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      Var  var  =  t.getScope().getVar(lvalue.getString());  if  (var  !=  null)  {  if  (var.isTypeInferred())  {  return;  }  }  }  JSType  leftType  =  getJSType(lvalue);      [BUGGY]  Node  rightChild  =  t.getScope().getRawNode(leftType);  [BUGGY]      JSType  rightType  =  getJSType(rightChild);  if  (validator.expectCanAssignTo(  t,  assign,  rightType,  leftType,       "assignment     "))  {  ensureTyped(t,  assign,  rightType);  }  else  {  ensureTyped(t,  assign);  }  }  [CLASS]  TypeCheck  [METHOD]  visitAssign  [RETURN_TYPE]  void  NodeTraversal  t  Node  assign  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  jsType  leftType  objectJsType  rightType  rvalueType  NodeTraversal  t  DiagnosticGroup  ALL_DIAGNOSTICS  CheckLevel  reportMissingOverride  reportUnknownTypes  Var  var  Node  assign  lvalue  object  object2  rightChild  rvalue  FunctionType  functionType  ScopeCreator  scopeCreator  String  OVERRIDING_PROTOTYPE_WITH_NON_OBJECT  functionPrivateName  message  property  property2  JSDocInfo  info  int  noTypeCheckSection  nullCount  typedCount  unknownCount  TypeValidator  validator  ObjectType  type  AbstractCompiler  compiler  JSTypeRegistry  typeRegistry  boolean  enterSection  externs  inExterns  report  reportMissingProperties  typeable  Scope  outerScope  topScope  DiagnosticType  BAD_DELETE  BAD_IMPLEMENTED_TYPE  BIT_OPERATION  CONFLICTING_EXTENDED_TYPE  CONFLICTING_IMPLEMENTED_TYPE  CONSTRUCTOR_NOT_CALLABLE  DETERMINISTIC_TEST  DETERMINISTIC_TEST_NO_RESULT  ENUM_DUP  ENUM_NOT_CONSTANT  EXPECTED_THIS_TYPE  FUNCTION_MASKS_VARIABLE  HIDDEN_INTERFACE_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY_MISMATCH  ILLEGAL_IMPLICIT_CAST  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE  INEXISTENT_ENUM_ELEMENT  INEXISTENT_PROPERTY  INTERFACE_FUNCTION_NOT_EMPTY  INTERFACE_METHOD_OVERRIDE  INVALID_INTERFACE_MEMBER_DECLARATION  MULTIPLE_VAR_DEF  NOT_A_CONSTRUCTOR  NOT_CALLABLE  UNEXPECTED_TOKEN  UNKNOWN_EXPR_TYPE  UNKNOWN_OVERRIDE  UNRESOLVED_TYPE  WRONG_ARGUMENT_COUNT  diagnosticType  InferJSDocInfo  inferJSDocInfo  	projects/Closure66/src/com/google/javascript/jscomp/TypeCheck.java	0.21320071635561041	939	939	2	replace	Node  rightChild  =  t.getScope().getRawNode(leftType);	  Node    rightChild    =    t.getScope().getRawNode();    	non-compiled	[CE]  orphaned  case	20	None	replace
12	[BUG]  [BUGGY]  Node  rightChild  =  t.getScope().getVar(left.getString());  [CE]  orphaned  case  [FE]            AssertionFailedError      [CONTEXT]      Var  var  =  t.getScope().getVar(lvalue.getString());  if  (var  !=  null)  {  if  (var.isTypeInferred())  {  return;  }  }  }  JSType  leftType  =  getJSType(lvalue);      [BUGGY]  Node  rightChild  =  t.getScope().getVar(left.getString());  [BUGGY]      JSType  rightType  =  getJSType(rightChild);  if  (validator.expectCanAssignTo(  t,  assign,  rightType,  leftType,       "assignment     "))  {  ensureTyped(t,  assign,  rightType);  }  else  {  ensureTyped(t,  assign);  }  }  [CLASS]  TypeCheck  [METHOD]  visitAssign  [RETURN_TYPE]  void  NodeTraversal  t  Node  assign  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  jsType  leftType  objectJsType  rightType  rvalueType  NodeTraversal  t  DiagnosticGroup  ALL_DIAGNOSTICS  CheckLevel  reportMissingOverride  reportUnknownTypes  Var  var  Node  assign  lvalue  object  object2  rightChild  rvalue  FunctionType  functionType  ScopeCreator  scopeCreator  String  OVERRIDING_PROTOTYPE_WITH_NON_OBJECT  functionPrivateName  message  property  property2  JSDocInfo  info  int  noTypeCheckSection  nullCount  typedCount  unknownCount  TypeValidator  validator  ObjectType  type  AbstractCompiler  compiler  JSTypeRegistry  typeRegistry  boolean  enterSection  externs  inExterns  report  reportMissingProperties  typeable  Scope  outerScope  topScope  DiagnosticType  BAD_DELETE  BAD_IMPLEMENTED_TYPE  BIT_OPERATION  CONFLICTING_EXTENDED_TYPE  CONFLICTING_IMPLEMENTED_TYPE  CONSTRUCTOR_NOT_CALLABLE  DETERMINISTIC_TEST  DETERMINISTIC_TEST_NO_RESULT  ENUM_DUP  ENUM_NOT_CONSTANT  EXPECTED_THIS_TYPE  FUNCTION_MASKS_VARIABLE  HIDDEN_INTERFACE_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY_MISMATCH  ILLEGAL_IMPLICIT_CAST  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE  INEXISTENT_ENUM_ELEMENT  INEXISTENT_PROPERTY  INTERFACE_FUNCTION_NOT_EMPTY  INTERFACE_METHOD_OVERRIDE  INVALID_INTERFACE_MEMBER_DECLARATION  MULTIPLE_VAR_DEF  NOT_A_CONSTRUCTOR  NOT_CALLABLE  UNEXPECTED_TOKEN  UNKNOWN_EXPR_TYPE  UNKNOWN_OVERRIDE  UNRESOLVED_TYPE  WRONG_ARGUMENT_COUNT  diagnosticType  InferJSDocInfo  inferJSDocInfo  	projects/Closure66/src/com/google/javascript/jscomp/TypeCheck.java	0.21320071635561041	939	939	2	replace	Node  rightChild  =  t.getScope().getVar(left.getString());	  Node    rightChild    =    t.getScope().getVar(right.getString());    	non-compiled	[CE]  orphaned  case	46	None	replace
13	[BUG]  [BUGGY]  Node  rightChild  =  t.getScope().getVar(right.getString(),  leftType);  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      Var  var  =  t.getScope().getVar(lvalue.getString());  if  (var  !=  null)  {  if  (var.isTypeInferred())  {  return;  }  }  }  JSType  leftType  =  getJSType(lvalue);      [BUGGY]  Node  rightChild  =  t.getScope().getVar(right.getString(),  leftType);  [BUGGY]      JSType  rightType  =  getJSType(rightChild);  if  (validator.expectCanAssignTo(  t,  assign,  rightType,  leftType,       "assignment     "))  {  ensureTyped(t,  assign,  rightType);  }  else  {  ensureTyped(t,  assign);  }  }  [CLASS]  TypeCheck  [METHOD]  visitAssign  [RETURN_TYPE]  void  NodeTraversal  t  Node  assign  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  jsType  leftType  objectJsType  rightType  rvalueType  NodeTraversal  t  DiagnosticGroup  ALL_DIAGNOSTICS  CheckLevel  reportMissingOverride  reportUnknownTypes  Var  var  Node  assign  lvalue  object  object2  rightChild  rvalue  FunctionType  functionType  ScopeCreator  scopeCreator  String  OVERRIDING_PROTOTYPE_WITH_NON_OBJECT  functionPrivateName  message  property  property2  JSDocInfo  info  int  noTypeCheckSection  nullCount  typedCount  unknownCount  TypeValidator  validator  ObjectType  type  AbstractCompiler  compiler  JSTypeRegistry  typeRegistry  boolean  enterSection  externs  inExterns  report  reportMissingProperties  typeable  Scope  outerScope  topScope  DiagnosticType  BAD_DELETE  BAD_IMPLEMENTED_TYPE  BIT_OPERATION  CONFLICTING_EXTENDED_TYPE  CONFLICTING_IMPLEMENTED_TYPE  CONSTRUCTOR_NOT_CALLABLE  DETERMINISTIC_TEST  DETERMINISTIC_TEST_NO_RESULT  ENUM_DUP  ENUM_NOT_CONSTANT  EXPECTED_THIS_TYPE  FUNCTION_MASKS_VARIABLE  HIDDEN_INTERFACE_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY_MISMATCH  ILLEGAL_IMPLICIT_CAST  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE  INEXISTENT_ENUM_ELEMENT  INEXISTENT_PROPERTY  INTERFACE_FUNCTION_NOT_EMPTY  INTERFACE_METHOD_OVERRIDE  INVALID_INTERFACE_MEMBER_DECLARATION  MULTIPLE_VAR_DEF  NOT_A_CONSTRUCTOR  NOT_CALLABLE  UNEXPECTED_TOKEN  UNKNOWN_EXPR_TYPE  UNKNOWN_OVERRIDE  UNRESOLVED_TYPE  WRONG_ARGUMENT_COUNT  diagnosticType  InferJSDocInfo  inferJSDocInfo  	projects/Closure66/src/com/google/javascript/jscomp/TypeCheck.java	0.21320071635561041	939	939	2	replace	Node  rightChild  =  t.getScope().getVar(right.getString(),  leftType);	  Node    rightChild    =    t.getScope().getVar(right.getString());    	non-compiled	[CE]  orphaned  case	46	None	replace
14	[BUG]  [BUGGY]  Node  rightChild  =  t.getScope().getVar(right.getString()  +  1);  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      Var  var  =  t.getScope().getVar(lvalue.getString());  if  (var  !=  null)  {  if  (var.isTypeInferred())  {  return;  }  }  }  JSType  leftType  =  getJSType(lvalue);      [BUGGY]  Node  rightChild  =  t.getScope().getVar(right.getString()  +  1);  [BUGGY]      JSType  rightType  =  getJSType(rightChild);  if  (validator.expectCanAssignTo(  t,  assign,  rightType,  leftType,       "assignment     "))  {  ensureTyped(t,  assign,  rightType);  }  else  {  ensureTyped(t,  assign);  }  }  [CLASS]  TypeCheck  [METHOD]  visitAssign  [RETURN_TYPE]  void  NodeTraversal  t  Node  assign  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  jsType  leftType  objectJsType  rightType  rvalueType  NodeTraversal  t  DiagnosticGroup  ALL_DIAGNOSTICS  CheckLevel  reportMissingOverride  reportUnknownTypes  Var  var  Node  assign  lvalue  object  object2  rightChild  rvalue  FunctionType  functionType  ScopeCreator  scopeCreator  String  OVERRIDING_PROTOTYPE_WITH_NON_OBJECT  functionPrivateName  message  property  property2  JSDocInfo  info  int  noTypeCheckSection  nullCount  typedCount  unknownCount  TypeValidator  validator  ObjectType  type  AbstractCompiler  compiler  JSTypeRegistry  typeRegistry  boolean  enterSection  externs  inExterns  report  reportMissingProperties  typeable  Scope  outerScope  topScope  DiagnosticType  BAD_DELETE  BAD_IMPLEMENTED_TYPE  BIT_OPERATION  CONFLICTING_EXTENDED_TYPE  CONFLICTING_IMPLEMENTED_TYPE  CONSTRUCTOR_NOT_CALLABLE  DETERMINISTIC_TEST  DETERMINISTIC_TEST_NO_RESULT  ENUM_DUP  ENUM_NOT_CONSTANT  EXPECTED_THIS_TYPE  FUNCTION_MASKS_VARIABLE  HIDDEN_INTERFACE_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY_MISMATCH  ILLEGAL_IMPLICIT_CAST  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE  INEXISTENT_ENUM_ELEMENT  INEXISTENT_PROPERTY  INTERFACE_FUNCTION_NOT_EMPTY  INTERFACE_METHOD_OVERRIDE  INVALID_INTERFACE_MEMBER_DECLARATION  MULTIPLE_VAR_DEF  NOT_A_CONSTRUCTOR  NOT_CALLABLE  UNEXPECTED_TOKEN  UNKNOWN_EXPR_TYPE  UNKNOWN_OVERRIDE  UNRESOLVED_TYPE  WRONG_ARGUMENT_COUNT  diagnosticType  InferJSDocInfo  inferJSDocInfo  	projects/Closure66/src/com/google/javascript/jscomp/TypeCheck.java	0.21320071635561041	939	939	2	replace	Node  rightChild  =  t.getScope().getVar(right.getString()  +  1);	  Node    rightChild    =    t.getScope().getVar(right.getString());    	non-compiled	[CE]  orphaned  case	46	None	replace
15	[BUG]  [BUGGY]  Node  rightChild  =  leftType.getLowerCase();  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      Var  var  =  t.getScope().getVar(lvalue.getString());  if  (var  !=  null)  {  if  (var.isTypeInferred())  {  return;  }  }  }  JSType  leftType  =  getJSType(lvalue);      [BUGGY]  Node  rightChild  =  leftType.getLowerCase();  [BUGGY]      JSType  rightType  =  getJSType(rightChild);  if  (validator.expectCanAssignTo(  t,  assign,  rightType,  leftType,       "assignment     "))  {  ensureTyped(t,  assign,  rightType);  }  else  {  ensureTyped(t,  assign);  }  }  [CLASS]  TypeCheck  [METHOD]  visitAssign  [RETURN_TYPE]  void  NodeTraversal  t  Node  assign  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  jsType  leftType  objectJsType  rightType  rvalueType  NodeTraversal  t  DiagnosticGroup  ALL_DIAGNOSTICS  CheckLevel  reportMissingOverride  reportUnknownTypes  Var  var  Node  assign  lvalue  object  object2  rightChild  rvalue  FunctionType  functionType  ScopeCreator  scopeCreator  String  OVERRIDING_PROTOTYPE_WITH_NON_OBJECT  functionPrivateName  message  property  property2  JSDocInfo  info  int  noTypeCheckSection  nullCount  typedCount  unknownCount  TypeValidator  validator  ObjectType  type  AbstractCompiler  compiler  JSTypeRegistry  typeRegistry  boolean  enterSection  externs  inExterns  report  reportMissingProperties  typeable  Scope  outerScope  topScope  DiagnosticType  BAD_DELETE  BAD_IMPLEMENTED_TYPE  BIT_OPERATION  CONFLICTING_EXTENDED_TYPE  CONFLICTING_IMPLEMENTED_TYPE  CONSTRUCTOR_NOT_CALLABLE  DETERMINISTIC_TEST  DETERMINISTIC_TEST_NO_RESULT  ENUM_DUP  ENUM_NOT_CONSTANT  EXPECTED_THIS_TYPE  FUNCTION_MASKS_VARIABLE  HIDDEN_INTERFACE_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY_MISMATCH  ILLEGAL_IMPLICIT_CAST  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE  INEXISTENT_ENUM_ELEMENT  INEXISTENT_PROPERTY  INTERFACE_FUNCTION_NOT_EMPTY  INTERFACE_METHOD_OVERRIDE  INVALID_INTERFACE_MEMBER_DECLARATION  MULTIPLE_VAR_DEF  NOT_A_CONSTRUCTOR  NOT_CALLABLE  UNEXPECTED_TOKEN  UNKNOWN_EXPR_TYPE  UNKNOWN_OVERRIDE  UNRESOLVED_TYPE  WRONG_ARGUMENT_COUNT  diagnosticType  InferJSDocInfo  inferJSDocInfo  	projects/Closure66/src/com/google/javascript/jscomp/TypeCheck.java	0.21320071635561041	939	939	2	replace	Node  rightChild  =  leftType.getLowerCase();	  Node    rightChild    =    leftType.getNext();    	non-compiled	[CE]  orphaned  case	27	None	replace
16	[BUG]  [BUGGY]  Node  rightChild  =  leftType.getRight();  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      Var  var  =  t.getScope().getVar(lvalue.getString());  if  (var  !=  null)  {  if  (var.isTypeInferred())  {  return;  }  }  }  JSType  leftType  =  getJSType(lvalue);      [BUGGY]  Node  rightChild  =  leftType.getRight();  [BUGGY]      JSType  rightType  =  getJSType(rightChild);  if  (validator.expectCanAssignTo(  t,  assign,  rightType,  leftType,       "assignment     "))  {  ensureTyped(t,  assign,  rightType);  }  else  {  ensureTyped(t,  assign);  }  }  [CLASS]  TypeCheck  [METHOD]  visitAssign  [RETURN_TYPE]  void  NodeTraversal  t  Node  assign  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  jsType  leftType  objectJsType  rightType  rvalueType  NodeTraversal  t  DiagnosticGroup  ALL_DIAGNOSTICS  CheckLevel  reportMissingOverride  reportUnknownTypes  Var  var  Node  assign  lvalue  object  object2  rightChild  rvalue  FunctionType  functionType  ScopeCreator  scopeCreator  String  OVERRIDING_PROTOTYPE_WITH_NON_OBJECT  functionPrivateName  message  property  property2  JSDocInfo  info  int  noTypeCheckSection  nullCount  typedCount  unknownCount  TypeValidator  validator  ObjectType  type  AbstractCompiler  compiler  JSTypeRegistry  typeRegistry  boolean  enterSection  externs  inExterns  report  reportMissingProperties  typeable  Scope  outerScope  topScope  DiagnosticType  BAD_DELETE  BAD_IMPLEMENTED_TYPE  BIT_OPERATION  CONFLICTING_EXTENDED_TYPE  CONFLICTING_IMPLEMENTED_TYPE  CONSTRUCTOR_NOT_CALLABLE  DETERMINISTIC_TEST  DETERMINISTIC_TEST_NO_RESULT  ENUM_DUP  ENUM_NOT_CONSTANT  EXPECTED_THIS_TYPE  FUNCTION_MASKS_VARIABLE  HIDDEN_INTERFACE_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY_MISMATCH  ILLEGAL_IMPLICIT_CAST  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE  INEXISTENT_ENUM_ELEMENT  INEXISTENT_PROPERTY  INTERFACE_FUNCTION_NOT_EMPTY  INTERFACE_METHOD_OVERRIDE  INVALID_INTERFACE_MEMBER_DECLARATION  MULTIPLE_VAR_DEF  NOT_A_CONSTRUCTOR  NOT_CALLABLE  UNEXPECTED_TOKEN  UNKNOWN_EXPR_TYPE  UNKNOWN_OVERRIDE  UNRESOLVED_TYPE  WRONG_ARGUMENT_COUNT  diagnosticType  InferJSDocInfo  inferJSDocInfo  	projects/Closure66/src/com/google/javascript/jscomp/TypeCheck.java	0.21320071635561041	939	939	2	replace	Node  rightChild  =  leftType.getRight();	  Node    rightChild    =    leftType.getNext();    	non-compiled	[CE]  orphaned  case	27	None	replace
17	[BUG]  [BUGGY]  Node  rightChild  =  leftType.getParent();  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      Var  var  =  t.getScope().getVar(lvalue.getString());  if  (var  !=  null)  {  if  (var.isTypeInferred())  {  return;  }  }  }  JSType  leftType  =  getJSType(lvalue);      [BUGGY]  Node  rightChild  =  leftType.getParent();  [BUGGY]      JSType  rightType  =  getJSType(rightChild);  if  (validator.expectCanAssignTo(  t,  assign,  rightType,  leftType,       "assignment     "))  {  ensureTyped(t,  assign,  rightType);  }  else  {  ensureTyped(t,  assign);  }  }  [CLASS]  TypeCheck  [METHOD]  visitAssign  [RETURN_TYPE]  void  NodeTraversal  t  Node  assign  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  jsType  leftType  objectJsType  rightType  rvalueType  NodeTraversal  t  DiagnosticGroup  ALL_DIAGNOSTICS  CheckLevel  reportMissingOverride  reportUnknownTypes  Var  var  Node  assign  lvalue  object  object2  rightChild  rvalue  FunctionType  functionType  ScopeCreator  scopeCreator  String  OVERRIDING_PROTOTYPE_WITH_NON_OBJECT  functionPrivateName  message  property  property2  JSDocInfo  info  int  noTypeCheckSection  nullCount  typedCount  unknownCount  TypeValidator  validator  ObjectType  type  AbstractCompiler  compiler  JSTypeRegistry  typeRegistry  boolean  enterSection  externs  inExterns  report  reportMissingProperties  typeable  Scope  outerScope  topScope  DiagnosticType  BAD_DELETE  BAD_IMPLEMENTED_TYPE  BIT_OPERATION  CONFLICTING_EXTENDED_TYPE  CONFLICTING_IMPLEMENTED_TYPE  CONSTRUCTOR_NOT_CALLABLE  DETERMINISTIC_TEST  DETERMINISTIC_TEST_NO_RESULT  ENUM_DUP  ENUM_NOT_CONSTANT  EXPECTED_THIS_TYPE  FUNCTION_MASKS_VARIABLE  HIDDEN_INTERFACE_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY_MISMATCH  ILLEGAL_IMPLICIT_CAST  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE  INEXISTENT_ENUM_ELEMENT  INEXISTENT_PROPERTY  INTERFACE_FUNCTION_NOT_EMPTY  INTERFACE_METHOD_OVERRIDE  INVALID_INTERFACE_MEMBER_DECLARATION  MULTIPLE_VAR_DEF  NOT_A_CONSTRUCTOR  NOT_CALLABLE  UNEXPECTED_TOKEN  UNKNOWN_EXPR_TYPE  UNKNOWN_OVERRIDE  UNRESOLVED_TYPE  WRONG_ARGUMENT_COUNT  diagnosticType  InferJSDocInfo  inferJSDocInfo  	projects/Closure66/src/com/google/javascript/jscomp/TypeCheck.java	0.21320071635561041	939	939	2	replace	Node  rightChild  =  leftType.getParent();	  Node    rightChild    =    leftType.getNext();    	non-compiled	[CE]  orphaned  case	27	None	replace
18	[BUG]  [BUGGY]  Node  rightChild  =  leftType.getRawChild();  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      Var  var  =  t.getScope().getVar(lvalue.getString());  if  (var  !=  null)  {  if  (var.isTypeInferred())  {  return;  }  }  }  JSType  leftType  =  getJSType(lvalue);      [BUGGY]  Node  rightChild  =  leftType.getRawChild();  [BUGGY]      JSType  rightType  =  getJSType(rightChild);  if  (validator.expectCanAssignTo(  t,  assign,  rightType,  leftType,       "assignment     "))  {  ensureTyped(t,  assign,  rightType);  }  else  {  ensureTyped(t,  assign);  }  }  [CLASS]  TypeCheck  [METHOD]  visitAssign  [RETURN_TYPE]  void  NodeTraversal  t  Node  assign  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  jsType  leftType  objectJsType  rightType  rvalueType  NodeTraversal  t  DiagnosticGroup  ALL_DIAGNOSTICS  CheckLevel  reportMissingOverride  reportUnknownTypes  Var  var  Node  assign  lvalue  object  object2  rightChild  rvalue  FunctionType  functionType  ScopeCreator  scopeCreator  String  OVERRIDING_PROTOTYPE_WITH_NON_OBJECT  functionPrivateName  message  property  property2  JSDocInfo  info  int  noTypeCheckSection  nullCount  typedCount  unknownCount  TypeValidator  validator  ObjectType  type  AbstractCompiler  compiler  JSTypeRegistry  typeRegistry  boolean  enterSection  externs  inExterns  report  reportMissingProperties  typeable  Scope  outerScope  topScope  DiagnosticType  BAD_DELETE  BAD_IMPLEMENTED_TYPE  BIT_OPERATION  CONFLICTING_EXTENDED_TYPE  CONFLICTING_IMPLEMENTED_TYPE  CONSTRUCTOR_NOT_CALLABLE  DETERMINISTIC_TEST  DETERMINISTIC_TEST_NO_RESULT  ENUM_DUP  ENUM_NOT_CONSTANT  EXPECTED_THIS_TYPE  FUNCTION_MASKS_VARIABLE  HIDDEN_INTERFACE_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY_MISMATCH  ILLEGAL_IMPLICIT_CAST  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE  INEXISTENT_ENUM_ELEMENT  INEXISTENT_PROPERTY  INTERFACE_FUNCTION_NOT_EMPTY  INTERFACE_METHOD_OVERRIDE  INVALID_INTERFACE_MEMBER_DECLARATION  MULTIPLE_VAR_DEF  NOT_A_CONSTRUCTOR  NOT_CALLABLE  UNEXPECTED_TOKEN  UNKNOWN_EXPR_TYPE  UNKNOWN_OVERRIDE  UNRESOLVED_TYPE  WRONG_ARGUMENT_COUNT  diagnosticType  InferJSDocInfo  inferJSDocInfo  	projects/Closure66/src/com/google/javascript/jscomp/TypeCheck.java	0.21320071635561041	939	939	2	replace	Node  rightChild  =  leftType.getRawChild();	  Node    rightChild    =    leftType.getNext();    	non-compiled	[CE]  orphaned  case	27	None	replace
19	[BUG]  [BUGGY]  Node  rightChild  =  leftType.getRawParent();  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      Var  var  =  t.getScope().getVar(lvalue.getString());  if  (var  !=  null)  {  if  (var.isTypeInferred())  {  return;  }  }  }  JSType  leftType  =  getJSType(lvalue);      [BUGGY]  Node  rightChild  =  leftType.getRawParent();  [BUGGY]      JSType  rightType  =  getJSType(rightChild);  if  (validator.expectCanAssignTo(  t,  assign,  rightType,  leftType,       "assignment     "))  {  ensureTyped(t,  assign,  rightType);  }  else  {  ensureTyped(t,  assign);  }  }  [CLASS]  TypeCheck  [METHOD]  visitAssign  [RETURN_TYPE]  void  NodeTraversal  t  Node  assign  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  jsType  leftType  objectJsType  rightType  rvalueType  NodeTraversal  t  DiagnosticGroup  ALL_DIAGNOSTICS  CheckLevel  reportMissingOverride  reportUnknownTypes  Var  var  Node  assign  lvalue  object  object2  rightChild  rvalue  FunctionType  functionType  ScopeCreator  scopeCreator  String  OVERRIDING_PROTOTYPE_WITH_NON_OBJECT  functionPrivateName  message  property  property2  JSDocInfo  info  int  noTypeCheckSection  nullCount  typedCount  unknownCount  TypeValidator  validator  ObjectType  type  AbstractCompiler  compiler  JSTypeRegistry  typeRegistry  boolean  enterSection  externs  inExterns  report  reportMissingProperties  typeable  Scope  outerScope  topScope  DiagnosticType  BAD_DELETE  BAD_IMPLEMENTED_TYPE  BIT_OPERATION  CONFLICTING_EXTENDED_TYPE  CONFLICTING_IMPLEMENTED_TYPE  CONSTRUCTOR_NOT_CALLABLE  DETERMINISTIC_TEST  DETERMINISTIC_TEST_NO_RESULT  ENUM_DUP  ENUM_NOT_CONSTANT  EXPECTED_THIS_TYPE  FUNCTION_MASKS_VARIABLE  HIDDEN_INTERFACE_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY_MISMATCH  ILLEGAL_IMPLICIT_CAST  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE  INEXISTENT_ENUM_ELEMENT  INEXISTENT_PROPERTY  INTERFACE_FUNCTION_NOT_EMPTY  INTERFACE_METHOD_OVERRIDE  INVALID_INTERFACE_MEMBER_DECLARATION  MULTIPLE_VAR_DEF  NOT_A_CONSTRUCTOR  NOT_CALLABLE  UNEXPECTED_TOKEN  UNKNOWN_EXPR_TYPE  UNKNOWN_OVERRIDE  UNRESOLVED_TYPE  WRONG_ARGUMENT_COUNT  diagnosticType  InferJSDocInfo  inferJSDocInfo  	projects/Closure66/src/com/google/javascript/jscomp/TypeCheck.java	0.21320071635561041	939	939	2	replace	Node  rightChild  =  leftType.getRawParent();	  Node    rightChild    =    leftType.getNext();    	non-compiled	[CE]  orphaned  case	27	None	replace
20	[BUG]  [BUGGY]  Node  rightChild  =  object.getRight();  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      Var  var  =  t.getScope().getVar(lvalue.getString());  if  (var  !=  null)  {  if  (var.isTypeInferred())  {  return;  }  }  }  JSType  leftType  =  getJSType(lvalue);      [BUGGY]  Node  rightChild  =  object.getRight();  [BUGGY]      JSType  rightType  =  getJSType(rightChild);  if  (validator.expectCanAssignTo(  t,  assign,  rightType,  leftType,       "assignment     "))  {  ensureTyped(t,  assign,  rightType);  }  else  {  ensureTyped(t,  assign);  }  }  [CLASS]  TypeCheck  [METHOD]  visitAssign  [RETURN_TYPE]  void  NodeTraversal  t  Node  assign  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  jsType  leftType  objectJsType  rightType  rvalueType  NodeTraversal  t  DiagnosticGroup  ALL_DIAGNOSTICS  CheckLevel  reportMissingOverride  reportUnknownTypes  Var  var  Node  assign  lvalue  object  object2  rightChild  rvalue  FunctionType  functionType  ScopeCreator  scopeCreator  String  OVERRIDING_PROTOTYPE_WITH_NON_OBJECT  functionPrivateName  message  property  property2  JSDocInfo  info  int  noTypeCheckSection  nullCount  typedCount  unknownCount  TypeValidator  validator  ObjectType  type  AbstractCompiler  compiler  JSTypeRegistry  typeRegistry  boolean  enterSection  externs  inExterns  report  reportMissingProperties  typeable  Scope  outerScope  topScope  DiagnosticType  BAD_DELETE  BAD_IMPLEMENTED_TYPE  BIT_OPERATION  CONFLICTING_EXTENDED_TYPE  CONFLICTING_IMPLEMENTED_TYPE  CONSTRUCTOR_NOT_CALLABLE  DETERMINISTIC_TEST  DETERMINISTIC_TEST_NO_RESULT  ENUM_DUP  ENUM_NOT_CONSTANT  EXPECTED_THIS_TYPE  FUNCTION_MASKS_VARIABLE  HIDDEN_INTERFACE_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY_MISMATCH  ILLEGAL_IMPLICIT_CAST  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE  INEXISTENT_ENUM_ELEMENT  INEXISTENT_PROPERTY  INTERFACE_FUNCTION_NOT_EMPTY  INTERFACE_METHOD_OVERRIDE  INVALID_INTERFACE_MEMBER_DECLARATION  MULTIPLE_VAR_DEF  NOT_A_CONSTRUCTOR  NOT_CALLABLE  UNEXPECTED_TOKEN  UNKNOWN_EXPR_TYPE  UNKNOWN_OVERRIDE  UNRESOLVED_TYPE  WRONG_ARGUMENT_COUNT  diagnosticType  InferJSDocInfo  inferJSDocInfo  	projects/Closure66/src/com/google/javascript/jscomp/TypeCheck.java	0.21320071635561041	939	939	2	replace	Node  rightChild  =  object.getRight();	  Node    rightChild    =    object.getNext();    	non-compiled	[CE]  orphaned  case	35	None	replace
21	[BUG]  [BUGGY]  Node  rightChild  =  object2.getNext();  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      Var  var  =  t.getScope().getVar(lvalue.getString());  if  (var  !=  null)  {  if  (var.isTypeInferred())  {  return;  }  }  }  JSType  leftType  =  getJSType(lvalue);      [BUGGY]  Node  rightChild  =  object2.getNext();  [BUGGY]      JSType  rightType  =  getJSType(rightChild);  if  (validator.expectCanAssignTo(  t,  assign,  rightType,  leftType,       "assignment     "))  {  ensureTyped(t,  assign,  rightType);  }  else  {  ensureTyped(t,  assign);  }  }  [CLASS]  TypeCheck  [METHOD]  visitAssign  [RETURN_TYPE]  void  NodeTraversal  t  Node  assign  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  jsType  leftType  objectJsType  rightType  rvalueType  NodeTraversal  t  DiagnosticGroup  ALL_DIAGNOSTICS  CheckLevel  reportMissingOverride  reportUnknownTypes  Var  var  Node  assign  lvalue  object  object2  rightChild  rvalue  FunctionType  functionType  ScopeCreator  scopeCreator  String  OVERRIDING_PROTOTYPE_WITH_NON_OBJECT  functionPrivateName  message  property  property2  JSDocInfo  info  int  noTypeCheckSection  nullCount  typedCount  unknownCount  TypeValidator  validator  ObjectType  type  AbstractCompiler  compiler  JSTypeRegistry  typeRegistry  boolean  enterSection  externs  inExterns  report  reportMissingProperties  typeable  Scope  outerScope  topScope  DiagnosticType  BAD_DELETE  BAD_IMPLEMENTED_TYPE  BIT_OPERATION  CONFLICTING_EXTENDED_TYPE  CONFLICTING_IMPLEMENTED_TYPE  CONSTRUCTOR_NOT_CALLABLE  DETERMINISTIC_TEST  DETERMINISTIC_TEST_NO_RESULT  ENUM_DUP  ENUM_NOT_CONSTANT  EXPECTED_THIS_TYPE  FUNCTION_MASKS_VARIABLE  HIDDEN_INTERFACE_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY_MISMATCH  ILLEGAL_IMPLICIT_CAST  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE  INEXISTENT_ENUM_ELEMENT  INEXISTENT_PROPERTY  INTERFACE_FUNCTION_NOT_EMPTY  INTERFACE_METHOD_OVERRIDE  INVALID_INTERFACE_MEMBER_DECLARATION  MULTIPLE_VAR_DEF  NOT_A_CONSTRUCTOR  NOT_CALLABLE  UNEXPECTED_TOKEN  UNKNOWN_EXPR_TYPE  UNKNOWN_OVERRIDE  UNRESOLVED_TYPE  WRONG_ARGUMENT_COUNT  diagnosticType  InferJSDocInfo  inferJSDocInfo  	projects/Closure66/src/com/google/javascript/jscomp/TypeCheck.java	0.21320071635561041	939	939	2	replace	Node  rightChild  =  object2.getNext();	  Node    rightChild    =    object.getNext();    	non-compiled	[CE]  orphaned  case	35	None	replace
22	[BUG]  [BUGGY]  Node  rightChild  =  t.getScope().getRootNode(null,  leftType);  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      Var  var  =  t.getScope().getVar(lvalue.getString());  if  (var  !=  null)  {  if  (var.isTypeInferred())  {  return;  }  }  }  JSType  leftType  =  getJSType(lvalue);      [BUGGY]  Node  rightChild  =  t.getScope().getRootNode(null,  leftType);  [BUGGY]      JSType  rightType  =  getJSType(rightChild);  if  (validator.expectCanAssignTo(  t,  assign,  rightType,  leftType,       "assignment     "))  {  ensureTyped(t,  assign,  rightType);  }  else  {  ensureTyped(t,  assign);  }  }  [CLASS]  TypeCheck  [METHOD]  visitAssign  [RETURN_TYPE]  void  NodeTraversal  t  Node  assign  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  jsType  leftType  objectJsType  rightType  rvalueType  NodeTraversal  t  DiagnosticGroup  ALL_DIAGNOSTICS  CheckLevel  reportMissingOverride  reportUnknownTypes  Var  var  Node  assign  lvalue  object  object2  rightChild  rvalue  FunctionType  functionType  ScopeCreator  scopeCreator  String  OVERRIDING_PROTOTYPE_WITH_NON_OBJECT  functionPrivateName  message  property  property2  JSDocInfo  info  int  noTypeCheckSection  nullCount  typedCount  unknownCount  TypeValidator  validator  ObjectType  type  AbstractCompiler  compiler  JSTypeRegistry  typeRegistry  boolean  enterSection  externs  inExterns  report  reportMissingProperties  typeable  Scope  outerScope  topScope  DiagnosticType  BAD_DELETE  BAD_IMPLEMENTED_TYPE  BIT_OPERATION  CONFLICTING_EXTENDED_TYPE  CONFLICTING_IMPLEMENTED_TYPE  CONSTRUCTOR_NOT_CALLABLE  DETERMINISTIC_TEST  DETERMINISTIC_TEST_NO_RESULT  ENUM_DUP  ENUM_NOT_CONSTANT  EXPECTED_THIS_TYPE  FUNCTION_MASKS_VARIABLE  HIDDEN_INTERFACE_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY_MISMATCH  ILLEGAL_IMPLICIT_CAST  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE  INEXISTENT_ENUM_ELEMENT  INEXISTENT_PROPERTY  INTERFACE_FUNCTION_NOT_EMPTY  INTERFACE_METHOD_OVERRIDE  INVALID_INTERFACE_MEMBER_DECLARATION  MULTIPLE_VAR_DEF  NOT_A_CONSTRUCTOR  NOT_CALLABLE  UNEXPECTED_TOKEN  UNKNOWN_EXPR_TYPE  UNKNOWN_OVERRIDE  UNRESOLVED_TYPE  WRONG_ARGUMENT_COUNT  diagnosticType  InferJSDocInfo  inferJSDocInfo  	projects/Closure66/src/com/google/javascript/jscomp/TypeCheck.java	0.21320071635561041	939	939	2	replace	Node  rightChild  =  t.getScope().getRootNode(null,  leftType);	  Node    rightChild    =    t.getScope().getRootNode(null);    	non-compiled	[CE]  orphaned  case	21	None	replace
23	[BUG]  [BUGGY]  Node  rightChild  =  t.getScope().getRootNode(false);  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      Var  var  =  t.getScope().getVar(lvalue.getString());  if  (var  !=  null)  {  if  (var.isTypeInferred())  {  return;  }  }  }  JSType  leftType  =  getJSType(lvalue);      [BUGGY]  Node  rightChild  =  t.getScope().getRootNode(false);  [BUGGY]      JSType  rightType  =  getJSType(rightChild);  if  (validator.expectCanAssignTo(  t,  assign,  rightType,  leftType,       "assignment     "))  {  ensureTyped(t,  assign,  rightType);  }  else  {  ensureTyped(t,  assign);  }  }  [CLASS]  TypeCheck  [METHOD]  visitAssign  [RETURN_TYPE]  void  NodeTraversal  t  Node  assign  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  jsType  leftType  objectJsType  rightType  rvalueType  NodeTraversal  t  DiagnosticGroup  ALL_DIAGNOSTICS  CheckLevel  reportMissingOverride  reportUnknownTypes  Var  var  Node  assign  lvalue  object  object2  rightChild  rvalue  FunctionType  functionType  ScopeCreator  scopeCreator  String  OVERRIDING_PROTOTYPE_WITH_NON_OBJECT  functionPrivateName  message  property  property2  JSDocInfo  info  int  noTypeCheckSection  nullCount  typedCount  unknownCount  TypeValidator  validator  ObjectType  type  AbstractCompiler  compiler  JSTypeRegistry  typeRegistry  boolean  enterSection  externs  inExterns  report  reportMissingProperties  typeable  Scope  outerScope  topScope  DiagnosticType  BAD_DELETE  BAD_IMPLEMENTED_TYPE  BIT_OPERATION  CONFLICTING_EXTENDED_TYPE  CONFLICTING_IMPLEMENTED_TYPE  CONSTRUCTOR_NOT_CALLABLE  DETERMINISTIC_TEST  DETERMINISTIC_TEST_NO_RESULT  ENUM_DUP  ENUM_NOT_CONSTANT  EXPECTED_THIS_TYPE  FUNCTION_MASKS_VARIABLE  HIDDEN_INTERFACE_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY_MISMATCH  ILLEGAL_IMPLICIT_CAST  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE  INEXISTENT_ENUM_ELEMENT  INEXISTENT_PROPERTY  INTERFACE_FUNCTION_NOT_EMPTY  INTERFACE_METHOD_OVERRIDE  INVALID_INTERFACE_MEMBER_DECLARATION  MULTIPLE_VAR_DEF  NOT_A_CONSTRUCTOR  NOT_CALLABLE  UNEXPECTED_TOKEN  UNKNOWN_EXPR_TYPE  UNKNOWN_OVERRIDE  UNRESOLVED_TYPE  WRONG_ARGUMENT_COUNT  diagnosticType  InferJSDocInfo  inferJSDocInfo  	projects/Closure66/src/com/google/javascript/jscomp/TypeCheck.java	0.21320071635561041	939	939	2	replace	Node  rightChild  =  t.getScope().getRootNode(false);	  Node    rightChild    =    t.getScope().getRootNode(null);    	non-compiled	[CE]  orphaned  case	21	None	replace
24	[BUG]  [BUGGY]  Node  rightChild  =  t.getScope().getRootNode(lvalue,  null);  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      Var  var  =  t.getScope().getVar(lvalue.getString());  if  (var  !=  null)  {  if  (var.isTypeInferred())  {  return;  }  }  }  JSType  leftType  =  getJSType(lvalue);      [BUGGY]  Node  rightChild  =  t.getScope().getRootNode(lvalue,  null);  [BUGGY]      JSType  rightType  =  getJSType(rightChild);  if  (validator.expectCanAssignTo(  t,  assign,  rightType,  leftType,       "assignment     "))  {  ensureTyped(t,  assign,  rightType);  }  else  {  ensureTyped(t,  assign);  }  }  [CLASS]  TypeCheck  [METHOD]  visitAssign  [RETURN_TYPE]  void  NodeTraversal  t  Node  assign  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  jsType  leftType  objectJsType  rightType  rvalueType  NodeTraversal  t  DiagnosticGroup  ALL_DIAGNOSTICS  CheckLevel  reportMissingOverride  reportUnknownTypes  Var  var  Node  assign  lvalue  object  object2  rightChild  rvalue  FunctionType  functionType  ScopeCreator  scopeCreator  String  OVERRIDING_PROTOTYPE_WITH_NON_OBJECT  functionPrivateName  message  property  property2  JSDocInfo  info  int  noTypeCheckSection  nullCount  typedCount  unknownCount  TypeValidator  validator  ObjectType  type  AbstractCompiler  compiler  JSTypeRegistry  typeRegistry  boolean  enterSection  externs  inExterns  report  reportMissingProperties  typeable  Scope  outerScope  topScope  DiagnosticType  BAD_DELETE  BAD_IMPLEMENTED_TYPE  BIT_OPERATION  CONFLICTING_EXTENDED_TYPE  CONFLICTING_IMPLEMENTED_TYPE  CONSTRUCTOR_NOT_CALLABLE  DETERMINISTIC_TEST  DETERMINISTIC_TEST_NO_RESULT  ENUM_DUP  ENUM_NOT_CONSTANT  EXPECTED_THIS_TYPE  FUNCTION_MASKS_VARIABLE  HIDDEN_INTERFACE_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY_MISMATCH  ILLEGAL_IMPLICIT_CAST  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE  INEXISTENT_ENUM_ELEMENT  INEXISTENT_PROPERTY  INTERFACE_FUNCTION_NOT_EMPTY  INTERFACE_METHOD_OVERRIDE  INVALID_INTERFACE_MEMBER_DECLARATION  MULTIPLE_VAR_DEF  NOT_A_CONSTRUCTOR  NOT_CALLABLE  UNEXPECTED_TOKEN  UNKNOWN_EXPR_TYPE  UNKNOWN_OVERRIDE  UNRESOLVED_TYPE  WRONG_ARGUMENT_COUNT  diagnosticType  InferJSDocInfo  inferJSDocInfo  	projects/Closure66/src/com/google/javascript/jscomp/TypeCheck.java	0.21320071635561041	939	939	2	replace	Node  rightChild  =  t.getScope().getRootNode(lvalue,  null);	  Node    rightChild    =    t.getScope().getRootNode(null);    	non-compiled	[CE]  orphaned  case	21	None	replace
25	[BUG]  [BUGGY]  Node  rightChild  =  rvalue.getScope().getVar(leftType.getString());  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      Var  var  =  t.getScope().getVar(lvalue.getString());  if  (var  !=  null)  {  if  (var.isTypeInferred())  {  return;  }  }  }  JSType  leftType  =  getJSType(lvalue);      [BUGGY]  Node  rightChild  =  rvalue.getScope().getVar(leftType.getString());  [BUGGY]      JSType  rightType  =  getJSType(rightChild);  if  (validator.expectCanAssignTo(  t,  assign,  rightType,  leftType,       "assignment     "))  {  ensureTyped(t,  assign,  rightType);  }  else  {  ensureTyped(t,  assign);  }  }  [CLASS]  TypeCheck  [METHOD]  visitAssign  [RETURN_TYPE]  void  NodeTraversal  t  Node  assign  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  jsType  leftType  objectJsType  rightType  rvalueType  NodeTraversal  t  DiagnosticGroup  ALL_DIAGNOSTICS  CheckLevel  reportMissingOverride  reportUnknownTypes  Var  var  Node  assign  lvalue  object  object2  rightChild  rvalue  FunctionType  functionType  ScopeCreator  scopeCreator  String  OVERRIDING_PROTOTYPE_WITH_NON_OBJECT  functionPrivateName  message  property  property2  JSDocInfo  info  int  noTypeCheckSection  nullCount  typedCount  unknownCount  TypeValidator  validator  ObjectType  type  AbstractCompiler  compiler  JSTypeRegistry  typeRegistry  boolean  enterSection  externs  inExterns  report  reportMissingProperties  typeable  Scope  outerScope  topScope  DiagnosticType  BAD_DELETE  BAD_IMPLEMENTED_TYPE  BIT_OPERATION  CONFLICTING_EXTENDED_TYPE  CONFLICTING_IMPLEMENTED_TYPE  CONSTRUCTOR_NOT_CALLABLE  DETERMINISTIC_TEST  DETERMINISTIC_TEST_NO_RESULT  ENUM_DUP  ENUM_NOT_CONSTANT  EXPECTED_THIS_TYPE  FUNCTION_MASKS_VARIABLE  HIDDEN_INTERFACE_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY_MISMATCH  ILLEGAL_IMPLICIT_CAST  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE  INEXISTENT_ENUM_ELEMENT  INEXISTENT_PROPERTY  INTERFACE_FUNCTION_NOT_EMPTY  INTERFACE_METHOD_OVERRIDE  INVALID_INTERFACE_MEMBER_DECLARATION  MULTIPLE_VAR_DEF  NOT_A_CONSTRUCTOR  NOT_CALLABLE  UNEXPECTED_TOKEN  UNKNOWN_EXPR_TYPE  UNKNOWN_OVERRIDE  UNRESOLVED_TYPE  WRONG_ARGUMENT_COUNT  diagnosticType  InferJSDocInfo  inferJSDocInfo  	projects/Closure66/src/com/google/javascript/jscomp/TypeCheck.java	0.21320071635561041	939	939	2	replace	Node  rightChild  =  rvalue.getScope().getVar(leftType.getString());	  Node    rightChild    =    t.getScope().getVar(rvalue.getString());    	non-compiled	[CE]  orphaned  case	12	None	replace
26	[BUG]  [BUGGY]  Node  rightChild  =  t.getScope().getVar(var.getString());  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      Var  var  =  t.getScope().getVar(lvalue.getString());  if  (var  !=  null)  {  if  (var.isTypeInferred())  {  return;  }  }  }  JSType  leftType  =  getJSType(lvalue);      [BUGGY]  Node  rightChild  =  t.getScope().getVar(var.getString());  [BUGGY]      JSType  rightType  =  getJSType(rightChild);  if  (validator.expectCanAssignTo(  t,  assign,  rightType,  leftType,       "assignment     "))  {  ensureTyped(t,  assign,  rightType);  }  else  {  ensureTyped(t,  assign);  }  }  [CLASS]  TypeCheck  [METHOD]  visitAssign  [RETURN_TYPE]  void  NodeTraversal  t  Node  assign  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  jsType  leftType  objectJsType  rightType  rvalueType  NodeTraversal  t  DiagnosticGroup  ALL_DIAGNOSTICS  CheckLevel  reportMissingOverride  reportUnknownTypes  Var  var  Node  assign  lvalue  object  object2  rightChild  rvalue  FunctionType  functionType  ScopeCreator  scopeCreator  String  OVERRIDING_PROTOTYPE_WITH_NON_OBJECT  functionPrivateName  message  property  property2  JSDocInfo  info  int  noTypeCheckSection  nullCount  typedCount  unknownCount  TypeValidator  validator  ObjectType  type  AbstractCompiler  compiler  JSTypeRegistry  typeRegistry  boolean  enterSection  externs  inExterns  report  reportMissingProperties  typeable  Scope  outerScope  topScope  DiagnosticType  BAD_DELETE  BAD_IMPLEMENTED_TYPE  BIT_OPERATION  CONFLICTING_EXTENDED_TYPE  CONFLICTING_IMPLEMENTED_TYPE  CONSTRUCTOR_NOT_CALLABLE  DETERMINISTIC_TEST  DETERMINISTIC_TEST_NO_RESULT  ENUM_DUP  ENUM_NOT_CONSTANT  EXPECTED_THIS_TYPE  FUNCTION_MASKS_VARIABLE  HIDDEN_INTERFACE_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY_MISMATCH  ILLEGAL_IMPLICIT_CAST  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE  INEXISTENT_ENUM_ELEMENT  INEXISTENT_PROPERTY  INTERFACE_FUNCTION_NOT_EMPTY  INTERFACE_METHOD_OVERRIDE  INVALID_INTERFACE_MEMBER_DECLARATION  MULTIPLE_VAR_DEF  NOT_A_CONSTRUCTOR  NOT_CALLABLE  UNEXPECTED_TOKEN  UNKNOWN_EXPR_TYPE  UNKNOWN_OVERRIDE  UNRESOLVED_TYPE  WRONG_ARGUMENT_COUNT  diagnosticType  InferJSDocInfo  inferJSDocInfo  	projects/Closure66/src/com/google/javascript/jscomp/TypeCheck.java	0.21320071635561041	939	939	2	replace	Node  rightChild  =  t.getScope().getVar(var.getString());	  Node    rightChild    =    t.getScope().getVar(rvalue.getString());    	non-compiled	[CE]  orphaned  case	12	None	replace
27	[BUG]  [BUGGY]  Node  rightChild  =  lvalue.getScope().getVar(rvalue.getString());  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      Var  var  =  t.getScope().getVar(lvalue.getString());  if  (var  !=  null)  {  if  (var.isTypeInferred())  {  return;  }  }  }  JSType  leftType  =  getJSType(lvalue);      [BUGGY]  Node  rightChild  =  lvalue.getScope().getVar(rvalue.getString());  [BUGGY]      JSType  rightType  =  getJSType(rightChild);  if  (validator.expectCanAssignTo(  t,  assign,  rightType,  leftType,       "assignment     "))  {  ensureTyped(t,  assign,  rightType);  }  else  {  ensureTyped(t,  assign);  }  }  [CLASS]  TypeCheck  [METHOD]  visitAssign  [RETURN_TYPE]  void  NodeTraversal  t  Node  assign  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  jsType  leftType  objectJsType  rightType  rvalueType  NodeTraversal  t  DiagnosticGroup  ALL_DIAGNOSTICS  CheckLevel  reportMissingOverride  reportUnknownTypes  Var  var  Node  assign  lvalue  object  object2  rightChild  rvalue  FunctionType  functionType  ScopeCreator  scopeCreator  String  OVERRIDING_PROTOTYPE_WITH_NON_OBJECT  functionPrivateName  message  property  property2  JSDocInfo  info  int  noTypeCheckSection  nullCount  typedCount  unknownCount  TypeValidator  validator  ObjectType  type  AbstractCompiler  compiler  JSTypeRegistry  typeRegistry  boolean  enterSection  externs  inExterns  report  reportMissingProperties  typeable  Scope  outerScope  topScope  DiagnosticType  BAD_DELETE  BAD_IMPLEMENTED_TYPE  BIT_OPERATION  CONFLICTING_EXTENDED_TYPE  CONFLICTING_IMPLEMENTED_TYPE  CONSTRUCTOR_NOT_CALLABLE  DETERMINISTIC_TEST  DETERMINISTIC_TEST_NO_RESULT  ENUM_DUP  ENUM_NOT_CONSTANT  EXPECTED_THIS_TYPE  FUNCTION_MASKS_VARIABLE  HIDDEN_INTERFACE_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY_MISMATCH  ILLEGAL_IMPLICIT_CAST  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE  INEXISTENT_ENUM_ELEMENT  INEXISTENT_PROPERTY  INTERFACE_FUNCTION_NOT_EMPTY  INTERFACE_METHOD_OVERRIDE  INVALID_INTERFACE_MEMBER_DECLARATION  MULTIPLE_VAR_DEF  NOT_A_CONSTRUCTOR  NOT_CALLABLE  UNEXPECTED_TOKEN  UNKNOWN_EXPR_TYPE  UNKNOWN_OVERRIDE  UNRESOLVED_TYPE  WRONG_ARGUMENT_COUNT  diagnosticType  InferJSDocInfo  inferJSDocInfo  	projects/Closure66/src/com/google/javascript/jscomp/TypeCheck.java	0.21320071635561041	939	939	2	replace	Node  rightChild  =  lvalue.getScope().getVar(rvalue.getString());	  Node    rightChild    =    t.getScope().getVar(rvalue.getString());    	non-compiled	[CE]  orphaned  case	12	None	replace
28	[BUG]  [BUGGY]  Node  rightChild  =  object.removeLastChild();  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      Var  var  =  t.getScope().getVar(lvalue.getString());  if  (var  !=  null)  {  if  (var.isTypeInferred())  {  return;  }  }  }  JSType  leftType  =  getJSType(lvalue);      [BUGGY]  Node  rightChild  =  object.removeLastChild();  [BUGGY]      JSType  rightType  =  getJSType(rightChild);  if  (validator.expectCanAssignTo(  t,  assign,  rightType,  leftType,       "assignment     "))  {  ensureTyped(t,  assign,  rightType);  }  else  {  ensureTyped(t,  assign);  }  }  [CLASS]  TypeCheck  [METHOD]  visitAssign  [RETURN_TYPE]  void  NodeTraversal  t  Node  assign  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  jsType  leftType  objectJsType  rightType  rvalueType  NodeTraversal  t  DiagnosticGroup  ALL_DIAGNOSTICS  CheckLevel  reportMissingOverride  reportUnknownTypes  Var  var  Node  assign  lvalue  object  object2  rightChild  rvalue  FunctionType  functionType  ScopeCreator  scopeCreator  String  OVERRIDING_PROTOTYPE_WITH_NON_OBJECT  functionPrivateName  message  property  property2  JSDocInfo  info  int  noTypeCheckSection  nullCount  typedCount  unknownCount  TypeValidator  validator  ObjectType  type  AbstractCompiler  compiler  JSTypeRegistry  typeRegistry  boolean  enterSection  externs  inExterns  report  reportMissingProperties  typeable  Scope  outerScope  topScope  DiagnosticType  BAD_DELETE  BAD_IMPLEMENTED_TYPE  BIT_OPERATION  CONFLICTING_EXTENDED_TYPE  CONFLICTING_IMPLEMENTED_TYPE  CONSTRUCTOR_NOT_CALLABLE  DETERMINISTIC_TEST  DETERMINISTIC_TEST_NO_RESULT  ENUM_DUP  ENUM_NOT_CONSTANT  EXPECTED_THIS_TYPE  FUNCTION_MASKS_VARIABLE  HIDDEN_INTERFACE_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY_MISMATCH  ILLEGAL_IMPLICIT_CAST  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE  INEXISTENT_ENUM_ELEMENT  INEXISTENT_PROPERTY  INTERFACE_FUNCTION_NOT_EMPTY  INTERFACE_METHOD_OVERRIDE  INVALID_INTERFACE_MEMBER_DECLARATION  MULTIPLE_VAR_DEF  NOT_A_CONSTRUCTOR  NOT_CALLABLE  UNEXPECTED_TOKEN  UNKNOWN_EXPR_TYPE  UNKNOWN_OVERRIDE  UNRESOLVED_TYPE  WRONG_ARGUMENT_COUNT  diagnosticType  InferJSDocInfo  inferJSDocInfo  	projects/Closure66/src/com/google/javascript/jscomp/TypeCheck.java	0.21320071635561041	939	939	2	replace	Node  rightChild  =  object.removeLastChild();	  Node    rightChild    =    object.removeFirstChild();    	non-compiled	[CE]  orphaned  case	34	None	replace
29	[BUG]  [BUGGY]  Node  rightChild  =  object2.removeFirstChild();  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      Var  var  =  t.getScope().getVar(lvalue.getString());  if  (var  !=  null)  {  if  (var.isTypeInferred())  {  return;  }  }  }  JSType  leftType  =  getJSType(lvalue);      [BUGGY]  Node  rightChild  =  object2.removeFirstChild();  [BUGGY]      JSType  rightType  =  getJSType(rightChild);  if  (validator.expectCanAssignTo(  t,  assign,  rightType,  leftType,       "assignment     "))  {  ensureTyped(t,  assign,  rightType);  }  else  {  ensureTyped(t,  assign);  }  }  [CLASS]  TypeCheck  [METHOD]  visitAssign  [RETURN_TYPE]  void  NodeTraversal  t  Node  assign  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  jsType  leftType  objectJsType  rightType  rvalueType  NodeTraversal  t  DiagnosticGroup  ALL_DIAGNOSTICS  CheckLevel  reportMissingOverride  reportUnknownTypes  Var  var  Node  assign  lvalue  object  object2  rightChild  rvalue  FunctionType  functionType  ScopeCreator  scopeCreator  String  OVERRIDING_PROTOTYPE_WITH_NON_OBJECT  functionPrivateName  message  property  property2  JSDocInfo  info  int  noTypeCheckSection  nullCount  typedCount  unknownCount  TypeValidator  validator  ObjectType  type  AbstractCompiler  compiler  JSTypeRegistry  typeRegistry  boolean  enterSection  externs  inExterns  report  reportMissingProperties  typeable  Scope  outerScope  topScope  DiagnosticType  BAD_DELETE  BAD_IMPLEMENTED_TYPE  BIT_OPERATION  CONFLICTING_EXTENDED_TYPE  CONFLICTING_IMPLEMENTED_TYPE  CONSTRUCTOR_NOT_CALLABLE  DETERMINISTIC_TEST  DETERMINISTIC_TEST_NO_RESULT  ENUM_DUP  ENUM_NOT_CONSTANT  EXPECTED_THIS_TYPE  FUNCTION_MASKS_VARIABLE  HIDDEN_INTERFACE_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY_MISMATCH  ILLEGAL_IMPLICIT_CAST  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE  INEXISTENT_ENUM_ELEMENT  INEXISTENT_PROPERTY  INTERFACE_FUNCTION_NOT_EMPTY  INTERFACE_METHOD_OVERRIDE  INVALID_INTERFACE_MEMBER_DECLARATION  MULTIPLE_VAR_DEF  NOT_A_CONSTRUCTOR  NOT_CALLABLE  UNEXPECTED_TOKEN  UNKNOWN_EXPR_TYPE  UNKNOWN_OVERRIDE  UNRESOLVED_TYPE  WRONG_ARGUMENT_COUNT  diagnosticType  InferJSDocInfo  inferJSDocInfo  	projects/Closure66/src/com/google/javascript/jscomp/TypeCheck.java	0.21320071635561041	939	939	2	replace	Node  rightChild  =  object2.removeFirstChild();	  Node    rightChild    =    object.removeFirstChild();    	non-compiled	[CE]  orphaned  case	34	None	replace
30	[BUG]  [BUGGY]  Node  rightChild  =  t.getScope().getRawParentNode(lvalue);  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      Var  var  =  t.getScope().getVar(lvalue.getString());  if  (var  !=  null)  {  if  (var.isTypeInferred())  {  return;  }  }  }  JSType  leftType  =  getJSType(lvalue);      [BUGGY]  Node  rightChild  =  t.getScope().getRawParentNode(lvalue);  [BUGGY]      JSType  rightType  =  getJSType(rightChild);  if  (validator.expectCanAssignTo(  t,  assign,  rightType,  leftType,       "assignment     "))  {  ensureTyped(t,  assign,  rightType);  }  else  {  ensureTyped(t,  assign);  }  }  [CLASS]  TypeCheck  [METHOD]  visitAssign  [RETURN_TYPE]  void  NodeTraversal  t  Node  assign  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  jsType  leftType  objectJsType  rightType  rvalueType  NodeTraversal  t  DiagnosticGroup  ALL_DIAGNOSTICS  CheckLevel  reportMissingOverride  reportUnknownTypes  Var  var  Node  assign  lvalue  object  object2  rightChild  rvalue  FunctionType  functionType  ScopeCreator  scopeCreator  String  OVERRIDING_PROTOTYPE_WITH_NON_OBJECT  functionPrivateName  message  property  property2  JSDocInfo  info  int  noTypeCheckSection  nullCount  typedCount  unknownCount  TypeValidator  validator  ObjectType  type  AbstractCompiler  compiler  JSTypeRegistry  typeRegistry  boolean  enterSection  externs  inExterns  report  reportMissingProperties  typeable  Scope  outerScope  topScope  DiagnosticType  BAD_DELETE  BAD_IMPLEMENTED_TYPE  BIT_OPERATION  CONFLICTING_EXTENDED_TYPE  CONFLICTING_IMPLEMENTED_TYPE  CONSTRUCTOR_NOT_CALLABLE  DETERMINISTIC_TEST  DETERMINISTIC_TEST_NO_RESULT  ENUM_DUP  ENUM_NOT_CONSTANT  EXPECTED_THIS_TYPE  FUNCTION_MASKS_VARIABLE  HIDDEN_INTERFACE_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY_MISMATCH  ILLEGAL_IMPLICIT_CAST  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE  INEXISTENT_ENUM_ELEMENT  INEXISTENT_PROPERTY  INTERFACE_FUNCTION_NOT_EMPTY  INTERFACE_METHOD_OVERRIDE  INVALID_INTERFACE_MEMBER_DECLARATION  MULTIPLE_VAR_DEF  NOT_A_CONSTRUCTOR  NOT_CALLABLE  UNEXPECTED_TOKEN  UNKNOWN_EXPR_TYPE  UNKNOWN_OVERRIDE  UNRESOLVED_TYPE  WRONG_ARGUMENT_COUNT  diagnosticType  InferJSDocInfo  inferJSDocInfo  	projects/Closure66/src/com/google/javascript/jscomp/TypeCheck.java	0.21320071635561041	939	939	2	replace	Node  rightChild  =  t.getScope().getRawParentNode(lvalue);	  Node    rightChild    =    t.getScope().getRawParentNode();    	non-compiled	[CE]  orphaned  case	23	None	replace
31	[BUG]  [BUGGY]  Node  rightChild  =  t.getScope().getRawParentNode(null);  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      Var  var  =  t.getScope().getVar(lvalue.getString());  if  (var  !=  null)  {  if  (var.isTypeInferred())  {  return;  }  }  }  JSType  leftType  =  getJSType(lvalue);      [BUGGY]  Node  rightChild  =  t.getScope().getRawParentNode(null);  [BUGGY]      JSType  rightType  =  getJSType(rightChild);  if  (validator.expectCanAssignTo(  t,  assign,  rightType,  leftType,       "assignment     "))  {  ensureTyped(t,  assign,  rightType);  }  else  {  ensureTyped(t,  assign);  }  }  [CLASS]  TypeCheck  [METHOD]  visitAssign  [RETURN_TYPE]  void  NodeTraversal  t  Node  assign  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  jsType  leftType  objectJsType  rightType  rvalueType  NodeTraversal  t  DiagnosticGroup  ALL_DIAGNOSTICS  CheckLevel  reportMissingOverride  reportUnknownTypes  Var  var  Node  assign  lvalue  object  object2  rightChild  rvalue  FunctionType  functionType  ScopeCreator  scopeCreator  String  OVERRIDING_PROTOTYPE_WITH_NON_OBJECT  functionPrivateName  message  property  property2  JSDocInfo  info  int  noTypeCheckSection  nullCount  typedCount  unknownCount  TypeValidator  validator  ObjectType  type  AbstractCompiler  compiler  JSTypeRegistry  typeRegistry  boolean  enterSection  externs  inExterns  report  reportMissingProperties  typeable  Scope  outerScope  topScope  DiagnosticType  BAD_DELETE  BAD_IMPLEMENTED_TYPE  BIT_OPERATION  CONFLICTING_EXTENDED_TYPE  CONFLICTING_IMPLEMENTED_TYPE  CONSTRUCTOR_NOT_CALLABLE  DETERMINISTIC_TEST  DETERMINISTIC_TEST_NO_RESULT  ENUM_DUP  ENUM_NOT_CONSTANT  EXPECTED_THIS_TYPE  FUNCTION_MASKS_VARIABLE  HIDDEN_INTERFACE_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY_MISMATCH  ILLEGAL_IMPLICIT_CAST  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE  INEXISTENT_ENUM_ELEMENT  INEXISTENT_PROPERTY  INTERFACE_FUNCTION_NOT_EMPTY  INTERFACE_METHOD_OVERRIDE  INVALID_INTERFACE_MEMBER_DECLARATION  MULTIPLE_VAR_DEF  NOT_A_CONSTRUCTOR  NOT_CALLABLE  UNEXPECTED_TOKEN  UNKNOWN_EXPR_TYPE  UNKNOWN_OVERRIDE  UNRESOLVED_TYPE  WRONG_ARGUMENT_COUNT  diagnosticType  InferJSDocInfo  inferJSDocInfo  	projects/Closure66/src/com/google/javascript/jscomp/TypeCheck.java	0.21320071635561041	939	939	2	replace	Node  rightChild  =  t.getScope().getRawParentNode(null);	  Node    rightChild    =    t.getScope().getRawParentNode();    	non-compiled	[CE]  orphaned  case	23	None	replace
32	[BUG]  [BUGGY]  Node  rightChild  =  t.getScope().getRawParentNode(parent);  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      Var  var  =  t.getScope().getVar(lvalue.getString());  if  (var  !=  null)  {  if  (var.isTypeInferred())  {  return;  }  }  }  JSType  leftType  =  getJSType(lvalue);      [BUGGY]  Node  rightChild  =  t.getScope().getRawParentNode(parent);  [BUGGY]      JSType  rightType  =  getJSType(rightChild);  if  (validator.expectCanAssignTo(  t,  assign,  rightType,  leftType,       "assignment     "))  {  ensureTyped(t,  assign,  rightType);  }  else  {  ensureTyped(t,  assign);  }  }  [CLASS]  TypeCheck  [METHOD]  visitAssign  [RETURN_TYPE]  void  NodeTraversal  t  Node  assign  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  jsType  leftType  objectJsType  rightType  rvalueType  NodeTraversal  t  DiagnosticGroup  ALL_DIAGNOSTICS  CheckLevel  reportMissingOverride  reportUnknownTypes  Var  var  Node  assign  lvalue  object  object2  rightChild  rvalue  FunctionType  functionType  ScopeCreator  scopeCreator  String  OVERRIDING_PROTOTYPE_WITH_NON_OBJECT  functionPrivateName  message  property  property2  JSDocInfo  info  int  noTypeCheckSection  nullCount  typedCount  unknownCount  TypeValidator  validator  ObjectType  type  AbstractCompiler  compiler  JSTypeRegistry  typeRegistry  boolean  enterSection  externs  inExterns  report  reportMissingProperties  typeable  Scope  outerScope  topScope  DiagnosticType  BAD_DELETE  BAD_IMPLEMENTED_TYPE  BIT_OPERATION  CONFLICTING_EXTENDED_TYPE  CONFLICTING_IMPLEMENTED_TYPE  CONSTRUCTOR_NOT_CALLABLE  DETERMINISTIC_TEST  DETERMINISTIC_TEST_NO_RESULT  ENUM_DUP  ENUM_NOT_CONSTANT  EXPECTED_THIS_TYPE  FUNCTION_MASKS_VARIABLE  HIDDEN_INTERFACE_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY_MISMATCH  ILLEGAL_IMPLICIT_CAST  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE  INEXISTENT_ENUM_ELEMENT  INEXISTENT_PROPERTY  INTERFACE_FUNCTION_NOT_EMPTY  INTERFACE_METHOD_OVERRIDE  INVALID_INTERFACE_MEMBER_DECLARATION  MULTIPLE_VAR_DEF  NOT_A_CONSTRUCTOR  NOT_CALLABLE  UNEXPECTED_TOKEN  UNKNOWN_EXPR_TYPE  UNKNOWN_OVERRIDE  UNRESOLVED_TYPE  WRONG_ARGUMENT_COUNT  diagnosticType  InferJSDocInfo  inferJSDocInfo  	projects/Closure66/src/com/google/javascript/jscomp/TypeCheck.java	0.21320071635561041	939	939	2	replace	Node  rightChild  =  t.getScope().getRawParentNode(parent);	  Node    rightChild    =    t.getScope().getRawParentNode();    	non-compiled	[CE]  orphaned  case	23	None	replace
33	[BUG]  [BUGGY]  Node  rightChild  =  t.getScope().getRawParentNode(true);  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]      Var  var  =  t.getScope().getVar(lvalue.getString());  if  (var  !=  null)  {  if  (var.isTypeInferred())  {  return;  }  }  }  JSType  leftType  =  getJSType(lvalue);      [BUGGY]  Node  rightChild  =  t.getScope().getRawParentNode(true);  [BUGGY]      JSType  rightType  =  getJSType(rightChild);  if  (validator.expectCanAssignTo(  t,  assign,  rightType,  leftType,       "assignment     "))  {  ensureTyped(t,  assign,  rightType);  }  else  {  ensureTyped(t,  assign);  }  }  [CLASS]  TypeCheck  [METHOD]  visitAssign  [RETURN_TYPE]  void  NodeTraversal  t  Node  assign  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  jsType  leftType  objectJsType  rightType  rvalueType  NodeTraversal  t  DiagnosticGroup  ALL_DIAGNOSTICS  CheckLevel  reportMissingOverride  reportUnknownTypes  Var  var  Node  assign  lvalue  object  object2  rightChild  rvalue  FunctionType  functionType  ScopeCreator  scopeCreator  String  OVERRIDING_PROTOTYPE_WITH_NON_OBJECT  functionPrivateName  message  property  property2  JSDocInfo  info  int  noTypeCheckSection  nullCount  typedCount  unknownCount  TypeValidator  validator  ObjectType  type  AbstractCompiler  compiler  JSTypeRegistry  typeRegistry  boolean  enterSection  externs  inExterns  report  reportMissingProperties  typeable  Scope  outerScope  topScope  DiagnosticType  BAD_DELETE  BAD_IMPLEMENTED_TYPE  BIT_OPERATION  CONFLICTING_EXTENDED_TYPE  CONFLICTING_IMPLEMENTED_TYPE  CONSTRUCTOR_NOT_CALLABLE  DETERMINISTIC_TEST  DETERMINISTIC_TEST_NO_RESULT  ENUM_DUP  ENUM_NOT_CONSTANT  EXPECTED_THIS_TYPE  FUNCTION_MASKS_VARIABLE  HIDDEN_INTERFACE_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY_MISMATCH  ILLEGAL_IMPLICIT_CAST  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE  INEXISTENT_ENUM_ELEMENT  INEXISTENT_PROPERTY  INTERFACE_FUNCTION_NOT_EMPTY  INTERFACE_METHOD_OVERRIDE  INVALID_INTERFACE_MEMBER_DECLARATION  MULTIPLE_VAR_DEF  NOT_A_CONSTRUCTOR  NOT_CALLABLE  UNEXPECTED_TOKEN  UNKNOWN_EXPR_TYPE  UNKNOWN_OVERRIDE  UNRESOLVED_TYPE  WRONG_ARGUMENT_COUNT  diagnosticType  InferJSDocInfo  inferJSDocInfo  	projects/Closure66/src/com/google/javascript/jscomp/TypeCheck.java	0.21320071635561041	939	939	2	replace	Node  rightChild  =  t.getScope().getRawParentNode(true);	  Node    rightChild    =    t.getScope().getRawParentNode();    	non-compiled	[CE]  orphaned  case	23	None	replace
34	[BUG]  [BUGGY]  Node  rightChild  =  t.getScope().getRawParentNode(var);  [CE]  orphaned  case  [FE]                                AssertionFailedError      [CONTEXT]      Var  var  =  t.getScope().getVar(lvalue.getString());  if  (var  !=  null)  {  if  (var.isTypeInferred())  {  return;  }  }  }  JSType  leftType  =  getJSType(lvalue);      [BUGGY]  Node  rightChild  =  t.getScope().getRawParentNode(var);  [BUGGY]      JSType  rightType  =  getJSType(rightChild);  if  (validator.expectCanAssignTo(  t,  assign,  rightType,  leftType,       "assignment     "))  {  ensureTyped(t,  assign,  rightType);  }  else  {  ensureTyped(t,  assign);  }  }  [CLASS]  TypeCheck  [METHOD]  visitAssign  [RETURN_TYPE]  void  NodeTraversal  t  Node  assign  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  jsType  leftType  objectJsType  rightType  rvalueType  NodeTraversal  t  DiagnosticGroup  ALL_DIAGNOSTICS  CheckLevel  reportMissingOverride  reportUnknownTypes  Var  var  Node  assign  lvalue  object  object2  rightChild  rvalue  FunctionType  functionType  ScopeCreator  scopeCreator  String  OVERRIDING_PROTOTYPE_WITH_NON_OBJECT  functionPrivateName  message  property  property2  JSDocInfo  info  int  noTypeCheckSection  nullCount  typedCount  unknownCount  TypeValidator  validator  ObjectType  type  AbstractCompiler  compiler  JSTypeRegistry  typeRegistry  boolean  enterSection  externs  inExterns  report  reportMissingProperties  typeable  Scope  outerScope  topScope  DiagnosticType  BAD_DELETE  BAD_IMPLEMENTED_TYPE  BIT_OPERATION  CONFLICTING_EXTENDED_TYPE  CONFLICTING_IMPLEMENTED_TYPE  CONSTRUCTOR_NOT_CALLABLE  DETERMINISTIC_TEST  DETERMINISTIC_TEST_NO_RESULT  ENUM_DUP  ENUM_NOT_CONSTANT  EXPECTED_THIS_TYPE  FUNCTION_MASKS_VARIABLE  HIDDEN_INTERFACE_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY_MISMATCH  ILLEGAL_IMPLICIT_CAST  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE  INEXISTENT_ENUM_ELEMENT  INEXISTENT_PROPERTY  INTERFACE_FUNCTION_NOT_EMPTY  INTERFACE_METHOD_OVERRIDE  INVALID_INTERFACE_MEMBER_DECLARATION  MULTIPLE_VAR_DEF  NOT_A_CONSTRUCTOR  NOT_CALLABLE  UNEXPECTED_TOKEN  UNKNOWN_EXPR_TYPE  UNKNOWN_OVERRIDE  UNRESOLVED_TYPE  WRONG_ARGUMENT_COUNT  diagnosticType  InferJSDocInfo  inferJSDocInfo  	projects/Closure66/src/com/google/javascript/jscomp/TypeCheck.java	0.21320071635561041	939	939	2	replace	Node  rightChild  =  t.getScope().getRawParentNode(var);	  Node    rightChild    =    t.getScope().getRawParentNode();    	non-compiled	[CE]  orphaned  case	23	None	replace
35	[BUG]  [BUGGY]  Node  rightChild  =  t.getScope().getRawNameNode();  [CE]  orphaned  case  [FE]                                  AssertionFailedError      [CONTEXT]      Var  var  =  t.getScope().getVar(lvalue.getString());  if  (var  !=  null)  {  if  (var.isTypeInferred())  {  return;  }  }  }  JSType  leftType  =  getJSType(lvalue);      [BUGGY]  Node  rightChild  =  t.getScope().getRawNameNode();  [BUGGY]      JSType  rightType  =  getJSType(rightChild);  if  (validator.expectCanAssignTo(  t,  assign,  rightType,  leftType,       "assignment     "))  {  ensureTyped(t,  assign,  rightType);  }  else  {  ensureTyped(t,  assign);  }  }  [CLASS]  TypeCheck  [METHOD]  visitAssign  [RETURN_TYPE]  void  NodeTraversal  t  Node  assign  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  jsType  leftType  objectJsType  rightType  rvalueType  NodeTraversal  t  DiagnosticGroup  ALL_DIAGNOSTICS  CheckLevel  reportMissingOverride  reportUnknownTypes  Var  var  Node  assign  lvalue  object  object2  rightChild  rvalue  FunctionType  functionType  ScopeCreator  scopeCreator  String  OVERRIDING_PROTOTYPE_WITH_NON_OBJECT  functionPrivateName  message  property  property2  JSDocInfo  info  int  noTypeCheckSection  nullCount  typedCount  unknownCount  TypeValidator  validator  ObjectType  type  AbstractCompiler  compiler  JSTypeRegistry  typeRegistry  boolean  enterSection  externs  inExterns  report  reportMissingProperties  typeable  Scope  outerScope  topScope  DiagnosticType  BAD_DELETE  BAD_IMPLEMENTED_TYPE  BIT_OPERATION  CONFLICTING_EXTENDED_TYPE  CONFLICTING_IMPLEMENTED_TYPE  CONSTRUCTOR_NOT_CALLABLE  DETERMINISTIC_TEST  DETERMINISTIC_TEST_NO_RESULT  ENUM_DUP  ENUM_NOT_CONSTANT  EXPECTED_THIS_TYPE  FUNCTION_MASKS_VARIABLE  HIDDEN_INTERFACE_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY_MISMATCH  ILLEGAL_IMPLICIT_CAST  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE  INEXISTENT_ENUM_ELEMENT  INEXISTENT_PROPERTY  INTERFACE_FUNCTION_NOT_EMPTY  INTERFACE_METHOD_OVERRIDE  INVALID_INTERFACE_MEMBER_DECLARATION  MULTIPLE_VAR_DEF  NOT_A_CONSTRUCTOR  NOT_CALLABLE  UNEXPECTED_TOKEN  UNKNOWN_EXPR_TYPE  UNKNOWN_OVERRIDE  UNRESOLVED_TYPE  WRONG_ARGUMENT_COUNT  diagnosticType  InferJSDocInfo  inferJSDocInfo  	projects/Closure66/src/com/google/javascript/jscomp/TypeCheck.java	0.21320071635561041	939	939	2	replace	Node  rightChild  =  t.getScope().getRawNameNode();	  Node    rightChild    =    t.getScope().getRawParentNode();    	non-compiled	[CE]  orphaned  case	23	None	replace
36	[BUG]  [BUGGY]  Node  rightChild  =  var.getUpperCase();  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      Var  var  =  t.getScope().getVar(lvalue.getString());  if  (var  !=  null)  {  if  (var.isTypeInferred())  {  return;  }  }  }  JSType  leftType  =  getJSType(lvalue);      [BUGGY]  Node  rightChild  =  var.getUpperCase();  [BUGGY]      JSType  rightType  =  getJSType(rightChild);  if  (validator.expectCanAssignTo(  t,  assign,  rightType,  leftType,       "assignment     "))  {  ensureTyped(t,  assign,  rightType);  }  else  {  ensureTyped(t,  assign);  }  }  [CLASS]  TypeCheck  [METHOD]  visitAssign  [RETURN_TYPE]  void  NodeTraversal  t  Node  assign  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  jsType  leftType  objectJsType  rightType  rvalueType  NodeTraversal  t  DiagnosticGroup  ALL_DIAGNOSTICS  CheckLevel  reportMissingOverride  reportUnknownTypes  Var  var  Node  assign  lvalue  object  object2  rightChild  rvalue  FunctionType  functionType  ScopeCreator  scopeCreator  String  OVERRIDING_PROTOTYPE_WITH_NON_OBJECT  functionPrivateName  message  property  property2  JSDocInfo  info  int  noTypeCheckSection  nullCount  typedCount  unknownCount  TypeValidator  validator  ObjectType  type  AbstractCompiler  compiler  JSTypeRegistry  typeRegistry  boolean  enterSection  externs  inExterns  report  reportMissingProperties  typeable  Scope  outerScope  topScope  DiagnosticType  BAD_DELETE  BAD_IMPLEMENTED_TYPE  BIT_OPERATION  CONFLICTING_EXTENDED_TYPE  CONFLICTING_IMPLEMENTED_TYPE  CONSTRUCTOR_NOT_CALLABLE  DETERMINISTIC_TEST  DETERMINISTIC_TEST_NO_RESULT  ENUM_DUP  ENUM_NOT_CONSTANT  EXPECTED_THIS_TYPE  FUNCTION_MASKS_VARIABLE  HIDDEN_INTERFACE_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY_MISMATCH  ILLEGAL_IMPLICIT_CAST  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE  INEXISTENT_ENUM_ELEMENT  INEXISTENT_PROPERTY  INTERFACE_FUNCTION_NOT_EMPTY  INTERFACE_METHOD_OVERRIDE  INVALID_INTERFACE_MEMBER_DECLARATION  MULTIPLE_VAR_DEF  NOT_A_CONSTRUCTOR  NOT_CALLABLE  UNEXPECTED_TOKEN  UNKNOWN_EXPR_TYPE  UNKNOWN_OVERRIDE  UNRESOLVED_TYPE  WRONG_ARGUMENT_COUNT  diagnosticType  InferJSDocInfo  inferJSDocInfo  	projects/Closure66/src/com/google/javascript/jscomp/TypeCheck.java	0.21320071635561041	939	939	2	replace	Node  rightChild  =  var.getUpperCase();	  Node    rightChild    =    var.getLowerCase();    	non-compiled	[CE]  orphaned  case	30	None	replace
37	[BUG]  [BUGGY]  Node  rightChild  =  var.getOwnerCase();  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      Var  var  =  t.getScope().getVar(lvalue.getString());  if  (var  !=  null)  {  if  (var.isTypeInferred())  {  return;  }  }  }  JSType  leftType  =  getJSType(lvalue);      [BUGGY]  Node  rightChild  =  var.getOwnerCase();  [BUGGY]      JSType  rightType  =  getJSType(rightChild);  if  (validator.expectCanAssignTo(  t,  assign,  rightType,  leftType,       "assignment     "))  {  ensureTyped(t,  assign,  rightType);  }  else  {  ensureTyped(t,  assign);  }  }  [CLASS]  TypeCheck  [METHOD]  visitAssign  [RETURN_TYPE]  void  NodeTraversal  t  Node  assign  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  jsType  leftType  objectJsType  rightType  rvalueType  NodeTraversal  t  DiagnosticGroup  ALL_DIAGNOSTICS  CheckLevel  reportMissingOverride  reportUnknownTypes  Var  var  Node  assign  lvalue  object  object2  rightChild  rvalue  FunctionType  functionType  ScopeCreator  scopeCreator  String  OVERRIDING_PROTOTYPE_WITH_NON_OBJECT  functionPrivateName  message  property  property2  JSDocInfo  info  int  noTypeCheckSection  nullCount  typedCount  unknownCount  TypeValidator  validator  ObjectType  type  AbstractCompiler  compiler  JSTypeRegistry  typeRegistry  boolean  enterSection  externs  inExterns  report  reportMissingProperties  typeable  Scope  outerScope  topScope  DiagnosticType  BAD_DELETE  BAD_IMPLEMENTED_TYPE  BIT_OPERATION  CONFLICTING_EXTENDED_TYPE  CONFLICTING_IMPLEMENTED_TYPE  CONSTRUCTOR_NOT_CALLABLE  DETERMINISTIC_TEST  DETERMINISTIC_TEST_NO_RESULT  ENUM_DUP  ENUM_NOT_CONSTANT  EXPECTED_THIS_TYPE  FUNCTION_MASKS_VARIABLE  HIDDEN_INTERFACE_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY_MISMATCH  ILLEGAL_IMPLICIT_CAST  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE  INEXISTENT_ENUM_ELEMENT  INEXISTENT_PROPERTY  INTERFACE_FUNCTION_NOT_EMPTY  INTERFACE_METHOD_OVERRIDE  INVALID_INTERFACE_MEMBER_DECLARATION  MULTIPLE_VAR_DEF  NOT_A_CONSTRUCTOR  NOT_CALLABLE  UNEXPECTED_TOKEN  UNKNOWN_EXPR_TYPE  UNKNOWN_OVERRIDE  UNRESOLVED_TYPE  WRONG_ARGUMENT_COUNT  diagnosticType  InferJSDocInfo  inferJSDocInfo  	projects/Closure66/src/com/google/javascript/jscomp/TypeCheck.java	0.21320071635561041	939	939	2	replace	Node  rightChild  =  var.getOwnerCase();	  Node    rightChild    =    var.getLowerCase();    	non-compiled	[CE]  orphaned  case	30	None	replace
38	[BUG]  [BUGGY]  Node  rightChild  =  var.getLowerCase(lvalue);  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      Var  var  =  t.getScope().getVar(lvalue.getString());  if  (var  !=  null)  {  if  (var.isTypeInferred())  {  return;  }  }  }  JSType  leftType  =  getJSType(lvalue);      [BUGGY]  Node  rightChild  =  var.getLowerCase(lvalue);  [BUGGY]      JSType  rightType  =  getJSType(rightChild);  if  (validator.expectCanAssignTo(  t,  assign,  rightType,  leftType,       "assignment     "))  {  ensureTyped(t,  assign,  rightType);  }  else  {  ensureTyped(t,  assign);  }  }  [CLASS]  TypeCheck  [METHOD]  visitAssign  [RETURN_TYPE]  void  NodeTraversal  t  Node  assign  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  jsType  leftType  objectJsType  rightType  rvalueType  NodeTraversal  t  DiagnosticGroup  ALL_DIAGNOSTICS  CheckLevel  reportMissingOverride  reportUnknownTypes  Var  var  Node  assign  lvalue  object  object2  rightChild  rvalue  FunctionType  functionType  ScopeCreator  scopeCreator  String  OVERRIDING_PROTOTYPE_WITH_NON_OBJECT  functionPrivateName  message  property  property2  JSDocInfo  info  int  noTypeCheckSection  nullCount  typedCount  unknownCount  TypeValidator  validator  ObjectType  type  AbstractCompiler  compiler  JSTypeRegistry  typeRegistry  boolean  enterSection  externs  inExterns  report  reportMissingProperties  typeable  Scope  outerScope  topScope  DiagnosticType  BAD_DELETE  BAD_IMPLEMENTED_TYPE  BIT_OPERATION  CONFLICTING_EXTENDED_TYPE  CONFLICTING_IMPLEMENTED_TYPE  CONSTRUCTOR_NOT_CALLABLE  DETERMINISTIC_TEST  DETERMINISTIC_TEST_NO_RESULT  ENUM_DUP  ENUM_NOT_CONSTANT  EXPECTED_THIS_TYPE  FUNCTION_MASKS_VARIABLE  HIDDEN_INTERFACE_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY_MISMATCH  ILLEGAL_IMPLICIT_CAST  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE  INEXISTENT_ENUM_ELEMENT  INEXISTENT_PROPERTY  INTERFACE_FUNCTION_NOT_EMPTY  INTERFACE_METHOD_OVERRIDE  INVALID_INTERFACE_MEMBER_DECLARATION  MULTIPLE_VAR_DEF  NOT_A_CONSTRUCTOR  NOT_CALLABLE  UNEXPECTED_TOKEN  UNKNOWN_EXPR_TYPE  UNKNOWN_OVERRIDE  UNRESOLVED_TYPE  WRONG_ARGUMENT_COUNT  diagnosticType  InferJSDocInfo  inferJSDocInfo  	projects/Closure66/src/com/google/javascript/jscomp/TypeCheck.java	0.21320071635561041	939	939	2	replace	Node  rightChild  =  var.getLowerCase(lvalue);	  Node    rightChild    =    var.getLowerCase();    	non-compiled	[CE]  orphaned  case	30	None	replace
39	[BUG]  [BUGGY]  Node  rightChild  =  var.getRightCase();  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      Var  var  =  t.getScope().getVar(lvalue.getString());  if  (var  !=  null)  {  if  (var.isTypeInferred())  {  return;  }  }  }  JSType  leftType  =  getJSType(lvalue);      [BUGGY]  Node  rightChild  =  var.getRightCase();  [BUGGY]      JSType  rightType  =  getJSType(rightChild);  if  (validator.expectCanAssignTo(  t,  assign,  rightType,  leftType,       "assignment     "))  {  ensureTyped(t,  assign,  rightType);  }  else  {  ensureTyped(t,  assign);  }  }  [CLASS]  TypeCheck  [METHOD]  visitAssign  [RETURN_TYPE]  void  NodeTraversal  t  Node  assign  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  jsType  leftType  objectJsType  rightType  rvalueType  NodeTraversal  t  DiagnosticGroup  ALL_DIAGNOSTICS  CheckLevel  reportMissingOverride  reportUnknownTypes  Var  var  Node  assign  lvalue  object  object2  rightChild  rvalue  FunctionType  functionType  ScopeCreator  scopeCreator  String  OVERRIDING_PROTOTYPE_WITH_NON_OBJECT  functionPrivateName  message  property  property2  JSDocInfo  info  int  noTypeCheckSection  nullCount  typedCount  unknownCount  TypeValidator  validator  ObjectType  type  AbstractCompiler  compiler  JSTypeRegistry  typeRegistry  boolean  enterSection  externs  inExterns  report  reportMissingProperties  typeable  Scope  outerScope  topScope  DiagnosticType  BAD_DELETE  BAD_IMPLEMENTED_TYPE  BIT_OPERATION  CONFLICTING_EXTENDED_TYPE  CONFLICTING_IMPLEMENTED_TYPE  CONSTRUCTOR_NOT_CALLABLE  DETERMINISTIC_TEST  DETERMINISTIC_TEST_NO_RESULT  ENUM_DUP  ENUM_NOT_CONSTANT  EXPECTED_THIS_TYPE  FUNCTION_MASKS_VARIABLE  HIDDEN_INTERFACE_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY_MISMATCH  ILLEGAL_IMPLICIT_CAST  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE  INEXISTENT_ENUM_ELEMENT  INEXISTENT_PROPERTY  INTERFACE_FUNCTION_NOT_EMPTY  INTERFACE_METHOD_OVERRIDE  INVALID_INTERFACE_MEMBER_DECLARATION  MULTIPLE_VAR_DEF  NOT_A_CONSTRUCTOR  NOT_CALLABLE  UNEXPECTED_TOKEN  UNKNOWN_EXPR_TYPE  UNKNOWN_OVERRIDE  UNRESOLVED_TYPE  WRONG_ARGUMENT_COUNT  diagnosticType  InferJSDocInfo  inferJSDocInfo  	projects/Closure66/src/com/google/javascript/jscomp/TypeCheck.java	0.21320071635561041	939	939	2	replace	Node  rightChild  =  var.getRightCase();	  Node    rightChild    =    var.getLowerCase();    	non-compiled	[CE]  orphaned  case	30	None	replace
40	[BUG]  [BUGGY]  Node  rightChild  =  t.getScope().getRootNode(false,  leftType);  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      Var  var  =  t.getScope().getVar(lvalue.getString());  if  (var  !=  null)  {  if  (var.isTypeInferred())  {  return;  }  }  }  JSType  leftType  =  getJSType(lvalue);      [BUGGY]  Node  rightChild  =  t.getScope().getRootNode(false,  leftType);  [BUGGY]      JSType  rightType  =  getJSType(rightChild);  if  (validator.expectCanAssignTo(  t,  assign,  rightType,  leftType,       "assignment     "))  {  ensureTyped(t,  assign,  rightType);  }  else  {  ensureTyped(t,  assign);  }  }  [CLASS]  TypeCheck  [METHOD]  visitAssign  [RETURN_TYPE]  void  NodeTraversal  t  Node  assign  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  jsType  leftType  objectJsType  rightType  rvalueType  NodeTraversal  t  DiagnosticGroup  ALL_DIAGNOSTICS  CheckLevel  reportMissingOverride  reportUnknownTypes  Var  var  Node  assign  lvalue  object  object2  rightChild  rvalue  FunctionType  functionType  ScopeCreator  scopeCreator  String  OVERRIDING_PROTOTYPE_WITH_NON_OBJECT  functionPrivateName  message  property  property2  JSDocInfo  info  int  noTypeCheckSection  nullCount  typedCount  unknownCount  TypeValidator  validator  ObjectType  type  AbstractCompiler  compiler  JSTypeRegistry  typeRegistry  boolean  enterSection  externs  inExterns  report  reportMissingProperties  typeable  Scope  outerScope  topScope  DiagnosticType  BAD_DELETE  BAD_IMPLEMENTED_TYPE  BIT_OPERATION  CONFLICTING_EXTENDED_TYPE  CONFLICTING_IMPLEMENTED_TYPE  CONSTRUCTOR_NOT_CALLABLE  DETERMINISTIC_TEST  DETERMINISTIC_TEST_NO_RESULT  ENUM_DUP  ENUM_NOT_CONSTANT  EXPECTED_THIS_TYPE  FUNCTION_MASKS_VARIABLE  HIDDEN_INTERFACE_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY_MISMATCH  ILLEGAL_IMPLICIT_CAST  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE  INEXISTENT_ENUM_ELEMENT  INEXISTENT_PROPERTY  INTERFACE_FUNCTION_NOT_EMPTY  INTERFACE_METHOD_OVERRIDE  INVALID_INTERFACE_MEMBER_DECLARATION  MULTIPLE_VAR_DEF  NOT_A_CONSTRUCTOR  NOT_CALLABLE  UNEXPECTED_TOKEN  UNKNOWN_EXPR_TYPE  UNKNOWN_OVERRIDE  UNRESOLVED_TYPE  WRONG_ARGUMENT_COUNT  diagnosticType  InferJSDocInfo  inferJSDocInfo  	projects/Closure66/src/com/google/javascript/jscomp/TypeCheck.java	0.21320071635561041	939	939	2	replace	Node  rightChild  =  t.getScope().getRootNode(false,  leftType);	  Node    rightChild    =    t.getScope().getRootNode(true);    	non-compiled	[CE]  orphaned  case	37	None	replace
41	[BUG]  [BUGGY]  Node  rightChild  =  t.getScope().getRootNode(true,  leftType);  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      Var  var  =  t.getScope().getVar(lvalue.getString());  if  (var  !=  null)  {  if  (var.isTypeInferred())  {  return;  }  }  }  JSType  leftType  =  getJSType(lvalue);      [BUGGY]  Node  rightChild  =  t.getScope().getRootNode(true,  leftType);  [BUGGY]      JSType  rightType  =  getJSType(rightChild);  if  (validator.expectCanAssignTo(  t,  assign,  rightType,  leftType,       "assignment     "))  {  ensureTyped(t,  assign,  rightType);  }  else  {  ensureTyped(t,  assign);  }  }  [CLASS]  TypeCheck  [METHOD]  visitAssign  [RETURN_TYPE]  void  NodeTraversal  t  Node  assign  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  jsType  leftType  objectJsType  rightType  rvalueType  NodeTraversal  t  DiagnosticGroup  ALL_DIAGNOSTICS  CheckLevel  reportMissingOverride  reportUnknownTypes  Var  var  Node  assign  lvalue  object  object2  rightChild  rvalue  FunctionType  functionType  ScopeCreator  scopeCreator  String  OVERRIDING_PROTOTYPE_WITH_NON_OBJECT  functionPrivateName  message  property  property2  JSDocInfo  info  int  noTypeCheckSection  nullCount  typedCount  unknownCount  TypeValidator  validator  ObjectType  type  AbstractCompiler  compiler  JSTypeRegistry  typeRegistry  boolean  enterSection  externs  inExterns  report  reportMissingProperties  typeable  Scope  outerScope  topScope  DiagnosticType  BAD_DELETE  BAD_IMPLEMENTED_TYPE  BIT_OPERATION  CONFLICTING_EXTENDED_TYPE  CONFLICTING_IMPLEMENTED_TYPE  CONSTRUCTOR_NOT_CALLABLE  DETERMINISTIC_TEST  DETERMINISTIC_TEST_NO_RESULT  ENUM_DUP  ENUM_NOT_CONSTANT  EXPECTED_THIS_TYPE  FUNCTION_MASKS_VARIABLE  HIDDEN_INTERFACE_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY_MISMATCH  ILLEGAL_IMPLICIT_CAST  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE  INEXISTENT_ENUM_ELEMENT  INEXISTENT_PROPERTY  INTERFACE_FUNCTION_NOT_EMPTY  INTERFACE_METHOD_OVERRIDE  INVALID_INTERFACE_MEMBER_DECLARATION  MULTIPLE_VAR_DEF  NOT_A_CONSTRUCTOR  NOT_CALLABLE  UNEXPECTED_TOKEN  UNKNOWN_EXPR_TYPE  UNKNOWN_OVERRIDE  UNRESOLVED_TYPE  WRONG_ARGUMENT_COUNT  diagnosticType  InferJSDocInfo  inferJSDocInfo  	projects/Closure66/src/com/google/javascript/jscomp/TypeCheck.java	0.21320071635561041	939	939	2	replace	Node  rightChild  =  t.getScope().getRootNode(true,  leftType);	  Node    rightChild    =    t.getScope().getRootNode(true);    	non-compiled	[CE]  orphaned  case	37	None	replace
42	[BUG]  [BUGGY]  Node  rightChild  =  t.getScope().getRootNode(null,  true);  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      Var  var  =  t.getScope().getVar(lvalue.getString());  if  (var  !=  null)  {  if  (var.isTypeInferred())  {  return;  }  }  }  JSType  leftType  =  getJSType(lvalue);      [BUGGY]  Node  rightChild  =  t.getScope().getRootNode(null,  true);  [BUGGY]      JSType  rightType  =  getJSType(rightChild);  if  (validator.expectCanAssignTo(  t,  assign,  rightType,  leftType,       "assignment     "))  {  ensureTyped(t,  assign,  rightType);  }  else  {  ensureTyped(t,  assign);  }  }  [CLASS]  TypeCheck  [METHOD]  visitAssign  [RETURN_TYPE]  void  NodeTraversal  t  Node  assign  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  jsType  leftType  objectJsType  rightType  rvalueType  NodeTraversal  t  DiagnosticGroup  ALL_DIAGNOSTICS  CheckLevel  reportMissingOverride  reportUnknownTypes  Var  var  Node  assign  lvalue  object  object2  rightChild  rvalue  FunctionType  functionType  ScopeCreator  scopeCreator  String  OVERRIDING_PROTOTYPE_WITH_NON_OBJECT  functionPrivateName  message  property  property2  JSDocInfo  info  int  noTypeCheckSection  nullCount  typedCount  unknownCount  TypeValidator  validator  ObjectType  type  AbstractCompiler  compiler  JSTypeRegistry  typeRegistry  boolean  enterSection  externs  inExterns  report  reportMissingProperties  typeable  Scope  outerScope  topScope  DiagnosticType  BAD_DELETE  BAD_IMPLEMENTED_TYPE  BIT_OPERATION  CONFLICTING_EXTENDED_TYPE  CONFLICTING_IMPLEMENTED_TYPE  CONSTRUCTOR_NOT_CALLABLE  DETERMINISTIC_TEST  DETERMINISTIC_TEST_NO_RESULT  ENUM_DUP  ENUM_NOT_CONSTANT  EXPECTED_THIS_TYPE  FUNCTION_MASKS_VARIABLE  HIDDEN_INTERFACE_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY_MISMATCH  ILLEGAL_IMPLICIT_CAST  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE  INEXISTENT_ENUM_ELEMENT  INEXISTENT_PROPERTY  INTERFACE_FUNCTION_NOT_EMPTY  INTERFACE_METHOD_OVERRIDE  INVALID_INTERFACE_MEMBER_DECLARATION  MULTIPLE_VAR_DEF  NOT_A_CONSTRUCTOR  NOT_CALLABLE  UNEXPECTED_TOKEN  UNKNOWN_EXPR_TYPE  UNKNOWN_OVERRIDE  UNRESOLVED_TYPE  WRONG_ARGUMENT_COUNT  diagnosticType  InferJSDocInfo  inferJSDocInfo  	projects/Closure66/src/com/google/javascript/jscomp/TypeCheck.java	0.21320071635561041	939	939	2	replace	Node  rightChild  =  t.getScope().getRootNode(null,  true);	  Node    rightChild    =    t.getScope().getRootNode(true);    	non-compiled	[CE]  orphaned  case	37	None	replace
43	[BUG]  [BUGGY]  Node  rightChild  =  t.getScope().getRootNode(false,  true);  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      Var  var  =  t.getScope().getVar(lvalue.getString());  if  (var  !=  null)  {  if  (var.isTypeInferred())  {  return;  }  }  }  JSType  leftType  =  getJSType(lvalue);      [BUGGY]  Node  rightChild  =  t.getScope().getRootNode(false,  true);  [BUGGY]      JSType  rightType  =  getJSType(rightChild);  if  (validator.expectCanAssignTo(  t,  assign,  rightType,  leftType,       "assignment     "))  {  ensureTyped(t,  assign,  rightType);  }  else  {  ensureTyped(t,  assign);  }  }  [CLASS]  TypeCheck  [METHOD]  visitAssign  [RETURN_TYPE]  void  NodeTraversal  t  Node  assign  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  jsType  leftType  objectJsType  rightType  rvalueType  NodeTraversal  t  DiagnosticGroup  ALL_DIAGNOSTICS  CheckLevel  reportMissingOverride  reportUnknownTypes  Var  var  Node  assign  lvalue  object  object2  rightChild  rvalue  FunctionType  functionType  ScopeCreator  scopeCreator  String  OVERRIDING_PROTOTYPE_WITH_NON_OBJECT  functionPrivateName  message  property  property2  JSDocInfo  info  int  noTypeCheckSection  nullCount  typedCount  unknownCount  TypeValidator  validator  ObjectType  type  AbstractCompiler  compiler  JSTypeRegistry  typeRegistry  boolean  enterSection  externs  inExterns  report  reportMissingProperties  typeable  Scope  outerScope  topScope  DiagnosticType  BAD_DELETE  BAD_IMPLEMENTED_TYPE  BIT_OPERATION  CONFLICTING_EXTENDED_TYPE  CONFLICTING_IMPLEMENTED_TYPE  CONSTRUCTOR_NOT_CALLABLE  DETERMINISTIC_TEST  DETERMINISTIC_TEST_NO_RESULT  ENUM_DUP  ENUM_NOT_CONSTANT  EXPECTED_THIS_TYPE  FUNCTION_MASKS_VARIABLE  HIDDEN_INTERFACE_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY_MISMATCH  ILLEGAL_IMPLICIT_CAST  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE  INEXISTENT_ENUM_ELEMENT  INEXISTENT_PROPERTY  INTERFACE_FUNCTION_NOT_EMPTY  INTERFACE_METHOD_OVERRIDE  INVALID_INTERFACE_MEMBER_DECLARATION  MULTIPLE_VAR_DEF  NOT_A_CONSTRUCTOR  NOT_CALLABLE  UNEXPECTED_TOKEN  UNKNOWN_EXPR_TYPE  UNKNOWN_OVERRIDE  UNRESOLVED_TYPE  WRONG_ARGUMENT_COUNT  diagnosticType  InferJSDocInfo  inferJSDocInfo  	projects/Closure66/src/com/google/javascript/jscomp/TypeCheck.java	0.21320071635561041	939	939	2	replace	Node  rightChild  =  t.getScope().getRootNode(false,  true);	  Node    rightChild    =    t.getScope().getRootNode(true);    	non-compiled	[CE]  orphaned  case	37	None	replace
44	[BUG]  [BUGGY]  Node  rightChild  =  t.getScope().getOwnSlot(leftType);  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      Var  var  =  t.getScope().getVar(lvalue.getString());  if  (var  !=  null)  {  if  (var.isTypeInferred())  {  return;  }  }  }  JSType  leftType  =  getJSType(lvalue);      [BUGGY]  Node  rightChild  =  t.getScope().getOwnSlot(leftType);  [BUGGY]      JSType  rightType  =  getJSType(rightChild);  if  (validator.expectCanAssignTo(  t,  assign,  rightType,  leftType,       "assignment     "))  {  ensureTyped(t,  assign,  rightType);  }  else  {  ensureTyped(t,  assign);  }  }  [CLASS]  TypeCheck  [METHOD]  visitAssign  [RETURN_TYPE]  void  NodeTraversal  t  Node  assign  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  jsType  leftType  objectJsType  rightType  rvalueType  NodeTraversal  t  DiagnosticGroup  ALL_DIAGNOSTICS  CheckLevel  reportMissingOverride  reportUnknownTypes  Var  var  Node  assign  lvalue  object  object2  rightChild  rvalue  FunctionType  functionType  ScopeCreator  scopeCreator  String  OVERRIDING_PROTOTYPE_WITH_NON_OBJECT  functionPrivateName  message  property  property2  JSDocInfo  info  int  noTypeCheckSection  nullCount  typedCount  unknownCount  TypeValidator  validator  ObjectType  type  AbstractCompiler  compiler  JSTypeRegistry  typeRegistry  boolean  enterSection  externs  inExterns  report  reportMissingProperties  typeable  Scope  outerScope  topScope  DiagnosticType  BAD_DELETE  BAD_IMPLEMENTED_TYPE  BIT_OPERATION  CONFLICTING_EXTENDED_TYPE  CONFLICTING_IMPLEMENTED_TYPE  CONSTRUCTOR_NOT_CALLABLE  DETERMINISTIC_TEST  DETERMINISTIC_TEST_NO_RESULT  ENUM_DUP  ENUM_NOT_CONSTANT  EXPECTED_THIS_TYPE  FUNCTION_MASKS_VARIABLE  HIDDEN_INTERFACE_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY_MISMATCH  ILLEGAL_IMPLICIT_CAST  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE  INEXISTENT_ENUM_ELEMENT  INEXISTENT_PROPERTY  INTERFACE_FUNCTION_NOT_EMPTY  INTERFACE_METHOD_OVERRIDE  INVALID_INTERFACE_MEMBER_DECLARATION  MULTIPLE_VAR_DEF  NOT_A_CONSTRUCTOR  NOT_CALLABLE  UNEXPECTED_TOKEN  UNKNOWN_EXPR_TYPE  UNKNOWN_OVERRIDE  UNRESOLVED_TYPE  WRONG_ARGUMENT_COUNT  diagnosticType  InferJSDocInfo  inferJSDocInfo  	projects/Closure66/src/com/google/javascript/jscomp/TypeCheck.java	0.21320071635561041	939	939	2	replace	Node  rightChild  =  t.getScope().getOwnSlot(leftType);	  Node    rightChild    =    t.getScope().getOwnSlot(lvalue);    	non-compiled	[CE]  orphaned  case	48	None	replace
45	[BUG]  [BUGGY]  Node  rightChild  =  t.getScope().getOwnSlot(lvalue,  leftType);  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      Var  var  =  t.getScope().getVar(lvalue.getString());  if  (var  !=  null)  {  if  (var.isTypeInferred())  {  return;  }  }  }  JSType  leftType  =  getJSType(lvalue);      [BUGGY]  Node  rightChild  =  t.getScope().getOwnSlot(lvalue,  leftType);  [BUGGY]      JSType  rightType  =  getJSType(rightChild);  if  (validator.expectCanAssignTo(  t,  assign,  rightType,  leftType,       "assignment     "))  {  ensureTyped(t,  assign,  rightType);  }  else  {  ensureTyped(t,  assign);  }  }  [CLASS]  TypeCheck  [METHOD]  visitAssign  [RETURN_TYPE]  void  NodeTraversal  t  Node  assign  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  jsType  leftType  objectJsType  rightType  rvalueType  NodeTraversal  t  DiagnosticGroup  ALL_DIAGNOSTICS  CheckLevel  reportMissingOverride  reportUnknownTypes  Var  var  Node  assign  lvalue  object  object2  rightChild  rvalue  FunctionType  functionType  ScopeCreator  scopeCreator  String  OVERRIDING_PROTOTYPE_WITH_NON_OBJECT  functionPrivateName  message  property  property2  JSDocInfo  info  int  noTypeCheckSection  nullCount  typedCount  unknownCount  TypeValidator  validator  ObjectType  type  AbstractCompiler  compiler  JSTypeRegistry  typeRegistry  boolean  enterSection  externs  inExterns  report  reportMissingProperties  typeable  Scope  outerScope  topScope  DiagnosticType  BAD_DELETE  BAD_IMPLEMENTED_TYPE  BIT_OPERATION  CONFLICTING_EXTENDED_TYPE  CONFLICTING_IMPLEMENTED_TYPE  CONSTRUCTOR_NOT_CALLABLE  DETERMINISTIC_TEST  DETERMINISTIC_TEST_NO_RESULT  ENUM_DUP  ENUM_NOT_CONSTANT  EXPECTED_THIS_TYPE  FUNCTION_MASKS_VARIABLE  HIDDEN_INTERFACE_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY_MISMATCH  ILLEGAL_IMPLICIT_CAST  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE  INEXISTENT_ENUM_ELEMENT  INEXISTENT_PROPERTY  INTERFACE_FUNCTION_NOT_EMPTY  INTERFACE_METHOD_OVERRIDE  INVALID_INTERFACE_MEMBER_DECLARATION  MULTIPLE_VAR_DEF  NOT_A_CONSTRUCTOR  NOT_CALLABLE  UNEXPECTED_TOKEN  UNKNOWN_EXPR_TYPE  UNKNOWN_OVERRIDE  UNRESOLVED_TYPE  WRONG_ARGUMENT_COUNT  diagnosticType  InferJSDocInfo  inferJSDocInfo  	projects/Closure66/src/com/google/javascript/jscomp/TypeCheck.java	0.21320071635561041	939	939	2	replace	Node  rightChild  =  t.getScope().getOwnSlot(lvalue,  leftType);	  Node    rightChild    =    t.getScope().getOwnSlot(lvalue);    	non-compiled	[CE]  orphaned  case	48	None	replace
46	[BUG]  [BUGGY]  Node  rightChild  =  t.getScope().getOwnSlot(rvalue);  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      Var  var  =  t.getScope().getVar(lvalue.getString());  if  (var  !=  null)  {  if  (var.isTypeInferred())  {  return;  }  }  }  JSType  leftType  =  getJSType(lvalue);      [BUGGY]  Node  rightChild  =  t.getScope().getOwnSlot(rvalue);  [BUGGY]      JSType  rightType  =  getJSType(rightChild);  if  (validator.expectCanAssignTo(  t,  assign,  rightType,  leftType,       "assignment     "))  {  ensureTyped(t,  assign,  rightType);  }  else  {  ensureTyped(t,  assign);  }  }  [CLASS]  TypeCheck  [METHOD]  visitAssign  [RETURN_TYPE]  void  NodeTraversal  t  Node  assign  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  jsType  leftType  objectJsType  rightType  rvalueType  NodeTraversal  t  DiagnosticGroup  ALL_DIAGNOSTICS  CheckLevel  reportMissingOverride  reportUnknownTypes  Var  var  Node  assign  lvalue  object  object2  rightChild  rvalue  FunctionType  functionType  ScopeCreator  scopeCreator  String  OVERRIDING_PROTOTYPE_WITH_NON_OBJECT  functionPrivateName  message  property  property2  JSDocInfo  info  int  noTypeCheckSection  nullCount  typedCount  unknownCount  TypeValidator  validator  ObjectType  type  AbstractCompiler  compiler  JSTypeRegistry  typeRegistry  boolean  enterSection  externs  inExterns  report  reportMissingProperties  typeable  Scope  outerScope  topScope  DiagnosticType  BAD_DELETE  BAD_IMPLEMENTED_TYPE  BIT_OPERATION  CONFLICTING_EXTENDED_TYPE  CONFLICTING_IMPLEMENTED_TYPE  CONSTRUCTOR_NOT_CALLABLE  DETERMINISTIC_TEST  DETERMINISTIC_TEST_NO_RESULT  ENUM_DUP  ENUM_NOT_CONSTANT  EXPECTED_THIS_TYPE  FUNCTION_MASKS_VARIABLE  HIDDEN_INTERFACE_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY_MISMATCH  ILLEGAL_IMPLICIT_CAST  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE  INEXISTENT_ENUM_ELEMENT  INEXISTENT_PROPERTY  INTERFACE_FUNCTION_NOT_EMPTY  INTERFACE_METHOD_OVERRIDE  INVALID_INTERFACE_MEMBER_DECLARATION  MULTIPLE_VAR_DEF  NOT_A_CONSTRUCTOR  NOT_CALLABLE  UNEXPECTED_TOKEN  UNKNOWN_EXPR_TYPE  UNKNOWN_OVERRIDE  UNRESOLVED_TYPE  WRONG_ARGUMENT_COUNT  diagnosticType  InferJSDocInfo  inferJSDocInfo  	projects/Closure66/src/com/google/javascript/jscomp/TypeCheck.java	0.21320071635561041	939	939	2	replace	Node  rightChild  =  t.getScope().getOwnSlot(rvalue);	  Node    rightChild    =    t.getScope().getOwnSlot(lvalue);    	non-compiled	[CE]  orphaned  case	48	None	replace
47	[BUG]  [BUGGY]  Node  rightChild  =  t.getScope().getOwnSlot(rightType);  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      Var  var  =  t.getScope().getVar(lvalue.getString());  if  (var  !=  null)  {  if  (var.isTypeInferred())  {  return;  }  }  }  JSType  leftType  =  getJSType(lvalue);      [BUGGY]  Node  rightChild  =  t.getScope().getOwnSlot(rightType);  [BUGGY]      JSType  rightType  =  getJSType(rightChild);  if  (validator.expectCanAssignTo(  t,  assign,  rightType,  leftType,       "assignment     "))  {  ensureTyped(t,  assign,  rightType);  }  else  {  ensureTyped(t,  assign);  }  }  [CLASS]  TypeCheck  [METHOD]  visitAssign  [RETURN_TYPE]  void  NodeTraversal  t  Node  assign  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  jsType  leftType  objectJsType  rightType  rvalueType  NodeTraversal  t  DiagnosticGroup  ALL_DIAGNOSTICS  CheckLevel  reportMissingOverride  reportUnknownTypes  Var  var  Node  assign  lvalue  object  object2  rightChild  rvalue  FunctionType  functionType  ScopeCreator  scopeCreator  String  OVERRIDING_PROTOTYPE_WITH_NON_OBJECT  functionPrivateName  message  property  property2  JSDocInfo  info  int  noTypeCheckSection  nullCount  typedCount  unknownCount  TypeValidator  validator  ObjectType  type  AbstractCompiler  compiler  JSTypeRegistry  typeRegistry  boolean  enterSection  externs  inExterns  report  reportMissingProperties  typeable  Scope  outerScope  topScope  DiagnosticType  BAD_DELETE  BAD_IMPLEMENTED_TYPE  BIT_OPERATION  CONFLICTING_EXTENDED_TYPE  CONFLICTING_IMPLEMENTED_TYPE  CONSTRUCTOR_NOT_CALLABLE  DETERMINISTIC_TEST  DETERMINISTIC_TEST_NO_RESULT  ENUM_DUP  ENUM_NOT_CONSTANT  EXPECTED_THIS_TYPE  FUNCTION_MASKS_VARIABLE  HIDDEN_INTERFACE_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY_MISMATCH  ILLEGAL_IMPLICIT_CAST  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE  INEXISTENT_ENUM_ELEMENT  INEXISTENT_PROPERTY  INTERFACE_FUNCTION_NOT_EMPTY  INTERFACE_METHOD_OVERRIDE  INVALID_INTERFACE_MEMBER_DECLARATION  MULTIPLE_VAR_DEF  NOT_A_CONSTRUCTOR  NOT_CALLABLE  UNEXPECTED_TOKEN  UNKNOWN_EXPR_TYPE  UNKNOWN_OVERRIDE  UNRESOLVED_TYPE  WRONG_ARGUMENT_COUNT  diagnosticType  InferJSDocInfo  inferJSDocInfo  	projects/Closure66/src/com/google/javascript/jscomp/TypeCheck.java	0.21320071635561041	939	939	2	replace	Node  rightChild  =  t.getScope().getOwnSlot(rightType);	  Node    rightChild    =    t.getScope().getOwnSlot(lvalue);    	non-compiled	[CE]  orphaned  case	48	None	replace
48	[BUG]  [BUGGY]  Node  rightChild  =  t.getScope().getOwnSlot(lvalue.toString());  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      Var  var  =  t.getScope().getVar(lvalue.getString());  if  (var  !=  null)  {  if  (var.isTypeInferred())  {  return;  }  }  }  JSType  leftType  =  getJSType(lvalue);      [BUGGY]  Node  rightChild  =  t.getScope().getOwnSlot(lvalue.toString());  [BUGGY]      JSType  rightType  =  getJSType(rightChild);  if  (validator.expectCanAssignTo(  t,  assign,  rightType,  leftType,       "assignment     "))  {  ensureTyped(t,  assign,  rightType);  }  else  {  ensureTyped(t,  assign);  }  }  [CLASS]  TypeCheck  [METHOD]  visitAssign  [RETURN_TYPE]  void  NodeTraversal  t  Node  assign  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  jsType  leftType  objectJsType  rightType  rvalueType  NodeTraversal  t  DiagnosticGroup  ALL_DIAGNOSTICS  CheckLevel  reportMissingOverride  reportUnknownTypes  Var  var  Node  assign  lvalue  object  object2  rightChild  rvalue  FunctionType  functionType  ScopeCreator  scopeCreator  String  OVERRIDING_PROTOTYPE_WITH_NON_OBJECT  functionPrivateName  message  property  property2  JSDocInfo  info  int  noTypeCheckSection  nullCount  typedCount  unknownCount  TypeValidator  validator  ObjectType  type  AbstractCompiler  compiler  JSTypeRegistry  typeRegistry  boolean  enterSection  externs  inExterns  report  reportMissingProperties  typeable  Scope  outerScope  topScope  DiagnosticType  BAD_DELETE  BAD_IMPLEMENTED_TYPE  BIT_OPERATION  CONFLICTING_EXTENDED_TYPE  CONFLICTING_IMPLEMENTED_TYPE  CONSTRUCTOR_NOT_CALLABLE  DETERMINISTIC_TEST  DETERMINISTIC_TEST_NO_RESULT  ENUM_DUP  ENUM_NOT_CONSTANT  EXPECTED_THIS_TYPE  FUNCTION_MASKS_VARIABLE  HIDDEN_INTERFACE_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY_MISMATCH  ILLEGAL_IMPLICIT_CAST  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE  INEXISTENT_ENUM_ELEMENT  INEXISTENT_PROPERTY  INTERFACE_FUNCTION_NOT_EMPTY  INTERFACE_METHOD_OVERRIDE  INVALID_INTERFACE_MEMBER_DECLARATION  MULTIPLE_VAR_DEF  NOT_A_CONSTRUCTOR  NOT_CALLABLE  UNEXPECTED_TOKEN  UNKNOWN_EXPR_TYPE  UNKNOWN_OVERRIDE  UNRESOLVED_TYPE  WRONG_ARGUMENT_COUNT  diagnosticType  InferJSDocInfo  inferJSDocInfo  	projects/Closure66/src/com/google/javascript/jscomp/TypeCheck.java	0.21320071635561041	939	939	2	replace	Node  rightChild  =  t.getScope().getOwnSlot(lvalue.toString());	  Node    rightChild    =    t.getScope().getOwnSlot(lvalue);    	non-compiled	[CE]  orphaned  case	48	None	replace
49	[BUG]  [BUGGY]  Node  rightChild  =  t.getScope().getRightNode(lvalue.getString());  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      Var  var  =  t.getScope().getVar(lvalue.getString());  if  (var  !=  null)  {  if  (var.isTypeInferred())  {  return;  }  }  }  JSType  leftType  =  getJSType(lvalue);      [BUGGY]  Node  rightChild  =  t.getScope().getRightNode(lvalue.getString());  [BUGGY]      JSType  rightType  =  getJSType(rightChild);  if  (validator.expectCanAssignTo(  t,  assign,  rightType,  leftType,       "assignment     "))  {  ensureTyped(t,  assign,  rightType);  }  else  {  ensureTyped(t,  assign);  }  }  [CLASS]  TypeCheck  [METHOD]  visitAssign  [RETURN_TYPE]  void  NodeTraversal  t  Node  assign  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  jsType  leftType  objectJsType  rightType  rvalueType  NodeTraversal  t  DiagnosticGroup  ALL_DIAGNOSTICS  CheckLevel  reportMissingOverride  reportUnknownTypes  Var  var  Node  assign  lvalue  object  object2  rightChild  rvalue  FunctionType  functionType  ScopeCreator  scopeCreator  String  OVERRIDING_PROTOTYPE_WITH_NON_OBJECT  functionPrivateName  message  property  property2  JSDocInfo  info  int  noTypeCheckSection  nullCount  typedCount  unknownCount  TypeValidator  validator  ObjectType  type  AbstractCompiler  compiler  JSTypeRegistry  typeRegistry  boolean  enterSection  externs  inExterns  report  reportMissingProperties  typeable  Scope  outerScope  topScope  DiagnosticType  BAD_DELETE  BAD_IMPLEMENTED_TYPE  BIT_OPERATION  CONFLICTING_EXTENDED_TYPE  CONFLICTING_IMPLEMENTED_TYPE  CONSTRUCTOR_NOT_CALLABLE  DETERMINISTIC_TEST  DETERMINISTIC_TEST_NO_RESULT  ENUM_DUP  ENUM_NOT_CONSTANT  EXPECTED_THIS_TYPE  FUNCTION_MASKS_VARIABLE  HIDDEN_INTERFACE_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY_MISMATCH  ILLEGAL_IMPLICIT_CAST  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE  INEXISTENT_ENUM_ELEMENT  INEXISTENT_PROPERTY  INTERFACE_FUNCTION_NOT_EMPTY  INTERFACE_METHOD_OVERRIDE  INVALID_INTERFACE_MEMBER_DECLARATION  MULTIPLE_VAR_DEF  NOT_A_CONSTRUCTOR  NOT_CALLABLE  UNEXPECTED_TOKEN  UNKNOWN_EXPR_TYPE  UNKNOWN_OVERRIDE  UNRESOLVED_TYPE  WRONG_ARGUMENT_COUNT  diagnosticType  InferJSDocInfo  inferJSDocInfo  	projects/Closure66/src/com/google/javascript/jscomp/TypeCheck.java	0.21320071635561041	939	939	2	replace	Node  rightChild  =  t.getScope().getRightNode(lvalue.getString());	  Node    rightChild    =    t.getScope().getRightNode(lvalue);    	non-compiled	[CE]  orphaned  case	36	None	replace
50	[BUG]  [BUGGY]  Node  rightChild  =  t.getScope().getRightNode(assign);  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      Var  var  =  t.getScope().getVar(lvalue.getString());  if  (var  !=  null)  {  if  (var.isTypeInferred())  {  return;  }  }  }  JSType  leftType  =  getJSType(lvalue);      [BUGGY]  Node  rightChild  =  t.getScope().getRightNode(assign);  [BUGGY]      JSType  rightType  =  getJSType(rightChild);  if  (validator.expectCanAssignTo(  t,  assign,  rightType,  leftType,       "assignment     "))  {  ensureTyped(t,  assign,  rightType);  }  else  {  ensureTyped(t,  assign);  }  }  [CLASS]  TypeCheck  [METHOD]  visitAssign  [RETURN_TYPE]  void  NodeTraversal  t  Node  assign  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  jsType  leftType  objectJsType  rightType  rvalueType  NodeTraversal  t  DiagnosticGroup  ALL_DIAGNOSTICS  CheckLevel  reportMissingOverride  reportUnknownTypes  Var  var  Node  assign  lvalue  object  object2  rightChild  rvalue  FunctionType  functionType  ScopeCreator  scopeCreator  String  OVERRIDING_PROTOTYPE_WITH_NON_OBJECT  functionPrivateName  message  property  property2  JSDocInfo  info  int  noTypeCheckSection  nullCount  typedCount  unknownCount  TypeValidator  validator  ObjectType  type  AbstractCompiler  compiler  JSTypeRegistry  typeRegistry  boolean  enterSection  externs  inExterns  report  reportMissingProperties  typeable  Scope  outerScope  topScope  DiagnosticType  BAD_DELETE  BAD_IMPLEMENTED_TYPE  BIT_OPERATION  CONFLICTING_EXTENDED_TYPE  CONFLICTING_IMPLEMENTED_TYPE  CONSTRUCTOR_NOT_CALLABLE  DETERMINISTIC_TEST  DETERMINISTIC_TEST_NO_RESULT  ENUM_DUP  ENUM_NOT_CONSTANT  EXPECTED_THIS_TYPE  FUNCTION_MASKS_VARIABLE  HIDDEN_INTERFACE_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY_MISMATCH  ILLEGAL_IMPLICIT_CAST  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE  INEXISTENT_ENUM_ELEMENT  INEXISTENT_PROPERTY  INTERFACE_FUNCTION_NOT_EMPTY  INTERFACE_METHOD_OVERRIDE  INVALID_INTERFACE_MEMBER_DECLARATION  MULTIPLE_VAR_DEF  NOT_A_CONSTRUCTOR  NOT_CALLABLE  UNEXPECTED_TOKEN  UNKNOWN_EXPR_TYPE  UNKNOWN_OVERRIDE  UNRESOLVED_TYPE  WRONG_ARGUMENT_COUNT  diagnosticType  InferJSDocInfo  inferJSDocInfo  	projects/Closure66/src/com/google/javascript/jscomp/TypeCheck.java	0.21320071635561041	939	939	2	replace	Node  rightChild  =  t.getScope().getRightNode(assign);	  Node    rightChild    =    t.getScope().getRightNode(lvalue);    	non-compiled	[CE]  orphaned  case	36	None	replace
51	[BUG]  [BUGGY]  Node  rightChild  =  t.getScope().getRightNode(lvalue,  leftType);  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      Var  var  =  t.getScope().getVar(lvalue.getString());  if  (var  !=  null)  {  if  (var.isTypeInferred())  {  return;  }  }  }  JSType  leftType  =  getJSType(lvalue);      [BUGGY]  Node  rightChild  =  t.getScope().getRightNode(lvalue,  leftType);  [BUGGY]      JSType  rightType  =  getJSType(rightChild);  if  (validator.expectCanAssignTo(  t,  assign,  rightType,  leftType,       "assignment     "))  {  ensureTyped(t,  assign,  rightType);  }  else  {  ensureTyped(t,  assign);  }  }  [CLASS]  TypeCheck  [METHOD]  visitAssign  [RETURN_TYPE]  void  NodeTraversal  t  Node  assign  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  jsType  leftType  objectJsType  rightType  rvalueType  NodeTraversal  t  DiagnosticGroup  ALL_DIAGNOSTICS  CheckLevel  reportMissingOverride  reportUnknownTypes  Var  var  Node  assign  lvalue  object  object2  rightChild  rvalue  FunctionType  functionType  ScopeCreator  scopeCreator  String  OVERRIDING_PROTOTYPE_WITH_NON_OBJECT  functionPrivateName  message  property  property2  JSDocInfo  info  int  noTypeCheckSection  nullCount  typedCount  unknownCount  TypeValidator  validator  ObjectType  type  AbstractCompiler  compiler  JSTypeRegistry  typeRegistry  boolean  enterSection  externs  inExterns  report  reportMissingProperties  typeable  Scope  outerScope  topScope  DiagnosticType  BAD_DELETE  BAD_IMPLEMENTED_TYPE  BIT_OPERATION  CONFLICTING_EXTENDED_TYPE  CONFLICTING_IMPLEMENTED_TYPE  CONSTRUCTOR_NOT_CALLABLE  DETERMINISTIC_TEST  DETERMINISTIC_TEST_NO_RESULT  ENUM_DUP  ENUM_NOT_CONSTANT  EXPECTED_THIS_TYPE  FUNCTION_MASKS_VARIABLE  HIDDEN_INTERFACE_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY_MISMATCH  ILLEGAL_IMPLICIT_CAST  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE  INEXISTENT_ENUM_ELEMENT  INEXISTENT_PROPERTY  INTERFACE_FUNCTION_NOT_EMPTY  INTERFACE_METHOD_OVERRIDE  INVALID_INTERFACE_MEMBER_DECLARATION  MULTIPLE_VAR_DEF  NOT_A_CONSTRUCTOR  NOT_CALLABLE  UNEXPECTED_TOKEN  UNKNOWN_EXPR_TYPE  UNKNOWN_OVERRIDE  UNRESOLVED_TYPE  WRONG_ARGUMENT_COUNT  diagnosticType  InferJSDocInfo  inferJSDocInfo  	projects/Closure66/src/com/google/javascript/jscomp/TypeCheck.java	0.21320071635561041	939	939	2	replace	Node  rightChild  =  t.getScope().getRightNode(lvalue,  leftType);	  Node    rightChild    =    t.getScope().getRightNode(lvalue);    	non-compiled	[CE]  orphaned  case	36	None	replace
52	[BUG]  [BUGGY]  Node  rightChild  =  t.getScope().getRightNode(rvalue);  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      Var  var  =  t.getScope().getVar(lvalue.getString());  if  (var  !=  null)  {  if  (var.isTypeInferred())  {  return;  }  }  }  JSType  leftType  =  getJSType(lvalue);      [BUGGY]  Node  rightChild  =  t.getScope().getRightNode(rvalue);  [BUGGY]      JSType  rightType  =  getJSType(rightChild);  if  (validator.expectCanAssignTo(  t,  assign,  rightType,  leftType,       "assignment     "))  {  ensureTyped(t,  assign,  rightType);  }  else  {  ensureTyped(t,  assign);  }  }  [CLASS]  TypeCheck  [METHOD]  visitAssign  [RETURN_TYPE]  void  NodeTraversal  t  Node  assign  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  jsType  leftType  objectJsType  rightType  rvalueType  NodeTraversal  t  DiagnosticGroup  ALL_DIAGNOSTICS  CheckLevel  reportMissingOverride  reportUnknownTypes  Var  var  Node  assign  lvalue  object  object2  rightChild  rvalue  FunctionType  functionType  ScopeCreator  scopeCreator  String  OVERRIDING_PROTOTYPE_WITH_NON_OBJECT  functionPrivateName  message  property  property2  JSDocInfo  info  int  noTypeCheckSection  nullCount  typedCount  unknownCount  TypeValidator  validator  ObjectType  type  AbstractCompiler  compiler  JSTypeRegistry  typeRegistry  boolean  enterSection  externs  inExterns  report  reportMissingProperties  typeable  Scope  outerScope  topScope  DiagnosticType  BAD_DELETE  BAD_IMPLEMENTED_TYPE  BIT_OPERATION  CONFLICTING_EXTENDED_TYPE  CONFLICTING_IMPLEMENTED_TYPE  CONSTRUCTOR_NOT_CALLABLE  DETERMINISTIC_TEST  DETERMINISTIC_TEST_NO_RESULT  ENUM_DUP  ENUM_NOT_CONSTANT  EXPECTED_THIS_TYPE  FUNCTION_MASKS_VARIABLE  HIDDEN_INTERFACE_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY_MISMATCH  ILLEGAL_IMPLICIT_CAST  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE  INEXISTENT_ENUM_ELEMENT  INEXISTENT_PROPERTY  INTERFACE_FUNCTION_NOT_EMPTY  INTERFACE_METHOD_OVERRIDE  INVALID_INTERFACE_MEMBER_DECLARATION  MULTIPLE_VAR_DEF  NOT_A_CONSTRUCTOR  NOT_CALLABLE  UNEXPECTED_TOKEN  UNKNOWN_EXPR_TYPE  UNKNOWN_OVERRIDE  UNRESOLVED_TYPE  WRONG_ARGUMENT_COUNT  diagnosticType  InferJSDocInfo  inferJSDocInfo  	projects/Closure66/src/com/google/javascript/jscomp/TypeCheck.java	0.21320071635561041	939	939	2	replace	Node  rightChild  =  t.getScope().getRightNode(rvalue);	  Node    rightChild    =    t.getScope().getRightNode(lvalue);    	non-compiled	[CE]  orphaned  case	36	None	replace
53	[BUG]  [BUGGY]  Node  rightChild  =  t.getScope().getRightNode(leftType);  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      Var  var  =  t.getScope().getVar(lvalue.getString());  if  (var  !=  null)  {  if  (var.isTypeInferred())  {  return;  }  }  }  JSType  leftType  =  getJSType(lvalue);      [BUGGY]  Node  rightChild  =  t.getScope().getRightNode(leftType);  [BUGGY]      JSType  rightType  =  getJSType(rightChild);  if  (validator.expectCanAssignTo(  t,  assign,  rightType,  leftType,       "assignment     "))  {  ensureTyped(t,  assign,  rightType);  }  else  {  ensureTyped(t,  assign);  }  }  [CLASS]  TypeCheck  [METHOD]  visitAssign  [RETURN_TYPE]  void  NodeTraversal  t  Node  assign  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  jsType  leftType  objectJsType  rightType  rvalueType  NodeTraversal  t  DiagnosticGroup  ALL_DIAGNOSTICS  CheckLevel  reportMissingOverride  reportUnknownTypes  Var  var  Node  assign  lvalue  object  object2  rightChild  rvalue  FunctionType  functionType  ScopeCreator  scopeCreator  String  OVERRIDING_PROTOTYPE_WITH_NON_OBJECT  functionPrivateName  message  property  property2  JSDocInfo  info  int  noTypeCheckSection  nullCount  typedCount  unknownCount  TypeValidator  validator  ObjectType  type  AbstractCompiler  compiler  JSTypeRegistry  typeRegistry  boolean  enterSection  externs  inExterns  report  reportMissingProperties  typeable  Scope  outerScope  topScope  DiagnosticType  BAD_DELETE  BAD_IMPLEMENTED_TYPE  BIT_OPERATION  CONFLICTING_EXTENDED_TYPE  CONFLICTING_IMPLEMENTED_TYPE  CONSTRUCTOR_NOT_CALLABLE  DETERMINISTIC_TEST  DETERMINISTIC_TEST_NO_RESULT  ENUM_DUP  ENUM_NOT_CONSTANT  EXPECTED_THIS_TYPE  FUNCTION_MASKS_VARIABLE  HIDDEN_INTERFACE_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY_MISMATCH  ILLEGAL_IMPLICIT_CAST  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE  INEXISTENT_ENUM_ELEMENT  INEXISTENT_PROPERTY  INTERFACE_FUNCTION_NOT_EMPTY  INTERFACE_METHOD_OVERRIDE  INVALID_INTERFACE_MEMBER_DECLARATION  MULTIPLE_VAR_DEF  NOT_A_CONSTRUCTOR  NOT_CALLABLE  UNEXPECTED_TOKEN  UNKNOWN_EXPR_TYPE  UNKNOWN_OVERRIDE  UNRESOLVED_TYPE  WRONG_ARGUMENT_COUNT  diagnosticType  InferJSDocInfo  inferJSDocInfo  	projects/Closure66/src/com/google/javascript/jscomp/TypeCheck.java	0.21320071635561041	939	939	2	replace	Node  rightChild  =  t.getScope().getRightNode(leftType);	  Node    rightChild    =    t.getScope().getRightNode(lvalue);    	non-compiled	[CE]  orphaned  case	36	None	replace
54	[BUG]  [BUGGY]  Node  rightChild  =  t.getScope().getRightNode(var);  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      Var  var  =  t.getScope().getVar(lvalue.getString());  if  (var  !=  null)  {  if  (var.isTypeInferred())  {  return;  }  }  }  JSType  leftType  =  getJSType(lvalue);      [BUGGY]  Node  rightChild  =  t.getScope().getRightNode(var);  [BUGGY]      JSType  rightType  =  getJSType(rightChild);  if  (validator.expectCanAssignTo(  t,  assign,  rightType,  leftType,       "assignment     "))  {  ensureTyped(t,  assign,  rightType);  }  else  {  ensureTyped(t,  assign);  }  }  [CLASS]  TypeCheck  [METHOD]  visitAssign  [RETURN_TYPE]  void  NodeTraversal  t  Node  assign  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  jsType  leftType  objectJsType  rightType  rvalueType  NodeTraversal  t  DiagnosticGroup  ALL_DIAGNOSTICS  CheckLevel  reportMissingOverride  reportUnknownTypes  Var  var  Node  assign  lvalue  object  object2  rightChild  rvalue  FunctionType  functionType  ScopeCreator  scopeCreator  String  OVERRIDING_PROTOTYPE_WITH_NON_OBJECT  functionPrivateName  message  property  property2  JSDocInfo  info  int  noTypeCheckSection  nullCount  typedCount  unknownCount  TypeValidator  validator  ObjectType  type  AbstractCompiler  compiler  JSTypeRegistry  typeRegistry  boolean  enterSection  externs  inExterns  report  reportMissingProperties  typeable  Scope  outerScope  topScope  DiagnosticType  BAD_DELETE  BAD_IMPLEMENTED_TYPE  BIT_OPERATION  CONFLICTING_EXTENDED_TYPE  CONFLICTING_IMPLEMENTED_TYPE  CONSTRUCTOR_NOT_CALLABLE  DETERMINISTIC_TEST  DETERMINISTIC_TEST_NO_RESULT  ENUM_DUP  ENUM_NOT_CONSTANT  EXPECTED_THIS_TYPE  FUNCTION_MASKS_VARIABLE  HIDDEN_INTERFACE_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY_MISMATCH  ILLEGAL_IMPLICIT_CAST  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE  INEXISTENT_ENUM_ELEMENT  INEXISTENT_PROPERTY  INTERFACE_FUNCTION_NOT_EMPTY  INTERFACE_METHOD_OVERRIDE  INVALID_INTERFACE_MEMBER_DECLARATION  MULTIPLE_VAR_DEF  NOT_A_CONSTRUCTOR  NOT_CALLABLE  UNEXPECTED_TOKEN  UNKNOWN_EXPR_TYPE  UNKNOWN_OVERRIDE  UNRESOLVED_TYPE  WRONG_ARGUMENT_COUNT  diagnosticType  InferJSDocInfo  inferJSDocInfo  	projects/Closure66/src/com/google/javascript/jscomp/TypeCheck.java	0.21320071635561041	939	939	2	replace	Node  rightChild  =  t.getScope().getRightNode(var);	  Node    rightChild    =    t.getScope().getRightNode(lvalue);    	non-compiled	[CE]  orphaned  case	36	None	replace
55	[BUG]  [BUGGY]  Node  rightChild  =  object1.getLastChild();  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      Var  var  =  t.getScope().getVar(lvalue.getString());  if  (var  !=  null)  {  if  (var.isTypeInferred())  {  return;  }  }  }  JSType  leftType  =  getJSType(lvalue);      [BUGGY]  Node  rightChild  =  object1.getLastChild();  [BUGGY]      JSType  rightType  =  getJSType(rightChild);  if  (validator.expectCanAssignTo(  t,  assign,  rightType,  leftType,       "assignment     "))  {  ensureTyped(t,  assign,  rightType);  }  else  {  ensureTyped(t,  assign);  }  }  [CLASS]  TypeCheck  [METHOD]  visitAssign  [RETURN_TYPE]  void  NodeTraversal  t  Node  assign  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  jsType  leftType  objectJsType  rightType  rvalueType  NodeTraversal  t  DiagnosticGroup  ALL_DIAGNOSTICS  CheckLevel  reportMissingOverride  reportUnknownTypes  Var  var  Node  assign  lvalue  object  object2  rightChild  rvalue  FunctionType  functionType  ScopeCreator  scopeCreator  String  OVERRIDING_PROTOTYPE_WITH_NON_OBJECT  functionPrivateName  message  property  property2  JSDocInfo  info  int  noTypeCheckSection  nullCount  typedCount  unknownCount  TypeValidator  validator  ObjectType  type  AbstractCompiler  compiler  JSTypeRegistry  typeRegistry  boolean  enterSection  externs  inExterns  report  reportMissingProperties  typeable  Scope  outerScope  topScope  DiagnosticType  BAD_DELETE  BAD_IMPLEMENTED_TYPE  BIT_OPERATION  CONFLICTING_EXTENDED_TYPE  CONFLICTING_IMPLEMENTED_TYPE  CONSTRUCTOR_NOT_CALLABLE  DETERMINISTIC_TEST  DETERMINISTIC_TEST_NO_RESULT  ENUM_DUP  ENUM_NOT_CONSTANT  EXPECTED_THIS_TYPE  FUNCTION_MASKS_VARIABLE  HIDDEN_INTERFACE_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY_MISMATCH  ILLEGAL_IMPLICIT_CAST  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE  INEXISTENT_ENUM_ELEMENT  INEXISTENT_PROPERTY  INTERFACE_FUNCTION_NOT_EMPTY  INTERFACE_METHOD_OVERRIDE  INVALID_INTERFACE_MEMBER_DECLARATION  MULTIPLE_VAR_DEF  NOT_A_CONSTRUCTOR  NOT_CALLABLE  UNEXPECTED_TOKEN  UNKNOWN_EXPR_TYPE  UNKNOWN_OVERRIDE  UNRESOLVED_TYPE  WRONG_ARGUMENT_COUNT  diagnosticType  InferJSDocInfo  inferJSDocInfo  	projects/Closure66/src/com/google/javascript/jscomp/TypeCheck.java	0.21320071635561041	939	939	2	replace	Node  rightChild  =  object1.getLastChild();	  Node    rightChild    =    object2.getLastChild();    	non-compiled	[CE]  orphaned  case	33	None	replace
56	[BUG]  [BUGGY]  Node  rightChild  =  var.restrictByNotNullOrUndefined();  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      Var  var  =  t.getScope().getVar(lvalue.getString());  if  (var  !=  null)  {  if  (var.isTypeInferred())  {  return;  }  }  }  JSType  leftType  =  getJSType(lvalue);      [BUGGY]  Node  rightChild  =  var.restrictByNotNullOrUndefined();  [BUGGY]      JSType  rightType  =  getJSType(rightChild);  if  (validator.expectCanAssignTo(  t,  assign,  rightType,  leftType,       "assignment     "))  {  ensureTyped(t,  assign,  rightType);  }  else  {  ensureTyped(t,  assign);  }  }  [CLASS]  TypeCheck  [METHOD]  visitAssign  [RETURN_TYPE]  void  NodeTraversal  t  Node  assign  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  jsType  leftType  objectJsType  rightType  rvalueType  NodeTraversal  t  DiagnosticGroup  ALL_DIAGNOSTICS  CheckLevel  reportMissingOverride  reportUnknownTypes  Var  var  Node  assign  lvalue  object  object2  rightChild  rvalue  FunctionType  functionType  ScopeCreator  scopeCreator  String  OVERRIDING_PROTOTYPE_WITH_NON_OBJECT  functionPrivateName  message  property  property2  JSDocInfo  info  int  noTypeCheckSection  nullCount  typedCount  unknownCount  TypeValidator  validator  ObjectType  type  AbstractCompiler  compiler  JSTypeRegistry  typeRegistry  boolean  enterSection  externs  inExterns  report  reportMissingProperties  typeable  Scope  outerScope  topScope  DiagnosticType  BAD_DELETE  BAD_IMPLEMENTED_TYPE  BIT_OPERATION  CONFLICTING_EXTENDED_TYPE  CONFLICTING_IMPLEMENTED_TYPE  CONSTRUCTOR_NOT_CALLABLE  DETERMINISTIC_TEST  DETERMINISTIC_TEST_NO_RESULT  ENUM_DUP  ENUM_NOT_CONSTANT  EXPECTED_THIS_TYPE  FUNCTION_MASKS_VARIABLE  HIDDEN_INTERFACE_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY_MISMATCH  ILLEGAL_IMPLICIT_CAST  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE  INEXISTENT_ENUM_ELEMENT  INEXISTENT_PROPERTY  INTERFACE_FUNCTION_NOT_EMPTY  INTERFACE_METHOD_OVERRIDE  INVALID_INTERFACE_MEMBER_DECLARATION  MULTIPLE_VAR_DEF  NOT_A_CONSTRUCTOR  NOT_CALLABLE  UNEXPECTED_TOKEN  UNKNOWN_EXPR_TYPE  UNKNOWN_OVERRIDE  UNRESOLVED_TYPE  WRONG_ARGUMENT_COUNT  diagnosticType  InferJSDocInfo  inferJSDocInfo  	projects/Closure66/src/com/google/javascript/jscomp/TypeCheck.java	0.21320071635561041	939	939	2	replace	Node  rightChild  =  var.restrictByNotNullOrUndefined();	  Node    rightChild    =    leftType.restrictByNotNullOrUndefined();    	non-compiled	[CE]  orphaned  case	44	None	replace
57	[BUG]  [BUGGY]  Node  rightChild  =  leftType.restrictByNotEmpty();  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      Var  var  =  t.getScope().getVar(lvalue.getString());  if  (var  !=  null)  {  if  (var.isTypeInferred())  {  return;  }  }  }  JSType  leftType  =  getJSType(lvalue);      [BUGGY]  Node  rightChild  =  leftType.restrictByNotEmpty();  [BUGGY]      JSType  rightType  =  getJSType(rightChild);  if  (validator.expectCanAssignTo(  t,  assign,  rightType,  leftType,       "assignment     "))  {  ensureTyped(t,  assign,  rightType);  }  else  {  ensureTyped(t,  assign);  }  }  [CLASS]  TypeCheck  [METHOD]  visitAssign  [RETURN_TYPE]  void  NodeTraversal  t  Node  assign  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  jsType  leftType  objectJsType  rightType  rvalueType  NodeTraversal  t  DiagnosticGroup  ALL_DIAGNOSTICS  CheckLevel  reportMissingOverride  reportUnknownTypes  Var  var  Node  assign  lvalue  object  object2  rightChild  rvalue  FunctionType  functionType  ScopeCreator  scopeCreator  String  OVERRIDING_PROTOTYPE_WITH_NON_OBJECT  functionPrivateName  message  property  property2  JSDocInfo  info  int  noTypeCheckSection  nullCount  typedCount  unknownCount  TypeValidator  validator  ObjectType  type  AbstractCompiler  compiler  JSTypeRegistry  typeRegistry  boolean  enterSection  externs  inExterns  report  reportMissingProperties  typeable  Scope  outerScope  topScope  DiagnosticType  BAD_DELETE  BAD_IMPLEMENTED_TYPE  BIT_OPERATION  CONFLICTING_EXTENDED_TYPE  CONFLICTING_IMPLEMENTED_TYPE  CONSTRUCTOR_NOT_CALLABLE  DETERMINISTIC_TEST  DETERMINISTIC_TEST_NO_RESULT  ENUM_DUP  ENUM_NOT_CONSTANT  EXPECTED_THIS_TYPE  FUNCTION_MASKS_VARIABLE  HIDDEN_INTERFACE_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY_MISMATCH  ILLEGAL_IMPLICIT_CAST  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE  INEXISTENT_ENUM_ELEMENT  INEXISTENT_PROPERTY  INTERFACE_FUNCTION_NOT_EMPTY  INTERFACE_METHOD_OVERRIDE  INVALID_INTERFACE_MEMBER_DECLARATION  MULTIPLE_VAR_DEF  NOT_A_CONSTRUCTOR  NOT_CALLABLE  UNEXPECTED_TOKEN  UNKNOWN_EXPR_TYPE  UNKNOWN_OVERRIDE  UNRESOLVED_TYPE  WRONG_ARGUMENT_COUNT  diagnosticType  InferJSDocInfo  inferJSDocInfo  	projects/Closure66/src/com/google/javascript/jscomp/TypeCheck.java	0.21320071635561041	939	939	2	replace	Node  rightChild  =  leftType.restrictByNotEmpty();	  Node    rightChild    =    leftType.restrictByNotNullOrUndefined();    	non-compiled	[CE]  orphaned  case	44	None	replace
58	[BUG]  [BUGGY]  Node  rightChild  =  leftType.restrictByNotNullOrUndefined(),  assign);  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      Var  var  =  t.getScope().getVar(lvalue.getString());  if  (var  !=  null)  {  if  (var.isTypeInferred())  {  return;  }  }  }  JSType  leftType  =  getJSType(lvalue);      [BUGGY]  Node  rightChild  =  leftType.restrictByNotNullOrUndefined(),  assign);  [BUGGY]      JSType  rightType  =  getJSType(rightChild);  if  (validator.expectCanAssignTo(  t,  assign,  rightType,  leftType,       "assignment     "))  {  ensureTyped(t,  assign,  rightType);  }  else  {  ensureTyped(t,  assign);  }  }  [CLASS]  TypeCheck  [METHOD]  visitAssign  [RETURN_TYPE]  void  NodeTraversal  t  Node  assign  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  jsType  leftType  objectJsType  rightType  rvalueType  NodeTraversal  t  DiagnosticGroup  ALL_DIAGNOSTICS  CheckLevel  reportMissingOverride  reportUnknownTypes  Var  var  Node  assign  lvalue  object  object2  rightChild  rvalue  FunctionType  functionType  ScopeCreator  scopeCreator  String  OVERRIDING_PROTOTYPE_WITH_NON_OBJECT  functionPrivateName  message  property  property2  JSDocInfo  info  int  noTypeCheckSection  nullCount  typedCount  unknownCount  TypeValidator  validator  ObjectType  type  AbstractCompiler  compiler  JSTypeRegistry  typeRegistry  boolean  enterSection  externs  inExterns  report  reportMissingProperties  typeable  Scope  outerScope  topScope  DiagnosticType  BAD_DELETE  BAD_IMPLEMENTED_TYPE  BIT_OPERATION  CONFLICTING_EXTENDED_TYPE  CONFLICTING_IMPLEMENTED_TYPE  CONSTRUCTOR_NOT_CALLABLE  DETERMINISTIC_TEST  DETERMINISTIC_TEST_NO_RESULT  ENUM_DUP  ENUM_NOT_CONSTANT  EXPECTED_THIS_TYPE  FUNCTION_MASKS_VARIABLE  HIDDEN_INTERFACE_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY_MISMATCH  ILLEGAL_IMPLICIT_CAST  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE  INEXISTENT_ENUM_ELEMENT  INEXISTENT_PROPERTY  INTERFACE_FUNCTION_NOT_EMPTY  INTERFACE_METHOD_OVERRIDE  INVALID_INTERFACE_MEMBER_DECLARATION  MULTIPLE_VAR_DEF  NOT_A_CONSTRUCTOR  NOT_CALLABLE  UNEXPECTED_TOKEN  UNKNOWN_EXPR_TYPE  UNKNOWN_OVERRIDE  UNRESOLVED_TYPE  WRONG_ARGUMENT_COUNT  diagnosticType  InferJSDocInfo  inferJSDocInfo  	projects/Closure66/src/com/google/javascript/jscomp/TypeCheck.java	0.21320071635561041	939	939	2	replace	Node  rightChild  =  leftType.restrictByNotNullOrUndefined(),  assign);	  Node    rightChild    =    leftType.restrictByNotNullOrUndefined();    	non-compiled	[CE]  orphaned  case	44	None	replace
59	[BUG]  [BUGGY]  Node  rightChild  =  leftType.restrictByNotNullOrUndefined(),  false);  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      Var  var  =  t.getScope().getVar(lvalue.getString());  if  (var  !=  null)  {  if  (var.isTypeInferred())  {  return;  }  }  }  JSType  leftType  =  getJSType(lvalue);      [BUGGY]  Node  rightChild  =  leftType.restrictByNotNullOrUndefined(),  false);  [BUGGY]      JSType  rightType  =  getJSType(rightChild);  if  (validator.expectCanAssignTo(  t,  assign,  rightType,  leftType,       "assignment     "))  {  ensureTyped(t,  assign,  rightType);  }  else  {  ensureTyped(t,  assign);  }  }  [CLASS]  TypeCheck  [METHOD]  visitAssign  [RETURN_TYPE]  void  NodeTraversal  t  Node  assign  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  jsType  leftType  objectJsType  rightType  rvalueType  NodeTraversal  t  DiagnosticGroup  ALL_DIAGNOSTICS  CheckLevel  reportMissingOverride  reportUnknownTypes  Var  var  Node  assign  lvalue  object  object2  rightChild  rvalue  FunctionType  functionType  ScopeCreator  scopeCreator  String  OVERRIDING_PROTOTYPE_WITH_NON_OBJECT  functionPrivateName  message  property  property2  JSDocInfo  info  int  noTypeCheckSection  nullCount  typedCount  unknownCount  TypeValidator  validator  ObjectType  type  AbstractCompiler  compiler  JSTypeRegistry  typeRegistry  boolean  enterSection  externs  inExterns  report  reportMissingProperties  typeable  Scope  outerScope  topScope  DiagnosticType  BAD_DELETE  BAD_IMPLEMENTED_TYPE  BIT_OPERATION  CONFLICTING_EXTENDED_TYPE  CONFLICTING_IMPLEMENTED_TYPE  CONSTRUCTOR_NOT_CALLABLE  DETERMINISTIC_TEST  DETERMINISTIC_TEST_NO_RESULT  ENUM_DUP  ENUM_NOT_CONSTANT  EXPECTED_THIS_TYPE  FUNCTION_MASKS_VARIABLE  HIDDEN_INTERFACE_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY_MISMATCH  ILLEGAL_IMPLICIT_CAST  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE  INEXISTENT_ENUM_ELEMENT  INEXISTENT_PROPERTY  INTERFACE_FUNCTION_NOT_EMPTY  INTERFACE_METHOD_OVERRIDE  INVALID_INTERFACE_MEMBER_DECLARATION  MULTIPLE_VAR_DEF  NOT_A_CONSTRUCTOR  NOT_CALLABLE  UNEXPECTED_TOKEN  UNKNOWN_EXPR_TYPE  UNKNOWN_OVERRIDE  UNRESOLVED_TYPE  WRONG_ARGUMENT_COUNT  diagnosticType  InferJSDocInfo  inferJSDocInfo  	projects/Closure66/src/com/google/javascript/jscomp/TypeCheck.java	0.21320071635561041	939	939	2	replace	Node  rightChild  =  leftType.restrictByNotNullOrUndefined(),  false);	  Node    rightChild    =    leftType.restrictByNotNullOrUndefined();    	non-compiled	[CE]  orphaned  case	44	None	replace
60	[BUG]  [BUGGY]  Node  rightChild  =  lvalue.restrictByNotNullOrUndefined();  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      Var  var  =  t.getScope().getVar(lvalue.getString());  if  (var  !=  null)  {  if  (var.isTypeInferred())  {  return;  }  }  }  JSType  leftType  =  getJSType(lvalue);      [BUGGY]  Node  rightChild  =  lvalue.restrictByNotNullOrUndefined();  [BUGGY]      JSType  rightType  =  getJSType(rightChild);  if  (validator.expectCanAssignTo(  t,  assign,  rightType,  leftType,       "assignment     "))  {  ensureTyped(t,  assign,  rightType);  }  else  {  ensureTyped(t,  assign);  }  }  [CLASS]  TypeCheck  [METHOD]  visitAssign  [RETURN_TYPE]  void  NodeTraversal  t  Node  assign  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  jsType  leftType  objectJsType  rightType  rvalueType  NodeTraversal  t  DiagnosticGroup  ALL_DIAGNOSTICS  CheckLevel  reportMissingOverride  reportUnknownTypes  Var  var  Node  assign  lvalue  object  object2  rightChild  rvalue  FunctionType  functionType  ScopeCreator  scopeCreator  String  OVERRIDING_PROTOTYPE_WITH_NON_OBJECT  functionPrivateName  message  property  property2  JSDocInfo  info  int  noTypeCheckSection  nullCount  typedCount  unknownCount  TypeValidator  validator  ObjectType  type  AbstractCompiler  compiler  JSTypeRegistry  typeRegistry  boolean  enterSection  externs  inExterns  report  reportMissingProperties  typeable  Scope  outerScope  topScope  DiagnosticType  BAD_DELETE  BAD_IMPLEMENTED_TYPE  BIT_OPERATION  CONFLICTING_EXTENDED_TYPE  CONFLICTING_IMPLEMENTED_TYPE  CONSTRUCTOR_NOT_CALLABLE  DETERMINISTIC_TEST  DETERMINISTIC_TEST_NO_RESULT  ENUM_DUP  ENUM_NOT_CONSTANT  EXPECTED_THIS_TYPE  FUNCTION_MASKS_VARIABLE  HIDDEN_INTERFACE_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY_MISMATCH  ILLEGAL_IMPLICIT_CAST  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE  INEXISTENT_ENUM_ELEMENT  INEXISTENT_PROPERTY  INTERFACE_FUNCTION_NOT_EMPTY  INTERFACE_METHOD_OVERRIDE  INVALID_INTERFACE_MEMBER_DECLARATION  MULTIPLE_VAR_DEF  NOT_A_CONSTRUCTOR  NOT_CALLABLE  UNEXPECTED_TOKEN  UNKNOWN_EXPR_TYPE  UNKNOWN_OVERRIDE  UNRESOLVED_TYPE  WRONG_ARGUMENT_COUNT  diagnosticType  InferJSDocInfo  inferJSDocInfo  	projects/Closure66/src/com/google/javascript/jscomp/TypeCheck.java	0.21320071635561041	939	939	2	replace	Node  rightChild  =  lvalue.restrictByNotNullOrUndefined();	  Node    rightChild    =    leftType.restrictByNotNullOrUndefined();    	non-compiled	[CE]  orphaned  case	44	None	replace
61	[BUG]  [BUGGY]  Node  rightChild  =  leftType.restrictByNotNullOrUndefined(),  var.type);  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      Var  var  =  t.getScope().getVar(lvalue.getString());  if  (var  !=  null)  {  if  (var.isTypeInferred())  {  return;  }  }  }  JSType  leftType  =  getJSType(lvalue);      [BUGGY]  Node  rightChild  =  leftType.restrictByNotNullOrUndefined(),  var.type);  [BUGGY]      JSType  rightType  =  getJSType(rightChild);  if  (validator.expectCanAssignTo(  t,  assign,  rightType,  leftType,       "assignment     "))  {  ensureTyped(t,  assign,  rightType);  }  else  {  ensureTyped(t,  assign);  }  }  [CLASS]  TypeCheck  [METHOD]  visitAssign  [RETURN_TYPE]  void  NodeTraversal  t  Node  assign  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  jsType  leftType  objectJsType  rightType  rvalueType  NodeTraversal  t  DiagnosticGroup  ALL_DIAGNOSTICS  CheckLevel  reportMissingOverride  reportUnknownTypes  Var  var  Node  assign  lvalue  object  object2  rightChild  rvalue  FunctionType  functionType  ScopeCreator  scopeCreator  String  OVERRIDING_PROTOTYPE_WITH_NON_OBJECT  functionPrivateName  message  property  property2  JSDocInfo  info  int  noTypeCheckSection  nullCount  typedCount  unknownCount  TypeValidator  validator  ObjectType  type  AbstractCompiler  compiler  JSTypeRegistry  typeRegistry  boolean  enterSection  externs  inExterns  report  reportMissingProperties  typeable  Scope  outerScope  topScope  DiagnosticType  BAD_DELETE  BAD_IMPLEMENTED_TYPE  BIT_OPERATION  CONFLICTING_EXTENDED_TYPE  CONFLICTING_IMPLEMENTED_TYPE  CONSTRUCTOR_NOT_CALLABLE  DETERMINISTIC_TEST  DETERMINISTIC_TEST_NO_RESULT  ENUM_DUP  ENUM_NOT_CONSTANT  EXPECTED_THIS_TYPE  FUNCTION_MASKS_VARIABLE  HIDDEN_INTERFACE_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY_MISMATCH  ILLEGAL_IMPLICIT_CAST  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE  INEXISTENT_ENUM_ELEMENT  INEXISTENT_PROPERTY  INTERFACE_FUNCTION_NOT_EMPTY  INTERFACE_METHOD_OVERRIDE  INVALID_INTERFACE_MEMBER_DECLARATION  MULTIPLE_VAR_DEF  NOT_A_CONSTRUCTOR  NOT_CALLABLE  UNEXPECTED_TOKEN  UNKNOWN_EXPR_TYPE  UNKNOWN_OVERRIDE  UNRESOLVED_TYPE  WRONG_ARGUMENT_COUNT  diagnosticType  InferJSDocInfo  inferJSDocInfo  	projects/Closure66/src/com/google/javascript/jscomp/TypeCheck.java	0.21320071635561041	939	939	2	replace	Node  rightChild  =  leftType.restrictByNotNullOrUndefined(),  var.type);	  Node    rightChild    =    leftType.restrictByNotNullOrUndefined();    	non-compiled	[CE]  orphaned  case	44	None	replace
62	[BUG]  [BUGGY]  Node  rightChild  =  leftType!=  null?  leftType.cloneTree()  :  null;  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      Var  var  =  t.getScope().getVar(lvalue.getString());  if  (var  !=  null)  {  if  (var.isTypeInferred())  {  return;  }  }  }  JSType  leftType  =  getJSType(lvalue);      [BUGGY]  Node  rightChild  =  leftType!=  null?  leftType.cloneTree()  :  null;  [BUGGY]      JSType  rightType  =  getJSType(rightChild);  if  (validator.expectCanAssignTo(  t,  assign,  rightType,  leftType,       "assignment     "))  {  ensureTyped(t,  assign,  rightType);  }  else  {  ensureTyped(t,  assign);  }  }  [CLASS]  TypeCheck  [METHOD]  visitAssign  [RETURN_TYPE]  void  NodeTraversal  t  Node  assign  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  jsType  leftType  objectJsType  rightType  rvalueType  NodeTraversal  t  DiagnosticGroup  ALL_DIAGNOSTICS  CheckLevel  reportMissingOverride  reportUnknownTypes  Var  var  Node  assign  lvalue  object  object2  rightChild  rvalue  FunctionType  functionType  ScopeCreator  scopeCreator  String  OVERRIDING_PROTOTYPE_WITH_NON_OBJECT  functionPrivateName  message  property  property2  JSDocInfo  info  int  noTypeCheckSection  nullCount  typedCount  unknownCount  TypeValidator  validator  ObjectType  type  AbstractCompiler  compiler  JSTypeRegistry  typeRegistry  boolean  enterSection  externs  inExterns  report  reportMissingProperties  typeable  Scope  outerScope  topScope  DiagnosticType  BAD_DELETE  BAD_IMPLEMENTED_TYPE  BIT_OPERATION  CONFLICTING_EXTENDED_TYPE  CONFLICTING_IMPLEMENTED_TYPE  CONSTRUCTOR_NOT_CALLABLE  DETERMINISTIC_TEST  DETERMINISTIC_TEST_NO_RESULT  ENUM_DUP  ENUM_NOT_CONSTANT  EXPECTED_THIS_TYPE  FUNCTION_MASKS_VARIABLE  HIDDEN_INTERFACE_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY_MISMATCH  ILLEGAL_IMPLICIT_CAST  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE  INEXISTENT_ENUM_ELEMENT  INEXISTENT_PROPERTY  INTERFACE_FUNCTION_NOT_EMPTY  INTERFACE_METHOD_OVERRIDE  INVALID_INTERFACE_MEMBER_DECLARATION  MULTIPLE_VAR_DEF  NOT_A_CONSTRUCTOR  NOT_CALLABLE  UNEXPECTED_TOKEN  UNKNOWN_EXPR_TYPE  UNKNOWN_OVERRIDE  UNRESOLVED_TYPE  WRONG_ARGUMENT_COUNT  diagnosticType  InferJSDocInfo  inferJSDocInfo  	projects/Closure66/src/com/google/javascript/jscomp/TypeCheck.java	0.21320071635561041	939	939	2	replace	Node  rightChild  =  leftType!=  null?  leftType.cloneTree()  :  null;	  Node    rightChild    =    leftType.cloneTree();    	non-compiled	[CE]  orphaned  case	45	None	replace
63	[BUG]  [BUGGY]  Node  rightChild  =  leftType.removeLastChild();  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      Var  var  =  t.getScope().getVar(lvalue.getString());  if  (var  !=  null)  {  if  (var.isTypeInferred())  {  return;  }  }  }  JSType  leftType  =  getJSType(lvalue);      [BUGGY]  Node  rightChild  =  leftType.removeLastChild();  [BUGGY]      JSType  rightType  =  getJSType(rightChild);  if  (validator.expectCanAssignTo(  t,  assign,  rightType,  leftType,       "assignment     "))  {  ensureTyped(t,  assign,  rightType);  }  else  {  ensureTyped(t,  assign);  }  }  [CLASS]  TypeCheck  [METHOD]  visitAssign  [RETURN_TYPE]  void  NodeTraversal  t  Node  assign  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  jsType  leftType  objectJsType  rightType  rvalueType  NodeTraversal  t  DiagnosticGroup  ALL_DIAGNOSTICS  CheckLevel  reportMissingOverride  reportUnknownTypes  Var  var  Node  assign  lvalue  object  object2  rightChild  rvalue  FunctionType  functionType  ScopeCreator  scopeCreator  String  OVERRIDING_PROTOTYPE_WITH_NON_OBJECT  functionPrivateName  message  property  property2  JSDocInfo  info  int  noTypeCheckSection  nullCount  typedCount  unknownCount  TypeValidator  validator  ObjectType  type  AbstractCompiler  compiler  JSTypeRegistry  typeRegistry  boolean  enterSection  externs  inExterns  report  reportMissingProperties  typeable  Scope  outerScope  topScope  DiagnosticType  BAD_DELETE  BAD_IMPLEMENTED_TYPE  BIT_OPERATION  CONFLICTING_EXTENDED_TYPE  CONFLICTING_IMPLEMENTED_TYPE  CONSTRUCTOR_NOT_CALLABLE  DETERMINISTIC_TEST  DETERMINISTIC_TEST_NO_RESULT  ENUM_DUP  ENUM_NOT_CONSTANT  EXPECTED_THIS_TYPE  FUNCTION_MASKS_VARIABLE  HIDDEN_INTERFACE_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY_MISMATCH  ILLEGAL_IMPLICIT_CAST  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE  INEXISTENT_ENUM_ELEMENT  INEXISTENT_PROPERTY  INTERFACE_FUNCTION_NOT_EMPTY  INTERFACE_METHOD_OVERRIDE  INVALID_INTERFACE_MEMBER_DECLARATION  MULTIPLE_VAR_DEF  NOT_A_CONSTRUCTOR  NOT_CALLABLE  UNEXPECTED_TOKEN  UNKNOWN_EXPR_TYPE  UNKNOWN_OVERRIDE  UNRESOLVED_TYPE  WRONG_ARGUMENT_COUNT  diagnosticType  InferJSDocInfo  inferJSDocInfo  	projects/Closure66/src/com/google/javascript/jscomp/TypeCheck.java	0.21320071635561041	939	939	2	replace	Node  rightChild  =  leftType.removeLastChild();	  Node    rightChild    =    leftType.removeFirstChild();    	non-compiled	[CE]  orphaned  case	43	None	replace
64	[BUG]  [BUGGY]  Node  rightChild  =  leftType.removeFirstChild(),  assign);  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      Var  var  =  t.getScope().getVar(lvalue.getString());  if  (var  !=  null)  {  if  (var.isTypeInferred())  {  return;  }  }  }  JSType  leftType  =  getJSType(lvalue);      [BUGGY]  Node  rightChild  =  leftType.removeFirstChild(),  assign);  [BUGGY]      JSType  rightType  =  getJSType(rightChild);  if  (validator.expectCanAssignTo(  t,  assign,  rightType,  leftType,       "assignment     "))  {  ensureTyped(t,  assign,  rightType);  }  else  {  ensureTyped(t,  assign);  }  }  [CLASS]  TypeCheck  [METHOD]  visitAssign  [RETURN_TYPE]  void  NodeTraversal  t  Node  assign  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  jsType  leftType  objectJsType  rightType  rvalueType  NodeTraversal  t  DiagnosticGroup  ALL_DIAGNOSTICS  CheckLevel  reportMissingOverride  reportUnknownTypes  Var  var  Node  assign  lvalue  object  object2  rightChild  rvalue  FunctionType  functionType  ScopeCreator  scopeCreator  String  OVERRIDING_PROTOTYPE_WITH_NON_OBJECT  functionPrivateName  message  property  property2  JSDocInfo  info  int  noTypeCheckSection  nullCount  typedCount  unknownCount  TypeValidator  validator  ObjectType  type  AbstractCompiler  compiler  JSTypeRegistry  typeRegistry  boolean  enterSection  externs  inExterns  report  reportMissingProperties  typeable  Scope  outerScope  topScope  DiagnosticType  BAD_DELETE  BAD_IMPLEMENTED_TYPE  BIT_OPERATION  CONFLICTING_EXTENDED_TYPE  CONFLICTING_IMPLEMENTED_TYPE  CONSTRUCTOR_NOT_CALLABLE  DETERMINISTIC_TEST  DETERMINISTIC_TEST_NO_RESULT  ENUM_DUP  ENUM_NOT_CONSTANT  EXPECTED_THIS_TYPE  FUNCTION_MASKS_VARIABLE  HIDDEN_INTERFACE_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY_MISMATCH  ILLEGAL_IMPLICIT_CAST  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE  INEXISTENT_ENUM_ELEMENT  INEXISTENT_PROPERTY  INTERFACE_FUNCTION_NOT_EMPTY  INTERFACE_METHOD_OVERRIDE  INVALID_INTERFACE_MEMBER_DECLARATION  MULTIPLE_VAR_DEF  NOT_A_CONSTRUCTOR  NOT_CALLABLE  UNEXPECTED_TOKEN  UNKNOWN_EXPR_TYPE  UNKNOWN_OVERRIDE  UNRESOLVED_TYPE  WRONG_ARGUMENT_COUNT  diagnosticType  InferJSDocInfo  inferJSDocInfo  	projects/Closure66/src/com/google/javascript/jscomp/TypeCheck.java	0.21320071635561041	939	939	2	replace	Node  rightChild  =  leftType.removeFirstChild(),  assign);	  Node    rightChild    =    leftType.removeFirstChild();    	non-compiled	[CE]  orphaned  case	43	None	replace
65	[BUG]  [BUGGY]  Node  rightChild  =  t.getScope().getRootNode(leftType);  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      Var  var  =  t.getScope().getVar(lvalue.getString());  if  (var  !=  null)  {  if  (var.isTypeInferred())  {  return;  }  }  }  JSType  leftType  =  getJSType(lvalue);      [BUGGY]  Node  rightChild  =  t.getScope().getRootNode(leftType);  [BUGGY]      JSType  rightType  =  getJSType(rightChild);  if  (validator.expectCanAssignTo(  t,  assign,  rightType,  leftType,       "assignment     "))  {  ensureTyped(t,  assign,  rightType);  }  else  {  ensureTyped(t,  assign);  }  }  [CLASS]  TypeCheck  [METHOD]  visitAssign  [RETURN_TYPE]  void  NodeTraversal  t  Node  assign  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  jsType  leftType  objectJsType  rightType  rvalueType  NodeTraversal  t  DiagnosticGroup  ALL_DIAGNOSTICS  CheckLevel  reportMissingOverride  reportUnknownTypes  Var  var  Node  assign  lvalue  object  object2  rightChild  rvalue  FunctionType  functionType  ScopeCreator  scopeCreator  String  OVERRIDING_PROTOTYPE_WITH_NON_OBJECT  functionPrivateName  message  property  property2  JSDocInfo  info  int  noTypeCheckSection  nullCount  typedCount  unknownCount  TypeValidator  validator  ObjectType  type  AbstractCompiler  compiler  JSTypeRegistry  typeRegistry  boolean  enterSection  externs  inExterns  report  reportMissingProperties  typeable  Scope  outerScope  topScope  DiagnosticType  BAD_DELETE  BAD_IMPLEMENTED_TYPE  BIT_OPERATION  CONFLICTING_EXTENDED_TYPE  CONFLICTING_IMPLEMENTED_TYPE  CONSTRUCTOR_NOT_CALLABLE  DETERMINISTIC_TEST  DETERMINISTIC_TEST_NO_RESULT  ENUM_DUP  ENUM_NOT_CONSTANT  EXPECTED_THIS_TYPE  FUNCTION_MASKS_VARIABLE  HIDDEN_INTERFACE_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY_MISMATCH  ILLEGAL_IMPLICIT_CAST  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE  INEXISTENT_ENUM_ELEMENT  INEXISTENT_PROPERTY  INTERFACE_FUNCTION_NOT_EMPTY  INTERFACE_METHOD_OVERRIDE  INVALID_INTERFACE_MEMBER_DECLARATION  MULTIPLE_VAR_DEF  NOT_A_CONSTRUCTOR  NOT_CALLABLE  UNEXPECTED_TOKEN  UNKNOWN_EXPR_TYPE  UNKNOWN_OVERRIDE  UNRESOLVED_TYPE  WRONG_ARGUMENT_COUNT  diagnosticType  InferJSDocInfo  inferJSDocInfo  	projects/Closure66/src/com/google/javascript/jscomp/TypeCheck.java	0.21320071635561041	939	939	2	replace	Node  rightChild  =  t.getScope().getRootNode(leftType);	  Node    rightChild    =    t.getScope().getRootNode(assign);    	non-compiled	[CE]  orphaned  case	22	None	replace
66	[BUG]  [BUGGY]  Node  rightChild  =  t.getScope().getRightParent();  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      Var  var  =  t.getScope().getVar(lvalue.getString());  if  (var  !=  null)  {  if  (var.isTypeInferred())  {  return;  }  }  }  JSType  leftType  =  getJSType(lvalue);      [BUGGY]  Node  rightChild  =  t.getScope().getRightParent();  [BUGGY]      JSType  rightType  =  getJSType(rightChild);  if  (validator.expectCanAssignTo(  t,  assign,  rightType,  leftType,       "assignment     "))  {  ensureTyped(t,  assign,  rightType);  }  else  {  ensureTyped(t,  assign);  }  }  [CLASS]  TypeCheck  [METHOD]  visitAssign  [RETURN_TYPE]  void  NodeTraversal  t  Node  assign  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  jsType  leftType  objectJsType  rightType  rvalueType  NodeTraversal  t  DiagnosticGroup  ALL_DIAGNOSTICS  CheckLevel  reportMissingOverride  reportUnknownTypes  Var  var  Node  assign  lvalue  object  object2  rightChild  rvalue  FunctionType  functionType  ScopeCreator  scopeCreator  String  OVERRIDING_PROTOTYPE_WITH_NON_OBJECT  functionPrivateName  message  property  property2  JSDocInfo  info  int  noTypeCheckSection  nullCount  typedCount  unknownCount  TypeValidator  validator  ObjectType  type  AbstractCompiler  compiler  JSTypeRegistry  typeRegistry  boolean  enterSection  externs  inExterns  report  reportMissingProperties  typeable  Scope  outerScope  topScope  DiagnosticType  BAD_DELETE  BAD_IMPLEMENTED_TYPE  BIT_OPERATION  CONFLICTING_EXTENDED_TYPE  CONFLICTING_IMPLEMENTED_TYPE  CONSTRUCTOR_NOT_CALLABLE  DETERMINISTIC_TEST  DETERMINISTIC_TEST_NO_RESULT  ENUM_DUP  ENUM_NOT_CONSTANT  EXPECTED_THIS_TYPE  FUNCTION_MASKS_VARIABLE  HIDDEN_INTERFACE_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY_MISMATCH  ILLEGAL_IMPLICIT_CAST  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE  INEXISTENT_ENUM_ELEMENT  INEXISTENT_PROPERTY  INTERFACE_FUNCTION_NOT_EMPTY  INTERFACE_METHOD_OVERRIDE  INVALID_INTERFACE_MEMBER_DECLARATION  MULTIPLE_VAR_DEF  NOT_A_CONSTRUCTOR  NOT_CALLABLE  UNEXPECTED_TOKEN  UNKNOWN_EXPR_TYPE  UNKNOWN_OVERRIDE  UNRESOLVED_TYPE  WRONG_ARGUMENT_COUNT  diagnosticType  InferJSDocInfo  inferJSDocInfo  	projects/Closure66/src/com/google/javascript/jscomp/TypeCheck.java	0.21320071635561041	939	939	2	replace	Node  rightChild  =  t.getScope().getRightParent();	  Node    rightChild    =    t.getScope().getParent();    	non-compiled	[CE]  orphaned  case	5	None	replace
67	[BUG]  [BUGGY]  Node  rightChild  =  t.getScope().getRight();  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      Var  var  =  t.getScope().getVar(lvalue.getString());  if  (var  !=  null)  {  if  (var.isTypeInferred())  {  return;  }  }  }  JSType  leftType  =  getJSType(lvalue);      [BUGGY]  Node  rightChild  =  t.getScope().getRight();  [BUGGY]      JSType  rightType  =  getJSType(rightChild);  if  (validator.expectCanAssignTo(  t,  assign,  rightType,  leftType,       "assignment     "))  {  ensureTyped(t,  assign,  rightType);  }  else  {  ensureTyped(t,  assign);  }  }  [CLASS]  TypeCheck  [METHOD]  visitAssign  [RETURN_TYPE]  void  NodeTraversal  t  Node  assign  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  jsType  leftType  objectJsType  rightType  rvalueType  NodeTraversal  t  DiagnosticGroup  ALL_DIAGNOSTICS  CheckLevel  reportMissingOverride  reportUnknownTypes  Var  var  Node  assign  lvalue  object  object2  rightChild  rvalue  FunctionType  functionType  ScopeCreator  scopeCreator  String  OVERRIDING_PROTOTYPE_WITH_NON_OBJECT  functionPrivateName  message  property  property2  JSDocInfo  info  int  noTypeCheckSection  nullCount  typedCount  unknownCount  TypeValidator  validator  ObjectType  type  AbstractCompiler  compiler  JSTypeRegistry  typeRegistry  boolean  enterSection  externs  inExterns  report  reportMissingProperties  typeable  Scope  outerScope  topScope  DiagnosticType  BAD_DELETE  BAD_IMPLEMENTED_TYPE  BIT_OPERATION  CONFLICTING_EXTENDED_TYPE  CONFLICTING_IMPLEMENTED_TYPE  CONSTRUCTOR_NOT_CALLABLE  DETERMINISTIC_TEST  DETERMINISTIC_TEST_NO_RESULT  ENUM_DUP  ENUM_NOT_CONSTANT  EXPECTED_THIS_TYPE  FUNCTION_MASKS_VARIABLE  HIDDEN_INTERFACE_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY_MISMATCH  ILLEGAL_IMPLICIT_CAST  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE  INEXISTENT_ENUM_ELEMENT  INEXISTENT_PROPERTY  INTERFACE_FUNCTION_NOT_EMPTY  INTERFACE_METHOD_OVERRIDE  INVALID_INTERFACE_MEMBER_DECLARATION  MULTIPLE_VAR_DEF  NOT_A_CONSTRUCTOR  NOT_CALLABLE  UNEXPECTED_TOKEN  UNKNOWN_EXPR_TYPE  UNKNOWN_OVERRIDE  UNRESOLVED_TYPE  WRONG_ARGUMENT_COUNT  diagnosticType  InferJSDocInfo  inferJSDocInfo  	projects/Closure66/src/com/google/javascript/jscomp/TypeCheck.java	0.21320071635561041	939	939	2	replace	Node  rightChild  =  t.getScope().getRight();	  Node    rightChild    =    t.getScope().getParent();    	non-compiled	[CE]  orphaned  case	5	None	replace
68	[BUG]  [BUGGY]  Node  rightChild  =  leftType.getLocalPart();  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      Var  var  =  t.getScope().getVar(lvalue.getString());  if  (var  !=  null)  {  if  (var.isTypeInferred())  {  return;  }  }  }  JSType  leftType  =  getJSType(lvalue);      [BUGGY]  Node  rightChild  =  leftType.getLocalPart();  [BUGGY]      JSType  rightType  =  getJSType(rightChild);  if  (validator.expectCanAssignTo(  t,  assign,  rightType,  leftType,       "assignment     "))  {  ensureTyped(t,  assign,  rightType);  }  else  {  ensureTyped(t,  assign);  }  }  [CLASS]  TypeCheck  [METHOD]  visitAssign  [RETURN_TYPE]  void  NodeTraversal  t  Node  assign  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  jsType  leftType  objectJsType  rightType  rvalueType  NodeTraversal  t  DiagnosticGroup  ALL_DIAGNOSTICS  CheckLevel  reportMissingOverride  reportUnknownTypes  Var  var  Node  assign  lvalue  object  object2  rightChild  rvalue  FunctionType  functionType  ScopeCreator  scopeCreator  String  OVERRIDING_PROTOTYPE_WITH_NON_OBJECT  functionPrivateName  message  property  property2  JSDocInfo  info  int  noTypeCheckSection  nullCount  typedCount  unknownCount  TypeValidator  validator  ObjectType  type  AbstractCompiler  compiler  JSTypeRegistry  typeRegistry  boolean  enterSection  externs  inExterns  report  reportMissingProperties  typeable  Scope  outerScope  topScope  DiagnosticType  BAD_DELETE  BAD_IMPLEMENTED_TYPE  BIT_OPERATION  CONFLICTING_EXTENDED_TYPE  CONFLICTING_IMPLEMENTED_TYPE  CONSTRUCTOR_NOT_CALLABLE  DETERMINISTIC_TEST  DETERMINISTIC_TEST_NO_RESULT  ENUM_DUP  ENUM_NOT_CONSTANT  EXPECTED_THIS_TYPE  FUNCTION_MASKS_VARIABLE  HIDDEN_INTERFACE_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY_MISMATCH  ILLEGAL_IMPLICIT_CAST  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE  INEXISTENT_ENUM_ELEMENT  INEXISTENT_PROPERTY  INTERFACE_FUNCTION_NOT_EMPTY  INTERFACE_METHOD_OVERRIDE  INVALID_INTERFACE_MEMBER_DECLARATION  MULTIPLE_VAR_DEF  NOT_A_CONSTRUCTOR  NOT_CALLABLE  UNEXPECTED_TOKEN  UNKNOWN_EXPR_TYPE  UNKNOWN_OVERRIDE  UNRESOLVED_TYPE  WRONG_ARGUMENT_COUNT  diagnosticType  InferJSDocInfo  inferJSDocInfo  	projects/Closure66/src/com/google/javascript/jscomp/TypeCheck.java	0.21320071635561041	939	939	2	replace	Node  rightChild  =  leftType.getLocalPart();	  Node    rightChild    =    var.getLocalPart();    	non-compiled	[CE]  orphaned  case	31	None	replace
69	[BUG]  [BUGGY]  Node  rightChild  =  var.getRawParent();  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      Var  var  =  t.getScope().getVar(lvalue.getString());  if  (var  !=  null)  {  if  (var.isTypeInferred())  {  return;  }  }  }  JSType  leftType  =  getJSType(lvalue);      [BUGGY]  Node  rightChild  =  var.getRawParent();  [BUGGY]      JSType  rightType  =  getJSType(rightChild);  if  (validator.expectCanAssignTo(  t,  assign,  rightType,  leftType,       "assignment     "))  {  ensureTyped(t,  assign,  rightType);  }  else  {  ensureTyped(t,  assign);  }  }  [CLASS]  TypeCheck  [METHOD]  visitAssign  [RETURN_TYPE]  void  NodeTraversal  t  Node  assign  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  jsType  leftType  objectJsType  rightType  rvalueType  NodeTraversal  t  DiagnosticGroup  ALL_DIAGNOSTICS  CheckLevel  reportMissingOverride  reportUnknownTypes  Var  var  Node  assign  lvalue  object  object2  rightChild  rvalue  FunctionType  functionType  ScopeCreator  scopeCreator  String  OVERRIDING_PROTOTYPE_WITH_NON_OBJECT  functionPrivateName  message  property  property2  JSDocInfo  info  int  noTypeCheckSection  nullCount  typedCount  unknownCount  TypeValidator  validator  ObjectType  type  AbstractCompiler  compiler  JSTypeRegistry  typeRegistry  boolean  enterSection  externs  inExterns  report  reportMissingProperties  typeable  Scope  outerScope  topScope  DiagnosticType  BAD_DELETE  BAD_IMPLEMENTED_TYPE  BIT_OPERATION  CONFLICTING_EXTENDED_TYPE  CONFLICTING_IMPLEMENTED_TYPE  CONSTRUCTOR_NOT_CALLABLE  DETERMINISTIC_TEST  DETERMINISTIC_TEST_NO_RESULT  ENUM_DUP  ENUM_NOT_CONSTANT  EXPECTED_THIS_TYPE  FUNCTION_MASKS_VARIABLE  HIDDEN_INTERFACE_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY_MISMATCH  ILLEGAL_IMPLICIT_CAST  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE  INEXISTENT_ENUM_ELEMENT  INEXISTENT_PROPERTY  INTERFACE_FUNCTION_NOT_EMPTY  INTERFACE_METHOD_OVERRIDE  INVALID_INTERFACE_MEMBER_DECLARATION  MULTIPLE_VAR_DEF  NOT_A_CONSTRUCTOR  NOT_CALLABLE  UNEXPECTED_TOKEN  UNKNOWN_EXPR_TYPE  UNKNOWN_OVERRIDE  UNRESOLVED_TYPE  WRONG_ARGUMENT_COUNT  diagnosticType  InferJSDocInfo  inferJSDocInfo  	projects/Closure66/src/com/google/javascript/jscomp/TypeCheck.java	0.21320071635561041	939	939	2	replace	Node  rightChild  =  var.getRawParent();	  Node    rightChild    =    var.getLocalPart();    	non-compiled	[CE]  orphaned  case	31	None	replace
70	[BUG]  [BUGGY]  Node  rightChild  =  var.getRawClass();  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      Var  var  =  t.getScope().getVar(lvalue.getString());  if  (var  !=  null)  {  if  (var.isTypeInferred())  {  return;  }  }  }  JSType  leftType  =  getJSType(lvalue);      [BUGGY]  Node  rightChild  =  var.getRawClass();  [BUGGY]      JSType  rightType  =  getJSType(rightChild);  if  (validator.expectCanAssignTo(  t,  assign,  rightType,  leftType,       "assignment     "))  {  ensureTyped(t,  assign,  rightType);  }  else  {  ensureTyped(t,  assign);  }  }  [CLASS]  TypeCheck  [METHOD]  visitAssign  [RETURN_TYPE]  void  NodeTraversal  t  Node  assign  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  jsType  leftType  objectJsType  rightType  rvalueType  NodeTraversal  t  DiagnosticGroup  ALL_DIAGNOSTICS  CheckLevel  reportMissingOverride  reportUnknownTypes  Var  var  Node  assign  lvalue  object  object2  rightChild  rvalue  FunctionType  functionType  ScopeCreator  scopeCreator  String  OVERRIDING_PROTOTYPE_WITH_NON_OBJECT  functionPrivateName  message  property  property2  JSDocInfo  info  int  noTypeCheckSection  nullCount  typedCount  unknownCount  TypeValidator  validator  ObjectType  type  AbstractCompiler  compiler  JSTypeRegistry  typeRegistry  boolean  enterSection  externs  inExterns  report  reportMissingProperties  typeable  Scope  outerScope  topScope  DiagnosticType  BAD_DELETE  BAD_IMPLEMENTED_TYPE  BIT_OPERATION  CONFLICTING_EXTENDED_TYPE  CONFLICTING_IMPLEMENTED_TYPE  CONSTRUCTOR_NOT_CALLABLE  DETERMINISTIC_TEST  DETERMINISTIC_TEST_NO_RESULT  ENUM_DUP  ENUM_NOT_CONSTANT  EXPECTED_THIS_TYPE  FUNCTION_MASKS_VARIABLE  HIDDEN_INTERFACE_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY_MISMATCH  ILLEGAL_IMPLICIT_CAST  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE  INEXISTENT_ENUM_ELEMENT  INEXISTENT_PROPERTY  INTERFACE_FUNCTION_NOT_EMPTY  INTERFACE_METHOD_OVERRIDE  INVALID_INTERFACE_MEMBER_DECLARATION  MULTIPLE_VAR_DEF  NOT_A_CONSTRUCTOR  NOT_CALLABLE  UNEXPECTED_TOKEN  UNKNOWN_EXPR_TYPE  UNKNOWN_OVERRIDE  UNRESOLVED_TYPE  WRONG_ARGUMENT_COUNT  diagnosticType  InferJSDocInfo  inferJSDocInfo  	projects/Closure66/src/com/google/javascript/jscomp/TypeCheck.java	0.21320071635561041	939	939	2	replace	Node  rightChild  =  var.getRawClass();	  Node    rightChild    =    var.getLocalPart();    	non-compiled	[CE]  orphaned  case	31	None	replace
71	[BUG]  [BUGGY]  Node  rightChild  =  lvalue.getNext()  +  1;  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      Var  var  =  t.getScope().getVar(lvalue.getString());  if  (var  !=  null)  {  if  (var.isTypeInferred())  {  return;  }  }  }  JSType  leftType  =  getJSType(lvalue);      [BUGGY]  Node  rightChild  =  lvalue.getNext()  +  1;  [BUGGY]      JSType  rightType  =  getJSType(rightChild);  if  (validator.expectCanAssignTo(  t,  assign,  rightType,  leftType,       "assignment     "))  {  ensureTyped(t,  assign,  rightType);  }  else  {  ensureTyped(t,  assign);  }  }  [CLASS]  TypeCheck  [METHOD]  visitAssign  [RETURN_TYPE]  void  NodeTraversal  t  Node  assign  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  jsType  leftType  objectJsType  rightType  rvalueType  NodeTraversal  t  DiagnosticGroup  ALL_DIAGNOSTICS  CheckLevel  reportMissingOverride  reportUnknownTypes  Var  var  Node  assign  lvalue  object  object2  rightChild  rvalue  FunctionType  functionType  ScopeCreator  scopeCreator  String  OVERRIDING_PROTOTYPE_WITH_NON_OBJECT  functionPrivateName  message  property  property2  JSDocInfo  info  int  noTypeCheckSection  nullCount  typedCount  unknownCount  TypeValidator  validator  ObjectType  type  AbstractCompiler  compiler  JSTypeRegistry  typeRegistry  boolean  enterSection  externs  inExterns  report  reportMissingProperties  typeable  Scope  outerScope  topScope  DiagnosticType  BAD_DELETE  BAD_IMPLEMENTED_TYPE  BIT_OPERATION  CONFLICTING_EXTENDED_TYPE  CONFLICTING_IMPLEMENTED_TYPE  CONSTRUCTOR_NOT_CALLABLE  DETERMINISTIC_TEST  DETERMINISTIC_TEST_NO_RESULT  ENUM_DUP  ENUM_NOT_CONSTANT  EXPECTED_THIS_TYPE  FUNCTION_MASKS_VARIABLE  HIDDEN_INTERFACE_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY_MISMATCH  ILLEGAL_IMPLICIT_CAST  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE  INEXISTENT_ENUM_ELEMENT  INEXISTENT_PROPERTY  INTERFACE_FUNCTION_NOT_EMPTY  INTERFACE_METHOD_OVERRIDE  INVALID_INTERFACE_MEMBER_DECLARATION  MULTIPLE_VAR_DEF  NOT_A_CONSTRUCTOR  NOT_CALLABLE  UNEXPECTED_TOKEN  UNKNOWN_EXPR_TYPE  UNKNOWN_OVERRIDE  UNRESOLVED_TYPE  WRONG_ARGUMENT_COUNT  diagnosticType  InferJSDocInfo  inferJSDocInfo  	projects/Closure66/src/com/google/javascript/jscomp/TypeCheck.java	0.21320071635561041	939	939	2	replace	Node  rightChild  =  lvalue.getNext()  +  1;	  Node    rightChild    =    lvalue.getNext();    	non-compiled	[CE]  orphaned  case	14	None	replace
72	[BUG]  [BUGGY]  Node  rightChild  =  assign.getNext();  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      Var  var  =  t.getScope().getVar(lvalue.getString());  if  (var  !=  null)  {  if  (var.isTypeInferred())  {  return;  }  }  }  JSType  leftType  =  getJSType(lvalue);      [BUGGY]  Node  rightChild  =  assign.getNext();  [BUGGY]      JSType  rightType  =  getJSType(rightChild);  if  (validator.expectCanAssignTo(  t,  assign,  rightType,  leftType,       "assignment     "))  {  ensureTyped(t,  assign,  rightType);  }  else  {  ensureTyped(t,  assign);  }  }  [CLASS]  TypeCheck  [METHOD]  visitAssign  [RETURN_TYPE]  void  NodeTraversal  t  Node  assign  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  jsType  leftType  objectJsType  rightType  rvalueType  NodeTraversal  t  DiagnosticGroup  ALL_DIAGNOSTICS  CheckLevel  reportMissingOverride  reportUnknownTypes  Var  var  Node  assign  lvalue  object  object2  rightChild  rvalue  FunctionType  functionType  ScopeCreator  scopeCreator  String  OVERRIDING_PROTOTYPE_WITH_NON_OBJECT  functionPrivateName  message  property  property2  JSDocInfo  info  int  noTypeCheckSection  nullCount  typedCount  unknownCount  TypeValidator  validator  ObjectType  type  AbstractCompiler  compiler  JSTypeRegistry  typeRegistry  boolean  enterSection  externs  inExterns  report  reportMissingProperties  typeable  Scope  outerScope  topScope  DiagnosticType  BAD_DELETE  BAD_IMPLEMENTED_TYPE  BIT_OPERATION  CONFLICTING_EXTENDED_TYPE  CONFLICTING_IMPLEMENTED_TYPE  CONSTRUCTOR_NOT_CALLABLE  DETERMINISTIC_TEST  DETERMINISTIC_TEST_NO_RESULT  ENUM_DUP  ENUM_NOT_CONSTANT  EXPECTED_THIS_TYPE  FUNCTION_MASKS_VARIABLE  HIDDEN_INTERFACE_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY_MISMATCH  ILLEGAL_IMPLICIT_CAST  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE  INEXISTENT_ENUM_ELEMENT  INEXISTENT_PROPERTY  INTERFACE_FUNCTION_NOT_EMPTY  INTERFACE_METHOD_OVERRIDE  INVALID_INTERFACE_MEMBER_DECLARATION  MULTIPLE_VAR_DEF  NOT_A_CONSTRUCTOR  NOT_CALLABLE  UNEXPECTED_TOKEN  UNKNOWN_EXPR_TYPE  UNKNOWN_OVERRIDE  UNRESOLVED_TYPE  WRONG_ARGUMENT_COUNT  diagnosticType  InferJSDocInfo  inferJSDocInfo  	projects/Closure66/src/com/google/javascript/jscomp/TypeCheck.java	0.21320071635561041	939	939	2	replace	Node  rightChild  =  assign.getNext();	  Node    rightChild    =    lvalue.getNext();    	non-compiled	[CE]  orphaned  case	14	None	replace
73	[BUG]  [BUGGY]  Node  rightChild  =  leftType!=  null?  leftType.getFirstChild()  :  var.getString();  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      Var  var  =  t.getScope().getVar(lvalue.getString());  if  (var  !=  null)  {  if  (var.isTypeInferred())  {  return;  }  }  }  JSType  leftType  =  getJSType(lvalue);      [BUGGY]  Node  rightChild  =  leftType!=  null?  leftType.getFirstChild()  :  var.getString();  [BUGGY]      JSType  rightType  =  getJSType(rightChild);  if  (validator.expectCanAssignTo(  t,  assign,  rightType,  leftType,       "assignment     "))  {  ensureTyped(t,  assign,  rightType);  }  else  {  ensureTyped(t,  assign);  }  }  [CLASS]  TypeCheck  [METHOD]  visitAssign  [RETURN_TYPE]  void  NodeTraversal  t  Node  assign  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  jsType  leftType  objectJsType  rightType  rvalueType  NodeTraversal  t  DiagnosticGroup  ALL_DIAGNOSTICS  CheckLevel  reportMissingOverride  reportUnknownTypes  Var  var  Node  assign  lvalue  object  object2  rightChild  rvalue  FunctionType  functionType  ScopeCreator  scopeCreator  String  OVERRIDING_PROTOTYPE_WITH_NON_OBJECT  functionPrivateName  message  property  property2  JSDocInfo  info  int  noTypeCheckSection  nullCount  typedCount  unknownCount  TypeValidator  validator  ObjectType  type  AbstractCompiler  compiler  JSTypeRegistry  typeRegistry  boolean  enterSection  externs  inExterns  report  reportMissingProperties  typeable  Scope  outerScope  topScope  DiagnosticType  BAD_DELETE  BAD_IMPLEMENTED_TYPE  BIT_OPERATION  CONFLICTING_EXTENDED_TYPE  CONFLICTING_IMPLEMENTED_TYPE  CONSTRUCTOR_NOT_CALLABLE  DETERMINISTIC_TEST  DETERMINISTIC_TEST_NO_RESULT  ENUM_DUP  ENUM_NOT_CONSTANT  EXPECTED_THIS_TYPE  FUNCTION_MASKS_VARIABLE  HIDDEN_INTERFACE_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY_MISMATCH  ILLEGAL_IMPLICIT_CAST  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE  INEXISTENT_ENUM_ELEMENT  INEXISTENT_PROPERTY  INTERFACE_FUNCTION_NOT_EMPTY  INTERFACE_METHOD_OVERRIDE  INVALID_INTERFACE_MEMBER_DECLARATION  MULTIPLE_VAR_DEF  NOT_A_CONSTRUCTOR  NOT_CALLABLE  UNEXPECTED_TOKEN  UNKNOWN_EXPR_TYPE  UNKNOWN_OVERRIDE  UNRESOLVED_TYPE  WRONG_ARGUMENT_COUNT  diagnosticType  InferJSDocInfo  inferJSDocInfo  	projects/Closure66/src/com/google/javascript/jscomp/TypeCheck.java	0.21320071635561041	939	939	2	replace	Node  rightChild  =  leftType!=  null?  leftType.getFirstChild()  :  var.getString();	  Node    rightChild    =    leftType!=    null?    leftType.getLastChild()    :    var.getString();    	non-compiled	[CE]  orphaned  case	29	None	replace
74	[BUG]  [BUGGY]  Node  rightChild  =  leftType  ==  null?  leftType.getFirstChild()  :  var.getString();  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      Var  var  =  t.getScope().getVar(lvalue.getString());  if  (var  !=  null)  {  if  (var.isTypeInferred())  {  return;  }  }  }  JSType  leftType  =  getJSType(lvalue);      [BUGGY]  Node  rightChild  =  leftType  ==  null?  leftType.getFirstChild()  :  var.getString();  [BUGGY]      JSType  rightType  =  getJSType(rightChild);  if  (validator.expectCanAssignTo(  t,  assign,  rightType,  leftType,       "assignment     "))  {  ensureTyped(t,  assign,  rightType);  }  else  {  ensureTyped(t,  assign);  }  }  [CLASS]  TypeCheck  [METHOD]  visitAssign  [RETURN_TYPE]  void  NodeTraversal  t  Node  assign  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  jsType  leftType  objectJsType  rightType  rvalueType  NodeTraversal  t  DiagnosticGroup  ALL_DIAGNOSTICS  CheckLevel  reportMissingOverride  reportUnknownTypes  Var  var  Node  assign  lvalue  object  object2  rightChild  rvalue  FunctionType  functionType  ScopeCreator  scopeCreator  String  OVERRIDING_PROTOTYPE_WITH_NON_OBJECT  functionPrivateName  message  property  property2  JSDocInfo  info  int  noTypeCheckSection  nullCount  typedCount  unknownCount  TypeValidator  validator  ObjectType  type  AbstractCompiler  compiler  JSTypeRegistry  typeRegistry  boolean  enterSection  externs  inExterns  report  reportMissingProperties  typeable  Scope  outerScope  topScope  DiagnosticType  BAD_DELETE  BAD_IMPLEMENTED_TYPE  BIT_OPERATION  CONFLICTING_EXTENDED_TYPE  CONFLICTING_IMPLEMENTED_TYPE  CONSTRUCTOR_NOT_CALLABLE  DETERMINISTIC_TEST  DETERMINISTIC_TEST_NO_RESULT  ENUM_DUP  ENUM_NOT_CONSTANT  EXPECTED_THIS_TYPE  FUNCTION_MASKS_VARIABLE  HIDDEN_INTERFACE_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY_MISMATCH  ILLEGAL_IMPLICIT_CAST  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE  INEXISTENT_ENUM_ELEMENT  INEXISTENT_PROPERTY  INTERFACE_FUNCTION_NOT_EMPTY  INTERFACE_METHOD_OVERRIDE  INVALID_INTERFACE_MEMBER_DECLARATION  MULTIPLE_VAR_DEF  NOT_A_CONSTRUCTOR  NOT_CALLABLE  UNEXPECTED_TOKEN  UNKNOWN_EXPR_TYPE  UNKNOWN_OVERRIDE  UNRESOLVED_TYPE  WRONG_ARGUMENT_COUNT  diagnosticType  InferJSDocInfo  inferJSDocInfo  	projects/Closure66/src/com/google/javascript/jscomp/TypeCheck.java	0.21320071635561041	939	939	2	replace	Node  rightChild  =  leftType  ==  null?  leftType.getFirstChild()  :  var.getString();	  Node    rightChild    =    leftType!=    null?    leftType.getLastChild()    :    var.getString();    	non-compiled	[CE]  orphaned  case	29	None	replace
75	[BUG]  [BUGGY]  Node  rightChild  =  leftType  ==  null?  leftType.getLastChild()  :  var.getString();  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      Var  var  =  t.getScope().getVar(lvalue.getString());  if  (var  !=  null)  {  if  (var.isTypeInferred())  {  return;  }  }  }  JSType  leftType  =  getJSType(lvalue);      [BUGGY]  Node  rightChild  =  leftType  ==  null?  leftType.getLastChild()  :  var.getString();  [BUGGY]      JSType  rightType  =  getJSType(rightChild);  if  (validator.expectCanAssignTo(  t,  assign,  rightType,  leftType,       "assignment     "))  {  ensureTyped(t,  assign,  rightType);  }  else  {  ensureTyped(t,  assign);  }  }  [CLASS]  TypeCheck  [METHOD]  visitAssign  [RETURN_TYPE]  void  NodeTraversal  t  Node  assign  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  jsType  leftType  objectJsType  rightType  rvalueType  NodeTraversal  t  DiagnosticGroup  ALL_DIAGNOSTICS  CheckLevel  reportMissingOverride  reportUnknownTypes  Var  var  Node  assign  lvalue  object  object2  rightChild  rvalue  FunctionType  functionType  ScopeCreator  scopeCreator  String  OVERRIDING_PROTOTYPE_WITH_NON_OBJECT  functionPrivateName  message  property  property2  JSDocInfo  info  int  noTypeCheckSection  nullCount  typedCount  unknownCount  TypeValidator  validator  ObjectType  type  AbstractCompiler  compiler  JSTypeRegistry  typeRegistry  boolean  enterSection  externs  inExterns  report  reportMissingProperties  typeable  Scope  outerScope  topScope  DiagnosticType  BAD_DELETE  BAD_IMPLEMENTED_TYPE  BIT_OPERATION  CONFLICTING_EXTENDED_TYPE  CONFLICTING_IMPLEMENTED_TYPE  CONSTRUCTOR_NOT_CALLABLE  DETERMINISTIC_TEST  DETERMINISTIC_TEST_NO_RESULT  ENUM_DUP  ENUM_NOT_CONSTANT  EXPECTED_THIS_TYPE  FUNCTION_MASKS_VARIABLE  HIDDEN_INTERFACE_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY_MISMATCH  ILLEGAL_IMPLICIT_CAST  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE  INEXISTENT_ENUM_ELEMENT  INEXISTENT_PROPERTY  INTERFACE_FUNCTION_NOT_EMPTY  INTERFACE_METHOD_OVERRIDE  INVALID_INTERFACE_MEMBER_DECLARATION  MULTIPLE_VAR_DEF  NOT_A_CONSTRUCTOR  NOT_CALLABLE  UNEXPECTED_TOKEN  UNKNOWN_EXPR_TYPE  UNKNOWN_OVERRIDE  UNRESOLVED_TYPE  WRONG_ARGUMENT_COUNT  diagnosticType  InferJSDocInfo  inferJSDocInfo  	projects/Closure66/src/com/google/javascript/jscomp/TypeCheck.java	0.21320071635561041	939	939	2	replace	Node  rightChild  =  leftType  ==  null?  leftType.getLastChild()  :  var.getString();	  Node    rightChild    =    leftType!=    null?    leftType.getLastChild()    :    var.getString();    	non-compiled	[CE]  orphaned  case	29	None	replace
76	[BUG]  [BUGGY]  Node  rightChild  =  leftType!=  null?  leftType.getString()  :  var.getLastChild();  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      Var  var  =  t.getScope().getVar(lvalue.getString());  if  (var  !=  null)  {  if  (var.isTypeInferred())  {  return;  }  }  }  JSType  leftType  =  getJSType(lvalue);      [BUGGY]  Node  rightChild  =  leftType!=  null?  leftType.getString()  :  var.getLastChild();  [BUGGY]      JSType  rightType  =  getJSType(rightChild);  if  (validator.expectCanAssignTo(  t,  assign,  rightType,  leftType,       "assignment     "))  {  ensureTyped(t,  assign,  rightType);  }  else  {  ensureTyped(t,  assign);  }  }  [CLASS]  TypeCheck  [METHOD]  visitAssign  [RETURN_TYPE]  void  NodeTraversal  t  Node  assign  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  jsType  leftType  objectJsType  rightType  rvalueType  NodeTraversal  t  DiagnosticGroup  ALL_DIAGNOSTICS  CheckLevel  reportMissingOverride  reportUnknownTypes  Var  var  Node  assign  lvalue  object  object2  rightChild  rvalue  FunctionType  functionType  ScopeCreator  scopeCreator  String  OVERRIDING_PROTOTYPE_WITH_NON_OBJECT  functionPrivateName  message  property  property2  JSDocInfo  info  int  noTypeCheckSection  nullCount  typedCount  unknownCount  TypeValidator  validator  ObjectType  type  AbstractCompiler  compiler  JSTypeRegistry  typeRegistry  boolean  enterSection  externs  inExterns  report  reportMissingProperties  typeable  Scope  outerScope  topScope  DiagnosticType  BAD_DELETE  BAD_IMPLEMENTED_TYPE  BIT_OPERATION  CONFLICTING_EXTENDED_TYPE  CONFLICTING_IMPLEMENTED_TYPE  CONSTRUCTOR_NOT_CALLABLE  DETERMINISTIC_TEST  DETERMINISTIC_TEST_NO_RESULT  ENUM_DUP  ENUM_NOT_CONSTANT  EXPECTED_THIS_TYPE  FUNCTION_MASKS_VARIABLE  HIDDEN_INTERFACE_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY_MISMATCH  ILLEGAL_IMPLICIT_CAST  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE  INEXISTENT_ENUM_ELEMENT  INEXISTENT_PROPERTY  INTERFACE_FUNCTION_NOT_EMPTY  INTERFACE_METHOD_OVERRIDE  INVALID_INTERFACE_MEMBER_DECLARATION  MULTIPLE_VAR_DEF  NOT_A_CONSTRUCTOR  NOT_CALLABLE  UNEXPECTED_TOKEN  UNKNOWN_EXPR_TYPE  UNKNOWN_OVERRIDE  UNRESOLVED_TYPE  WRONG_ARGUMENT_COUNT  diagnosticType  InferJSDocInfo  inferJSDocInfo  	projects/Closure66/src/com/google/javascript/jscomp/TypeCheck.java	0.21320071635561041	939	939	2	replace	Node  rightChild  =  leftType!=  null?  leftType.getString()  :  var.getLastChild();	  Node    rightChild    =    leftType!=    null?    leftType.getLastChild()    :    var.getString();    	non-compiled	[CE]  orphaned  case	29	None	replace
77	[BUG]  [BUGGY]  JSType  leftType  =  getJSType(leftChild);  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      Var  var  =  t.getScope().getVar(lvalue.getString());  if  (var  !=  null)  {  if  (var.isTypeInferred())  {  return;  }  }  }  JSType  leftType  =  getJSType(lvalue);      [BUGGY]  JSType  leftType  =  getJSType(leftChild);  [BUGGY]      JSType  rightType  =  getJSType(rightChild);  if  (validator.expectCanAssignTo(  t,  assign,  rightType,  leftType,       "assignment     "))  {  ensureTyped(t,  assign,  rightType);  }  else  {  ensureTyped(t,  assign);  }  }  [CLASS]  TypeCheck  [METHOD]  visitAssign  [RETURN_TYPE]  void  NodeTraversal  t  Node  assign  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  jsType  leftType  objectJsType  rightType  rvalueType  NodeTraversal  t  DiagnosticGroup  ALL_DIAGNOSTICS  CheckLevel  reportMissingOverride  reportUnknownTypes  Var  var  Node  assign  lvalue  object  object2  rightChild  rvalue  FunctionType  functionType  ScopeCreator  scopeCreator  String  OVERRIDING_PROTOTYPE_WITH_NON_OBJECT  functionPrivateName  message  property  property2  JSDocInfo  info  int  noTypeCheckSection  nullCount  typedCount  unknownCount  TypeValidator  validator  ObjectType  type  AbstractCompiler  compiler  JSTypeRegistry  typeRegistry  boolean  enterSection  externs  inExterns  report  reportMissingProperties  typeable  Scope  outerScope  topScope  DiagnosticType  BAD_DELETE  BAD_IMPLEMENTED_TYPE  BIT_OPERATION  CONFLICTING_EXTENDED_TYPE  CONFLICTING_IMPLEMENTED_TYPE  CONSTRUCTOR_NOT_CALLABLE  DETERMINISTIC_TEST  DETERMINISTIC_TEST_NO_RESULT  ENUM_DUP  ENUM_NOT_CONSTANT  EXPECTED_THIS_TYPE  FUNCTION_MASKS_VARIABLE  HIDDEN_INTERFACE_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY_MISMATCH  ILLEGAL_IMPLICIT_CAST  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE  INEXISTENT_ENUM_ELEMENT  INEXISTENT_PROPERTY  INTERFACE_FUNCTION_NOT_EMPTY  INTERFACE_METHOD_OVERRIDE  INVALID_INTERFACE_MEMBER_DECLARATION  MULTIPLE_VAR_DEF  NOT_A_CONSTRUCTOR  NOT_CALLABLE  UNEXPECTED_TOKEN  UNKNOWN_EXPR_TYPE  UNKNOWN_OVERRIDE  UNRESOLVED_TYPE  WRONG_ARGUMENT_COUNT  diagnosticType  InferJSDocInfo  inferJSDocInfo  	projects/Closure66/src/com/google/javascript/jscomp/TypeCheck.java	0.21320071635561041	939	939	2	replace	JSType  leftType  =  getJSType(leftChild);	  JSType    rightType    =    getJSType(leftChild);    	non-compiled	[CE]  orphaned  case	38	None	replace
78	[BUG]  [BUGGY]  JSType  rightType  =  getJSType(lvalue);  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      Var  var  =  t.getScope().getVar(lvalue.getString());  if  (var  !=  null)  {  if  (var.isTypeInferred())  {  return;  }  }  }  JSType  leftType  =  getJSType(lvalue);      [BUGGY]  JSType  rightType  =  getJSType(lvalue);  [BUGGY]      JSType  rightType  =  getJSType(rightChild);  if  (validator.expectCanAssignTo(  t,  assign,  rightType,  leftType,       "assignment     "))  {  ensureTyped(t,  assign,  rightType);  }  else  {  ensureTyped(t,  assign);  }  }  [CLASS]  TypeCheck  [METHOD]  visitAssign  [RETURN_TYPE]  void  NodeTraversal  t  Node  assign  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  jsType  leftType  objectJsType  rightType  rvalueType  NodeTraversal  t  DiagnosticGroup  ALL_DIAGNOSTICS  CheckLevel  reportMissingOverride  reportUnknownTypes  Var  var  Node  assign  lvalue  object  object2  rightChild  rvalue  FunctionType  functionType  ScopeCreator  scopeCreator  String  OVERRIDING_PROTOTYPE_WITH_NON_OBJECT  functionPrivateName  message  property  property2  JSDocInfo  info  int  noTypeCheckSection  nullCount  typedCount  unknownCount  TypeValidator  validator  ObjectType  type  AbstractCompiler  compiler  JSTypeRegistry  typeRegistry  boolean  enterSection  externs  inExterns  report  reportMissingProperties  typeable  Scope  outerScope  topScope  DiagnosticType  BAD_DELETE  BAD_IMPLEMENTED_TYPE  BIT_OPERATION  CONFLICTING_EXTENDED_TYPE  CONFLICTING_IMPLEMENTED_TYPE  CONSTRUCTOR_NOT_CALLABLE  DETERMINISTIC_TEST  DETERMINISTIC_TEST_NO_RESULT  ENUM_DUP  ENUM_NOT_CONSTANT  EXPECTED_THIS_TYPE  FUNCTION_MASKS_VARIABLE  HIDDEN_INTERFACE_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY_MISMATCH  ILLEGAL_IMPLICIT_CAST  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE  INEXISTENT_ENUM_ELEMENT  INEXISTENT_PROPERTY  INTERFACE_FUNCTION_NOT_EMPTY  INTERFACE_METHOD_OVERRIDE  INVALID_INTERFACE_MEMBER_DECLARATION  MULTIPLE_VAR_DEF  NOT_A_CONSTRUCTOR  NOT_CALLABLE  UNEXPECTED_TOKEN  UNKNOWN_EXPR_TYPE  UNKNOWN_OVERRIDE  UNRESOLVED_TYPE  WRONG_ARGUMENT_COUNT  diagnosticType  InferJSDocInfo  inferJSDocInfo  	projects/Closure66/src/com/google/javascript/jscomp/TypeCheck.java	0.21320071635561041	939	939	2	replace	JSType  rightType  =  getJSType(lvalue);	  JSType    rightType    =    getJSType(leftChild);    	non-compiled	[CE]  orphaned  case	38	None	replace
79	[BUG]  [BUGGY]  JSType  rightType  =  getJSType(leftChild,  rvalue);  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]      Var  var  =  t.getScope().getVar(lvalue.getString());  if  (var  !=  null)  {  if  (var.isTypeInferred())  {  return;  }  }  }  JSType  leftType  =  getJSType(lvalue);      [BUGGY]  JSType  rightType  =  getJSType(leftChild,  rvalue);  [BUGGY]      JSType  rightType  =  getJSType(rightChild);  if  (validator.expectCanAssignTo(  t,  assign,  rightType,  leftType,       "assignment     "))  {  ensureTyped(t,  assign,  rightType);  }  else  {  ensureTyped(t,  assign);  }  }  [CLASS]  TypeCheck  [METHOD]  visitAssign  [RETURN_TYPE]  void  NodeTraversal  t  Node  assign  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  jsType  leftType  objectJsType  rightType  rvalueType  NodeTraversal  t  DiagnosticGroup  ALL_DIAGNOSTICS  CheckLevel  reportMissingOverride  reportUnknownTypes  Var  var  Node  assign  lvalue  object  object2  rightChild  rvalue  FunctionType  functionType  ScopeCreator  scopeCreator  String  OVERRIDING_PROTOTYPE_WITH_NON_OBJECT  functionPrivateName  message  property  property2  JSDocInfo  info  int  noTypeCheckSection  nullCount  typedCount  unknownCount  TypeValidator  validator  ObjectType  type  AbstractCompiler  compiler  JSTypeRegistry  typeRegistry  boolean  enterSection  externs  inExterns  report  reportMissingProperties  typeable  Scope  outerScope  topScope  DiagnosticType  BAD_DELETE  BAD_IMPLEMENTED_TYPE  BIT_OPERATION  CONFLICTING_EXTENDED_TYPE  CONFLICTING_IMPLEMENTED_TYPE  CONSTRUCTOR_NOT_CALLABLE  DETERMINISTIC_TEST  DETERMINISTIC_TEST_NO_RESULT  ENUM_DUP  ENUM_NOT_CONSTANT  EXPECTED_THIS_TYPE  FUNCTION_MASKS_VARIABLE  HIDDEN_INTERFACE_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY_MISMATCH  ILLEGAL_IMPLICIT_CAST  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE  INEXISTENT_ENUM_ELEMENT  INEXISTENT_PROPERTY  INTERFACE_FUNCTION_NOT_EMPTY  INTERFACE_METHOD_OVERRIDE  INVALID_INTERFACE_MEMBER_DECLARATION  MULTIPLE_VAR_DEF  NOT_A_CONSTRUCTOR  NOT_CALLABLE  UNEXPECTED_TOKEN  UNKNOWN_EXPR_TYPE  UNKNOWN_OVERRIDE  UNRESOLVED_TYPE  WRONG_ARGUMENT_COUNT  diagnosticType  InferJSDocInfo  inferJSDocInfo  	projects/Closure66/src/com/google/javascript/jscomp/TypeCheck.java	0.21320071635561041	939	939	2	replace	JSType  rightType  =  getJSType(leftChild,  rvalue);	  JSType    rightType    =    getJSType(leftChild);    	non-compiled	[CE]  orphaned  case	38	None	replace
80	[BUG]  [BUGGY]  Node  rightChild  =  var.removeLastChild();  [CE]  orphaned  case  [FE]            AssertionFailedError      [CONTEXT]      Var  var  =  t.getScope().getVar(lvalue.getString());  if  (var  !=  null)  {  if  (var.isTypeInferred())  {  return;  }  }  }  JSType  leftType  =  getJSType(lvalue);      [BUGGY]  Node  rightChild  =  var.removeLastChild();  [BUGGY]      JSType  rightType  =  getJSType(rightChild);  if  (validator.expectCanAssignTo(  t,  assign,  rightType,  leftType,       "assignment     "))  {  ensureTyped(t,  assign,  rightType);  }  else  {  ensureTyped(t,  assign);  }  }  [CLASS]  TypeCheck  [METHOD]  visitAssign  [RETURN_TYPE]  void  NodeTraversal  t  Node  assign  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  jsType  leftType  objectJsType  rightType  rvalueType  NodeTraversal  t  DiagnosticGroup  ALL_DIAGNOSTICS  CheckLevel  reportMissingOverride  reportUnknownTypes  Var  var  Node  assign  lvalue  object  object2  rightChild  rvalue  FunctionType  functionType  ScopeCreator  scopeCreator  String  OVERRIDING_PROTOTYPE_WITH_NON_OBJECT  functionPrivateName  message  property  property2  JSDocInfo  info  int  noTypeCheckSection  nullCount  typedCount  unknownCount  TypeValidator  validator  ObjectType  type  AbstractCompiler  compiler  JSTypeRegistry  typeRegistry  boolean  enterSection  externs  inExterns  report  reportMissingProperties  typeable  Scope  outerScope  topScope  DiagnosticType  BAD_DELETE  BAD_IMPLEMENTED_TYPE  BIT_OPERATION  CONFLICTING_EXTENDED_TYPE  CONFLICTING_IMPLEMENTED_TYPE  CONSTRUCTOR_NOT_CALLABLE  DETERMINISTIC_TEST  DETERMINISTIC_TEST_NO_RESULT  ENUM_DUP  ENUM_NOT_CONSTANT  EXPECTED_THIS_TYPE  FUNCTION_MASKS_VARIABLE  HIDDEN_INTERFACE_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY_MISMATCH  ILLEGAL_IMPLICIT_CAST  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE  INEXISTENT_ENUM_ELEMENT  INEXISTENT_PROPERTY  INTERFACE_FUNCTION_NOT_EMPTY  INTERFACE_METHOD_OVERRIDE  INVALID_INTERFACE_MEMBER_DECLARATION  MULTIPLE_VAR_DEF  NOT_A_CONSTRUCTOR  NOT_CALLABLE  UNEXPECTED_TOKEN  UNKNOWN_EXPR_TYPE  UNKNOWN_OVERRIDE  UNRESOLVED_TYPE  WRONG_ARGUMENT_COUNT  diagnosticType  InferJSDocInfo  inferJSDocInfo  	projects/Closure66/src/com/google/javascript/jscomp/TypeCheck.java	0.21320071635561041	939	939	2	replace	Node  rightChild  =  var.removeLastChild();	  Node    rightChild    =    var.removeFirstChild();    	non-compiled	[CE]  orphaned  case	41	None	replace
81	[BUG]  [BUGGY]  Node  rightChild  =  var.next();  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      Var  var  =  t.getScope().getVar(lvalue.getString());  if  (var  !=  null)  {  if  (var.isTypeInferred())  {  return;  }  }  }  JSType  leftType  =  getJSType(lvalue);      [BUGGY]  Node  rightChild  =  var.next();  [BUGGY]      JSType  rightType  =  getJSType(rightChild);  if  (validator.expectCanAssignTo(  t,  assign,  rightType,  leftType,       "assignment     "))  {  ensureTyped(t,  assign,  rightType);  }  else  {  ensureTyped(t,  assign);  }  }  [CLASS]  TypeCheck  [METHOD]  visitAssign  [RETURN_TYPE]  void  NodeTraversal  t  Node  assign  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  jsType  leftType  objectJsType  rightType  rvalueType  NodeTraversal  t  DiagnosticGroup  ALL_DIAGNOSTICS  CheckLevel  reportMissingOverride  reportUnknownTypes  Var  var  Node  assign  lvalue  object  object2  rightChild  rvalue  FunctionType  functionType  ScopeCreator  scopeCreator  String  OVERRIDING_PROTOTYPE_WITH_NON_OBJECT  functionPrivateName  message  property  property2  JSDocInfo  info  int  noTypeCheckSection  nullCount  typedCount  unknownCount  TypeValidator  validator  ObjectType  type  AbstractCompiler  compiler  JSTypeRegistry  typeRegistry  boolean  enterSection  externs  inExterns  report  reportMissingProperties  typeable  Scope  outerScope  topScope  DiagnosticType  BAD_DELETE  BAD_IMPLEMENTED_TYPE  BIT_OPERATION  CONFLICTING_EXTENDED_TYPE  CONFLICTING_IMPLEMENTED_TYPE  CONSTRUCTOR_NOT_CALLABLE  DETERMINISTIC_TEST  DETERMINISTIC_TEST_NO_RESULT  ENUM_DUP  ENUM_NOT_CONSTANT  EXPECTED_THIS_TYPE  FUNCTION_MASKS_VARIABLE  HIDDEN_INTERFACE_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY_MISMATCH  ILLEGAL_IMPLICIT_CAST  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE  INEXISTENT_ENUM_ELEMENT  INEXISTENT_PROPERTY  INTERFACE_FUNCTION_NOT_EMPTY  INTERFACE_METHOD_OVERRIDE  INVALID_INTERFACE_MEMBER_DECLARATION  MULTIPLE_VAR_DEF  NOT_A_CONSTRUCTOR  NOT_CALLABLE  UNEXPECTED_TOKEN  UNKNOWN_EXPR_TYPE  UNKNOWN_OVERRIDE  UNRESOLVED_TYPE  WRONG_ARGUMENT_COUNT  diagnosticType  InferJSDocInfo  inferJSDocInfo  	projects/Closure66/src/com/google/javascript/jscomp/TypeCheck.java	0.21320071635561041	939	939	2	replace	Node  rightChild  =  var.next();	  Node    rightChild    =    var.removeFirstChild();    	non-compiled	[CE]  orphaned  case	41	None	replace
82	[BUG]  [BUGGY]  Node  leftChild  =  t.getScope().getVar(lvalue.getString());  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      Var  var  =  t.getScope().getVar(lvalue.getString());  if  (var  !=  null)  {  if  (var.isTypeInferred())  {  return;  }  }  }  JSType  leftType  =  getJSType(lvalue);      [BUGGY]  Node  leftChild  =  t.getScope().getVar(lvalue.getString());  [BUGGY]      JSType  rightType  =  getJSType(rightChild);  if  (validator.expectCanAssignTo(  t,  assign,  rightType,  leftType,       "assignment     "))  {  ensureTyped(t,  assign,  rightType);  }  else  {  ensureTyped(t,  assign);  }  }  [CLASS]  TypeCheck  [METHOD]  visitAssign  [RETURN_TYPE]  void  NodeTraversal  t  Node  assign  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  jsType  leftType  objectJsType  rightType  rvalueType  NodeTraversal  t  DiagnosticGroup  ALL_DIAGNOSTICS  CheckLevel  reportMissingOverride  reportUnknownTypes  Var  var  Node  assign  lvalue  object  object2  rightChild  rvalue  FunctionType  functionType  ScopeCreator  scopeCreator  String  OVERRIDING_PROTOTYPE_WITH_NON_OBJECT  functionPrivateName  message  property  property2  JSDocInfo  info  int  noTypeCheckSection  nullCount  typedCount  unknownCount  TypeValidator  validator  ObjectType  type  AbstractCompiler  compiler  JSTypeRegistry  typeRegistry  boolean  enterSection  externs  inExterns  report  reportMissingProperties  typeable  Scope  outerScope  topScope  DiagnosticType  BAD_DELETE  BAD_IMPLEMENTED_TYPE  BIT_OPERATION  CONFLICTING_EXTENDED_TYPE  CONFLICTING_IMPLEMENTED_TYPE  CONSTRUCTOR_NOT_CALLABLE  DETERMINISTIC_TEST  DETERMINISTIC_TEST_NO_RESULT  ENUM_DUP  ENUM_NOT_CONSTANT  EXPECTED_THIS_TYPE  FUNCTION_MASKS_VARIABLE  HIDDEN_INTERFACE_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY_MISMATCH  ILLEGAL_IMPLICIT_CAST  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE  INEXISTENT_ENUM_ELEMENT  INEXISTENT_PROPERTY  INTERFACE_FUNCTION_NOT_EMPTY  INTERFACE_METHOD_OVERRIDE  INVALID_INTERFACE_MEMBER_DECLARATION  MULTIPLE_VAR_DEF  NOT_A_CONSTRUCTOR  NOT_CALLABLE  UNEXPECTED_TOKEN  UNKNOWN_EXPR_TYPE  UNKNOWN_OVERRIDE  UNRESOLVED_TYPE  WRONG_ARGUMENT_COUNT  diagnosticType  InferJSDocInfo  inferJSDocInfo  	projects/Closure66/src/com/google/javascript/jscomp/TypeCheck.java	0.21320071635561041	939	939	2	replace	Node  leftChild  =  t.getScope().getVar(lvalue.getString());	  Node    rightChild    =    t.getScope().getVar(lvalue.getString()    +    1);    	non-compiled	[CE]  orphaned  case	9	None	replace
83	[BUG]  [BUGGY]  Node  rightChild  =  t.getScope().getVar(Lvalue.getString());  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      Var  var  =  t.getScope().getVar(lvalue.getString());  if  (var  !=  null)  {  if  (var.isTypeInferred())  {  return;  }  }  }  JSType  leftType  =  getJSType(lvalue);      [BUGGY]  Node  rightChild  =  t.getScope().getVar(Lvalue.getString());  [BUGGY]      JSType  rightType  =  getJSType(rightChild);  if  (validator.expectCanAssignTo(  t,  assign,  rightType,  leftType,       "assignment     "))  {  ensureTyped(t,  assign,  rightType);  }  else  {  ensureTyped(t,  assign);  }  }  [CLASS]  TypeCheck  [METHOD]  visitAssign  [RETURN_TYPE]  void  NodeTraversal  t  Node  assign  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  jsType  leftType  objectJsType  rightType  rvalueType  NodeTraversal  t  DiagnosticGroup  ALL_DIAGNOSTICS  CheckLevel  reportMissingOverride  reportUnknownTypes  Var  var  Node  assign  lvalue  object  object2  rightChild  rvalue  FunctionType  functionType  ScopeCreator  scopeCreator  String  OVERRIDING_PROTOTYPE_WITH_NON_OBJECT  functionPrivateName  message  property  property2  JSDocInfo  info  int  noTypeCheckSection  nullCount  typedCount  unknownCount  TypeValidator  validator  ObjectType  type  AbstractCompiler  compiler  JSTypeRegistry  typeRegistry  boolean  enterSection  externs  inExterns  report  reportMissingProperties  typeable  Scope  outerScope  topScope  DiagnosticType  BAD_DELETE  BAD_IMPLEMENTED_TYPE  BIT_OPERATION  CONFLICTING_EXTENDED_TYPE  CONFLICTING_IMPLEMENTED_TYPE  CONSTRUCTOR_NOT_CALLABLE  DETERMINISTIC_TEST  DETERMINISTIC_TEST_NO_RESULT  ENUM_DUP  ENUM_NOT_CONSTANT  EXPECTED_THIS_TYPE  FUNCTION_MASKS_VARIABLE  HIDDEN_INTERFACE_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY_MISMATCH  ILLEGAL_IMPLICIT_CAST  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE  INEXISTENT_ENUM_ELEMENT  INEXISTENT_PROPERTY  INTERFACE_FUNCTION_NOT_EMPTY  INTERFACE_METHOD_OVERRIDE  INVALID_INTERFACE_MEMBER_DECLARATION  MULTIPLE_VAR_DEF  NOT_A_CONSTRUCTOR  NOT_CALLABLE  UNEXPECTED_TOKEN  UNKNOWN_EXPR_TYPE  UNKNOWN_OVERRIDE  UNRESOLVED_TYPE  WRONG_ARGUMENT_COUNT  diagnosticType  InferJSDocInfo  inferJSDocInfo  	projects/Closure66/src/com/google/javascript/jscomp/TypeCheck.java	0.21320071635561041	939	939	2	replace	Node  rightChild  =  t.getScope().getVar(Lvalue.getString());	  Node    rightChild    =    t.getScope().getVar(lvalue.getString()    +    1);    	non-compiled	[CE]  orphaned  case	9	None	replace
84	[BUG]  [BUGGY]  Node  rightChild  =  t.getScope().getVar(lvalue.getString()));  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      Var  var  =  t.getScope().getVar(lvalue.getString());  if  (var  !=  null)  {  if  (var.isTypeInferred())  {  return;  }  }  }  JSType  leftType  =  getJSType(lvalue);      [BUGGY]  Node  rightChild  =  t.getScope().getVar(lvalue.getString()));  [BUGGY]      JSType  rightType  =  getJSType(rightChild);  if  (validator.expectCanAssignTo(  t,  assign,  rightType,  leftType,       "assignment     "))  {  ensureTyped(t,  assign,  rightType);  }  else  {  ensureTyped(t,  assign);  }  }  [CLASS]  TypeCheck  [METHOD]  visitAssign  [RETURN_TYPE]  void  NodeTraversal  t  Node  assign  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  jsType  leftType  objectJsType  rightType  rvalueType  NodeTraversal  t  DiagnosticGroup  ALL_DIAGNOSTICS  CheckLevel  reportMissingOverride  reportUnknownTypes  Var  var  Node  assign  lvalue  object  object2  rightChild  rvalue  FunctionType  functionType  ScopeCreator  scopeCreator  String  OVERRIDING_PROTOTYPE_WITH_NON_OBJECT  functionPrivateName  message  property  property2  JSDocInfo  info  int  noTypeCheckSection  nullCount  typedCount  unknownCount  TypeValidator  validator  ObjectType  type  AbstractCompiler  compiler  JSTypeRegistry  typeRegistry  boolean  enterSection  externs  inExterns  report  reportMissingProperties  typeable  Scope  outerScope  topScope  DiagnosticType  BAD_DELETE  BAD_IMPLEMENTED_TYPE  BIT_OPERATION  CONFLICTING_EXTENDED_TYPE  CONFLICTING_IMPLEMENTED_TYPE  CONSTRUCTOR_NOT_CALLABLE  DETERMINISTIC_TEST  DETERMINISTIC_TEST_NO_RESULT  ENUM_DUP  ENUM_NOT_CONSTANT  EXPECTED_THIS_TYPE  FUNCTION_MASKS_VARIABLE  HIDDEN_INTERFACE_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY_MISMATCH  ILLEGAL_IMPLICIT_CAST  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE  INEXISTENT_ENUM_ELEMENT  INEXISTENT_PROPERTY  INTERFACE_FUNCTION_NOT_EMPTY  INTERFACE_METHOD_OVERRIDE  INVALID_INTERFACE_MEMBER_DECLARATION  MULTIPLE_VAR_DEF  NOT_A_CONSTRUCTOR  NOT_CALLABLE  UNEXPECTED_TOKEN  UNKNOWN_EXPR_TYPE  UNKNOWN_OVERRIDE  UNRESOLVED_TYPE  WRONG_ARGUMENT_COUNT  diagnosticType  InferJSDocInfo  inferJSDocInfo  	projects/Closure66/src/com/google/javascript/jscomp/TypeCheck.java	0.21320071635561041	939	939	2	replace	Node  rightChild  =  t.getScope().getVar(lvalue.getString()));	  Node    rightChild    =    t.getScope().getVar(lvalue.getString()    +    1);    	non-compiled	[CE]  orphaned  case	9	None	replace
85	[BUG]  [BUGGY]  Node  rightChild  =  var.getRight();  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]      Var  var  =  t.getScope().getVar(lvalue.getString());  if  (var  !=  null)  {  if  (var.isTypeInferred())  {  return;  }  }  }  JSType  leftType  =  getJSType(lvalue);      [BUGGY]  Node  rightChild  =  var.getRight();  [BUGGY]      JSType  rightType  =  getJSType(rightChild);  if  (validator.expectCanAssignTo(  t,  assign,  rightType,  leftType,       "assignment     "))  {  ensureTyped(t,  assign,  rightType);  }  else  {  ensureTyped(t,  assign);  }  }  [CLASS]  TypeCheck  [METHOD]  visitAssign  [RETURN_TYPE]  void  NodeTraversal  t  Node  assign  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  jsType  leftType  objectJsType  rightType  rvalueType  NodeTraversal  t  DiagnosticGroup  ALL_DIAGNOSTICS  CheckLevel  reportMissingOverride  reportUnknownTypes  Var  var  Node  assign  lvalue  object  object2  rightChild  rvalue  FunctionType  functionType  ScopeCreator  scopeCreator  String  OVERRIDING_PROTOTYPE_WITH_NON_OBJECT  functionPrivateName  message  property  property2  JSDocInfo  info  int  noTypeCheckSection  nullCount  typedCount  unknownCount  TypeValidator  validator  ObjectType  type  AbstractCompiler  compiler  JSTypeRegistry  typeRegistry  boolean  enterSection  externs  inExterns  report  reportMissingProperties  typeable  Scope  outerScope  topScope  DiagnosticType  BAD_DELETE  BAD_IMPLEMENTED_TYPE  BIT_OPERATION  CONFLICTING_EXTENDED_TYPE  CONFLICTING_IMPLEMENTED_TYPE  CONSTRUCTOR_NOT_CALLABLE  DETERMINISTIC_TEST  DETERMINISTIC_TEST_NO_RESULT  ENUM_DUP  ENUM_NOT_CONSTANT  EXPECTED_THIS_TYPE  FUNCTION_MASKS_VARIABLE  HIDDEN_INTERFACE_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY_MISMATCH  ILLEGAL_IMPLICIT_CAST  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE  INEXISTENT_ENUM_ELEMENT  INEXISTENT_PROPERTY  INTERFACE_FUNCTION_NOT_EMPTY  INTERFACE_METHOD_OVERRIDE  INVALID_INTERFACE_MEMBER_DECLARATION  MULTIPLE_VAR_DEF  NOT_A_CONSTRUCTOR  NOT_CALLABLE  UNEXPECTED_TOKEN  UNKNOWN_EXPR_TYPE  UNKNOWN_OVERRIDE  UNRESOLVED_TYPE  WRONG_ARGUMENT_COUNT  diagnosticType  InferJSDocInfo  inferJSDocInfo  	projects/Closure66/src/com/google/javascript/jscomp/TypeCheck.java	0.21320071635561041	939	939	2	replace	Node  rightChild  =  var.getRight();	  Node    rightChild    =    var.getNext();    	non-compiled	[CE]  orphaned  case	17	None	replace
86	[BUG]  [BUGGY]  Node  rightChild  =  var.getParent();  [CE]  orphaned  case  [FE]                                AssertionFailedError      [CONTEXT]      Var  var  =  t.getScope().getVar(lvalue.getString());  if  (var  !=  null)  {  if  (var.isTypeInferred())  {  return;  }  }  }  JSType  leftType  =  getJSType(lvalue);      [BUGGY]  Node  rightChild  =  var.getParent();  [BUGGY]      JSType  rightType  =  getJSType(rightChild);  if  (validator.expectCanAssignTo(  t,  assign,  rightType,  leftType,       "assignment     "))  {  ensureTyped(t,  assign,  rightType);  }  else  {  ensureTyped(t,  assign);  }  }  [CLASS]  TypeCheck  [METHOD]  visitAssign  [RETURN_TYPE]  void  NodeTraversal  t  Node  assign  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  jsType  leftType  objectJsType  rightType  rvalueType  NodeTraversal  t  DiagnosticGroup  ALL_DIAGNOSTICS  CheckLevel  reportMissingOverride  reportUnknownTypes  Var  var  Node  assign  lvalue  object  object2  rightChild  rvalue  FunctionType  functionType  ScopeCreator  scopeCreator  String  OVERRIDING_PROTOTYPE_WITH_NON_OBJECT  functionPrivateName  message  property  property2  JSDocInfo  info  int  noTypeCheckSection  nullCount  typedCount  unknownCount  TypeValidator  validator  ObjectType  type  AbstractCompiler  compiler  JSTypeRegistry  typeRegistry  boolean  enterSection  externs  inExterns  report  reportMissingProperties  typeable  Scope  outerScope  topScope  DiagnosticType  BAD_DELETE  BAD_IMPLEMENTED_TYPE  BIT_OPERATION  CONFLICTING_EXTENDED_TYPE  CONFLICTING_IMPLEMENTED_TYPE  CONSTRUCTOR_NOT_CALLABLE  DETERMINISTIC_TEST  DETERMINISTIC_TEST_NO_RESULT  ENUM_DUP  ENUM_NOT_CONSTANT  EXPECTED_THIS_TYPE  FUNCTION_MASKS_VARIABLE  HIDDEN_INTERFACE_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY_MISMATCH  ILLEGAL_IMPLICIT_CAST  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE  INEXISTENT_ENUM_ELEMENT  INEXISTENT_PROPERTY  INTERFACE_FUNCTION_NOT_EMPTY  INTERFACE_METHOD_OVERRIDE  INVALID_INTERFACE_MEMBER_DECLARATION  MULTIPLE_VAR_DEF  NOT_A_CONSTRUCTOR  NOT_CALLABLE  UNEXPECTED_TOKEN  UNKNOWN_EXPR_TYPE  UNKNOWN_OVERRIDE  UNRESOLVED_TYPE  WRONG_ARGUMENT_COUNT  diagnosticType  InferJSDocInfo  inferJSDocInfo  	projects/Closure66/src/com/google/javascript/jscomp/TypeCheck.java	0.21320071635561041	939	939	2	replace	Node  rightChild  =  var.getParent();	  Node    rightChild    =    var.getNext();    	non-compiled	[CE]  orphaned  case	17	None	replace
87	[BUG]  [BUGGY]  Node  rightChild  =  t.getLowerCase();  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      Var  var  =  t.getScope().getVar(lvalue.getString());  if  (var  !=  null)  {  if  (var.isTypeInferred())  {  return;  }  }  }  JSType  leftType  =  getJSType(lvalue);      [BUGGY]  Node  rightChild  =  t.getLowerCase();  [BUGGY]      JSType  rightType  =  getJSType(rightChild);  if  (validator.expectCanAssignTo(  t,  assign,  rightType,  leftType,       "assignment     "))  {  ensureTyped(t,  assign,  rightType);  }  else  {  ensureTyped(t,  assign);  }  }  [CLASS]  TypeCheck  [METHOD]  visitAssign  [RETURN_TYPE]  void  NodeTraversal  t  Node  assign  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  jsType  leftType  objectJsType  rightType  rvalueType  NodeTraversal  t  DiagnosticGroup  ALL_DIAGNOSTICS  CheckLevel  reportMissingOverride  reportUnknownTypes  Var  var  Node  assign  lvalue  object  object2  rightChild  rvalue  FunctionType  functionType  ScopeCreator  scopeCreator  String  OVERRIDING_PROTOTYPE_WITH_NON_OBJECT  functionPrivateName  message  property  property2  JSDocInfo  info  int  noTypeCheckSection  nullCount  typedCount  unknownCount  TypeValidator  validator  ObjectType  type  AbstractCompiler  compiler  JSTypeRegistry  typeRegistry  boolean  enterSection  externs  inExterns  report  reportMissingProperties  typeable  Scope  outerScope  topScope  DiagnosticType  BAD_DELETE  BAD_IMPLEMENTED_TYPE  BIT_OPERATION  CONFLICTING_EXTENDED_TYPE  CONFLICTING_IMPLEMENTED_TYPE  CONSTRUCTOR_NOT_CALLABLE  DETERMINISTIC_TEST  DETERMINISTIC_TEST_NO_RESULT  ENUM_DUP  ENUM_NOT_CONSTANT  EXPECTED_THIS_TYPE  FUNCTION_MASKS_VARIABLE  HIDDEN_INTERFACE_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY_MISMATCH  ILLEGAL_IMPLICIT_CAST  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE  INEXISTENT_ENUM_ELEMENT  INEXISTENT_PROPERTY  INTERFACE_FUNCTION_NOT_EMPTY  INTERFACE_METHOD_OVERRIDE  INVALID_INTERFACE_MEMBER_DECLARATION  MULTIPLE_VAR_DEF  NOT_A_CONSTRUCTOR  NOT_CALLABLE  UNEXPECTED_TOKEN  UNKNOWN_EXPR_TYPE  UNKNOWN_OVERRIDE  UNRESOLVED_TYPE  WRONG_ARGUMENT_COUNT  diagnosticType  InferJSDocInfo  inferJSDocInfo  	projects/Closure66/src/com/google/javascript/jscomp/TypeCheck.java	0.21320071635561041	939	939	2	replace	Node  rightChild  =  t.getLowerCase();	  Node    rightChild    =    t.getFirstChild();    	non-compiled	[CE]  orphaned  case	24	None	replace
88	[BUG]  [BUGGY]  Node  rightChild  =  t.getRawParent();  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      Var  var  =  t.getScope().getVar(lvalue.getString());  if  (var  !=  null)  {  if  (var.isTypeInferred())  {  return;  }  }  }  JSType  leftType  =  getJSType(lvalue);      [BUGGY]  Node  rightChild  =  t.getRawParent();  [BUGGY]      JSType  rightType  =  getJSType(rightChild);  if  (validator.expectCanAssignTo(  t,  assign,  rightType,  leftType,       "assignment     "))  {  ensureTyped(t,  assign,  rightType);  }  else  {  ensureTyped(t,  assign);  }  }  [CLASS]  TypeCheck  [METHOD]  visitAssign  [RETURN_TYPE]  void  NodeTraversal  t  Node  assign  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  jsType  leftType  objectJsType  rightType  rvalueType  NodeTraversal  t  DiagnosticGroup  ALL_DIAGNOSTICS  CheckLevel  reportMissingOverride  reportUnknownTypes  Var  var  Node  assign  lvalue  object  object2  rightChild  rvalue  FunctionType  functionType  ScopeCreator  scopeCreator  String  OVERRIDING_PROTOTYPE_WITH_NON_OBJECT  functionPrivateName  message  property  property2  JSDocInfo  info  int  noTypeCheckSection  nullCount  typedCount  unknownCount  TypeValidator  validator  ObjectType  type  AbstractCompiler  compiler  JSTypeRegistry  typeRegistry  boolean  enterSection  externs  inExterns  report  reportMissingProperties  typeable  Scope  outerScope  topScope  DiagnosticType  BAD_DELETE  BAD_IMPLEMENTED_TYPE  BIT_OPERATION  CONFLICTING_EXTENDED_TYPE  CONFLICTING_IMPLEMENTED_TYPE  CONSTRUCTOR_NOT_CALLABLE  DETERMINISTIC_TEST  DETERMINISTIC_TEST_NO_RESULT  ENUM_DUP  ENUM_NOT_CONSTANT  EXPECTED_THIS_TYPE  FUNCTION_MASKS_VARIABLE  HIDDEN_INTERFACE_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY_MISMATCH  ILLEGAL_IMPLICIT_CAST  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE  INEXISTENT_ENUM_ELEMENT  INEXISTENT_PROPERTY  INTERFACE_FUNCTION_NOT_EMPTY  INTERFACE_METHOD_OVERRIDE  INVALID_INTERFACE_MEMBER_DECLARATION  MULTIPLE_VAR_DEF  NOT_A_CONSTRUCTOR  NOT_CALLABLE  UNEXPECTED_TOKEN  UNKNOWN_EXPR_TYPE  UNKNOWN_OVERRIDE  UNRESOLVED_TYPE  WRONG_ARGUMENT_COUNT  diagnosticType  InferJSDocInfo  inferJSDocInfo  	projects/Closure66/src/com/google/javascript/jscomp/TypeCheck.java	0.21320071635561041	939	939	2	replace	Node  rightChild  =  t.getRawParent();	  Node    rightChild    =    t.getFirstChild();    	non-compiled	[CE]  orphaned  case	24	None	replace
89	[BUG]  [BUGGY]  Node  rightChild  =  t.getScope().getFirstChild().getNext();  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      Var  var  =  t.getScope().getVar(lvalue.getString());  if  (var  !=  null)  {  if  (var.isTypeInferred())  {  return;  }  }  }  JSType  leftType  =  getJSType(lvalue);      [BUGGY]  Node  rightChild  =  t.getScope().getFirstChild().getNext();  [BUGGY]      JSType  rightType  =  getJSType(rightChild);  if  (validator.expectCanAssignTo(  t,  assign,  rightType,  leftType,       "assignment     "))  {  ensureTyped(t,  assign,  rightType);  }  else  {  ensureTyped(t,  assign);  }  }  [CLASS]  TypeCheck  [METHOD]  visitAssign  [RETURN_TYPE]  void  NodeTraversal  t  Node  assign  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  jsType  leftType  objectJsType  rightType  rvalueType  NodeTraversal  t  DiagnosticGroup  ALL_DIAGNOSTICS  CheckLevel  reportMissingOverride  reportUnknownTypes  Var  var  Node  assign  lvalue  object  object2  rightChild  rvalue  FunctionType  functionType  ScopeCreator  scopeCreator  String  OVERRIDING_PROTOTYPE_WITH_NON_OBJECT  functionPrivateName  message  property  property2  JSDocInfo  info  int  noTypeCheckSection  nullCount  typedCount  unknownCount  TypeValidator  validator  ObjectType  type  AbstractCompiler  compiler  JSTypeRegistry  typeRegistry  boolean  enterSection  externs  inExterns  report  reportMissingProperties  typeable  Scope  outerScope  topScope  DiagnosticType  BAD_DELETE  BAD_IMPLEMENTED_TYPE  BIT_OPERATION  CONFLICTING_EXTENDED_TYPE  CONFLICTING_IMPLEMENTED_TYPE  CONSTRUCTOR_NOT_CALLABLE  DETERMINISTIC_TEST  DETERMINISTIC_TEST_NO_RESULT  ENUM_DUP  ENUM_NOT_CONSTANT  EXPECTED_THIS_TYPE  FUNCTION_MASKS_VARIABLE  HIDDEN_INTERFACE_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY_MISMATCH  ILLEGAL_IMPLICIT_CAST  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE  INEXISTENT_ENUM_ELEMENT  INEXISTENT_PROPERTY  INTERFACE_FUNCTION_NOT_EMPTY  INTERFACE_METHOD_OVERRIDE  INVALID_INTERFACE_MEMBER_DECLARATION  MULTIPLE_VAR_DEF  NOT_A_CONSTRUCTOR  NOT_CALLABLE  UNEXPECTED_TOKEN  UNKNOWN_EXPR_TYPE  UNKNOWN_OVERRIDE  UNRESOLVED_TYPE  WRONG_ARGUMENT_COUNT  diagnosticType  InferJSDocInfo  inferJSDocInfo  	projects/Closure66/src/com/google/javascript/jscomp/TypeCheck.java	0.21320071635561041	939	939	2	replace	Node  rightChild  =  t.getScope().getFirstChild().getNext();	  Node    rightChild    =    t.getScope().getLastChild().getNext();    	non-compiled	[CE]  orphaned  case	6	None	replace
90	[BUG]  [BUGGY]  Node  rightChild  =  t.getScope().getLastChild().getParent();  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]      Var  var  =  t.getScope().getVar(lvalue.getString());  if  (var  !=  null)  {  if  (var.isTypeInferred())  {  return;  }  }  }  JSType  leftType  =  getJSType(lvalue);      [BUGGY]  Node  rightChild  =  t.getScope().getLastChild().getParent();  [BUGGY]      JSType  rightType  =  getJSType(rightChild);  if  (validator.expectCanAssignTo(  t,  assign,  rightType,  leftType,       "assignment     "))  {  ensureTyped(t,  assign,  rightType);  }  else  {  ensureTyped(t,  assign);  }  }  [CLASS]  TypeCheck  [METHOD]  visitAssign  [RETURN_TYPE]  void  NodeTraversal  t  Node  assign  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  jsType  leftType  objectJsType  rightType  rvalueType  NodeTraversal  t  DiagnosticGroup  ALL_DIAGNOSTICS  CheckLevel  reportMissingOverride  reportUnknownTypes  Var  var  Node  assign  lvalue  object  object2  rightChild  rvalue  FunctionType  functionType  ScopeCreator  scopeCreator  String  OVERRIDING_PROTOTYPE_WITH_NON_OBJECT  functionPrivateName  message  property  property2  JSDocInfo  info  int  noTypeCheckSection  nullCount  typedCount  unknownCount  TypeValidator  validator  ObjectType  type  AbstractCompiler  compiler  JSTypeRegistry  typeRegistry  boolean  enterSection  externs  inExterns  report  reportMissingProperties  typeable  Scope  outerScope  topScope  DiagnosticType  BAD_DELETE  BAD_IMPLEMENTED_TYPE  BIT_OPERATION  CONFLICTING_EXTENDED_TYPE  CONFLICTING_IMPLEMENTED_TYPE  CONSTRUCTOR_NOT_CALLABLE  DETERMINISTIC_TEST  DETERMINISTIC_TEST_NO_RESULT  ENUM_DUP  ENUM_NOT_CONSTANT  EXPECTED_THIS_TYPE  FUNCTION_MASKS_VARIABLE  HIDDEN_INTERFACE_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY_MISMATCH  ILLEGAL_IMPLICIT_CAST  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE  INEXISTENT_ENUM_ELEMENT  INEXISTENT_PROPERTY  INTERFACE_FUNCTION_NOT_EMPTY  INTERFACE_METHOD_OVERRIDE  INVALID_INTERFACE_MEMBER_DECLARATION  MULTIPLE_VAR_DEF  NOT_A_CONSTRUCTOR  NOT_CALLABLE  UNEXPECTED_TOKEN  UNKNOWN_EXPR_TYPE  UNKNOWN_OVERRIDE  UNRESOLVED_TYPE  WRONG_ARGUMENT_COUNT  diagnosticType  InferJSDocInfo  inferJSDocInfo  	projects/Closure66/src/com/google/javascript/jscomp/TypeCheck.java	0.21320071635561041	939	939	2	replace	Node  rightChild  =  t.getScope().getLastChild().getParent();	  Node    rightChild    =    t.getScope().getLastChild().getNext();    	non-compiled	[CE]  orphaned  case	6	None	replace
91	[BUG]  [BUGGY]  Node  rightChild  =  lvalue.getLastChild().getNext();  [CE]  orphaned  case  [FE]                                AssertionFailedError      [CONTEXT]      Var  var  =  t.getScope().getVar(lvalue.getString());  if  (var  !=  null)  {  if  (var.isTypeInferred())  {  return;  }  }  }  JSType  leftType  =  getJSType(lvalue);      [BUGGY]  Node  rightChild  =  lvalue.getLastChild().getNext();  [BUGGY]      JSType  rightType  =  getJSType(rightChild);  if  (validator.expectCanAssignTo(  t,  assign,  rightType,  leftType,       "assignment     "))  {  ensureTyped(t,  assign,  rightType);  }  else  {  ensureTyped(t,  assign);  }  }  [CLASS]  TypeCheck  [METHOD]  visitAssign  [RETURN_TYPE]  void  NodeTraversal  t  Node  assign  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  jsType  leftType  objectJsType  rightType  rvalueType  NodeTraversal  t  DiagnosticGroup  ALL_DIAGNOSTICS  CheckLevel  reportMissingOverride  reportUnknownTypes  Var  var  Node  assign  lvalue  object  object2  rightChild  rvalue  FunctionType  functionType  ScopeCreator  scopeCreator  String  OVERRIDING_PROTOTYPE_WITH_NON_OBJECT  functionPrivateName  message  property  property2  JSDocInfo  info  int  noTypeCheckSection  nullCount  typedCount  unknownCount  TypeValidator  validator  ObjectType  type  AbstractCompiler  compiler  JSTypeRegistry  typeRegistry  boolean  enterSection  externs  inExterns  report  reportMissingProperties  typeable  Scope  outerScope  topScope  DiagnosticType  BAD_DELETE  BAD_IMPLEMENTED_TYPE  BIT_OPERATION  CONFLICTING_EXTENDED_TYPE  CONFLICTING_IMPLEMENTED_TYPE  CONSTRUCTOR_NOT_CALLABLE  DETERMINISTIC_TEST  DETERMINISTIC_TEST_NO_RESULT  ENUM_DUP  ENUM_NOT_CONSTANT  EXPECTED_THIS_TYPE  FUNCTION_MASKS_VARIABLE  HIDDEN_INTERFACE_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY_MISMATCH  ILLEGAL_IMPLICIT_CAST  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE  INEXISTENT_ENUM_ELEMENT  INEXISTENT_PROPERTY  INTERFACE_FUNCTION_NOT_EMPTY  INTERFACE_METHOD_OVERRIDE  INVALID_INTERFACE_MEMBER_DECLARATION  MULTIPLE_VAR_DEF  NOT_A_CONSTRUCTOR  NOT_CALLABLE  UNEXPECTED_TOKEN  UNKNOWN_EXPR_TYPE  UNKNOWN_OVERRIDE  UNRESOLVED_TYPE  WRONG_ARGUMENT_COUNT  diagnosticType  InferJSDocInfo  inferJSDocInfo  	projects/Closure66/src/com/google/javascript/jscomp/TypeCheck.java	0.21320071635561041	939	939	2	replace	Node  rightChild  =  lvalue.getLastChild().getNext();	  Node    rightChild    =    t.getScope().getLastChild().getNext();    	non-compiled	[CE]  orphaned  case	6	None	replace
92	[BUG]  [BUGGY]  Node  rightChild  =  t.getScope().getLeastChild().getNext();  [CE]  orphaned  case  [FE]                                  AssertionFailedError      [CONTEXT]      Var  var  =  t.getScope().getVar(lvalue.getString());  if  (var  !=  null)  {  if  (var.isTypeInferred())  {  return;  }  }  }  JSType  leftType  =  getJSType(lvalue);      [BUGGY]  Node  rightChild  =  t.getScope().getLeastChild().getNext();  [BUGGY]      JSType  rightType  =  getJSType(rightChild);  if  (validator.expectCanAssignTo(  t,  assign,  rightType,  leftType,       "assignment     "))  {  ensureTyped(t,  assign,  rightType);  }  else  {  ensureTyped(t,  assign);  }  }  [CLASS]  TypeCheck  [METHOD]  visitAssign  [RETURN_TYPE]  void  NodeTraversal  t  Node  assign  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  jsType  leftType  objectJsType  rightType  rvalueType  NodeTraversal  t  DiagnosticGroup  ALL_DIAGNOSTICS  CheckLevel  reportMissingOverride  reportUnknownTypes  Var  var  Node  assign  lvalue  object  object2  rightChild  rvalue  FunctionType  functionType  ScopeCreator  scopeCreator  String  OVERRIDING_PROTOTYPE_WITH_NON_OBJECT  functionPrivateName  message  property  property2  JSDocInfo  info  int  noTypeCheckSection  nullCount  typedCount  unknownCount  TypeValidator  validator  ObjectType  type  AbstractCompiler  compiler  JSTypeRegistry  typeRegistry  boolean  enterSection  externs  inExterns  report  reportMissingProperties  typeable  Scope  outerScope  topScope  DiagnosticType  BAD_DELETE  BAD_IMPLEMENTED_TYPE  BIT_OPERATION  CONFLICTING_EXTENDED_TYPE  CONFLICTING_IMPLEMENTED_TYPE  CONSTRUCTOR_NOT_CALLABLE  DETERMINISTIC_TEST  DETERMINISTIC_TEST_NO_RESULT  ENUM_DUP  ENUM_NOT_CONSTANT  EXPECTED_THIS_TYPE  FUNCTION_MASKS_VARIABLE  HIDDEN_INTERFACE_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY_MISMATCH  ILLEGAL_IMPLICIT_CAST  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE  INEXISTENT_ENUM_ELEMENT  INEXISTENT_PROPERTY  INTERFACE_FUNCTION_NOT_EMPTY  INTERFACE_METHOD_OVERRIDE  INVALID_INTERFACE_MEMBER_DECLARATION  MULTIPLE_VAR_DEF  NOT_A_CONSTRUCTOR  NOT_CALLABLE  UNEXPECTED_TOKEN  UNKNOWN_EXPR_TYPE  UNKNOWN_OVERRIDE  UNRESOLVED_TYPE  WRONG_ARGUMENT_COUNT  diagnosticType  InferJSDocInfo  inferJSDocInfo  	projects/Closure66/src/com/google/javascript/jscomp/TypeCheck.java	0.21320071635561041	939	939	2	replace	Node  rightChild  =  t.getScope().getLeastChild().getNext();	  Node    rightChild    =    t.getScope().getLastChild().getNext();    	non-compiled	[CE]  orphaned  case	6	None	replace
93	[BUG]  [BUGGY]  Node  rightChild  =  t.getScope().getFirstChild().getString();  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      Var  var  =  t.getScope().getVar(lvalue.getString());  if  (var  !=  null)  {  if  (var.isTypeInferred())  {  return;  }  }  }  JSType  leftType  =  getJSType(lvalue);      [BUGGY]  Node  rightChild  =  t.getScope().getFirstChild().getString();  [BUGGY]      JSType  rightType  =  getJSType(rightChild);  if  (validator.expectCanAssignTo(  t,  assign,  rightType,  leftType,       "assignment     "))  {  ensureTyped(t,  assign,  rightType);  }  else  {  ensureTyped(t,  assign);  }  }  [CLASS]  TypeCheck  [METHOD]  visitAssign  [RETURN_TYPE]  void  NodeTraversal  t  Node  assign  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  jsType  leftType  objectJsType  rightType  rvalueType  NodeTraversal  t  DiagnosticGroup  ALL_DIAGNOSTICS  CheckLevel  reportMissingOverride  reportUnknownTypes  Var  var  Node  assign  lvalue  object  object2  rightChild  rvalue  FunctionType  functionType  ScopeCreator  scopeCreator  String  OVERRIDING_PROTOTYPE_WITH_NON_OBJECT  functionPrivateName  message  property  property2  JSDocInfo  info  int  noTypeCheckSection  nullCount  typedCount  unknownCount  TypeValidator  validator  ObjectType  type  AbstractCompiler  compiler  JSTypeRegistry  typeRegistry  boolean  enterSection  externs  inExterns  report  reportMissingProperties  typeable  Scope  outerScope  topScope  DiagnosticType  BAD_DELETE  BAD_IMPLEMENTED_TYPE  BIT_OPERATION  CONFLICTING_EXTENDED_TYPE  CONFLICTING_IMPLEMENTED_TYPE  CONSTRUCTOR_NOT_CALLABLE  DETERMINISTIC_TEST  DETERMINISTIC_TEST_NO_RESULT  ENUM_DUP  ENUM_NOT_CONSTANT  EXPECTED_THIS_TYPE  FUNCTION_MASKS_VARIABLE  HIDDEN_INTERFACE_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY_MISMATCH  ILLEGAL_IMPLICIT_CAST  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE  INEXISTENT_ENUM_ELEMENT  INEXISTENT_PROPERTY  INTERFACE_FUNCTION_NOT_EMPTY  INTERFACE_METHOD_OVERRIDE  INVALID_INTERFACE_MEMBER_DECLARATION  MULTIPLE_VAR_DEF  NOT_A_CONSTRUCTOR  NOT_CALLABLE  UNEXPECTED_TOKEN  UNKNOWN_EXPR_TYPE  UNKNOWN_OVERRIDE  UNRESOLVED_TYPE  WRONG_ARGUMENT_COUNT  diagnosticType  InferJSDocInfo  inferJSDocInfo  	projects/Closure66/src/com/google/javascript/jscomp/TypeCheck.java	0.21320071635561041	939	939	2	replace	Node  rightChild  =  t.getScope().getFirstChild().getString();	  Node    rightChild    =    t.getScope().getLastChild().getString();    	non-compiled	[CE]  orphaned  case	39	None	replace
94	[BUG]  [BUGGY]  Node  rightChild  =  t.getScope().getLastChild().getFirstChild().getString();  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      Var  var  =  t.getScope().getVar(lvalue.getString());  if  (var  !=  null)  {  if  (var.isTypeInferred())  {  return;  }  }  }  JSType  leftType  =  getJSType(lvalue);      [BUGGY]  Node  rightChild  =  t.getScope().getLastChild().getFirstChild().getString();  [BUGGY]      JSType  rightType  =  getJSType(rightChild);  if  (validator.expectCanAssignTo(  t,  assign,  rightType,  leftType,       "assignment     "))  {  ensureTyped(t,  assign,  rightType);  }  else  {  ensureTyped(t,  assign);  }  }  [CLASS]  TypeCheck  [METHOD]  visitAssign  [RETURN_TYPE]  void  NodeTraversal  t  Node  assign  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  jsType  leftType  objectJsType  rightType  rvalueType  NodeTraversal  t  DiagnosticGroup  ALL_DIAGNOSTICS  CheckLevel  reportMissingOverride  reportUnknownTypes  Var  var  Node  assign  lvalue  object  object2  rightChild  rvalue  FunctionType  functionType  ScopeCreator  scopeCreator  String  OVERRIDING_PROTOTYPE_WITH_NON_OBJECT  functionPrivateName  message  property  property2  JSDocInfo  info  int  noTypeCheckSection  nullCount  typedCount  unknownCount  TypeValidator  validator  ObjectType  type  AbstractCompiler  compiler  JSTypeRegistry  typeRegistry  boolean  enterSection  externs  inExterns  report  reportMissingProperties  typeable  Scope  outerScope  topScope  DiagnosticType  BAD_DELETE  BAD_IMPLEMENTED_TYPE  BIT_OPERATION  CONFLICTING_EXTENDED_TYPE  CONFLICTING_IMPLEMENTED_TYPE  CONSTRUCTOR_NOT_CALLABLE  DETERMINISTIC_TEST  DETERMINISTIC_TEST_NO_RESULT  ENUM_DUP  ENUM_NOT_CONSTANT  EXPECTED_THIS_TYPE  FUNCTION_MASKS_VARIABLE  HIDDEN_INTERFACE_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY_MISMATCH  ILLEGAL_IMPLICIT_CAST  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE  INEXISTENT_ENUM_ELEMENT  INEXISTENT_PROPERTY  INTERFACE_FUNCTION_NOT_EMPTY  INTERFACE_METHOD_OVERRIDE  INVALID_INTERFACE_MEMBER_DECLARATION  MULTIPLE_VAR_DEF  NOT_A_CONSTRUCTOR  NOT_CALLABLE  UNEXPECTED_TOKEN  UNKNOWN_EXPR_TYPE  UNKNOWN_OVERRIDE  UNRESOLVED_TYPE  WRONG_ARGUMENT_COUNT  diagnosticType  InferJSDocInfo  inferJSDocInfo  	projects/Closure66/src/com/google/javascript/jscomp/TypeCheck.java	0.21320071635561041	939	939	2	replace	Node  rightChild  =  t.getScope().getLastChild().getFirstChild().getString();	  Node    rightChild    =    t.getScope().getLastChild().getString();    	non-compiled	[CE]  orphaned  case	39	None	replace
95	[BUG]  [BUGGY]  Node  rightChild  =  t.getScope().getLastChild().getNext().getString();  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      Var  var  =  t.getScope().getVar(lvalue.getString());  if  (var  !=  null)  {  if  (var.isTypeInferred())  {  return;  }  }  }  JSType  leftType  =  getJSType(lvalue);      [BUGGY]  Node  rightChild  =  t.getScope().getLastChild().getNext().getString();  [BUGGY]      JSType  rightType  =  getJSType(rightChild);  if  (validator.expectCanAssignTo(  t,  assign,  rightType,  leftType,       "assignment     "))  {  ensureTyped(t,  assign,  rightType);  }  else  {  ensureTyped(t,  assign);  }  }  [CLASS]  TypeCheck  [METHOD]  visitAssign  [RETURN_TYPE]  void  NodeTraversal  t  Node  assign  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  jsType  leftType  objectJsType  rightType  rvalueType  NodeTraversal  t  DiagnosticGroup  ALL_DIAGNOSTICS  CheckLevel  reportMissingOverride  reportUnknownTypes  Var  var  Node  assign  lvalue  object  object2  rightChild  rvalue  FunctionType  functionType  ScopeCreator  scopeCreator  String  OVERRIDING_PROTOTYPE_WITH_NON_OBJECT  functionPrivateName  message  property  property2  JSDocInfo  info  int  noTypeCheckSection  nullCount  typedCount  unknownCount  TypeValidator  validator  ObjectType  type  AbstractCompiler  compiler  JSTypeRegistry  typeRegistry  boolean  enterSection  externs  inExterns  report  reportMissingProperties  typeable  Scope  outerScope  topScope  DiagnosticType  BAD_DELETE  BAD_IMPLEMENTED_TYPE  BIT_OPERATION  CONFLICTING_EXTENDED_TYPE  CONFLICTING_IMPLEMENTED_TYPE  CONSTRUCTOR_NOT_CALLABLE  DETERMINISTIC_TEST  DETERMINISTIC_TEST_NO_RESULT  ENUM_DUP  ENUM_NOT_CONSTANT  EXPECTED_THIS_TYPE  FUNCTION_MASKS_VARIABLE  HIDDEN_INTERFACE_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY_MISMATCH  ILLEGAL_IMPLICIT_CAST  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE  INEXISTENT_ENUM_ELEMENT  INEXISTENT_PROPERTY  INTERFACE_FUNCTION_NOT_EMPTY  INTERFACE_METHOD_OVERRIDE  INVALID_INTERFACE_MEMBER_DECLARATION  MULTIPLE_VAR_DEF  NOT_A_CONSTRUCTOR  NOT_CALLABLE  UNEXPECTED_TOKEN  UNKNOWN_EXPR_TYPE  UNKNOWN_OVERRIDE  UNRESOLVED_TYPE  WRONG_ARGUMENT_COUNT  diagnosticType  InferJSDocInfo  inferJSDocInfo  	projects/Closure66/src/com/google/javascript/jscomp/TypeCheck.java	0.21320071635561041	939	939	2	replace	Node  rightChild  =  t.getScope().getLastChild().getNext().getString();	  Node    rightChild    =    t.getScope().getLastChild().getString();    	non-compiled	[CE]  orphaned  case	39	None	replace
96	[BUG]  [BUGGY]  Node  rightChild  =  t.getScope().getLastChild().getParent().getString();  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      Var  var  =  t.getScope().getVar(lvalue.getString());  if  (var  !=  null)  {  if  (var.isTypeInferred())  {  return;  }  }  }  JSType  leftType  =  getJSType(lvalue);      [BUGGY]  Node  rightChild  =  t.getScope().getLastChild().getParent().getString();  [BUGGY]      JSType  rightType  =  getJSType(rightChild);  if  (validator.expectCanAssignTo(  t,  assign,  rightType,  leftType,       "assignment     "))  {  ensureTyped(t,  assign,  rightType);  }  else  {  ensureTyped(t,  assign);  }  }  [CLASS]  TypeCheck  [METHOD]  visitAssign  [RETURN_TYPE]  void  NodeTraversal  t  Node  assign  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  jsType  leftType  objectJsType  rightType  rvalueType  NodeTraversal  t  DiagnosticGroup  ALL_DIAGNOSTICS  CheckLevel  reportMissingOverride  reportUnknownTypes  Var  var  Node  assign  lvalue  object  object2  rightChild  rvalue  FunctionType  functionType  ScopeCreator  scopeCreator  String  OVERRIDING_PROTOTYPE_WITH_NON_OBJECT  functionPrivateName  message  property  property2  JSDocInfo  info  int  noTypeCheckSection  nullCount  typedCount  unknownCount  TypeValidator  validator  ObjectType  type  AbstractCompiler  compiler  JSTypeRegistry  typeRegistry  boolean  enterSection  externs  inExterns  report  reportMissingProperties  typeable  Scope  outerScope  topScope  DiagnosticType  BAD_DELETE  BAD_IMPLEMENTED_TYPE  BIT_OPERATION  CONFLICTING_EXTENDED_TYPE  CONFLICTING_IMPLEMENTED_TYPE  CONSTRUCTOR_NOT_CALLABLE  DETERMINISTIC_TEST  DETERMINISTIC_TEST_NO_RESULT  ENUM_DUP  ENUM_NOT_CONSTANT  EXPECTED_THIS_TYPE  FUNCTION_MASKS_VARIABLE  HIDDEN_INTERFACE_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY_MISMATCH  ILLEGAL_IMPLICIT_CAST  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE  INEXISTENT_ENUM_ELEMENT  INEXISTENT_PROPERTY  INTERFACE_FUNCTION_NOT_EMPTY  INTERFACE_METHOD_OVERRIDE  INVALID_INTERFACE_MEMBER_DECLARATION  MULTIPLE_VAR_DEF  NOT_A_CONSTRUCTOR  NOT_CALLABLE  UNEXPECTED_TOKEN  UNKNOWN_EXPR_TYPE  UNKNOWN_OVERRIDE  UNRESOLVED_TYPE  WRONG_ARGUMENT_COUNT  diagnosticType  InferJSDocInfo  inferJSDocInfo  	projects/Closure66/src/com/google/javascript/jscomp/TypeCheck.java	0.21320071635561041	939	939	2	replace	Node  rightChild  =  t.getScope().getLastChild().getParent().getString();	  Node    rightChild    =    t.getScope().getLastChild().getString();    	non-compiled	[CE]  orphaned  case	39	None	replace
97	[BUG]  [BUGGY]  Node  rightChild  =  t.getScope().getRightChild().getString();  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      Var  var  =  t.getScope().getVar(lvalue.getString());  if  (var  !=  null)  {  if  (var.isTypeInferred())  {  return;  }  }  }  JSType  leftType  =  getJSType(lvalue);      [BUGGY]  Node  rightChild  =  t.getScope().getRightChild().getString();  [BUGGY]      JSType  rightType  =  getJSType(rightChild);  if  (validator.expectCanAssignTo(  t,  assign,  rightType,  leftType,       "assignment     "))  {  ensureTyped(t,  assign,  rightType);  }  else  {  ensureTyped(t,  assign);  }  }  [CLASS]  TypeCheck  [METHOD]  visitAssign  [RETURN_TYPE]  void  NodeTraversal  t  Node  assign  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  jsType  leftType  objectJsType  rightType  rvalueType  NodeTraversal  t  DiagnosticGroup  ALL_DIAGNOSTICS  CheckLevel  reportMissingOverride  reportUnknownTypes  Var  var  Node  assign  lvalue  object  object2  rightChild  rvalue  FunctionType  functionType  ScopeCreator  scopeCreator  String  OVERRIDING_PROTOTYPE_WITH_NON_OBJECT  functionPrivateName  message  property  property2  JSDocInfo  info  int  noTypeCheckSection  nullCount  typedCount  unknownCount  TypeValidator  validator  ObjectType  type  AbstractCompiler  compiler  JSTypeRegistry  typeRegistry  boolean  enterSection  externs  inExterns  report  reportMissingProperties  typeable  Scope  outerScope  topScope  DiagnosticType  BAD_DELETE  BAD_IMPLEMENTED_TYPE  BIT_OPERATION  CONFLICTING_EXTENDED_TYPE  CONFLICTING_IMPLEMENTED_TYPE  CONSTRUCTOR_NOT_CALLABLE  DETERMINISTIC_TEST  DETERMINISTIC_TEST_NO_RESULT  ENUM_DUP  ENUM_NOT_CONSTANT  EXPECTED_THIS_TYPE  FUNCTION_MASKS_VARIABLE  HIDDEN_INTERFACE_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY_MISMATCH  ILLEGAL_IMPLICIT_CAST  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE  INEXISTENT_ENUM_ELEMENT  INEXISTENT_PROPERTY  INTERFACE_FUNCTION_NOT_EMPTY  INTERFACE_METHOD_OVERRIDE  INVALID_INTERFACE_MEMBER_DECLARATION  MULTIPLE_VAR_DEF  NOT_A_CONSTRUCTOR  NOT_CALLABLE  UNEXPECTED_TOKEN  UNKNOWN_EXPR_TYPE  UNKNOWN_OVERRIDE  UNRESOLVED_TYPE  WRONG_ARGUMENT_COUNT  diagnosticType  InferJSDocInfo  inferJSDocInfo  	projects/Closure66/src/com/google/javascript/jscomp/TypeCheck.java	0.21320071635561041	939	939	2	replace	Node  rightChild  =  t.getScope().getRightChild().getString();	  Node    rightChild    =    t.getScope().getLastChild().getString();    	non-compiled	[CE]  orphaned  case	39	None	replace
98	[BUG]  [BUGGY]  Node  rightChild  =  lvalue.removeLastChild();  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      Var  var  =  t.getScope().getVar(lvalue.getString());  if  (var  !=  null)  {  if  (var.isTypeInferred())  {  return;  }  }  }  JSType  leftType  =  getJSType(lvalue);      [BUGGY]  Node  rightChild  =  lvalue.removeLastChild();  [BUGGY]      JSType  rightType  =  getJSType(rightChild);  if  (validator.expectCanAssignTo(  t,  assign,  rightType,  leftType,       "assignment     "))  {  ensureTyped(t,  assign,  rightType);  }  else  {  ensureTyped(t,  assign);  }  }  [CLASS]  TypeCheck  [METHOD]  visitAssign  [RETURN_TYPE]  void  NodeTraversal  t  Node  assign  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  jsType  leftType  objectJsType  rightType  rvalueType  NodeTraversal  t  DiagnosticGroup  ALL_DIAGNOSTICS  CheckLevel  reportMissingOverride  reportUnknownTypes  Var  var  Node  assign  lvalue  object  object2  rightChild  rvalue  FunctionType  functionType  ScopeCreator  scopeCreator  String  OVERRIDING_PROTOTYPE_WITH_NON_OBJECT  functionPrivateName  message  property  property2  JSDocInfo  info  int  noTypeCheckSection  nullCount  typedCount  unknownCount  TypeValidator  validator  ObjectType  type  AbstractCompiler  compiler  JSTypeRegistry  typeRegistry  boolean  enterSection  externs  inExterns  report  reportMissingProperties  typeable  Scope  outerScope  topScope  DiagnosticType  BAD_DELETE  BAD_IMPLEMENTED_TYPE  BIT_OPERATION  CONFLICTING_EXTENDED_TYPE  CONFLICTING_IMPLEMENTED_TYPE  CONSTRUCTOR_NOT_CALLABLE  DETERMINISTIC_TEST  DETERMINISTIC_TEST_NO_RESULT  ENUM_DUP  ENUM_NOT_CONSTANT  EXPECTED_THIS_TYPE  FUNCTION_MASKS_VARIABLE  HIDDEN_INTERFACE_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY_MISMATCH  ILLEGAL_IMPLICIT_CAST  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE  INEXISTENT_ENUM_ELEMENT  INEXISTENT_PROPERTY  INTERFACE_FUNCTION_NOT_EMPTY  INTERFACE_METHOD_OVERRIDE  INVALID_INTERFACE_MEMBER_DECLARATION  MULTIPLE_VAR_DEF  NOT_A_CONSTRUCTOR  NOT_CALLABLE  UNEXPECTED_TOKEN  UNKNOWN_EXPR_TYPE  UNKNOWN_OVERRIDE  UNRESOLVED_TYPE  WRONG_ARGUMENT_COUNT  diagnosticType  InferJSDocInfo  inferJSDocInfo  	projects/Closure66/src/com/google/javascript/jscomp/TypeCheck.java	0.21320071635561041	939	939	2	replace	Node  rightChild  =  lvalue.removeLastChild();	  Node    rightChild    =    lvalue.removeFirstChild();    	non-compiled	[CE]  orphaned  case	49	None	replace
99	[BUG]  [BUGGY]  Node  rightChild  =  leftType  ==  null?  leftType.getFirstChild()  :  leftType.getLastChild();  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      Var  var  =  t.getScope().getVar(lvalue.getString());  if  (var  !=  null)  {  if  (var.isTypeInferred())  {  return;  }  }  }  JSType  leftType  =  getJSType(lvalue);      [BUGGY]  Node  rightChild  =  leftType  ==  null?  leftType.getFirstChild()  :  leftType.getLastChild();  [BUGGY]      JSType  rightType  =  getJSType(rightChild);  if  (validator.expectCanAssignTo(  t,  assign,  rightType,  leftType,       "assignment     "))  {  ensureTyped(t,  assign,  rightType);  }  else  {  ensureTyped(t,  assign);  }  }  [CLASS]  TypeCheck  [METHOD]  visitAssign  [RETURN_TYPE]  void  NodeTraversal  t  Node  assign  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  jsType  leftType  objectJsType  rightType  rvalueType  NodeTraversal  t  DiagnosticGroup  ALL_DIAGNOSTICS  CheckLevel  reportMissingOverride  reportUnknownTypes  Var  var  Node  assign  lvalue  object  object2  rightChild  rvalue  FunctionType  functionType  ScopeCreator  scopeCreator  String  OVERRIDING_PROTOTYPE_WITH_NON_OBJECT  functionPrivateName  message  property  property2  JSDocInfo  info  int  noTypeCheckSection  nullCount  typedCount  unknownCount  TypeValidator  validator  ObjectType  type  AbstractCompiler  compiler  JSTypeRegistry  typeRegistry  boolean  enterSection  externs  inExterns  report  reportMissingProperties  typeable  Scope  outerScope  topScope  DiagnosticType  BAD_DELETE  BAD_IMPLEMENTED_TYPE  BIT_OPERATION  CONFLICTING_EXTENDED_TYPE  CONFLICTING_IMPLEMENTED_TYPE  CONSTRUCTOR_NOT_CALLABLE  DETERMINISTIC_TEST  DETERMINISTIC_TEST_NO_RESULT  ENUM_DUP  ENUM_NOT_CONSTANT  EXPECTED_THIS_TYPE  FUNCTION_MASKS_VARIABLE  HIDDEN_INTERFACE_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY_MISMATCH  ILLEGAL_IMPLICIT_CAST  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE  INEXISTENT_ENUM_ELEMENT  INEXISTENT_PROPERTY  INTERFACE_FUNCTION_NOT_EMPTY  INTERFACE_METHOD_OVERRIDE  INVALID_INTERFACE_MEMBER_DECLARATION  MULTIPLE_VAR_DEF  NOT_A_CONSTRUCTOR  NOT_CALLABLE  UNEXPECTED_TOKEN  UNKNOWN_EXPR_TYPE  UNKNOWN_OVERRIDE  UNRESOLVED_TYPE  WRONG_ARGUMENT_COUNT  diagnosticType  InferJSDocInfo  inferJSDocInfo  	projects/Closure66/src/com/google/javascript/jscomp/TypeCheck.java	0.21320071635561041	939	939	2	replace	Node  rightChild  =  leftType  ==  null?  leftType.getFirstChild()  :  leftType.getLastChild();	  Node    rightChild    =    leftType!=    null?    leftType.getFirstChild()    :    leftType.getLastChild();    	non-compiled	[CE]  orphaned  case	28	None	replace
100	[BUG]  [BUGGY]  Node  rightChild  =  leftType!=  null?  leftType.getLastChild()  :  leftType.getLastChild();  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      Var  var  =  t.getScope().getVar(lvalue.getString());  if  (var  !=  null)  {  if  (var.isTypeInferred())  {  return;  }  }  }  JSType  leftType  =  getJSType(lvalue);      [BUGGY]  Node  rightChild  =  leftType!=  null?  leftType.getLastChild()  :  leftType.getLastChild();  [BUGGY]      JSType  rightType  =  getJSType(rightChild);  if  (validator.expectCanAssignTo(  t,  assign,  rightType,  leftType,       "assignment     "))  {  ensureTyped(t,  assign,  rightType);  }  else  {  ensureTyped(t,  assign);  }  }  [CLASS]  TypeCheck  [METHOD]  visitAssign  [RETURN_TYPE]  void  NodeTraversal  t  Node  assign  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  jsType  leftType  objectJsType  rightType  rvalueType  NodeTraversal  t  DiagnosticGroup  ALL_DIAGNOSTICS  CheckLevel  reportMissingOverride  reportUnknownTypes  Var  var  Node  assign  lvalue  object  object2  rightChild  rvalue  FunctionType  functionType  ScopeCreator  scopeCreator  String  OVERRIDING_PROTOTYPE_WITH_NON_OBJECT  functionPrivateName  message  property  property2  JSDocInfo  info  int  noTypeCheckSection  nullCount  typedCount  unknownCount  TypeValidator  validator  ObjectType  type  AbstractCompiler  compiler  JSTypeRegistry  typeRegistry  boolean  enterSection  externs  inExterns  report  reportMissingProperties  typeable  Scope  outerScope  topScope  DiagnosticType  BAD_DELETE  BAD_IMPLEMENTED_TYPE  BIT_OPERATION  CONFLICTING_EXTENDED_TYPE  CONFLICTING_IMPLEMENTED_TYPE  CONSTRUCTOR_NOT_CALLABLE  DETERMINISTIC_TEST  DETERMINISTIC_TEST_NO_RESULT  ENUM_DUP  ENUM_NOT_CONSTANT  EXPECTED_THIS_TYPE  FUNCTION_MASKS_VARIABLE  HIDDEN_INTERFACE_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY_MISMATCH  ILLEGAL_IMPLICIT_CAST  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE  INEXISTENT_ENUM_ELEMENT  INEXISTENT_PROPERTY  INTERFACE_FUNCTION_NOT_EMPTY  INTERFACE_METHOD_OVERRIDE  INVALID_INTERFACE_MEMBER_DECLARATION  MULTIPLE_VAR_DEF  NOT_A_CONSTRUCTOR  NOT_CALLABLE  UNEXPECTED_TOKEN  UNKNOWN_EXPR_TYPE  UNKNOWN_OVERRIDE  UNRESOLVED_TYPE  WRONG_ARGUMENT_COUNT  diagnosticType  InferJSDocInfo  inferJSDocInfo  	projects/Closure66/src/com/google/javascript/jscomp/TypeCheck.java	0.21320071635561041	939	939	2	replace	Node  rightChild  =  leftType!=  null?  leftType.getLastChild()  :  leftType.getLastChild();	  Node    rightChild    =    leftType!=    null?    leftType.getFirstChild()    :    leftType.getLastChild();    	non-compiled	[CE]  orphaned  case	28	None	replace
101	[BUG]  [BUGGY]  Node  rightChild  =  leftType  ==  null?  leftType.getLastChild()  :  leftType.getLastChild();  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      Var  var  =  t.getScope().getVar(lvalue.getString());  if  (var  !=  null)  {  if  (var.isTypeInferred())  {  return;  }  }  }  JSType  leftType  =  getJSType(lvalue);      [BUGGY]  Node  rightChild  =  leftType  ==  null?  leftType.getLastChild()  :  leftType.getLastChild();  [BUGGY]      JSType  rightType  =  getJSType(rightChild);  if  (validator.expectCanAssignTo(  t,  assign,  rightType,  leftType,       "assignment     "))  {  ensureTyped(t,  assign,  rightType);  }  else  {  ensureTyped(t,  assign);  }  }  [CLASS]  TypeCheck  [METHOD]  visitAssign  [RETURN_TYPE]  void  NodeTraversal  t  Node  assign  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  jsType  leftType  objectJsType  rightType  rvalueType  NodeTraversal  t  DiagnosticGroup  ALL_DIAGNOSTICS  CheckLevel  reportMissingOverride  reportUnknownTypes  Var  var  Node  assign  lvalue  object  object2  rightChild  rvalue  FunctionType  functionType  ScopeCreator  scopeCreator  String  OVERRIDING_PROTOTYPE_WITH_NON_OBJECT  functionPrivateName  message  property  property2  JSDocInfo  info  int  noTypeCheckSection  nullCount  typedCount  unknownCount  TypeValidator  validator  ObjectType  type  AbstractCompiler  compiler  JSTypeRegistry  typeRegistry  boolean  enterSection  externs  inExterns  report  reportMissingProperties  typeable  Scope  outerScope  topScope  DiagnosticType  BAD_DELETE  BAD_IMPLEMENTED_TYPE  BIT_OPERATION  CONFLICTING_EXTENDED_TYPE  CONFLICTING_IMPLEMENTED_TYPE  CONSTRUCTOR_NOT_CALLABLE  DETERMINISTIC_TEST  DETERMINISTIC_TEST_NO_RESULT  ENUM_DUP  ENUM_NOT_CONSTANT  EXPECTED_THIS_TYPE  FUNCTION_MASKS_VARIABLE  HIDDEN_INTERFACE_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY_MISMATCH  ILLEGAL_IMPLICIT_CAST  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE  INEXISTENT_ENUM_ELEMENT  INEXISTENT_PROPERTY  INTERFACE_FUNCTION_NOT_EMPTY  INTERFACE_METHOD_OVERRIDE  INVALID_INTERFACE_MEMBER_DECLARATION  MULTIPLE_VAR_DEF  NOT_A_CONSTRUCTOR  NOT_CALLABLE  UNEXPECTED_TOKEN  UNKNOWN_EXPR_TYPE  UNKNOWN_OVERRIDE  UNRESOLVED_TYPE  WRONG_ARGUMENT_COUNT  diagnosticType  InferJSDocInfo  inferJSDocInfo  	projects/Closure66/src/com/google/javascript/jscomp/TypeCheck.java	0.21320071635561041	939	939	2	replace	Node  rightChild  =  leftType  ==  null?  leftType.getLastChild()  :  leftType.getLastChild();	  Node    rightChild    =    leftType!=    null?    leftType.getFirstChild()    :    leftType.getLastChild();    	non-compiled	[CE]  orphaned  case	28	None	replace
102	[BUG]  [BUGGY]  Node  rightChild  =  t.getScope().getLeastChild(lvalue);  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      Var  var  =  t.getScope().getVar(lvalue.getString());  if  (var  !=  null)  {  if  (var.isTypeInferred())  {  return;  }  }  }  JSType  leftType  =  getJSType(lvalue);      [BUGGY]  Node  rightChild  =  t.getScope().getLeastChild(lvalue);  [BUGGY]      JSType  rightType  =  getJSType(rightChild);  if  (validator.expectCanAssignTo(  t,  assign,  rightType,  leftType,       "assignment     "))  {  ensureTyped(t,  assign,  rightType);  }  else  {  ensureTyped(t,  assign);  }  }  [CLASS]  TypeCheck  [METHOD]  visitAssign  [RETURN_TYPE]  void  NodeTraversal  t  Node  assign  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  jsType  leftType  objectJsType  rightType  rvalueType  NodeTraversal  t  DiagnosticGroup  ALL_DIAGNOSTICS  CheckLevel  reportMissingOverride  reportUnknownTypes  Var  var  Node  assign  lvalue  object  object2  rightChild  rvalue  FunctionType  functionType  ScopeCreator  scopeCreator  String  OVERRIDING_PROTOTYPE_WITH_NON_OBJECT  functionPrivateName  message  property  property2  JSDocInfo  info  int  noTypeCheckSection  nullCount  typedCount  unknownCount  TypeValidator  validator  ObjectType  type  AbstractCompiler  compiler  JSTypeRegistry  typeRegistry  boolean  enterSection  externs  inExterns  report  reportMissingProperties  typeable  Scope  outerScope  topScope  DiagnosticType  BAD_DELETE  BAD_IMPLEMENTED_TYPE  BIT_OPERATION  CONFLICTING_EXTENDED_TYPE  CONFLICTING_IMPLEMENTED_TYPE  CONSTRUCTOR_NOT_CALLABLE  DETERMINISTIC_TEST  DETERMINISTIC_TEST_NO_RESULT  ENUM_DUP  ENUM_NOT_CONSTANT  EXPECTED_THIS_TYPE  FUNCTION_MASKS_VARIABLE  HIDDEN_INTERFACE_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY_MISMATCH  ILLEGAL_IMPLICIT_CAST  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE  INEXISTENT_ENUM_ELEMENT  INEXISTENT_PROPERTY  INTERFACE_FUNCTION_NOT_EMPTY  INTERFACE_METHOD_OVERRIDE  INVALID_INTERFACE_MEMBER_DECLARATION  MULTIPLE_VAR_DEF  NOT_A_CONSTRUCTOR  NOT_CALLABLE  UNEXPECTED_TOKEN  UNKNOWN_EXPR_TYPE  UNKNOWN_OVERRIDE  UNRESOLVED_TYPE  WRONG_ARGUMENT_COUNT  diagnosticType  InferJSDocInfo  inferJSDocInfo  	projects/Closure66/src/com/google/javascript/jscomp/TypeCheck.java	0.21320071635561041	939	939	2	replace	Node  rightChild  =  t.getScope().getLeastChild(lvalue);	  Node    rightChild    =    t.getScope().getLeastChild();    	non-compiled	[CE]  orphaned  case	4	None	replace
103	[BUG]  [BUGGY]  JSType  rightChild  =  getJSType(rightChild);  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      Var  var  =  t.getScope().getVar(lvalue.getString());  if  (var  !=  null)  {  if  (var.isTypeInferred())  {  return;  }  }  }  JSType  leftType  =  getJSType(lvalue);      [BUGGY]  JSType  rightChild  =  getJSType(rightChild);  [BUGGY]      JSType  rightType  =  getJSType(rightChild);  if  (validator.expectCanAssignTo(  t,  assign,  rightType,  leftType,       "assignment     "))  {  ensureTyped(t,  assign,  rightType);  }  else  {  ensureTyped(t,  assign);  }  }  [CLASS]  TypeCheck  [METHOD]  visitAssign  [RETURN_TYPE]  void  NodeTraversal  t  Node  assign  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  jsType  leftType  objectJsType  rightType  rvalueType  NodeTraversal  t  DiagnosticGroup  ALL_DIAGNOSTICS  CheckLevel  reportMissingOverride  reportUnknownTypes  Var  var  Node  assign  lvalue  object  object2  rightChild  rvalue  FunctionType  functionType  ScopeCreator  scopeCreator  String  OVERRIDING_PROTOTYPE_WITH_NON_OBJECT  functionPrivateName  message  property  property2  JSDocInfo  info  int  noTypeCheckSection  nullCount  typedCount  unknownCount  TypeValidator  validator  ObjectType  type  AbstractCompiler  compiler  JSTypeRegistry  typeRegistry  boolean  enterSection  externs  inExterns  report  reportMissingProperties  typeable  Scope  outerScope  topScope  DiagnosticType  BAD_DELETE  BAD_IMPLEMENTED_TYPE  BIT_OPERATION  CONFLICTING_EXTENDED_TYPE  CONFLICTING_IMPLEMENTED_TYPE  CONSTRUCTOR_NOT_CALLABLE  DETERMINISTIC_TEST  DETERMINISTIC_TEST_NO_RESULT  ENUM_DUP  ENUM_NOT_CONSTANT  EXPECTED_THIS_TYPE  FUNCTION_MASKS_VARIABLE  HIDDEN_INTERFACE_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY_MISMATCH  ILLEGAL_IMPLICIT_CAST  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE  INEXISTENT_ENUM_ELEMENT  INEXISTENT_PROPERTY  INTERFACE_FUNCTION_NOT_EMPTY  INTERFACE_METHOD_OVERRIDE  INVALID_INTERFACE_MEMBER_DECLARATION  MULTIPLE_VAR_DEF  NOT_A_CONSTRUCTOR  NOT_CALLABLE  UNEXPECTED_TOKEN  UNKNOWN_EXPR_TYPE  UNKNOWN_OVERRIDE  UNRESOLVED_TYPE  WRONG_ARGUMENT_COUNT  diagnosticType  InferJSDocInfo  inferJSDocInfo  	projects/Closure66/src/com/google/javascript/jscomp/TypeCheck.java	0.21320071635561041	939	939	2	replace	JSType  rightChild  =  getJSType(rightChild);	  JSType    rightChild    =    getJSType(right);    	non-compiled	[CE]  orphaned  case	15	None	replace
104	[BUG]  [BUGGY]  JSType  rightChild  =  getJSType(left);  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      Var  var  =  t.getScope().getVar(lvalue.getString());  if  (var  !=  null)  {  if  (var.isTypeInferred())  {  return;  }  }  }  JSType  leftType  =  getJSType(lvalue);      [BUGGY]  JSType  rightChild  =  getJSType(left);  [BUGGY]      JSType  rightType  =  getJSType(rightChild);  if  (validator.expectCanAssignTo(  t,  assign,  rightType,  leftType,       "assignment     "))  {  ensureTyped(t,  assign,  rightType);  }  else  {  ensureTyped(t,  assign);  }  }  [CLASS]  TypeCheck  [METHOD]  visitAssign  [RETURN_TYPE]  void  NodeTraversal  t  Node  assign  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  jsType  leftType  objectJsType  rightType  rvalueType  NodeTraversal  t  DiagnosticGroup  ALL_DIAGNOSTICS  CheckLevel  reportMissingOverride  reportUnknownTypes  Var  var  Node  assign  lvalue  object  object2  rightChild  rvalue  FunctionType  functionType  ScopeCreator  scopeCreator  String  OVERRIDING_PROTOTYPE_WITH_NON_OBJECT  functionPrivateName  message  property  property2  JSDocInfo  info  int  noTypeCheckSection  nullCount  typedCount  unknownCount  TypeValidator  validator  ObjectType  type  AbstractCompiler  compiler  JSTypeRegistry  typeRegistry  boolean  enterSection  externs  inExterns  report  reportMissingProperties  typeable  Scope  outerScope  topScope  DiagnosticType  BAD_DELETE  BAD_IMPLEMENTED_TYPE  BIT_OPERATION  CONFLICTING_EXTENDED_TYPE  CONFLICTING_IMPLEMENTED_TYPE  CONSTRUCTOR_NOT_CALLABLE  DETERMINISTIC_TEST  DETERMINISTIC_TEST_NO_RESULT  ENUM_DUP  ENUM_NOT_CONSTANT  EXPECTED_THIS_TYPE  FUNCTION_MASKS_VARIABLE  HIDDEN_INTERFACE_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY_MISMATCH  ILLEGAL_IMPLICIT_CAST  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE  INEXISTENT_ENUM_ELEMENT  INEXISTENT_PROPERTY  INTERFACE_FUNCTION_NOT_EMPTY  INTERFACE_METHOD_OVERRIDE  INVALID_INTERFACE_MEMBER_DECLARATION  MULTIPLE_VAR_DEF  NOT_A_CONSTRUCTOR  NOT_CALLABLE  UNEXPECTED_TOKEN  UNKNOWN_EXPR_TYPE  UNKNOWN_OVERRIDE  UNRESOLVED_TYPE  WRONG_ARGUMENT_COUNT  diagnosticType  InferJSDocInfo  inferJSDocInfo  	projects/Closure66/src/com/google/javascript/jscomp/TypeCheck.java	0.21320071635561041	939	939	2	replace	JSType  rightChild  =  getJSType(left);	  JSType    rightChild    =    getJSType(right);    	non-compiled	[CE]  orphaned  case	15	None	replace
105	[BUG]  [BUGGY]  JSType  rightChild  =  getJSType(leftChild);  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]      Var  var  =  t.getScope().getVar(lvalue.getString());  if  (var  !=  null)  {  if  (var.isTypeInferred())  {  return;  }  }  }  JSType  leftType  =  getJSType(lvalue);      [BUGGY]  JSType  rightChild  =  getJSType(leftChild);  [BUGGY]      JSType  rightType  =  getJSType(rightChild);  if  (validator.expectCanAssignTo(  t,  assign,  rightType,  leftType,       "assignment     "))  {  ensureTyped(t,  assign,  rightType);  }  else  {  ensureTyped(t,  assign);  }  }  [CLASS]  TypeCheck  [METHOD]  visitAssign  [RETURN_TYPE]  void  NodeTraversal  t  Node  assign  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  jsType  leftType  objectJsType  rightType  rvalueType  NodeTraversal  t  DiagnosticGroup  ALL_DIAGNOSTICS  CheckLevel  reportMissingOverride  reportUnknownTypes  Var  var  Node  assign  lvalue  object  object2  rightChild  rvalue  FunctionType  functionType  ScopeCreator  scopeCreator  String  OVERRIDING_PROTOTYPE_WITH_NON_OBJECT  functionPrivateName  message  property  property2  JSDocInfo  info  int  noTypeCheckSection  nullCount  typedCount  unknownCount  TypeValidator  validator  ObjectType  type  AbstractCompiler  compiler  JSTypeRegistry  typeRegistry  boolean  enterSection  externs  inExterns  report  reportMissingProperties  typeable  Scope  outerScope  topScope  DiagnosticType  BAD_DELETE  BAD_IMPLEMENTED_TYPE  BIT_OPERATION  CONFLICTING_EXTENDED_TYPE  CONFLICTING_IMPLEMENTED_TYPE  CONSTRUCTOR_NOT_CALLABLE  DETERMINISTIC_TEST  DETERMINISTIC_TEST_NO_RESULT  ENUM_DUP  ENUM_NOT_CONSTANT  EXPECTED_THIS_TYPE  FUNCTION_MASKS_VARIABLE  HIDDEN_INTERFACE_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY_MISMATCH  ILLEGAL_IMPLICIT_CAST  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE  INEXISTENT_ENUM_ELEMENT  INEXISTENT_PROPERTY  INTERFACE_FUNCTION_NOT_EMPTY  INTERFACE_METHOD_OVERRIDE  INVALID_INTERFACE_MEMBER_DECLARATION  MULTIPLE_VAR_DEF  NOT_A_CONSTRUCTOR  NOT_CALLABLE  UNEXPECTED_TOKEN  UNKNOWN_EXPR_TYPE  UNKNOWN_OVERRIDE  UNRESOLVED_TYPE  WRONG_ARGUMENT_COUNT  diagnosticType  InferJSDocInfo  inferJSDocInfo  	projects/Closure66/src/com/google/javascript/jscomp/TypeCheck.java	0.21320071635561041	939	939	2	replace	JSType  rightChild  =  getJSType(leftChild);	  JSType    rightChild    =    getJSType(right);    	non-compiled	[CE]  orphaned  case	15	None	replace
106	[BUG]  [BUGGY]  JSType  rightChild  =  getJSType(lvalue);  [CE]  orphaned  case  [FE]                                AssertionFailedError      [CONTEXT]      Var  var  =  t.getScope().getVar(lvalue.getString());  if  (var  !=  null)  {  if  (var.isTypeInferred())  {  return;  }  }  }  JSType  leftType  =  getJSType(lvalue);      [BUGGY]  JSType  rightChild  =  getJSType(lvalue);  [BUGGY]      JSType  rightType  =  getJSType(rightChild);  if  (validator.expectCanAssignTo(  t,  assign,  rightType,  leftType,       "assignment     "))  {  ensureTyped(t,  assign,  rightType);  }  else  {  ensureTyped(t,  assign);  }  }  [CLASS]  TypeCheck  [METHOD]  visitAssign  [RETURN_TYPE]  void  NodeTraversal  t  Node  assign  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  jsType  leftType  objectJsType  rightType  rvalueType  NodeTraversal  t  DiagnosticGroup  ALL_DIAGNOSTICS  CheckLevel  reportMissingOverride  reportUnknownTypes  Var  var  Node  assign  lvalue  object  object2  rightChild  rvalue  FunctionType  functionType  ScopeCreator  scopeCreator  String  OVERRIDING_PROTOTYPE_WITH_NON_OBJECT  functionPrivateName  message  property  property2  JSDocInfo  info  int  noTypeCheckSection  nullCount  typedCount  unknownCount  TypeValidator  validator  ObjectType  type  AbstractCompiler  compiler  JSTypeRegistry  typeRegistry  boolean  enterSection  externs  inExterns  report  reportMissingProperties  typeable  Scope  outerScope  topScope  DiagnosticType  BAD_DELETE  BAD_IMPLEMENTED_TYPE  BIT_OPERATION  CONFLICTING_EXTENDED_TYPE  CONFLICTING_IMPLEMENTED_TYPE  CONSTRUCTOR_NOT_CALLABLE  DETERMINISTIC_TEST  DETERMINISTIC_TEST_NO_RESULT  ENUM_DUP  ENUM_NOT_CONSTANT  EXPECTED_THIS_TYPE  FUNCTION_MASKS_VARIABLE  HIDDEN_INTERFACE_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY_MISMATCH  ILLEGAL_IMPLICIT_CAST  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE  INEXISTENT_ENUM_ELEMENT  INEXISTENT_PROPERTY  INTERFACE_FUNCTION_NOT_EMPTY  INTERFACE_METHOD_OVERRIDE  INVALID_INTERFACE_MEMBER_DECLARATION  MULTIPLE_VAR_DEF  NOT_A_CONSTRUCTOR  NOT_CALLABLE  UNEXPECTED_TOKEN  UNKNOWN_EXPR_TYPE  UNKNOWN_OVERRIDE  UNRESOLVED_TYPE  WRONG_ARGUMENT_COUNT  diagnosticType  InferJSDocInfo  inferJSDocInfo  	projects/Closure66/src/com/google/javascript/jscomp/TypeCheck.java	0.21320071635561041	939	939	2	replace	JSType  rightChild  =  getJSType(lvalue);	  JSType    rightChild    =    getJSType(right);    	non-compiled	[CE]  orphaned  case	15	None	replace
107	[BUG]  [BUGGY]  Node  rightChild  =  t.getScope().getVar(rightType.getString(),  leftType);  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      Var  var  =  t.getScope().getVar(lvalue.getString());  if  (var  !=  null)  {  if  (var.isTypeInferred())  {  return;  }  }  }  JSType  leftType  =  getJSType(lvalue);      [BUGGY]  Node  rightChild  =  t.getScope().getVar(rightType.getString(),  leftType);  [BUGGY]      JSType  rightType  =  getJSType(rightChild);  if  (validator.expectCanAssignTo(  t,  assign,  rightType,  leftType,       "assignment     "))  {  ensureTyped(t,  assign,  rightType);  }  else  {  ensureTyped(t,  assign);  }  }  [CLASS]  TypeCheck  [METHOD]  visitAssign  [RETURN_TYPE]  void  NodeTraversal  t  Node  assign  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  jsType  leftType  objectJsType  rightType  rvalueType  NodeTraversal  t  DiagnosticGroup  ALL_DIAGNOSTICS  CheckLevel  reportMissingOverride  reportUnknownTypes  Var  var  Node  assign  lvalue  object  object2  rightChild  rvalue  FunctionType  functionType  ScopeCreator  scopeCreator  String  OVERRIDING_PROTOTYPE_WITH_NON_OBJECT  functionPrivateName  message  property  property2  JSDocInfo  info  int  noTypeCheckSection  nullCount  typedCount  unknownCount  TypeValidator  validator  ObjectType  type  AbstractCompiler  compiler  JSTypeRegistry  typeRegistry  boolean  enterSection  externs  inExterns  report  reportMissingProperties  typeable  Scope  outerScope  topScope  DiagnosticType  BAD_DELETE  BAD_IMPLEMENTED_TYPE  BIT_OPERATION  CONFLICTING_EXTENDED_TYPE  CONFLICTING_IMPLEMENTED_TYPE  CONSTRUCTOR_NOT_CALLABLE  DETERMINISTIC_TEST  DETERMINISTIC_TEST_NO_RESULT  ENUM_DUP  ENUM_NOT_CONSTANT  EXPECTED_THIS_TYPE  FUNCTION_MASKS_VARIABLE  HIDDEN_INTERFACE_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY_MISMATCH  ILLEGAL_IMPLICIT_CAST  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE  INEXISTENT_ENUM_ELEMENT  INEXISTENT_PROPERTY  INTERFACE_FUNCTION_NOT_EMPTY  INTERFACE_METHOD_OVERRIDE  INVALID_INTERFACE_MEMBER_DECLARATION  MULTIPLE_VAR_DEF  NOT_A_CONSTRUCTOR  NOT_CALLABLE  UNEXPECTED_TOKEN  UNKNOWN_EXPR_TYPE  UNKNOWN_OVERRIDE  UNRESOLVED_TYPE  WRONG_ARGUMENT_COUNT  diagnosticType  InferJSDocInfo  inferJSDocInfo  	projects/Closure66/src/com/google/javascript/jscomp/TypeCheck.java	0.21320071635561041	939	939	2	replace	Node  rightChild  =  t.getScope().getVar(rightType.getString(),  leftType);	  Node    rightChild    =    t.getScope().getVar(rightType.getString());    	non-compiled	[CE]  orphaned  case	10	None	replace
108	[BUG]  [BUGGY]  Node  rightChild  =  t.getScope().getVar(rightType.getString()  +  1);  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      Var  var  =  t.getScope().getVar(lvalue.getString());  if  (var  !=  null)  {  if  (var.isTypeInferred())  {  return;  }  }  }  JSType  leftType  =  getJSType(lvalue);      [BUGGY]  Node  rightChild  =  t.getScope().getVar(rightType.getString()  +  1);  [BUGGY]      JSType  rightType  =  getJSType(rightChild);  if  (validator.expectCanAssignTo(  t,  assign,  rightType,  leftType,       "assignment     "))  {  ensureTyped(t,  assign,  rightType);  }  else  {  ensureTyped(t,  assign);  }  }  [CLASS]  TypeCheck  [METHOD]  visitAssign  [RETURN_TYPE]  void  NodeTraversal  t  Node  assign  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  jsType  leftType  objectJsType  rightType  rvalueType  NodeTraversal  t  DiagnosticGroup  ALL_DIAGNOSTICS  CheckLevel  reportMissingOverride  reportUnknownTypes  Var  var  Node  assign  lvalue  object  object2  rightChild  rvalue  FunctionType  functionType  ScopeCreator  scopeCreator  String  OVERRIDING_PROTOTYPE_WITH_NON_OBJECT  functionPrivateName  message  property  property2  JSDocInfo  info  int  noTypeCheckSection  nullCount  typedCount  unknownCount  TypeValidator  validator  ObjectType  type  AbstractCompiler  compiler  JSTypeRegistry  typeRegistry  boolean  enterSection  externs  inExterns  report  reportMissingProperties  typeable  Scope  outerScope  topScope  DiagnosticType  BAD_DELETE  BAD_IMPLEMENTED_TYPE  BIT_OPERATION  CONFLICTING_EXTENDED_TYPE  CONFLICTING_IMPLEMENTED_TYPE  CONSTRUCTOR_NOT_CALLABLE  DETERMINISTIC_TEST  DETERMINISTIC_TEST_NO_RESULT  ENUM_DUP  ENUM_NOT_CONSTANT  EXPECTED_THIS_TYPE  FUNCTION_MASKS_VARIABLE  HIDDEN_INTERFACE_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY_MISMATCH  ILLEGAL_IMPLICIT_CAST  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE  INEXISTENT_ENUM_ELEMENT  INEXISTENT_PROPERTY  INTERFACE_FUNCTION_NOT_EMPTY  INTERFACE_METHOD_OVERRIDE  INVALID_INTERFACE_MEMBER_DECLARATION  MULTIPLE_VAR_DEF  NOT_A_CONSTRUCTOR  NOT_CALLABLE  UNEXPECTED_TOKEN  UNKNOWN_EXPR_TYPE  UNKNOWN_OVERRIDE  UNRESOLVED_TYPE  WRONG_ARGUMENT_COUNT  diagnosticType  InferJSDocInfo  inferJSDocInfo  	projects/Closure66/src/com/google/javascript/jscomp/TypeCheck.java	0.21320071635561041	939	939	2	replace	Node  rightChild  =  t.getScope().getVar(rightType.getString()  +  1);	  Node    rightChild    =    t.getScope().getVar(rightType.getString());    	non-compiled	[CE]  orphaned  case	10	None	replace
109	[BUG]  [BUGGY]  Node  rightChild  =  t.getScope().getNode(lvalue.getString());  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      Var  var  =  t.getScope().getVar(lvalue.getString());  if  (var  !=  null)  {  if  (var.isTypeInferred())  {  return;  }  }  }  JSType  leftType  =  getJSType(lvalue);      [BUGGY]  Node  rightChild  =  t.getScope().getNode(lvalue.getString());  [BUGGY]      JSType  rightType  =  getJSType(rightChild);  if  (validator.expectCanAssignTo(  t,  assign,  rightType,  leftType,       "assignment     "))  {  ensureTyped(t,  assign,  rightType);  }  else  {  ensureTyped(t,  assign);  }  }  [CLASS]  TypeCheck  [METHOD]  visitAssign  [RETURN_TYPE]  void  NodeTraversal  t  Node  assign  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  jsType  leftType  objectJsType  rightType  rvalueType  NodeTraversal  t  DiagnosticGroup  ALL_DIAGNOSTICS  CheckLevel  reportMissingOverride  reportUnknownTypes  Var  var  Node  assign  lvalue  object  object2  rightChild  rvalue  FunctionType  functionType  ScopeCreator  scopeCreator  String  OVERRIDING_PROTOTYPE_WITH_NON_OBJECT  functionPrivateName  message  property  property2  JSDocInfo  info  int  noTypeCheckSection  nullCount  typedCount  unknownCount  TypeValidator  validator  ObjectType  type  AbstractCompiler  compiler  JSTypeRegistry  typeRegistry  boolean  enterSection  externs  inExterns  report  reportMissingProperties  typeable  Scope  outerScope  topScope  DiagnosticType  BAD_DELETE  BAD_IMPLEMENTED_TYPE  BIT_OPERATION  CONFLICTING_EXTENDED_TYPE  CONFLICTING_IMPLEMENTED_TYPE  CONSTRUCTOR_NOT_CALLABLE  DETERMINISTIC_TEST  DETERMINISTIC_TEST_NO_RESULT  ENUM_DUP  ENUM_NOT_CONSTANT  EXPECTED_THIS_TYPE  FUNCTION_MASKS_VARIABLE  HIDDEN_INTERFACE_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY_MISMATCH  ILLEGAL_IMPLICIT_CAST  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE  INEXISTENT_ENUM_ELEMENT  INEXISTENT_PROPERTY  INTERFACE_FUNCTION_NOT_EMPTY  INTERFACE_METHOD_OVERRIDE  INVALID_INTERFACE_MEMBER_DECLARATION  MULTIPLE_VAR_DEF  NOT_A_CONSTRUCTOR  NOT_CALLABLE  UNEXPECTED_TOKEN  UNKNOWN_EXPR_TYPE  UNKNOWN_OVERRIDE  UNRESOLVED_TYPE  WRONG_ARGUMENT_COUNT  diagnosticType  InferJSDocInfo  inferJSDocInfo  	projects/Closure66/src/com/google/javascript/jscomp/TypeCheck.java	0.21320071635561041	939	939	2	replace	Node  rightChild  =  t.getScope().getNode(lvalue.getString());	  Node    rightChild    =    t.getScope().getVar(rightType.getString());    	non-compiled	[CE]  orphaned  case	10	None	replace
110	[BUG]  [BUGGY]  Node  rightChild  =  leftType.getScope().getVar(rightType.getString());  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      Var  var  =  t.getScope().getVar(lvalue.getString());  if  (var  !=  null)  {  if  (var.isTypeInferred())  {  return;  }  }  }  JSType  leftType  =  getJSType(lvalue);      [BUGGY]  Node  rightChild  =  leftType.getScope().getVar(rightType.getString());  [BUGGY]      JSType  rightType  =  getJSType(rightChild);  if  (validator.expectCanAssignTo(  t,  assign,  rightType,  leftType,       "assignment     "))  {  ensureTyped(t,  assign,  rightType);  }  else  {  ensureTyped(t,  assign);  }  }  [CLASS]  TypeCheck  [METHOD]  visitAssign  [RETURN_TYPE]  void  NodeTraversal  t  Node  assign  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  jsType  leftType  objectJsType  rightType  rvalueType  NodeTraversal  t  DiagnosticGroup  ALL_DIAGNOSTICS  CheckLevel  reportMissingOverride  reportUnknownTypes  Var  var  Node  assign  lvalue  object  object2  rightChild  rvalue  FunctionType  functionType  ScopeCreator  scopeCreator  String  OVERRIDING_PROTOTYPE_WITH_NON_OBJECT  functionPrivateName  message  property  property2  JSDocInfo  info  int  noTypeCheckSection  nullCount  typedCount  unknownCount  TypeValidator  validator  ObjectType  type  AbstractCompiler  compiler  JSTypeRegistry  typeRegistry  boolean  enterSection  externs  inExterns  report  reportMissingProperties  typeable  Scope  outerScope  topScope  DiagnosticType  BAD_DELETE  BAD_IMPLEMENTED_TYPE  BIT_OPERATION  CONFLICTING_EXTENDED_TYPE  CONFLICTING_IMPLEMENTED_TYPE  CONSTRUCTOR_NOT_CALLABLE  DETERMINISTIC_TEST  DETERMINISTIC_TEST_NO_RESULT  ENUM_DUP  ENUM_NOT_CONSTANT  EXPECTED_THIS_TYPE  FUNCTION_MASKS_VARIABLE  HIDDEN_INTERFACE_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY_MISMATCH  ILLEGAL_IMPLICIT_CAST  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE  INEXISTENT_ENUM_ELEMENT  INEXISTENT_PROPERTY  INTERFACE_FUNCTION_NOT_EMPTY  INTERFACE_METHOD_OVERRIDE  INVALID_INTERFACE_MEMBER_DECLARATION  MULTIPLE_VAR_DEF  NOT_A_CONSTRUCTOR  NOT_CALLABLE  UNEXPECTED_TOKEN  UNKNOWN_EXPR_TYPE  UNKNOWN_OVERRIDE  UNRESOLVED_TYPE  WRONG_ARGUMENT_COUNT  diagnosticType  InferJSDocInfo  inferJSDocInfo  	projects/Closure66/src/com/google/javascript/jscomp/TypeCheck.java	0.21320071635561041	939	939	2	replace	Node  rightChild  =  leftType.getScope().getVar(rightType.getString());	  Node    rightChild    =    t.getScope().getVar(rightType.getString());    	non-compiled	[CE]  orphaned  case	10	None	replace
111	[BUG]  [BUGGY]  Node  rightChild  =  t.getRight();  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      Var  var  =  t.getScope().getVar(lvalue.getString());  if  (var  !=  null)  {  if  (var.isTypeInferred())  {  return;  }  }  }  JSType  leftType  =  getJSType(lvalue);      [BUGGY]  Node  rightChild  =  t.getRight();  [BUGGY]      JSType  rightType  =  getJSType(rightChild);  if  (validator.expectCanAssignTo(  t,  assign,  rightType,  leftType,       "assignment     "))  {  ensureTyped(t,  assign,  rightType);  }  else  {  ensureTyped(t,  assign);  }  }  [CLASS]  TypeCheck  [METHOD]  visitAssign  [RETURN_TYPE]  void  NodeTraversal  t  Node  assign  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  jsType  leftType  objectJsType  rightType  rvalueType  NodeTraversal  t  DiagnosticGroup  ALL_DIAGNOSTICS  CheckLevel  reportMissingOverride  reportUnknownTypes  Var  var  Node  assign  lvalue  object  object2  rightChild  rvalue  FunctionType  functionType  ScopeCreator  scopeCreator  String  OVERRIDING_PROTOTYPE_WITH_NON_OBJECT  functionPrivateName  message  property  property2  JSDocInfo  info  int  noTypeCheckSection  nullCount  typedCount  unknownCount  TypeValidator  validator  ObjectType  type  AbstractCompiler  compiler  JSTypeRegistry  typeRegistry  boolean  enterSection  externs  inExterns  report  reportMissingProperties  typeable  Scope  outerScope  topScope  DiagnosticType  BAD_DELETE  BAD_IMPLEMENTED_TYPE  BIT_OPERATION  CONFLICTING_EXTENDED_TYPE  CONFLICTING_IMPLEMENTED_TYPE  CONSTRUCTOR_NOT_CALLABLE  DETERMINISTIC_TEST  DETERMINISTIC_TEST_NO_RESULT  ENUM_DUP  ENUM_NOT_CONSTANT  EXPECTED_THIS_TYPE  FUNCTION_MASKS_VARIABLE  HIDDEN_INTERFACE_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY_MISMATCH  ILLEGAL_IMPLICIT_CAST  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE  INEXISTENT_ENUM_ELEMENT  INEXISTENT_PROPERTY  INTERFACE_FUNCTION_NOT_EMPTY  INTERFACE_METHOD_OVERRIDE  INVALID_INTERFACE_MEMBER_DECLARATION  MULTIPLE_VAR_DEF  NOT_A_CONSTRUCTOR  NOT_CALLABLE  UNEXPECTED_TOKEN  UNKNOWN_EXPR_TYPE  UNKNOWN_OVERRIDE  UNRESOLVED_TYPE  WRONG_ARGUMENT_COUNT  diagnosticType  InferJSDocInfo  inferJSDocInfo  	projects/Closure66/src/com/google/javascript/jscomp/TypeCheck.java	0.21320071635561041	939	939	2	replace	Node  rightChild  =  t.getRight();	  Node    rightChild    =    t.getNext();    	non-compiled	[CE]  orphaned  case	25	None	replace
112	[BUG]  [BUGGY]  Node  rightChild  =  t.getScope().getRawChild(lvalue);  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      Var  var  =  t.getScope().getVar(lvalue.getString());  if  (var  !=  null)  {  if  (var.isTypeInferred())  {  return;  }  }  }  JSType  leftType  =  getJSType(lvalue);      [BUGGY]  Node  rightChild  =  t.getScope().getRawChild(lvalue);  [BUGGY]      JSType  rightType  =  getJSType(rightChild);  if  (validator.expectCanAssignTo(  t,  assign,  rightType,  leftType,       "assignment     "))  {  ensureTyped(t,  assign,  rightType);  }  else  {  ensureTyped(t,  assign);  }  }  [CLASS]  TypeCheck  [METHOD]  visitAssign  [RETURN_TYPE]  void  NodeTraversal  t  Node  assign  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  jsType  leftType  objectJsType  rightType  rvalueType  NodeTraversal  t  DiagnosticGroup  ALL_DIAGNOSTICS  CheckLevel  reportMissingOverride  reportUnknownTypes  Var  var  Node  assign  lvalue  object  object2  rightChild  rvalue  FunctionType  functionType  ScopeCreator  scopeCreator  String  OVERRIDING_PROTOTYPE_WITH_NON_OBJECT  functionPrivateName  message  property  property2  JSDocInfo  info  int  noTypeCheckSection  nullCount  typedCount  unknownCount  TypeValidator  validator  ObjectType  type  AbstractCompiler  compiler  JSTypeRegistry  typeRegistry  boolean  enterSection  externs  inExterns  report  reportMissingProperties  typeable  Scope  outerScope  topScope  DiagnosticType  BAD_DELETE  BAD_IMPLEMENTED_TYPE  BIT_OPERATION  CONFLICTING_EXTENDED_TYPE  CONFLICTING_IMPLEMENTED_TYPE  CONSTRUCTOR_NOT_CALLABLE  DETERMINISTIC_TEST  DETERMINISTIC_TEST_NO_RESULT  ENUM_DUP  ENUM_NOT_CONSTANT  EXPECTED_THIS_TYPE  FUNCTION_MASKS_VARIABLE  HIDDEN_INTERFACE_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY_MISMATCH  ILLEGAL_IMPLICIT_CAST  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE  INEXISTENT_ENUM_ELEMENT  INEXISTENT_PROPERTY  INTERFACE_FUNCTION_NOT_EMPTY  INTERFACE_METHOD_OVERRIDE  INVALID_INTERFACE_MEMBER_DECLARATION  MULTIPLE_VAR_DEF  NOT_A_CONSTRUCTOR  NOT_CALLABLE  UNEXPECTED_TOKEN  UNKNOWN_EXPR_TYPE  UNKNOWN_OVERRIDE  UNRESOLVED_TYPE  WRONG_ARGUMENT_COUNT  diagnosticType  InferJSDocInfo  inferJSDocInfo  	projects/Closure66/src/com/google/javascript/jscomp/TypeCheck.java	0.21320071635561041	939	939	2	replace	Node  rightChild  =  t.getScope().getRawChild(lvalue);	  Node    rightChild    =    t.getScope().getNext();    	non-compiled	[CE]  orphaned  case	3	None	replace
113	[BUG]  [BUGGY]  JSType  rightType  =  getJSType(rvalue);  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      Var  var  =  t.getScope().getVar(lvalue.getString());  if  (var  !=  null)  {  if  (var.isTypeInferred())  {  return;  }  }  }  JSType  leftType  =  getJSType(lvalue);      [BUGGY]  JSType  rightType  =  getJSType(rvalue);  [BUGGY]      JSType  rightType  =  getJSType(rightChild);  if  (validator.expectCanAssignTo(  t,  assign,  rightType,  leftType,       "assignment     "))  {  ensureTyped(t,  assign,  rightType);  }  else  {  ensureTyped(t,  assign);  }  }  [CLASS]  TypeCheck  [METHOD]  visitAssign  [RETURN_TYPE]  void  NodeTraversal  t  Node  assign  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  jsType  leftType  objectJsType  rightType  rvalueType  NodeTraversal  t  DiagnosticGroup  ALL_DIAGNOSTICS  CheckLevel  reportMissingOverride  reportUnknownTypes  Var  var  Node  assign  lvalue  object  object2  rightChild  rvalue  FunctionType  functionType  ScopeCreator  scopeCreator  String  OVERRIDING_PROTOTYPE_WITH_NON_OBJECT  functionPrivateName  message  property  property2  JSDocInfo  info  int  noTypeCheckSection  nullCount  typedCount  unknownCount  TypeValidator  validator  ObjectType  type  AbstractCompiler  compiler  JSTypeRegistry  typeRegistry  boolean  enterSection  externs  inExterns  report  reportMissingProperties  typeable  Scope  outerScope  topScope  DiagnosticType  BAD_DELETE  BAD_IMPLEMENTED_TYPE  BIT_OPERATION  CONFLICTING_EXTENDED_TYPE  CONFLICTING_IMPLEMENTED_TYPE  CONSTRUCTOR_NOT_CALLABLE  DETERMINISTIC_TEST  DETERMINISTIC_TEST_NO_RESULT  ENUM_DUP  ENUM_NOT_CONSTANT  EXPECTED_THIS_TYPE  FUNCTION_MASKS_VARIABLE  HIDDEN_INTERFACE_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY_MISMATCH  ILLEGAL_IMPLICIT_CAST  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE  INEXISTENT_ENUM_ELEMENT  INEXISTENT_PROPERTY  INTERFACE_FUNCTION_NOT_EMPTY  INTERFACE_METHOD_OVERRIDE  INVALID_INTERFACE_MEMBER_DECLARATION  MULTIPLE_VAR_DEF  NOT_A_CONSTRUCTOR  NOT_CALLABLE  UNEXPECTED_TOKEN  UNKNOWN_EXPR_TYPE  UNKNOWN_OVERRIDE  UNRESOLVED_TYPE  WRONG_ARGUMENT_COUNT  diagnosticType  InferJSDocInfo  inferJSDocInfo  	projects/Closure66/src/com/google/javascript/jscomp/TypeCheck.java	0.21320071635561041	939	939	2	replace	JSType  rightType  =  getJSType(rvalue);	  JSType    rightType    =    getJSType(rightChild);    	non-compiled	[CE]  orphaned  case	16	None	replace
114	[BUG]  [BUGGY]  JSType  rightType  =  getJSType(rightChild,  rvalue);  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]      Var  var  =  t.getScope().getVar(lvalue.getString());  if  (var  !=  null)  {  if  (var.isTypeInferred())  {  return;  }  }  }  JSType  leftType  =  getJSType(lvalue);      [BUGGY]  JSType  rightType  =  getJSType(rightChild,  rvalue);  [BUGGY]      JSType  rightType  =  getJSType(rightChild);  if  (validator.expectCanAssignTo(  t,  assign,  rightType,  leftType,       "assignment     "))  {  ensureTyped(t,  assign,  rightType);  }  else  {  ensureTyped(t,  assign);  }  }  [CLASS]  TypeCheck  [METHOD]  visitAssign  [RETURN_TYPE]  void  NodeTraversal  t  Node  assign  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  jsType  leftType  objectJsType  rightType  rvalueType  NodeTraversal  t  DiagnosticGroup  ALL_DIAGNOSTICS  CheckLevel  reportMissingOverride  reportUnknownTypes  Var  var  Node  assign  lvalue  object  object2  rightChild  rvalue  FunctionType  functionType  ScopeCreator  scopeCreator  String  OVERRIDING_PROTOTYPE_WITH_NON_OBJECT  functionPrivateName  message  property  property2  JSDocInfo  info  int  noTypeCheckSection  nullCount  typedCount  unknownCount  TypeValidator  validator  ObjectType  type  AbstractCompiler  compiler  JSTypeRegistry  typeRegistry  boolean  enterSection  externs  inExterns  report  reportMissingProperties  typeable  Scope  outerScope  topScope  DiagnosticType  BAD_DELETE  BAD_IMPLEMENTED_TYPE  BIT_OPERATION  CONFLICTING_EXTENDED_TYPE  CONFLICTING_IMPLEMENTED_TYPE  CONSTRUCTOR_NOT_CALLABLE  DETERMINISTIC_TEST  DETERMINISTIC_TEST_NO_RESULT  ENUM_DUP  ENUM_NOT_CONSTANT  EXPECTED_THIS_TYPE  FUNCTION_MASKS_VARIABLE  HIDDEN_INTERFACE_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY_MISMATCH  ILLEGAL_IMPLICIT_CAST  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE  INEXISTENT_ENUM_ELEMENT  INEXISTENT_PROPERTY  INTERFACE_FUNCTION_NOT_EMPTY  INTERFACE_METHOD_OVERRIDE  INVALID_INTERFACE_MEMBER_DECLARATION  MULTIPLE_VAR_DEF  NOT_A_CONSTRUCTOR  NOT_CALLABLE  UNEXPECTED_TOKEN  UNKNOWN_EXPR_TYPE  UNKNOWN_OVERRIDE  UNRESOLVED_TYPE  WRONG_ARGUMENT_COUNT  diagnosticType  InferJSDocInfo  inferJSDocInfo  	projects/Closure66/src/com/google/javascript/jscomp/TypeCheck.java	0.21320071635561041	939	939	2	replace	JSType  rightType  =  getJSType(rightChild,  rvalue);	  JSType    rightType    =    getJSType(rightChild);    	non-compiled	[CE]  orphaned  case	16	None	replace
115	[BUG]  [BUGGY]  Node  rightChild  =  t.getScope().getVar(leftType.toString());  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      Var  var  =  t.getScope().getVar(lvalue.getString());  if  (var  !=  null)  {  if  (var.isTypeInferred())  {  return;  }  }  }  JSType  leftType  =  getJSType(lvalue);      [BUGGY]  Node  rightChild  =  t.getScope().getVar(leftType.toString());  [BUGGY]      JSType  rightType  =  getJSType(rightChild);  if  (validator.expectCanAssignTo(  t,  assign,  rightType,  leftType,       "assignment     "))  {  ensureTyped(t,  assign,  rightType);  }  else  {  ensureTyped(t,  assign);  }  }  [CLASS]  TypeCheck  [METHOD]  visitAssign  [RETURN_TYPE]  void  NodeTraversal  t  Node  assign  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  jsType  leftType  objectJsType  rightType  rvalueType  NodeTraversal  t  DiagnosticGroup  ALL_DIAGNOSTICS  CheckLevel  reportMissingOverride  reportUnknownTypes  Var  var  Node  assign  lvalue  object  object2  rightChild  rvalue  FunctionType  functionType  ScopeCreator  scopeCreator  String  OVERRIDING_PROTOTYPE_WITH_NON_OBJECT  functionPrivateName  message  property  property2  JSDocInfo  info  int  noTypeCheckSection  nullCount  typedCount  unknownCount  TypeValidator  validator  ObjectType  type  AbstractCompiler  compiler  JSTypeRegistry  typeRegistry  boolean  enterSection  externs  inExterns  report  reportMissingProperties  typeable  Scope  outerScope  topScope  DiagnosticType  BAD_DELETE  BAD_IMPLEMENTED_TYPE  BIT_OPERATION  CONFLICTING_EXTENDED_TYPE  CONFLICTING_IMPLEMENTED_TYPE  CONSTRUCTOR_NOT_CALLABLE  DETERMINISTIC_TEST  DETERMINISTIC_TEST_NO_RESULT  ENUM_DUP  ENUM_NOT_CONSTANT  EXPECTED_THIS_TYPE  FUNCTION_MASKS_VARIABLE  HIDDEN_INTERFACE_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY_MISMATCH  ILLEGAL_IMPLICIT_CAST  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE  INEXISTENT_ENUM_ELEMENT  INEXISTENT_PROPERTY  INTERFACE_FUNCTION_NOT_EMPTY  INTERFACE_METHOD_OVERRIDE  INVALID_INTERFACE_MEMBER_DECLARATION  MULTIPLE_VAR_DEF  NOT_A_CONSTRUCTOR  NOT_CALLABLE  UNEXPECTED_TOKEN  UNKNOWN_EXPR_TYPE  UNKNOWN_OVERRIDE  UNRESOLVED_TYPE  WRONG_ARGUMENT_COUNT  diagnosticType  InferJSDocInfo  inferJSDocInfo  	projects/Closure66/src/com/google/javascript/jscomp/TypeCheck.java	0.21320071635561041	939	939	2	replace	Node  rightChild  =  t.getScope().getVar(leftType.toString());	  Node    rightChild    =    t.getScope().getVar(lvalue.toString());    	non-compiled	[CE]  orphaned  case	11	None	replace
116	[BUG]  [BUGGY]  Node  rightChild  =  t.getScope().getVar(rightType.toString());  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      Var  var  =  t.getScope().getVar(lvalue.getString());  if  (var  !=  null)  {  if  (var.isTypeInferred())  {  return;  }  }  }  JSType  leftType  =  getJSType(lvalue);      [BUGGY]  Node  rightChild  =  t.getScope().getVar(rightType.toString());  [BUGGY]      JSType  rightType  =  getJSType(rightChild);  if  (validator.expectCanAssignTo(  t,  assign,  rightType,  leftType,       "assignment     "))  {  ensureTyped(t,  assign,  rightType);  }  else  {  ensureTyped(t,  assign);  }  }  [CLASS]  TypeCheck  [METHOD]  visitAssign  [RETURN_TYPE]  void  NodeTraversal  t  Node  assign  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  jsType  leftType  objectJsType  rightType  rvalueType  NodeTraversal  t  DiagnosticGroup  ALL_DIAGNOSTICS  CheckLevel  reportMissingOverride  reportUnknownTypes  Var  var  Node  assign  lvalue  object  object2  rightChild  rvalue  FunctionType  functionType  ScopeCreator  scopeCreator  String  OVERRIDING_PROTOTYPE_WITH_NON_OBJECT  functionPrivateName  message  property  property2  JSDocInfo  info  int  noTypeCheckSection  nullCount  typedCount  unknownCount  TypeValidator  validator  ObjectType  type  AbstractCompiler  compiler  JSTypeRegistry  typeRegistry  boolean  enterSection  externs  inExterns  report  reportMissingProperties  typeable  Scope  outerScope  topScope  DiagnosticType  BAD_DELETE  BAD_IMPLEMENTED_TYPE  BIT_OPERATION  CONFLICTING_EXTENDED_TYPE  CONFLICTING_IMPLEMENTED_TYPE  CONSTRUCTOR_NOT_CALLABLE  DETERMINISTIC_TEST  DETERMINISTIC_TEST_NO_RESULT  ENUM_DUP  ENUM_NOT_CONSTANT  EXPECTED_THIS_TYPE  FUNCTION_MASKS_VARIABLE  HIDDEN_INTERFACE_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY_MISMATCH  ILLEGAL_IMPLICIT_CAST  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE  INEXISTENT_ENUM_ELEMENT  INEXISTENT_PROPERTY  INTERFACE_FUNCTION_NOT_EMPTY  INTERFACE_METHOD_OVERRIDE  INVALID_INTERFACE_MEMBER_DECLARATION  MULTIPLE_VAR_DEF  NOT_A_CONSTRUCTOR  NOT_CALLABLE  UNEXPECTED_TOKEN  UNKNOWN_EXPR_TYPE  UNKNOWN_OVERRIDE  UNRESOLVED_TYPE  WRONG_ARGUMENT_COUNT  diagnosticType  InferJSDocInfo  inferJSDocInfo  	projects/Closure66/src/com/google/javascript/jscomp/TypeCheck.java	0.21320071635561041	939	939	2	replace	Node  rightChild  =  t.getScope().getVar(rightType.toString());	  Node    rightChild    =    t.getScope().getVar(lvalue.toString());    	non-compiled	[CE]  orphaned  case	11	None	replace
117	[BUG]  [BUGGY]  Node  rightChild  =  t.getScope().getVar(rvalue.toString());  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      Var  var  =  t.getScope().getVar(lvalue.getString());  if  (var  !=  null)  {  if  (var.isTypeInferred())  {  return;  }  }  }  JSType  leftType  =  getJSType(lvalue);      [BUGGY]  Node  rightChild  =  t.getScope().getVar(rvalue.toString());  [BUGGY]      JSType  rightType  =  getJSType(rightChild);  if  (validator.expectCanAssignTo(  t,  assign,  rightType,  leftType,       "assignment     "))  {  ensureTyped(t,  assign,  rightType);  }  else  {  ensureTyped(t,  assign);  }  }  [CLASS]  TypeCheck  [METHOD]  visitAssign  [RETURN_TYPE]  void  NodeTraversal  t  Node  assign  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  jsType  leftType  objectJsType  rightType  rvalueType  NodeTraversal  t  DiagnosticGroup  ALL_DIAGNOSTICS  CheckLevel  reportMissingOverride  reportUnknownTypes  Var  var  Node  assign  lvalue  object  object2  rightChild  rvalue  FunctionType  functionType  ScopeCreator  scopeCreator  String  OVERRIDING_PROTOTYPE_WITH_NON_OBJECT  functionPrivateName  message  property  property2  JSDocInfo  info  int  noTypeCheckSection  nullCount  typedCount  unknownCount  TypeValidator  validator  ObjectType  type  AbstractCompiler  compiler  JSTypeRegistry  typeRegistry  boolean  enterSection  externs  inExterns  report  reportMissingProperties  typeable  Scope  outerScope  topScope  DiagnosticType  BAD_DELETE  BAD_IMPLEMENTED_TYPE  BIT_OPERATION  CONFLICTING_EXTENDED_TYPE  CONFLICTING_IMPLEMENTED_TYPE  CONSTRUCTOR_NOT_CALLABLE  DETERMINISTIC_TEST  DETERMINISTIC_TEST_NO_RESULT  ENUM_DUP  ENUM_NOT_CONSTANT  EXPECTED_THIS_TYPE  FUNCTION_MASKS_VARIABLE  HIDDEN_INTERFACE_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY_MISMATCH  ILLEGAL_IMPLICIT_CAST  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE  INEXISTENT_ENUM_ELEMENT  INEXISTENT_PROPERTY  INTERFACE_FUNCTION_NOT_EMPTY  INTERFACE_METHOD_OVERRIDE  INVALID_INTERFACE_MEMBER_DECLARATION  MULTIPLE_VAR_DEF  NOT_A_CONSTRUCTOR  NOT_CALLABLE  UNEXPECTED_TOKEN  UNKNOWN_EXPR_TYPE  UNKNOWN_OVERRIDE  UNRESOLVED_TYPE  WRONG_ARGUMENT_COUNT  diagnosticType  InferJSDocInfo  inferJSDocInfo  	projects/Closure66/src/com/google/javascript/jscomp/TypeCheck.java	0.21320071635561041	939	939	2	replace	Node  rightChild  =  t.getScope().getVar(rvalue.toString());	  Node    rightChild    =    t.getScope().getVar(lvalue.toString());    	non-compiled	[CE]  orphaned  case	11	None	replace
118	[BUG]  [BUGGY]  Node  rightChild  =  t.getScope().getVar(lvalue.toString()  +  1);  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      Var  var  =  t.getScope().getVar(lvalue.getString());  if  (var  !=  null)  {  if  (var.isTypeInferred())  {  return;  }  }  }  JSType  leftType  =  getJSType(lvalue);      [BUGGY]  Node  rightChild  =  t.getScope().getVar(lvalue.toString()  +  1);  [BUGGY]      JSType  rightType  =  getJSType(rightChild);  if  (validator.expectCanAssignTo(  t,  assign,  rightType,  leftType,       "assignment     "))  {  ensureTyped(t,  assign,  rightType);  }  else  {  ensureTyped(t,  assign);  }  }  [CLASS]  TypeCheck  [METHOD]  visitAssign  [RETURN_TYPE]  void  NodeTraversal  t  Node  assign  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  jsType  leftType  objectJsType  rightType  rvalueType  NodeTraversal  t  DiagnosticGroup  ALL_DIAGNOSTICS  CheckLevel  reportMissingOverride  reportUnknownTypes  Var  var  Node  assign  lvalue  object  object2  rightChild  rvalue  FunctionType  functionType  ScopeCreator  scopeCreator  String  OVERRIDING_PROTOTYPE_WITH_NON_OBJECT  functionPrivateName  message  property  property2  JSDocInfo  info  int  noTypeCheckSection  nullCount  typedCount  unknownCount  TypeValidator  validator  ObjectType  type  AbstractCompiler  compiler  JSTypeRegistry  typeRegistry  boolean  enterSection  externs  inExterns  report  reportMissingProperties  typeable  Scope  outerScope  topScope  DiagnosticType  BAD_DELETE  BAD_IMPLEMENTED_TYPE  BIT_OPERATION  CONFLICTING_EXTENDED_TYPE  CONFLICTING_IMPLEMENTED_TYPE  CONSTRUCTOR_NOT_CALLABLE  DETERMINISTIC_TEST  DETERMINISTIC_TEST_NO_RESULT  ENUM_DUP  ENUM_NOT_CONSTANT  EXPECTED_THIS_TYPE  FUNCTION_MASKS_VARIABLE  HIDDEN_INTERFACE_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY_MISMATCH  ILLEGAL_IMPLICIT_CAST  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE  INEXISTENT_ENUM_ELEMENT  INEXISTENT_PROPERTY  INTERFACE_FUNCTION_NOT_EMPTY  INTERFACE_METHOD_OVERRIDE  INVALID_INTERFACE_MEMBER_DECLARATION  MULTIPLE_VAR_DEF  NOT_A_CONSTRUCTOR  NOT_CALLABLE  UNEXPECTED_TOKEN  UNKNOWN_EXPR_TYPE  UNKNOWN_OVERRIDE  UNRESOLVED_TYPE  WRONG_ARGUMENT_COUNT  diagnosticType  InferJSDocInfo  inferJSDocInfo  	projects/Closure66/src/com/google/javascript/jscomp/TypeCheck.java	0.21320071635561041	939	939	2	replace	Node  rightChild  =  t.getScope().getVar(lvalue.toString()  +  1);	  Node    rightChild    =    t.getScope().getVar(lvalue.toString());    	non-compiled	[CE]  orphaned  case	11	None	replace
119	[BUG]  [BUGGY]  Node  rightChild  =  t.getScope().getVar(lvalue.toString())+  1;  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      Var  var  =  t.getScope().getVar(lvalue.getString());  if  (var  !=  null)  {  if  (var.isTypeInferred())  {  return;  }  }  }  JSType  leftType  =  getJSType(lvalue);      [BUGGY]  Node  rightChild  =  t.getScope().getVar(lvalue.toString())+  1;  [BUGGY]      JSType  rightType  =  getJSType(rightChild);  if  (validator.expectCanAssignTo(  t,  assign,  rightType,  leftType,       "assignment     "))  {  ensureTyped(t,  assign,  rightType);  }  else  {  ensureTyped(t,  assign);  }  }  [CLASS]  TypeCheck  [METHOD]  visitAssign  [RETURN_TYPE]  void  NodeTraversal  t  Node  assign  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  jsType  leftType  objectJsType  rightType  rvalueType  NodeTraversal  t  DiagnosticGroup  ALL_DIAGNOSTICS  CheckLevel  reportMissingOverride  reportUnknownTypes  Var  var  Node  assign  lvalue  object  object2  rightChild  rvalue  FunctionType  functionType  ScopeCreator  scopeCreator  String  OVERRIDING_PROTOTYPE_WITH_NON_OBJECT  functionPrivateName  message  property  property2  JSDocInfo  info  int  noTypeCheckSection  nullCount  typedCount  unknownCount  TypeValidator  validator  ObjectType  type  AbstractCompiler  compiler  JSTypeRegistry  typeRegistry  boolean  enterSection  externs  inExterns  report  reportMissingProperties  typeable  Scope  outerScope  topScope  DiagnosticType  BAD_DELETE  BAD_IMPLEMENTED_TYPE  BIT_OPERATION  CONFLICTING_EXTENDED_TYPE  CONFLICTING_IMPLEMENTED_TYPE  CONSTRUCTOR_NOT_CALLABLE  DETERMINISTIC_TEST  DETERMINISTIC_TEST_NO_RESULT  ENUM_DUP  ENUM_NOT_CONSTANT  EXPECTED_THIS_TYPE  FUNCTION_MASKS_VARIABLE  HIDDEN_INTERFACE_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY_MISMATCH  ILLEGAL_IMPLICIT_CAST  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE  INEXISTENT_ENUM_ELEMENT  INEXISTENT_PROPERTY  INTERFACE_FUNCTION_NOT_EMPTY  INTERFACE_METHOD_OVERRIDE  INVALID_INTERFACE_MEMBER_DECLARATION  MULTIPLE_VAR_DEF  NOT_A_CONSTRUCTOR  NOT_CALLABLE  UNEXPECTED_TOKEN  UNKNOWN_EXPR_TYPE  UNKNOWN_OVERRIDE  UNRESOLVED_TYPE  WRONG_ARGUMENT_COUNT  diagnosticType  InferJSDocInfo  inferJSDocInfo  	projects/Closure66/src/com/google/javascript/jscomp/TypeCheck.java	0.21320071635561041	939	939	2	replace	Node  rightChild  =  t.getScope().getVar(lvalue.toString())+  1;	  Node    rightChild    =    t.getScope().getVar(lvalue.toString());    	non-compiled	[CE]  orphaned  case	11	None	replace
120	[BUG]  [BUGGY]  Node  rightChild  =  leftType.getScope().getVar(leftType.getString());  [CE]  orphaned  case  [FE]            AssertionFailedError      [CONTEXT]      Var  var  =  t.getScope().getVar(lvalue.getString());  if  (var  !=  null)  {  if  (var.isTypeInferred())  {  return;  }  }  }  JSType  leftType  =  getJSType(lvalue);      [BUGGY]  Node  rightChild  =  leftType.getScope().getVar(leftType.getString());  [BUGGY]      JSType  rightType  =  getJSType(rightChild);  if  (validator.expectCanAssignTo(  t,  assign,  rightType,  leftType,       "assignment     "))  {  ensureTyped(t,  assign,  rightType);  }  else  {  ensureTyped(t,  assign);  }  }  [CLASS]  TypeCheck  [METHOD]  visitAssign  [RETURN_TYPE]  void  NodeTraversal  t  Node  assign  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  jsType  leftType  objectJsType  rightType  rvalueType  NodeTraversal  t  DiagnosticGroup  ALL_DIAGNOSTICS  CheckLevel  reportMissingOverride  reportUnknownTypes  Var  var  Node  assign  lvalue  object  object2  rightChild  rvalue  FunctionType  functionType  ScopeCreator  scopeCreator  String  OVERRIDING_PROTOTYPE_WITH_NON_OBJECT  functionPrivateName  message  property  property2  JSDocInfo  info  int  noTypeCheckSection  nullCount  typedCount  unknownCount  TypeValidator  validator  ObjectType  type  AbstractCompiler  compiler  JSTypeRegistry  typeRegistry  boolean  enterSection  externs  inExterns  report  reportMissingProperties  typeable  Scope  outerScope  topScope  DiagnosticType  BAD_DELETE  BAD_IMPLEMENTED_TYPE  BIT_OPERATION  CONFLICTING_EXTENDED_TYPE  CONFLICTING_IMPLEMENTED_TYPE  CONSTRUCTOR_NOT_CALLABLE  DETERMINISTIC_TEST  DETERMINISTIC_TEST_NO_RESULT  ENUM_DUP  ENUM_NOT_CONSTANT  EXPECTED_THIS_TYPE  FUNCTION_MASKS_VARIABLE  HIDDEN_INTERFACE_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY_MISMATCH  ILLEGAL_IMPLICIT_CAST  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE  INEXISTENT_ENUM_ELEMENT  INEXISTENT_PROPERTY  INTERFACE_FUNCTION_NOT_EMPTY  INTERFACE_METHOD_OVERRIDE  INVALID_INTERFACE_MEMBER_DECLARATION  MULTIPLE_VAR_DEF  NOT_A_CONSTRUCTOR  NOT_CALLABLE  UNEXPECTED_TOKEN  UNKNOWN_EXPR_TYPE  UNKNOWN_OVERRIDE  UNRESOLVED_TYPE  WRONG_ARGUMENT_COUNT  diagnosticType  InferJSDocInfo  inferJSDocInfo  	projects/Closure66/src/com/google/javascript/jscomp/TypeCheck.java	0.21320071635561041	939	939	2	replace	Node  rightChild  =  leftType.getScope().getVar(leftType.getString());	  Node    rightChild    =    t.getScope().getVar(leftType.getString());    	non-compiled	[CE]  orphaned  case	7	None	replace
121	[BUG]  [BUGGY]  Node  rightChild  =  t.getScope().getVar(leftType.getString()  +  1);  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      Var  var  =  t.getScope().getVar(lvalue.getString());  if  (var  !=  null)  {  if  (var.isTypeInferred())  {  return;  }  }  }  JSType  leftType  =  getJSType(lvalue);      [BUGGY]  Node  rightChild  =  t.getScope().getVar(leftType.getString()  +  1);  [BUGGY]      JSType  rightType  =  getJSType(rightChild);  if  (validator.expectCanAssignTo(  t,  assign,  rightType,  leftType,       "assignment     "))  {  ensureTyped(t,  assign,  rightType);  }  else  {  ensureTyped(t,  assign);  }  }  [CLASS]  TypeCheck  [METHOD]  visitAssign  [RETURN_TYPE]  void  NodeTraversal  t  Node  assign  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  jsType  leftType  objectJsType  rightType  rvalueType  NodeTraversal  t  DiagnosticGroup  ALL_DIAGNOSTICS  CheckLevel  reportMissingOverride  reportUnknownTypes  Var  var  Node  assign  lvalue  object  object2  rightChild  rvalue  FunctionType  functionType  ScopeCreator  scopeCreator  String  OVERRIDING_PROTOTYPE_WITH_NON_OBJECT  functionPrivateName  message  property  property2  JSDocInfo  info  int  noTypeCheckSection  nullCount  typedCount  unknownCount  TypeValidator  validator  ObjectType  type  AbstractCompiler  compiler  JSTypeRegistry  typeRegistry  boolean  enterSection  externs  inExterns  report  reportMissingProperties  typeable  Scope  outerScope  topScope  DiagnosticType  BAD_DELETE  BAD_IMPLEMENTED_TYPE  BIT_OPERATION  CONFLICTING_EXTENDED_TYPE  CONFLICTING_IMPLEMENTED_TYPE  CONSTRUCTOR_NOT_CALLABLE  DETERMINISTIC_TEST  DETERMINISTIC_TEST_NO_RESULT  ENUM_DUP  ENUM_NOT_CONSTANT  EXPECTED_THIS_TYPE  FUNCTION_MASKS_VARIABLE  HIDDEN_INTERFACE_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY_MISMATCH  ILLEGAL_IMPLICIT_CAST  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE  INEXISTENT_ENUM_ELEMENT  INEXISTENT_PROPERTY  INTERFACE_FUNCTION_NOT_EMPTY  INTERFACE_METHOD_OVERRIDE  INVALID_INTERFACE_MEMBER_DECLARATION  MULTIPLE_VAR_DEF  NOT_A_CONSTRUCTOR  NOT_CALLABLE  UNEXPECTED_TOKEN  UNKNOWN_EXPR_TYPE  UNKNOWN_OVERRIDE  UNRESOLVED_TYPE  WRONG_ARGUMENT_COUNT  diagnosticType  InferJSDocInfo  inferJSDocInfo  	projects/Closure66/src/com/google/javascript/jscomp/TypeCheck.java	0.21320071635561041	939	939	2	replace	Node  rightChild  =  t.getScope().getVar(leftType.getString()  +  1);	  Node    rightChild    =    t.getScope().getVar(leftType.getString());    	non-compiled	[CE]  orphaned  case	7	None	replace
122	[BUG]  [BUGGY]  Node  rightChild  =  t.getScope().getVar(leftType.getString(),  leftType);  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      Var  var  =  t.getScope().getVar(lvalue.getString());  if  (var  !=  null)  {  if  (var.isTypeInferred())  {  return;  }  }  }  JSType  leftType  =  getJSType(lvalue);      [BUGGY]  Node  rightChild  =  t.getScope().getVar(leftType.getString(),  leftType);  [BUGGY]      JSType  rightType  =  getJSType(rightChild);  if  (validator.expectCanAssignTo(  t,  assign,  rightType,  leftType,       "assignment     "))  {  ensureTyped(t,  assign,  rightType);  }  else  {  ensureTyped(t,  assign);  }  }  [CLASS]  TypeCheck  [METHOD]  visitAssign  [RETURN_TYPE]  void  NodeTraversal  t  Node  assign  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  jsType  leftType  objectJsType  rightType  rvalueType  NodeTraversal  t  DiagnosticGroup  ALL_DIAGNOSTICS  CheckLevel  reportMissingOverride  reportUnknownTypes  Var  var  Node  assign  lvalue  object  object2  rightChild  rvalue  FunctionType  functionType  ScopeCreator  scopeCreator  String  OVERRIDING_PROTOTYPE_WITH_NON_OBJECT  functionPrivateName  message  property  property2  JSDocInfo  info  int  noTypeCheckSection  nullCount  typedCount  unknownCount  TypeValidator  validator  ObjectType  type  AbstractCompiler  compiler  JSTypeRegistry  typeRegistry  boolean  enterSection  externs  inExterns  report  reportMissingProperties  typeable  Scope  outerScope  topScope  DiagnosticType  BAD_DELETE  BAD_IMPLEMENTED_TYPE  BIT_OPERATION  CONFLICTING_EXTENDED_TYPE  CONFLICTING_IMPLEMENTED_TYPE  CONSTRUCTOR_NOT_CALLABLE  DETERMINISTIC_TEST  DETERMINISTIC_TEST_NO_RESULT  ENUM_DUP  ENUM_NOT_CONSTANT  EXPECTED_THIS_TYPE  FUNCTION_MASKS_VARIABLE  HIDDEN_INTERFACE_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY_MISMATCH  ILLEGAL_IMPLICIT_CAST  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE  INEXISTENT_ENUM_ELEMENT  INEXISTENT_PROPERTY  INTERFACE_FUNCTION_NOT_EMPTY  INTERFACE_METHOD_OVERRIDE  INVALID_INTERFACE_MEMBER_DECLARATION  MULTIPLE_VAR_DEF  NOT_A_CONSTRUCTOR  NOT_CALLABLE  UNEXPECTED_TOKEN  UNKNOWN_EXPR_TYPE  UNKNOWN_OVERRIDE  UNRESOLVED_TYPE  WRONG_ARGUMENT_COUNT  diagnosticType  InferJSDocInfo  inferJSDocInfo  	projects/Closure66/src/com/google/javascript/jscomp/TypeCheck.java	0.21320071635561041	939	939	2	replace	Node  rightChild  =  t.getScope().getVar(leftType.getString(),  leftType);	  Node    rightChild    =    t.getScope().getVar(leftType.getString());    	non-compiled	[CE]  orphaned  case	7	None	replace
123	[BUG]  [BUGGY]  Node  rightChild  =  t.getScope().getVar(leftType.getString())+  1;  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      Var  var  =  t.getScope().getVar(lvalue.getString());  if  (var  !=  null)  {  if  (var.isTypeInferred())  {  return;  }  }  }  JSType  leftType  =  getJSType(lvalue);      [BUGGY]  Node  rightChild  =  t.getScope().getVar(leftType.getString())+  1;  [BUGGY]      JSType  rightType  =  getJSType(rightChild);  if  (validator.expectCanAssignTo(  t,  assign,  rightType,  leftType,       "assignment     "))  {  ensureTyped(t,  assign,  rightType);  }  else  {  ensureTyped(t,  assign);  }  }  [CLASS]  TypeCheck  [METHOD]  visitAssign  [RETURN_TYPE]  void  NodeTraversal  t  Node  assign  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  jsType  leftType  objectJsType  rightType  rvalueType  NodeTraversal  t  DiagnosticGroup  ALL_DIAGNOSTICS  CheckLevel  reportMissingOverride  reportUnknownTypes  Var  var  Node  assign  lvalue  object  object2  rightChild  rvalue  FunctionType  functionType  ScopeCreator  scopeCreator  String  OVERRIDING_PROTOTYPE_WITH_NON_OBJECT  functionPrivateName  message  property  property2  JSDocInfo  info  int  noTypeCheckSection  nullCount  typedCount  unknownCount  TypeValidator  validator  ObjectType  type  AbstractCompiler  compiler  JSTypeRegistry  typeRegistry  boolean  enterSection  externs  inExterns  report  reportMissingProperties  typeable  Scope  outerScope  topScope  DiagnosticType  BAD_DELETE  BAD_IMPLEMENTED_TYPE  BIT_OPERATION  CONFLICTING_EXTENDED_TYPE  CONFLICTING_IMPLEMENTED_TYPE  CONSTRUCTOR_NOT_CALLABLE  DETERMINISTIC_TEST  DETERMINISTIC_TEST_NO_RESULT  ENUM_DUP  ENUM_NOT_CONSTANT  EXPECTED_THIS_TYPE  FUNCTION_MASKS_VARIABLE  HIDDEN_INTERFACE_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY_MISMATCH  ILLEGAL_IMPLICIT_CAST  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE  INEXISTENT_ENUM_ELEMENT  INEXISTENT_PROPERTY  INTERFACE_FUNCTION_NOT_EMPTY  INTERFACE_METHOD_OVERRIDE  INVALID_INTERFACE_MEMBER_DECLARATION  MULTIPLE_VAR_DEF  NOT_A_CONSTRUCTOR  NOT_CALLABLE  UNEXPECTED_TOKEN  UNKNOWN_EXPR_TYPE  UNKNOWN_OVERRIDE  UNRESOLVED_TYPE  WRONG_ARGUMENT_COUNT  diagnosticType  InferJSDocInfo  inferJSDocInfo  	projects/Closure66/src/com/google/javascript/jscomp/TypeCheck.java	0.21320071635561041	939	939	2	replace	Node  rightChild  =  t.getScope().getVar(leftType.getString())+  1;	  Node    rightChild    =    t.getScope().getVar(leftType.getString());    	non-compiled	[CE]  orphaned  case	7	None	replace
124	[BUG]  [BUGGY]  Node  rightChild  =  t.getScope().getRootNode(lvalue.getString());  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      Var  var  =  t.getScope().getVar(lvalue.getString());  if  (var  !=  null)  {  if  (var.isTypeInferred())  {  return;  }  }  }  JSType  leftType  =  getJSType(lvalue);      [BUGGY]  Node  rightChild  =  t.getScope().getRootNode(lvalue.getString());  [BUGGY]      JSType  rightType  =  getJSType(rightChild);  if  (validator.expectCanAssignTo(  t,  assign,  rightType,  leftType,       "assignment     "))  {  ensureTyped(t,  assign,  rightType);  }  else  {  ensureTyped(t,  assign);  }  }  [CLASS]  TypeCheck  [METHOD]  visitAssign  [RETURN_TYPE]  void  NodeTraversal  t  Node  assign  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  jsType  leftType  objectJsType  rightType  rvalueType  NodeTraversal  t  DiagnosticGroup  ALL_DIAGNOSTICS  CheckLevel  reportMissingOverride  reportUnknownTypes  Var  var  Node  assign  lvalue  object  object2  rightChild  rvalue  FunctionType  functionType  ScopeCreator  scopeCreator  String  OVERRIDING_PROTOTYPE_WITH_NON_OBJECT  functionPrivateName  message  property  property2  JSDocInfo  info  int  noTypeCheckSection  nullCount  typedCount  unknownCount  TypeValidator  validator  ObjectType  type  AbstractCompiler  compiler  JSTypeRegistry  typeRegistry  boolean  enterSection  externs  inExterns  report  reportMissingProperties  typeable  Scope  outerScope  topScope  DiagnosticType  BAD_DELETE  BAD_IMPLEMENTED_TYPE  BIT_OPERATION  CONFLICTING_EXTENDED_TYPE  CONFLICTING_IMPLEMENTED_TYPE  CONSTRUCTOR_NOT_CALLABLE  DETERMINISTIC_TEST  DETERMINISTIC_TEST_NO_RESULT  ENUM_DUP  ENUM_NOT_CONSTANT  EXPECTED_THIS_TYPE  FUNCTION_MASKS_VARIABLE  HIDDEN_INTERFACE_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY_MISMATCH  ILLEGAL_IMPLICIT_CAST  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE  INEXISTENT_ENUM_ELEMENT  INEXISTENT_PROPERTY  INTERFACE_FUNCTION_NOT_EMPTY  INTERFACE_METHOD_OVERRIDE  INVALID_INTERFACE_MEMBER_DECLARATION  MULTIPLE_VAR_DEF  NOT_A_CONSTRUCTOR  NOT_CALLABLE  UNEXPECTED_TOKEN  UNKNOWN_EXPR_TYPE  UNKNOWN_OVERRIDE  UNRESOLVED_TYPE  WRONG_ARGUMENT_COUNT  diagnosticType  InferJSDocInfo  inferJSDocInfo  	projects/Closure66/src/com/google/javascript/jscomp/TypeCheck.java	0.21320071635561041	939	939	2	replace	Node  rightChild  =  t.getScope().getRootNode(lvalue.getString());	  Node    rightChild    =    t.getScope().getRootNode(lvalue);    	non-compiled	[CE]  orphaned  case	19	None	replace
125	[BUG]  [BUGGY]  Node  rightChild  =  t.getScope().getRootNode(lvalue,  leftType);  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      Var  var  =  t.getScope().getVar(lvalue.getString());  if  (var  !=  null)  {  if  (var.isTypeInferred())  {  return;  }  }  }  JSType  leftType  =  getJSType(lvalue);      [BUGGY]  Node  rightChild  =  t.getScope().getRootNode(lvalue,  leftType);  [BUGGY]      JSType  rightType  =  getJSType(rightChild);  if  (validator.expectCanAssignTo(  t,  assign,  rightType,  leftType,       "assignment     "))  {  ensureTyped(t,  assign,  rightType);  }  else  {  ensureTyped(t,  assign);  }  }  [CLASS]  TypeCheck  [METHOD]  visitAssign  [RETURN_TYPE]  void  NodeTraversal  t  Node  assign  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  jsType  leftType  objectJsType  rightType  rvalueType  NodeTraversal  t  DiagnosticGroup  ALL_DIAGNOSTICS  CheckLevel  reportMissingOverride  reportUnknownTypes  Var  var  Node  assign  lvalue  object  object2  rightChild  rvalue  FunctionType  functionType  ScopeCreator  scopeCreator  String  OVERRIDING_PROTOTYPE_WITH_NON_OBJECT  functionPrivateName  message  property  property2  JSDocInfo  info  int  noTypeCheckSection  nullCount  typedCount  unknownCount  TypeValidator  validator  ObjectType  type  AbstractCompiler  compiler  JSTypeRegistry  typeRegistry  boolean  enterSection  externs  inExterns  report  reportMissingProperties  typeable  Scope  outerScope  topScope  DiagnosticType  BAD_DELETE  BAD_IMPLEMENTED_TYPE  BIT_OPERATION  CONFLICTING_EXTENDED_TYPE  CONFLICTING_IMPLEMENTED_TYPE  CONSTRUCTOR_NOT_CALLABLE  DETERMINISTIC_TEST  DETERMINISTIC_TEST_NO_RESULT  ENUM_DUP  ENUM_NOT_CONSTANT  EXPECTED_THIS_TYPE  FUNCTION_MASKS_VARIABLE  HIDDEN_INTERFACE_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY_MISMATCH  ILLEGAL_IMPLICIT_CAST  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE  INEXISTENT_ENUM_ELEMENT  INEXISTENT_PROPERTY  INTERFACE_FUNCTION_NOT_EMPTY  INTERFACE_METHOD_OVERRIDE  INVALID_INTERFACE_MEMBER_DECLARATION  MULTIPLE_VAR_DEF  NOT_A_CONSTRUCTOR  NOT_CALLABLE  UNEXPECTED_TOKEN  UNKNOWN_EXPR_TYPE  UNKNOWN_OVERRIDE  UNRESOLVED_TYPE  WRONG_ARGUMENT_COUNT  diagnosticType  InferJSDocInfo  inferJSDocInfo  	projects/Closure66/src/com/google/javascript/jscomp/TypeCheck.java	0.21320071635561041	939	939	2	replace	Node  rightChild  =  t.getScope().getRootNode(lvalue,  leftType);	  Node    rightChild    =    t.getScope().getRootNode(lvalue);    	non-compiled	[CE]  orphaned  case	19	None	replace
126	[BUG]  [BUGGY]  Node  rightChild  =  t.getScope().getRootNode(var);  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      Var  var  =  t.getScope().getVar(lvalue.getString());  if  (var  !=  null)  {  if  (var.isTypeInferred())  {  return;  }  }  }  JSType  leftType  =  getJSType(lvalue);      [BUGGY]  Node  rightChild  =  t.getScope().getRootNode(var);  [BUGGY]      JSType  rightType  =  getJSType(rightChild);  if  (validator.expectCanAssignTo(  t,  assign,  rightType,  leftType,       "assignment     "))  {  ensureTyped(t,  assign,  rightType);  }  else  {  ensureTyped(t,  assign);  }  }  [CLASS]  TypeCheck  [METHOD]  visitAssign  [RETURN_TYPE]  void  NodeTraversal  t  Node  assign  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  jsType  leftType  objectJsType  rightType  rvalueType  NodeTraversal  t  DiagnosticGroup  ALL_DIAGNOSTICS  CheckLevel  reportMissingOverride  reportUnknownTypes  Var  var  Node  assign  lvalue  object  object2  rightChild  rvalue  FunctionType  functionType  ScopeCreator  scopeCreator  String  OVERRIDING_PROTOTYPE_WITH_NON_OBJECT  functionPrivateName  message  property  property2  JSDocInfo  info  int  noTypeCheckSection  nullCount  typedCount  unknownCount  TypeValidator  validator  ObjectType  type  AbstractCompiler  compiler  JSTypeRegistry  typeRegistry  boolean  enterSection  externs  inExterns  report  reportMissingProperties  typeable  Scope  outerScope  topScope  DiagnosticType  BAD_DELETE  BAD_IMPLEMENTED_TYPE  BIT_OPERATION  CONFLICTING_EXTENDED_TYPE  CONFLICTING_IMPLEMENTED_TYPE  CONSTRUCTOR_NOT_CALLABLE  DETERMINISTIC_TEST  DETERMINISTIC_TEST_NO_RESULT  ENUM_DUP  ENUM_NOT_CONSTANT  EXPECTED_THIS_TYPE  FUNCTION_MASKS_VARIABLE  HIDDEN_INTERFACE_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY_MISMATCH  ILLEGAL_IMPLICIT_CAST  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE  INEXISTENT_ENUM_ELEMENT  INEXISTENT_PROPERTY  INTERFACE_FUNCTION_NOT_EMPTY  INTERFACE_METHOD_OVERRIDE  INVALID_INTERFACE_MEMBER_DECLARATION  MULTIPLE_VAR_DEF  NOT_A_CONSTRUCTOR  NOT_CALLABLE  UNEXPECTED_TOKEN  UNKNOWN_EXPR_TYPE  UNKNOWN_OVERRIDE  UNRESOLVED_TYPE  WRONG_ARGUMENT_COUNT  diagnosticType  InferJSDocInfo  inferJSDocInfo  	projects/Closure66/src/com/google/javascript/jscomp/TypeCheck.java	0.21320071635561041	939	939	2	replace	Node  rightChild  =  t.getScope().getRootNode(var);	  Node    rightChild    =    t.getScope().getRootNode(lvalue);    	non-compiled	[CE]  orphaned  case	19	None	replace
127	[BUG]  [BUGGY]  Node  rightChild  =  t.getScope().getRightNode(null);  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      Var  var  =  t.getScope().getVar(lvalue.getString());  if  (var  !=  null)  {  if  (var.isTypeInferred())  {  return;  }  }  }  JSType  leftType  =  getJSType(lvalue);      [BUGGY]  Node  rightChild  =  t.getScope().getRightNode(null);  [BUGGY]      JSType  rightType  =  getJSType(rightChild);  if  (validator.expectCanAssignTo(  t,  assign,  rightType,  leftType,       "assignment     "))  {  ensureTyped(t,  assign,  rightType);  }  else  {  ensureTyped(t,  assign);  }  }  [CLASS]  TypeCheck  [METHOD]  visitAssign  [RETURN_TYPE]  void  NodeTraversal  t  Node  assign  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  jsType  leftType  objectJsType  rightType  rvalueType  NodeTraversal  t  DiagnosticGroup  ALL_DIAGNOSTICS  CheckLevel  reportMissingOverride  reportUnknownTypes  Var  var  Node  assign  lvalue  object  object2  rightChild  rvalue  FunctionType  functionType  ScopeCreator  scopeCreator  String  OVERRIDING_PROTOTYPE_WITH_NON_OBJECT  functionPrivateName  message  property  property2  JSDocInfo  info  int  noTypeCheckSection  nullCount  typedCount  unknownCount  TypeValidator  validator  ObjectType  type  AbstractCompiler  compiler  JSTypeRegistry  typeRegistry  boolean  enterSection  externs  inExterns  report  reportMissingProperties  typeable  Scope  outerScope  topScope  DiagnosticType  BAD_DELETE  BAD_IMPLEMENTED_TYPE  BIT_OPERATION  CONFLICTING_EXTENDED_TYPE  CONFLICTING_IMPLEMENTED_TYPE  CONSTRUCTOR_NOT_CALLABLE  DETERMINISTIC_TEST  DETERMINISTIC_TEST_NO_RESULT  ENUM_DUP  ENUM_NOT_CONSTANT  EXPECTED_THIS_TYPE  FUNCTION_MASKS_VARIABLE  HIDDEN_INTERFACE_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY_MISMATCH  ILLEGAL_IMPLICIT_CAST  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE  INEXISTENT_ENUM_ELEMENT  INEXISTENT_PROPERTY  INTERFACE_FUNCTION_NOT_EMPTY  INTERFACE_METHOD_OVERRIDE  INVALID_INTERFACE_MEMBER_DECLARATION  MULTIPLE_VAR_DEF  NOT_A_CONSTRUCTOR  NOT_CALLABLE  UNEXPECTED_TOKEN  UNKNOWN_EXPR_TYPE  UNKNOWN_OVERRIDE  UNRESOLVED_TYPE  WRONG_ARGUMENT_COUNT  diagnosticType  InferJSDocInfo  inferJSDocInfo  	projects/Closure66/src/com/google/javascript/jscomp/TypeCheck.java	0.21320071635561041	939	939	2	replace	Node  rightChild  =  t.getScope().getRightNode(null);	  Node    rightChild    =    t.getScope().getRightNode();    	non-compiled	[CE]  orphaned  case	18	None	replace
128	[BUG]  [BUGGY]  Node  rightChild  =  t.getScope().getVar(leftType.getString(),  lvalue);  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      Var  var  =  t.getScope().getVar(lvalue.getString());  if  (var  !=  null)  {  if  (var.isTypeInferred())  {  return;  }  }  }  JSType  leftType  =  getJSType(lvalue);      [BUGGY]  Node  rightChild  =  t.getScope().getVar(leftType.getString(),  lvalue);  [BUGGY]      JSType  rightType  =  getJSType(rightChild);  if  (validator.expectCanAssignTo(  t,  assign,  rightType,  leftType,       "assignment     "))  {  ensureTyped(t,  assign,  rightType);  }  else  {  ensureTyped(t,  assign);  }  }  [CLASS]  TypeCheck  [METHOD]  visitAssign  [RETURN_TYPE]  void  NodeTraversal  t  Node  assign  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  jsType  leftType  objectJsType  rightType  rvalueType  NodeTraversal  t  DiagnosticGroup  ALL_DIAGNOSTICS  CheckLevel  reportMissingOverride  reportUnknownTypes  Var  var  Node  assign  lvalue  object  object2  rightChild  rvalue  FunctionType  functionType  ScopeCreator  scopeCreator  String  OVERRIDING_PROTOTYPE_WITH_NON_OBJECT  functionPrivateName  message  property  property2  JSDocInfo  info  int  noTypeCheckSection  nullCount  typedCount  unknownCount  TypeValidator  validator  ObjectType  type  AbstractCompiler  compiler  JSTypeRegistry  typeRegistry  boolean  enterSection  externs  inExterns  report  reportMissingProperties  typeable  Scope  outerScope  topScope  DiagnosticType  BAD_DELETE  BAD_IMPLEMENTED_TYPE  BIT_OPERATION  CONFLICTING_EXTENDED_TYPE  CONFLICTING_IMPLEMENTED_TYPE  CONSTRUCTOR_NOT_CALLABLE  DETERMINISTIC_TEST  DETERMINISTIC_TEST_NO_RESULT  ENUM_DUP  ENUM_NOT_CONSTANT  EXPECTED_THIS_TYPE  FUNCTION_MASKS_VARIABLE  HIDDEN_INTERFACE_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY_MISMATCH  ILLEGAL_IMPLICIT_CAST  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE  INEXISTENT_ENUM_ELEMENT  INEXISTENT_PROPERTY  INTERFACE_FUNCTION_NOT_EMPTY  INTERFACE_METHOD_OVERRIDE  INVALID_INTERFACE_MEMBER_DECLARATION  MULTIPLE_VAR_DEF  NOT_A_CONSTRUCTOR  NOT_CALLABLE  UNEXPECTED_TOKEN  UNKNOWN_EXPR_TYPE  UNKNOWN_OVERRIDE  UNRESOLVED_TYPE  WRONG_ARGUMENT_COUNT  diagnosticType  InferJSDocInfo  inferJSDocInfo  	projects/Closure66/src/com/google/javascript/jscomp/TypeCheck.java	0.21320071635561041	939	939	2	replace	Node  rightChild  =  t.getScope().getVar(leftType.getString(),  lvalue);	  Node    rightChild    =    t.getScope().getVar(lvalue.getString(),    leftType);    	non-compiled	[CE]  orphaned  case	8	None	replace
129	[BUG]  [BUGGY]  Node  rightChild  =  t.getScope().getVar(lvalue.getString(),  leftType,  null);  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      Var  var  =  t.getScope().getVar(lvalue.getString());  if  (var  !=  null)  {  if  (var.isTypeInferred())  {  return;  }  }  }  JSType  leftType  =  getJSType(lvalue);      [BUGGY]  Node  rightChild  =  t.getScope().getVar(lvalue.getString(),  leftType,  null);  [BUGGY]      JSType  rightType  =  getJSType(rightChild);  if  (validator.expectCanAssignTo(  t,  assign,  rightType,  leftType,       "assignment     "))  {  ensureTyped(t,  assign,  rightType);  }  else  {  ensureTyped(t,  assign);  }  }  [CLASS]  TypeCheck  [METHOD]  visitAssign  [RETURN_TYPE]  void  NodeTraversal  t  Node  assign  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  jsType  leftType  objectJsType  rightType  rvalueType  NodeTraversal  t  DiagnosticGroup  ALL_DIAGNOSTICS  CheckLevel  reportMissingOverride  reportUnknownTypes  Var  var  Node  assign  lvalue  object  object2  rightChild  rvalue  FunctionType  functionType  ScopeCreator  scopeCreator  String  OVERRIDING_PROTOTYPE_WITH_NON_OBJECT  functionPrivateName  message  property  property2  JSDocInfo  info  int  noTypeCheckSection  nullCount  typedCount  unknownCount  TypeValidator  validator  ObjectType  type  AbstractCompiler  compiler  JSTypeRegistry  typeRegistry  boolean  enterSection  externs  inExterns  report  reportMissingProperties  typeable  Scope  outerScope  topScope  DiagnosticType  BAD_DELETE  BAD_IMPLEMENTED_TYPE  BIT_OPERATION  CONFLICTING_EXTENDED_TYPE  CONFLICTING_IMPLEMENTED_TYPE  CONSTRUCTOR_NOT_CALLABLE  DETERMINISTIC_TEST  DETERMINISTIC_TEST_NO_RESULT  ENUM_DUP  ENUM_NOT_CONSTANT  EXPECTED_THIS_TYPE  FUNCTION_MASKS_VARIABLE  HIDDEN_INTERFACE_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY_MISMATCH  ILLEGAL_IMPLICIT_CAST  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE  INEXISTENT_ENUM_ELEMENT  INEXISTENT_PROPERTY  INTERFACE_FUNCTION_NOT_EMPTY  INTERFACE_METHOD_OVERRIDE  INVALID_INTERFACE_MEMBER_DECLARATION  MULTIPLE_VAR_DEF  NOT_A_CONSTRUCTOR  NOT_CALLABLE  UNEXPECTED_TOKEN  UNKNOWN_EXPR_TYPE  UNKNOWN_OVERRIDE  UNRESOLVED_TYPE  WRONG_ARGUMENT_COUNT  diagnosticType  InferJSDocInfo  inferJSDocInfo  	projects/Closure66/src/com/google/javascript/jscomp/TypeCheck.java	0.21320071635561041	939	939	2	replace	Node  rightChild  =  t.getScope().getVar(lvalue.getString(),  leftType,  null);	  Node    rightChild    =    t.getScope().getVar(lvalue.getString(),    leftType);    	non-compiled	[CE]  orphaned  case	8	None	replace
130	[BUG]  [BUGGY]  Node  rightChild  =  t.getScope().getVar(lvalue.getString(),  leftType,  false);  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      Var  var  =  t.getScope().getVar(lvalue.getString());  if  (var  !=  null)  {  if  (var.isTypeInferred())  {  return;  }  }  }  JSType  leftType  =  getJSType(lvalue);      [BUGGY]  Node  rightChild  =  t.getScope().getVar(lvalue.getString(),  leftType,  false);  [BUGGY]      JSType  rightType  =  getJSType(rightChild);  if  (validator.expectCanAssignTo(  t,  assign,  rightType,  leftType,       "assignment     "))  {  ensureTyped(t,  assign,  rightType);  }  else  {  ensureTyped(t,  assign);  }  }  [CLASS]  TypeCheck  [METHOD]  visitAssign  [RETURN_TYPE]  void  NodeTraversal  t  Node  assign  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  jsType  leftType  objectJsType  rightType  rvalueType  NodeTraversal  t  DiagnosticGroup  ALL_DIAGNOSTICS  CheckLevel  reportMissingOverride  reportUnknownTypes  Var  var  Node  assign  lvalue  object  object2  rightChild  rvalue  FunctionType  functionType  ScopeCreator  scopeCreator  String  OVERRIDING_PROTOTYPE_WITH_NON_OBJECT  functionPrivateName  message  property  property2  JSDocInfo  info  int  noTypeCheckSection  nullCount  typedCount  unknownCount  TypeValidator  validator  ObjectType  type  AbstractCompiler  compiler  JSTypeRegistry  typeRegistry  boolean  enterSection  externs  inExterns  report  reportMissingProperties  typeable  Scope  outerScope  topScope  DiagnosticType  BAD_DELETE  BAD_IMPLEMENTED_TYPE  BIT_OPERATION  CONFLICTING_EXTENDED_TYPE  CONFLICTING_IMPLEMENTED_TYPE  CONSTRUCTOR_NOT_CALLABLE  DETERMINISTIC_TEST  DETERMINISTIC_TEST_NO_RESULT  ENUM_DUP  ENUM_NOT_CONSTANT  EXPECTED_THIS_TYPE  FUNCTION_MASKS_VARIABLE  HIDDEN_INTERFACE_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY_MISMATCH  ILLEGAL_IMPLICIT_CAST  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE  INEXISTENT_ENUM_ELEMENT  INEXISTENT_PROPERTY  INTERFACE_FUNCTION_NOT_EMPTY  INTERFACE_METHOD_OVERRIDE  INVALID_INTERFACE_MEMBER_DECLARATION  MULTIPLE_VAR_DEF  NOT_A_CONSTRUCTOR  NOT_CALLABLE  UNEXPECTED_TOKEN  UNKNOWN_EXPR_TYPE  UNKNOWN_OVERRIDE  UNRESOLVED_TYPE  WRONG_ARGUMENT_COUNT  diagnosticType  InferJSDocInfo  inferJSDocInfo  	projects/Closure66/src/com/google/javascript/jscomp/TypeCheck.java	0.21320071635561041	939	939	2	replace	Node  rightChild  =  t.getScope().getVar(lvalue.getString(),  leftType,  false);	  Node    rightChild    =    t.getScope().getVar(lvalue.getString(),    leftType);    	non-compiled	[CE]  orphaned  case	8	None	replace
131	[BUG]  [BUGGY]  Node  rightChild  =  t.getScope().getVar(lvalue.getString(),  leftType,  this);  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      Var  var  =  t.getScope().getVar(lvalue.getString());  if  (var  !=  null)  {  if  (var.isTypeInferred())  {  return;  }  }  }  JSType  leftType  =  getJSType(lvalue);      [BUGGY]  Node  rightChild  =  t.getScope().getVar(lvalue.getString(),  leftType,  this);  [BUGGY]      JSType  rightType  =  getJSType(rightChild);  if  (validator.expectCanAssignTo(  t,  assign,  rightType,  leftType,       "assignment     "))  {  ensureTyped(t,  assign,  rightType);  }  else  {  ensureTyped(t,  assign);  }  }  [CLASS]  TypeCheck  [METHOD]  visitAssign  [RETURN_TYPE]  void  NodeTraversal  t  Node  assign  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  jsType  leftType  objectJsType  rightType  rvalueType  NodeTraversal  t  DiagnosticGroup  ALL_DIAGNOSTICS  CheckLevel  reportMissingOverride  reportUnknownTypes  Var  var  Node  assign  lvalue  object  object2  rightChild  rvalue  FunctionType  functionType  ScopeCreator  scopeCreator  String  OVERRIDING_PROTOTYPE_WITH_NON_OBJECT  functionPrivateName  message  property  property2  JSDocInfo  info  int  noTypeCheckSection  nullCount  typedCount  unknownCount  TypeValidator  validator  ObjectType  type  AbstractCompiler  compiler  JSTypeRegistry  typeRegistry  boolean  enterSection  externs  inExterns  report  reportMissingProperties  typeable  Scope  outerScope  topScope  DiagnosticType  BAD_DELETE  BAD_IMPLEMENTED_TYPE  BIT_OPERATION  CONFLICTING_EXTENDED_TYPE  CONFLICTING_IMPLEMENTED_TYPE  CONSTRUCTOR_NOT_CALLABLE  DETERMINISTIC_TEST  DETERMINISTIC_TEST_NO_RESULT  ENUM_DUP  ENUM_NOT_CONSTANT  EXPECTED_THIS_TYPE  FUNCTION_MASKS_VARIABLE  HIDDEN_INTERFACE_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY_MISMATCH  ILLEGAL_IMPLICIT_CAST  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE  INEXISTENT_ENUM_ELEMENT  INEXISTENT_PROPERTY  INTERFACE_FUNCTION_NOT_EMPTY  INTERFACE_METHOD_OVERRIDE  INVALID_INTERFACE_MEMBER_DECLARATION  MULTIPLE_VAR_DEF  NOT_A_CONSTRUCTOR  NOT_CALLABLE  UNEXPECTED_TOKEN  UNKNOWN_EXPR_TYPE  UNKNOWN_OVERRIDE  UNRESOLVED_TYPE  WRONG_ARGUMENT_COUNT  diagnosticType  InferJSDocInfo  inferJSDocInfo  	projects/Closure66/src/com/google/javascript/jscomp/TypeCheck.java	0.21320071635561041	939	939	2	replace	Node  rightChild  =  t.getScope().getVar(lvalue.getString(),  leftType,  this);	  Node    rightChild    =    t.getScope().getVar(lvalue.getString(),    leftType);    	non-compiled	[CE]  orphaned  case	8	None	replace
132	[BUG]  [BUGGY]  Node  rightChild  =  t.getScope().getVar(lvalue.getString(),  leftType,  true);  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      Var  var  =  t.getScope().getVar(lvalue.getString());  if  (var  !=  null)  {  if  (var.isTypeInferred())  {  return;  }  }  }  JSType  leftType  =  getJSType(lvalue);      [BUGGY]  Node  rightChild  =  t.getScope().getVar(lvalue.getString(),  leftType,  true);  [BUGGY]      JSType  rightType  =  getJSType(rightChild);  if  (validator.expectCanAssignTo(  t,  assign,  rightType,  leftType,       "assignment     "))  {  ensureTyped(t,  assign,  rightType);  }  else  {  ensureTyped(t,  assign);  }  }  [CLASS]  TypeCheck  [METHOD]  visitAssign  [RETURN_TYPE]  void  NodeTraversal  t  Node  assign  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  jsType  leftType  objectJsType  rightType  rvalueType  NodeTraversal  t  DiagnosticGroup  ALL_DIAGNOSTICS  CheckLevel  reportMissingOverride  reportUnknownTypes  Var  var  Node  assign  lvalue  object  object2  rightChild  rvalue  FunctionType  functionType  ScopeCreator  scopeCreator  String  OVERRIDING_PROTOTYPE_WITH_NON_OBJECT  functionPrivateName  message  property  property2  JSDocInfo  info  int  noTypeCheckSection  nullCount  typedCount  unknownCount  TypeValidator  validator  ObjectType  type  AbstractCompiler  compiler  JSTypeRegistry  typeRegistry  boolean  enterSection  externs  inExterns  report  reportMissingProperties  typeable  Scope  outerScope  topScope  DiagnosticType  BAD_DELETE  BAD_IMPLEMENTED_TYPE  BIT_OPERATION  CONFLICTING_EXTENDED_TYPE  CONFLICTING_IMPLEMENTED_TYPE  CONSTRUCTOR_NOT_CALLABLE  DETERMINISTIC_TEST  DETERMINISTIC_TEST_NO_RESULT  ENUM_DUP  ENUM_NOT_CONSTANT  EXPECTED_THIS_TYPE  FUNCTION_MASKS_VARIABLE  HIDDEN_INTERFACE_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY_MISMATCH  ILLEGAL_IMPLICIT_CAST  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE  INEXISTENT_ENUM_ELEMENT  INEXISTENT_PROPERTY  INTERFACE_FUNCTION_NOT_EMPTY  INTERFACE_METHOD_OVERRIDE  INVALID_INTERFACE_MEMBER_DECLARATION  MULTIPLE_VAR_DEF  NOT_A_CONSTRUCTOR  NOT_CALLABLE  UNEXPECTED_TOKEN  UNKNOWN_EXPR_TYPE  UNKNOWN_OVERRIDE  UNRESOLVED_TYPE  WRONG_ARGUMENT_COUNT  diagnosticType  InferJSDocInfo  inferJSDocInfo  	projects/Closure66/src/com/google/javascript/jscomp/TypeCheck.java	0.21320071635561041	939	939	2	replace	Node  rightChild  =  t.getScope().getVar(lvalue.getString(),  leftType,  true);	  Node    rightChild    =    t.getScope().getVar(lvalue.getString(),    leftType);    	non-compiled	[CE]  orphaned  case	8	None	replace
133	[BUG]  [BUGGY]  Node  rightChild  =  t.getScope().getVar(rightType.getString(),  lvalue);  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      Var  var  =  t.getScope().getVar(lvalue.getString());  if  (var  !=  null)  {  if  (var.isTypeInferred())  {  return;  }  }  }  JSType  leftType  =  getJSType(lvalue);      [BUGGY]  Node  rightChild  =  t.getScope().getVar(rightType.getString(),  lvalue);  [BUGGY]      JSType  rightType  =  getJSType(rightChild);  if  (validator.expectCanAssignTo(  t,  assign,  rightType,  leftType,       "assignment     "))  {  ensureTyped(t,  assign,  rightType);  }  else  {  ensureTyped(t,  assign);  }  }  [CLASS]  TypeCheck  [METHOD]  visitAssign  [RETURN_TYPE]  void  NodeTraversal  t  Node  assign  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  jsType  leftType  objectJsType  rightType  rvalueType  NodeTraversal  t  DiagnosticGroup  ALL_DIAGNOSTICS  CheckLevel  reportMissingOverride  reportUnknownTypes  Var  var  Node  assign  lvalue  object  object2  rightChild  rvalue  FunctionType  functionType  ScopeCreator  scopeCreator  String  OVERRIDING_PROTOTYPE_WITH_NON_OBJECT  functionPrivateName  message  property  property2  JSDocInfo  info  int  noTypeCheckSection  nullCount  typedCount  unknownCount  TypeValidator  validator  ObjectType  type  AbstractCompiler  compiler  JSTypeRegistry  typeRegistry  boolean  enterSection  externs  inExterns  report  reportMissingProperties  typeable  Scope  outerScope  topScope  DiagnosticType  BAD_DELETE  BAD_IMPLEMENTED_TYPE  BIT_OPERATION  CONFLICTING_EXTENDED_TYPE  CONFLICTING_IMPLEMENTED_TYPE  CONSTRUCTOR_NOT_CALLABLE  DETERMINISTIC_TEST  DETERMINISTIC_TEST_NO_RESULT  ENUM_DUP  ENUM_NOT_CONSTANT  EXPECTED_THIS_TYPE  FUNCTION_MASKS_VARIABLE  HIDDEN_INTERFACE_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY_MISMATCH  ILLEGAL_IMPLICIT_CAST  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE  INEXISTENT_ENUM_ELEMENT  INEXISTENT_PROPERTY  INTERFACE_FUNCTION_NOT_EMPTY  INTERFACE_METHOD_OVERRIDE  INVALID_INTERFACE_MEMBER_DECLARATION  MULTIPLE_VAR_DEF  NOT_A_CONSTRUCTOR  NOT_CALLABLE  UNEXPECTED_TOKEN  UNKNOWN_EXPR_TYPE  UNKNOWN_OVERRIDE  UNRESOLVED_TYPE  WRONG_ARGUMENT_COUNT  diagnosticType  InferJSDocInfo  inferJSDocInfo  	projects/Closure66/src/com/google/javascript/jscomp/TypeCheck.java	0.21320071635561041	939	939	2	replace	Node  rightChild  =  t.getScope().getVar(rightType.getString(),  lvalue);	  Node    rightChild    =    t.getScope().getVar(lvalue.getString(),    leftType);    	non-compiled	[CE]  orphaned  case	8	None	replace
134	[BUG]  [BUGGY]  Node  rightChild  =  t.getScope().getOwnSlot(lvalue.getString(),  leftType);  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      Var  var  =  t.getScope().getVar(lvalue.getString());  if  (var  !=  null)  {  if  (var.isTypeInferred())  {  return;  }  }  }  JSType  leftType  =  getJSType(lvalue);      [BUGGY]  Node  rightChild  =  t.getScope().getOwnSlot(lvalue.getString(),  leftType);  [BUGGY]      JSType  rightType  =  getJSType(rightChild);  if  (validator.expectCanAssignTo(  t,  assign,  rightType,  leftType,       "assignment     "))  {  ensureTyped(t,  assign,  rightType);  }  else  {  ensureTyped(t,  assign);  }  }  [CLASS]  TypeCheck  [METHOD]  visitAssign  [RETURN_TYPE]  void  NodeTraversal  t  Node  assign  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  jsType  leftType  objectJsType  rightType  rvalueType  NodeTraversal  t  DiagnosticGroup  ALL_DIAGNOSTICS  CheckLevel  reportMissingOverride  reportUnknownTypes  Var  var  Node  assign  lvalue  object  object2  rightChild  rvalue  FunctionType  functionType  ScopeCreator  scopeCreator  String  OVERRIDING_PROTOTYPE_WITH_NON_OBJECT  functionPrivateName  message  property  property2  JSDocInfo  info  int  noTypeCheckSection  nullCount  typedCount  unknownCount  TypeValidator  validator  ObjectType  type  AbstractCompiler  compiler  JSTypeRegistry  typeRegistry  boolean  enterSection  externs  inExterns  report  reportMissingProperties  typeable  Scope  outerScope  topScope  DiagnosticType  BAD_DELETE  BAD_IMPLEMENTED_TYPE  BIT_OPERATION  CONFLICTING_EXTENDED_TYPE  CONFLICTING_IMPLEMENTED_TYPE  CONSTRUCTOR_NOT_CALLABLE  DETERMINISTIC_TEST  DETERMINISTIC_TEST_NO_RESULT  ENUM_DUP  ENUM_NOT_CONSTANT  EXPECTED_THIS_TYPE  FUNCTION_MASKS_VARIABLE  HIDDEN_INTERFACE_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY_MISMATCH  ILLEGAL_IMPLICIT_CAST  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE  INEXISTENT_ENUM_ELEMENT  INEXISTENT_PROPERTY  INTERFACE_FUNCTION_NOT_EMPTY  INTERFACE_METHOD_OVERRIDE  INVALID_INTERFACE_MEMBER_DECLARATION  MULTIPLE_VAR_DEF  NOT_A_CONSTRUCTOR  NOT_CALLABLE  UNEXPECTED_TOKEN  UNKNOWN_EXPR_TYPE  UNKNOWN_OVERRIDE  UNRESOLVED_TYPE  WRONG_ARGUMENT_COUNT  diagnosticType  InferJSDocInfo  inferJSDocInfo  	projects/Closure66/src/com/google/javascript/jscomp/TypeCheck.java	0.21320071635561041	939	939	2	replace	Node  rightChild  =  t.getScope().getOwnSlot(lvalue.getString(),  leftType);	  Node    rightChild    =    t.getScope().getOwnSlot(lvalue.getString());    	non-compiled	[CE]  orphaned  case	47	None	replace
135	[BUG]  [BUGGY]  Node  rightChild  =  t.getScope().getOwnSlot(leftType.getString());  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      Var  var  =  t.getScope().getVar(lvalue.getString());  if  (var  !=  null)  {  if  (var.isTypeInferred())  {  return;  }  }  }  JSType  leftType  =  getJSType(lvalue);      [BUGGY]  Node  rightChild  =  t.getScope().getOwnSlot(leftType.getString());  [BUGGY]      JSType  rightType  =  getJSType(rightChild);  if  (validator.expectCanAssignTo(  t,  assign,  rightType,  leftType,       "assignment     "))  {  ensureTyped(t,  assign,  rightType);  }  else  {  ensureTyped(t,  assign);  }  }  [CLASS]  TypeCheck  [METHOD]  visitAssign  [RETURN_TYPE]  void  NodeTraversal  t  Node  assign  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  jsType  leftType  objectJsType  rightType  rvalueType  NodeTraversal  t  DiagnosticGroup  ALL_DIAGNOSTICS  CheckLevel  reportMissingOverride  reportUnknownTypes  Var  var  Node  assign  lvalue  object  object2  rightChild  rvalue  FunctionType  functionType  ScopeCreator  scopeCreator  String  OVERRIDING_PROTOTYPE_WITH_NON_OBJECT  functionPrivateName  message  property  property2  JSDocInfo  info  int  noTypeCheckSection  nullCount  typedCount  unknownCount  TypeValidator  validator  ObjectType  type  AbstractCompiler  compiler  JSTypeRegistry  typeRegistry  boolean  enterSection  externs  inExterns  report  reportMissingProperties  typeable  Scope  outerScope  topScope  DiagnosticType  BAD_DELETE  BAD_IMPLEMENTED_TYPE  BIT_OPERATION  CONFLICTING_EXTENDED_TYPE  CONFLICTING_IMPLEMENTED_TYPE  CONSTRUCTOR_NOT_CALLABLE  DETERMINISTIC_TEST  DETERMINISTIC_TEST_NO_RESULT  ENUM_DUP  ENUM_NOT_CONSTANT  EXPECTED_THIS_TYPE  FUNCTION_MASKS_VARIABLE  HIDDEN_INTERFACE_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY_MISMATCH  ILLEGAL_IMPLICIT_CAST  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE  INEXISTENT_ENUM_ELEMENT  INEXISTENT_PROPERTY  INTERFACE_FUNCTION_NOT_EMPTY  INTERFACE_METHOD_OVERRIDE  INVALID_INTERFACE_MEMBER_DECLARATION  MULTIPLE_VAR_DEF  NOT_A_CONSTRUCTOR  NOT_CALLABLE  UNEXPECTED_TOKEN  UNKNOWN_EXPR_TYPE  UNKNOWN_OVERRIDE  UNRESOLVED_TYPE  WRONG_ARGUMENT_COUNT  diagnosticType  InferJSDocInfo  inferJSDocInfo  	projects/Closure66/src/com/google/javascript/jscomp/TypeCheck.java	0.21320071635561041	939	939	2	replace	Node  rightChild  =  t.getScope().getOwnSlot(leftType.getString());	  Node    rightChild    =    t.getScope().getOwnSlot(lvalue.getString());    	non-compiled	[CE]  orphaned  case	47	None	replace
136	[BUG]  [BUGGY]  Node  rightChild  =  t.getScope().getOwnSlot(lvalue.getString()  +  1);  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      Var  var  =  t.getScope().getVar(lvalue.getString());  if  (var  !=  null)  {  if  (var.isTypeInferred())  {  return;  }  }  }  JSType  leftType  =  getJSType(lvalue);      [BUGGY]  Node  rightChild  =  t.getScope().getOwnSlot(lvalue.getString()  +  1);  [BUGGY]      JSType  rightType  =  getJSType(rightChild);  if  (validator.expectCanAssignTo(  t,  assign,  rightType,  leftType,       "assignment     "))  {  ensureTyped(t,  assign,  rightType);  }  else  {  ensureTyped(t,  assign);  }  }  [CLASS]  TypeCheck  [METHOD]  visitAssign  [RETURN_TYPE]  void  NodeTraversal  t  Node  assign  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  jsType  leftType  objectJsType  rightType  rvalueType  NodeTraversal  t  DiagnosticGroup  ALL_DIAGNOSTICS  CheckLevel  reportMissingOverride  reportUnknownTypes  Var  var  Node  assign  lvalue  object  object2  rightChild  rvalue  FunctionType  functionType  ScopeCreator  scopeCreator  String  OVERRIDING_PROTOTYPE_WITH_NON_OBJECT  functionPrivateName  message  property  property2  JSDocInfo  info  int  noTypeCheckSection  nullCount  typedCount  unknownCount  TypeValidator  validator  ObjectType  type  AbstractCompiler  compiler  JSTypeRegistry  typeRegistry  boolean  enterSection  externs  inExterns  report  reportMissingProperties  typeable  Scope  outerScope  topScope  DiagnosticType  BAD_DELETE  BAD_IMPLEMENTED_TYPE  BIT_OPERATION  CONFLICTING_EXTENDED_TYPE  CONFLICTING_IMPLEMENTED_TYPE  CONSTRUCTOR_NOT_CALLABLE  DETERMINISTIC_TEST  DETERMINISTIC_TEST_NO_RESULT  ENUM_DUP  ENUM_NOT_CONSTANT  EXPECTED_THIS_TYPE  FUNCTION_MASKS_VARIABLE  HIDDEN_INTERFACE_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY_MISMATCH  ILLEGAL_IMPLICIT_CAST  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE  INEXISTENT_ENUM_ELEMENT  INEXISTENT_PROPERTY  INTERFACE_FUNCTION_NOT_EMPTY  INTERFACE_METHOD_OVERRIDE  INVALID_INTERFACE_MEMBER_DECLARATION  MULTIPLE_VAR_DEF  NOT_A_CONSTRUCTOR  NOT_CALLABLE  UNEXPECTED_TOKEN  UNKNOWN_EXPR_TYPE  UNKNOWN_OVERRIDE  UNRESOLVED_TYPE  WRONG_ARGUMENT_COUNT  diagnosticType  InferJSDocInfo  inferJSDocInfo  	projects/Closure66/src/com/google/javascript/jscomp/TypeCheck.java	0.21320071635561041	939	939	2	replace	Node  rightChild  =  t.getScope().getOwnSlot(lvalue.getString()  +  1);	  Node    rightChild    =    t.getScope().getOwnSlot(lvalue.getString());    	non-compiled	[CE]  orphaned  case	47	None	replace
137	[BUG]  [BUGGY]  Node  rightChild  =  t.getScope().getOwnSlot(rvalue.getString());  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      Var  var  =  t.getScope().getVar(lvalue.getString());  if  (var  !=  null)  {  if  (var.isTypeInferred())  {  return;  }  }  }  JSType  leftType  =  getJSType(lvalue);      [BUGGY]  Node  rightChild  =  t.getScope().getOwnSlot(rvalue.getString());  [BUGGY]      JSType  rightType  =  getJSType(rightChild);  if  (validator.expectCanAssignTo(  t,  assign,  rightType,  leftType,       "assignment     "))  {  ensureTyped(t,  assign,  rightType);  }  else  {  ensureTyped(t,  assign);  }  }  [CLASS]  TypeCheck  [METHOD]  visitAssign  [RETURN_TYPE]  void  NodeTraversal  t  Node  assign  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  jsType  leftType  objectJsType  rightType  rvalueType  NodeTraversal  t  DiagnosticGroup  ALL_DIAGNOSTICS  CheckLevel  reportMissingOverride  reportUnknownTypes  Var  var  Node  assign  lvalue  object  object2  rightChild  rvalue  FunctionType  functionType  ScopeCreator  scopeCreator  String  OVERRIDING_PROTOTYPE_WITH_NON_OBJECT  functionPrivateName  message  property  property2  JSDocInfo  info  int  noTypeCheckSection  nullCount  typedCount  unknownCount  TypeValidator  validator  ObjectType  type  AbstractCompiler  compiler  JSTypeRegistry  typeRegistry  boolean  enterSection  externs  inExterns  report  reportMissingProperties  typeable  Scope  outerScope  topScope  DiagnosticType  BAD_DELETE  BAD_IMPLEMENTED_TYPE  BIT_OPERATION  CONFLICTING_EXTENDED_TYPE  CONFLICTING_IMPLEMENTED_TYPE  CONSTRUCTOR_NOT_CALLABLE  DETERMINISTIC_TEST  DETERMINISTIC_TEST_NO_RESULT  ENUM_DUP  ENUM_NOT_CONSTANT  EXPECTED_THIS_TYPE  FUNCTION_MASKS_VARIABLE  HIDDEN_INTERFACE_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY_MISMATCH  ILLEGAL_IMPLICIT_CAST  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE  INEXISTENT_ENUM_ELEMENT  INEXISTENT_PROPERTY  INTERFACE_FUNCTION_NOT_EMPTY  INTERFACE_METHOD_OVERRIDE  INVALID_INTERFACE_MEMBER_DECLARATION  MULTIPLE_VAR_DEF  NOT_A_CONSTRUCTOR  NOT_CALLABLE  UNEXPECTED_TOKEN  UNKNOWN_EXPR_TYPE  UNKNOWN_OVERRIDE  UNRESOLVED_TYPE  WRONG_ARGUMENT_COUNT  diagnosticType  InferJSDocInfo  inferJSDocInfo  	projects/Closure66/src/com/google/javascript/jscomp/TypeCheck.java	0.21320071635561041	939	939	2	replace	Node  rightChild  =  t.getScope().getOwnSlot(rvalue.getString());	  Node    rightChild    =    t.getScope().getOwnSlot(lvalue.getString());    	non-compiled	[CE]  orphaned  case	47	None	replace
138	[BUG]  [BUGGY]  Node  rightChild  =  t.getScope().getOwnSlot(var.getString());  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      Var  var  =  t.getScope().getVar(lvalue.getString());  if  (var  !=  null)  {  if  (var.isTypeInferred())  {  return;  }  }  }  JSType  leftType  =  getJSType(lvalue);      [BUGGY]  Node  rightChild  =  t.getScope().getOwnSlot(var.getString());  [BUGGY]      JSType  rightType  =  getJSType(rightChild);  if  (validator.expectCanAssignTo(  t,  assign,  rightType,  leftType,       "assignment     "))  {  ensureTyped(t,  assign,  rightType);  }  else  {  ensureTyped(t,  assign);  }  }  [CLASS]  TypeCheck  [METHOD]  visitAssign  [RETURN_TYPE]  void  NodeTraversal  t  Node  assign  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  jsType  leftType  objectJsType  rightType  rvalueType  NodeTraversal  t  DiagnosticGroup  ALL_DIAGNOSTICS  CheckLevel  reportMissingOverride  reportUnknownTypes  Var  var  Node  assign  lvalue  object  object2  rightChild  rvalue  FunctionType  functionType  ScopeCreator  scopeCreator  String  OVERRIDING_PROTOTYPE_WITH_NON_OBJECT  functionPrivateName  message  property  property2  JSDocInfo  info  int  noTypeCheckSection  nullCount  typedCount  unknownCount  TypeValidator  validator  ObjectType  type  AbstractCompiler  compiler  JSTypeRegistry  typeRegistry  boolean  enterSection  externs  inExterns  report  reportMissingProperties  typeable  Scope  outerScope  topScope  DiagnosticType  BAD_DELETE  BAD_IMPLEMENTED_TYPE  BIT_OPERATION  CONFLICTING_EXTENDED_TYPE  CONFLICTING_IMPLEMENTED_TYPE  CONSTRUCTOR_NOT_CALLABLE  DETERMINISTIC_TEST  DETERMINISTIC_TEST_NO_RESULT  ENUM_DUP  ENUM_NOT_CONSTANT  EXPECTED_THIS_TYPE  FUNCTION_MASKS_VARIABLE  HIDDEN_INTERFACE_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY_MISMATCH  ILLEGAL_IMPLICIT_CAST  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE  INEXISTENT_ENUM_ELEMENT  INEXISTENT_PROPERTY  INTERFACE_FUNCTION_NOT_EMPTY  INTERFACE_METHOD_OVERRIDE  INVALID_INTERFACE_MEMBER_DECLARATION  MULTIPLE_VAR_DEF  NOT_A_CONSTRUCTOR  NOT_CALLABLE  UNEXPECTED_TOKEN  UNKNOWN_EXPR_TYPE  UNKNOWN_OVERRIDE  UNRESOLVED_TYPE  WRONG_ARGUMENT_COUNT  diagnosticType  InferJSDocInfo  inferJSDocInfo  	projects/Closure66/src/com/google/javascript/jscomp/TypeCheck.java	0.21320071635561041	939	939	2	replace	Node  rightChild  =  t.getScope().getOwnSlot(var.getString());	  Node    rightChild    =    t.getScope().getOwnSlot(lvalue.getString());    	non-compiled	[CE]  orphaned  case	47	None	replace
139	[BUG]  [BUGGY]  Node  rightChild  =  t.getScope().getOwnSlot(rightType.getString());  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      Var  var  =  t.getScope().getVar(lvalue.getString());  if  (var  !=  null)  {  if  (var.isTypeInferred())  {  return;  }  }  }  JSType  leftType  =  getJSType(lvalue);      [BUGGY]  Node  rightChild  =  t.getScope().getOwnSlot(rightType.getString());  [BUGGY]      JSType  rightType  =  getJSType(rightChild);  if  (validator.expectCanAssignTo(  t,  assign,  rightType,  leftType,       "assignment     "))  {  ensureTyped(t,  assign,  rightType);  }  else  {  ensureTyped(t,  assign);  }  }  [CLASS]  TypeCheck  [METHOD]  visitAssign  [RETURN_TYPE]  void  NodeTraversal  t  Node  assign  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  jsType  leftType  objectJsType  rightType  rvalueType  NodeTraversal  t  DiagnosticGroup  ALL_DIAGNOSTICS  CheckLevel  reportMissingOverride  reportUnknownTypes  Var  var  Node  assign  lvalue  object  object2  rightChild  rvalue  FunctionType  functionType  ScopeCreator  scopeCreator  String  OVERRIDING_PROTOTYPE_WITH_NON_OBJECT  functionPrivateName  message  property  property2  JSDocInfo  info  int  noTypeCheckSection  nullCount  typedCount  unknownCount  TypeValidator  validator  ObjectType  type  AbstractCompiler  compiler  JSTypeRegistry  typeRegistry  boolean  enterSection  externs  inExterns  report  reportMissingProperties  typeable  Scope  outerScope  topScope  DiagnosticType  BAD_DELETE  BAD_IMPLEMENTED_TYPE  BIT_OPERATION  CONFLICTING_EXTENDED_TYPE  CONFLICTING_IMPLEMENTED_TYPE  CONSTRUCTOR_NOT_CALLABLE  DETERMINISTIC_TEST  DETERMINISTIC_TEST_NO_RESULT  ENUM_DUP  ENUM_NOT_CONSTANT  EXPECTED_THIS_TYPE  FUNCTION_MASKS_VARIABLE  HIDDEN_INTERFACE_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY_MISMATCH  ILLEGAL_IMPLICIT_CAST  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE  INEXISTENT_ENUM_ELEMENT  INEXISTENT_PROPERTY  INTERFACE_FUNCTION_NOT_EMPTY  INTERFACE_METHOD_OVERRIDE  INVALID_INTERFACE_MEMBER_DECLARATION  MULTIPLE_VAR_DEF  NOT_A_CONSTRUCTOR  NOT_CALLABLE  UNEXPECTED_TOKEN  UNKNOWN_EXPR_TYPE  UNKNOWN_OVERRIDE  UNRESOLVED_TYPE  WRONG_ARGUMENT_COUNT  diagnosticType  InferJSDocInfo  inferJSDocInfo  	projects/Closure66/src/com/google/javascript/jscomp/TypeCheck.java	0.21320071635561041	939	939	2	replace	Node  rightChild  =  t.getScope().getOwnSlot(rightType.getString());	  Node    rightChild    =    t.getScope().getOwnSlot(lvalue.getString());    	non-compiled	[CE]  orphaned  case	47	None	replace
140	[BUG]  [BUGGY]  Node  rightChild  =  leftType!=  null?  getJSType(leftType):  leftType.getFirstChild();  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      Var  var  =  t.getScope().getVar(lvalue.getString());  if  (var  !=  null)  {  if  (var.isTypeInferred())  {  return;  }  }  }  JSType  leftType  =  getJSType(lvalue);      [BUGGY]  Node  rightChild  =  leftType!=  null?  getJSType(leftType):  leftType.getFirstChild();  [BUGGY]      JSType  rightType  =  getJSType(rightChild);  if  (validator.expectCanAssignTo(  t,  assign,  rightType,  leftType,       "assignment     "))  {  ensureTyped(t,  assign,  rightType);  }  else  {  ensureTyped(t,  assign);  }  }  [CLASS]  TypeCheck  [METHOD]  visitAssign  [RETURN_TYPE]  void  NodeTraversal  t  Node  assign  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  jsType  leftType  objectJsType  rightType  rvalueType  NodeTraversal  t  DiagnosticGroup  ALL_DIAGNOSTICS  CheckLevel  reportMissingOverride  reportUnknownTypes  Var  var  Node  assign  lvalue  object  object2  rightChild  rvalue  FunctionType  functionType  ScopeCreator  scopeCreator  String  OVERRIDING_PROTOTYPE_WITH_NON_OBJECT  functionPrivateName  message  property  property2  JSDocInfo  info  int  noTypeCheckSection  nullCount  typedCount  unknownCount  TypeValidator  validator  ObjectType  type  AbstractCompiler  compiler  JSTypeRegistry  typeRegistry  boolean  enterSection  externs  inExterns  report  reportMissingProperties  typeable  Scope  outerScope  topScope  DiagnosticType  BAD_DELETE  BAD_IMPLEMENTED_TYPE  BIT_OPERATION  CONFLICTING_EXTENDED_TYPE  CONFLICTING_IMPLEMENTED_TYPE  CONSTRUCTOR_NOT_CALLABLE  DETERMINISTIC_TEST  DETERMINISTIC_TEST_NO_RESULT  ENUM_DUP  ENUM_NOT_CONSTANT  EXPECTED_THIS_TYPE  FUNCTION_MASKS_VARIABLE  HIDDEN_INTERFACE_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY_MISMATCH  ILLEGAL_IMPLICIT_CAST  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE  INEXISTENT_ENUM_ELEMENT  INEXISTENT_PROPERTY  INTERFACE_FUNCTION_NOT_EMPTY  INTERFACE_METHOD_OVERRIDE  INVALID_INTERFACE_MEMBER_DECLARATION  MULTIPLE_VAR_DEF  NOT_A_CONSTRUCTOR  NOT_CALLABLE  UNEXPECTED_TOKEN  UNKNOWN_EXPR_TYPE  UNKNOWN_OVERRIDE  UNRESOLVED_TYPE  WRONG_ARGUMENT_COUNT  diagnosticType  InferJSDocInfo  inferJSDocInfo  	projects/Closure66/src/com/google/javascript/jscomp/TypeCheck.java	0.21320071635561041	939	939	2	replace	Node  rightChild  =  leftType!=  null?  getJSType(leftType):  leftType.getFirstChild();	  Node    rightChild    =    leftType!=    null?    getJSType(leftType):    leftType.getLastChild();    	non-compiled	[CE]  orphaned  case	40	None	replace
141	[BUG]  [BUGGY]  Node  rightChild  =  leftType  ==  null?  getJSType(leftType):  leftType.getLastChild();  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      Var  var  =  t.getScope().getVar(lvalue.getString());  if  (var  !=  null)  {  if  (var.isTypeInferred())  {  return;  }  }  }  JSType  leftType  =  getJSType(lvalue);      [BUGGY]  Node  rightChild  =  leftType  ==  null?  getJSType(leftType):  leftType.getLastChild();  [BUGGY]      JSType  rightType  =  getJSType(rightChild);  if  (validator.expectCanAssignTo(  t,  assign,  rightType,  leftType,       "assignment     "))  {  ensureTyped(t,  assign,  rightType);  }  else  {  ensureTyped(t,  assign);  }  }  [CLASS]  TypeCheck  [METHOD]  visitAssign  [RETURN_TYPE]  void  NodeTraversal  t  Node  assign  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  jsType  leftType  objectJsType  rightType  rvalueType  NodeTraversal  t  DiagnosticGroup  ALL_DIAGNOSTICS  CheckLevel  reportMissingOverride  reportUnknownTypes  Var  var  Node  assign  lvalue  object  object2  rightChild  rvalue  FunctionType  functionType  ScopeCreator  scopeCreator  String  OVERRIDING_PROTOTYPE_WITH_NON_OBJECT  functionPrivateName  message  property  property2  JSDocInfo  info  int  noTypeCheckSection  nullCount  typedCount  unknownCount  TypeValidator  validator  ObjectType  type  AbstractCompiler  compiler  JSTypeRegistry  typeRegistry  boolean  enterSection  externs  inExterns  report  reportMissingProperties  typeable  Scope  outerScope  topScope  DiagnosticType  BAD_DELETE  BAD_IMPLEMENTED_TYPE  BIT_OPERATION  CONFLICTING_EXTENDED_TYPE  CONFLICTING_IMPLEMENTED_TYPE  CONSTRUCTOR_NOT_CALLABLE  DETERMINISTIC_TEST  DETERMINISTIC_TEST_NO_RESULT  ENUM_DUP  ENUM_NOT_CONSTANT  EXPECTED_THIS_TYPE  FUNCTION_MASKS_VARIABLE  HIDDEN_INTERFACE_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY_MISMATCH  ILLEGAL_IMPLICIT_CAST  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE  INEXISTENT_ENUM_ELEMENT  INEXISTENT_PROPERTY  INTERFACE_FUNCTION_NOT_EMPTY  INTERFACE_METHOD_OVERRIDE  INVALID_INTERFACE_MEMBER_DECLARATION  MULTIPLE_VAR_DEF  NOT_A_CONSTRUCTOR  NOT_CALLABLE  UNEXPECTED_TOKEN  UNKNOWN_EXPR_TYPE  UNKNOWN_OVERRIDE  UNRESOLVED_TYPE  WRONG_ARGUMENT_COUNT  diagnosticType  InferJSDocInfo  inferJSDocInfo  	projects/Closure66/src/com/google/javascript/jscomp/TypeCheck.java	0.21320071635561041	939	939	2	replace	Node  rightChild  =  leftType  ==  null?  getJSType(leftType):  leftType.getLastChild();	  Node    rightChild    =    leftType!=    null?    getJSType(leftType):    leftType.getLastChild();    	non-compiled	[CE]  orphaned  case	40	None	replace
142	[BUG]  [BUGGY]  Node  rightChild  =  leftType  ==  null?  getJSType(leftType):  leftType.getFirstChild();  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      Var  var  =  t.getScope().getVar(lvalue.getString());  if  (var  !=  null)  {  if  (var.isTypeInferred())  {  return;  }  }  }  JSType  leftType  =  getJSType(lvalue);      [BUGGY]  Node  rightChild  =  leftType  ==  null?  getJSType(leftType):  leftType.getFirstChild();  [BUGGY]      JSType  rightType  =  getJSType(rightChild);  if  (validator.expectCanAssignTo(  t,  assign,  rightType,  leftType,       "assignment     "))  {  ensureTyped(t,  assign,  rightType);  }  else  {  ensureTyped(t,  assign);  }  }  [CLASS]  TypeCheck  [METHOD]  visitAssign  [RETURN_TYPE]  void  NodeTraversal  t  Node  assign  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  jsType  leftType  objectJsType  rightType  rvalueType  NodeTraversal  t  DiagnosticGroup  ALL_DIAGNOSTICS  CheckLevel  reportMissingOverride  reportUnknownTypes  Var  var  Node  assign  lvalue  object  object2  rightChild  rvalue  FunctionType  functionType  ScopeCreator  scopeCreator  String  OVERRIDING_PROTOTYPE_WITH_NON_OBJECT  functionPrivateName  message  property  property2  JSDocInfo  info  int  noTypeCheckSection  nullCount  typedCount  unknownCount  TypeValidator  validator  ObjectType  type  AbstractCompiler  compiler  JSTypeRegistry  typeRegistry  boolean  enterSection  externs  inExterns  report  reportMissingProperties  typeable  Scope  outerScope  topScope  DiagnosticType  BAD_DELETE  BAD_IMPLEMENTED_TYPE  BIT_OPERATION  CONFLICTING_EXTENDED_TYPE  CONFLICTING_IMPLEMENTED_TYPE  CONSTRUCTOR_NOT_CALLABLE  DETERMINISTIC_TEST  DETERMINISTIC_TEST_NO_RESULT  ENUM_DUP  ENUM_NOT_CONSTANT  EXPECTED_THIS_TYPE  FUNCTION_MASKS_VARIABLE  HIDDEN_INTERFACE_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY_MISMATCH  ILLEGAL_IMPLICIT_CAST  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE  INEXISTENT_ENUM_ELEMENT  INEXISTENT_PROPERTY  INTERFACE_FUNCTION_NOT_EMPTY  INTERFACE_METHOD_OVERRIDE  INVALID_INTERFACE_MEMBER_DECLARATION  MULTIPLE_VAR_DEF  NOT_A_CONSTRUCTOR  NOT_CALLABLE  UNEXPECTED_TOKEN  UNKNOWN_EXPR_TYPE  UNKNOWN_OVERRIDE  UNRESOLVED_TYPE  WRONG_ARGUMENT_COUNT  diagnosticType  InferJSDocInfo  inferJSDocInfo  	projects/Closure66/src/com/google/javascript/jscomp/TypeCheck.java	0.21320071635561041	939	939	2	replace	Node  rightChild  =  leftType  ==  null?  getJSType(leftType):  leftType.getFirstChild();	  Node    rightChild    =    leftType!=    null?    getJSType(leftType):    leftType.getLastChild();    	non-compiled	[CE]  orphaned  case	40	None	replace
143	[BUG]  [BUGGY]  Node  rightChild  =  leftType!=  null?  getJSType(rightType):  leftType.getLastChild();  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      Var  var  =  t.getScope().getVar(lvalue.getString());  if  (var  !=  null)  {  if  (var.isTypeInferred())  {  return;  }  }  }  JSType  leftType  =  getJSType(lvalue);      [BUGGY]  Node  rightChild  =  leftType!=  null?  getJSType(rightType):  leftType.getLastChild();  [BUGGY]      JSType  rightType  =  getJSType(rightChild);  if  (validator.expectCanAssignTo(  t,  assign,  rightType,  leftType,       "assignment     "))  {  ensureTyped(t,  assign,  rightType);  }  else  {  ensureTyped(t,  assign);  }  }  [CLASS]  TypeCheck  [METHOD]  visitAssign  [RETURN_TYPE]  void  NodeTraversal  t  Node  assign  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  jsType  leftType  objectJsType  rightType  rvalueType  NodeTraversal  t  DiagnosticGroup  ALL_DIAGNOSTICS  CheckLevel  reportMissingOverride  reportUnknownTypes  Var  var  Node  assign  lvalue  object  object2  rightChild  rvalue  FunctionType  functionType  ScopeCreator  scopeCreator  String  OVERRIDING_PROTOTYPE_WITH_NON_OBJECT  functionPrivateName  message  property  property2  JSDocInfo  info  int  noTypeCheckSection  nullCount  typedCount  unknownCount  TypeValidator  validator  ObjectType  type  AbstractCompiler  compiler  JSTypeRegistry  typeRegistry  boolean  enterSection  externs  inExterns  report  reportMissingProperties  typeable  Scope  outerScope  topScope  DiagnosticType  BAD_DELETE  BAD_IMPLEMENTED_TYPE  BIT_OPERATION  CONFLICTING_EXTENDED_TYPE  CONFLICTING_IMPLEMENTED_TYPE  CONSTRUCTOR_NOT_CALLABLE  DETERMINISTIC_TEST  DETERMINISTIC_TEST_NO_RESULT  ENUM_DUP  ENUM_NOT_CONSTANT  EXPECTED_THIS_TYPE  FUNCTION_MASKS_VARIABLE  HIDDEN_INTERFACE_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY_MISMATCH  ILLEGAL_IMPLICIT_CAST  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE  INEXISTENT_ENUM_ELEMENT  INEXISTENT_PROPERTY  INTERFACE_FUNCTION_NOT_EMPTY  INTERFACE_METHOD_OVERRIDE  INVALID_INTERFACE_MEMBER_DECLARATION  MULTIPLE_VAR_DEF  NOT_A_CONSTRUCTOR  NOT_CALLABLE  UNEXPECTED_TOKEN  UNKNOWN_EXPR_TYPE  UNKNOWN_OVERRIDE  UNRESOLVED_TYPE  WRONG_ARGUMENT_COUNT  diagnosticType  InferJSDocInfo  inferJSDocInfo  	projects/Closure66/src/com/google/javascript/jscomp/TypeCheck.java	0.21320071635561041	939	939	2	replace	Node  rightChild  =  leftType!=  null?  getJSType(rightType):  leftType.getLastChild();	  Node    rightChild    =    leftType!=    null?    getJSType(leftType):    leftType.getLastChild();    	non-compiled	[CE]  orphaned  case	40	None	replace
144	[BUG]  [BUGGY]  Node  rightChild  =  t.getScope().getRightChild(leftType);  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      Var  var  =  t.getScope().getVar(lvalue.getString());  if  (var  !=  null)  {  if  (var.isTypeInferred())  {  return;  }  }  }  JSType  leftType  =  getJSType(lvalue);      [BUGGY]  Node  rightChild  =  t.getScope().getRightChild(leftType);  [BUGGY]      JSType  rightType  =  getJSType(rightChild);  if  (validator.expectCanAssignTo(  t,  assign,  rightType,  leftType,       "assignment     "))  {  ensureTyped(t,  assign,  rightType);  }  else  {  ensureTyped(t,  assign);  }  }  [CLASS]  TypeCheck  [METHOD]  visitAssign  [RETURN_TYPE]  void  NodeTraversal  t  Node  assign  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  jsType  leftType  objectJsType  rightType  rvalueType  NodeTraversal  t  DiagnosticGroup  ALL_DIAGNOSTICS  CheckLevel  reportMissingOverride  reportUnknownTypes  Var  var  Node  assign  lvalue  object  object2  rightChild  rvalue  FunctionType  functionType  ScopeCreator  scopeCreator  String  OVERRIDING_PROTOTYPE_WITH_NON_OBJECT  functionPrivateName  message  property  property2  JSDocInfo  info  int  noTypeCheckSection  nullCount  typedCount  unknownCount  TypeValidator  validator  ObjectType  type  AbstractCompiler  compiler  JSTypeRegistry  typeRegistry  boolean  enterSection  externs  inExterns  report  reportMissingProperties  typeable  Scope  outerScope  topScope  DiagnosticType  BAD_DELETE  BAD_IMPLEMENTED_TYPE  BIT_OPERATION  CONFLICTING_EXTENDED_TYPE  CONFLICTING_IMPLEMENTED_TYPE  CONSTRUCTOR_NOT_CALLABLE  DETERMINISTIC_TEST  DETERMINISTIC_TEST_NO_RESULT  ENUM_DUP  ENUM_NOT_CONSTANT  EXPECTED_THIS_TYPE  FUNCTION_MASKS_VARIABLE  HIDDEN_INTERFACE_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY_MISMATCH  ILLEGAL_IMPLICIT_CAST  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE  INEXISTENT_ENUM_ELEMENT  INEXISTENT_PROPERTY  INTERFACE_FUNCTION_NOT_EMPTY  INTERFACE_METHOD_OVERRIDE  INVALID_INTERFACE_MEMBER_DECLARATION  MULTIPLE_VAR_DEF  NOT_A_CONSTRUCTOR  NOT_CALLABLE  UNEXPECTED_TOKEN  UNKNOWN_EXPR_TYPE  UNKNOWN_OVERRIDE  UNRESOLVED_TYPE  WRONG_ARGUMENT_COUNT  diagnosticType  InferJSDocInfo  inferJSDocInfo  	projects/Closure66/src/com/google/javascript/jscomp/TypeCheck.java	0.21320071635561041	939	939	2	replace	Node  rightChild  =  t.getScope().getRightChild(leftType);	  Node    rightChild    =    t.getScope().getRightChild();    	non-compiled	[CE]  orphaned  case	2	None	replace
145	[BUG]  [BUGGY]  Node  rightChild  =  t.getScope().getRightChild(lvalue);  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      Var  var  =  t.getScope().getVar(lvalue.getString());  if  (var  !=  null)  {  if  (var.isTypeInferred())  {  return;  }  }  }  JSType  leftType  =  getJSType(lvalue);      [BUGGY]  Node  rightChild  =  t.getScope().getRightChild(lvalue);  [BUGGY]      JSType  rightType  =  getJSType(rightChild);  if  (validator.expectCanAssignTo(  t,  assign,  rightType,  leftType,       "assignment     "))  {  ensureTyped(t,  assign,  rightType);  }  else  {  ensureTyped(t,  assign);  }  }  [CLASS]  TypeCheck  [METHOD]  visitAssign  [RETURN_TYPE]  void  NodeTraversal  t  Node  assign  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  jsType  leftType  objectJsType  rightType  rvalueType  NodeTraversal  t  DiagnosticGroup  ALL_DIAGNOSTICS  CheckLevel  reportMissingOverride  reportUnknownTypes  Var  var  Node  assign  lvalue  object  object2  rightChild  rvalue  FunctionType  functionType  ScopeCreator  scopeCreator  String  OVERRIDING_PROTOTYPE_WITH_NON_OBJECT  functionPrivateName  message  property  property2  JSDocInfo  info  int  noTypeCheckSection  nullCount  typedCount  unknownCount  TypeValidator  validator  ObjectType  type  AbstractCompiler  compiler  JSTypeRegistry  typeRegistry  boolean  enterSection  externs  inExterns  report  reportMissingProperties  typeable  Scope  outerScope  topScope  DiagnosticType  BAD_DELETE  BAD_IMPLEMENTED_TYPE  BIT_OPERATION  CONFLICTING_EXTENDED_TYPE  CONFLICTING_IMPLEMENTED_TYPE  CONSTRUCTOR_NOT_CALLABLE  DETERMINISTIC_TEST  DETERMINISTIC_TEST_NO_RESULT  ENUM_DUP  ENUM_NOT_CONSTANT  EXPECTED_THIS_TYPE  FUNCTION_MASKS_VARIABLE  HIDDEN_INTERFACE_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY_MISMATCH  ILLEGAL_IMPLICIT_CAST  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE  INEXISTENT_ENUM_ELEMENT  INEXISTENT_PROPERTY  INTERFACE_FUNCTION_NOT_EMPTY  INTERFACE_METHOD_OVERRIDE  INVALID_INTERFACE_MEMBER_DECLARATION  MULTIPLE_VAR_DEF  NOT_A_CONSTRUCTOR  NOT_CALLABLE  UNEXPECTED_TOKEN  UNKNOWN_EXPR_TYPE  UNKNOWN_OVERRIDE  UNRESOLVED_TYPE  WRONG_ARGUMENT_COUNT  diagnosticType  InferJSDocInfo  inferJSDocInfo  	projects/Closure66/src/com/google/javascript/jscomp/TypeCheck.java	0.21320071635561041	939	939	2	replace	Node  rightChild  =  t.getScope().getRightChild(lvalue);	  Node    rightChild    =    t.getScope().getRightChild();    	non-compiled	[CE]  orphaned  case	2	None	replace
146	[BUG]  [BUGGY]  Node  rightChild  =  t.getScope().getRightChild(assign);  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      Var  var  =  t.getScope().getVar(lvalue.getString());  if  (var  !=  null)  {  if  (var.isTypeInferred())  {  return;  }  }  }  JSType  leftType  =  getJSType(lvalue);      [BUGGY]  Node  rightChild  =  t.getScope().getRightChild(assign);  [BUGGY]      JSType  rightType  =  getJSType(rightChild);  if  (validator.expectCanAssignTo(  t,  assign,  rightType,  leftType,       "assignment     "))  {  ensureTyped(t,  assign,  rightType);  }  else  {  ensureTyped(t,  assign);  }  }  [CLASS]  TypeCheck  [METHOD]  visitAssign  [RETURN_TYPE]  void  NodeTraversal  t  Node  assign  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  jsType  leftType  objectJsType  rightType  rvalueType  NodeTraversal  t  DiagnosticGroup  ALL_DIAGNOSTICS  CheckLevel  reportMissingOverride  reportUnknownTypes  Var  var  Node  assign  lvalue  object  object2  rightChild  rvalue  FunctionType  functionType  ScopeCreator  scopeCreator  String  OVERRIDING_PROTOTYPE_WITH_NON_OBJECT  functionPrivateName  message  property  property2  JSDocInfo  info  int  noTypeCheckSection  nullCount  typedCount  unknownCount  TypeValidator  validator  ObjectType  type  AbstractCompiler  compiler  JSTypeRegistry  typeRegistry  boolean  enterSection  externs  inExterns  report  reportMissingProperties  typeable  Scope  outerScope  topScope  DiagnosticType  BAD_DELETE  BAD_IMPLEMENTED_TYPE  BIT_OPERATION  CONFLICTING_EXTENDED_TYPE  CONFLICTING_IMPLEMENTED_TYPE  CONSTRUCTOR_NOT_CALLABLE  DETERMINISTIC_TEST  DETERMINISTIC_TEST_NO_RESULT  ENUM_DUP  ENUM_NOT_CONSTANT  EXPECTED_THIS_TYPE  FUNCTION_MASKS_VARIABLE  HIDDEN_INTERFACE_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY_MISMATCH  ILLEGAL_IMPLICIT_CAST  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE  INEXISTENT_ENUM_ELEMENT  INEXISTENT_PROPERTY  INTERFACE_FUNCTION_NOT_EMPTY  INTERFACE_METHOD_OVERRIDE  INVALID_INTERFACE_MEMBER_DECLARATION  MULTIPLE_VAR_DEF  NOT_A_CONSTRUCTOR  NOT_CALLABLE  UNEXPECTED_TOKEN  UNKNOWN_EXPR_TYPE  UNKNOWN_OVERRIDE  UNRESOLVED_TYPE  WRONG_ARGUMENT_COUNT  diagnosticType  InferJSDocInfo  inferJSDocInfo  	projects/Closure66/src/com/google/javascript/jscomp/TypeCheck.java	0.21320071635561041	939	939	2	replace	Node  rightChild  =  t.getScope().getRightChild(assign);	  Node    rightChild    =    t.getScope().getRightChild();    	non-compiled	[CE]  orphaned  case	2	None	replace
147	[BUG]  [BUGGY]  Node  rightChild  =  t.getScope().getRightChild(rightType);  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      Var  var  =  t.getScope().getVar(lvalue.getString());  if  (var  !=  null)  {  if  (var.isTypeInferred())  {  return;  }  }  }  JSType  leftType  =  getJSType(lvalue);      [BUGGY]  Node  rightChild  =  t.getScope().getRightChild(rightType);  [BUGGY]      JSType  rightType  =  getJSType(rightChild);  if  (validator.expectCanAssignTo(  t,  assign,  rightType,  leftType,       "assignment     "))  {  ensureTyped(t,  assign,  rightType);  }  else  {  ensureTyped(t,  assign);  }  }  [CLASS]  TypeCheck  [METHOD]  visitAssign  [RETURN_TYPE]  void  NodeTraversal  t  Node  assign  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  jsType  leftType  objectJsType  rightType  rvalueType  NodeTraversal  t  DiagnosticGroup  ALL_DIAGNOSTICS  CheckLevel  reportMissingOverride  reportUnknownTypes  Var  var  Node  assign  lvalue  object  object2  rightChild  rvalue  FunctionType  functionType  ScopeCreator  scopeCreator  String  OVERRIDING_PROTOTYPE_WITH_NON_OBJECT  functionPrivateName  message  property  property2  JSDocInfo  info  int  noTypeCheckSection  nullCount  typedCount  unknownCount  TypeValidator  validator  ObjectType  type  AbstractCompiler  compiler  JSTypeRegistry  typeRegistry  boolean  enterSection  externs  inExterns  report  reportMissingProperties  typeable  Scope  outerScope  topScope  DiagnosticType  BAD_DELETE  BAD_IMPLEMENTED_TYPE  BIT_OPERATION  CONFLICTING_EXTENDED_TYPE  CONFLICTING_IMPLEMENTED_TYPE  CONSTRUCTOR_NOT_CALLABLE  DETERMINISTIC_TEST  DETERMINISTIC_TEST_NO_RESULT  ENUM_DUP  ENUM_NOT_CONSTANT  EXPECTED_THIS_TYPE  FUNCTION_MASKS_VARIABLE  HIDDEN_INTERFACE_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY_MISMATCH  ILLEGAL_IMPLICIT_CAST  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE  INEXISTENT_ENUM_ELEMENT  INEXISTENT_PROPERTY  INTERFACE_FUNCTION_NOT_EMPTY  INTERFACE_METHOD_OVERRIDE  INVALID_INTERFACE_MEMBER_DECLARATION  MULTIPLE_VAR_DEF  NOT_A_CONSTRUCTOR  NOT_CALLABLE  UNEXPECTED_TOKEN  UNKNOWN_EXPR_TYPE  UNKNOWN_OVERRIDE  UNRESOLVED_TYPE  WRONG_ARGUMENT_COUNT  diagnosticType  InferJSDocInfo  inferJSDocInfo  	projects/Closure66/src/com/google/javascript/jscomp/TypeCheck.java	0.21320071635561041	939	939	2	replace	Node  rightChild  =  t.getScope().getRightChild(rightType);	  Node    rightChild    =    t.getScope().getRightChild();    	non-compiled	[CE]  orphaned  case	2	None	replace
148	[BUG]  [BUGGY]  Node  rightChild  =  t.getScope().getRightChild(null);  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      Var  var  =  t.getScope().getVar(lvalue.getString());  if  (var  !=  null)  {  if  (var.isTypeInferred())  {  return;  }  }  }  JSType  leftType  =  getJSType(lvalue);      [BUGGY]  Node  rightChild  =  t.getScope().getRightChild(null);  [BUGGY]      JSType  rightType  =  getJSType(rightChild);  if  (validator.expectCanAssignTo(  t,  assign,  rightType,  leftType,       "assignment     "))  {  ensureTyped(t,  assign,  rightType);  }  else  {  ensureTyped(t,  assign);  }  }  [CLASS]  TypeCheck  [METHOD]  visitAssign  [RETURN_TYPE]  void  NodeTraversal  t  Node  assign  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  jsType  leftType  objectJsType  rightType  rvalueType  NodeTraversal  t  DiagnosticGroup  ALL_DIAGNOSTICS  CheckLevel  reportMissingOverride  reportUnknownTypes  Var  var  Node  assign  lvalue  object  object2  rightChild  rvalue  FunctionType  functionType  ScopeCreator  scopeCreator  String  OVERRIDING_PROTOTYPE_WITH_NON_OBJECT  functionPrivateName  message  property  property2  JSDocInfo  info  int  noTypeCheckSection  nullCount  typedCount  unknownCount  TypeValidator  validator  ObjectType  type  AbstractCompiler  compiler  JSTypeRegistry  typeRegistry  boolean  enterSection  externs  inExterns  report  reportMissingProperties  typeable  Scope  outerScope  topScope  DiagnosticType  BAD_DELETE  BAD_IMPLEMENTED_TYPE  BIT_OPERATION  CONFLICTING_EXTENDED_TYPE  CONFLICTING_IMPLEMENTED_TYPE  CONSTRUCTOR_NOT_CALLABLE  DETERMINISTIC_TEST  DETERMINISTIC_TEST_NO_RESULT  ENUM_DUP  ENUM_NOT_CONSTANT  EXPECTED_THIS_TYPE  FUNCTION_MASKS_VARIABLE  HIDDEN_INTERFACE_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY_MISMATCH  ILLEGAL_IMPLICIT_CAST  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE  INEXISTENT_ENUM_ELEMENT  INEXISTENT_PROPERTY  INTERFACE_FUNCTION_NOT_EMPTY  INTERFACE_METHOD_OVERRIDE  INVALID_INTERFACE_MEMBER_DECLARATION  MULTIPLE_VAR_DEF  NOT_A_CONSTRUCTOR  NOT_CALLABLE  UNEXPECTED_TOKEN  UNKNOWN_EXPR_TYPE  UNKNOWN_OVERRIDE  UNRESOLVED_TYPE  WRONG_ARGUMENT_COUNT  diagnosticType  InferJSDocInfo  inferJSDocInfo  	projects/Closure66/src/com/google/javascript/jscomp/TypeCheck.java	0.21320071635561041	939	939	2	replace	Node  rightChild  =  t.getScope().getRightChild(null);	  Node    rightChild    =    t.getScope().getRightChild();    	non-compiled	[CE]  orphaned  case	2	None	replace
149	[BUG]  [BUGGY]  Node  rightChild  =  t.getScope().getLeftChild();  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]      Var  var  =  t.getScope().getVar(lvalue.getString());  if  (var  !=  null)  {  if  (var.isTypeInferred())  {  return;  }  }  }  JSType  leftType  =  getJSType(lvalue);      [BUGGY]  Node  rightChild  =  t.getScope().getLeftChild();  [BUGGY]      JSType  rightType  =  getJSType(rightChild);  if  (validator.expectCanAssignTo(  t,  assign,  rightType,  leftType,       "assignment     "))  {  ensureTyped(t,  assign,  rightType);  }  else  {  ensureTyped(t,  assign);  }  }  [CLASS]  TypeCheck  [METHOD]  visitAssign  [RETURN_TYPE]  void  NodeTraversal  t  Node  assign  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  jsType  leftType  objectJsType  rightType  rvalueType  NodeTraversal  t  DiagnosticGroup  ALL_DIAGNOSTICS  CheckLevel  reportMissingOverride  reportUnknownTypes  Var  var  Node  assign  lvalue  object  object2  rightChild  rvalue  FunctionType  functionType  ScopeCreator  scopeCreator  String  OVERRIDING_PROTOTYPE_WITH_NON_OBJECT  functionPrivateName  message  property  property2  JSDocInfo  info  int  noTypeCheckSection  nullCount  typedCount  unknownCount  TypeValidator  validator  ObjectType  type  AbstractCompiler  compiler  JSTypeRegistry  typeRegistry  boolean  enterSection  externs  inExterns  report  reportMissingProperties  typeable  Scope  outerScope  topScope  DiagnosticType  BAD_DELETE  BAD_IMPLEMENTED_TYPE  BIT_OPERATION  CONFLICTING_EXTENDED_TYPE  CONFLICTING_IMPLEMENTED_TYPE  CONSTRUCTOR_NOT_CALLABLE  DETERMINISTIC_TEST  DETERMINISTIC_TEST_NO_RESULT  ENUM_DUP  ENUM_NOT_CONSTANT  EXPECTED_THIS_TYPE  FUNCTION_MASKS_VARIABLE  HIDDEN_INTERFACE_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY_MISMATCH  ILLEGAL_IMPLICIT_CAST  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE  INEXISTENT_ENUM_ELEMENT  INEXISTENT_PROPERTY  INTERFACE_FUNCTION_NOT_EMPTY  INTERFACE_METHOD_OVERRIDE  INVALID_INTERFACE_MEMBER_DECLARATION  MULTIPLE_VAR_DEF  NOT_A_CONSTRUCTOR  NOT_CALLABLE  UNEXPECTED_TOKEN  UNKNOWN_EXPR_TYPE  UNKNOWN_OVERRIDE  UNRESOLVED_TYPE  WRONG_ARGUMENT_COUNT  diagnosticType  InferJSDocInfo  inferJSDocInfo  	projects/Closure66/src/com/google/javascript/jscomp/TypeCheck.java	0.21320071635561041	939	939	2	replace	Node  rightChild  =  t.getScope().getLeftChild();	  Node    rightChild    =    t.getScope().getRightChild();    	non-compiled	[CE]  orphaned  case	2	None	replace
150	[BUG]  [BUGGY]  Node  rightChild  =  t.getScope().getLocalPart();  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      Var  var  =  t.getScope().getVar(lvalue.getString());  if  (var  !=  null)  {  if  (var.isTypeInferred())  {  return;  }  }  }  JSType  leftType  =  getJSType(lvalue);      [BUGGY]  Node  rightChild  =  t.getScope().getLocalPart();  [BUGGY]      JSType  rightType  =  getJSType(rightChild);  if  (validator.expectCanAssignTo(  t,  assign,  rightType,  leftType,       "assignment     "))  {  ensureTyped(t,  assign,  rightType);  }  else  {  ensureTyped(t,  assign);  }  }  [CLASS]  TypeCheck  [METHOD]  visitAssign  [RETURN_TYPE]  void  NodeTraversal  t  Node  assign  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  jsType  leftType  objectJsType  rightType  rvalueType  NodeTraversal  t  DiagnosticGroup  ALL_DIAGNOSTICS  CheckLevel  reportMissingOverride  reportUnknownTypes  Var  var  Node  assign  lvalue  object  object2  rightChild  rvalue  FunctionType  functionType  ScopeCreator  scopeCreator  String  OVERRIDING_PROTOTYPE_WITH_NON_OBJECT  functionPrivateName  message  property  property2  JSDocInfo  info  int  noTypeCheckSection  nullCount  typedCount  unknownCount  TypeValidator  validator  ObjectType  type  AbstractCompiler  compiler  JSTypeRegistry  typeRegistry  boolean  enterSection  externs  inExterns  report  reportMissingProperties  typeable  Scope  outerScope  topScope  DiagnosticType  BAD_DELETE  BAD_IMPLEMENTED_TYPE  BIT_OPERATION  CONFLICTING_EXTENDED_TYPE  CONFLICTING_IMPLEMENTED_TYPE  CONSTRUCTOR_NOT_CALLABLE  DETERMINISTIC_TEST  DETERMINISTIC_TEST_NO_RESULT  ENUM_DUP  ENUM_NOT_CONSTANT  EXPECTED_THIS_TYPE  FUNCTION_MASKS_VARIABLE  HIDDEN_INTERFACE_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY_MISMATCH  ILLEGAL_IMPLICIT_CAST  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE  INEXISTENT_ENUM_ELEMENT  INEXISTENT_PROPERTY  INTERFACE_FUNCTION_NOT_EMPTY  INTERFACE_METHOD_OVERRIDE  INVALID_INTERFACE_MEMBER_DECLARATION  MULTIPLE_VAR_DEF  NOT_A_CONSTRUCTOR  NOT_CALLABLE  UNEXPECTED_TOKEN  UNKNOWN_EXPR_TYPE  UNKNOWN_OVERRIDE  UNRESOLVED_TYPE  WRONG_ARGUMENT_COUNT  diagnosticType  InferJSDocInfo  inferJSDocInfo  	projects/Closure66/src/com/google/javascript/jscomp/TypeCheck.java	0.21320071635561041	939	939	2	replace	Node  rightChild  =  t.getScope().getLocalPart();	  Node    rightChild    =    t.getScope().getFirstChild();    	non-compiled	[CE]  orphaned  case	1	None	replace
151	[BUG]  [BUGGY]  Node  rightChild  =  t.getScope().getRootNode(object);  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      Var  var  =  t.getScope().getVar(lvalue.getString());  if  (var  !=  null)  {  if  (var.isTypeInferred())  {  return;  }  }  }  JSType  leftType  =  getJSType(lvalue);      [BUGGY]  Node  rightChild  =  t.getScope().getRootNode(object);  [BUGGY]      JSType  rightType  =  getJSType(rightChild);  if  (validator.expectCanAssignTo(  t,  assign,  rightType,  leftType,       "assignment     "))  {  ensureTyped(t,  assign,  rightType);  }  else  {  ensureTyped(t,  assign);  }  }  [CLASS]  TypeCheck  [METHOD]  visitAssign  [RETURN_TYPE]  void  NodeTraversal  t  Node  assign  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  jsType  leftType  objectJsType  rightType  rvalueType  NodeTraversal  t  DiagnosticGroup  ALL_DIAGNOSTICS  CheckLevel  reportMissingOverride  reportUnknownTypes  Var  var  Node  assign  lvalue  object  object2  rightChild  rvalue  FunctionType  functionType  ScopeCreator  scopeCreator  String  OVERRIDING_PROTOTYPE_WITH_NON_OBJECT  functionPrivateName  message  property  property2  JSDocInfo  info  int  noTypeCheckSection  nullCount  typedCount  unknownCount  TypeValidator  validator  ObjectType  type  AbstractCompiler  compiler  JSTypeRegistry  typeRegistry  boolean  enterSection  externs  inExterns  report  reportMissingProperties  typeable  Scope  outerScope  topScope  DiagnosticType  BAD_DELETE  BAD_IMPLEMENTED_TYPE  BIT_OPERATION  CONFLICTING_EXTENDED_TYPE  CONFLICTING_IMPLEMENTED_TYPE  CONSTRUCTOR_NOT_CALLABLE  DETERMINISTIC_TEST  DETERMINISTIC_TEST_NO_RESULT  ENUM_DUP  ENUM_NOT_CONSTANT  EXPECTED_THIS_TYPE  FUNCTION_MASKS_VARIABLE  HIDDEN_INTERFACE_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY_MISMATCH  ILLEGAL_IMPLICIT_CAST  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE  INEXISTENT_ENUM_ELEMENT  INEXISTENT_PROPERTY  INTERFACE_FUNCTION_NOT_EMPTY  INTERFACE_METHOD_OVERRIDE  INVALID_INTERFACE_MEMBER_DECLARATION  MULTIPLE_VAR_DEF  NOT_A_CONSTRUCTOR  NOT_CALLABLE  UNEXPECTED_TOKEN  UNKNOWN_EXPR_TYPE  UNKNOWN_OVERRIDE  UNRESOLVED_TYPE  WRONG_ARGUMENT_COUNT  diagnosticType  InferJSDocInfo  inferJSDocInfo  	projects/Closure66/src/com/google/javascript/jscomp/TypeCheck.java	0.21320071635561041	939	939	2	replace	Node  rightChild  =  t.getScope().getRootNode(object);	  Node    rightChild    =    t.getScope().getRootNode(rvalue);    	non-compiled	[CE]  orphaned  case	42	None	replace
152	[BUG]  [BUGGY]  Node  rightChild  =  t.getScope().getRootNode(rightType);  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      Var  var  =  t.getScope().getVar(lvalue.getString());  if  (var  !=  null)  {  if  (var.isTypeInferred())  {  return;  }  }  }  JSType  leftType  =  getJSType(lvalue);      [BUGGY]  Node  rightChild  =  t.getScope().getRootNode(rightType);  [BUGGY]      JSType  rightType  =  getJSType(rightChild);  if  (validator.expectCanAssignTo(  t,  assign,  rightType,  leftType,       "assignment     "))  {  ensureTyped(t,  assign,  rightType);  }  else  {  ensureTyped(t,  assign);  }  }  [CLASS]  TypeCheck  [METHOD]  visitAssign  [RETURN_TYPE]  void  NodeTraversal  t  Node  assign  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  jsType  leftType  objectJsType  rightType  rvalueType  NodeTraversal  t  DiagnosticGroup  ALL_DIAGNOSTICS  CheckLevel  reportMissingOverride  reportUnknownTypes  Var  var  Node  assign  lvalue  object  object2  rightChild  rvalue  FunctionType  functionType  ScopeCreator  scopeCreator  String  OVERRIDING_PROTOTYPE_WITH_NON_OBJECT  functionPrivateName  message  property  property2  JSDocInfo  info  int  noTypeCheckSection  nullCount  typedCount  unknownCount  TypeValidator  validator  ObjectType  type  AbstractCompiler  compiler  JSTypeRegistry  typeRegistry  boolean  enterSection  externs  inExterns  report  reportMissingProperties  typeable  Scope  outerScope  topScope  DiagnosticType  BAD_DELETE  BAD_IMPLEMENTED_TYPE  BIT_OPERATION  CONFLICTING_EXTENDED_TYPE  CONFLICTING_IMPLEMENTED_TYPE  CONSTRUCTOR_NOT_CALLABLE  DETERMINISTIC_TEST  DETERMINISTIC_TEST_NO_RESULT  ENUM_DUP  ENUM_NOT_CONSTANT  EXPECTED_THIS_TYPE  FUNCTION_MASKS_VARIABLE  HIDDEN_INTERFACE_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY_MISMATCH  ILLEGAL_IMPLICIT_CAST  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE  INEXISTENT_ENUM_ELEMENT  INEXISTENT_PROPERTY  INTERFACE_FUNCTION_NOT_EMPTY  INTERFACE_METHOD_OVERRIDE  INVALID_INTERFACE_MEMBER_DECLARATION  MULTIPLE_VAR_DEF  NOT_A_CONSTRUCTOR  NOT_CALLABLE  UNEXPECTED_TOKEN  UNKNOWN_EXPR_TYPE  UNKNOWN_OVERRIDE  UNRESOLVED_TYPE  WRONG_ARGUMENT_COUNT  diagnosticType  InferJSDocInfo  inferJSDocInfo  	projects/Closure66/src/com/google/javascript/jscomp/TypeCheck.java	0.21320071635561041	939	939	2	replace	Node  rightChild  =  t.getScope().getRootNode(rightType);	  Node    rightChild    =    t.getScope().getRootNode(rvalue);    	non-compiled	[CE]  orphaned  case	42	None	replace
153	[BUG]  [BUGGY]  if(leftType!=  null)  {  JSType  rightType  =  getJSType(leftChild);  if(validator.expectCanAssignTo(  t,  assign,  leftType,   "assignment   "))  {  return;  }  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      Var  var  =  t.getScope().getVar(lvalue.getString());  if  (var  !=  null)  {  if  (var.isTypeInferred())  {  return;  }  }  }  JSType  leftType  =  getJSType(lvalue);      [BUGGY]  if(leftType!=  null)  {  JSType  rightType  =  getJSType(leftChild);  if(validator.expectCanAssignTo(  t,  assign,  leftType,   "assignment   "))  {  return;  }  [BUGGY]      JSType  rightType  =  getJSType(rightChild);  if  (validator.expectCanAssignTo(  t,  assign,  rightType,  leftType,       "assignment     "))  {  ensureTyped(t,  assign,  rightType);  }  else  {  ensureTyped(t,  assign);  }  }  [CLASS]  TypeCheck  [METHOD]  visitAssign  [RETURN_TYPE]  void  NodeTraversal  t  Node  assign  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  jsType  leftType  objectJsType  rightType  rvalueType  NodeTraversal  t  DiagnosticGroup  ALL_DIAGNOSTICS  CheckLevel  reportMissingOverride  reportUnknownTypes  Var  var  Node  assign  lvalue  object  object2  rightChild  rvalue  FunctionType  functionType  ScopeCreator  scopeCreator  String  OVERRIDING_PROTOTYPE_WITH_NON_OBJECT  functionPrivateName  message  property  property2  JSDocInfo  info  int  noTypeCheckSection  nullCount  typedCount  unknownCount  TypeValidator  validator  ObjectType  type  AbstractCompiler  compiler  JSTypeRegistry  typeRegistry  boolean  enterSection  externs  inExterns  report  reportMissingProperties  typeable  Scope  outerScope  topScope  DiagnosticType  BAD_DELETE  BAD_IMPLEMENTED_TYPE  BIT_OPERATION  CONFLICTING_EXTENDED_TYPE  CONFLICTING_IMPLEMENTED_TYPE  CONSTRUCTOR_NOT_CALLABLE  DETERMINISTIC_TEST  DETERMINISTIC_TEST_NO_RESULT  ENUM_DUP  ENUM_NOT_CONSTANT  EXPECTED_THIS_TYPE  FUNCTION_MASKS_VARIABLE  HIDDEN_INTERFACE_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY_MISMATCH  ILLEGAL_IMPLICIT_CAST  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE  INEXISTENT_ENUM_ELEMENT  INEXISTENT_PROPERTY  INTERFACE_FUNCTION_NOT_EMPTY  INTERFACE_METHOD_OVERRIDE  INVALID_INTERFACE_MEMBER_DECLARATION  MULTIPLE_VAR_DEF  NOT_A_CONSTRUCTOR  NOT_CALLABLE  UNEXPECTED_TOKEN  UNKNOWN_EXPR_TYPE  UNKNOWN_OVERRIDE  UNRESOLVED_TYPE  WRONG_ARGUMENT_COUNT  diagnosticType  InferJSDocInfo  inferJSDocInfo  	projects/Closure66/src/com/google/javascript/jscomp/TypeCheck.java	0.21320071635561041	939	939	2	replace	if(leftType!=  null)  {  JSType  rightType  =  getJSType(leftChild);  if(validator.expectCanAssignTo(  t,  assign,  leftType,   "assignment   "))  {  return;  }	  JSType    rightType    =    getJSType(leftChild);    	non-compiled	[CE]  orphaned  case	38	None	replace
154	[BUG]  [BUGGY]  if(leftType!=  null)  {  JSType  rightType  =  getJSType(leftChild);  if(validator.expectCanAssignTo(  t,  assign,  leftType,   "assignment   "))  {  ensureTyped(t,  assign,  rightType);  }  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      Var  var  =  t.getScope().getVar(lvalue.getString());  if  (var  !=  null)  {  if  (var.isTypeInferred())  {  return;  }  }  }  JSType  leftType  =  getJSType(lvalue);      [BUGGY]  if(leftType!=  null)  {  JSType  rightType  =  getJSType(leftChild);  if(validator.expectCanAssignTo(  t,  assign,  leftType,   "assignment   "))  {  ensureTyped(t,  assign,  rightType);  }  [BUGGY]      JSType  rightType  =  getJSType(rightChild);  if  (validator.expectCanAssignTo(  t,  assign,  rightType,  leftType,       "assignment     "))  {  ensureTyped(t,  assign,  rightType);  }  else  {  ensureTyped(t,  assign);  }  }  [CLASS]  TypeCheck  [METHOD]  visitAssign  [RETURN_TYPE]  void  NodeTraversal  t  Node  assign  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  jsType  leftType  objectJsType  rightType  rvalueType  NodeTraversal  t  DiagnosticGroup  ALL_DIAGNOSTICS  CheckLevel  reportMissingOverride  reportUnknownTypes  Var  var  Node  assign  lvalue  object  object2  rightChild  rvalue  FunctionType  functionType  ScopeCreator  scopeCreator  String  OVERRIDING_PROTOTYPE_WITH_NON_OBJECT  functionPrivateName  message  property  property2  JSDocInfo  info  int  noTypeCheckSection  nullCount  typedCount  unknownCount  TypeValidator  validator  ObjectType  type  AbstractCompiler  compiler  JSTypeRegistry  typeRegistry  boolean  enterSection  externs  inExterns  report  reportMissingProperties  typeable  Scope  outerScope  topScope  DiagnosticType  BAD_DELETE  BAD_IMPLEMENTED_TYPE  BIT_OPERATION  CONFLICTING_EXTENDED_TYPE  CONFLICTING_IMPLEMENTED_TYPE  CONSTRUCTOR_NOT_CALLABLE  DETERMINISTIC_TEST  DETERMINISTIC_TEST_NO_RESULT  ENUM_DUP  ENUM_NOT_CONSTANT  EXPECTED_THIS_TYPE  FUNCTION_MASKS_VARIABLE  HIDDEN_INTERFACE_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY_MISMATCH  ILLEGAL_IMPLICIT_CAST  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE  INEXISTENT_ENUM_ELEMENT  INEXISTENT_PROPERTY  INTERFACE_FUNCTION_NOT_EMPTY  INTERFACE_METHOD_OVERRIDE  INVALID_INTERFACE_MEMBER_DECLARATION  MULTIPLE_VAR_DEF  NOT_A_CONSTRUCTOR  NOT_CALLABLE  UNEXPECTED_TOKEN  UNKNOWN_EXPR_TYPE  UNKNOWN_OVERRIDE  UNRESOLVED_TYPE  WRONG_ARGUMENT_COUNT  diagnosticType  InferJSDocInfo  inferJSDocInfo  	projects/Closure66/src/com/google/javascript/jscomp/TypeCheck.java	0.21320071635561041	939	939	2	replace	if(leftType!=  null)  {  JSType  rightType  =  getJSType(leftChild);  if(validator.expectCanAssignTo(  t,  assign,  leftType,   "assignment   "))  {  ensureTyped(t,  assign,  rightType);  }	  JSType    rightType    =    getJSType(leftChild);    	non-compiled	[CE]  orphaned  case	38	None	replace
155	[BUG]  [BUGGY]  if(leftType  ==  null)  {  JSType  rightType  =  getJSType(leftChild);  if(validator.expectCanAssignTo(  t,  assign,  leftType,   "assignment   "))  {  return;  }  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]      Var  var  =  t.getScope().getVar(lvalue.getString());  if  (var  !=  null)  {  if  (var.isTypeInferred())  {  return;  }  }  }  JSType  leftType  =  getJSType(lvalue);      [BUGGY]  if(leftType  ==  null)  {  JSType  rightType  =  getJSType(leftChild);  if(validator.expectCanAssignTo(  t,  assign,  leftType,   "assignment   "))  {  return;  }  [BUGGY]      JSType  rightType  =  getJSType(rightChild);  if  (validator.expectCanAssignTo(  t,  assign,  rightType,  leftType,       "assignment     "))  {  ensureTyped(t,  assign,  rightType);  }  else  {  ensureTyped(t,  assign);  }  }  [CLASS]  TypeCheck  [METHOD]  visitAssign  [RETURN_TYPE]  void  NodeTraversal  t  Node  assign  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  jsType  leftType  objectJsType  rightType  rvalueType  NodeTraversal  t  DiagnosticGroup  ALL_DIAGNOSTICS  CheckLevel  reportMissingOverride  reportUnknownTypes  Var  var  Node  assign  lvalue  object  object2  rightChild  rvalue  FunctionType  functionType  ScopeCreator  scopeCreator  String  OVERRIDING_PROTOTYPE_WITH_NON_OBJECT  functionPrivateName  message  property  property2  JSDocInfo  info  int  noTypeCheckSection  nullCount  typedCount  unknownCount  TypeValidator  validator  ObjectType  type  AbstractCompiler  compiler  JSTypeRegistry  typeRegistry  boolean  enterSection  externs  inExterns  report  reportMissingProperties  typeable  Scope  outerScope  topScope  DiagnosticType  BAD_DELETE  BAD_IMPLEMENTED_TYPE  BIT_OPERATION  CONFLICTING_EXTENDED_TYPE  CONFLICTING_IMPLEMENTED_TYPE  CONSTRUCTOR_NOT_CALLABLE  DETERMINISTIC_TEST  DETERMINISTIC_TEST_NO_RESULT  ENUM_DUP  ENUM_NOT_CONSTANT  EXPECTED_THIS_TYPE  FUNCTION_MASKS_VARIABLE  HIDDEN_INTERFACE_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY_MISMATCH  ILLEGAL_IMPLICIT_CAST  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE  INEXISTENT_ENUM_ELEMENT  INEXISTENT_PROPERTY  INTERFACE_FUNCTION_NOT_EMPTY  INTERFACE_METHOD_OVERRIDE  INVALID_INTERFACE_MEMBER_DECLARATION  MULTIPLE_VAR_DEF  NOT_A_CONSTRUCTOR  NOT_CALLABLE  UNEXPECTED_TOKEN  UNKNOWN_EXPR_TYPE  UNKNOWN_OVERRIDE  UNRESOLVED_TYPE  WRONG_ARGUMENT_COUNT  diagnosticType  InferJSDocInfo  inferJSDocInfo  	projects/Closure66/src/com/google/javascript/jscomp/TypeCheck.java	0.21320071635561041	939	939	2	replace	if(leftType  ==  null)  {  JSType  rightType  =  getJSType(leftChild);  if(validator.expectCanAssignTo(  t,  assign,  leftType,   "assignment   "))  {  return;  }	  JSType    rightType    =    getJSType(leftChild);    	non-compiled	[CE]  orphaned  case	38	None	replace
156	[BUG]  [BUGGY]  Node  rightChild  =  t.getScope().getOwnScope(lvalue.toString());  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      Var  var  =  t.getScope().getVar(lvalue.getString());  if  (var  !=  null)  {  if  (var.isTypeInferred())  {  return;  }  }  }  JSType  leftType  =  getJSType(lvalue);      [BUGGY]  Node  rightChild  =  t.getScope().getOwnScope(lvalue.toString());  [BUGGY]      JSType  rightType  =  getJSType(rightChild);  if  (validator.expectCanAssignTo(  t,  assign,  rightType,  leftType,       "assignment     "))  {  ensureTyped(t,  assign,  rightType);  }  else  {  ensureTyped(t,  assign);  }  }  [CLASS]  TypeCheck  [METHOD]  visitAssign  [RETURN_TYPE]  void  NodeTraversal  t  Node  assign  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  jsType  leftType  objectJsType  rightType  rvalueType  NodeTraversal  t  DiagnosticGroup  ALL_DIAGNOSTICS  CheckLevel  reportMissingOverride  reportUnknownTypes  Var  var  Node  assign  lvalue  object  object2  rightChild  rvalue  FunctionType  functionType  ScopeCreator  scopeCreator  String  OVERRIDING_PROTOTYPE_WITH_NON_OBJECT  functionPrivateName  message  property  property2  JSDocInfo  info  int  noTypeCheckSection  nullCount  typedCount  unknownCount  TypeValidator  validator  ObjectType  type  AbstractCompiler  compiler  JSTypeRegistry  typeRegistry  boolean  enterSection  externs  inExterns  report  reportMissingProperties  typeable  Scope  outerScope  topScope  DiagnosticType  BAD_DELETE  BAD_IMPLEMENTED_TYPE  BIT_OPERATION  CONFLICTING_EXTENDED_TYPE  CONFLICTING_IMPLEMENTED_TYPE  CONSTRUCTOR_NOT_CALLABLE  DETERMINISTIC_TEST  DETERMINISTIC_TEST_NO_RESULT  ENUM_DUP  ENUM_NOT_CONSTANT  EXPECTED_THIS_TYPE  FUNCTION_MASKS_VARIABLE  HIDDEN_INTERFACE_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY_MISMATCH  ILLEGAL_IMPLICIT_CAST  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE  INEXISTENT_ENUM_ELEMENT  INEXISTENT_PROPERTY  INTERFACE_FUNCTION_NOT_EMPTY  INTERFACE_METHOD_OVERRIDE  INVALID_INTERFACE_MEMBER_DECLARATION  MULTIPLE_VAR_DEF  NOT_A_CONSTRUCTOR  NOT_CALLABLE  UNEXPECTED_TOKEN  UNKNOWN_EXPR_TYPE  UNKNOWN_OVERRIDE  UNRESOLVED_TYPE  WRONG_ARGUMENT_COUNT  diagnosticType  InferJSDocInfo  inferJSDocInfo  	projects/Closure66/src/com/google/javascript/jscomp/TypeCheck.java	0.21320071635561041	939	939	2	replace	Node  rightChild  =  t.getScope().getOwnScope(lvalue.toString());	  Node    rightChild    =    t.getScope().getVar(lvalue.toString());    	non-compiled	[CE]  orphaned  case	11	None	replace
157	[BUG]  [BUGGY]  Node  rightChild  =  t.getRightChild();  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      Var  var  =  t.getScope().getVar(lvalue.getString());  if  (var  !=  null)  {  if  (var.isTypeInferred())  {  return;  }  }  }  JSType  leftType  =  getJSType(lvalue);      [BUGGY]  Node  rightChild  =  t.getRightChild();  [BUGGY]      JSType  rightType  =  getJSType(rightChild);  if  (validator.expectCanAssignTo(  t,  assign,  rightType,  leftType,       "assignment     "))  {  ensureTyped(t,  assign,  rightType);  }  else  {  ensureTyped(t,  assign);  }  }  [CLASS]  TypeCheck  [METHOD]  visitAssign  [RETURN_TYPE]  void  NodeTraversal  t  Node  assign  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  jsType  leftType  objectJsType  rightType  rvalueType  NodeTraversal  t  DiagnosticGroup  ALL_DIAGNOSTICS  CheckLevel  reportMissingOverride  reportUnknownTypes  Var  var  Node  assign  lvalue  object  object2  rightChild  rvalue  FunctionType  functionType  ScopeCreator  scopeCreator  String  OVERRIDING_PROTOTYPE_WITH_NON_OBJECT  functionPrivateName  message  property  property2  JSDocInfo  info  int  noTypeCheckSection  nullCount  typedCount  unknownCount  TypeValidator  validator  ObjectType  type  AbstractCompiler  compiler  JSTypeRegistry  typeRegistry  boolean  enterSection  externs  inExterns  report  reportMissingProperties  typeable  Scope  outerScope  topScope  DiagnosticType  BAD_DELETE  BAD_IMPLEMENTED_TYPE  BIT_OPERATION  CONFLICTING_EXTENDED_TYPE  CONFLICTING_IMPLEMENTED_TYPE  CONSTRUCTOR_NOT_CALLABLE  DETERMINISTIC_TEST  DETERMINISTIC_TEST_NO_RESULT  ENUM_DUP  ENUM_NOT_CONSTANT  EXPECTED_THIS_TYPE  FUNCTION_MASKS_VARIABLE  HIDDEN_INTERFACE_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY_MISMATCH  ILLEGAL_IMPLICIT_CAST  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE  INEXISTENT_ENUM_ELEMENT  INEXISTENT_PROPERTY  INTERFACE_FUNCTION_NOT_EMPTY  INTERFACE_METHOD_OVERRIDE  INVALID_INTERFACE_MEMBER_DECLARATION  MULTIPLE_VAR_DEF  NOT_A_CONSTRUCTOR  NOT_CALLABLE  UNEXPECTED_TOKEN  UNKNOWN_EXPR_TYPE  UNKNOWN_OVERRIDE  UNRESOLVED_TYPE  WRONG_ARGUMENT_COUNT  diagnosticType  InferJSDocInfo  inferJSDocInfo  	projects/Closure66/src/com/google/javascript/jscomp/TypeCheck.java	0.21320071635561041	939	939	2	replace	Node  rightChild  =  t.getRightChild();	  Node    rightChild    =    t.getNext();    	non-compiled	[CE]  orphaned  case	25	None	replace
158	[BUG]  [BUGGY]  Node  rightChild  =  t.getCurrentNode();  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      Var  var  =  t.getScope().getVar(lvalue.getString());  if  (var  !=  null)  {  if  (var.isTypeInferred())  {  return;  }  }  }  JSType  leftType  =  getJSType(lvalue);      [BUGGY]  Node  rightChild  =  t.getCurrentNode();  [BUGGY]      JSType  rightType  =  getJSType(rightChild);  if  (validator.expectCanAssignTo(  t,  assign,  rightType,  leftType,       "assignment     "))  {  ensureTyped(t,  assign,  rightType);  }  else  {  ensureTyped(t,  assign);  }  }  [CLASS]  TypeCheck  [METHOD]  visitAssign  [RETURN_TYPE]  void  NodeTraversal  t  Node  assign  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  jsType  leftType  objectJsType  rightType  rvalueType  NodeTraversal  t  DiagnosticGroup  ALL_DIAGNOSTICS  CheckLevel  reportMissingOverride  reportUnknownTypes  Var  var  Node  assign  lvalue  object  object2  rightChild  rvalue  FunctionType  functionType  ScopeCreator  scopeCreator  String  OVERRIDING_PROTOTYPE_WITH_NON_OBJECT  functionPrivateName  message  property  property2  JSDocInfo  info  int  noTypeCheckSection  nullCount  typedCount  unknownCount  TypeValidator  validator  ObjectType  type  AbstractCompiler  compiler  JSTypeRegistry  typeRegistry  boolean  enterSection  externs  inExterns  report  reportMissingProperties  typeable  Scope  outerScope  topScope  DiagnosticType  BAD_DELETE  BAD_IMPLEMENTED_TYPE  BIT_OPERATION  CONFLICTING_EXTENDED_TYPE  CONFLICTING_IMPLEMENTED_TYPE  CONSTRUCTOR_NOT_CALLABLE  DETERMINISTIC_TEST  DETERMINISTIC_TEST_NO_RESULT  ENUM_DUP  ENUM_NOT_CONSTANT  EXPECTED_THIS_TYPE  FUNCTION_MASKS_VARIABLE  HIDDEN_INTERFACE_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY_MISMATCH  ILLEGAL_IMPLICIT_CAST  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE  INEXISTENT_ENUM_ELEMENT  INEXISTENT_PROPERTY  INTERFACE_FUNCTION_NOT_EMPTY  INTERFACE_METHOD_OVERRIDE  INVALID_INTERFACE_MEMBER_DECLARATION  MULTIPLE_VAR_DEF  NOT_A_CONSTRUCTOR  NOT_CALLABLE  UNEXPECTED_TOKEN  UNKNOWN_EXPR_TYPE  UNKNOWN_OVERRIDE  UNRESOLVED_TYPE  WRONG_ARGUMENT_COUNT  diagnosticType  InferJSDocInfo  inferJSDocInfo  	projects/Closure66/src/com/google/javascript/jscomp/TypeCheck.java	0.21320071635561041	939	939	2	replace	Node  rightChild  =  t.getCurrentNode();	  Node    rightChild    =    t.getNext();    	non-compiled	[CE]  orphaned  case	25	None	replace
159	[BUG]  [BUGGY]  Node  rightChild  =  leftType.replaceChild(null,  assign);  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      Var  var  =  t.getScope().getVar(lvalue.getString());  if  (var  !=  null)  {  if  (var.isTypeInferred())  {  return;  }  }  }  JSType  leftType  =  getJSType(lvalue);      [BUGGY]  Node  rightChild  =  leftType.replaceChild(null,  assign);  [BUGGY]      JSType  rightType  =  getJSType(rightChild);  if  (validator.expectCanAssignTo(  t,  assign,  rightType,  leftType,       "assignment     "))  {  ensureTyped(t,  assign,  rightType);  }  else  {  ensureTyped(t,  assign);  }  }  [CLASS]  TypeCheck  [METHOD]  visitAssign  [RETURN_TYPE]  void  NodeTraversal  t  Node  assign  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  jsType  leftType  objectJsType  rightType  rvalueType  NodeTraversal  t  DiagnosticGroup  ALL_DIAGNOSTICS  CheckLevel  reportMissingOverride  reportUnknownTypes  Var  var  Node  assign  lvalue  object  object2  rightChild  rvalue  FunctionType  functionType  ScopeCreator  scopeCreator  String  OVERRIDING_PROTOTYPE_WITH_NON_OBJECT  functionPrivateName  message  property  property2  JSDocInfo  info  int  noTypeCheckSection  nullCount  typedCount  unknownCount  TypeValidator  validator  ObjectType  type  AbstractCompiler  compiler  JSTypeRegistry  typeRegistry  boolean  enterSection  externs  inExterns  report  reportMissingProperties  typeable  Scope  outerScope  topScope  DiagnosticType  BAD_DELETE  BAD_IMPLEMENTED_TYPE  BIT_OPERATION  CONFLICTING_EXTENDED_TYPE  CONFLICTING_IMPLEMENTED_TYPE  CONSTRUCTOR_NOT_CALLABLE  DETERMINISTIC_TEST  DETERMINISTIC_TEST_NO_RESULT  ENUM_DUP  ENUM_NOT_CONSTANT  EXPECTED_THIS_TYPE  FUNCTION_MASKS_VARIABLE  HIDDEN_INTERFACE_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY_MISMATCH  ILLEGAL_IMPLICIT_CAST  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE  INEXISTENT_ENUM_ELEMENT  INEXISTENT_PROPERTY  INTERFACE_FUNCTION_NOT_EMPTY  INTERFACE_METHOD_OVERRIDE  INVALID_INTERFACE_MEMBER_DECLARATION  MULTIPLE_VAR_DEF  NOT_A_CONSTRUCTOR  NOT_CALLABLE  UNEXPECTED_TOKEN  UNKNOWN_EXPR_TYPE  UNKNOWN_OVERRIDE  UNRESOLVED_TYPE  WRONG_ARGUMENT_COUNT  diagnosticType  InferJSDocInfo  inferJSDocInfo  	projects/Closure66/src/com/google/javascript/jscomp/TypeCheck.java	0.21320071635561041	939	939	2	replace	Node  rightChild  =  leftType.replaceChild(null,  assign);	  Node    rightChild    =    leftType.removeFirstChild();    	non-compiled	[CE]  orphaned  case	43	None	replace
160	[BUG]  [BUGGY]  Node  rightChild  =  leftType!=  null?  getJSType(leftType):  left.getLastChild();  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      Var  var  =  t.getScope().getVar(lvalue.getString());  if  (var  !=  null)  {  if  (var.isTypeInferred())  {  return;  }  }  }  JSType  leftType  =  getJSType(lvalue);      [BUGGY]  Node  rightChild  =  leftType!=  null?  getJSType(leftType):  left.getLastChild();  [BUGGY]      JSType  rightType  =  getJSType(rightChild);  if  (validator.expectCanAssignTo(  t,  assign,  rightType,  leftType,       "assignment     "))  {  ensureTyped(t,  assign,  rightType);  }  else  {  ensureTyped(t,  assign);  }  }  [CLASS]  TypeCheck  [METHOD]  visitAssign  [RETURN_TYPE]  void  NodeTraversal  t  Node  assign  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  jsType  leftType  objectJsType  rightType  rvalueType  NodeTraversal  t  DiagnosticGroup  ALL_DIAGNOSTICS  CheckLevel  reportMissingOverride  reportUnknownTypes  Var  var  Node  assign  lvalue  object  object2  rightChild  rvalue  FunctionType  functionType  ScopeCreator  scopeCreator  String  OVERRIDING_PROTOTYPE_WITH_NON_OBJECT  functionPrivateName  message  property  property2  JSDocInfo  info  int  noTypeCheckSection  nullCount  typedCount  unknownCount  TypeValidator  validator  ObjectType  type  AbstractCompiler  compiler  JSTypeRegistry  typeRegistry  boolean  enterSection  externs  inExterns  report  reportMissingProperties  typeable  Scope  outerScope  topScope  DiagnosticType  BAD_DELETE  BAD_IMPLEMENTED_TYPE  BIT_OPERATION  CONFLICTING_EXTENDED_TYPE  CONFLICTING_IMPLEMENTED_TYPE  CONSTRUCTOR_NOT_CALLABLE  DETERMINISTIC_TEST  DETERMINISTIC_TEST_NO_RESULT  ENUM_DUP  ENUM_NOT_CONSTANT  EXPECTED_THIS_TYPE  FUNCTION_MASKS_VARIABLE  HIDDEN_INTERFACE_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY_MISMATCH  ILLEGAL_IMPLICIT_CAST  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE  INEXISTENT_ENUM_ELEMENT  INEXISTENT_PROPERTY  INTERFACE_FUNCTION_NOT_EMPTY  INTERFACE_METHOD_OVERRIDE  INVALID_INTERFACE_MEMBER_DECLARATION  MULTIPLE_VAR_DEF  NOT_A_CONSTRUCTOR  NOT_CALLABLE  UNEXPECTED_TOKEN  UNKNOWN_EXPR_TYPE  UNKNOWN_OVERRIDE  UNRESOLVED_TYPE  WRONG_ARGUMENT_COUNT  diagnosticType  InferJSDocInfo  inferJSDocInfo  	projects/Closure66/src/com/google/javascript/jscomp/TypeCheck.java	0.21320071635561041	939	939	2	replace	Node  rightChild  =  leftType!=  null?  getJSType(leftType):  left.getLastChild();	  Node    rightChild    =    leftType!=    null?    getJSType(leftType):    leftType.getLastChild();    	non-compiled	[CE]  orphaned  case	40	None	replace
161	[BUG]  [BUGGY]  Node  rightChild  =  leftType!=  null?  getJSType(leftType):  left.getFirstChild();  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      Var  var  =  t.getScope().getVar(lvalue.getString());  if  (var  !=  null)  {  if  (var.isTypeInferred())  {  return;  }  }  }  JSType  leftType  =  getJSType(lvalue);      [BUGGY]  Node  rightChild  =  leftType!=  null?  getJSType(leftType):  left.getFirstChild();  [BUGGY]      JSType  rightType  =  getJSType(rightChild);  if  (validator.expectCanAssignTo(  t,  assign,  rightType,  leftType,       "assignment     "))  {  ensureTyped(t,  assign,  rightType);  }  else  {  ensureTyped(t,  assign);  }  }  [CLASS]  TypeCheck  [METHOD]  visitAssign  [RETURN_TYPE]  void  NodeTraversal  t  Node  assign  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  jsType  leftType  objectJsType  rightType  rvalueType  NodeTraversal  t  DiagnosticGroup  ALL_DIAGNOSTICS  CheckLevel  reportMissingOverride  reportUnknownTypes  Var  var  Node  assign  lvalue  object  object2  rightChild  rvalue  FunctionType  functionType  ScopeCreator  scopeCreator  String  OVERRIDING_PROTOTYPE_WITH_NON_OBJECT  functionPrivateName  message  property  property2  JSDocInfo  info  int  noTypeCheckSection  nullCount  typedCount  unknownCount  TypeValidator  validator  ObjectType  type  AbstractCompiler  compiler  JSTypeRegistry  typeRegistry  boolean  enterSection  externs  inExterns  report  reportMissingProperties  typeable  Scope  outerScope  topScope  DiagnosticType  BAD_DELETE  BAD_IMPLEMENTED_TYPE  BIT_OPERATION  CONFLICTING_EXTENDED_TYPE  CONFLICTING_IMPLEMENTED_TYPE  CONSTRUCTOR_NOT_CALLABLE  DETERMINISTIC_TEST  DETERMINISTIC_TEST_NO_RESULT  ENUM_DUP  ENUM_NOT_CONSTANT  EXPECTED_THIS_TYPE  FUNCTION_MASKS_VARIABLE  HIDDEN_INTERFACE_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY_MISMATCH  ILLEGAL_IMPLICIT_CAST  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE  INEXISTENT_ENUM_ELEMENT  INEXISTENT_PROPERTY  INTERFACE_FUNCTION_NOT_EMPTY  INTERFACE_METHOD_OVERRIDE  INVALID_INTERFACE_MEMBER_DECLARATION  MULTIPLE_VAR_DEF  NOT_A_CONSTRUCTOR  NOT_CALLABLE  UNEXPECTED_TOKEN  UNKNOWN_EXPR_TYPE  UNKNOWN_OVERRIDE  UNRESOLVED_TYPE  WRONG_ARGUMENT_COUNT  diagnosticType  InferJSDocInfo  inferJSDocInfo  	projects/Closure66/src/com/google/javascript/jscomp/TypeCheck.java	0.21320071635561041	939	939	2	replace	Node  rightChild  =  leftType!=  null?  getJSType(leftType):  left.getFirstChild();	  Node    rightChild    =    leftType!=    null?    getJSType(leftType):    leftType.getLastChild();    	non-compiled	[CE]  orphaned  case	40	None	replace
162	[BUG]  [BUGGY]  Node  rightChild  =  t.getScope().getLeastChild().getString();  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      Var  var  =  t.getScope().getVar(lvalue.getString());  if  (var  !=  null)  {  if  (var.isTypeInferred())  {  return;  }  }  }  JSType  leftType  =  getJSType(lvalue);      [BUGGY]  Node  rightChild  =  t.getScope().getLeastChild().getString();  [BUGGY]      JSType  rightType  =  getJSType(rightChild);  if  (validator.expectCanAssignTo(  t,  assign,  rightType,  leftType,       "assignment     "))  {  ensureTyped(t,  assign,  rightType);  }  else  {  ensureTyped(t,  assign);  }  }  [CLASS]  TypeCheck  [METHOD]  visitAssign  [RETURN_TYPE]  void  NodeTraversal  t  Node  assign  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  jsType  leftType  objectJsType  rightType  rvalueType  NodeTraversal  t  DiagnosticGroup  ALL_DIAGNOSTICS  CheckLevel  reportMissingOverride  reportUnknownTypes  Var  var  Node  assign  lvalue  object  object2  rightChild  rvalue  FunctionType  functionType  ScopeCreator  scopeCreator  String  OVERRIDING_PROTOTYPE_WITH_NON_OBJECT  functionPrivateName  message  property  property2  JSDocInfo  info  int  noTypeCheckSection  nullCount  typedCount  unknownCount  TypeValidator  validator  ObjectType  type  AbstractCompiler  compiler  JSTypeRegistry  typeRegistry  boolean  enterSection  externs  inExterns  report  reportMissingProperties  typeable  Scope  outerScope  topScope  DiagnosticType  BAD_DELETE  BAD_IMPLEMENTED_TYPE  BIT_OPERATION  CONFLICTING_EXTENDED_TYPE  CONFLICTING_IMPLEMENTED_TYPE  CONSTRUCTOR_NOT_CALLABLE  DETERMINISTIC_TEST  DETERMINISTIC_TEST_NO_RESULT  ENUM_DUP  ENUM_NOT_CONSTANT  EXPECTED_THIS_TYPE  FUNCTION_MASKS_VARIABLE  HIDDEN_INTERFACE_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY_MISMATCH  ILLEGAL_IMPLICIT_CAST  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE  INEXISTENT_ENUM_ELEMENT  INEXISTENT_PROPERTY  INTERFACE_FUNCTION_NOT_EMPTY  INTERFACE_METHOD_OVERRIDE  INVALID_INTERFACE_MEMBER_DECLARATION  MULTIPLE_VAR_DEF  NOT_A_CONSTRUCTOR  NOT_CALLABLE  UNEXPECTED_TOKEN  UNKNOWN_EXPR_TYPE  UNKNOWN_OVERRIDE  UNRESOLVED_TYPE  WRONG_ARGUMENT_COUNT  diagnosticType  InferJSDocInfo  inferJSDocInfo  	projects/Closure66/src/com/google/javascript/jscomp/TypeCheck.java	0.21320071635561041	939	939	2	replace	Node  rightChild  =  t.getScope().getLeastChild().getString();	  Node    rightChild    =    t.getScope().getLastChild().getString();    	non-compiled	[CE]  orphaned  case	39	None	replace
163	[BUG]  [BUGGY]  Node  rightChild  =  t.getScope().getVar(lvalue.getString(),  leftType  +  1);  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      Var  var  =  t.getScope().getVar(lvalue.getString());  if  (var  !=  null)  {  if  (var.isTypeInferred())  {  return;  }  }  }  JSType  leftType  =  getJSType(lvalue);      [BUGGY]  Node  rightChild  =  t.getScope().getVar(lvalue.getString(),  leftType  +  1);  [BUGGY]      JSType  rightType  =  getJSType(rightChild);  if  (validator.expectCanAssignTo(  t,  assign,  rightType,  leftType,       "assignment     "))  {  ensureTyped(t,  assign,  rightType);  }  else  {  ensureTyped(t,  assign);  }  }  [CLASS]  TypeCheck  [METHOD]  visitAssign  [RETURN_TYPE]  void  NodeTraversal  t  Node  assign  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  jsType  leftType  objectJsType  rightType  rvalueType  NodeTraversal  t  DiagnosticGroup  ALL_DIAGNOSTICS  CheckLevel  reportMissingOverride  reportUnknownTypes  Var  var  Node  assign  lvalue  object  object2  rightChild  rvalue  FunctionType  functionType  ScopeCreator  scopeCreator  String  OVERRIDING_PROTOTYPE_WITH_NON_OBJECT  functionPrivateName  message  property  property2  JSDocInfo  info  int  noTypeCheckSection  nullCount  typedCount  unknownCount  TypeValidator  validator  ObjectType  type  AbstractCompiler  compiler  JSTypeRegistry  typeRegistry  boolean  enterSection  externs  inExterns  report  reportMissingProperties  typeable  Scope  outerScope  topScope  DiagnosticType  BAD_DELETE  BAD_IMPLEMENTED_TYPE  BIT_OPERATION  CONFLICTING_EXTENDED_TYPE  CONFLICTING_IMPLEMENTED_TYPE  CONSTRUCTOR_NOT_CALLABLE  DETERMINISTIC_TEST  DETERMINISTIC_TEST_NO_RESULT  ENUM_DUP  ENUM_NOT_CONSTANT  EXPECTED_THIS_TYPE  FUNCTION_MASKS_VARIABLE  HIDDEN_INTERFACE_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY_MISMATCH  ILLEGAL_IMPLICIT_CAST  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE  INEXISTENT_ENUM_ELEMENT  INEXISTENT_PROPERTY  INTERFACE_FUNCTION_NOT_EMPTY  INTERFACE_METHOD_OVERRIDE  INVALID_INTERFACE_MEMBER_DECLARATION  MULTIPLE_VAR_DEF  NOT_A_CONSTRUCTOR  NOT_CALLABLE  UNEXPECTED_TOKEN  UNKNOWN_EXPR_TYPE  UNKNOWN_OVERRIDE  UNRESOLVED_TYPE  WRONG_ARGUMENT_COUNT  diagnosticType  InferJSDocInfo  inferJSDocInfo  	projects/Closure66/src/com/google/javascript/jscomp/TypeCheck.java	0.21320071635561041	939	939	2	replace	Node  rightChild  =  t.getScope().getVar(lvalue.getString(),  leftType  +  1);	  Node    rightChild    =    t.getScope().getVar(lvalue.getString(),    leftType);    	non-compiled	[CE]  orphaned  case	8	None	replace
164	[BUG]  [BUGGY]  Node  rightChild  =  t.getScope().getVar(leftType.getString(),  object);  [CE]  orphaned  case  [FE]            AssertionFailedError      [CONTEXT]      Var  var  =  t.getScope().getVar(lvalue.getString());  if  (var  !=  null)  {  if  (var.isTypeInferred())  {  return;  }  }  }  JSType  leftType  =  getJSType(lvalue);      [BUGGY]  Node  rightChild  =  t.getScope().getVar(leftType.getString(),  object);  [BUGGY]      JSType  rightType  =  getJSType(rightChild);  if  (validator.expectCanAssignTo(  t,  assign,  rightType,  leftType,       "assignment     "))  {  ensureTyped(t,  assign,  rightType);  }  else  {  ensureTyped(t,  assign);  }  }  [CLASS]  TypeCheck  [METHOD]  visitAssign  [RETURN_TYPE]  void  NodeTraversal  t  Node  assign  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  jsType  leftType  objectJsType  rightType  rvalueType  NodeTraversal  t  DiagnosticGroup  ALL_DIAGNOSTICS  CheckLevel  reportMissingOverride  reportUnknownTypes  Var  var  Node  assign  lvalue  object  object2  rightChild  rvalue  FunctionType  functionType  ScopeCreator  scopeCreator  String  OVERRIDING_PROTOTYPE_WITH_NON_OBJECT  functionPrivateName  message  property  property2  JSDocInfo  info  int  noTypeCheckSection  nullCount  typedCount  unknownCount  TypeValidator  validator  ObjectType  type  AbstractCompiler  compiler  JSTypeRegistry  typeRegistry  boolean  enterSection  externs  inExterns  report  reportMissingProperties  typeable  Scope  outerScope  topScope  DiagnosticType  BAD_DELETE  BAD_IMPLEMENTED_TYPE  BIT_OPERATION  CONFLICTING_EXTENDED_TYPE  CONFLICTING_IMPLEMENTED_TYPE  CONSTRUCTOR_NOT_CALLABLE  DETERMINISTIC_TEST  DETERMINISTIC_TEST_NO_RESULT  ENUM_DUP  ENUM_NOT_CONSTANT  EXPECTED_THIS_TYPE  FUNCTION_MASKS_VARIABLE  HIDDEN_INTERFACE_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY_MISMATCH  ILLEGAL_IMPLICIT_CAST  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE  INEXISTENT_ENUM_ELEMENT  INEXISTENT_PROPERTY  INTERFACE_FUNCTION_NOT_EMPTY  INTERFACE_METHOD_OVERRIDE  INVALID_INTERFACE_MEMBER_DECLARATION  MULTIPLE_VAR_DEF  NOT_A_CONSTRUCTOR  NOT_CALLABLE  UNEXPECTED_TOKEN  UNKNOWN_EXPR_TYPE  UNKNOWN_OVERRIDE  UNRESOLVED_TYPE  WRONG_ARGUMENT_COUNT  diagnosticType  InferJSDocInfo  inferJSDocInfo  	projects/Closure66/src/com/google/javascript/jscomp/TypeCheck.java	0.21320071635561041	939	939	2	replace	Node  rightChild  =  t.getScope().getVar(leftType.getString(),  object);	  Node    rightChild    =    t.getScope().getVar(leftType.getString());    	non-compiled	[CE]  orphaned  case	7	None	replace
165	[BUG]  [BUGGY]  Node  rightChild  =  t.getScope().getVar(leftType.getString(),  objectJsType);  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      Var  var  =  t.getScope().getVar(lvalue.getString());  if  (var  !=  null)  {  if  (var.isTypeInferred())  {  return;  }  }  }  JSType  leftType  =  getJSType(lvalue);      [BUGGY]  Node  rightChild  =  t.getScope().getVar(leftType.getString(),  objectJsType);  [BUGGY]      JSType  rightType  =  getJSType(rightChild);  if  (validator.expectCanAssignTo(  t,  assign,  rightType,  leftType,       "assignment     "))  {  ensureTyped(t,  assign,  rightType);  }  else  {  ensureTyped(t,  assign);  }  }  [CLASS]  TypeCheck  [METHOD]  visitAssign  [RETURN_TYPE]  void  NodeTraversal  t  Node  assign  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  jsType  leftType  objectJsType  rightType  rvalueType  NodeTraversal  t  DiagnosticGroup  ALL_DIAGNOSTICS  CheckLevel  reportMissingOverride  reportUnknownTypes  Var  var  Node  assign  lvalue  object  object2  rightChild  rvalue  FunctionType  functionType  ScopeCreator  scopeCreator  String  OVERRIDING_PROTOTYPE_WITH_NON_OBJECT  functionPrivateName  message  property  property2  JSDocInfo  info  int  noTypeCheckSection  nullCount  typedCount  unknownCount  TypeValidator  validator  ObjectType  type  AbstractCompiler  compiler  JSTypeRegistry  typeRegistry  boolean  enterSection  externs  inExterns  report  reportMissingProperties  typeable  Scope  outerScope  topScope  DiagnosticType  BAD_DELETE  BAD_IMPLEMENTED_TYPE  BIT_OPERATION  CONFLICTING_EXTENDED_TYPE  CONFLICTING_IMPLEMENTED_TYPE  CONSTRUCTOR_NOT_CALLABLE  DETERMINISTIC_TEST  DETERMINISTIC_TEST_NO_RESULT  ENUM_DUP  ENUM_NOT_CONSTANT  EXPECTED_THIS_TYPE  FUNCTION_MASKS_VARIABLE  HIDDEN_INTERFACE_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY_MISMATCH  ILLEGAL_IMPLICIT_CAST  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE  INEXISTENT_ENUM_ELEMENT  INEXISTENT_PROPERTY  INTERFACE_FUNCTION_NOT_EMPTY  INTERFACE_METHOD_OVERRIDE  INVALID_INTERFACE_MEMBER_DECLARATION  MULTIPLE_VAR_DEF  NOT_A_CONSTRUCTOR  NOT_CALLABLE  UNEXPECTED_TOKEN  UNKNOWN_EXPR_TYPE  UNKNOWN_OVERRIDE  UNRESOLVED_TYPE  WRONG_ARGUMENT_COUNT  diagnosticType  InferJSDocInfo  inferJSDocInfo  	projects/Closure66/src/com/google/javascript/jscomp/TypeCheck.java	0.21320071635561041	939	939	2	replace	Node  rightChild  =  t.getScope().getVar(leftType.getString(),  objectJsType);	  Node    rightChild    =    t.getScope().getVar(leftType.getString());    	non-compiled	[CE]  orphaned  case	7	None	replace
166	[BUG]  [BUGGY]  Node  rightChild  =  object.replaceChild(null,  assign);  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      Var  var  =  t.getScope().getVar(lvalue.getString());  if  (var  !=  null)  {  if  (var.isTypeInferred())  {  return;  }  }  }  JSType  leftType  =  getJSType(lvalue);      [BUGGY]  Node  rightChild  =  object.replaceChild(null,  assign);  [BUGGY]      JSType  rightType  =  getJSType(rightChild);  if  (validator.expectCanAssignTo(  t,  assign,  rightType,  leftType,       "assignment     "))  {  ensureTyped(t,  assign,  rightType);  }  else  {  ensureTyped(t,  assign);  }  }  [CLASS]  TypeCheck  [METHOD]  visitAssign  [RETURN_TYPE]  void  NodeTraversal  t  Node  assign  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  jsType  leftType  objectJsType  rightType  rvalueType  NodeTraversal  t  DiagnosticGroup  ALL_DIAGNOSTICS  CheckLevel  reportMissingOverride  reportUnknownTypes  Var  var  Node  assign  lvalue  object  object2  rightChild  rvalue  FunctionType  functionType  ScopeCreator  scopeCreator  String  OVERRIDING_PROTOTYPE_WITH_NON_OBJECT  functionPrivateName  message  property  property2  JSDocInfo  info  int  noTypeCheckSection  nullCount  typedCount  unknownCount  TypeValidator  validator  ObjectType  type  AbstractCompiler  compiler  JSTypeRegistry  typeRegistry  boolean  enterSection  externs  inExterns  report  reportMissingProperties  typeable  Scope  outerScope  topScope  DiagnosticType  BAD_DELETE  BAD_IMPLEMENTED_TYPE  BIT_OPERATION  CONFLICTING_EXTENDED_TYPE  CONFLICTING_IMPLEMENTED_TYPE  CONSTRUCTOR_NOT_CALLABLE  DETERMINISTIC_TEST  DETERMINISTIC_TEST_NO_RESULT  ENUM_DUP  ENUM_NOT_CONSTANT  EXPECTED_THIS_TYPE  FUNCTION_MASKS_VARIABLE  HIDDEN_INTERFACE_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY_MISMATCH  ILLEGAL_IMPLICIT_CAST  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE  INEXISTENT_ENUM_ELEMENT  INEXISTENT_PROPERTY  INTERFACE_FUNCTION_NOT_EMPTY  INTERFACE_METHOD_OVERRIDE  INVALID_INTERFACE_MEMBER_DECLARATION  MULTIPLE_VAR_DEF  NOT_A_CONSTRUCTOR  NOT_CALLABLE  UNEXPECTED_TOKEN  UNKNOWN_EXPR_TYPE  UNKNOWN_OVERRIDE  UNRESOLVED_TYPE  WRONG_ARGUMENT_COUNT  diagnosticType  InferJSDocInfo  inferJSDocInfo  	projects/Closure66/src/com/google/javascript/jscomp/TypeCheck.java	0.21320071635561041	939	939	2	replace	Node  rightChild  =  object.replaceChild(null,  assign);	  Node    rightChild    =    object.removeFirstChild();    	non-compiled	[CE]  orphaned  case	34	None	replace
167	[BUG]  [BUGGY]  Node  rightChild  =  leftType!=  null?  leftType.getNext()  :  var.getString();  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      Var  var  =  t.getScope().getVar(lvalue.getString());  if  (var  !=  null)  {  if  (var.isTypeInferred())  {  return;  }  }  }  JSType  leftType  =  getJSType(lvalue);      [BUGGY]  Node  rightChild  =  leftType!=  null?  leftType.getNext()  :  var.getString();  [BUGGY]      JSType  rightType  =  getJSType(rightChild);  if  (validator.expectCanAssignTo(  t,  assign,  rightType,  leftType,       "assignment     "))  {  ensureTyped(t,  assign,  rightType);  }  else  {  ensureTyped(t,  assign);  }  }  [CLASS]  TypeCheck  [METHOD]  visitAssign  [RETURN_TYPE]  void  NodeTraversal  t  Node  assign  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  jsType  leftType  objectJsType  rightType  rvalueType  NodeTraversal  t  DiagnosticGroup  ALL_DIAGNOSTICS  CheckLevel  reportMissingOverride  reportUnknownTypes  Var  var  Node  assign  lvalue  object  object2  rightChild  rvalue  FunctionType  functionType  ScopeCreator  scopeCreator  String  OVERRIDING_PROTOTYPE_WITH_NON_OBJECT  functionPrivateName  message  property  property2  JSDocInfo  info  int  noTypeCheckSection  nullCount  typedCount  unknownCount  TypeValidator  validator  ObjectType  type  AbstractCompiler  compiler  JSTypeRegistry  typeRegistry  boolean  enterSection  externs  inExterns  report  reportMissingProperties  typeable  Scope  outerScope  topScope  DiagnosticType  BAD_DELETE  BAD_IMPLEMENTED_TYPE  BIT_OPERATION  CONFLICTING_EXTENDED_TYPE  CONFLICTING_IMPLEMENTED_TYPE  CONSTRUCTOR_NOT_CALLABLE  DETERMINISTIC_TEST  DETERMINISTIC_TEST_NO_RESULT  ENUM_DUP  ENUM_NOT_CONSTANT  EXPECTED_THIS_TYPE  FUNCTION_MASKS_VARIABLE  HIDDEN_INTERFACE_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY_MISMATCH  ILLEGAL_IMPLICIT_CAST  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE  INEXISTENT_ENUM_ELEMENT  INEXISTENT_PROPERTY  INTERFACE_FUNCTION_NOT_EMPTY  INTERFACE_METHOD_OVERRIDE  INVALID_INTERFACE_MEMBER_DECLARATION  MULTIPLE_VAR_DEF  NOT_A_CONSTRUCTOR  NOT_CALLABLE  UNEXPECTED_TOKEN  UNKNOWN_EXPR_TYPE  UNKNOWN_OVERRIDE  UNRESOLVED_TYPE  WRONG_ARGUMENT_COUNT  diagnosticType  InferJSDocInfo  inferJSDocInfo  	projects/Closure66/src/com/google/javascript/jscomp/TypeCheck.java	0.21320071635561041	939	939	2	replace	Node  rightChild  =  leftType!=  null?  leftType.getNext()  :  var.getString();	  Node    rightChild    =    leftType!=    null?    leftType.getLastChild()    :    var.getString();    	non-compiled	[CE]  orphaned  case	29	None	replace
168	[BUG]  [BUGGY]  Node  rightChild  =  t.getScope().getRootNode(token);  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      Var  var  =  t.getScope().getVar(lvalue.getString());  if  (var  !=  null)  {  if  (var.isTypeInferred())  {  return;  }  }  }  JSType  leftType  =  getJSType(lvalue);      [BUGGY]  Node  rightChild  =  t.getScope().getRootNode(token);  [BUGGY]      JSType  rightType  =  getJSType(rightChild);  if  (validator.expectCanAssignTo(  t,  assign,  rightType,  leftType,       "assignment     "))  {  ensureTyped(t,  assign,  rightType);  }  else  {  ensureTyped(t,  assign);  }  }  [CLASS]  TypeCheck  [METHOD]  visitAssign  [RETURN_TYPE]  void  NodeTraversal  t  Node  assign  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  jsType  leftType  objectJsType  rightType  rvalueType  NodeTraversal  t  DiagnosticGroup  ALL_DIAGNOSTICS  CheckLevel  reportMissingOverride  reportUnknownTypes  Var  var  Node  assign  lvalue  object  object2  rightChild  rvalue  FunctionType  functionType  ScopeCreator  scopeCreator  String  OVERRIDING_PROTOTYPE_WITH_NON_OBJECT  functionPrivateName  message  property  property2  JSDocInfo  info  int  noTypeCheckSection  nullCount  typedCount  unknownCount  TypeValidator  validator  ObjectType  type  AbstractCompiler  compiler  JSTypeRegistry  typeRegistry  boolean  enterSection  externs  inExterns  report  reportMissingProperties  typeable  Scope  outerScope  topScope  DiagnosticType  BAD_DELETE  BAD_IMPLEMENTED_TYPE  BIT_OPERATION  CONFLICTING_EXTENDED_TYPE  CONFLICTING_IMPLEMENTED_TYPE  CONSTRUCTOR_NOT_CALLABLE  DETERMINISTIC_TEST  DETERMINISTIC_TEST_NO_RESULT  ENUM_DUP  ENUM_NOT_CONSTANT  EXPECTED_THIS_TYPE  FUNCTION_MASKS_VARIABLE  HIDDEN_INTERFACE_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY_MISMATCH  ILLEGAL_IMPLICIT_CAST  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE  INEXISTENT_ENUM_ELEMENT  INEXISTENT_PROPERTY  INTERFACE_FUNCTION_NOT_EMPTY  INTERFACE_METHOD_OVERRIDE  INVALID_INTERFACE_MEMBER_DECLARATION  MULTIPLE_VAR_DEF  NOT_A_CONSTRUCTOR  NOT_CALLABLE  UNEXPECTED_TOKEN  UNKNOWN_EXPR_TYPE  UNKNOWN_OVERRIDE  UNRESOLVED_TYPE  WRONG_ARGUMENT_COUNT  diagnosticType  InferJSDocInfo  inferJSDocInfo  	projects/Closure66/src/com/google/javascript/jscomp/TypeCheck.java	0.21320071635561041	939	939	2	replace	Node  rightChild  =  t.getScope().getRootNode(token);	  Node    rightChild    =    t.getScope().getRootNode(null);    	non-compiled	[CE]  orphaned  case	21	None	replace
169	[BUG]  [BUGGY]  Node  rightChild  =  var.getLowerCase(null);  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      Var  var  =  t.getScope().getVar(lvalue.getString());  if  (var  !=  null)  {  if  (var.isTypeInferred())  {  return;  }  }  }  JSType  leftType  =  getJSType(lvalue);      [BUGGY]  Node  rightChild  =  var.getLowerCase(null);  [BUGGY]      JSType  rightType  =  getJSType(rightChild);  if  (validator.expectCanAssignTo(  t,  assign,  rightType,  leftType,       "assignment     "))  {  ensureTyped(t,  assign,  rightType);  }  else  {  ensureTyped(t,  assign);  }  }  [CLASS]  TypeCheck  [METHOD]  visitAssign  [RETURN_TYPE]  void  NodeTraversal  t  Node  assign  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  jsType  leftType  objectJsType  rightType  rvalueType  NodeTraversal  t  DiagnosticGroup  ALL_DIAGNOSTICS  CheckLevel  reportMissingOverride  reportUnknownTypes  Var  var  Node  assign  lvalue  object  object2  rightChild  rvalue  FunctionType  functionType  ScopeCreator  scopeCreator  String  OVERRIDING_PROTOTYPE_WITH_NON_OBJECT  functionPrivateName  message  property  property2  JSDocInfo  info  int  noTypeCheckSection  nullCount  typedCount  unknownCount  TypeValidator  validator  ObjectType  type  AbstractCompiler  compiler  JSTypeRegistry  typeRegistry  boolean  enterSection  externs  inExterns  report  reportMissingProperties  typeable  Scope  outerScope  topScope  DiagnosticType  BAD_DELETE  BAD_IMPLEMENTED_TYPE  BIT_OPERATION  CONFLICTING_EXTENDED_TYPE  CONFLICTING_IMPLEMENTED_TYPE  CONSTRUCTOR_NOT_CALLABLE  DETERMINISTIC_TEST  DETERMINISTIC_TEST_NO_RESULT  ENUM_DUP  ENUM_NOT_CONSTANT  EXPECTED_THIS_TYPE  FUNCTION_MASKS_VARIABLE  HIDDEN_INTERFACE_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY_MISMATCH  ILLEGAL_IMPLICIT_CAST  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE  INEXISTENT_ENUM_ELEMENT  INEXISTENT_PROPERTY  INTERFACE_FUNCTION_NOT_EMPTY  INTERFACE_METHOD_OVERRIDE  INVALID_INTERFACE_MEMBER_DECLARATION  MULTIPLE_VAR_DEF  NOT_A_CONSTRUCTOR  NOT_CALLABLE  UNEXPECTED_TOKEN  UNKNOWN_EXPR_TYPE  UNKNOWN_OVERRIDE  UNRESOLVED_TYPE  WRONG_ARGUMENT_COUNT  diagnosticType  InferJSDocInfo  inferJSDocInfo  	projects/Closure66/src/com/google/javascript/jscomp/TypeCheck.java	0.21320071635561041	939	939	2	replace	Node  rightChild  =  var.getLowerCase(null);	  Node    rightChild    =    var.getLowerCase();    	non-compiled	[CE]  orphaned  case	30	None	replace
170	[BUG]  [BUGGY]  Node  rightChild  =  t.getScope().getLeastChild(leftType);  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      Var  var  =  t.getScope().getVar(lvalue.getString());  if  (var  !=  null)  {  if  (var.isTypeInferred())  {  return;  }  }  }  JSType  leftType  =  getJSType(lvalue);      [BUGGY]  Node  rightChild  =  t.getScope().getLeastChild(leftType);  [BUGGY]      JSType  rightType  =  getJSType(rightChild);  if  (validator.expectCanAssignTo(  t,  assign,  rightType,  leftType,       "assignment     "))  {  ensureTyped(t,  assign,  rightType);  }  else  {  ensureTyped(t,  assign);  }  }  [CLASS]  TypeCheck  [METHOD]  visitAssign  [RETURN_TYPE]  void  NodeTraversal  t  Node  assign  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  jsType  leftType  objectJsType  rightType  rvalueType  NodeTraversal  t  DiagnosticGroup  ALL_DIAGNOSTICS  CheckLevel  reportMissingOverride  reportUnknownTypes  Var  var  Node  assign  lvalue  object  object2  rightChild  rvalue  FunctionType  functionType  ScopeCreator  scopeCreator  String  OVERRIDING_PROTOTYPE_WITH_NON_OBJECT  functionPrivateName  message  property  property2  JSDocInfo  info  int  noTypeCheckSection  nullCount  typedCount  unknownCount  TypeValidator  validator  ObjectType  type  AbstractCompiler  compiler  JSTypeRegistry  typeRegistry  boolean  enterSection  externs  inExterns  report  reportMissingProperties  typeable  Scope  outerScope  topScope  DiagnosticType  BAD_DELETE  BAD_IMPLEMENTED_TYPE  BIT_OPERATION  CONFLICTING_EXTENDED_TYPE  CONFLICTING_IMPLEMENTED_TYPE  CONSTRUCTOR_NOT_CALLABLE  DETERMINISTIC_TEST  DETERMINISTIC_TEST_NO_RESULT  ENUM_DUP  ENUM_NOT_CONSTANT  EXPECTED_THIS_TYPE  FUNCTION_MASKS_VARIABLE  HIDDEN_INTERFACE_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY_MISMATCH  ILLEGAL_IMPLICIT_CAST  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE  INEXISTENT_ENUM_ELEMENT  INEXISTENT_PROPERTY  INTERFACE_FUNCTION_NOT_EMPTY  INTERFACE_METHOD_OVERRIDE  INVALID_INTERFACE_MEMBER_DECLARATION  MULTIPLE_VAR_DEF  NOT_A_CONSTRUCTOR  NOT_CALLABLE  UNEXPECTED_TOKEN  UNKNOWN_EXPR_TYPE  UNKNOWN_OVERRIDE  UNRESOLVED_TYPE  WRONG_ARGUMENT_COUNT  diagnosticType  InferJSDocInfo  inferJSDocInfo  	projects/Closure66/src/com/google/javascript/jscomp/TypeCheck.java	0.21320071635561041	939	939	2	replace	Node  rightChild  =  t.getScope().getLeastChild(leftType);	  Node    rightChild    =    t.getScope().getLeastChild();    	non-compiled	[CE]  orphaned  case	4	None	replace
171	[BUG]  [BUGGY]  Node  rightChild  =  object.getParent();  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      Var  var  =  t.getScope().getVar(lvalue.getString());  if  (var  !=  null)  {  if  (var.isTypeInferred())  {  return;  }  }  }  JSType  leftType  =  getJSType(lvalue);      [BUGGY]  Node  rightChild  =  object.getParent();  [BUGGY]      JSType  rightType  =  getJSType(rightChild);  if  (validator.expectCanAssignTo(  t,  assign,  rightType,  leftType,       "assignment     "))  {  ensureTyped(t,  assign,  rightType);  }  else  {  ensureTyped(t,  assign);  }  }  [CLASS]  TypeCheck  [METHOD]  visitAssign  [RETURN_TYPE]  void  NodeTraversal  t  Node  assign  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  jsType  leftType  objectJsType  rightType  rvalueType  NodeTraversal  t  DiagnosticGroup  ALL_DIAGNOSTICS  CheckLevel  reportMissingOverride  reportUnknownTypes  Var  var  Node  assign  lvalue  object  object2  rightChild  rvalue  FunctionType  functionType  ScopeCreator  scopeCreator  String  OVERRIDING_PROTOTYPE_WITH_NON_OBJECT  functionPrivateName  message  property  property2  JSDocInfo  info  int  noTypeCheckSection  nullCount  typedCount  unknownCount  TypeValidator  validator  ObjectType  type  AbstractCompiler  compiler  JSTypeRegistry  typeRegistry  boolean  enterSection  externs  inExterns  report  reportMissingProperties  typeable  Scope  outerScope  topScope  DiagnosticType  BAD_DELETE  BAD_IMPLEMENTED_TYPE  BIT_OPERATION  CONFLICTING_EXTENDED_TYPE  CONFLICTING_IMPLEMENTED_TYPE  CONSTRUCTOR_NOT_CALLABLE  DETERMINISTIC_TEST  DETERMINISTIC_TEST_NO_RESULT  ENUM_DUP  ENUM_NOT_CONSTANT  EXPECTED_THIS_TYPE  FUNCTION_MASKS_VARIABLE  HIDDEN_INTERFACE_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY_MISMATCH  ILLEGAL_IMPLICIT_CAST  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE  INEXISTENT_ENUM_ELEMENT  INEXISTENT_PROPERTY  INTERFACE_FUNCTION_NOT_EMPTY  INTERFACE_METHOD_OVERRIDE  INVALID_INTERFACE_MEMBER_DECLARATION  MULTIPLE_VAR_DEF  NOT_A_CONSTRUCTOR  NOT_CALLABLE  UNEXPECTED_TOKEN  UNKNOWN_EXPR_TYPE  UNKNOWN_OVERRIDE  UNRESOLVED_TYPE  WRONG_ARGUMENT_COUNT  diagnosticType  InferJSDocInfo  inferJSDocInfo  	projects/Closure66/src/com/google/javascript/jscomp/TypeCheck.java	0.21320071635561041	939	939	2	replace	Node  rightChild  =  object.getParent();	  Node    rightChild    =    object.getNext();    	non-compiled	[CE]  orphaned  case	35	None	replace
172	[BUG]  [BUGGY]  Node  rightChild  =  object.getRightChild();  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      Var  var  =  t.getScope().getVar(lvalue.getString());  if  (var  !=  null)  {  if  (var.isTypeInferred())  {  return;  }  }  }  JSType  leftType  =  getJSType(lvalue);      [BUGGY]  Node  rightChild  =  object.getRightChild();  [BUGGY]      JSType  rightType  =  getJSType(rightChild);  if  (validator.expectCanAssignTo(  t,  assign,  rightType,  leftType,       "assignment     "))  {  ensureTyped(t,  assign,  rightType);  }  else  {  ensureTyped(t,  assign);  }  }  [CLASS]  TypeCheck  [METHOD]  visitAssign  [RETURN_TYPE]  void  NodeTraversal  t  Node  assign  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  jsType  leftType  objectJsType  rightType  rvalueType  NodeTraversal  t  DiagnosticGroup  ALL_DIAGNOSTICS  CheckLevel  reportMissingOverride  reportUnknownTypes  Var  var  Node  assign  lvalue  object  object2  rightChild  rvalue  FunctionType  functionType  ScopeCreator  scopeCreator  String  OVERRIDING_PROTOTYPE_WITH_NON_OBJECT  functionPrivateName  message  property  property2  JSDocInfo  info  int  noTypeCheckSection  nullCount  typedCount  unknownCount  TypeValidator  validator  ObjectType  type  AbstractCompiler  compiler  JSTypeRegistry  typeRegistry  boolean  enterSection  externs  inExterns  report  reportMissingProperties  typeable  Scope  outerScope  topScope  DiagnosticType  BAD_DELETE  BAD_IMPLEMENTED_TYPE  BIT_OPERATION  CONFLICTING_EXTENDED_TYPE  CONFLICTING_IMPLEMENTED_TYPE  CONSTRUCTOR_NOT_CALLABLE  DETERMINISTIC_TEST  DETERMINISTIC_TEST_NO_RESULT  ENUM_DUP  ENUM_NOT_CONSTANT  EXPECTED_THIS_TYPE  FUNCTION_MASKS_VARIABLE  HIDDEN_INTERFACE_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY_MISMATCH  ILLEGAL_IMPLICIT_CAST  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE  INEXISTENT_ENUM_ELEMENT  INEXISTENT_PROPERTY  INTERFACE_FUNCTION_NOT_EMPTY  INTERFACE_METHOD_OVERRIDE  INVALID_INTERFACE_MEMBER_DECLARATION  MULTIPLE_VAR_DEF  NOT_A_CONSTRUCTOR  NOT_CALLABLE  UNEXPECTED_TOKEN  UNKNOWN_EXPR_TYPE  UNKNOWN_OVERRIDE  UNRESOLVED_TYPE  WRONG_ARGUMENT_COUNT  diagnosticType  InferJSDocInfo  inferJSDocInfo  	projects/Closure66/src/com/google/javascript/jscomp/TypeCheck.java	0.21320071635561041	939	939	2	replace	Node  rightChild  =  object.getRightChild();	  Node    rightChild    =    object.getNext();    	non-compiled	[CE]  orphaned  case	35	None	replace
173	[BUG]  [BUGGY]  Node  rightChild  =  object.restrictByNotNullOrUndefined();  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      Var  var  =  t.getScope().getVar(lvalue.getString());  if  (var  !=  null)  {  if  (var.isTypeInferred())  {  return;  }  }  }  JSType  leftType  =  getJSType(lvalue);      [BUGGY]  Node  rightChild  =  object.restrictByNotNullOrUndefined();  [BUGGY]      JSType  rightType  =  getJSType(rightChild);  if  (validator.expectCanAssignTo(  t,  assign,  rightType,  leftType,       "assignment     "))  {  ensureTyped(t,  assign,  rightType);  }  else  {  ensureTyped(t,  assign);  }  }  [CLASS]  TypeCheck  [METHOD]  visitAssign  [RETURN_TYPE]  void  NodeTraversal  t  Node  assign  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  jsType  leftType  objectJsType  rightType  rvalueType  NodeTraversal  t  DiagnosticGroup  ALL_DIAGNOSTICS  CheckLevel  reportMissingOverride  reportUnknownTypes  Var  var  Node  assign  lvalue  object  object2  rightChild  rvalue  FunctionType  functionType  ScopeCreator  scopeCreator  String  OVERRIDING_PROTOTYPE_WITH_NON_OBJECT  functionPrivateName  message  property  property2  JSDocInfo  info  int  noTypeCheckSection  nullCount  typedCount  unknownCount  TypeValidator  validator  ObjectType  type  AbstractCompiler  compiler  JSTypeRegistry  typeRegistry  boolean  enterSection  externs  inExterns  report  reportMissingProperties  typeable  Scope  outerScope  topScope  DiagnosticType  BAD_DELETE  BAD_IMPLEMENTED_TYPE  BIT_OPERATION  CONFLICTING_EXTENDED_TYPE  CONFLICTING_IMPLEMENTED_TYPE  CONSTRUCTOR_NOT_CALLABLE  DETERMINISTIC_TEST  DETERMINISTIC_TEST_NO_RESULT  ENUM_DUP  ENUM_NOT_CONSTANT  EXPECTED_THIS_TYPE  FUNCTION_MASKS_VARIABLE  HIDDEN_INTERFACE_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY_MISMATCH  ILLEGAL_IMPLICIT_CAST  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE  INEXISTENT_ENUM_ELEMENT  INEXISTENT_PROPERTY  INTERFACE_FUNCTION_NOT_EMPTY  INTERFACE_METHOD_OVERRIDE  INVALID_INTERFACE_MEMBER_DECLARATION  MULTIPLE_VAR_DEF  NOT_A_CONSTRUCTOR  NOT_CALLABLE  UNEXPECTED_TOKEN  UNKNOWN_EXPR_TYPE  UNKNOWN_OVERRIDE  UNRESOLVED_TYPE  WRONG_ARGUMENT_COUNT  diagnosticType  InferJSDocInfo  inferJSDocInfo  	projects/Closure66/src/com/google/javascript/jscomp/TypeCheck.java	0.21320071635561041	939	939	2	replace	Node  rightChild  =  object.restrictByNotNullOrUndefined();	  Node    rightChild    =    leftType.restrictByNotNullOrUndefined();    	non-compiled	[CE]  orphaned  case	44	None	replace
174	[BUG]  [BUGGY]  Node  rightChild  =  leftType.restrictByNotEmptyOrUndefined();  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      Var  var  =  t.getScope().getVar(lvalue.getString());  if  (var  !=  null)  {  if  (var.isTypeInferred())  {  return;  }  }  }  JSType  leftType  =  getJSType(lvalue);      [BUGGY]  Node  rightChild  =  leftType.restrictByNotEmptyOrUndefined();  [BUGGY]      JSType  rightType  =  getJSType(rightChild);  if  (validator.expectCanAssignTo(  t,  assign,  rightType,  leftType,       "assignment     "))  {  ensureTyped(t,  assign,  rightType);  }  else  {  ensureTyped(t,  assign);  }  }  [CLASS]  TypeCheck  [METHOD]  visitAssign  [RETURN_TYPE]  void  NodeTraversal  t  Node  assign  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  jsType  leftType  objectJsType  rightType  rvalueType  NodeTraversal  t  DiagnosticGroup  ALL_DIAGNOSTICS  CheckLevel  reportMissingOverride  reportUnknownTypes  Var  var  Node  assign  lvalue  object  object2  rightChild  rvalue  FunctionType  functionType  ScopeCreator  scopeCreator  String  OVERRIDING_PROTOTYPE_WITH_NON_OBJECT  functionPrivateName  message  property  property2  JSDocInfo  info  int  noTypeCheckSection  nullCount  typedCount  unknownCount  TypeValidator  validator  ObjectType  type  AbstractCompiler  compiler  JSTypeRegistry  typeRegistry  boolean  enterSection  externs  inExterns  report  reportMissingProperties  typeable  Scope  outerScope  topScope  DiagnosticType  BAD_DELETE  BAD_IMPLEMENTED_TYPE  BIT_OPERATION  CONFLICTING_EXTENDED_TYPE  CONFLICTING_IMPLEMENTED_TYPE  CONSTRUCTOR_NOT_CALLABLE  DETERMINISTIC_TEST  DETERMINISTIC_TEST_NO_RESULT  ENUM_DUP  ENUM_NOT_CONSTANT  EXPECTED_THIS_TYPE  FUNCTION_MASKS_VARIABLE  HIDDEN_INTERFACE_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY_MISMATCH  ILLEGAL_IMPLICIT_CAST  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE  INEXISTENT_ENUM_ELEMENT  INEXISTENT_PROPERTY  INTERFACE_FUNCTION_NOT_EMPTY  INTERFACE_METHOD_OVERRIDE  INVALID_INTERFACE_MEMBER_DECLARATION  MULTIPLE_VAR_DEF  NOT_A_CONSTRUCTOR  NOT_CALLABLE  UNEXPECTED_TOKEN  UNKNOWN_EXPR_TYPE  UNKNOWN_OVERRIDE  UNRESOLVED_TYPE  WRONG_ARGUMENT_COUNT  diagnosticType  InferJSDocInfo  inferJSDocInfo  	projects/Closure66/src/com/google/javascript/jscomp/TypeCheck.java	0.21320071635561041	939	939	2	replace	Node  rightChild  =  leftType.restrictByNotEmptyOrUndefined();	  Node    rightChild    =    leftType.restrictByNotNullOrUndefined();    	non-compiled	[CE]  orphaned  case	44	None	replace
175	[BUG]  [BUGGY]  Node  rightChild  =  t.restrictByNotNullOrUndefined();  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      Var  var  =  t.getScope().getVar(lvalue.getString());  if  (var  !=  null)  {  if  (var.isTypeInferred())  {  return;  }  }  }  JSType  leftType  =  getJSType(lvalue);      [BUGGY]  Node  rightChild  =  t.restrictByNotNullOrUndefined();  [BUGGY]      JSType  rightType  =  getJSType(rightChild);  if  (validator.expectCanAssignTo(  t,  assign,  rightType,  leftType,       "assignment     "))  {  ensureTyped(t,  assign,  rightType);  }  else  {  ensureTyped(t,  assign);  }  }  [CLASS]  TypeCheck  [METHOD]  visitAssign  [RETURN_TYPE]  void  NodeTraversal  t  Node  assign  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  jsType  leftType  objectJsType  rightType  rvalueType  NodeTraversal  t  DiagnosticGroup  ALL_DIAGNOSTICS  CheckLevel  reportMissingOverride  reportUnknownTypes  Var  var  Node  assign  lvalue  object  object2  rightChild  rvalue  FunctionType  functionType  ScopeCreator  scopeCreator  String  OVERRIDING_PROTOTYPE_WITH_NON_OBJECT  functionPrivateName  message  property  property2  JSDocInfo  info  int  noTypeCheckSection  nullCount  typedCount  unknownCount  TypeValidator  validator  ObjectType  type  AbstractCompiler  compiler  JSTypeRegistry  typeRegistry  boolean  enterSection  externs  inExterns  report  reportMissingProperties  typeable  Scope  outerScope  topScope  DiagnosticType  BAD_DELETE  BAD_IMPLEMENTED_TYPE  BIT_OPERATION  CONFLICTING_EXTENDED_TYPE  CONFLICTING_IMPLEMENTED_TYPE  CONSTRUCTOR_NOT_CALLABLE  DETERMINISTIC_TEST  DETERMINISTIC_TEST_NO_RESULT  ENUM_DUP  ENUM_NOT_CONSTANT  EXPECTED_THIS_TYPE  FUNCTION_MASKS_VARIABLE  HIDDEN_INTERFACE_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY_MISMATCH  ILLEGAL_IMPLICIT_CAST  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE  INEXISTENT_ENUM_ELEMENT  INEXISTENT_PROPERTY  INTERFACE_FUNCTION_NOT_EMPTY  INTERFACE_METHOD_OVERRIDE  INVALID_INTERFACE_MEMBER_DECLARATION  MULTIPLE_VAR_DEF  NOT_A_CONSTRUCTOR  NOT_CALLABLE  UNEXPECTED_TOKEN  UNKNOWN_EXPR_TYPE  UNKNOWN_OVERRIDE  UNRESOLVED_TYPE  WRONG_ARGUMENT_COUNT  diagnosticType  InferJSDocInfo  inferJSDocInfo  	projects/Closure66/src/com/google/javascript/jscomp/TypeCheck.java	0.21320071635561041	939	939	2	replace	Node  rightChild  =  t.restrictByNotNullOrUndefined();	  Node    rightChild    =    leftType.restrictByNotNullOrUndefined();    	non-compiled	[CE]  orphaned  case	44	None	replace
176	[BUG]  [BUGGY]  Node  rightChild  =  t.getScope().getRootNode(lvalue,  true);  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      Var  var  =  t.getScope().getVar(lvalue.getString());  if  (var  !=  null)  {  if  (var.isTypeInferred())  {  return;  }  }  }  JSType  leftType  =  getJSType(lvalue);      [BUGGY]  Node  rightChild  =  t.getScope().getRootNode(lvalue,  true);  [BUGGY]      JSType  rightType  =  getJSType(rightChild);  if  (validator.expectCanAssignTo(  t,  assign,  rightType,  leftType,       "assignment     "))  {  ensureTyped(t,  assign,  rightType);  }  else  {  ensureTyped(t,  assign);  }  }  [CLASS]  TypeCheck  [METHOD]  visitAssign  [RETURN_TYPE]  void  NodeTraversal  t  Node  assign  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  jsType  leftType  objectJsType  rightType  rvalueType  NodeTraversal  t  DiagnosticGroup  ALL_DIAGNOSTICS  CheckLevel  reportMissingOverride  reportUnknownTypes  Var  var  Node  assign  lvalue  object  object2  rightChild  rvalue  FunctionType  functionType  ScopeCreator  scopeCreator  String  OVERRIDING_PROTOTYPE_WITH_NON_OBJECT  functionPrivateName  message  property  property2  JSDocInfo  info  int  noTypeCheckSection  nullCount  typedCount  unknownCount  TypeValidator  validator  ObjectType  type  AbstractCompiler  compiler  JSTypeRegistry  typeRegistry  boolean  enterSection  externs  inExterns  report  reportMissingProperties  typeable  Scope  outerScope  topScope  DiagnosticType  BAD_DELETE  BAD_IMPLEMENTED_TYPE  BIT_OPERATION  CONFLICTING_EXTENDED_TYPE  CONFLICTING_IMPLEMENTED_TYPE  CONSTRUCTOR_NOT_CALLABLE  DETERMINISTIC_TEST  DETERMINISTIC_TEST_NO_RESULT  ENUM_DUP  ENUM_NOT_CONSTANT  EXPECTED_THIS_TYPE  FUNCTION_MASKS_VARIABLE  HIDDEN_INTERFACE_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY_MISMATCH  ILLEGAL_IMPLICIT_CAST  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE  INEXISTENT_ENUM_ELEMENT  INEXISTENT_PROPERTY  INTERFACE_FUNCTION_NOT_EMPTY  INTERFACE_METHOD_OVERRIDE  INVALID_INTERFACE_MEMBER_DECLARATION  MULTIPLE_VAR_DEF  NOT_A_CONSTRUCTOR  NOT_CALLABLE  UNEXPECTED_TOKEN  UNKNOWN_EXPR_TYPE  UNKNOWN_OVERRIDE  UNRESOLVED_TYPE  WRONG_ARGUMENT_COUNT  diagnosticType  InferJSDocInfo  inferJSDocInfo  	projects/Closure66/src/com/google/javascript/jscomp/TypeCheck.java	0.21320071635561041	939	939	2	replace	Node  rightChild  =  t.getScope().getRootNode(lvalue,  true);	  Node    rightChild    =    t.getScope().getRootNode(true);    	non-compiled	[CE]  orphaned  case	37	None	replace
177	[BUG]  [BUGGY]  Node  rightChild  =  lvalue.getParent();  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      Var  var  =  t.getScope().getVar(lvalue.getString());  if  (var  !=  null)  {  if  (var.isTypeInferred())  {  return;  }  }  }  JSType  leftType  =  getJSType(lvalue);      [BUGGY]  Node  rightChild  =  lvalue.getParent();  [BUGGY]      JSType  rightType  =  getJSType(rightChild);  if  (validator.expectCanAssignTo(  t,  assign,  rightType,  leftType,       "assignment     "))  {  ensureTyped(t,  assign,  rightType);  }  else  {  ensureTyped(t,  assign);  }  }  [CLASS]  TypeCheck  [METHOD]  visitAssign  [RETURN_TYPE]  void  NodeTraversal  t  Node  assign  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  jsType  leftType  objectJsType  rightType  rvalueType  NodeTraversal  t  DiagnosticGroup  ALL_DIAGNOSTICS  CheckLevel  reportMissingOverride  reportUnknownTypes  Var  var  Node  assign  lvalue  object  object2  rightChild  rvalue  FunctionType  functionType  ScopeCreator  scopeCreator  String  OVERRIDING_PROTOTYPE_WITH_NON_OBJECT  functionPrivateName  message  property  property2  JSDocInfo  info  int  noTypeCheckSection  nullCount  typedCount  unknownCount  TypeValidator  validator  ObjectType  type  AbstractCompiler  compiler  JSTypeRegistry  typeRegistry  boolean  enterSection  externs  inExterns  report  reportMissingProperties  typeable  Scope  outerScope  topScope  DiagnosticType  BAD_DELETE  BAD_IMPLEMENTED_TYPE  BIT_OPERATION  CONFLICTING_EXTENDED_TYPE  CONFLICTING_IMPLEMENTED_TYPE  CONSTRUCTOR_NOT_CALLABLE  DETERMINISTIC_TEST  DETERMINISTIC_TEST_NO_RESULT  ENUM_DUP  ENUM_NOT_CONSTANT  EXPECTED_THIS_TYPE  FUNCTION_MASKS_VARIABLE  HIDDEN_INTERFACE_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY_MISMATCH  ILLEGAL_IMPLICIT_CAST  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE  INEXISTENT_ENUM_ELEMENT  INEXISTENT_PROPERTY  INTERFACE_FUNCTION_NOT_EMPTY  INTERFACE_METHOD_OVERRIDE  INVALID_INTERFACE_MEMBER_DECLARATION  MULTIPLE_VAR_DEF  NOT_A_CONSTRUCTOR  NOT_CALLABLE  UNEXPECTED_TOKEN  UNKNOWN_EXPR_TYPE  UNKNOWN_OVERRIDE  UNRESOLVED_TYPE  WRONG_ARGUMENT_COUNT  diagnosticType  InferJSDocInfo  inferJSDocInfo  	projects/Closure66/src/com/google/javascript/jscomp/TypeCheck.java	0.21320071635561041	939	939	2	replace	Node  rightChild  =  lvalue.getParent();	  Node    rightChild    =    lvalue.getNext();    	non-compiled	[CE]  orphaned  case	14	None	replace
178	[BUG]  [BUGGY]  Node  rightChild  =  lvalue.getRight();  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      Var  var  =  t.getScope().getVar(lvalue.getString());  if  (var  !=  null)  {  if  (var.isTypeInferred())  {  return;  }  }  }  JSType  leftType  =  getJSType(lvalue);      [BUGGY]  Node  rightChild  =  lvalue.getRight();  [BUGGY]      JSType  rightType  =  getJSType(rightChild);  if  (validator.expectCanAssignTo(  t,  assign,  rightType,  leftType,       "assignment     "))  {  ensureTyped(t,  assign,  rightType);  }  else  {  ensureTyped(t,  assign);  }  }  [CLASS]  TypeCheck  [METHOD]  visitAssign  [RETURN_TYPE]  void  NodeTraversal  t  Node  assign  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  jsType  leftType  objectJsType  rightType  rvalueType  NodeTraversal  t  DiagnosticGroup  ALL_DIAGNOSTICS  CheckLevel  reportMissingOverride  reportUnknownTypes  Var  var  Node  assign  lvalue  object  object2  rightChild  rvalue  FunctionType  functionType  ScopeCreator  scopeCreator  String  OVERRIDING_PROTOTYPE_WITH_NON_OBJECT  functionPrivateName  message  property  property2  JSDocInfo  info  int  noTypeCheckSection  nullCount  typedCount  unknownCount  TypeValidator  validator  ObjectType  type  AbstractCompiler  compiler  JSTypeRegistry  typeRegistry  boolean  enterSection  externs  inExterns  report  reportMissingProperties  typeable  Scope  outerScope  topScope  DiagnosticType  BAD_DELETE  BAD_IMPLEMENTED_TYPE  BIT_OPERATION  CONFLICTING_EXTENDED_TYPE  CONFLICTING_IMPLEMENTED_TYPE  CONSTRUCTOR_NOT_CALLABLE  DETERMINISTIC_TEST  DETERMINISTIC_TEST_NO_RESULT  ENUM_DUP  ENUM_NOT_CONSTANT  EXPECTED_THIS_TYPE  FUNCTION_MASKS_VARIABLE  HIDDEN_INTERFACE_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY_MISMATCH  ILLEGAL_IMPLICIT_CAST  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE  INEXISTENT_ENUM_ELEMENT  INEXISTENT_PROPERTY  INTERFACE_FUNCTION_NOT_EMPTY  INTERFACE_METHOD_OVERRIDE  INVALID_INTERFACE_MEMBER_DECLARATION  MULTIPLE_VAR_DEF  NOT_A_CONSTRUCTOR  NOT_CALLABLE  UNEXPECTED_TOKEN  UNKNOWN_EXPR_TYPE  UNKNOWN_OVERRIDE  UNRESOLVED_TYPE  WRONG_ARGUMENT_COUNT  diagnosticType  InferJSDocInfo  inferJSDocInfo  	projects/Closure66/src/com/google/javascript/jscomp/TypeCheck.java	0.21320071635561041	939	939	2	replace	Node  rightChild  =  lvalue.getRight();	  Node    rightChild    =    lvalue.getNext();    	non-compiled	[CE]  orphaned  case	14	None	replace
179	[BUG]  [BUGGY]  Node  rightChild  =  leftType.getRightChild();  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      Var  var  =  t.getScope().getVar(lvalue.getString());  if  (var  !=  null)  {  if  (var.isTypeInferred())  {  return;  }  }  }  JSType  leftType  =  getJSType(lvalue);      [BUGGY]  Node  rightChild  =  leftType.getRightChild();  [BUGGY]      JSType  rightType  =  getJSType(rightChild);  if  (validator.expectCanAssignTo(  t,  assign,  rightType,  leftType,       "assignment     "))  {  ensureTyped(t,  assign,  rightType);  }  else  {  ensureTyped(t,  assign);  }  }  [CLASS]  TypeCheck  [METHOD]  visitAssign  [RETURN_TYPE]  void  NodeTraversal  t  Node  assign  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  jsType  leftType  objectJsType  rightType  rvalueType  NodeTraversal  t  DiagnosticGroup  ALL_DIAGNOSTICS  CheckLevel  reportMissingOverride  reportUnknownTypes  Var  var  Node  assign  lvalue  object  object2  rightChild  rvalue  FunctionType  functionType  ScopeCreator  scopeCreator  String  OVERRIDING_PROTOTYPE_WITH_NON_OBJECT  functionPrivateName  message  property  property2  JSDocInfo  info  int  noTypeCheckSection  nullCount  typedCount  unknownCount  TypeValidator  validator  ObjectType  type  AbstractCompiler  compiler  JSTypeRegistry  typeRegistry  boolean  enterSection  externs  inExterns  report  reportMissingProperties  typeable  Scope  outerScope  topScope  DiagnosticType  BAD_DELETE  BAD_IMPLEMENTED_TYPE  BIT_OPERATION  CONFLICTING_EXTENDED_TYPE  CONFLICTING_IMPLEMENTED_TYPE  CONSTRUCTOR_NOT_CALLABLE  DETERMINISTIC_TEST  DETERMINISTIC_TEST_NO_RESULT  ENUM_DUP  ENUM_NOT_CONSTANT  EXPECTED_THIS_TYPE  FUNCTION_MASKS_VARIABLE  HIDDEN_INTERFACE_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY_MISMATCH  ILLEGAL_IMPLICIT_CAST  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE  INEXISTENT_ENUM_ELEMENT  INEXISTENT_PROPERTY  INTERFACE_FUNCTION_NOT_EMPTY  INTERFACE_METHOD_OVERRIDE  INVALID_INTERFACE_MEMBER_DECLARATION  MULTIPLE_VAR_DEF  NOT_A_CONSTRUCTOR  NOT_CALLABLE  UNEXPECTED_TOKEN  UNKNOWN_EXPR_TYPE  UNKNOWN_OVERRIDE  UNRESOLVED_TYPE  WRONG_ARGUMENT_COUNT  diagnosticType  InferJSDocInfo  inferJSDocInfo  	projects/Closure66/src/com/google/javascript/jscomp/TypeCheck.java	0.21320071635561041	939	939	2	replace	Node  rightChild  =  leftType.getRightChild();	  Node    rightChild    =    leftType.getNext();    	non-compiled	[CE]  orphaned  case	27	None	replace
180	[BUG]  [BUGGY]  JSType  rightChild  =  getJSType(rvalue);  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      Var  var  =  t.getScope().getVar(lvalue.getString());  if  (var  !=  null)  {  if  (var.isTypeInferred())  {  return;  }  }  }  JSType  leftType  =  getJSType(lvalue);      [BUGGY]  JSType  rightChild  =  getJSType(rvalue);  [BUGGY]      JSType  rightType  =  getJSType(rightChild);  if  (validator.expectCanAssignTo(  t,  assign,  rightType,  leftType,       "assignment     "))  {  ensureTyped(t,  assign,  rightType);  }  else  {  ensureTyped(t,  assign);  }  }  [CLASS]  TypeCheck  [METHOD]  visitAssign  [RETURN_TYPE]  void  NodeTraversal  t  Node  assign  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  jsType  leftType  objectJsType  rightType  rvalueType  NodeTraversal  t  DiagnosticGroup  ALL_DIAGNOSTICS  CheckLevel  reportMissingOverride  reportUnknownTypes  Var  var  Node  assign  lvalue  object  object2  rightChild  rvalue  FunctionType  functionType  ScopeCreator  scopeCreator  String  OVERRIDING_PROTOTYPE_WITH_NON_OBJECT  functionPrivateName  message  property  property2  JSDocInfo  info  int  noTypeCheckSection  nullCount  typedCount  unknownCount  TypeValidator  validator  ObjectType  type  AbstractCompiler  compiler  JSTypeRegistry  typeRegistry  boolean  enterSection  externs  inExterns  report  reportMissingProperties  typeable  Scope  outerScope  topScope  DiagnosticType  BAD_DELETE  BAD_IMPLEMENTED_TYPE  BIT_OPERATION  CONFLICTING_EXTENDED_TYPE  CONFLICTING_IMPLEMENTED_TYPE  CONSTRUCTOR_NOT_CALLABLE  DETERMINISTIC_TEST  DETERMINISTIC_TEST_NO_RESULT  ENUM_DUP  ENUM_NOT_CONSTANT  EXPECTED_THIS_TYPE  FUNCTION_MASKS_VARIABLE  HIDDEN_INTERFACE_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY_MISMATCH  ILLEGAL_IMPLICIT_CAST  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE  INEXISTENT_ENUM_ELEMENT  INEXISTENT_PROPERTY  INTERFACE_FUNCTION_NOT_EMPTY  INTERFACE_METHOD_OVERRIDE  INVALID_INTERFACE_MEMBER_DECLARATION  MULTIPLE_VAR_DEF  NOT_A_CONSTRUCTOR  NOT_CALLABLE  UNEXPECTED_TOKEN  UNKNOWN_EXPR_TYPE  UNKNOWN_OVERRIDE  UNRESOLVED_TYPE  WRONG_ARGUMENT_COUNT  diagnosticType  InferJSDocInfo  inferJSDocInfo  	projects/Closure66/src/com/google/javascript/jscomp/TypeCheck.java	0.21320071635561041	939	939	2	replace	JSType  rightChild  =  getJSType(rvalue);	  JSType    rightChild    =    getJSType(right);    	non-compiled	[CE]  orphaned  case	15	None	replace
181	[BUG]  [BUGGY]  Node  rightChild  =  leftType!=  null?  t.getScope().getRightChild()  :  leftType.cloneTree();  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      Var  var  =  t.getScope().getVar(lvalue.getString());  if  (var  !=  null)  {  if  (var.isTypeInferred())  {  return;  }  }  }  JSType  leftType  =  getJSType(lvalue);      [BUGGY]  Node  rightChild  =  leftType!=  null?  t.getScope().getRightChild()  :  leftType.cloneTree();  [BUGGY]      JSType  rightType  =  getJSType(rightChild);  if  (validator.expectCanAssignTo(  t,  assign,  rightType,  leftType,       "assignment     "))  {  ensureTyped(t,  assign,  rightType);  }  else  {  ensureTyped(t,  assign);  }  }  [CLASS]  TypeCheck  [METHOD]  visitAssign  [RETURN_TYPE]  void  NodeTraversal  t  Node  assign  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  jsType  leftType  objectJsType  rightType  rvalueType  NodeTraversal  t  DiagnosticGroup  ALL_DIAGNOSTICS  CheckLevel  reportMissingOverride  reportUnknownTypes  Var  var  Node  assign  lvalue  object  object2  rightChild  rvalue  FunctionType  functionType  ScopeCreator  scopeCreator  String  OVERRIDING_PROTOTYPE_WITH_NON_OBJECT  functionPrivateName  message  property  property2  JSDocInfo  info  int  noTypeCheckSection  nullCount  typedCount  unknownCount  TypeValidator  validator  ObjectType  type  AbstractCompiler  compiler  JSTypeRegistry  typeRegistry  boolean  enterSection  externs  inExterns  report  reportMissingProperties  typeable  Scope  outerScope  topScope  DiagnosticType  BAD_DELETE  BAD_IMPLEMENTED_TYPE  BIT_OPERATION  CONFLICTING_EXTENDED_TYPE  CONFLICTING_IMPLEMENTED_TYPE  CONSTRUCTOR_NOT_CALLABLE  DETERMINISTIC_TEST  DETERMINISTIC_TEST_NO_RESULT  ENUM_DUP  ENUM_NOT_CONSTANT  EXPECTED_THIS_TYPE  FUNCTION_MASKS_VARIABLE  HIDDEN_INTERFACE_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY_MISMATCH  ILLEGAL_IMPLICIT_CAST  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE  INEXISTENT_ENUM_ELEMENT  INEXISTENT_PROPERTY  INTERFACE_FUNCTION_NOT_EMPTY  INTERFACE_METHOD_OVERRIDE  INVALID_INTERFACE_MEMBER_DECLARATION  MULTIPLE_VAR_DEF  NOT_A_CONSTRUCTOR  NOT_CALLABLE  UNEXPECTED_TOKEN  UNKNOWN_EXPR_TYPE  UNKNOWN_OVERRIDE  UNRESOLVED_TYPE  WRONG_ARGUMENT_COUNT  diagnosticType  InferJSDocInfo  inferJSDocInfo  	projects/Closure66/src/com/google/javascript/jscomp/TypeCheck.java	0.21320071635561041	939	939	2	replace	Node  rightChild  =  leftType!=  null?  t.getScope().getRightChild()  :  leftType.cloneTree();	  Node    rightChild    =    leftType.cloneTree();    	non-compiled	[CE]  orphaned  case	45	None	replace
182	[BUG]  [BUGGY]  Node  rightChild  =  n.getScope().getVar(lvalue.getString());  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      Var  var  =  t.getScope().getVar(lvalue.getString());  if  (var  !=  null)  {  if  (var.isTypeInferred())  {  return;  }  }  }  JSType  leftType  =  getJSType(lvalue);      [BUGGY]  Node  rightChild  =  n.getScope().getVar(lvalue.getString());  [BUGGY]      JSType  rightType  =  getJSType(rightChild);  if  (validator.expectCanAssignTo(  t,  assign,  rightType,  leftType,       "assignment     "))  {  ensureTyped(t,  assign,  rightType);  }  else  {  ensureTyped(t,  assign);  }  }  [CLASS]  TypeCheck  [METHOD]  visitAssign  [RETURN_TYPE]  void  NodeTraversal  t  Node  assign  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  jsType  leftType  objectJsType  rightType  rvalueType  NodeTraversal  t  DiagnosticGroup  ALL_DIAGNOSTICS  CheckLevel  reportMissingOverride  reportUnknownTypes  Var  var  Node  assign  lvalue  object  object2  rightChild  rvalue  FunctionType  functionType  ScopeCreator  scopeCreator  String  OVERRIDING_PROTOTYPE_WITH_NON_OBJECT  functionPrivateName  message  property  property2  JSDocInfo  info  int  noTypeCheckSection  nullCount  typedCount  unknownCount  TypeValidator  validator  ObjectType  type  AbstractCompiler  compiler  JSTypeRegistry  typeRegistry  boolean  enterSection  externs  inExterns  report  reportMissingProperties  typeable  Scope  outerScope  topScope  DiagnosticType  BAD_DELETE  BAD_IMPLEMENTED_TYPE  BIT_OPERATION  CONFLICTING_EXTENDED_TYPE  CONFLICTING_IMPLEMENTED_TYPE  CONSTRUCTOR_NOT_CALLABLE  DETERMINISTIC_TEST  DETERMINISTIC_TEST_NO_RESULT  ENUM_DUP  ENUM_NOT_CONSTANT  EXPECTED_THIS_TYPE  FUNCTION_MASKS_VARIABLE  HIDDEN_INTERFACE_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY_MISMATCH  ILLEGAL_IMPLICIT_CAST  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE  INEXISTENT_ENUM_ELEMENT  INEXISTENT_PROPERTY  INTERFACE_FUNCTION_NOT_EMPTY  INTERFACE_METHOD_OVERRIDE  INVALID_INTERFACE_MEMBER_DECLARATION  MULTIPLE_VAR_DEF  NOT_A_CONSTRUCTOR  NOT_CALLABLE  UNEXPECTED_TOKEN  UNKNOWN_EXPR_TYPE  UNKNOWN_OVERRIDE  UNRESOLVED_TYPE  WRONG_ARGUMENT_COUNT  diagnosticType  InferJSDocInfo  inferJSDocInfo  	projects/Closure66/src/com/google/javascript/jscomp/TypeCheck.java	0.21320071635561041	939	939	2	replace	Node  rightChild  =  n.getScope().getVar(lvalue.getString());	  Node    rightChild    =    t.getScope().getVar(lvalue.getString()    +    1);    	non-compiled	[CE]  orphaned  case	9	None	replace
183	[BUG]  [BUGGY]  Node  rightChild  =  t.getScope().getRightNode(rightType);  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      Var  var  =  t.getScope().getVar(lvalue.getString());  if  (var  !=  null)  {  if  (var.isTypeInferred())  {  return;  }  }  }  JSType  leftType  =  getJSType(lvalue);      [BUGGY]  Node  rightChild  =  t.getScope().getRightNode(rightType);  [BUGGY]      JSType  rightType  =  getJSType(rightChild);  if  (validator.expectCanAssignTo(  t,  assign,  rightType,  leftType,       "assignment     "))  {  ensureTyped(t,  assign,  rightType);  }  else  {  ensureTyped(t,  assign);  }  }  [CLASS]  TypeCheck  [METHOD]  visitAssign  [RETURN_TYPE]  void  NodeTraversal  t  Node  assign  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  jsType  leftType  objectJsType  rightType  rvalueType  NodeTraversal  t  DiagnosticGroup  ALL_DIAGNOSTICS  CheckLevel  reportMissingOverride  reportUnknownTypes  Var  var  Node  assign  lvalue  object  object2  rightChild  rvalue  FunctionType  functionType  ScopeCreator  scopeCreator  String  OVERRIDING_PROTOTYPE_WITH_NON_OBJECT  functionPrivateName  message  property  property2  JSDocInfo  info  int  noTypeCheckSection  nullCount  typedCount  unknownCount  TypeValidator  validator  ObjectType  type  AbstractCompiler  compiler  JSTypeRegistry  typeRegistry  boolean  enterSection  externs  inExterns  report  reportMissingProperties  typeable  Scope  outerScope  topScope  DiagnosticType  BAD_DELETE  BAD_IMPLEMENTED_TYPE  BIT_OPERATION  CONFLICTING_EXTENDED_TYPE  CONFLICTING_IMPLEMENTED_TYPE  CONSTRUCTOR_NOT_CALLABLE  DETERMINISTIC_TEST  DETERMINISTIC_TEST_NO_RESULT  ENUM_DUP  ENUM_NOT_CONSTANT  EXPECTED_THIS_TYPE  FUNCTION_MASKS_VARIABLE  HIDDEN_INTERFACE_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY_MISMATCH  ILLEGAL_IMPLICIT_CAST  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE  INEXISTENT_ENUM_ELEMENT  INEXISTENT_PROPERTY  INTERFACE_FUNCTION_NOT_EMPTY  INTERFACE_METHOD_OVERRIDE  INVALID_INTERFACE_MEMBER_DECLARATION  MULTIPLE_VAR_DEF  NOT_A_CONSTRUCTOR  NOT_CALLABLE  UNEXPECTED_TOKEN  UNKNOWN_EXPR_TYPE  UNKNOWN_OVERRIDE  UNRESOLVED_TYPE  WRONG_ARGUMENT_COUNT  diagnosticType  InferJSDocInfo  inferJSDocInfo  	projects/Closure66/src/com/google/javascript/jscomp/TypeCheck.java	0.21320071635561041	939	939	2	replace	Node  rightChild  =  t.getScope().getRightNode(rightType);	  Node    rightChild    =    t.getScope().getRightNode();    	non-compiled	[CE]  orphaned  case	18	None	replace
184	[BUG]  [BUGGY]  Node  rightChild  =  t.getScope().getRawParentNode(rvalue);  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      Var  var  =  t.getScope().getVar(lvalue.getString());  if  (var  !=  null)  {  if  (var.isTypeInferred())  {  return;  }  }  }  JSType  leftType  =  getJSType(lvalue);      [BUGGY]  Node  rightChild  =  t.getScope().getRawParentNode(rvalue);  [BUGGY]      JSType  rightType  =  getJSType(rightChild);  if  (validator.expectCanAssignTo(  t,  assign,  rightType,  leftType,       "assignment     "))  {  ensureTyped(t,  assign,  rightType);  }  else  {  ensureTyped(t,  assign);  }  }  [CLASS]  TypeCheck  [METHOD]  visitAssign  [RETURN_TYPE]  void  NodeTraversal  t  Node  assign  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  jsType  leftType  objectJsType  rightType  rvalueType  NodeTraversal  t  DiagnosticGroup  ALL_DIAGNOSTICS  CheckLevel  reportMissingOverride  reportUnknownTypes  Var  var  Node  assign  lvalue  object  object2  rightChild  rvalue  FunctionType  functionType  ScopeCreator  scopeCreator  String  OVERRIDING_PROTOTYPE_WITH_NON_OBJECT  functionPrivateName  message  property  property2  JSDocInfo  info  int  noTypeCheckSection  nullCount  typedCount  unknownCount  TypeValidator  validator  ObjectType  type  AbstractCompiler  compiler  JSTypeRegistry  typeRegistry  boolean  enterSection  externs  inExterns  report  reportMissingProperties  typeable  Scope  outerScope  topScope  DiagnosticType  BAD_DELETE  BAD_IMPLEMENTED_TYPE  BIT_OPERATION  CONFLICTING_EXTENDED_TYPE  CONFLICTING_IMPLEMENTED_TYPE  CONSTRUCTOR_NOT_CALLABLE  DETERMINISTIC_TEST  DETERMINISTIC_TEST_NO_RESULT  ENUM_DUP  ENUM_NOT_CONSTANT  EXPECTED_THIS_TYPE  FUNCTION_MASKS_VARIABLE  HIDDEN_INTERFACE_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY_MISMATCH  ILLEGAL_IMPLICIT_CAST  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE  INEXISTENT_ENUM_ELEMENT  INEXISTENT_PROPERTY  INTERFACE_FUNCTION_NOT_EMPTY  INTERFACE_METHOD_OVERRIDE  INVALID_INTERFACE_MEMBER_DECLARATION  MULTIPLE_VAR_DEF  NOT_A_CONSTRUCTOR  NOT_CALLABLE  UNEXPECTED_TOKEN  UNKNOWN_EXPR_TYPE  UNKNOWN_OVERRIDE  UNRESOLVED_TYPE  WRONG_ARGUMENT_COUNT  diagnosticType  InferJSDocInfo  inferJSDocInfo  	projects/Closure66/src/com/google/javascript/jscomp/TypeCheck.java	0.21320071635561041	939	939	2	replace	Node  rightChild  =  t.getScope().getRawParentNode(rvalue);	  Node    rightChild    =    t.getScope().getRawParentNode();    	non-compiled	[CE]  orphaned  case	23	None	replace
185	[BUG]  [BUGGY]  Node  rightChild  =  t.getScope().getRawParentNode(leftType);  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      Var  var  =  t.getScope().getVar(lvalue.getString());  if  (var  !=  null)  {  if  (var.isTypeInferred())  {  return;  }  }  }  JSType  leftType  =  getJSType(lvalue);      [BUGGY]  Node  rightChild  =  t.getScope().getRawParentNode(leftType);  [BUGGY]      JSType  rightType  =  getJSType(rightChild);  if  (validator.expectCanAssignTo(  t,  assign,  rightType,  leftType,       "assignment     "))  {  ensureTyped(t,  assign,  rightType);  }  else  {  ensureTyped(t,  assign);  }  }  [CLASS]  TypeCheck  [METHOD]  visitAssign  [RETURN_TYPE]  void  NodeTraversal  t  Node  assign  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  jsType  leftType  objectJsType  rightType  rvalueType  NodeTraversal  t  DiagnosticGroup  ALL_DIAGNOSTICS  CheckLevel  reportMissingOverride  reportUnknownTypes  Var  var  Node  assign  lvalue  object  object2  rightChild  rvalue  FunctionType  functionType  ScopeCreator  scopeCreator  String  OVERRIDING_PROTOTYPE_WITH_NON_OBJECT  functionPrivateName  message  property  property2  JSDocInfo  info  int  noTypeCheckSection  nullCount  typedCount  unknownCount  TypeValidator  validator  ObjectType  type  AbstractCompiler  compiler  JSTypeRegistry  typeRegistry  boolean  enterSection  externs  inExterns  report  reportMissingProperties  typeable  Scope  outerScope  topScope  DiagnosticType  BAD_DELETE  BAD_IMPLEMENTED_TYPE  BIT_OPERATION  CONFLICTING_EXTENDED_TYPE  CONFLICTING_IMPLEMENTED_TYPE  CONSTRUCTOR_NOT_CALLABLE  DETERMINISTIC_TEST  DETERMINISTIC_TEST_NO_RESULT  ENUM_DUP  ENUM_NOT_CONSTANT  EXPECTED_THIS_TYPE  FUNCTION_MASKS_VARIABLE  HIDDEN_INTERFACE_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY_MISMATCH  ILLEGAL_IMPLICIT_CAST  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE  INEXISTENT_ENUM_ELEMENT  INEXISTENT_PROPERTY  INTERFACE_FUNCTION_NOT_EMPTY  INTERFACE_METHOD_OVERRIDE  INVALID_INTERFACE_MEMBER_DECLARATION  MULTIPLE_VAR_DEF  NOT_A_CONSTRUCTOR  NOT_CALLABLE  UNEXPECTED_TOKEN  UNKNOWN_EXPR_TYPE  UNKNOWN_OVERRIDE  UNRESOLVED_TYPE  WRONG_ARGUMENT_COUNT  diagnosticType  InferJSDocInfo  inferJSDocInfo  	projects/Closure66/src/com/google/javascript/jscomp/TypeCheck.java	0.21320071635561041	939	939	2	replace	Node  rightChild  =  t.getScope().getRawParentNode(leftType);	  Node    rightChild    =    t.getScope().getRawParentNode();    	non-compiled	[CE]  orphaned  case	23	None	replace
186	[BUG]  [BUGGY]  Node  rightChild  =  t.getScope().getOwnScope(lvalue);  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      Var  var  =  t.getScope().getVar(lvalue.getString());  if  (var  !=  null)  {  if  (var.isTypeInferred())  {  return;  }  }  }  JSType  leftType  =  getJSType(lvalue);      [BUGGY]  Node  rightChild  =  t.getScope().getOwnScope(lvalue);  [BUGGY]      JSType  rightType  =  getJSType(rightChild);  if  (validator.expectCanAssignTo(  t,  assign,  rightType,  leftType,       "assignment     "))  {  ensureTyped(t,  assign,  rightType);  }  else  {  ensureTyped(t,  assign);  }  }  [CLASS]  TypeCheck  [METHOD]  visitAssign  [RETURN_TYPE]  void  NodeTraversal  t  Node  assign  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  jsType  leftType  objectJsType  rightType  rvalueType  NodeTraversal  t  DiagnosticGroup  ALL_DIAGNOSTICS  CheckLevel  reportMissingOverride  reportUnknownTypes  Var  var  Node  assign  lvalue  object  object2  rightChild  rvalue  FunctionType  functionType  ScopeCreator  scopeCreator  String  OVERRIDING_PROTOTYPE_WITH_NON_OBJECT  functionPrivateName  message  property  property2  JSDocInfo  info  int  noTypeCheckSection  nullCount  typedCount  unknownCount  TypeValidator  validator  ObjectType  type  AbstractCompiler  compiler  JSTypeRegistry  typeRegistry  boolean  enterSection  externs  inExterns  report  reportMissingProperties  typeable  Scope  outerScope  topScope  DiagnosticType  BAD_DELETE  BAD_IMPLEMENTED_TYPE  BIT_OPERATION  CONFLICTING_EXTENDED_TYPE  CONFLICTING_IMPLEMENTED_TYPE  CONSTRUCTOR_NOT_CALLABLE  DETERMINISTIC_TEST  DETERMINISTIC_TEST_NO_RESULT  ENUM_DUP  ENUM_NOT_CONSTANT  EXPECTED_THIS_TYPE  FUNCTION_MASKS_VARIABLE  HIDDEN_INTERFACE_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY_MISMATCH  ILLEGAL_IMPLICIT_CAST  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE  INEXISTENT_ENUM_ELEMENT  INEXISTENT_PROPERTY  INTERFACE_FUNCTION_NOT_EMPTY  INTERFACE_METHOD_OVERRIDE  INVALID_INTERFACE_MEMBER_DECLARATION  MULTIPLE_VAR_DEF  NOT_A_CONSTRUCTOR  NOT_CALLABLE  UNEXPECTED_TOKEN  UNKNOWN_EXPR_TYPE  UNKNOWN_OVERRIDE  UNRESOLVED_TYPE  WRONG_ARGUMENT_COUNT  diagnosticType  InferJSDocInfo  inferJSDocInfo  	projects/Closure66/src/com/google/javascript/jscomp/TypeCheck.java	0.21320071635561041	939	939	2	replace	Node  rightChild  =  t.getScope().getOwnScope(lvalue);	  Node    rightChild    =    t.getScope().getParent();    	non-compiled	[CE]  orphaned  case	5	None	replace
187	[BUG]  [BUGGY]  Node  rightChild  =  t.getScope().getLastChild().getFirstChild();  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      Var  var  =  t.getScope().getVar(lvalue.getString());  if  (var  !=  null)  {  if  (var.isTypeInferred())  {  return;  }  }  }  JSType  leftType  =  getJSType(lvalue);      [BUGGY]  Node  rightChild  =  t.getScope().getLastChild().getFirstChild();  [BUGGY]      JSType  rightType  =  getJSType(rightChild);  if  (validator.expectCanAssignTo(  t,  assign,  rightType,  leftType,       "assignment     "))  {  ensureTyped(t,  assign,  rightType);  }  else  {  ensureTyped(t,  assign);  }  }  [CLASS]  TypeCheck  [METHOD]  visitAssign  [RETURN_TYPE]  void  NodeTraversal  t  Node  assign  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  jsType  leftType  objectJsType  rightType  rvalueType  NodeTraversal  t  DiagnosticGroup  ALL_DIAGNOSTICS  CheckLevel  reportMissingOverride  reportUnknownTypes  Var  var  Node  assign  lvalue  object  object2  rightChild  rvalue  FunctionType  functionType  ScopeCreator  scopeCreator  String  OVERRIDING_PROTOTYPE_WITH_NON_OBJECT  functionPrivateName  message  property  property2  JSDocInfo  info  int  noTypeCheckSection  nullCount  typedCount  unknownCount  TypeValidator  validator  ObjectType  type  AbstractCompiler  compiler  JSTypeRegistry  typeRegistry  boolean  enterSection  externs  inExterns  report  reportMissingProperties  typeable  Scope  outerScope  topScope  DiagnosticType  BAD_DELETE  BAD_IMPLEMENTED_TYPE  BIT_OPERATION  CONFLICTING_EXTENDED_TYPE  CONFLICTING_IMPLEMENTED_TYPE  CONSTRUCTOR_NOT_CALLABLE  DETERMINISTIC_TEST  DETERMINISTIC_TEST_NO_RESULT  ENUM_DUP  ENUM_NOT_CONSTANT  EXPECTED_THIS_TYPE  FUNCTION_MASKS_VARIABLE  HIDDEN_INTERFACE_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY_MISMATCH  ILLEGAL_IMPLICIT_CAST  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE  INEXISTENT_ENUM_ELEMENT  INEXISTENT_PROPERTY  INTERFACE_FUNCTION_NOT_EMPTY  INTERFACE_METHOD_OVERRIDE  INVALID_INTERFACE_MEMBER_DECLARATION  MULTIPLE_VAR_DEF  NOT_A_CONSTRUCTOR  NOT_CALLABLE  UNEXPECTED_TOKEN  UNKNOWN_EXPR_TYPE  UNKNOWN_OVERRIDE  UNRESOLVED_TYPE  WRONG_ARGUMENT_COUNT  diagnosticType  InferJSDocInfo  inferJSDocInfo  	projects/Closure66/src/com/google/javascript/jscomp/TypeCheck.java	0.21320071635561041	939	939	2	replace	Node  rightChild  =  t.getScope().getLastChild().getFirstChild();	  Node    rightChild    =    t.getScope().getLastChild().getNext();    	non-compiled	[CE]  orphaned  case	6	None	replace
188	[BUG]  [BUGGY]  Node  rightChild  =  t.getScope().getRightChild().getNext();  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]      Var  var  =  t.getScope().getVar(lvalue.getString());  if  (var  !=  null)  {  if  (var.isTypeInferred())  {  return;  }  }  }  JSType  leftType  =  getJSType(lvalue);      [BUGGY]  Node  rightChild  =  t.getScope().getRightChild().getNext();  [BUGGY]      JSType  rightType  =  getJSType(rightChild);  if  (validator.expectCanAssignTo(  t,  assign,  rightType,  leftType,       "assignment     "))  {  ensureTyped(t,  assign,  rightType);  }  else  {  ensureTyped(t,  assign);  }  }  [CLASS]  TypeCheck  [METHOD]  visitAssign  [RETURN_TYPE]  void  NodeTraversal  t  Node  assign  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  jsType  leftType  objectJsType  rightType  rvalueType  NodeTraversal  t  DiagnosticGroup  ALL_DIAGNOSTICS  CheckLevel  reportMissingOverride  reportUnknownTypes  Var  var  Node  assign  lvalue  object  object2  rightChild  rvalue  FunctionType  functionType  ScopeCreator  scopeCreator  String  OVERRIDING_PROTOTYPE_WITH_NON_OBJECT  functionPrivateName  message  property  property2  JSDocInfo  info  int  noTypeCheckSection  nullCount  typedCount  unknownCount  TypeValidator  validator  ObjectType  type  AbstractCompiler  compiler  JSTypeRegistry  typeRegistry  boolean  enterSection  externs  inExterns  report  reportMissingProperties  typeable  Scope  outerScope  topScope  DiagnosticType  BAD_DELETE  BAD_IMPLEMENTED_TYPE  BIT_OPERATION  CONFLICTING_EXTENDED_TYPE  CONFLICTING_IMPLEMENTED_TYPE  CONSTRUCTOR_NOT_CALLABLE  DETERMINISTIC_TEST  DETERMINISTIC_TEST_NO_RESULT  ENUM_DUP  ENUM_NOT_CONSTANT  EXPECTED_THIS_TYPE  FUNCTION_MASKS_VARIABLE  HIDDEN_INTERFACE_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY_MISMATCH  ILLEGAL_IMPLICIT_CAST  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE  INEXISTENT_ENUM_ELEMENT  INEXISTENT_PROPERTY  INTERFACE_FUNCTION_NOT_EMPTY  INTERFACE_METHOD_OVERRIDE  INVALID_INTERFACE_MEMBER_DECLARATION  MULTIPLE_VAR_DEF  NOT_A_CONSTRUCTOR  NOT_CALLABLE  UNEXPECTED_TOKEN  UNKNOWN_EXPR_TYPE  UNKNOWN_OVERRIDE  UNRESOLVED_TYPE  WRONG_ARGUMENT_COUNT  diagnosticType  InferJSDocInfo  inferJSDocInfo  	projects/Closure66/src/com/google/javascript/jscomp/TypeCheck.java	0.21320071635561041	939	939	2	replace	Node  rightChild  =  t.getScope().getRightChild().getNext();	  Node    rightChild    =    t.getScope().getLastChild().getNext();    	non-compiled	[CE]  orphaned  case	6	None	replace
189	[BUG]  [BUGGY]  Node  rightChild  =  t.getScope().getRightChild(rvalue);  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      Var  var  =  t.getScope().getVar(lvalue.getString());  if  (var  !=  null)  {  if  (var.isTypeInferred())  {  return;  }  }  }  JSType  leftType  =  getJSType(lvalue);      [BUGGY]  Node  rightChild  =  t.getScope().getRightChild(rvalue);  [BUGGY]      JSType  rightType  =  getJSType(rightChild);  if  (validator.expectCanAssignTo(  t,  assign,  rightType,  leftType,       "assignment     "))  {  ensureTyped(t,  assign,  rightType);  }  else  {  ensureTyped(t,  assign);  }  }  [CLASS]  TypeCheck  [METHOD]  visitAssign  [RETURN_TYPE]  void  NodeTraversal  t  Node  assign  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  jsType  leftType  objectJsType  rightType  rvalueType  NodeTraversal  t  DiagnosticGroup  ALL_DIAGNOSTICS  CheckLevel  reportMissingOverride  reportUnknownTypes  Var  var  Node  assign  lvalue  object  object2  rightChild  rvalue  FunctionType  functionType  ScopeCreator  scopeCreator  String  OVERRIDING_PROTOTYPE_WITH_NON_OBJECT  functionPrivateName  message  property  property2  JSDocInfo  info  int  noTypeCheckSection  nullCount  typedCount  unknownCount  TypeValidator  validator  ObjectType  type  AbstractCompiler  compiler  JSTypeRegistry  typeRegistry  boolean  enterSection  externs  inExterns  report  reportMissingProperties  typeable  Scope  outerScope  topScope  DiagnosticType  BAD_DELETE  BAD_IMPLEMENTED_TYPE  BIT_OPERATION  CONFLICTING_EXTENDED_TYPE  CONFLICTING_IMPLEMENTED_TYPE  CONSTRUCTOR_NOT_CALLABLE  DETERMINISTIC_TEST  DETERMINISTIC_TEST_NO_RESULT  ENUM_DUP  ENUM_NOT_CONSTANT  EXPECTED_THIS_TYPE  FUNCTION_MASKS_VARIABLE  HIDDEN_INTERFACE_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY_MISMATCH  ILLEGAL_IMPLICIT_CAST  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE  INEXISTENT_ENUM_ELEMENT  INEXISTENT_PROPERTY  INTERFACE_FUNCTION_NOT_EMPTY  INTERFACE_METHOD_OVERRIDE  INVALID_INTERFACE_MEMBER_DECLARATION  MULTIPLE_VAR_DEF  NOT_A_CONSTRUCTOR  NOT_CALLABLE  UNEXPECTED_TOKEN  UNKNOWN_EXPR_TYPE  UNKNOWN_OVERRIDE  UNRESOLVED_TYPE  WRONG_ARGUMENT_COUNT  diagnosticType  InferJSDocInfo  inferJSDocInfo  	projects/Closure66/src/com/google/javascript/jscomp/TypeCheck.java	0.21320071635561041	939	939	2	replace	Node  rightChild  =  t.getScope().getRightChild(rvalue);	  Node    rightChild    =    t.getScope().getRightChild();    	non-compiled	[CE]  orphaned  case	2	None	replace
190	[BUG]  [BUGGY]  Node  rightChild  =  t.getScope().getRawChildren();  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      Var  var  =  t.getScope().getVar(lvalue.getString());  if  (var  !=  null)  {  if  (var.isTypeInferred())  {  return;  }  }  }  JSType  leftType  =  getJSType(lvalue);      [BUGGY]  Node  rightChild  =  t.getScope().getRawChildren();  [BUGGY]      JSType  rightType  =  getJSType(rightChild);  if  (validator.expectCanAssignTo(  t,  assign,  rightType,  leftType,       "assignment     "))  {  ensureTyped(t,  assign,  rightType);  }  else  {  ensureTyped(t,  assign);  }  }  [CLASS]  TypeCheck  [METHOD]  visitAssign  [RETURN_TYPE]  void  NodeTraversal  t  Node  assign  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  jsType  leftType  objectJsType  rightType  rvalueType  NodeTraversal  t  DiagnosticGroup  ALL_DIAGNOSTICS  CheckLevel  reportMissingOverride  reportUnknownTypes  Var  var  Node  assign  lvalue  object  object2  rightChild  rvalue  FunctionType  functionType  ScopeCreator  scopeCreator  String  OVERRIDING_PROTOTYPE_WITH_NON_OBJECT  functionPrivateName  message  property  property2  JSDocInfo  info  int  noTypeCheckSection  nullCount  typedCount  unknownCount  TypeValidator  validator  ObjectType  type  AbstractCompiler  compiler  JSTypeRegistry  typeRegistry  boolean  enterSection  externs  inExterns  report  reportMissingProperties  typeable  Scope  outerScope  topScope  DiagnosticType  BAD_DELETE  BAD_IMPLEMENTED_TYPE  BIT_OPERATION  CONFLICTING_EXTENDED_TYPE  CONFLICTING_IMPLEMENTED_TYPE  CONSTRUCTOR_NOT_CALLABLE  DETERMINISTIC_TEST  DETERMINISTIC_TEST_NO_RESULT  ENUM_DUP  ENUM_NOT_CONSTANT  EXPECTED_THIS_TYPE  FUNCTION_MASKS_VARIABLE  HIDDEN_INTERFACE_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY_MISMATCH  ILLEGAL_IMPLICIT_CAST  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE  INEXISTENT_ENUM_ELEMENT  INEXISTENT_PROPERTY  INTERFACE_FUNCTION_NOT_EMPTY  INTERFACE_METHOD_OVERRIDE  INVALID_INTERFACE_MEMBER_DECLARATION  MULTIPLE_VAR_DEF  NOT_A_CONSTRUCTOR  NOT_CALLABLE  UNEXPECTED_TOKEN  UNKNOWN_EXPR_TYPE  UNKNOWN_OVERRIDE  UNRESOLVED_TYPE  WRONG_ARGUMENT_COUNT  diagnosticType  InferJSDocInfo  inferJSDocInfo  	projects/Closure66/src/com/google/javascript/jscomp/TypeCheck.java	0.21320071635561041	939	939	2	replace	Node  rightChild  =  t.getScope().getRawChildren();	  Node    rightChild    =    t.getScope().getRawNode();    	non-compiled	[CE]  orphaned  case	20	None	replace
191	[BUG]  [BUGGY]  Node  rightChild  =  t.getScope().getRawChild(leftType);  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      Var  var  =  t.getScope().getVar(lvalue.getString());  if  (var  !=  null)  {  if  (var.isTypeInferred())  {  return;  }  }  }  JSType  leftType  =  getJSType(lvalue);      [BUGGY]  Node  rightChild  =  t.getScope().getRawChild(leftType);  [BUGGY]      JSType  rightType  =  getJSType(rightChild);  if  (validator.expectCanAssignTo(  t,  assign,  rightType,  leftType,       "assignment     "))  {  ensureTyped(t,  assign,  rightType);  }  else  {  ensureTyped(t,  assign);  }  }  [CLASS]  TypeCheck  [METHOD]  visitAssign  [RETURN_TYPE]  void  NodeTraversal  t  Node  assign  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  jsType  leftType  objectJsType  rightType  rvalueType  NodeTraversal  t  DiagnosticGroup  ALL_DIAGNOSTICS  CheckLevel  reportMissingOverride  reportUnknownTypes  Var  var  Node  assign  lvalue  object  object2  rightChild  rvalue  FunctionType  functionType  ScopeCreator  scopeCreator  String  OVERRIDING_PROTOTYPE_WITH_NON_OBJECT  functionPrivateName  message  property  property2  JSDocInfo  info  int  noTypeCheckSection  nullCount  typedCount  unknownCount  TypeValidator  validator  ObjectType  type  AbstractCompiler  compiler  JSTypeRegistry  typeRegistry  boolean  enterSection  externs  inExterns  report  reportMissingProperties  typeable  Scope  outerScope  topScope  DiagnosticType  BAD_DELETE  BAD_IMPLEMENTED_TYPE  BIT_OPERATION  CONFLICTING_EXTENDED_TYPE  CONFLICTING_IMPLEMENTED_TYPE  CONSTRUCTOR_NOT_CALLABLE  DETERMINISTIC_TEST  DETERMINISTIC_TEST_NO_RESULT  ENUM_DUP  ENUM_NOT_CONSTANT  EXPECTED_THIS_TYPE  FUNCTION_MASKS_VARIABLE  HIDDEN_INTERFACE_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY_MISMATCH  ILLEGAL_IMPLICIT_CAST  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE  INEXISTENT_ENUM_ELEMENT  INEXISTENT_PROPERTY  INTERFACE_FUNCTION_NOT_EMPTY  INTERFACE_METHOD_OVERRIDE  INVALID_INTERFACE_MEMBER_DECLARATION  MULTIPLE_VAR_DEF  NOT_A_CONSTRUCTOR  NOT_CALLABLE  UNEXPECTED_TOKEN  UNKNOWN_EXPR_TYPE  UNKNOWN_OVERRIDE  UNRESOLVED_TYPE  WRONG_ARGUMENT_COUNT  diagnosticType  InferJSDocInfo  inferJSDocInfo  	projects/Closure66/src/com/google/javascript/jscomp/TypeCheck.java	0.21320071635561041	939	939	2	replace	Node  rightChild  =  t.getScope().getRawChild(leftType);	  Node    rightChild    =    t.getScope().getRawNode();    	non-compiled	[CE]  orphaned  case	20	None	replace
192	[BUG]  [BUGGY]  Node  rightChild  =  leftType!=  null?  lvalue.getLastChild()  :  leftType.getLastChild();  [CE]  orphaned  case  [FE]            AssertionFailedError      [CONTEXT]      Var  var  =  t.getScope().getVar(lvalue.getString());  if  (var  !=  null)  {  if  (var.isTypeInferred())  {  return;  }  }  }  JSType  leftType  =  getJSType(lvalue);      [BUGGY]  Node  rightChild  =  leftType!=  null?  lvalue.getLastChild()  :  leftType.getLastChild();  [BUGGY]      JSType  rightType  =  getJSType(rightChild);  if  (validator.expectCanAssignTo(  t,  assign,  rightType,  leftType,       "assignment     "))  {  ensureTyped(t,  assign,  rightType);  }  else  {  ensureTyped(t,  assign);  }  }  [CLASS]  TypeCheck  [METHOD]  visitAssign  [RETURN_TYPE]  void  NodeTraversal  t  Node  assign  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  jsType  leftType  objectJsType  rightType  rvalueType  NodeTraversal  t  DiagnosticGroup  ALL_DIAGNOSTICS  CheckLevel  reportMissingOverride  reportUnknownTypes  Var  var  Node  assign  lvalue  object  object2  rightChild  rvalue  FunctionType  functionType  ScopeCreator  scopeCreator  String  OVERRIDING_PROTOTYPE_WITH_NON_OBJECT  functionPrivateName  message  property  property2  JSDocInfo  info  int  noTypeCheckSection  nullCount  typedCount  unknownCount  TypeValidator  validator  ObjectType  type  AbstractCompiler  compiler  JSTypeRegistry  typeRegistry  boolean  enterSection  externs  inExterns  report  reportMissingProperties  typeable  Scope  outerScope  topScope  DiagnosticType  BAD_DELETE  BAD_IMPLEMENTED_TYPE  BIT_OPERATION  CONFLICTING_EXTENDED_TYPE  CONFLICTING_IMPLEMENTED_TYPE  CONSTRUCTOR_NOT_CALLABLE  DETERMINISTIC_TEST  DETERMINISTIC_TEST_NO_RESULT  ENUM_DUP  ENUM_NOT_CONSTANT  EXPECTED_THIS_TYPE  FUNCTION_MASKS_VARIABLE  HIDDEN_INTERFACE_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY_MISMATCH  ILLEGAL_IMPLICIT_CAST  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE  INEXISTENT_ENUM_ELEMENT  INEXISTENT_PROPERTY  INTERFACE_FUNCTION_NOT_EMPTY  INTERFACE_METHOD_OVERRIDE  INVALID_INTERFACE_MEMBER_DECLARATION  MULTIPLE_VAR_DEF  NOT_A_CONSTRUCTOR  NOT_CALLABLE  UNEXPECTED_TOKEN  UNKNOWN_EXPR_TYPE  UNKNOWN_OVERRIDE  UNRESOLVED_TYPE  WRONG_ARGUMENT_COUNT  diagnosticType  InferJSDocInfo  inferJSDocInfo  	projects/Closure66/src/com/google/javascript/jscomp/TypeCheck.java	0.21320071635561041	939	939	2	replace	Node  rightChild  =  leftType!=  null?  lvalue.getLastChild()  :  leftType.getLastChild();	  Node    rightChild    =    leftType.getFirstChild();    	non-compiled	[CE]  orphaned  case	26	None	replace
193	[BUG]  [BUGGY]  Node  rightChild  =  leftType  ==  null?  lvalue.getLastChild()  :  leftType.getLastChild();  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      Var  var  =  t.getScope().getVar(lvalue.getString());  if  (var  !=  null)  {  if  (var.isTypeInferred())  {  return;  }  }  }  JSType  leftType  =  getJSType(lvalue);      [BUGGY]  Node  rightChild  =  leftType  ==  null?  lvalue.getLastChild()  :  leftType.getLastChild();  [BUGGY]      JSType  rightType  =  getJSType(rightChild);  if  (validator.expectCanAssignTo(  t,  assign,  rightType,  leftType,       "assignment     "))  {  ensureTyped(t,  assign,  rightType);  }  else  {  ensureTyped(t,  assign);  }  }  [CLASS]  TypeCheck  [METHOD]  visitAssign  [RETURN_TYPE]  void  NodeTraversal  t  Node  assign  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  jsType  leftType  objectJsType  rightType  rvalueType  NodeTraversal  t  DiagnosticGroup  ALL_DIAGNOSTICS  CheckLevel  reportMissingOverride  reportUnknownTypes  Var  var  Node  assign  lvalue  object  object2  rightChild  rvalue  FunctionType  functionType  ScopeCreator  scopeCreator  String  OVERRIDING_PROTOTYPE_WITH_NON_OBJECT  functionPrivateName  message  property  property2  JSDocInfo  info  int  noTypeCheckSection  nullCount  typedCount  unknownCount  TypeValidator  validator  ObjectType  type  AbstractCompiler  compiler  JSTypeRegistry  typeRegistry  boolean  enterSection  externs  inExterns  report  reportMissingProperties  typeable  Scope  outerScope  topScope  DiagnosticType  BAD_DELETE  BAD_IMPLEMENTED_TYPE  BIT_OPERATION  CONFLICTING_EXTENDED_TYPE  CONFLICTING_IMPLEMENTED_TYPE  CONSTRUCTOR_NOT_CALLABLE  DETERMINISTIC_TEST  DETERMINISTIC_TEST_NO_RESULT  ENUM_DUP  ENUM_NOT_CONSTANT  EXPECTED_THIS_TYPE  FUNCTION_MASKS_VARIABLE  HIDDEN_INTERFACE_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY_MISMATCH  ILLEGAL_IMPLICIT_CAST  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE  INEXISTENT_ENUM_ELEMENT  INEXISTENT_PROPERTY  INTERFACE_FUNCTION_NOT_EMPTY  INTERFACE_METHOD_OVERRIDE  INVALID_INTERFACE_MEMBER_DECLARATION  MULTIPLE_VAR_DEF  NOT_A_CONSTRUCTOR  NOT_CALLABLE  UNEXPECTED_TOKEN  UNKNOWN_EXPR_TYPE  UNKNOWN_OVERRIDE  UNRESOLVED_TYPE  WRONG_ARGUMENT_COUNT  diagnosticType  InferJSDocInfo  inferJSDocInfo  	projects/Closure66/src/com/google/javascript/jscomp/TypeCheck.java	0.21320071635561041	939	939	2	replace	Node  rightChild  =  leftType  ==  null?  lvalue.getLastChild()  :  leftType.getLastChild();	  Node    rightChild    =    leftType.getFirstChild();    	non-compiled	[CE]  orphaned  case	26	None	replace
194	[BUG]  [BUGGY]  Node  rightChild  =  t.getScope().getOwnScope(lvalue.getString());  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      Var  var  =  t.getScope().getVar(lvalue.getString());  if  (var  !=  null)  {  if  (var.isTypeInferred())  {  return;  }  }  }  JSType  leftType  =  getJSType(lvalue);      [BUGGY]  Node  rightChild  =  t.getScope().getOwnScope(lvalue.getString());  [BUGGY]      JSType  rightType  =  getJSType(rightChild);  if  (validator.expectCanAssignTo(  t,  assign,  rightType,  leftType,       "assignment     "))  {  ensureTyped(t,  assign,  rightType);  }  else  {  ensureTyped(t,  assign);  }  }  [CLASS]  TypeCheck  [METHOD]  visitAssign  [RETURN_TYPE]  void  NodeTraversal  t  Node  assign  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  jsType  leftType  objectJsType  rightType  rvalueType  NodeTraversal  t  DiagnosticGroup  ALL_DIAGNOSTICS  CheckLevel  reportMissingOverride  reportUnknownTypes  Var  var  Node  assign  lvalue  object  object2  rightChild  rvalue  FunctionType  functionType  ScopeCreator  scopeCreator  String  OVERRIDING_PROTOTYPE_WITH_NON_OBJECT  functionPrivateName  message  property  property2  JSDocInfo  info  int  noTypeCheckSection  nullCount  typedCount  unknownCount  TypeValidator  validator  ObjectType  type  AbstractCompiler  compiler  JSTypeRegistry  typeRegistry  boolean  enterSection  externs  inExterns  report  reportMissingProperties  typeable  Scope  outerScope  topScope  DiagnosticType  BAD_DELETE  BAD_IMPLEMENTED_TYPE  BIT_OPERATION  CONFLICTING_EXTENDED_TYPE  CONFLICTING_IMPLEMENTED_TYPE  CONSTRUCTOR_NOT_CALLABLE  DETERMINISTIC_TEST  DETERMINISTIC_TEST_NO_RESULT  ENUM_DUP  ENUM_NOT_CONSTANT  EXPECTED_THIS_TYPE  FUNCTION_MASKS_VARIABLE  HIDDEN_INTERFACE_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY_MISMATCH  ILLEGAL_IMPLICIT_CAST  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE  INEXISTENT_ENUM_ELEMENT  INEXISTENT_PROPERTY  INTERFACE_FUNCTION_NOT_EMPTY  INTERFACE_METHOD_OVERRIDE  INVALID_INTERFACE_MEMBER_DECLARATION  MULTIPLE_VAR_DEF  NOT_A_CONSTRUCTOR  NOT_CALLABLE  UNEXPECTED_TOKEN  UNKNOWN_EXPR_TYPE  UNKNOWN_OVERRIDE  UNRESOLVED_TYPE  WRONG_ARGUMENT_COUNT  diagnosticType  InferJSDocInfo  inferJSDocInfo  	projects/Closure66/src/com/google/javascript/jscomp/TypeCheck.java	0.21320071635561041	939	939	2	replace	Node  rightChild  =  t.getScope().getOwnScope(lvalue.getString());	  Node    rightChild    =    t.getScope().getVar(rvalue.getString());    	non-compiled	[CE]  orphaned  case	12	None	replace
195	[BUG]  [BUGGY]  Node  rightChild  =  leftType!=  null?  leftType.getLastChild()  :  leftType.getFirstChild();  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      Var  var  =  t.getScope().getVar(lvalue.getString());  if  (var  !=  null)  {  if  (var.isTypeInferred())  {  return;  }  }  }  JSType  leftType  =  getJSType(lvalue);      [BUGGY]  Node  rightChild  =  leftType!=  null?  leftType.getLastChild()  :  leftType.getFirstChild();  [BUGGY]      JSType  rightType  =  getJSType(rightChild);  if  (validator.expectCanAssignTo(  t,  assign,  rightType,  leftType,       "assignment     "))  {  ensureTyped(t,  assign,  rightType);  }  else  {  ensureTyped(t,  assign);  }  }  [CLASS]  TypeCheck  [METHOD]  visitAssign  [RETURN_TYPE]  void  NodeTraversal  t  Node  assign  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  jsType  leftType  objectJsType  rightType  rvalueType  NodeTraversal  t  DiagnosticGroup  ALL_DIAGNOSTICS  CheckLevel  reportMissingOverride  reportUnknownTypes  Var  var  Node  assign  lvalue  object  object2  rightChild  rvalue  FunctionType  functionType  ScopeCreator  scopeCreator  String  OVERRIDING_PROTOTYPE_WITH_NON_OBJECT  functionPrivateName  message  property  property2  JSDocInfo  info  int  noTypeCheckSection  nullCount  typedCount  unknownCount  TypeValidator  validator  ObjectType  type  AbstractCompiler  compiler  JSTypeRegistry  typeRegistry  boolean  enterSection  externs  inExterns  report  reportMissingProperties  typeable  Scope  outerScope  topScope  DiagnosticType  BAD_DELETE  BAD_IMPLEMENTED_TYPE  BIT_OPERATION  CONFLICTING_EXTENDED_TYPE  CONFLICTING_IMPLEMENTED_TYPE  CONSTRUCTOR_NOT_CALLABLE  DETERMINISTIC_TEST  DETERMINISTIC_TEST_NO_RESULT  ENUM_DUP  ENUM_NOT_CONSTANT  EXPECTED_THIS_TYPE  FUNCTION_MASKS_VARIABLE  HIDDEN_INTERFACE_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY_MISMATCH  ILLEGAL_IMPLICIT_CAST  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE  INEXISTENT_ENUM_ELEMENT  INEXISTENT_PROPERTY  INTERFACE_FUNCTION_NOT_EMPTY  INTERFACE_METHOD_OVERRIDE  INVALID_INTERFACE_MEMBER_DECLARATION  MULTIPLE_VAR_DEF  NOT_A_CONSTRUCTOR  NOT_CALLABLE  UNEXPECTED_TOKEN  UNKNOWN_EXPR_TYPE  UNKNOWN_OVERRIDE  UNRESOLVED_TYPE  WRONG_ARGUMENT_COUNT  diagnosticType  InferJSDocInfo  inferJSDocInfo  	projects/Closure66/src/com/google/javascript/jscomp/TypeCheck.java	0.21320071635561041	939	939	2	replace	Node  rightChild  =  leftType!=  null?  leftType.getLastChild()  :  leftType.getFirstChild();	  Node    rightChild    =    leftType!=    null?    leftType.getFirstChild()    :    leftType.getLastChild();    	non-compiled	[CE]  orphaned  case	28	None	replace
196	[BUG]  [BUGGY]  Node  rightChild  =  leftType  ==  null?  leftType.getLastChild()  :  leftType.getFirstChild();  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      Var  var  =  t.getScope().getVar(lvalue.getString());  if  (var  !=  null)  {  if  (var.isTypeInferred())  {  return;  }  }  }  JSType  leftType  =  getJSType(lvalue);      [BUGGY]  Node  rightChild  =  leftType  ==  null?  leftType.getLastChild()  :  leftType.getFirstChild();  [BUGGY]      JSType  rightType  =  getJSType(rightChild);  if  (validator.expectCanAssignTo(  t,  assign,  rightType,  leftType,       "assignment     "))  {  ensureTyped(t,  assign,  rightType);  }  else  {  ensureTyped(t,  assign);  }  }  [CLASS]  TypeCheck  [METHOD]  visitAssign  [RETURN_TYPE]  void  NodeTraversal  t  Node  assign  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  jsType  leftType  objectJsType  rightType  rvalueType  NodeTraversal  t  DiagnosticGroup  ALL_DIAGNOSTICS  CheckLevel  reportMissingOverride  reportUnknownTypes  Var  var  Node  assign  lvalue  object  object2  rightChild  rvalue  FunctionType  functionType  ScopeCreator  scopeCreator  String  OVERRIDING_PROTOTYPE_WITH_NON_OBJECT  functionPrivateName  message  property  property2  JSDocInfo  info  int  noTypeCheckSection  nullCount  typedCount  unknownCount  TypeValidator  validator  ObjectType  type  AbstractCompiler  compiler  JSTypeRegistry  typeRegistry  boolean  enterSection  externs  inExterns  report  reportMissingProperties  typeable  Scope  outerScope  topScope  DiagnosticType  BAD_DELETE  BAD_IMPLEMENTED_TYPE  BIT_OPERATION  CONFLICTING_EXTENDED_TYPE  CONFLICTING_IMPLEMENTED_TYPE  CONSTRUCTOR_NOT_CALLABLE  DETERMINISTIC_TEST  DETERMINISTIC_TEST_NO_RESULT  ENUM_DUP  ENUM_NOT_CONSTANT  EXPECTED_THIS_TYPE  FUNCTION_MASKS_VARIABLE  HIDDEN_INTERFACE_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY_MISMATCH  ILLEGAL_IMPLICIT_CAST  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE  INEXISTENT_ENUM_ELEMENT  INEXISTENT_PROPERTY  INTERFACE_FUNCTION_NOT_EMPTY  INTERFACE_METHOD_OVERRIDE  INVALID_INTERFACE_MEMBER_DECLARATION  MULTIPLE_VAR_DEF  NOT_A_CONSTRUCTOR  NOT_CALLABLE  UNEXPECTED_TOKEN  UNKNOWN_EXPR_TYPE  UNKNOWN_OVERRIDE  UNRESOLVED_TYPE  WRONG_ARGUMENT_COUNT  diagnosticType  InferJSDocInfo  inferJSDocInfo  	projects/Closure66/src/com/google/javascript/jscomp/TypeCheck.java	0.21320071635561041	939	939	2	replace	Node  rightChild  =  leftType  ==  null?  leftType.getLastChild()  :  leftType.getFirstChild();	  Node    rightChild    =    leftType!=    null?    leftType.getFirstChild()    :    leftType.getLastChild();    	non-compiled	[CE]  orphaned  case	28	None	replace
197	[BUG]  [BUGGY]  Node  rightChild  =  t.getScope().getOwnSlot(object);  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      Var  var  =  t.getScope().getVar(lvalue.getString());  if  (var  !=  null)  {  if  (var.isTypeInferred())  {  return;  }  }  }  JSType  leftType  =  getJSType(lvalue);      [BUGGY]  Node  rightChild  =  t.getScope().getOwnSlot(object);  [BUGGY]      JSType  rightType  =  getJSType(rightChild);  if  (validator.expectCanAssignTo(  t,  assign,  rightType,  leftType,       "assignment     "))  {  ensureTyped(t,  assign,  rightType);  }  else  {  ensureTyped(t,  assign);  }  }  [CLASS]  TypeCheck  [METHOD]  visitAssign  [RETURN_TYPE]  void  NodeTraversal  t  Node  assign  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  jsType  leftType  objectJsType  rightType  rvalueType  NodeTraversal  t  DiagnosticGroup  ALL_DIAGNOSTICS  CheckLevel  reportMissingOverride  reportUnknownTypes  Var  var  Node  assign  lvalue  object  object2  rightChild  rvalue  FunctionType  functionType  ScopeCreator  scopeCreator  String  OVERRIDING_PROTOTYPE_WITH_NON_OBJECT  functionPrivateName  message  property  property2  JSDocInfo  info  int  noTypeCheckSection  nullCount  typedCount  unknownCount  TypeValidator  validator  ObjectType  type  AbstractCompiler  compiler  JSTypeRegistry  typeRegistry  boolean  enterSection  externs  inExterns  report  reportMissingProperties  typeable  Scope  outerScope  topScope  DiagnosticType  BAD_DELETE  BAD_IMPLEMENTED_TYPE  BIT_OPERATION  CONFLICTING_EXTENDED_TYPE  CONFLICTING_IMPLEMENTED_TYPE  CONSTRUCTOR_NOT_CALLABLE  DETERMINISTIC_TEST  DETERMINISTIC_TEST_NO_RESULT  ENUM_DUP  ENUM_NOT_CONSTANT  EXPECTED_THIS_TYPE  FUNCTION_MASKS_VARIABLE  HIDDEN_INTERFACE_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY_MISMATCH  ILLEGAL_IMPLICIT_CAST  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE  INEXISTENT_ENUM_ELEMENT  INEXISTENT_PROPERTY  INTERFACE_FUNCTION_NOT_EMPTY  INTERFACE_METHOD_OVERRIDE  INVALID_INTERFACE_MEMBER_DECLARATION  MULTIPLE_VAR_DEF  NOT_A_CONSTRUCTOR  NOT_CALLABLE  UNEXPECTED_TOKEN  UNKNOWN_EXPR_TYPE  UNKNOWN_OVERRIDE  UNRESOLVED_TYPE  WRONG_ARGUMENT_COUNT  diagnosticType  InferJSDocInfo  inferJSDocInfo  	projects/Closure66/src/com/google/javascript/jscomp/TypeCheck.java	0.21320071635561041	939	939	2	replace	Node  rightChild  =  t.getScope().getOwnSlot(object);	  Node    rightChild    =    t.getScope().getOwnSlot(lvalue);    	non-compiled	[CE]  orphaned  case	48	None	replace
198	[BUG]  [BUGGY]  JSType  rightType  =  getJSType(left);  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      Var  var  =  t.getScope().getVar(lvalue.getString());  if  (var  !=  null)  {  if  (var.isTypeInferred())  {  return;  }  }  }  JSType  leftType  =  getJSType(lvalue);      [BUGGY]  JSType  rightType  =  getJSType(left);  [BUGGY]      JSType  rightType  =  getJSType(rightChild);  if  (validator.expectCanAssignTo(  t,  assign,  rightType,  leftType,       "assignment     "))  {  ensureTyped(t,  assign,  rightType);  }  else  {  ensureTyped(t,  assign);  }  }  [CLASS]  TypeCheck  [METHOD]  visitAssign  [RETURN_TYPE]  void  NodeTraversal  t  Node  assign  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  jsType  leftType  objectJsType  rightType  rvalueType  NodeTraversal  t  DiagnosticGroup  ALL_DIAGNOSTICS  CheckLevel  reportMissingOverride  reportUnknownTypes  Var  var  Node  assign  lvalue  object  object2  rightChild  rvalue  FunctionType  functionType  ScopeCreator  scopeCreator  String  OVERRIDING_PROTOTYPE_WITH_NON_OBJECT  functionPrivateName  message  property  property2  JSDocInfo  info  int  noTypeCheckSection  nullCount  typedCount  unknownCount  TypeValidator  validator  ObjectType  type  AbstractCompiler  compiler  JSTypeRegistry  typeRegistry  boolean  enterSection  externs  inExterns  report  reportMissingProperties  typeable  Scope  outerScope  topScope  DiagnosticType  BAD_DELETE  BAD_IMPLEMENTED_TYPE  BIT_OPERATION  CONFLICTING_EXTENDED_TYPE  CONFLICTING_IMPLEMENTED_TYPE  CONSTRUCTOR_NOT_CALLABLE  DETERMINISTIC_TEST  DETERMINISTIC_TEST_NO_RESULT  ENUM_DUP  ENUM_NOT_CONSTANT  EXPECTED_THIS_TYPE  FUNCTION_MASKS_VARIABLE  HIDDEN_INTERFACE_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY_MISMATCH  ILLEGAL_IMPLICIT_CAST  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE  INEXISTENT_ENUM_ELEMENT  INEXISTENT_PROPERTY  INTERFACE_FUNCTION_NOT_EMPTY  INTERFACE_METHOD_OVERRIDE  INVALID_INTERFACE_MEMBER_DECLARATION  MULTIPLE_VAR_DEF  NOT_A_CONSTRUCTOR  NOT_CALLABLE  UNEXPECTED_TOKEN  UNKNOWN_EXPR_TYPE  UNKNOWN_OVERRIDE  UNRESOLVED_TYPE  WRONG_ARGUMENT_COUNT  diagnosticType  InferJSDocInfo  inferJSDocInfo  	projects/Closure66/src/com/google/javascript/jscomp/TypeCheck.java	0.21320071635561041	939	939	2	replace	JSType  rightType  =  getJSType(left);	  JSType    rightType    =    getJSType(rightChild);    	non-compiled	[CE]  orphaned  case	16	None	replace
199	[BUG]  [BUGGY]  if(leftType!=  null)  {  JSType  rightType  =  getJSType(rightChild);  if(validator.expectCanAssignTo(  t,  assign,  leftType,   "assignment   "))  {  ensureTyped(t,  assign,  rightType);  }  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]      Var  var  =  t.getScope().getVar(lvalue.getString());  if  (var  !=  null)  {  if  (var.isTypeInferred())  {  return;  }  }  }  JSType  leftType  =  getJSType(lvalue);      [BUGGY]  if(leftType!=  null)  {  JSType  rightType  =  getJSType(rightChild);  if(validator.expectCanAssignTo(  t,  assign,  leftType,   "assignment   "))  {  ensureTyped(t,  assign,  rightType);  }  [BUGGY]      JSType  rightType  =  getJSType(rightChild);  if  (validator.expectCanAssignTo(  t,  assign,  rightType,  leftType,       "assignment     "))  {  ensureTyped(t,  assign,  rightType);  }  else  {  ensureTyped(t,  assign);  }  }  [CLASS]  TypeCheck  [METHOD]  visitAssign  [RETURN_TYPE]  void  NodeTraversal  t  Node  assign  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  jsType  leftType  objectJsType  rightType  rvalueType  NodeTraversal  t  DiagnosticGroup  ALL_DIAGNOSTICS  CheckLevel  reportMissingOverride  reportUnknownTypes  Var  var  Node  assign  lvalue  object  object2  rightChild  rvalue  FunctionType  functionType  ScopeCreator  scopeCreator  String  OVERRIDING_PROTOTYPE_WITH_NON_OBJECT  functionPrivateName  message  property  property2  JSDocInfo  info  int  noTypeCheckSection  nullCount  typedCount  unknownCount  TypeValidator  validator  ObjectType  type  AbstractCompiler  compiler  JSTypeRegistry  typeRegistry  boolean  enterSection  externs  inExterns  report  reportMissingProperties  typeable  Scope  outerScope  topScope  DiagnosticType  BAD_DELETE  BAD_IMPLEMENTED_TYPE  BIT_OPERATION  CONFLICTING_EXTENDED_TYPE  CONFLICTING_IMPLEMENTED_TYPE  CONSTRUCTOR_NOT_CALLABLE  DETERMINISTIC_TEST  DETERMINISTIC_TEST_NO_RESULT  ENUM_DUP  ENUM_NOT_CONSTANT  EXPECTED_THIS_TYPE  FUNCTION_MASKS_VARIABLE  HIDDEN_INTERFACE_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY_MISMATCH  ILLEGAL_IMPLICIT_CAST  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE  INEXISTENT_ENUM_ELEMENT  INEXISTENT_PROPERTY  INTERFACE_FUNCTION_NOT_EMPTY  INTERFACE_METHOD_OVERRIDE  INVALID_INTERFACE_MEMBER_DECLARATION  MULTIPLE_VAR_DEF  NOT_A_CONSTRUCTOR  NOT_CALLABLE  UNEXPECTED_TOKEN  UNKNOWN_EXPR_TYPE  UNKNOWN_OVERRIDE  UNRESOLVED_TYPE  WRONG_ARGUMENT_COUNT  diagnosticType  InferJSDocInfo  inferJSDocInfo  	projects/Closure66/src/com/google/javascript/jscomp/TypeCheck.java	0.21320071635561041	939	939	2	replace	if(leftType!=  null)  {  JSType  rightType  =  getJSType(rightChild);  if(validator.expectCanAssignTo(  t,  assign,  leftType,   "assignment   "))  {  ensureTyped(t,  assign,  rightType);  }	  JSType    rightType    =    getJSType(rightChild);    	non-compiled	[CE]  orphaned  case	16	None	replace
200	[BUG]  [BUGGY]  if(leftType!=  null)  {  JSType  rightType  =  getJSType(rightChild);  if(validator.expectCanAssignTo(  t,  assign,  leftType,   "assignment   "))  {  return;  }  [CE]  orphaned  case  [FE]                                AssertionFailedError      [CONTEXT]      Var  var  =  t.getScope().getVar(lvalue.getString());  if  (var  !=  null)  {  if  (var.isTypeInferred())  {  return;  }  }  }  JSType  leftType  =  getJSType(lvalue);      [BUGGY]  if(leftType!=  null)  {  JSType  rightType  =  getJSType(rightChild);  if(validator.expectCanAssignTo(  t,  assign,  leftType,   "assignment   "))  {  return;  }  [BUGGY]      JSType  rightType  =  getJSType(rightChild);  if  (validator.expectCanAssignTo(  t,  assign,  rightType,  leftType,       "assignment     "))  {  ensureTyped(t,  assign,  rightType);  }  else  {  ensureTyped(t,  assign);  }  }  [CLASS]  TypeCheck  [METHOD]  visitAssign  [RETURN_TYPE]  void  NodeTraversal  t  Node  assign  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  jsType  leftType  objectJsType  rightType  rvalueType  NodeTraversal  t  DiagnosticGroup  ALL_DIAGNOSTICS  CheckLevel  reportMissingOverride  reportUnknownTypes  Var  var  Node  assign  lvalue  object  object2  rightChild  rvalue  FunctionType  functionType  ScopeCreator  scopeCreator  String  OVERRIDING_PROTOTYPE_WITH_NON_OBJECT  functionPrivateName  message  property  property2  JSDocInfo  info  int  noTypeCheckSection  nullCount  typedCount  unknownCount  TypeValidator  validator  ObjectType  type  AbstractCompiler  compiler  JSTypeRegistry  typeRegistry  boolean  enterSection  externs  inExterns  report  reportMissingProperties  typeable  Scope  outerScope  topScope  DiagnosticType  BAD_DELETE  BAD_IMPLEMENTED_TYPE  BIT_OPERATION  CONFLICTING_EXTENDED_TYPE  CONFLICTING_IMPLEMENTED_TYPE  CONSTRUCTOR_NOT_CALLABLE  DETERMINISTIC_TEST  DETERMINISTIC_TEST_NO_RESULT  ENUM_DUP  ENUM_NOT_CONSTANT  EXPECTED_THIS_TYPE  FUNCTION_MASKS_VARIABLE  HIDDEN_INTERFACE_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY_MISMATCH  ILLEGAL_IMPLICIT_CAST  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE  INEXISTENT_ENUM_ELEMENT  INEXISTENT_PROPERTY  INTERFACE_FUNCTION_NOT_EMPTY  INTERFACE_METHOD_OVERRIDE  INVALID_INTERFACE_MEMBER_DECLARATION  MULTIPLE_VAR_DEF  NOT_A_CONSTRUCTOR  NOT_CALLABLE  UNEXPECTED_TOKEN  UNKNOWN_EXPR_TYPE  UNKNOWN_OVERRIDE  UNRESOLVED_TYPE  WRONG_ARGUMENT_COUNT  diagnosticType  InferJSDocInfo  inferJSDocInfo  	projects/Closure66/src/com/google/javascript/jscomp/TypeCheck.java	0.21320071635561041	939	939	2	replace	if(leftType!=  null)  {  JSType  rightType  =  getJSType(rightChild);  if(validator.expectCanAssignTo(  t,  assign,  leftType,   "assignment   "))  {  return;  }	  JSType    rightType    =    getJSType(rightChild);    	non-compiled	[CE]  orphaned  case	16	None	replace
201	[BUG]  [BUGGY]  if(leftType  ==  null)  {  JSType  rightType  =  getJSType(rightChild);  if(validator.expectCanAssignTo(  t,  assign,  leftType,   "assignment   "))  {  ensureTyped(t,  assign,  rightType);  }  [CE]  orphaned  case  [FE]                                  AssertionFailedError      [CONTEXT]      Var  var  =  t.getScope().getVar(lvalue.getString());  if  (var  !=  null)  {  if  (var.isTypeInferred())  {  return;  }  }  }  JSType  leftType  =  getJSType(lvalue);      [BUGGY]  if(leftType  ==  null)  {  JSType  rightType  =  getJSType(rightChild);  if(validator.expectCanAssignTo(  t,  assign,  leftType,   "assignment   "))  {  ensureTyped(t,  assign,  rightType);  }  [BUGGY]      JSType  rightType  =  getJSType(rightChild);  if  (validator.expectCanAssignTo(  t,  assign,  rightType,  leftType,       "assignment     "))  {  ensureTyped(t,  assign,  rightType);  }  else  {  ensureTyped(t,  assign);  }  }  [CLASS]  TypeCheck  [METHOD]  visitAssign  [RETURN_TYPE]  void  NodeTraversal  t  Node  assign  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  jsType  leftType  objectJsType  rightType  rvalueType  NodeTraversal  t  DiagnosticGroup  ALL_DIAGNOSTICS  CheckLevel  reportMissingOverride  reportUnknownTypes  Var  var  Node  assign  lvalue  object  object2  rightChild  rvalue  FunctionType  functionType  ScopeCreator  scopeCreator  String  OVERRIDING_PROTOTYPE_WITH_NON_OBJECT  functionPrivateName  message  property  property2  JSDocInfo  info  int  noTypeCheckSection  nullCount  typedCount  unknownCount  TypeValidator  validator  ObjectType  type  AbstractCompiler  compiler  JSTypeRegistry  typeRegistry  boolean  enterSection  externs  inExterns  report  reportMissingProperties  typeable  Scope  outerScope  topScope  DiagnosticType  BAD_DELETE  BAD_IMPLEMENTED_TYPE  BIT_OPERATION  CONFLICTING_EXTENDED_TYPE  CONFLICTING_IMPLEMENTED_TYPE  CONSTRUCTOR_NOT_CALLABLE  DETERMINISTIC_TEST  DETERMINISTIC_TEST_NO_RESULT  ENUM_DUP  ENUM_NOT_CONSTANT  EXPECTED_THIS_TYPE  FUNCTION_MASKS_VARIABLE  HIDDEN_INTERFACE_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY_MISMATCH  ILLEGAL_IMPLICIT_CAST  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE  INEXISTENT_ENUM_ELEMENT  INEXISTENT_PROPERTY  INTERFACE_FUNCTION_NOT_EMPTY  INTERFACE_METHOD_OVERRIDE  INVALID_INTERFACE_MEMBER_DECLARATION  MULTIPLE_VAR_DEF  NOT_A_CONSTRUCTOR  NOT_CALLABLE  UNEXPECTED_TOKEN  UNKNOWN_EXPR_TYPE  UNKNOWN_OVERRIDE  UNRESOLVED_TYPE  WRONG_ARGUMENT_COUNT  diagnosticType  InferJSDocInfo  inferJSDocInfo  	projects/Closure66/src/com/google/javascript/jscomp/TypeCheck.java	0.21320071635561041	939	939	2	replace	if(leftType  ==  null)  {  JSType  rightType  =  getJSType(rightChild);  if(validator.expectCanAssignTo(  t,  assign,  leftType,   "assignment   "))  {  ensureTyped(t,  assign,  rightType);  }	  JSType    rightType    =    getJSType(rightChild);    	non-compiled	[CE]  orphaned  case	16	None	replace
202	[BUG]  [BUGGY]  if(leftType  ==  null)  {  JSType  rightType  =  getJSType(rightChild);  if(validator.expectCanAssignTo(  t,  assign,  leftType,   "assignment   "))  {  return;  }  [CE]  orphaned  case  [FE]                                    AssertionFailedError      [CONTEXT]      Var  var  =  t.getScope().getVar(lvalue.getString());  if  (var  !=  null)  {  if  (var.isTypeInferred())  {  return;  }  }  }  JSType  leftType  =  getJSType(lvalue);      [BUGGY]  if(leftType  ==  null)  {  JSType  rightType  =  getJSType(rightChild);  if(validator.expectCanAssignTo(  t,  assign,  leftType,   "assignment   "))  {  return;  }  [BUGGY]      JSType  rightType  =  getJSType(rightChild);  if  (validator.expectCanAssignTo(  t,  assign,  rightType,  leftType,       "assignment     "))  {  ensureTyped(t,  assign,  rightType);  }  else  {  ensureTyped(t,  assign);  }  }  [CLASS]  TypeCheck  [METHOD]  visitAssign  [RETURN_TYPE]  void  NodeTraversal  t  Node  assign  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  jsType  leftType  objectJsType  rightType  rvalueType  NodeTraversal  t  DiagnosticGroup  ALL_DIAGNOSTICS  CheckLevel  reportMissingOverride  reportUnknownTypes  Var  var  Node  assign  lvalue  object  object2  rightChild  rvalue  FunctionType  functionType  ScopeCreator  scopeCreator  String  OVERRIDING_PROTOTYPE_WITH_NON_OBJECT  functionPrivateName  message  property  property2  JSDocInfo  info  int  noTypeCheckSection  nullCount  typedCount  unknownCount  TypeValidator  validator  ObjectType  type  AbstractCompiler  compiler  JSTypeRegistry  typeRegistry  boolean  enterSection  externs  inExterns  report  reportMissingProperties  typeable  Scope  outerScope  topScope  DiagnosticType  BAD_DELETE  BAD_IMPLEMENTED_TYPE  BIT_OPERATION  CONFLICTING_EXTENDED_TYPE  CONFLICTING_IMPLEMENTED_TYPE  CONSTRUCTOR_NOT_CALLABLE  DETERMINISTIC_TEST  DETERMINISTIC_TEST_NO_RESULT  ENUM_DUP  ENUM_NOT_CONSTANT  EXPECTED_THIS_TYPE  FUNCTION_MASKS_VARIABLE  HIDDEN_INTERFACE_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY_MISMATCH  ILLEGAL_IMPLICIT_CAST  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE  INEXISTENT_ENUM_ELEMENT  INEXISTENT_PROPERTY  INTERFACE_FUNCTION_NOT_EMPTY  INTERFACE_METHOD_OVERRIDE  INVALID_INTERFACE_MEMBER_DECLARATION  MULTIPLE_VAR_DEF  NOT_A_CONSTRUCTOR  NOT_CALLABLE  UNEXPECTED_TOKEN  UNKNOWN_EXPR_TYPE  UNKNOWN_OVERRIDE  UNRESOLVED_TYPE  WRONG_ARGUMENT_COUNT  diagnosticType  InferJSDocInfo  inferJSDocInfo  	projects/Closure66/src/com/google/javascript/jscomp/TypeCheck.java	0.21320071635561041	939	939	2	replace	if(leftType  ==  null)  {  JSType  rightType  =  getJSType(rightChild);  if(validator.expectCanAssignTo(  t,  assign,  leftType,   "assignment   "))  {  return;  }	  JSType    rightType    =    getJSType(rightChild);    	non-compiled	[CE]  orphaned  case	16	None	replace
203	[BUG]  [BUGGY]  Node  rightChild  =  var.getRightChild();  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      Var  var  =  t.getScope().getVar(lvalue.getString());  if  (var  !=  null)  {  if  (var.isTypeInferred())  {  return;  }  }  }  JSType  leftType  =  getJSType(lvalue);      [BUGGY]  Node  rightChild  =  var.getRightChild();  [BUGGY]      JSType  rightType  =  getJSType(rightChild);  if  (validator.expectCanAssignTo(  t,  assign,  rightType,  leftType,       "assignment     "))  {  ensureTyped(t,  assign,  rightType);  }  else  {  ensureTyped(t,  assign);  }  }  [CLASS]  TypeCheck  [METHOD]  visitAssign  [RETURN_TYPE]  void  NodeTraversal  t  Node  assign  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  jsType  leftType  objectJsType  rightType  rvalueType  NodeTraversal  t  DiagnosticGroup  ALL_DIAGNOSTICS  CheckLevel  reportMissingOverride  reportUnknownTypes  Var  var  Node  assign  lvalue  object  object2  rightChild  rvalue  FunctionType  functionType  ScopeCreator  scopeCreator  String  OVERRIDING_PROTOTYPE_WITH_NON_OBJECT  functionPrivateName  message  property  property2  JSDocInfo  info  int  noTypeCheckSection  nullCount  typedCount  unknownCount  TypeValidator  validator  ObjectType  type  AbstractCompiler  compiler  JSTypeRegistry  typeRegistry  boolean  enterSection  externs  inExterns  report  reportMissingProperties  typeable  Scope  outerScope  topScope  DiagnosticType  BAD_DELETE  BAD_IMPLEMENTED_TYPE  BIT_OPERATION  CONFLICTING_EXTENDED_TYPE  CONFLICTING_IMPLEMENTED_TYPE  CONSTRUCTOR_NOT_CALLABLE  DETERMINISTIC_TEST  DETERMINISTIC_TEST_NO_RESULT  ENUM_DUP  ENUM_NOT_CONSTANT  EXPECTED_THIS_TYPE  FUNCTION_MASKS_VARIABLE  HIDDEN_INTERFACE_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY_MISMATCH  ILLEGAL_IMPLICIT_CAST  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE  INEXISTENT_ENUM_ELEMENT  INEXISTENT_PROPERTY  INTERFACE_FUNCTION_NOT_EMPTY  INTERFACE_METHOD_OVERRIDE  INVALID_INTERFACE_MEMBER_DECLARATION  MULTIPLE_VAR_DEF  NOT_A_CONSTRUCTOR  NOT_CALLABLE  UNEXPECTED_TOKEN  UNKNOWN_EXPR_TYPE  UNKNOWN_OVERRIDE  UNRESOLVED_TYPE  WRONG_ARGUMENT_COUNT  diagnosticType  InferJSDocInfo  inferJSDocInfo  	projects/Closure66/src/com/google/javascript/jscomp/TypeCheck.java	0.21320071635561041	939	939	2	replace	Node  rightChild  =  var.getRightChild();	  Node    rightChild    =    var.getLocalPart();    	non-compiled	[CE]  orphaned  case	31	None	replace
204	[BUG]  [BUGGY]  Node  rightChild  =  var.getRawChild();  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      Var  var  =  t.getScope().getVar(lvalue.getString());  if  (var  !=  null)  {  if  (var.isTypeInferred())  {  return;  }  }  }  JSType  leftType  =  getJSType(lvalue);      [BUGGY]  Node  rightChild  =  var.getRawChild();  [BUGGY]      JSType  rightType  =  getJSType(rightChild);  if  (validator.expectCanAssignTo(  t,  assign,  rightType,  leftType,       "assignment     "))  {  ensureTyped(t,  assign,  rightType);  }  else  {  ensureTyped(t,  assign);  }  }  [CLASS]  TypeCheck  [METHOD]  visitAssign  [RETURN_TYPE]  void  NodeTraversal  t  Node  assign  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  jsType  leftType  objectJsType  rightType  rvalueType  NodeTraversal  t  DiagnosticGroup  ALL_DIAGNOSTICS  CheckLevel  reportMissingOverride  reportUnknownTypes  Var  var  Node  assign  lvalue  object  object2  rightChild  rvalue  FunctionType  functionType  ScopeCreator  scopeCreator  String  OVERRIDING_PROTOTYPE_WITH_NON_OBJECT  functionPrivateName  message  property  property2  JSDocInfo  info  int  noTypeCheckSection  nullCount  typedCount  unknownCount  TypeValidator  validator  ObjectType  type  AbstractCompiler  compiler  JSTypeRegistry  typeRegistry  boolean  enterSection  externs  inExterns  report  reportMissingProperties  typeable  Scope  outerScope  topScope  DiagnosticType  BAD_DELETE  BAD_IMPLEMENTED_TYPE  BIT_OPERATION  CONFLICTING_EXTENDED_TYPE  CONFLICTING_IMPLEMENTED_TYPE  CONSTRUCTOR_NOT_CALLABLE  DETERMINISTIC_TEST  DETERMINISTIC_TEST_NO_RESULT  ENUM_DUP  ENUM_NOT_CONSTANT  EXPECTED_THIS_TYPE  FUNCTION_MASKS_VARIABLE  HIDDEN_INTERFACE_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY_MISMATCH  ILLEGAL_IMPLICIT_CAST  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE  INEXISTENT_ENUM_ELEMENT  INEXISTENT_PROPERTY  INTERFACE_FUNCTION_NOT_EMPTY  INTERFACE_METHOD_OVERRIDE  INVALID_INTERFACE_MEMBER_DECLARATION  MULTIPLE_VAR_DEF  NOT_A_CONSTRUCTOR  NOT_CALLABLE  UNEXPECTED_TOKEN  UNKNOWN_EXPR_TYPE  UNKNOWN_OVERRIDE  UNRESOLVED_TYPE  WRONG_ARGUMENT_COUNT  diagnosticType  InferJSDocInfo  inferJSDocInfo  	projects/Closure66/src/com/google/javascript/jscomp/TypeCheck.java	0.21320071635561041	939	939	2	replace	Node  rightChild  =  var.getRawChild();	  Node    rightChild    =    var.getLocalPart();    	non-compiled	[CE]  orphaned  case	31	None	replace
205	[BUG]  [BUGGY]  Node  rightChild  =  var.getUpperBound();  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      Var  var  =  t.getScope().getVar(lvalue.getString());  if  (var  !=  null)  {  if  (var.isTypeInferred())  {  return;  }  }  }  JSType  leftType  =  getJSType(lvalue);      [BUGGY]  Node  rightChild  =  var.getUpperBound();  [BUGGY]      JSType  rightType  =  getJSType(rightChild);  if  (validator.expectCanAssignTo(  t,  assign,  rightType,  leftType,       "assignment     "))  {  ensureTyped(t,  assign,  rightType);  }  else  {  ensureTyped(t,  assign);  }  }  [CLASS]  TypeCheck  [METHOD]  visitAssign  [RETURN_TYPE]  void  NodeTraversal  t  Node  assign  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  jsType  leftType  objectJsType  rightType  rvalueType  NodeTraversal  t  DiagnosticGroup  ALL_DIAGNOSTICS  CheckLevel  reportMissingOverride  reportUnknownTypes  Var  var  Node  assign  lvalue  object  object2  rightChild  rvalue  FunctionType  functionType  ScopeCreator  scopeCreator  String  OVERRIDING_PROTOTYPE_WITH_NON_OBJECT  functionPrivateName  message  property  property2  JSDocInfo  info  int  noTypeCheckSection  nullCount  typedCount  unknownCount  TypeValidator  validator  ObjectType  type  AbstractCompiler  compiler  JSTypeRegistry  typeRegistry  boolean  enterSection  externs  inExterns  report  reportMissingProperties  typeable  Scope  outerScope  topScope  DiagnosticType  BAD_DELETE  BAD_IMPLEMENTED_TYPE  BIT_OPERATION  CONFLICTING_EXTENDED_TYPE  CONFLICTING_IMPLEMENTED_TYPE  CONSTRUCTOR_NOT_CALLABLE  DETERMINISTIC_TEST  DETERMINISTIC_TEST_NO_RESULT  ENUM_DUP  ENUM_NOT_CONSTANT  EXPECTED_THIS_TYPE  FUNCTION_MASKS_VARIABLE  HIDDEN_INTERFACE_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY_MISMATCH  ILLEGAL_IMPLICIT_CAST  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE  INEXISTENT_ENUM_ELEMENT  INEXISTENT_PROPERTY  INTERFACE_FUNCTION_NOT_EMPTY  INTERFACE_METHOD_OVERRIDE  INVALID_INTERFACE_MEMBER_DECLARATION  MULTIPLE_VAR_DEF  NOT_A_CONSTRUCTOR  NOT_CALLABLE  UNEXPECTED_TOKEN  UNKNOWN_EXPR_TYPE  UNKNOWN_OVERRIDE  UNRESOLVED_TYPE  WRONG_ARGUMENT_COUNT  diagnosticType  InferJSDocInfo  inferJSDocInfo  	projects/Closure66/src/com/google/javascript/jscomp/TypeCheck.java	0.21320071635561041	939	939	2	replace	Node  rightChild  =  var.getUpperBound();	  Node    rightChild    =    var.getLocalPart();    	non-compiled	[CE]  orphaned  case	31	None	replace
206	[BUG]  [BUGGY]  Node  rightChild  =  t.getScope().getOwnScope(leftType.getString());  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      Var  var  =  t.getScope().getVar(lvalue.getString());  if  (var  !=  null)  {  if  (var.isTypeInferred())  {  return;  }  }  }  JSType  leftType  =  getJSType(lvalue);      [BUGGY]  Node  rightChild  =  t.getScope().getOwnScope(leftType.getString());  [BUGGY]      JSType  rightType  =  getJSType(rightChild);  if  (validator.expectCanAssignTo(  t,  assign,  rightType,  leftType,       "assignment     "))  {  ensureTyped(t,  assign,  rightType);  }  else  {  ensureTyped(t,  assign);  }  }  [CLASS]  TypeCheck  [METHOD]  visitAssign  [RETURN_TYPE]  void  NodeTraversal  t  Node  assign  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  jsType  leftType  objectJsType  rightType  rvalueType  NodeTraversal  t  DiagnosticGroup  ALL_DIAGNOSTICS  CheckLevel  reportMissingOverride  reportUnknownTypes  Var  var  Node  assign  lvalue  object  object2  rightChild  rvalue  FunctionType  functionType  ScopeCreator  scopeCreator  String  OVERRIDING_PROTOTYPE_WITH_NON_OBJECT  functionPrivateName  message  property  property2  JSDocInfo  info  int  noTypeCheckSection  nullCount  typedCount  unknownCount  TypeValidator  validator  ObjectType  type  AbstractCompiler  compiler  JSTypeRegistry  typeRegistry  boolean  enterSection  externs  inExterns  report  reportMissingProperties  typeable  Scope  outerScope  topScope  DiagnosticType  BAD_DELETE  BAD_IMPLEMENTED_TYPE  BIT_OPERATION  CONFLICTING_EXTENDED_TYPE  CONFLICTING_IMPLEMENTED_TYPE  CONSTRUCTOR_NOT_CALLABLE  DETERMINISTIC_TEST  DETERMINISTIC_TEST_NO_RESULT  ENUM_DUP  ENUM_NOT_CONSTANT  EXPECTED_THIS_TYPE  FUNCTION_MASKS_VARIABLE  HIDDEN_INTERFACE_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY_MISMATCH  ILLEGAL_IMPLICIT_CAST  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE  INEXISTENT_ENUM_ELEMENT  INEXISTENT_PROPERTY  INTERFACE_FUNCTION_NOT_EMPTY  INTERFACE_METHOD_OVERRIDE  INVALID_INTERFACE_MEMBER_DECLARATION  MULTIPLE_VAR_DEF  NOT_A_CONSTRUCTOR  NOT_CALLABLE  UNEXPECTED_TOKEN  UNKNOWN_EXPR_TYPE  UNKNOWN_OVERRIDE  UNRESOLVED_TYPE  WRONG_ARGUMENT_COUNT  diagnosticType  InferJSDocInfo  inferJSDocInfo  	projects/Closure66/src/com/google/javascript/jscomp/TypeCheck.java	0.21320071635561041	939	939	2	replace	Node  rightChild  =  t.getScope().getOwnScope(leftType.getString());	  Node    rightChild    =    t.getScope().getVar(rightType.getString());    	non-compiled	[CE]  orphaned  case	10	None	replace
207	[BUG]  [BUGGY]  Node  rightChild  =  t.getScope().getRawClass();  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      Var  var  =  t.getScope().getVar(lvalue.getString());  if  (var  !=  null)  {  if  (var.isTypeInferred())  {  return;  }  }  }  JSType  leftType  =  getJSType(lvalue);      [BUGGY]  Node  rightChild  =  t.getScope().getRawClass();  [BUGGY]      JSType  rightType  =  getJSType(rightChild);  if  (validator.expectCanAssignTo(  t,  assign,  rightType,  leftType,       "assignment     "))  {  ensureTyped(t,  assign,  rightType);  }  else  {  ensureTyped(t,  assign);  }  }  [CLASS]  TypeCheck  [METHOD]  visitAssign  [RETURN_TYPE]  void  NodeTraversal  t  Node  assign  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  jsType  leftType  objectJsType  rightType  rvalueType  NodeTraversal  t  DiagnosticGroup  ALL_DIAGNOSTICS  CheckLevel  reportMissingOverride  reportUnknownTypes  Var  var  Node  assign  lvalue  object  object2  rightChild  rvalue  FunctionType  functionType  ScopeCreator  scopeCreator  String  OVERRIDING_PROTOTYPE_WITH_NON_OBJECT  functionPrivateName  message  property  property2  JSDocInfo  info  int  noTypeCheckSection  nullCount  typedCount  unknownCount  TypeValidator  validator  ObjectType  type  AbstractCompiler  compiler  JSTypeRegistry  typeRegistry  boolean  enterSection  externs  inExterns  report  reportMissingProperties  typeable  Scope  outerScope  topScope  DiagnosticType  BAD_DELETE  BAD_IMPLEMENTED_TYPE  BIT_OPERATION  CONFLICTING_EXTENDED_TYPE  CONFLICTING_IMPLEMENTED_TYPE  CONSTRUCTOR_NOT_CALLABLE  DETERMINISTIC_TEST  DETERMINISTIC_TEST_NO_RESULT  ENUM_DUP  ENUM_NOT_CONSTANT  EXPECTED_THIS_TYPE  FUNCTION_MASKS_VARIABLE  HIDDEN_INTERFACE_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY_MISMATCH  ILLEGAL_IMPLICIT_CAST  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE  INEXISTENT_ENUM_ELEMENT  INEXISTENT_PROPERTY  INTERFACE_FUNCTION_NOT_EMPTY  INTERFACE_METHOD_OVERRIDE  INVALID_INTERFACE_MEMBER_DECLARATION  MULTIPLE_VAR_DEF  NOT_A_CONSTRUCTOR  NOT_CALLABLE  UNEXPECTED_TOKEN  UNKNOWN_EXPR_TYPE  UNKNOWN_OVERRIDE  UNRESOLVED_TYPE  WRONG_ARGUMENT_COUNT  diagnosticType  InferJSDocInfo  inferJSDocInfo  	projects/Closure66/src/com/google/javascript/jscomp/TypeCheck.java	0.21320071635561041	939	939	2	replace	Node  rightChild  =  t.getScope().getRawClass();	  Node    rightChild    =    t.getScope().getRawNode();    	non-compiled	[CE]  orphaned  case	20	None	replace
208	[BUG]  [BUGGY]  Node  rightChild  =  t.getScope().getRawKey();  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      Var  var  =  t.getScope().getVar(lvalue.getString());  if  (var  !=  null)  {  if  (var.isTypeInferred())  {  return;  }  }  }  JSType  leftType  =  getJSType(lvalue);      [BUGGY]  Node  rightChild  =  t.getScope().getRawKey();  [BUGGY]      JSType  rightType  =  getJSType(rightChild);  if  (validator.expectCanAssignTo(  t,  assign,  rightType,  leftType,       "assignment     "))  {  ensureTyped(t,  assign,  rightType);  }  else  {  ensureTyped(t,  assign);  }  }  [CLASS]  TypeCheck  [METHOD]  visitAssign  [RETURN_TYPE]  void  NodeTraversal  t  Node  assign  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  jsType  leftType  objectJsType  rightType  rvalueType  NodeTraversal  t  DiagnosticGroup  ALL_DIAGNOSTICS  CheckLevel  reportMissingOverride  reportUnknownTypes  Var  var  Node  assign  lvalue  object  object2  rightChild  rvalue  FunctionType  functionType  ScopeCreator  scopeCreator  String  OVERRIDING_PROTOTYPE_WITH_NON_OBJECT  functionPrivateName  message  property  property2  JSDocInfo  info  int  noTypeCheckSection  nullCount  typedCount  unknownCount  TypeValidator  validator  ObjectType  type  AbstractCompiler  compiler  JSTypeRegistry  typeRegistry  boolean  enterSection  externs  inExterns  report  reportMissingProperties  typeable  Scope  outerScope  topScope  DiagnosticType  BAD_DELETE  BAD_IMPLEMENTED_TYPE  BIT_OPERATION  CONFLICTING_EXTENDED_TYPE  CONFLICTING_IMPLEMENTED_TYPE  CONSTRUCTOR_NOT_CALLABLE  DETERMINISTIC_TEST  DETERMINISTIC_TEST_NO_RESULT  ENUM_DUP  ENUM_NOT_CONSTANT  EXPECTED_THIS_TYPE  FUNCTION_MASKS_VARIABLE  HIDDEN_INTERFACE_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY_MISMATCH  ILLEGAL_IMPLICIT_CAST  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE  INEXISTENT_ENUM_ELEMENT  INEXISTENT_PROPERTY  INTERFACE_FUNCTION_NOT_EMPTY  INTERFACE_METHOD_OVERRIDE  INVALID_INTERFACE_MEMBER_DECLARATION  MULTIPLE_VAR_DEF  NOT_A_CONSTRUCTOR  NOT_CALLABLE  UNEXPECTED_TOKEN  UNKNOWN_EXPR_TYPE  UNKNOWN_OVERRIDE  UNRESOLVED_TYPE  WRONG_ARGUMENT_COUNT  diagnosticType  InferJSDocInfo  inferJSDocInfo  	projects/Closure66/src/com/google/javascript/jscomp/TypeCheck.java	0.21320071635561041	939	939	2	replace	Node  rightChild  =  t.getScope().getRawKey();	  Node    rightChild    =    t.getScope().getRawNode();    	non-compiled	[CE]  orphaned  case	20	None	replace
209	[BUG]  [BUGGY]  Node  rightChild  =  t.getScope().getRawNode(rvalue);  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      Var  var  =  t.getScope().getVar(lvalue.getString());  if  (var  !=  null)  {  if  (var.isTypeInferred())  {  return;  }  }  }  JSType  leftType  =  getJSType(lvalue);      [BUGGY]  Node  rightChild  =  t.getScope().getRawNode(rvalue);  [BUGGY]      JSType  rightType  =  getJSType(rightChild);  if  (validator.expectCanAssignTo(  t,  assign,  rightType,  leftType,       "assignment     "))  {  ensureTyped(t,  assign,  rightType);  }  else  {  ensureTyped(t,  assign);  }  }  [CLASS]  TypeCheck  [METHOD]  visitAssign  [RETURN_TYPE]  void  NodeTraversal  t  Node  assign  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  jsType  leftType  objectJsType  rightType  rvalueType  NodeTraversal  t  DiagnosticGroup  ALL_DIAGNOSTICS  CheckLevel  reportMissingOverride  reportUnknownTypes  Var  var  Node  assign  lvalue  object  object2  rightChild  rvalue  FunctionType  functionType  ScopeCreator  scopeCreator  String  OVERRIDING_PROTOTYPE_WITH_NON_OBJECT  functionPrivateName  message  property  property2  JSDocInfo  info  int  noTypeCheckSection  nullCount  typedCount  unknownCount  TypeValidator  validator  ObjectType  type  AbstractCompiler  compiler  JSTypeRegistry  typeRegistry  boolean  enterSection  externs  inExterns  report  reportMissingProperties  typeable  Scope  outerScope  topScope  DiagnosticType  BAD_DELETE  BAD_IMPLEMENTED_TYPE  BIT_OPERATION  CONFLICTING_EXTENDED_TYPE  CONFLICTING_IMPLEMENTED_TYPE  CONSTRUCTOR_NOT_CALLABLE  DETERMINISTIC_TEST  DETERMINISTIC_TEST_NO_RESULT  ENUM_DUP  ENUM_NOT_CONSTANT  EXPECTED_THIS_TYPE  FUNCTION_MASKS_VARIABLE  HIDDEN_INTERFACE_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY_MISMATCH  ILLEGAL_IMPLICIT_CAST  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE  INEXISTENT_ENUM_ELEMENT  INEXISTENT_PROPERTY  INTERFACE_FUNCTION_NOT_EMPTY  INTERFACE_METHOD_OVERRIDE  INVALID_INTERFACE_MEMBER_DECLARATION  MULTIPLE_VAR_DEF  NOT_A_CONSTRUCTOR  NOT_CALLABLE  UNEXPECTED_TOKEN  UNKNOWN_EXPR_TYPE  UNKNOWN_OVERRIDE  UNRESOLVED_TYPE  WRONG_ARGUMENT_COUNT  diagnosticType  InferJSDocInfo  inferJSDocInfo  	projects/Closure66/src/com/google/javascript/jscomp/TypeCheck.java	0.21320071635561041	939	939	2	replace	Node  rightChild  =  t.getScope().getRawNode(rvalue);	  Node    rightChild    =    t.getScope().getRawNode();    	non-compiled	[CE]  orphaned  case	20	None	replace
210	[BUG]  [BUGGY]  Node  rightChild  =  t.getScope().getVar(lvalue.getString(),  leftType,  object);  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      Var  var  =  t.getScope().getVar(lvalue.getString());  if  (var  !=  null)  {  if  (var.isTypeInferred())  {  return;  }  }  }  JSType  leftType  =  getJSType(lvalue);      [BUGGY]  Node  rightChild  =  t.getScope().getVar(lvalue.getString(),  leftType,  object);  [BUGGY]      JSType  rightType  =  getJSType(rightChild);  if  (validator.expectCanAssignTo(  t,  assign,  rightType,  leftType,       "assignment     "))  {  ensureTyped(t,  assign,  rightType);  }  else  {  ensureTyped(t,  assign);  }  }  [CLASS]  TypeCheck  [METHOD]  visitAssign  [RETURN_TYPE]  void  NodeTraversal  t  Node  assign  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  jsType  leftType  objectJsType  rightType  rvalueType  NodeTraversal  t  DiagnosticGroup  ALL_DIAGNOSTICS  CheckLevel  reportMissingOverride  reportUnknownTypes  Var  var  Node  assign  lvalue  object  object2  rightChild  rvalue  FunctionType  functionType  ScopeCreator  scopeCreator  String  OVERRIDING_PROTOTYPE_WITH_NON_OBJECT  functionPrivateName  message  property  property2  JSDocInfo  info  int  noTypeCheckSection  nullCount  typedCount  unknownCount  TypeValidator  validator  ObjectType  type  AbstractCompiler  compiler  JSTypeRegistry  typeRegistry  boolean  enterSection  externs  inExterns  report  reportMissingProperties  typeable  Scope  outerScope  topScope  DiagnosticType  BAD_DELETE  BAD_IMPLEMENTED_TYPE  BIT_OPERATION  CONFLICTING_EXTENDED_TYPE  CONFLICTING_IMPLEMENTED_TYPE  CONSTRUCTOR_NOT_CALLABLE  DETERMINISTIC_TEST  DETERMINISTIC_TEST_NO_RESULT  ENUM_DUP  ENUM_NOT_CONSTANT  EXPECTED_THIS_TYPE  FUNCTION_MASKS_VARIABLE  HIDDEN_INTERFACE_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY_MISMATCH  ILLEGAL_IMPLICIT_CAST  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE  INEXISTENT_ENUM_ELEMENT  INEXISTENT_PROPERTY  INTERFACE_FUNCTION_NOT_EMPTY  INTERFACE_METHOD_OVERRIDE  INVALID_INTERFACE_MEMBER_DECLARATION  MULTIPLE_VAR_DEF  NOT_A_CONSTRUCTOR  NOT_CALLABLE  UNEXPECTED_TOKEN  UNKNOWN_EXPR_TYPE  UNKNOWN_OVERRIDE  UNRESOLVED_TYPE  WRONG_ARGUMENT_COUNT  diagnosticType  InferJSDocInfo  inferJSDocInfo  	projects/Closure66/src/com/google/javascript/jscomp/TypeCheck.java	0.21320071635561041	939	939	2	replace	Node  rightChild  =  t.getScope().getVar(lvalue.getString(),  leftType,  object);	  Node    rightChild    =    t.getScope().getVar(lvalue.getString(),    leftType);    	non-compiled	[CE]  orphaned  case	8	None	replace
211	[BUG]  [BUGGY]  Node  rightChild  =  t.getScope().getVar(lvalue.getString(),  leftType,  object2);  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      Var  var  =  t.getScope().getVar(lvalue.getString());  if  (var  !=  null)  {  if  (var.isTypeInferred())  {  return;  }  }  }  JSType  leftType  =  getJSType(lvalue);      [BUGGY]  Node  rightChild  =  t.getScope().getVar(lvalue.getString(),  leftType,  object2);  [BUGGY]      JSType  rightType  =  getJSType(rightChild);  if  (validator.expectCanAssignTo(  t,  assign,  rightType,  leftType,       "assignment     "))  {  ensureTyped(t,  assign,  rightType);  }  else  {  ensureTyped(t,  assign);  }  }  [CLASS]  TypeCheck  [METHOD]  visitAssign  [RETURN_TYPE]  void  NodeTraversal  t  Node  assign  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  jsType  leftType  objectJsType  rightType  rvalueType  NodeTraversal  t  DiagnosticGroup  ALL_DIAGNOSTICS  CheckLevel  reportMissingOverride  reportUnknownTypes  Var  var  Node  assign  lvalue  object  object2  rightChild  rvalue  FunctionType  functionType  ScopeCreator  scopeCreator  String  OVERRIDING_PROTOTYPE_WITH_NON_OBJECT  functionPrivateName  message  property  property2  JSDocInfo  info  int  noTypeCheckSection  nullCount  typedCount  unknownCount  TypeValidator  validator  ObjectType  type  AbstractCompiler  compiler  JSTypeRegistry  typeRegistry  boolean  enterSection  externs  inExterns  report  reportMissingProperties  typeable  Scope  outerScope  topScope  DiagnosticType  BAD_DELETE  BAD_IMPLEMENTED_TYPE  BIT_OPERATION  CONFLICTING_EXTENDED_TYPE  CONFLICTING_IMPLEMENTED_TYPE  CONSTRUCTOR_NOT_CALLABLE  DETERMINISTIC_TEST  DETERMINISTIC_TEST_NO_RESULT  ENUM_DUP  ENUM_NOT_CONSTANT  EXPECTED_THIS_TYPE  FUNCTION_MASKS_VARIABLE  HIDDEN_INTERFACE_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY_MISMATCH  ILLEGAL_IMPLICIT_CAST  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE  INEXISTENT_ENUM_ELEMENT  INEXISTENT_PROPERTY  INTERFACE_FUNCTION_NOT_EMPTY  INTERFACE_METHOD_OVERRIDE  INVALID_INTERFACE_MEMBER_DECLARATION  MULTIPLE_VAR_DEF  NOT_A_CONSTRUCTOR  NOT_CALLABLE  UNEXPECTED_TOKEN  UNKNOWN_EXPR_TYPE  UNKNOWN_OVERRIDE  UNRESOLVED_TYPE  WRONG_ARGUMENT_COUNT  diagnosticType  InferJSDocInfo  inferJSDocInfo  	projects/Closure66/src/com/google/javascript/jscomp/TypeCheck.java	0.21320071635561041	939	939	2	replace	Node  rightChild  =  t.getScope().getVar(lvalue.getString(),  leftType,  object2);	  Node    rightChild    =    t.getScope().getVar(lvalue.getString(),    leftType);    	non-compiled	[CE]  orphaned  case	8	None	replace
212	[BUG]  [BUGGY]  Node  rightChild  =  leftType!=  null?  getJSType(leftType):  leftValue.getLastChild();  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      Var  var  =  t.getScope().getVar(lvalue.getString());  if  (var  !=  null)  {  if  (var.isTypeInferred())  {  return;  }  }  }  JSType  leftType  =  getJSType(lvalue);      [BUGGY]  Node  rightChild  =  leftType!=  null?  getJSType(leftType):  leftValue.getLastChild();  [BUGGY]      JSType  rightType  =  getJSType(rightChild);  if  (validator.expectCanAssignTo(  t,  assign,  rightType,  leftType,       "assignment     "))  {  ensureTyped(t,  assign,  rightType);  }  else  {  ensureTyped(t,  assign);  }  }  [CLASS]  TypeCheck  [METHOD]  visitAssign  [RETURN_TYPE]  void  NodeTraversal  t  Node  assign  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  jsType  leftType  objectJsType  rightType  rvalueType  NodeTraversal  t  DiagnosticGroup  ALL_DIAGNOSTICS  CheckLevel  reportMissingOverride  reportUnknownTypes  Var  var  Node  assign  lvalue  object  object2  rightChild  rvalue  FunctionType  functionType  ScopeCreator  scopeCreator  String  OVERRIDING_PROTOTYPE_WITH_NON_OBJECT  functionPrivateName  message  property  property2  JSDocInfo  info  int  noTypeCheckSection  nullCount  typedCount  unknownCount  TypeValidator  validator  ObjectType  type  AbstractCompiler  compiler  JSTypeRegistry  typeRegistry  boolean  enterSection  externs  inExterns  report  reportMissingProperties  typeable  Scope  outerScope  topScope  DiagnosticType  BAD_DELETE  BAD_IMPLEMENTED_TYPE  BIT_OPERATION  CONFLICTING_EXTENDED_TYPE  CONFLICTING_IMPLEMENTED_TYPE  CONSTRUCTOR_NOT_CALLABLE  DETERMINISTIC_TEST  DETERMINISTIC_TEST_NO_RESULT  ENUM_DUP  ENUM_NOT_CONSTANT  EXPECTED_THIS_TYPE  FUNCTION_MASKS_VARIABLE  HIDDEN_INTERFACE_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY_MISMATCH  ILLEGAL_IMPLICIT_CAST  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE  INEXISTENT_ENUM_ELEMENT  INEXISTENT_PROPERTY  INTERFACE_FUNCTION_NOT_EMPTY  INTERFACE_METHOD_OVERRIDE  INVALID_INTERFACE_MEMBER_DECLARATION  MULTIPLE_VAR_DEF  NOT_A_CONSTRUCTOR  NOT_CALLABLE  UNEXPECTED_TOKEN  UNKNOWN_EXPR_TYPE  UNKNOWN_OVERRIDE  UNRESOLVED_TYPE  WRONG_ARGUMENT_COUNT  diagnosticType  InferJSDocInfo  inferJSDocInfo  	projects/Closure66/src/com/google/javascript/jscomp/TypeCheck.java	0.21320071635561041	939	939	2	replace	Node  rightChild  =  leftType!=  null?  getJSType(leftType):  leftValue.getLastChild();	  Node    rightChild    =    leftType!=    null?    getJSType(leftType):    leftType.getLastChild();    	non-compiled	[CE]  orphaned  case	40	None	replace
213	[BUG]  [BUGGY]  Node  rightChild  =  leftType!=  null?  getJSType(leftType):  leftType.removeFirstChild();  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      Var  var  =  t.getScope().getVar(lvalue.getString());  if  (var  !=  null)  {  if  (var.isTypeInferred())  {  return;  }  }  }  JSType  leftType  =  getJSType(lvalue);      [BUGGY]  Node  rightChild  =  leftType!=  null?  getJSType(leftType):  leftType.removeFirstChild();  [BUGGY]      JSType  rightType  =  getJSType(rightChild);  if  (validator.expectCanAssignTo(  t,  assign,  rightType,  leftType,       "assignment     "))  {  ensureTyped(t,  assign,  rightType);  }  else  {  ensureTyped(t,  assign);  }  }  [CLASS]  TypeCheck  [METHOD]  visitAssign  [RETURN_TYPE]  void  NodeTraversal  t  Node  assign  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  jsType  leftType  objectJsType  rightType  rvalueType  NodeTraversal  t  DiagnosticGroup  ALL_DIAGNOSTICS  CheckLevel  reportMissingOverride  reportUnknownTypes  Var  var  Node  assign  lvalue  object  object2  rightChild  rvalue  FunctionType  functionType  ScopeCreator  scopeCreator  String  OVERRIDING_PROTOTYPE_WITH_NON_OBJECT  functionPrivateName  message  property  property2  JSDocInfo  info  int  noTypeCheckSection  nullCount  typedCount  unknownCount  TypeValidator  validator  ObjectType  type  AbstractCompiler  compiler  JSTypeRegistry  typeRegistry  boolean  enterSection  externs  inExterns  report  reportMissingProperties  typeable  Scope  outerScope  topScope  DiagnosticType  BAD_DELETE  BAD_IMPLEMENTED_TYPE  BIT_OPERATION  CONFLICTING_EXTENDED_TYPE  CONFLICTING_IMPLEMENTED_TYPE  CONSTRUCTOR_NOT_CALLABLE  DETERMINISTIC_TEST  DETERMINISTIC_TEST_NO_RESULT  ENUM_DUP  ENUM_NOT_CONSTANT  EXPECTED_THIS_TYPE  FUNCTION_MASKS_VARIABLE  HIDDEN_INTERFACE_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY_MISMATCH  ILLEGAL_IMPLICIT_CAST  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE  INEXISTENT_ENUM_ELEMENT  INEXISTENT_PROPERTY  INTERFACE_FUNCTION_NOT_EMPTY  INTERFACE_METHOD_OVERRIDE  INVALID_INTERFACE_MEMBER_DECLARATION  MULTIPLE_VAR_DEF  NOT_A_CONSTRUCTOR  NOT_CALLABLE  UNEXPECTED_TOKEN  UNKNOWN_EXPR_TYPE  UNKNOWN_OVERRIDE  UNRESOLVED_TYPE  WRONG_ARGUMENT_COUNT  diagnosticType  InferJSDocInfo  inferJSDocInfo  	projects/Closure66/src/com/google/javascript/jscomp/TypeCheck.java	0.21320071635561041	939	939	2	replace	Node  rightChild  =  leftType!=  null?  getJSType(leftType):  leftType.removeFirstChild();	  Node    rightChild    =    leftType!=    null?    getJSType(leftType):    leftType.getLastChild();    	non-compiled	[CE]  orphaned  case	40	None	replace
214	[BUG]  [BUGGY]  Node  rightChild  =  leftType!=  null?  leftType.getNext()  :  leftType.getLastChild();  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      Var  var  =  t.getScope().getVar(lvalue.getString());  if  (var  !=  null)  {  if  (var.isTypeInferred())  {  return;  }  }  }  JSType  leftType  =  getJSType(lvalue);      [BUGGY]  Node  rightChild  =  leftType!=  null?  leftType.getNext()  :  leftType.getLastChild();  [BUGGY]      JSType  rightType  =  getJSType(rightChild);  if  (validator.expectCanAssignTo(  t,  assign,  rightType,  leftType,       "assignment     "))  {  ensureTyped(t,  assign,  rightType);  }  else  {  ensureTyped(t,  assign);  }  }  [CLASS]  TypeCheck  [METHOD]  visitAssign  [RETURN_TYPE]  void  NodeTraversal  t  Node  assign  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  jsType  leftType  objectJsType  rightType  rvalueType  NodeTraversal  t  DiagnosticGroup  ALL_DIAGNOSTICS  CheckLevel  reportMissingOverride  reportUnknownTypes  Var  var  Node  assign  lvalue  object  object2  rightChild  rvalue  FunctionType  functionType  ScopeCreator  scopeCreator  String  OVERRIDING_PROTOTYPE_WITH_NON_OBJECT  functionPrivateName  message  property  property2  JSDocInfo  info  int  noTypeCheckSection  nullCount  typedCount  unknownCount  TypeValidator  validator  ObjectType  type  AbstractCompiler  compiler  JSTypeRegistry  typeRegistry  boolean  enterSection  externs  inExterns  report  reportMissingProperties  typeable  Scope  outerScope  topScope  DiagnosticType  BAD_DELETE  BAD_IMPLEMENTED_TYPE  BIT_OPERATION  CONFLICTING_EXTENDED_TYPE  CONFLICTING_IMPLEMENTED_TYPE  CONSTRUCTOR_NOT_CALLABLE  DETERMINISTIC_TEST  DETERMINISTIC_TEST_NO_RESULT  ENUM_DUP  ENUM_NOT_CONSTANT  EXPECTED_THIS_TYPE  FUNCTION_MASKS_VARIABLE  HIDDEN_INTERFACE_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY_MISMATCH  ILLEGAL_IMPLICIT_CAST  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE  INEXISTENT_ENUM_ELEMENT  INEXISTENT_PROPERTY  INTERFACE_FUNCTION_NOT_EMPTY  INTERFACE_METHOD_OVERRIDE  INVALID_INTERFACE_MEMBER_DECLARATION  MULTIPLE_VAR_DEF  NOT_A_CONSTRUCTOR  NOT_CALLABLE  UNEXPECTED_TOKEN  UNKNOWN_EXPR_TYPE  UNKNOWN_OVERRIDE  UNRESOLVED_TYPE  WRONG_ARGUMENT_COUNT  diagnosticType  InferJSDocInfo  inferJSDocInfo  	projects/Closure66/src/com/google/javascript/jscomp/TypeCheck.java	0.21320071635561041	939	939	2	replace	Node  rightChild  =  leftType!=  null?  leftType.getNext()  :  leftType.getLastChild();	  Node    rightChild    =    leftType!=    null?    leftType.getFirstChild()    :    leftType.getLastChild();    	non-compiled	[CE]  orphaned  case	28	None	replace
215	[BUG]  [BUGGY]  Node  rightChild  =  t.getScope().getOwnerDocumentElement();  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      Var  var  =  t.getScope().getVar(lvalue.getString());  if  (var  !=  null)  {  if  (var.isTypeInferred())  {  return;  }  }  }  JSType  leftType  =  getJSType(lvalue);      [BUGGY]  Node  rightChild  =  t.getScope().getOwnerDocumentElement();  [BUGGY]      JSType  rightType  =  getJSType(rightChild);  if  (validator.expectCanAssignTo(  t,  assign,  rightType,  leftType,       "assignment     "))  {  ensureTyped(t,  assign,  rightType);  }  else  {  ensureTyped(t,  assign);  }  }  [CLASS]  TypeCheck  [METHOD]  visitAssign  [RETURN_TYPE]  void  NodeTraversal  t  Node  assign  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  jsType  leftType  objectJsType  rightType  rvalueType  NodeTraversal  t  DiagnosticGroup  ALL_DIAGNOSTICS  CheckLevel  reportMissingOverride  reportUnknownTypes  Var  var  Node  assign  lvalue  object  object2  rightChild  rvalue  FunctionType  functionType  ScopeCreator  scopeCreator  String  OVERRIDING_PROTOTYPE_WITH_NON_OBJECT  functionPrivateName  message  property  property2  JSDocInfo  info  int  noTypeCheckSection  nullCount  typedCount  unknownCount  TypeValidator  validator  ObjectType  type  AbstractCompiler  compiler  JSTypeRegistry  typeRegistry  boolean  enterSection  externs  inExterns  report  reportMissingProperties  typeable  Scope  outerScope  topScope  DiagnosticType  BAD_DELETE  BAD_IMPLEMENTED_TYPE  BIT_OPERATION  CONFLICTING_EXTENDED_TYPE  CONFLICTING_IMPLEMENTED_TYPE  CONSTRUCTOR_NOT_CALLABLE  DETERMINISTIC_TEST  DETERMINISTIC_TEST_NO_RESULT  ENUM_DUP  ENUM_NOT_CONSTANT  EXPECTED_THIS_TYPE  FUNCTION_MASKS_VARIABLE  HIDDEN_INTERFACE_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY_MISMATCH  ILLEGAL_IMPLICIT_CAST  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE  INEXISTENT_ENUM_ELEMENT  INEXISTENT_PROPERTY  INTERFACE_FUNCTION_NOT_EMPTY  INTERFACE_METHOD_OVERRIDE  INVALID_INTERFACE_MEMBER_DECLARATION  MULTIPLE_VAR_DEF  NOT_A_CONSTRUCTOR  NOT_CALLABLE  UNEXPECTED_TOKEN  UNKNOWN_EXPR_TYPE  UNKNOWN_OVERRIDE  UNRESOLVED_TYPE  WRONG_ARGUMENT_COUNT  diagnosticType  InferJSDocInfo  inferJSDocInfo  	projects/Closure66/src/com/google/javascript/jscomp/TypeCheck.java	0.21320071635561041	939	939	2	replace	Node  rightChild  =  t.getScope().getOwnerDocumentElement();	  Node    rightChild    =    t.getScope().getFirstChild();    	non-compiled	[CE]  orphaned  case	1	None	replace
216	[BUG]  [BUGGY]  JSType  rightChild  =  getJSType(assign);  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      Var  var  =  t.getScope().getVar(lvalue.getString());  if  (var  !=  null)  {  if  (var.isTypeInferred())  {  return;  }  }  }  JSType  leftType  =  getJSType(lvalue);      [BUGGY]  JSType  rightChild  =  getJSType(assign);  [BUGGY]      JSType  rightType  =  getJSType(rightChild);  if  (validator.expectCanAssignTo(  t,  assign,  rightType,  leftType,       "assignment     "))  {  ensureTyped(t,  assign,  rightType);  }  else  {  ensureTyped(t,  assign);  }  }  [CLASS]  TypeCheck  [METHOD]  visitAssign  [RETURN_TYPE]  void  NodeTraversal  t  Node  assign  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  jsType  leftType  objectJsType  rightType  rvalueType  NodeTraversal  t  DiagnosticGroup  ALL_DIAGNOSTICS  CheckLevel  reportMissingOverride  reportUnknownTypes  Var  var  Node  assign  lvalue  object  object2  rightChild  rvalue  FunctionType  functionType  ScopeCreator  scopeCreator  String  OVERRIDING_PROTOTYPE_WITH_NON_OBJECT  functionPrivateName  message  property  property2  JSDocInfo  info  int  noTypeCheckSection  nullCount  typedCount  unknownCount  TypeValidator  validator  ObjectType  type  AbstractCompiler  compiler  JSTypeRegistry  typeRegistry  boolean  enterSection  externs  inExterns  report  reportMissingProperties  typeable  Scope  outerScope  topScope  DiagnosticType  BAD_DELETE  BAD_IMPLEMENTED_TYPE  BIT_OPERATION  CONFLICTING_EXTENDED_TYPE  CONFLICTING_IMPLEMENTED_TYPE  CONSTRUCTOR_NOT_CALLABLE  DETERMINISTIC_TEST  DETERMINISTIC_TEST_NO_RESULT  ENUM_DUP  ENUM_NOT_CONSTANT  EXPECTED_THIS_TYPE  FUNCTION_MASKS_VARIABLE  HIDDEN_INTERFACE_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY_MISMATCH  ILLEGAL_IMPLICIT_CAST  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE  INEXISTENT_ENUM_ELEMENT  INEXISTENT_PROPERTY  INTERFACE_FUNCTION_NOT_EMPTY  INTERFACE_METHOD_OVERRIDE  INVALID_INTERFACE_MEMBER_DECLARATION  MULTIPLE_VAR_DEF  NOT_A_CONSTRUCTOR  NOT_CALLABLE  UNEXPECTED_TOKEN  UNKNOWN_EXPR_TYPE  UNKNOWN_OVERRIDE  UNRESOLVED_TYPE  WRONG_ARGUMENT_COUNT  diagnosticType  InferJSDocInfo  inferJSDocInfo  	projects/Closure66/src/com/google/javascript/jscomp/TypeCheck.java	0.21320071635561041	939	939	2	replace	JSType  rightChild  =  getJSType(assign);	  JSType    rightChild    =    getJSType(right);    	non-compiled	[CE]  orphaned  case	15	None	replace
217	[BUG]  [BUGGY]  Node  rightChild  =  t.getScope().getRightNode(assign,  lvalue);  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      Var  var  =  t.getScope().getVar(lvalue.getString());  if  (var  !=  null)  {  if  (var.isTypeInferred())  {  return;  }  }  }  JSType  leftType  =  getJSType(lvalue);      [BUGGY]  Node  rightChild  =  t.getScope().getRightNode(assign,  lvalue);  [BUGGY]      JSType  rightType  =  getJSType(rightChild);  if  (validator.expectCanAssignTo(  t,  assign,  rightType,  leftType,       "assignment     "))  {  ensureTyped(t,  assign,  rightType);  }  else  {  ensureTyped(t,  assign);  }  }  [CLASS]  TypeCheck  [METHOD]  visitAssign  [RETURN_TYPE]  void  NodeTraversal  t  Node  assign  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  jsType  leftType  objectJsType  rightType  rvalueType  NodeTraversal  t  DiagnosticGroup  ALL_DIAGNOSTICS  CheckLevel  reportMissingOverride  reportUnknownTypes  Var  var  Node  assign  lvalue  object  object2  rightChild  rvalue  FunctionType  functionType  ScopeCreator  scopeCreator  String  OVERRIDING_PROTOTYPE_WITH_NON_OBJECT  functionPrivateName  message  property  property2  JSDocInfo  info  int  noTypeCheckSection  nullCount  typedCount  unknownCount  TypeValidator  validator  ObjectType  type  AbstractCompiler  compiler  JSTypeRegistry  typeRegistry  boolean  enterSection  externs  inExterns  report  reportMissingProperties  typeable  Scope  outerScope  topScope  DiagnosticType  BAD_DELETE  BAD_IMPLEMENTED_TYPE  BIT_OPERATION  CONFLICTING_EXTENDED_TYPE  CONFLICTING_IMPLEMENTED_TYPE  CONSTRUCTOR_NOT_CALLABLE  DETERMINISTIC_TEST  DETERMINISTIC_TEST_NO_RESULT  ENUM_DUP  ENUM_NOT_CONSTANT  EXPECTED_THIS_TYPE  FUNCTION_MASKS_VARIABLE  HIDDEN_INTERFACE_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY_MISMATCH  ILLEGAL_IMPLICIT_CAST  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE  INEXISTENT_ENUM_ELEMENT  INEXISTENT_PROPERTY  INTERFACE_FUNCTION_NOT_EMPTY  INTERFACE_METHOD_OVERRIDE  INVALID_INTERFACE_MEMBER_DECLARATION  MULTIPLE_VAR_DEF  NOT_A_CONSTRUCTOR  NOT_CALLABLE  UNEXPECTED_TOKEN  UNKNOWN_EXPR_TYPE  UNKNOWN_OVERRIDE  UNRESOLVED_TYPE  WRONG_ARGUMENT_COUNT  diagnosticType  InferJSDocInfo  inferJSDocInfo  	projects/Closure66/src/com/google/javascript/jscomp/TypeCheck.java	0.21320071635561041	939	939	2	replace	Node  rightChild  =  t.getScope().getRightNode(assign,  lvalue);	  Node    rightChild    =    t.getScope().getRightNode(lvalue);    	non-compiled	[CE]  orphaned  case	36	None	replace
218	[BUG]  [BUGGY]  Node  rightChild  =  t.getScope().getLeftNode(lvalue);  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      Var  var  =  t.getScope().getVar(lvalue.getString());  if  (var  !=  null)  {  if  (var.isTypeInferred())  {  return;  }  }  }  JSType  leftType  =  getJSType(lvalue);      [BUGGY]  Node  rightChild  =  t.getScope().getLeftNode(lvalue);  [BUGGY]      JSType  rightType  =  getJSType(rightChild);  if  (validator.expectCanAssignTo(  t,  assign,  rightType,  leftType,       "assignment     "))  {  ensureTyped(t,  assign,  rightType);  }  else  {  ensureTyped(t,  assign);  }  }  [CLASS]  TypeCheck  [METHOD]  visitAssign  [RETURN_TYPE]  void  NodeTraversal  t  Node  assign  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  jsType  leftType  objectJsType  rightType  rvalueType  NodeTraversal  t  DiagnosticGroup  ALL_DIAGNOSTICS  CheckLevel  reportMissingOverride  reportUnknownTypes  Var  var  Node  assign  lvalue  object  object2  rightChild  rvalue  FunctionType  functionType  ScopeCreator  scopeCreator  String  OVERRIDING_PROTOTYPE_WITH_NON_OBJECT  functionPrivateName  message  property  property2  JSDocInfo  info  int  noTypeCheckSection  nullCount  typedCount  unknownCount  TypeValidator  validator  ObjectType  type  AbstractCompiler  compiler  JSTypeRegistry  typeRegistry  boolean  enterSection  externs  inExterns  report  reportMissingProperties  typeable  Scope  outerScope  topScope  DiagnosticType  BAD_DELETE  BAD_IMPLEMENTED_TYPE  BIT_OPERATION  CONFLICTING_EXTENDED_TYPE  CONFLICTING_IMPLEMENTED_TYPE  CONSTRUCTOR_NOT_CALLABLE  DETERMINISTIC_TEST  DETERMINISTIC_TEST_NO_RESULT  ENUM_DUP  ENUM_NOT_CONSTANT  EXPECTED_THIS_TYPE  FUNCTION_MASKS_VARIABLE  HIDDEN_INTERFACE_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY_MISMATCH  ILLEGAL_IMPLICIT_CAST  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE  INEXISTENT_ENUM_ELEMENT  INEXISTENT_PROPERTY  INTERFACE_FUNCTION_NOT_EMPTY  INTERFACE_METHOD_OVERRIDE  INVALID_INTERFACE_MEMBER_DECLARATION  MULTIPLE_VAR_DEF  NOT_A_CONSTRUCTOR  NOT_CALLABLE  UNEXPECTED_TOKEN  UNKNOWN_EXPR_TYPE  UNKNOWN_OVERRIDE  UNRESOLVED_TYPE  WRONG_ARGUMENT_COUNT  diagnosticType  InferJSDocInfo  inferJSDocInfo  	projects/Closure66/src/com/google/javascript/jscomp/TypeCheck.java	0.21320071635561041	939	939	2	replace	Node  rightChild  =  t.getScope().getLeftNode(lvalue);	  Node    rightChild    =    t.getScope().getRightNode(lvalue);    	non-compiled	[CE]  orphaned  case	36	None	replace
219	[BUG]  [BUGGY]  Node  rightChild  =  t.getScope().getOwnSlot(object.getString());  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      Var  var  =  t.getScope().getVar(lvalue.getString());  if  (var  !=  null)  {  if  (var.isTypeInferred())  {  return;  }  }  }  JSType  leftType  =  getJSType(lvalue);      [BUGGY]  Node  rightChild  =  t.getScope().getOwnSlot(object.getString());  [BUGGY]      JSType  rightType  =  getJSType(rightChild);  if  (validator.expectCanAssignTo(  t,  assign,  rightType,  leftType,       "assignment     "))  {  ensureTyped(t,  assign,  rightType);  }  else  {  ensureTyped(t,  assign);  }  }  [CLASS]  TypeCheck  [METHOD]  visitAssign  [RETURN_TYPE]  void  NodeTraversal  t  Node  assign  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  jsType  leftType  objectJsType  rightType  rvalueType  NodeTraversal  t  DiagnosticGroup  ALL_DIAGNOSTICS  CheckLevel  reportMissingOverride  reportUnknownTypes  Var  var  Node  assign  lvalue  object  object2  rightChild  rvalue  FunctionType  functionType  ScopeCreator  scopeCreator  String  OVERRIDING_PROTOTYPE_WITH_NON_OBJECT  functionPrivateName  message  property  property2  JSDocInfo  info  int  noTypeCheckSection  nullCount  typedCount  unknownCount  TypeValidator  validator  ObjectType  type  AbstractCompiler  compiler  JSTypeRegistry  typeRegistry  boolean  enterSection  externs  inExterns  report  reportMissingProperties  typeable  Scope  outerScope  topScope  DiagnosticType  BAD_DELETE  BAD_IMPLEMENTED_TYPE  BIT_OPERATION  CONFLICTING_EXTENDED_TYPE  CONFLICTING_IMPLEMENTED_TYPE  CONSTRUCTOR_NOT_CALLABLE  DETERMINISTIC_TEST  DETERMINISTIC_TEST_NO_RESULT  ENUM_DUP  ENUM_NOT_CONSTANT  EXPECTED_THIS_TYPE  FUNCTION_MASKS_VARIABLE  HIDDEN_INTERFACE_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY_MISMATCH  ILLEGAL_IMPLICIT_CAST  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE  INEXISTENT_ENUM_ELEMENT  INEXISTENT_PROPERTY  INTERFACE_FUNCTION_NOT_EMPTY  INTERFACE_METHOD_OVERRIDE  INVALID_INTERFACE_MEMBER_DECLARATION  MULTIPLE_VAR_DEF  NOT_A_CONSTRUCTOR  NOT_CALLABLE  UNEXPECTED_TOKEN  UNKNOWN_EXPR_TYPE  UNKNOWN_OVERRIDE  UNRESOLVED_TYPE  WRONG_ARGUMENT_COUNT  diagnosticType  InferJSDocInfo  inferJSDocInfo  	projects/Closure66/src/com/google/javascript/jscomp/TypeCheck.java	0.21320071635561041	939	939	2	replace	Node  rightChild  =  t.getScope().getOwnSlot(object.getString());	  Node    rightChild    =    t.getScope().getOwnSlot(lvalue.getString());    	non-compiled	[CE]  orphaned  case	47	None	replace
220	[BUG]  [BUGGY]  Node  rightChild  =  leftType.restrictByNotNullOrUndefined(),  t.getModule());  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      Var  var  =  t.getScope().getVar(lvalue.getString());  if  (var  !=  null)  {  if  (var.isTypeInferred())  {  return;  }  }  }  JSType  leftType  =  getJSType(lvalue);      [BUGGY]  Node  rightChild  =  leftType.restrictByNotNullOrUndefined(),  t.getModule());  [BUGGY]      JSType  rightType  =  getJSType(rightChild);  if  (validator.expectCanAssignTo(  t,  assign,  rightType,  leftType,       "assignment     "))  {  ensureTyped(t,  assign,  rightType);  }  else  {  ensureTyped(t,  assign);  }  }  [CLASS]  TypeCheck  [METHOD]  visitAssign  [RETURN_TYPE]  void  NodeTraversal  t  Node  assign  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  jsType  leftType  objectJsType  rightType  rvalueType  NodeTraversal  t  DiagnosticGroup  ALL_DIAGNOSTICS  CheckLevel  reportMissingOverride  reportUnknownTypes  Var  var  Node  assign  lvalue  object  object2  rightChild  rvalue  FunctionType  functionType  ScopeCreator  scopeCreator  String  OVERRIDING_PROTOTYPE_WITH_NON_OBJECT  functionPrivateName  message  property  property2  JSDocInfo  info  int  noTypeCheckSection  nullCount  typedCount  unknownCount  TypeValidator  validator  ObjectType  type  AbstractCompiler  compiler  JSTypeRegistry  typeRegistry  boolean  enterSection  externs  inExterns  report  reportMissingProperties  typeable  Scope  outerScope  topScope  DiagnosticType  BAD_DELETE  BAD_IMPLEMENTED_TYPE  BIT_OPERATION  CONFLICTING_EXTENDED_TYPE  CONFLICTING_IMPLEMENTED_TYPE  CONSTRUCTOR_NOT_CALLABLE  DETERMINISTIC_TEST  DETERMINISTIC_TEST_NO_RESULT  ENUM_DUP  ENUM_NOT_CONSTANT  EXPECTED_THIS_TYPE  FUNCTION_MASKS_VARIABLE  HIDDEN_INTERFACE_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY_MISMATCH  ILLEGAL_IMPLICIT_CAST  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE  INEXISTENT_ENUM_ELEMENT  INEXISTENT_PROPERTY  INTERFACE_FUNCTION_NOT_EMPTY  INTERFACE_METHOD_OVERRIDE  INVALID_INTERFACE_MEMBER_DECLARATION  MULTIPLE_VAR_DEF  NOT_A_CONSTRUCTOR  NOT_CALLABLE  UNEXPECTED_TOKEN  UNKNOWN_EXPR_TYPE  UNKNOWN_OVERRIDE  UNRESOLVED_TYPE  WRONG_ARGUMENT_COUNT  diagnosticType  InferJSDocInfo  inferJSDocInfo  	projects/Closure66/src/com/google/javascript/jscomp/TypeCheck.java	0.21320071635561041	939	939	2	replace	Node  rightChild  =  leftType.restrictByNotNullOrUndefined(),  t.getModule());	  Node    rightChild    =    leftType.restrictByNotNullOrUndefined();    	non-compiled	[CE]  orphaned  case	44	None	replace
221	[BUG]  [BUGGY]  Node  rightChild  =  leftType.restrictByNotNullOrUndefined(),  var.getString());  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      Var  var  =  t.getScope().getVar(lvalue.getString());  if  (var  !=  null)  {  if  (var.isTypeInferred())  {  return;  }  }  }  JSType  leftType  =  getJSType(lvalue);      [BUGGY]  Node  rightChild  =  leftType.restrictByNotNullOrUndefined(),  var.getString());  [BUGGY]      JSType  rightType  =  getJSType(rightChild);  if  (validator.expectCanAssignTo(  t,  assign,  rightType,  leftType,       "assignment     "))  {  ensureTyped(t,  assign,  rightType);  }  else  {  ensureTyped(t,  assign);  }  }  [CLASS]  TypeCheck  [METHOD]  visitAssign  [RETURN_TYPE]  void  NodeTraversal  t  Node  assign  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  jsType  leftType  objectJsType  rightType  rvalueType  NodeTraversal  t  DiagnosticGroup  ALL_DIAGNOSTICS  CheckLevel  reportMissingOverride  reportUnknownTypes  Var  var  Node  assign  lvalue  object  object2  rightChild  rvalue  FunctionType  functionType  ScopeCreator  scopeCreator  String  OVERRIDING_PROTOTYPE_WITH_NON_OBJECT  functionPrivateName  message  property  property2  JSDocInfo  info  int  noTypeCheckSection  nullCount  typedCount  unknownCount  TypeValidator  validator  ObjectType  type  AbstractCompiler  compiler  JSTypeRegistry  typeRegistry  boolean  enterSection  externs  inExterns  report  reportMissingProperties  typeable  Scope  outerScope  topScope  DiagnosticType  BAD_DELETE  BAD_IMPLEMENTED_TYPE  BIT_OPERATION  CONFLICTING_EXTENDED_TYPE  CONFLICTING_IMPLEMENTED_TYPE  CONSTRUCTOR_NOT_CALLABLE  DETERMINISTIC_TEST  DETERMINISTIC_TEST_NO_RESULT  ENUM_DUP  ENUM_NOT_CONSTANT  EXPECTED_THIS_TYPE  FUNCTION_MASKS_VARIABLE  HIDDEN_INTERFACE_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY_MISMATCH  ILLEGAL_IMPLICIT_CAST  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE  INEXISTENT_ENUM_ELEMENT  INEXISTENT_PROPERTY  INTERFACE_FUNCTION_NOT_EMPTY  INTERFACE_METHOD_OVERRIDE  INVALID_INTERFACE_MEMBER_DECLARATION  MULTIPLE_VAR_DEF  NOT_A_CONSTRUCTOR  NOT_CALLABLE  UNEXPECTED_TOKEN  UNKNOWN_EXPR_TYPE  UNKNOWN_OVERRIDE  UNRESOLVED_TYPE  WRONG_ARGUMENT_COUNT  diagnosticType  InferJSDocInfo  inferJSDocInfo  	projects/Closure66/src/com/google/javascript/jscomp/TypeCheck.java	0.21320071635561041	939	939	2	replace	Node  rightChild  =  leftType.restrictByNotNullOrUndefined(),  var.getString());	  Node    rightChild    =    leftType.restrictByNotNullOrUndefined();    	non-compiled	[CE]  orphaned  case	44	None	replace
222	[BUG]  [BUGGY]  Node  rightChild  =  leftType.restrictByNotNullOrUndefined(),  lvalue.getString());  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      Var  var  =  t.getScope().getVar(lvalue.getString());  if  (var  !=  null)  {  if  (var.isTypeInferred())  {  return;  }  }  }  JSType  leftType  =  getJSType(lvalue);      [BUGGY]  Node  rightChild  =  leftType.restrictByNotNullOrUndefined(),  lvalue.getString());  [BUGGY]      JSType  rightType  =  getJSType(rightChild);  if  (validator.expectCanAssignTo(  t,  assign,  rightType,  leftType,       "assignment     "))  {  ensureTyped(t,  assign,  rightType);  }  else  {  ensureTyped(t,  assign);  }  }  [CLASS]  TypeCheck  [METHOD]  visitAssign  [RETURN_TYPE]  void  NodeTraversal  t  Node  assign  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  jsType  leftType  objectJsType  rightType  rvalueType  NodeTraversal  t  DiagnosticGroup  ALL_DIAGNOSTICS  CheckLevel  reportMissingOverride  reportUnknownTypes  Var  var  Node  assign  lvalue  object  object2  rightChild  rvalue  FunctionType  functionType  ScopeCreator  scopeCreator  String  OVERRIDING_PROTOTYPE_WITH_NON_OBJECT  functionPrivateName  message  property  property2  JSDocInfo  info  int  noTypeCheckSection  nullCount  typedCount  unknownCount  TypeValidator  validator  ObjectType  type  AbstractCompiler  compiler  JSTypeRegistry  typeRegistry  boolean  enterSection  externs  inExterns  report  reportMissingProperties  typeable  Scope  outerScope  topScope  DiagnosticType  BAD_DELETE  BAD_IMPLEMENTED_TYPE  BIT_OPERATION  CONFLICTING_EXTENDED_TYPE  CONFLICTING_IMPLEMENTED_TYPE  CONSTRUCTOR_NOT_CALLABLE  DETERMINISTIC_TEST  DETERMINISTIC_TEST_NO_RESULT  ENUM_DUP  ENUM_NOT_CONSTANT  EXPECTED_THIS_TYPE  FUNCTION_MASKS_VARIABLE  HIDDEN_INTERFACE_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY_MISMATCH  ILLEGAL_IMPLICIT_CAST  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE  INEXISTENT_ENUM_ELEMENT  INEXISTENT_PROPERTY  INTERFACE_FUNCTION_NOT_EMPTY  INTERFACE_METHOD_OVERRIDE  INVALID_INTERFACE_MEMBER_DECLARATION  MULTIPLE_VAR_DEF  NOT_A_CONSTRUCTOR  NOT_CALLABLE  UNEXPECTED_TOKEN  UNKNOWN_EXPR_TYPE  UNKNOWN_OVERRIDE  UNRESOLVED_TYPE  WRONG_ARGUMENT_COUNT  diagnosticType  InferJSDocInfo  inferJSDocInfo  	projects/Closure66/src/com/google/javascript/jscomp/TypeCheck.java	0.21320071635561041	939	939	2	replace	Node  rightChild  =  leftType.restrictByNotNullOrUndefined(),  lvalue.getString());	  Node    rightChild    =    leftType.restrictByNotNullOrUndefined();    	non-compiled	[CE]  orphaned  case	44	None	replace
223	[BUG]  [BUGGY]  Node  rightChild  =  leftType.removeFirstChild(),  assign;  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      Var  var  =  t.getScope().getVar(lvalue.getString());  if  (var  !=  null)  {  if  (var.isTypeInferred())  {  return;  }  }  }  JSType  leftType  =  getJSType(lvalue);      [BUGGY]  Node  rightChild  =  leftType.removeFirstChild(),  assign;  [BUGGY]      JSType  rightType  =  getJSType(rightChild);  if  (validator.expectCanAssignTo(  t,  assign,  rightType,  leftType,       "assignment     "))  {  ensureTyped(t,  assign,  rightType);  }  else  {  ensureTyped(t,  assign);  }  }  [CLASS]  TypeCheck  [METHOD]  visitAssign  [RETURN_TYPE]  void  NodeTraversal  t  Node  assign  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  jsType  leftType  objectJsType  rightType  rvalueType  NodeTraversal  t  DiagnosticGroup  ALL_DIAGNOSTICS  CheckLevel  reportMissingOverride  reportUnknownTypes  Var  var  Node  assign  lvalue  object  object2  rightChild  rvalue  FunctionType  functionType  ScopeCreator  scopeCreator  String  OVERRIDING_PROTOTYPE_WITH_NON_OBJECT  functionPrivateName  message  property  property2  JSDocInfo  info  int  noTypeCheckSection  nullCount  typedCount  unknownCount  TypeValidator  validator  ObjectType  type  AbstractCompiler  compiler  JSTypeRegistry  typeRegistry  boolean  enterSection  externs  inExterns  report  reportMissingProperties  typeable  Scope  outerScope  topScope  DiagnosticType  BAD_DELETE  BAD_IMPLEMENTED_TYPE  BIT_OPERATION  CONFLICTING_EXTENDED_TYPE  CONFLICTING_IMPLEMENTED_TYPE  CONSTRUCTOR_NOT_CALLABLE  DETERMINISTIC_TEST  DETERMINISTIC_TEST_NO_RESULT  ENUM_DUP  ENUM_NOT_CONSTANT  EXPECTED_THIS_TYPE  FUNCTION_MASKS_VARIABLE  HIDDEN_INTERFACE_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY_MISMATCH  ILLEGAL_IMPLICIT_CAST  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE  INEXISTENT_ENUM_ELEMENT  INEXISTENT_PROPERTY  INTERFACE_FUNCTION_NOT_EMPTY  INTERFACE_METHOD_OVERRIDE  INVALID_INTERFACE_MEMBER_DECLARATION  MULTIPLE_VAR_DEF  NOT_A_CONSTRUCTOR  NOT_CALLABLE  UNEXPECTED_TOKEN  UNKNOWN_EXPR_TYPE  UNKNOWN_OVERRIDE  UNRESOLVED_TYPE  WRONG_ARGUMENT_COUNT  diagnosticType  InferJSDocInfo  inferJSDocInfo  	projects/Closure66/src/com/google/javascript/jscomp/TypeCheck.java	0.21320071635561041	939	939	2	replace	Node  rightChild  =  leftType.removeFirstChild(),  assign;	  Node    rightChild    =    leftType.removeFirstChild();    	non-compiled	[CE]  orphaned  case	43	None	replace
224	[BUG]  [BUGGY]  Node  rightChild  =  object.getLowerCase();  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      Var  var  =  t.getScope().getVar(lvalue.getString());  if  (var  !=  null)  {  if  (var.isTypeInferred())  {  return;  }  }  }  JSType  leftType  =  getJSType(lvalue);      [BUGGY]  Node  rightChild  =  object.getLowerCase();  [BUGGY]      JSType  rightType  =  getJSType(rightChild);  if  (validator.expectCanAssignTo(  t,  assign,  rightType,  leftType,       "assignment     "))  {  ensureTyped(t,  assign,  rightType);  }  else  {  ensureTyped(t,  assign);  }  }  [CLASS]  TypeCheck  [METHOD]  visitAssign  [RETURN_TYPE]  void  NodeTraversal  t  Node  assign  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  jsType  leftType  objectJsType  rightType  rvalueType  NodeTraversal  t  DiagnosticGroup  ALL_DIAGNOSTICS  CheckLevel  reportMissingOverride  reportUnknownTypes  Var  var  Node  assign  lvalue  object  object2  rightChild  rvalue  FunctionType  functionType  ScopeCreator  scopeCreator  String  OVERRIDING_PROTOTYPE_WITH_NON_OBJECT  functionPrivateName  message  property  property2  JSDocInfo  info  int  noTypeCheckSection  nullCount  typedCount  unknownCount  TypeValidator  validator  ObjectType  type  AbstractCompiler  compiler  JSTypeRegistry  typeRegistry  boolean  enterSection  externs  inExterns  report  reportMissingProperties  typeable  Scope  outerScope  topScope  DiagnosticType  BAD_DELETE  BAD_IMPLEMENTED_TYPE  BIT_OPERATION  CONFLICTING_EXTENDED_TYPE  CONFLICTING_IMPLEMENTED_TYPE  CONSTRUCTOR_NOT_CALLABLE  DETERMINISTIC_TEST  DETERMINISTIC_TEST_NO_RESULT  ENUM_DUP  ENUM_NOT_CONSTANT  EXPECTED_THIS_TYPE  FUNCTION_MASKS_VARIABLE  HIDDEN_INTERFACE_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY_MISMATCH  ILLEGAL_IMPLICIT_CAST  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE  INEXISTENT_ENUM_ELEMENT  INEXISTENT_PROPERTY  INTERFACE_FUNCTION_NOT_EMPTY  INTERFACE_METHOD_OVERRIDE  INVALID_INTERFACE_MEMBER_DECLARATION  MULTIPLE_VAR_DEF  NOT_A_CONSTRUCTOR  NOT_CALLABLE  UNEXPECTED_TOKEN  UNKNOWN_EXPR_TYPE  UNKNOWN_OVERRIDE  UNRESOLVED_TYPE  WRONG_ARGUMENT_COUNT  diagnosticType  InferJSDocInfo  inferJSDocInfo  	projects/Closure66/src/com/google/javascript/jscomp/TypeCheck.java	0.21320071635561041	939	939	2	replace	Node  rightChild  =  object.getLowerCase();	  Node    rightChild    =    var.getLowerCase();    	non-compiled	[CE]  orphaned  case	30	None	replace
225	[BUG]  [BUGGY]  Node  rightChild  =  t.getScope().getRootNode(assign,  lvalue);  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      Var  var  =  t.getScope().getVar(lvalue.getString());  if  (var  !=  null)  {  if  (var.isTypeInferred())  {  return;  }  }  }  JSType  leftType  =  getJSType(lvalue);      [BUGGY]  Node  rightChild  =  t.getScope().getRootNode(assign,  lvalue);  [BUGGY]      JSType  rightType  =  getJSType(rightChild);  if  (validator.expectCanAssignTo(  t,  assign,  rightType,  leftType,       "assignment     "))  {  ensureTyped(t,  assign,  rightType);  }  else  {  ensureTyped(t,  assign);  }  }  [CLASS]  TypeCheck  [METHOD]  visitAssign  [RETURN_TYPE]  void  NodeTraversal  t  Node  assign  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  jsType  leftType  objectJsType  rightType  rvalueType  NodeTraversal  t  DiagnosticGroup  ALL_DIAGNOSTICS  CheckLevel  reportMissingOverride  reportUnknownTypes  Var  var  Node  assign  lvalue  object  object2  rightChild  rvalue  FunctionType  functionType  ScopeCreator  scopeCreator  String  OVERRIDING_PROTOTYPE_WITH_NON_OBJECT  functionPrivateName  message  property  property2  JSDocInfo  info  int  noTypeCheckSection  nullCount  typedCount  unknownCount  TypeValidator  validator  ObjectType  type  AbstractCompiler  compiler  JSTypeRegistry  typeRegistry  boolean  enterSection  externs  inExterns  report  reportMissingProperties  typeable  Scope  outerScope  topScope  DiagnosticType  BAD_DELETE  BAD_IMPLEMENTED_TYPE  BIT_OPERATION  CONFLICTING_EXTENDED_TYPE  CONFLICTING_IMPLEMENTED_TYPE  CONSTRUCTOR_NOT_CALLABLE  DETERMINISTIC_TEST  DETERMINISTIC_TEST_NO_RESULT  ENUM_DUP  ENUM_NOT_CONSTANT  EXPECTED_THIS_TYPE  FUNCTION_MASKS_VARIABLE  HIDDEN_INTERFACE_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY_MISMATCH  ILLEGAL_IMPLICIT_CAST  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE  INEXISTENT_ENUM_ELEMENT  INEXISTENT_PROPERTY  INTERFACE_FUNCTION_NOT_EMPTY  INTERFACE_METHOD_OVERRIDE  INVALID_INTERFACE_MEMBER_DECLARATION  MULTIPLE_VAR_DEF  NOT_A_CONSTRUCTOR  NOT_CALLABLE  UNEXPECTED_TOKEN  UNKNOWN_EXPR_TYPE  UNKNOWN_OVERRIDE  UNRESOLVED_TYPE  WRONG_ARGUMENT_COUNT  diagnosticType  InferJSDocInfo  inferJSDocInfo  	projects/Closure66/src/com/google/javascript/jscomp/TypeCheck.java	0.21320071635561041	939	939	2	replace	Node  rightChild  =  t.getScope().getRootNode(assign,  lvalue);	  Node    rightChild    =    t.getScope().getRootNode(lvalue);    	non-compiled	[CE]  orphaned  case	19	None	replace
226	[BUG]  [BUGGY]  Node  rightChild  =  assign.removeFirstChild();  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      Var  var  =  t.getScope().getVar(lvalue.getString());  if  (var  !=  null)  {  if  (var.isTypeInferred())  {  return;  }  }  }  JSType  leftType  =  getJSType(lvalue);      [BUGGY]  Node  rightChild  =  assign.removeFirstChild();  [BUGGY]      JSType  rightType  =  getJSType(rightChild);  if  (validator.expectCanAssignTo(  t,  assign,  rightType,  leftType,       "assignment     "))  {  ensureTyped(t,  assign,  rightType);  }  else  {  ensureTyped(t,  assign);  }  }  [CLASS]  TypeCheck  [METHOD]  visitAssign  [RETURN_TYPE]  void  NodeTraversal  t  Node  assign  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  jsType  leftType  objectJsType  rightType  rvalueType  NodeTraversal  t  DiagnosticGroup  ALL_DIAGNOSTICS  CheckLevel  reportMissingOverride  reportUnknownTypes  Var  var  Node  assign  lvalue  object  object2  rightChild  rvalue  FunctionType  functionType  ScopeCreator  scopeCreator  String  OVERRIDING_PROTOTYPE_WITH_NON_OBJECT  functionPrivateName  message  property  property2  JSDocInfo  info  int  noTypeCheckSection  nullCount  typedCount  unknownCount  TypeValidator  validator  ObjectType  type  AbstractCompiler  compiler  JSTypeRegistry  typeRegistry  boolean  enterSection  externs  inExterns  report  reportMissingProperties  typeable  Scope  outerScope  topScope  DiagnosticType  BAD_DELETE  BAD_IMPLEMENTED_TYPE  BIT_OPERATION  CONFLICTING_EXTENDED_TYPE  CONFLICTING_IMPLEMENTED_TYPE  CONSTRUCTOR_NOT_CALLABLE  DETERMINISTIC_TEST  DETERMINISTIC_TEST_NO_RESULT  ENUM_DUP  ENUM_NOT_CONSTANT  EXPECTED_THIS_TYPE  FUNCTION_MASKS_VARIABLE  HIDDEN_INTERFACE_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY_MISMATCH  ILLEGAL_IMPLICIT_CAST  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE  INEXISTENT_ENUM_ELEMENT  INEXISTENT_PROPERTY  INTERFACE_FUNCTION_NOT_EMPTY  INTERFACE_METHOD_OVERRIDE  INVALID_INTERFACE_MEMBER_DECLARATION  MULTIPLE_VAR_DEF  NOT_A_CONSTRUCTOR  NOT_CALLABLE  UNEXPECTED_TOKEN  UNKNOWN_EXPR_TYPE  UNKNOWN_OVERRIDE  UNRESOLVED_TYPE  WRONG_ARGUMENT_COUNT  diagnosticType  InferJSDocInfo  inferJSDocInfo  	projects/Closure66/src/com/google/javascript/jscomp/TypeCheck.java	0.21320071635561041	939	939	2	replace	Node  rightChild  =  assign.removeFirstChild();	  Node    rightChild    =    lvalue.removeFirstChild();    	non-compiled	[CE]  orphaned  case	49	None	replace
227	[BUG]  [BUGGY]  Node  rightChild  =  leftType!=  null?  leftType.getLastChild()  :  lvalue.getLastChild();  [CE]  orphaned  case  [FE]            AssertionFailedError      [CONTEXT]      Var  var  =  t.getScope().getVar(lvalue.getString());  if  (var  !=  null)  {  if  (var.isTypeInferred())  {  return;  }  }  }  JSType  leftType  =  getJSType(lvalue);      [BUGGY]  Node  rightChild  =  leftType!=  null?  leftType.getLastChild()  :  lvalue.getLastChild();  [BUGGY]      JSType  rightType  =  getJSType(rightChild);  if  (validator.expectCanAssignTo(  t,  assign,  rightType,  leftType,       "assignment     "))  {  ensureTyped(t,  assign,  rightType);  }  else  {  ensureTyped(t,  assign);  }  }  [CLASS]  TypeCheck  [METHOD]  visitAssign  [RETURN_TYPE]  void  NodeTraversal  t  Node  assign  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  jsType  leftType  objectJsType  rightType  rvalueType  NodeTraversal  t  DiagnosticGroup  ALL_DIAGNOSTICS  CheckLevel  reportMissingOverride  reportUnknownTypes  Var  var  Node  assign  lvalue  object  object2  rightChild  rvalue  FunctionType  functionType  ScopeCreator  scopeCreator  String  OVERRIDING_PROTOTYPE_WITH_NON_OBJECT  functionPrivateName  message  property  property2  JSDocInfo  info  int  noTypeCheckSection  nullCount  typedCount  unknownCount  TypeValidator  validator  ObjectType  type  AbstractCompiler  compiler  JSTypeRegistry  typeRegistry  boolean  enterSection  externs  inExterns  report  reportMissingProperties  typeable  Scope  outerScope  topScope  DiagnosticType  BAD_DELETE  BAD_IMPLEMENTED_TYPE  BIT_OPERATION  CONFLICTING_EXTENDED_TYPE  CONFLICTING_IMPLEMENTED_TYPE  CONSTRUCTOR_NOT_CALLABLE  DETERMINISTIC_TEST  DETERMINISTIC_TEST_NO_RESULT  ENUM_DUP  ENUM_NOT_CONSTANT  EXPECTED_THIS_TYPE  FUNCTION_MASKS_VARIABLE  HIDDEN_INTERFACE_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY_MISMATCH  ILLEGAL_IMPLICIT_CAST  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE  INEXISTENT_ENUM_ELEMENT  INEXISTENT_PROPERTY  INTERFACE_FUNCTION_NOT_EMPTY  INTERFACE_METHOD_OVERRIDE  INVALID_INTERFACE_MEMBER_DECLARATION  MULTIPLE_VAR_DEF  NOT_A_CONSTRUCTOR  NOT_CALLABLE  UNEXPECTED_TOKEN  UNKNOWN_EXPR_TYPE  UNKNOWN_OVERRIDE  UNRESOLVED_TYPE  WRONG_ARGUMENT_COUNT  diagnosticType  InferJSDocInfo  inferJSDocInfo  	projects/Closure66/src/com/google/javascript/jscomp/TypeCheck.java	0.21320071635561041	939	939	2	replace	Node  rightChild  =  leftType!=  null?  leftType.getLastChild()  :  lvalue.getLastChild();	  Node    rightChild    =    leftType.getFirstChild();    	non-compiled	[CE]  orphaned  case	26	None	replace
228	[BUG]  [BUGGY]  JSType  rightType  =  getJSType(right);  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      Var  var  =  t.getScope().getVar(lvalue.getString());  if  (var  !=  null)  {  if  (var.isTypeInferred())  {  return;  }  }  }  JSType  leftType  =  getJSType(lvalue);      [BUGGY]  JSType  rightType  =  getJSType(right);  [BUGGY]      JSType  rightType  =  getJSType(rightChild);  if  (validator.expectCanAssignTo(  t,  assign,  rightType,  leftType,       "assignment     "))  {  ensureTyped(t,  assign,  rightType);  }  else  {  ensureTyped(t,  assign);  }  }  [CLASS]  TypeCheck  [METHOD]  visitAssign  [RETURN_TYPE]  void  NodeTraversal  t  Node  assign  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  jsType  leftType  objectJsType  rightType  rvalueType  NodeTraversal  t  DiagnosticGroup  ALL_DIAGNOSTICS  CheckLevel  reportMissingOverride  reportUnknownTypes  Var  var  Node  assign  lvalue  object  object2  rightChild  rvalue  FunctionType  functionType  ScopeCreator  scopeCreator  String  OVERRIDING_PROTOTYPE_WITH_NON_OBJECT  functionPrivateName  message  property  property2  JSDocInfo  info  int  noTypeCheckSection  nullCount  typedCount  unknownCount  TypeValidator  validator  ObjectType  type  AbstractCompiler  compiler  JSTypeRegistry  typeRegistry  boolean  enterSection  externs  inExterns  report  reportMissingProperties  typeable  Scope  outerScope  topScope  DiagnosticType  BAD_DELETE  BAD_IMPLEMENTED_TYPE  BIT_OPERATION  CONFLICTING_EXTENDED_TYPE  CONFLICTING_IMPLEMENTED_TYPE  CONSTRUCTOR_NOT_CALLABLE  DETERMINISTIC_TEST  DETERMINISTIC_TEST_NO_RESULT  ENUM_DUP  ENUM_NOT_CONSTANT  EXPECTED_THIS_TYPE  FUNCTION_MASKS_VARIABLE  HIDDEN_INTERFACE_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY_MISMATCH  ILLEGAL_IMPLICIT_CAST  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE  INEXISTENT_ENUM_ELEMENT  INEXISTENT_PROPERTY  INTERFACE_FUNCTION_NOT_EMPTY  INTERFACE_METHOD_OVERRIDE  INVALID_INTERFACE_MEMBER_DECLARATION  MULTIPLE_VAR_DEF  NOT_A_CONSTRUCTOR  NOT_CALLABLE  UNEXPECTED_TOKEN  UNKNOWN_EXPR_TYPE  UNKNOWN_OVERRIDE  UNRESOLVED_TYPE  WRONG_ARGUMENT_COUNT  diagnosticType  InferJSDocInfo  inferJSDocInfo  	projects/Closure66/src/com/google/javascript/jscomp/TypeCheck.java	0.21320071635561041	939	939	2	replace	JSType  rightType  =  getJSType(right);	  JSType    rightType    =    getJSType(rightChild);    	non-compiled	[CE]  orphaned  case	16	None	replace
229	[BUG]  [BUGGY]  JSType  rightType  =  getJSType(assign);  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]      Var  var  =  t.getScope().getVar(lvalue.getString());  if  (var  !=  null)  {  if  (var.isTypeInferred())  {  return;  }  }  }  JSType  leftType  =  getJSType(lvalue);      [BUGGY]  JSType  rightType  =  getJSType(assign);  [BUGGY]      JSType  rightType  =  getJSType(rightChild);  if  (validator.expectCanAssignTo(  t,  assign,  rightType,  leftType,       "assignment     "))  {  ensureTyped(t,  assign,  rightType);  }  else  {  ensureTyped(t,  assign);  }  }  [CLASS]  TypeCheck  [METHOD]  visitAssign  [RETURN_TYPE]  void  NodeTraversal  t  Node  assign  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  jsType  leftType  objectJsType  rightType  rvalueType  NodeTraversal  t  DiagnosticGroup  ALL_DIAGNOSTICS  CheckLevel  reportMissingOverride  reportUnknownTypes  Var  var  Node  assign  lvalue  object  object2  rightChild  rvalue  FunctionType  functionType  ScopeCreator  scopeCreator  String  OVERRIDING_PROTOTYPE_WITH_NON_OBJECT  functionPrivateName  message  property  property2  JSDocInfo  info  int  noTypeCheckSection  nullCount  typedCount  unknownCount  TypeValidator  validator  ObjectType  type  AbstractCompiler  compiler  JSTypeRegistry  typeRegistry  boolean  enterSection  externs  inExterns  report  reportMissingProperties  typeable  Scope  outerScope  topScope  DiagnosticType  BAD_DELETE  BAD_IMPLEMENTED_TYPE  BIT_OPERATION  CONFLICTING_EXTENDED_TYPE  CONFLICTING_IMPLEMENTED_TYPE  CONSTRUCTOR_NOT_CALLABLE  DETERMINISTIC_TEST  DETERMINISTIC_TEST_NO_RESULT  ENUM_DUP  ENUM_NOT_CONSTANT  EXPECTED_THIS_TYPE  FUNCTION_MASKS_VARIABLE  HIDDEN_INTERFACE_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY_MISMATCH  ILLEGAL_IMPLICIT_CAST  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE  INEXISTENT_ENUM_ELEMENT  INEXISTENT_PROPERTY  INTERFACE_FUNCTION_NOT_EMPTY  INTERFACE_METHOD_OVERRIDE  INVALID_INTERFACE_MEMBER_DECLARATION  MULTIPLE_VAR_DEF  NOT_A_CONSTRUCTOR  NOT_CALLABLE  UNEXPECTED_TOKEN  UNKNOWN_EXPR_TYPE  UNKNOWN_OVERRIDE  UNRESOLVED_TYPE  WRONG_ARGUMENT_COUNT  diagnosticType  InferJSDocInfo  inferJSDocInfo  	projects/Closure66/src/com/google/javascript/jscomp/TypeCheck.java	0.21320071635561041	939	939	2	replace	JSType  rightType  =  getJSType(assign);	  JSType    rightType    =    getJSType(rightChild);    	non-compiled	[CE]  orphaned  case	16	None	replace
230	[BUG]  [BUGGY]  Node  rightChild  =  var!=  null?  leftType.getLastChild()  :  var.getString();  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      Var  var  =  t.getScope().getVar(lvalue.getString());  if  (var  !=  null)  {  if  (var.isTypeInferred())  {  return;  }  }  }  JSType  leftType  =  getJSType(lvalue);      [BUGGY]  Node  rightChild  =  var!=  null?  leftType.getLastChild()  :  var.getString();  [BUGGY]      JSType  rightType  =  getJSType(rightChild);  if  (validator.expectCanAssignTo(  t,  assign,  rightType,  leftType,       "assignment     "))  {  ensureTyped(t,  assign,  rightType);  }  else  {  ensureTyped(t,  assign);  }  }  [CLASS]  TypeCheck  [METHOD]  visitAssign  [RETURN_TYPE]  void  NodeTraversal  t  Node  assign  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  jsType  leftType  objectJsType  rightType  rvalueType  NodeTraversal  t  DiagnosticGroup  ALL_DIAGNOSTICS  CheckLevel  reportMissingOverride  reportUnknownTypes  Var  var  Node  assign  lvalue  object  object2  rightChild  rvalue  FunctionType  functionType  ScopeCreator  scopeCreator  String  OVERRIDING_PROTOTYPE_WITH_NON_OBJECT  functionPrivateName  message  property  property2  JSDocInfo  info  int  noTypeCheckSection  nullCount  typedCount  unknownCount  TypeValidator  validator  ObjectType  type  AbstractCompiler  compiler  JSTypeRegistry  typeRegistry  boolean  enterSection  externs  inExterns  report  reportMissingProperties  typeable  Scope  outerScope  topScope  DiagnosticType  BAD_DELETE  BAD_IMPLEMENTED_TYPE  BIT_OPERATION  CONFLICTING_EXTENDED_TYPE  CONFLICTING_IMPLEMENTED_TYPE  CONSTRUCTOR_NOT_CALLABLE  DETERMINISTIC_TEST  DETERMINISTIC_TEST_NO_RESULT  ENUM_DUP  ENUM_NOT_CONSTANT  EXPECTED_THIS_TYPE  FUNCTION_MASKS_VARIABLE  HIDDEN_INTERFACE_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY_MISMATCH  ILLEGAL_IMPLICIT_CAST  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE  INEXISTENT_ENUM_ELEMENT  INEXISTENT_PROPERTY  INTERFACE_FUNCTION_NOT_EMPTY  INTERFACE_METHOD_OVERRIDE  INVALID_INTERFACE_MEMBER_DECLARATION  MULTIPLE_VAR_DEF  NOT_A_CONSTRUCTOR  NOT_CALLABLE  UNEXPECTED_TOKEN  UNKNOWN_EXPR_TYPE  UNKNOWN_OVERRIDE  UNRESOLVED_TYPE  WRONG_ARGUMENT_COUNT  diagnosticType  InferJSDocInfo  inferJSDocInfo  	projects/Closure66/src/com/google/javascript/jscomp/TypeCheck.java	0.21320071635561041	939	939	2	replace	Node  rightChild  =  var!=  null?  leftType.getLastChild()  :  var.getString();	  Node    rightChild    =    leftType!=    null?    leftType.getLastChild()    :    var.getString();    	non-compiled	[CE]  orphaned  case	29	None	replace
231	[BUG]  [BUGGY]  Node  rightChild  =  t.getScope().getRootNode(assign,  null);  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      Var  var  =  t.getScope().getVar(lvalue.getString());  if  (var  !=  null)  {  if  (var.isTypeInferred())  {  return;  }  }  }  JSType  leftType  =  getJSType(lvalue);      [BUGGY]  Node  rightChild  =  t.getScope().getRootNode(assign,  null);  [BUGGY]      JSType  rightType  =  getJSType(rightChild);  if  (validator.expectCanAssignTo(  t,  assign,  rightType,  leftType,       "assignment     "))  {  ensureTyped(t,  assign,  rightType);  }  else  {  ensureTyped(t,  assign);  }  }  [CLASS]  TypeCheck  [METHOD]  visitAssign  [RETURN_TYPE]  void  NodeTraversal  t  Node  assign  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  jsType  leftType  objectJsType  rightType  rvalueType  NodeTraversal  t  DiagnosticGroup  ALL_DIAGNOSTICS  CheckLevel  reportMissingOverride  reportUnknownTypes  Var  var  Node  assign  lvalue  object  object2  rightChild  rvalue  FunctionType  functionType  ScopeCreator  scopeCreator  String  OVERRIDING_PROTOTYPE_WITH_NON_OBJECT  functionPrivateName  message  property  property2  JSDocInfo  info  int  noTypeCheckSection  nullCount  typedCount  unknownCount  TypeValidator  validator  ObjectType  type  AbstractCompiler  compiler  JSTypeRegistry  typeRegistry  boolean  enterSection  externs  inExterns  report  reportMissingProperties  typeable  Scope  outerScope  topScope  DiagnosticType  BAD_DELETE  BAD_IMPLEMENTED_TYPE  BIT_OPERATION  CONFLICTING_EXTENDED_TYPE  CONFLICTING_IMPLEMENTED_TYPE  CONSTRUCTOR_NOT_CALLABLE  DETERMINISTIC_TEST  DETERMINISTIC_TEST_NO_RESULT  ENUM_DUP  ENUM_NOT_CONSTANT  EXPECTED_THIS_TYPE  FUNCTION_MASKS_VARIABLE  HIDDEN_INTERFACE_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY_MISMATCH  ILLEGAL_IMPLICIT_CAST  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE  INEXISTENT_ENUM_ELEMENT  INEXISTENT_PROPERTY  INTERFACE_FUNCTION_NOT_EMPTY  INTERFACE_METHOD_OVERRIDE  INVALID_INTERFACE_MEMBER_DECLARATION  MULTIPLE_VAR_DEF  NOT_A_CONSTRUCTOR  NOT_CALLABLE  UNEXPECTED_TOKEN  UNKNOWN_EXPR_TYPE  UNKNOWN_OVERRIDE  UNRESOLVED_TYPE  WRONG_ARGUMENT_COUNT  diagnosticType  InferJSDocInfo  inferJSDocInfo  	projects/Closure66/src/com/google/javascript/jscomp/TypeCheck.java	0.21320071635561041	939	939	2	replace	Node  rightChild  =  t.getScope().getRootNode(assign,  null);	  Node    rightChild    =    t.getScope().getRootNode(null);    	non-compiled	[CE]  orphaned  case	21	None	replace
232	[BUG]  [BUGGY]  Node  rightChild  =  t.getParent();  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      Var  var  =  t.getScope().getVar(lvalue.getString());  if  (var  !=  null)  {  if  (var.isTypeInferred())  {  return;  }  }  }  JSType  leftType  =  getJSType(lvalue);      [BUGGY]  Node  rightChild  =  t.getParent();  [BUGGY]      JSType  rightType  =  getJSType(rightChild);  if  (validator.expectCanAssignTo(  t,  assign,  rightType,  leftType,       "assignment     "))  {  ensureTyped(t,  assign,  rightType);  }  else  {  ensureTyped(t,  assign);  }  }  [CLASS]  TypeCheck  [METHOD]  visitAssign  [RETURN_TYPE]  void  NodeTraversal  t  Node  assign  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  jsType  leftType  objectJsType  rightType  rvalueType  NodeTraversal  t  DiagnosticGroup  ALL_DIAGNOSTICS  CheckLevel  reportMissingOverride  reportUnknownTypes  Var  var  Node  assign  lvalue  object  object2  rightChild  rvalue  FunctionType  functionType  ScopeCreator  scopeCreator  String  OVERRIDING_PROTOTYPE_WITH_NON_OBJECT  functionPrivateName  message  property  property2  JSDocInfo  info  int  noTypeCheckSection  nullCount  typedCount  unknownCount  TypeValidator  validator  ObjectType  type  AbstractCompiler  compiler  JSTypeRegistry  typeRegistry  boolean  enterSection  externs  inExterns  report  reportMissingProperties  typeable  Scope  outerScope  topScope  DiagnosticType  BAD_DELETE  BAD_IMPLEMENTED_TYPE  BIT_OPERATION  CONFLICTING_EXTENDED_TYPE  CONFLICTING_IMPLEMENTED_TYPE  CONSTRUCTOR_NOT_CALLABLE  DETERMINISTIC_TEST  DETERMINISTIC_TEST_NO_RESULT  ENUM_DUP  ENUM_NOT_CONSTANT  EXPECTED_THIS_TYPE  FUNCTION_MASKS_VARIABLE  HIDDEN_INTERFACE_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY_MISMATCH  ILLEGAL_IMPLICIT_CAST  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE  INEXISTENT_ENUM_ELEMENT  INEXISTENT_PROPERTY  INTERFACE_FUNCTION_NOT_EMPTY  INTERFACE_METHOD_OVERRIDE  INVALID_INTERFACE_MEMBER_DECLARATION  MULTIPLE_VAR_DEF  NOT_A_CONSTRUCTOR  NOT_CALLABLE  UNEXPECTED_TOKEN  UNKNOWN_EXPR_TYPE  UNKNOWN_OVERRIDE  UNRESOLVED_TYPE  WRONG_ARGUMENT_COUNT  diagnosticType  InferJSDocInfo  inferJSDocInfo  	projects/Closure66/src/com/google/javascript/jscomp/TypeCheck.java	0.21320071635561041	939	939	2	replace	Node  rightChild  =  t.getParent();	  Node    rightChild    =    t.getNext();    	non-compiled	[CE]  orphaned  case	25	None	replace
233	[BUG]  [BUGGY]  Node  rightChild  =  t.getScope().getLeastChild(assign);  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      Var  var  =  t.getScope().getVar(lvalue.getString());  if  (var  !=  null)  {  if  (var.isTypeInferred())  {  return;  }  }  }  JSType  leftType  =  getJSType(lvalue);      [BUGGY]  Node  rightChild  =  t.getScope().getLeastChild(assign);  [BUGGY]      JSType  rightType  =  getJSType(rightChild);  if  (validator.expectCanAssignTo(  t,  assign,  rightType,  leftType,       "assignment     "))  {  ensureTyped(t,  assign,  rightType);  }  else  {  ensureTyped(t,  assign);  }  }  [CLASS]  TypeCheck  [METHOD]  visitAssign  [RETURN_TYPE]  void  NodeTraversal  t  Node  assign  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  jsType  leftType  objectJsType  rightType  rvalueType  NodeTraversal  t  DiagnosticGroup  ALL_DIAGNOSTICS  CheckLevel  reportMissingOverride  reportUnknownTypes  Var  var  Node  assign  lvalue  object  object2  rightChild  rvalue  FunctionType  functionType  ScopeCreator  scopeCreator  String  OVERRIDING_PROTOTYPE_WITH_NON_OBJECT  functionPrivateName  message  property  property2  JSDocInfo  info  int  noTypeCheckSection  nullCount  typedCount  unknownCount  TypeValidator  validator  ObjectType  type  AbstractCompiler  compiler  JSTypeRegistry  typeRegistry  boolean  enterSection  externs  inExterns  report  reportMissingProperties  typeable  Scope  outerScope  topScope  DiagnosticType  BAD_DELETE  BAD_IMPLEMENTED_TYPE  BIT_OPERATION  CONFLICTING_EXTENDED_TYPE  CONFLICTING_IMPLEMENTED_TYPE  CONSTRUCTOR_NOT_CALLABLE  DETERMINISTIC_TEST  DETERMINISTIC_TEST_NO_RESULT  ENUM_DUP  ENUM_NOT_CONSTANT  EXPECTED_THIS_TYPE  FUNCTION_MASKS_VARIABLE  HIDDEN_INTERFACE_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY_MISMATCH  ILLEGAL_IMPLICIT_CAST  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE  INEXISTENT_ENUM_ELEMENT  INEXISTENT_PROPERTY  INTERFACE_FUNCTION_NOT_EMPTY  INTERFACE_METHOD_OVERRIDE  INVALID_INTERFACE_MEMBER_DECLARATION  MULTIPLE_VAR_DEF  NOT_A_CONSTRUCTOR  NOT_CALLABLE  UNEXPECTED_TOKEN  UNKNOWN_EXPR_TYPE  UNKNOWN_OVERRIDE  UNRESOLVED_TYPE  WRONG_ARGUMENT_COUNT  diagnosticType  InferJSDocInfo  inferJSDocInfo  	projects/Closure66/src/com/google/javascript/jscomp/TypeCheck.java	0.21320071635561041	939	939	2	replace	Node  rightChild  =  t.getScope().getLeastChild(assign);	  Node    rightChild    =    t.getScope().getLeastChild();    	non-compiled	[CE]  orphaned  case	4	None	replace
234	[BUG]  [BUGGY]  Node  rightChild  =  t.getScope().getRawParentNode(null,  assign);  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      Var  var  =  t.getScope().getVar(lvalue.getString());  if  (var  !=  null)  {  if  (var.isTypeInferred())  {  return;  }  }  }  JSType  leftType  =  getJSType(lvalue);      [BUGGY]  Node  rightChild  =  t.getScope().getRawParentNode(null,  assign);  [BUGGY]      JSType  rightType  =  getJSType(rightChild);  if  (validator.expectCanAssignTo(  t,  assign,  rightType,  leftType,       "assignment     "))  {  ensureTyped(t,  assign,  rightType);  }  else  {  ensureTyped(t,  assign);  }  }  [CLASS]  TypeCheck  [METHOD]  visitAssign  [RETURN_TYPE]  void  NodeTraversal  t  Node  assign  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  jsType  leftType  objectJsType  rightType  rvalueType  NodeTraversal  t  DiagnosticGroup  ALL_DIAGNOSTICS  CheckLevel  reportMissingOverride  reportUnknownTypes  Var  var  Node  assign  lvalue  object  object2  rightChild  rvalue  FunctionType  functionType  ScopeCreator  scopeCreator  String  OVERRIDING_PROTOTYPE_WITH_NON_OBJECT  functionPrivateName  message  property  property2  JSDocInfo  info  int  noTypeCheckSection  nullCount  typedCount  unknownCount  TypeValidator  validator  ObjectType  type  AbstractCompiler  compiler  JSTypeRegistry  typeRegistry  boolean  enterSection  externs  inExterns  report  reportMissingProperties  typeable  Scope  outerScope  topScope  DiagnosticType  BAD_DELETE  BAD_IMPLEMENTED_TYPE  BIT_OPERATION  CONFLICTING_EXTENDED_TYPE  CONFLICTING_IMPLEMENTED_TYPE  CONSTRUCTOR_NOT_CALLABLE  DETERMINISTIC_TEST  DETERMINISTIC_TEST_NO_RESULT  ENUM_DUP  ENUM_NOT_CONSTANT  EXPECTED_THIS_TYPE  FUNCTION_MASKS_VARIABLE  HIDDEN_INTERFACE_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY_MISMATCH  ILLEGAL_IMPLICIT_CAST  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE  INEXISTENT_ENUM_ELEMENT  INEXISTENT_PROPERTY  INTERFACE_FUNCTION_NOT_EMPTY  INTERFACE_METHOD_OVERRIDE  INVALID_INTERFACE_MEMBER_DECLARATION  MULTIPLE_VAR_DEF  NOT_A_CONSTRUCTOR  NOT_CALLABLE  UNEXPECTED_TOKEN  UNKNOWN_EXPR_TYPE  UNKNOWN_OVERRIDE  UNRESOLVED_TYPE  WRONG_ARGUMENT_COUNT  diagnosticType  InferJSDocInfo  inferJSDocInfo  	projects/Closure66/src/com/google/javascript/jscomp/TypeCheck.java	0.21320071635561041	939	939	2	replace	Node  rightChild  =  t.getScope().getRawParentNode(null,  assign);	  Node    rightChild    =    t.getScope().getRawParentNode();    	non-compiled	[CE]  orphaned  case	23	None	replace
235	[BUG]  [BUGGY]  Node  rightChild  =  t.getScope().getRootNode(assign,  object);  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      Var  var  =  t.getScope().getVar(lvalue.getString());  if  (var  !=  null)  {  if  (var.isTypeInferred())  {  return;  }  }  }  JSType  leftType  =  getJSType(lvalue);      [BUGGY]  Node  rightChild  =  t.getScope().getRootNode(assign,  object);  [BUGGY]      JSType  rightType  =  getJSType(rightChild);  if  (validator.expectCanAssignTo(  t,  assign,  rightType,  leftType,       "assignment     "))  {  ensureTyped(t,  assign,  rightType);  }  else  {  ensureTyped(t,  assign);  }  }  [CLASS]  TypeCheck  [METHOD]  visitAssign  [RETURN_TYPE]  void  NodeTraversal  t  Node  assign  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  jsType  leftType  objectJsType  rightType  rvalueType  NodeTraversal  t  DiagnosticGroup  ALL_DIAGNOSTICS  CheckLevel  reportMissingOverride  reportUnknownTypes  Var  var  Node  assign  lvalue  object  object2  rightChild  rvalue  FunctionType  functionType  ScopeCreator  scopeCreator  String  OVERRIDING_PROTOTYPE_WITH_NON_OBJECT  functionPrivateName  message  property  property2  JSDocInfo  info  int  noTypeCheckSection  nullCount  typedCount  unknownCount  TypeValidator  validator  ObjectType  type  AbstractCompiler  compiler  JSTypeRegistry  typeRegistry  boolean  enterSection  externs  inExterns  report  reportMissingProperties  typeable  Scope  outerScope  topScope  DiagnosticType  BAD_DELETE  BAD_IMPLEMENTED_TYPE  BIT_OPERATION  CONFLICTING_EXTENDED_TYPE  CONFLICTING_IMPLEMENTED_TYPE  CONSTRUCTOR_NOT_CALLABLE  DETERMINISTIC_TEST  DETERMINISTIC_TEST_NO_RESULT  ENUM_DUP  ENUM_NOT_CONSTANT  EXPECTED_THIS_TYPE  FUNCTION_MASKS_VARIABLE  HIDDEN_INTERFACE_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY_MISMATCH  ILLEGAL_IMPLICIT_CAST  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE  INEXISTENT_ENUM_ELEMENT  INEXISTENT_PROPERTY  INTERFACE_FUNCTION_NOT_EMPTY  INTERFACE_METHOD_OVERRIDE  INVALID_INTERFACE_MEMBER_DECLARATION  MULTIPLE_VAR_DEF  NOT_A_CONSTRUCTOR  NOT_CALLABLE  UNEXPECTED_TOKEN  UNKNOWN_EXPR_TYPE  UNKNOWN_OVERRIDE  UNRESOLVED_TYPE  WRONG_ARGUMENT_COUNT  diagnosticType  InferJSDocInfo  inferJSDocInfo  	projects/Closure66/src/com/google/javascript/jscomp/TypeCheck.java	0.21320071635561041	939	939	2	replace	Node  rightChild  =  t.getScope().getRootNode(assign,  object);	  Node    rightChild    =    t.getScope().getRootNode(assign);    	non-compiled	[CE]  orphaned  case	22	None	replace
236	[BUG]  [BUGGY]  Node  rightChild  =  t.getScope().getRootNode(assign,  object2);  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      Var  var  =  t.getScope().getVar(lvalue.getString());  if  (var  !=  null)  {  if  (var.isTypeInferred())  {  return;  }  }  }  JSType  leftType  =  getJSType(lvalue);      [BUGGY]  Node  rightChild  =  t.getScope().getRootNode(assign,  object2);  [BUGGY]      JSType  rightType  =  getJSType(rightChild);  if  (validator.expectCanAssignTo(  t,  assign,  rightType,  leftType,       "assignment     "))  {  ensureTyped(t,  assign,  rightType);  }  else  {  ensureTyped(t,  assign);  }  }  [CLASS]  TypeCheck  [METHOD]  visitAssign  [RETURN_TYPE]  void  NodeTraversal  t  Node  assign  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  jsType  leftType  objectJsType  rightType  rvalueType  NodeTraversal  t  DiagnosticGroup  ALL_DIAGNOSTICS  CheckLevel  reportMissingOverride  reportUnknownTypes  Var  var  Node  assign  lvalue  object  object2  rightChild  rvalue  FunctionType  functionType  ScopeCreator  scopeCreator  String  OVERRIDING_PROTOTYPE_WITH_NON_OBJECT  functionPrivateName  message  property  property2  JSDocInfo  info  int  noTypeCheckSection  nullCount  typedCount  unknownCount  TypeValidator  validator  ObjectType  type  AbstractCompiler  compiler  JSTypeRegistry  typeRegistry  boolean  enterSection  externs  inExterns  report  reportMissingProperties  typeable  Scope  outerScope  topScope  DiagnosticType  BAD_DELETE  BAD_IMPLEMENTED_TYPE  BIT_OPERATION  CONFLICTING_EXTENDED_TYPE  CONFLICTING_IMPLEMENTED_TYPE  CONSTRUCTOR_NOT_CALLABLE  DETERMINISTIC_TEST  DETERMINISTIC_TEST_NO_RESULT  ENUM_DUP  ENUM_NOT_CONSTANT  EXPECTED_THIS_TYPE  FUNCTION_MASKS_VARIABLE  HIDDEN_INTERFACE_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY_MISMATCH  ILLEGAL_IMPLICIT_CAST  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE  INEXISTENT_ENUM_ELEMENT  INEXISTENT_PROPERTY  INTERFACE_FUNCTION_NOT_EMPTY  INTERFACE_METHOD_OVERRIDE  INVALID_INTERFACE_MEMBER_DECLARATION  MULTIPLE_VAR_DEF  NOT_A_CONSTRUCTOR  NOT_CALLABLE  UNEXPECTED_TOKEN  UNKNOWN_EXPR_TYPE  UNKNOWN_OVERRIDE  UNRESOLVED_TYPE  WRONG_ARGUMENT_COUNT  diagnosticType  InferJSDocInfo  inferJSDocInfo  	projects/Closure66/src/com/google/javascript/jscomp/TypeCheck.java	0.21320071635561041	939	939	2	replace	Node  rightChild  =  t.getScope().getRootNode(assign,  object2);	  Node    rightChild    =    t.getScope().getRootNode(assign);    	non-compiled	[CE]  orphaned  case	22	None	replace
237	[BUG]  [BUGGY]  Node  rightChild  =  t.getScope().getOwnSlot(assign);  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      Var  var  =  t.getScope().getVar(lvalue.getString());  if  (var  !=  null)  {  if  (var.isTypeInferred())  {  return;  }  }  }  JSType  leftType  =  getJSType(lvalue);      [BUGGY]  Node  rightChild  =  t.getScope().getOwnSlot(assign);  [BUGGY]      JSType  rightType  =  getJSType(rightChild);  if  (validator.expectCanAssignTo(  t,  assign,  rightType,  leftType,       "assignment     "))  {  ensureTyped(t,  assign,  rightType);  }  else  {  ensureTyped(t,  assign);  }  }  [CLASS]  TypeCheck  [METHOD]  visitAssign  [RETURN_TYPE]  void  NodeTraversal  t  Node  assign  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  jsType  leftType  objectJsType  rightType  rvalueType  NodeTraversal  t  DiagnosticGroup  ALL_DIAGNOSTICS  CheckLevel  reportMissingOverride  reportUnknownTypes  Var  var  Node  assign  lvalue  object  object2  rightChild  rvalue  FunctionType  functionType  ScopeCreator  scopeCreator  String  OVERRIDING_PROTOTYPE_WITH_NON_OBJECT  functionPrivateName  message  property  property2  JSDocInfo  info  int  noTypeCheckSection  nullCount  typedCount  unknownCount  TypeValidator  validator  ObjectType  type  AbstractCompiler  compiler  JSTypeRegistry  typeRegistry  boolean  enterSection  externs  inExterns  report  reportMissingProperties  typeable  Scope  outerScope  topScope  DiagnosticType  BAD_DELETE  BAD_IMPLEMENTED_TYPE  BIT_OPERATION  CONFLICTING_EXTENDED_TYPE  CONFLICTING_IMPLEMENTED_TYPE  CONSTRUCTOR_NOT_CALLABLE  DETERMINISTIC_TEST  DETERMINISTIC_TEST_NO_RESULT  ENUM_DUP  ENUM_NOT_CONSTANT  EXPECTED_THIS_TYPE  FUNCTION_MASKS_VARIABLE  HIDDEN_INTERFACE_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY_MISMATCH  ILLEGAL_IMPLICIT_CAST  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE  INEXISTENT_ENUM_ELEMENT  INEXISTENT_PROPERTY  INTERFACE_FUNCTION_NOT_EMPTY  INTERFACE_METHOD_OVERRIDE  INVALID_INTERFACE_MEMBER_DECLARATION  MULTIPLE_VAR_DEF  NOT_A_CONSTRUCTOR  NOT_CALLABLE  UNEXPECTED_TOKEN  UNKNOWN_EXPR_TYPE  UNKNOWN_OVERRIDE  UNRESOLVED_TYPE  WRONG_ARGUMENT_COUNT  diagnosticType  InferJSDocInfo  inferJSDocInfo  	projects/Closure66/src/com/google/javascript/jscomp/TypeCheck.java	0.21320071635561041	939	939	2	replace	Node  rightChild  =  t.getScope().getOwnSlot(assign);	  Node    rightChild    =    t.getScope().getOwnSlot(lvalue);    	non-compiled	[CE]  orphaned  case	48	None	replace
238	[BUG]  [BUGGY]  Node  rightChild  =  t.getScope().getVar(object.getString());  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      Var  var  =  t.getScope().getVar(lvalue.getString());  if  (var  !=  null)  {  if  (var.isTypeInferred())  {  return;  }  }  }  JSType  leftType  =  getJSType(lvalue);      [BUGGY]  Node  rightChild  =  t.getScope().getVar(object.getString());  [BUGGY]      JSType  rightType  =  getJSType(rightChild);  if  (validator.expectCanAssignTo(  t,  assign,  rightType,  leftType,       "assignment     "))  {  ensureTyped(t,  assign,  rightType);  }  else  {  ensureTyped(t,  assign);  }  }  [CLASS]  TypeCheck  [METHOD]  visitAssign  [RETURN_TYPE]  void  NodeTraversal  t  Node  assign  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  jsType  leftType  objectJsType  rightType  rvalueType  NodeTraversal  t  DiagnosticGroup  ALL_DIAGNOSTICS  CheckLevel  reportMissingOverride  reportUnknownTypes  Var  var  Node  assign  lvalue  object  object2  rightChild  rvalue  FunctionType  functionType  ScopeCreator  scopeCreator  String  OVERRIDING_PROTOTYPE_WITH_NON_OBJECT  functionPrivateName  message  property  property2  JSDocInfo  info  int  noTypeCheckSection  nullCount  typedCount  unknownCount  TypeValidator  validator  ObjectType  type  AbstractCompiler  compiler  JSTypeRegistry  typeRegistry  boolean  enterSection  externs  inExterns  report  reportMissingProperties  typeable  Scope  outerScope  topScope  DiagnosticType  BAD_DELETE  BAD_IMPLEMENTED_TYPE  BIT_OPERATION  CONFLICTING_EXTENDED_TYPE  CONFLICTING_IMPLEMENTED_TYPE  CONSTRUCTOR_NOT_CALLABLE  DETERMINISTIC_TEST  DETERMINISTIC_TEST_NO_RESULT  ENUM_DUP  ENUM_NOT_CONSTANT  EXPECTED_THIS_TYPE  FUNCTION_MASKS_VARIABLE  HIDDEN_INTERFACE_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY_MISMATCH  ILLEGAL_IMPLICIT_CAST  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE  INEXISTENT_ENUM_ELEMENT  INEXISTENT_PROPERTY  INTERFACE_FUNCTION_NOT_EMPTY  INTERFACE_METHOD_OVERRIDE  INVALID_INTERFACE_MEMBER_DECLARATION  MULTIPLE_VAR_DEF  NOT_A_CONSTRUCTOR  NOT_CALLABLE  UNEXPECTED_TOKEN  UNKNOWN_EXPR_TYPE  UNKNOWN_OVERRIDE  UNRESOLVED_TYPE  WRONG_ARGUMENT_COUNT  diagnosticType  InferJSDocInfo  inferJSDocInfo  	projects/Closure66/src/com/google/javascript/jscomp/TypeCheck.java	0.21320071635561041	939	939	2	replace	Node  rightChild  =  t.getScope().getVar(object.getString());	  Node    rightChild    =    t.getScope().getVar(rvalue.getString());    	non-compiled	[CE]  orphaned  case	12	None	replace
239	[BUG]  [BUGGY]  Node  rightChild  =  var.getOwnerFunction();  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      Var  var  =  t.getScope().getVar(lvalue.getString());  if  (var  !=  null)  {  if  (var.isTypeInferred())  {  return;  }  }  }  JSType  leftType  =  getJSType(lvalue);      [BUGGY]  Node  rightChild  =  var.getOwnerFunction();  [BUGGY]      JSType  rightType  =  getJSType(rightChild);  if  (validator.expectCanAssignTo(  t,  assign,  rightType,  leftType,       "assignment     "))  {  ensureTyped(t,  assign,  rightType);  }  else  {  ensureTyped(t,  assign);  }  }  [CLASS]  TypeCheck  [METHOD]  visitAssign  [RETURN_TYPE]  void  NodeTraversal  t  Node  assign  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  jsType  leftType  objectJsType  rightType  rvalueType  NodeTraversal  t  DiagnosticGroup  ALL_DIAGNOSTICS  CheckLevel  reportMissingOverride  reportUnknownTypes  Var  var  Node  assign  lvalue  object  object2  rightChild  rvalue  FunctionType  functionType  ScopeCreator  scopeCreator  String  OVERRIDING_PROTOTYPE_WITH_NON_OBJECT  functionPrivateName  message  property  property2  JSDocInfo  info  int  noTypeCheckSection  nullCount  typedCount  unknownCount  TypeValidator  validator  ObjectType  type  AbstractCompiler  compiler  JSTypeRegistry  typeRegistry  boolean  enterSection  externs  inExterns  report  reportMissingProperties  typeable  Scope  outerScope  topScope  DiagnosticType  BAD_DELETE  BAD_IMPLEMENTED_TYPE  BIT_OPERATION  CONFLICTING_EXTENDED_TYPE  CONFLICTING_IMPLEMENTED_TYPE  CONSTRUCTOR_NOT_CALLABLE  DETERMINISTIC_TEST  DETERMINISTIC_TEST_NO_RESULT  ENUM_DUP  ENUM_NOT_CONSTANT  EXPECTED_THIS_TYPE  FUNCTION_MASKS_VARIABLE  HIDDEN_INTERFACE_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY_MISMATCH  ILLEGAL_IMPLICIT_CAST  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE  INEXISTENT_ENUM_ELEMENT  INEXISTENT_PROPERTY  INTERFACE_FUNCTION_NOT_EMPTY  INTERFACE_METHOD_OVERRIDE  INVALID_INTERFACE_MEMBER_DECLARATION  MULTIPLE_VAR_DEF  NOT_A_CONSTRUCTOR  NOT_CALLABLE  UNEXPECTED_TOKEN  UNKNOWN_EXPR_TYPE  UNKNOWN_OVERRIDE  UNRESOLVED_TYPE  WRONG_ARGUMENT_COUNT  diagnosticType  InferJSDocInfo  inferJSDocInfo  	projects/Closure66/src/com/google/javascript/jscomp/TypeCheck.java	0.21320071635561041	939	939	2	replace	Node  rightChild  =  var.getOwnerFunction();	  Node    rightChild    =    var.getLocalPart();    	non-compiled	[CE]  orphaned  case	31	None	replace
240	[BUG]  [BUGGY]  Node  rightChild  =  t.getScope().getVar(leftValue.getString());  [CE]  orphaned  case  [FE]            AssertionFailedError      [CONTEXT]      Var  var  =  t.getScope().getVar(lvalue.getString());  if  (var  !=  null)  {  if  (var.isTypeInferred())  {  return;  }  }  }  JSType  leftType  =  getJSType(lvalue);      [BUGGY]  Node  rightChild  =  t.getScope().getVar(leftValue.getString());  [BUGGY]      JSType  rightType  =  getJSType(rightChild);  if  (validator.expectCanAssignTo(  t,  assign,  rightType,  leftType,       "assignment     "))  {  ensureTyped(t,  assign,  rightType);  }  else  {  ensureTyped(t,  assign);  }  }  [CLASS]  TypeCheck  [METHOD]  visitAssign  [RETURN_TYPE]  void  NodeTraversal  t  Node  assign  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  jsType  leftType  objectJsType  rightType  rvalueType  NodeTraversal  t  DiagnosticGroup  ALL_DIAGNOSTICS  CheckLevel  reportMissingOverride  reportUnknownTypes  Var  var  Node  assign  lvalue  object  object2  rightChild  rvalue  FunctionType  functionType  ScopeCreator  scopeCreator  String  OVERRIDING_PROTOTYPE_WITH_NON_OBJECT  functionPrivateName  message  property  property2  JSDocInfo  info  int  noTypeCheckSection  nullCount  typedCount  unknownCount  TypeValidator  validator  ObjectType  type  AbstractCompiler  compiler  JSTypeRegistry  typeRegistry  boolean  enterSection  externs  inExterns  report  reportMissingProperties  typeable  Scope  outerScope  topScope  DiagnosticType  BAD_DELETE  BAD_IMPLEMENTED_TYPE  BIT_OPERATION  CONFLICTING_EXTENDED_TYPE  CONFLICTING_IMPLEMENTED_TYPE  CONSTRUCTOR_NOT_CALLABLE  DETERMINISTIC_TEST  DETERMINISTIC_TEST_NO_RESULT  ENUM_DUP  ENUM_NOT_CONSTANT  EXPECTED_THIS_TYPE  FUNCTION_MASKS_VARIABLE  HIDDEN_INTERFACE_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY_MISMATCH  ILLEGAL_IMPLICIT_CAST  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE  INEXISTENT_ENUM_ELEMENT  INEXISTENT_PROPERTY  INTERFACE_FUNCTION_NOT_EMPTY  INTERFACE_METHOD_OVERRIDE  INVALID_INTERFACE_MEMBER_DECLARATION  MULTIPLE_VAR_DEF  NOT_A_CONSTRUCTOR  NOT_CALLABLE  UNEXPECTED_TOKEN  UNKNOWN_EXPR_TYPE  UNKNOWN_OVERRIDE  UNRESOLVED_TYPE  WRONG_ARGUMENT_COUNT  diagnosticType  InferJSDocInfo  inferJSDocInfo  	projects/Closure66/src/com/google/javascript/jscomp/TypeCheck.java	0.21320071635561041	939	939	2	replace	Node  rightChild  =  t.getScope().getVar(leftValue.getString());	  Node    rightChild    =    t.getScope().getVar(right.getString());    	non-compiled	[CE]  orphaned  case	46	None	replace
241	[BUG]  [BUGGY]  Node  rightChild  =  t.getScope().getVar(right.toString());  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      Var  var  =  t.getScope().getVar(lvalue.getString());  if  (var  !=  null)  {  if  (var.isTypeInferred())  {  return;  }  }  }  JSType  leftType  =  getJSType(lvalue);      [BUGGY]  Node  rightChild  =  t.getScope().getVar(right.toString());  [BUGGY]      JSType  rightType  =  getJSType(rightChild);  if  (validator.expectCanAssignTo(  t,  assign,  rightType,  leftType,       "assignment     "))  {  ensureTyped(t,  assign,  rightType);  }  else  {  ensureTyped(t,  assign);  }  }  [CLASS]  TypeCheck  [METHOD]  visitAssign  [RETURN_TYPE]  void  NodeTraversal  t  Node  assign  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  jsType  leftType  objectJsType  rightType  rvalueType  NodeTraversal  t  DiagnosticGroup  ALL_DIAGNOSTICS  CheckLevel  reportMissingOverride  reportUnknownTypes  Var  var  Node  assign  lvalue  object  object2  rightChild  rvalue  FunctionType  functionType  ScopeCreator  scopeCreator  String  OVERRIDING_PROTOTYPE_WITH_NON_OBJECT  functionPrivateName  message  property  property2  JSDocInfo  info  int  noTypeCheckSection  nullCount  typedCount  unknownCount  TypeValidator  validator  ObjectType  type  AbstractCompiler  compiler  JSTypeRegistry  typeRegistry  boolean  enterSection  externs  inExterns  report  reportMissingProperties  typeable  Scope  outerScope  topScope  DiagnosticType  BAD_DELETE  BAD_IMPLEMENTED_TYPE  BIT_OPERATION  CONFLICTING_EXTENDED_TYPE  CONFLICTING_IMPLEMENTED_TYPE  CONSTRUCTOR_NOT_CALLABLE  DETERMINISTIC_TEST  DETERMINISTIC_TEST_NO_RESULT  ENUM_DUP  ENUM_NOT_CONSTANT  EXPECTED_THIS_TYPE  FUNCTION_MASKS_VARIABLE  HIDDEN_INTERFACE_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY_MISMATCH  ILLEGAL_IMPLICIT_CAST  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE  INEXISTENT_ENUM_ELEMENT  INEXISTENT_PROPERTY  INTERFACE_FUNCTION_NOT_EMPTY  INTERFACE_METHOD_OVERRIDE  INVALID_INTERFACE_MEMBER_DECLARATION  MULTIPLE_VAR_DEF  NOT_A_CONSTRUCTOR  NOT_CALLABLE  UNEXPECTED_TOKEN  UNKNOWN_EXPR_TYPE  UNKNOWN_OVERRIDE  UNRESOLVED_TYPE  WRONG_ARGUMENT_COUNT  diagnosticType  InferJSDocInfo  inferJSDocInfo  	projects/Closure66/src/com/google/javascript/jscomp/TypeCheck.java	0.21320071635561041	939	939	2	replace	Node  rightChild  =  t.getScope().getVar(right.toString());	  Node    rightChild    =    t.getScope().getVar(lvalue.toString());    	non-compiled	[CE]  orphaned  case	11	None	replace
242	[BUG]  [BUGGY]  Node  rightChild  =  leftType.cloneTree(),  assign;  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      Var  var  =  t.getScope().getVar(lvalue.getString());  if  (var  !=  null)  {  if  (var.isTypeInferred())  {  return;  }  }  }  JSType  leftType  =  getJSType(lvalue);      [BUGGY]  Node  rightChild  =  leftType.cloneTree(),  assign;  [BUGGY]      JSType  rightType  =  getJSType(rightChild);  if  (validator.expectCanAssignTo(  t,  assign,  rightType,  leftType,       "assignment     "))  {  ensureTyped(t,  assign,  rightType);  }  else  {  ensureTyped(t,  assign);  }  }  [CLASS]  TypeCheck  [METHOD]  visitAssign  [RETURN_TYPE]  void  NodeTraversal  t  Node  assign  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  jsType  leftType  objectJsType  rightType  rvalueType  NodeTraversal  t  DiagnosticGroup  ALL_DIAGNOSTICS  CheckLevel  reportMissingOverride  reportUnknownTypes  Var  var  Node  assign  lvalue  object  object2  rightChild  rvalue  FunctionType  functionType  ScopeCreator  scopeCreator  String  OVERRIDING_PROTOTYPE_WITH_NON_OBJECT  functionPrivateName  message  property  property2  JSDocInfo  info  int  noTypeCheckSection  nullCount  typedCount  unknownCount  TypeValidator  validator  ObjectType  type  AbstractCompiler  compiler  JSTypeRegistry  typeRegistry  boolean  enterSection  externs  inExterns  report  reportMissingProperties  typeable  Scope  outerScope  topScope  DiagnosticType  BAD_DELETE  BAD_IMPLEMENTED_TYPE  BIT_OPERATION  CONFLICTING_EXTENDED_TYPE  CONFLICTING_IMPLEMENTED_TYPE  CONSTRUCTOR_NOT_CALLABLE  DETERMINISTIC_TEST  DETERMINISTIC_TEST_NO_RESULT  ENUM_DUP  ENUM_NOT_CONSTANT  EXPECTED_THIS_TYPE  FUNCTION_MASKS_VARIABLE  HIDDEN_INTERFACE_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY_MISMATCH  ILLEGAL_IMPLICIT_CAST  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE  INEXISTENT_ENUM_ELEMENT  INEXISTENT_PROPERTY  INTERFACE_FUNCTION_NOT_EMPTY  INTERFACE_METHOD_OVERRIDE  INVALID_INTERFACE_MEMBER_DECLARATION  MULTIPLE_VAR_DEF  NOT_A_CONSTRUCTOR  NOT_CALLABLE  UNEXPECTED_TOKEN  UNKNOWN_EXPR_TYPE  UNKNOWN_OVERRIDE  UNRESOLVED_TYPE  WRONG_ARGUMENT_COUNT  diagnosticType  InferJSDocInfo  inferJSDocInfo  	projects/Closure66/src/com/google/javascript/jscomp/TypeCheck.java	0.21320071635561041	939	939	2	replace	Node  rightChild  =  leftType.cloneTree(),  assign;	  Node    rightChild    =    leftType.cloneTree();    	non-compiled	[CE]  orphaned  case	45	None	replace
243	[BUG]  [BUGGY]  Node  rightChild  =  leftType.trim();  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      Var  var  =  t.getScope().getVar(lvalue.getString());  if  (var  !=  null)  {  if  (var.isTypeInferred())  {  return;  }  }  }  JSType  leftType  =  getJSType(lvalue);      [BUGGY]  Node  rightChild  =  leftType.trim();  [BUGGY]      JSType  rightType  =  getJSType(rightChild);  if  (validator.expectCanAssignTo(  t,  assign,  rightType,  leftType,       "assignment     "))  {  ensureTyped(t,  assign,  rightType);  }  else  {  ensureTyped(t,  assign);  }  }  [CLASS]  TypeCheck  [METHOD]  visitAssign  [RETURN_TYPE]  void  NodeTraversal  t  Node  assign  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  jsType  leftType  objectJsType  rightType  rvalueType  NodeTraversal  t  DiagnosticGroup  ALL_DIAGNOSTICS  CheckLevel  reportMissingOverride  reportUnknownTypes  Var  var  Node  assign  lvalue  object  object2  rightChild  rvalue  FunctionType  functionType  ScopeCreator  scopeCreator  String  OVERRIDING_PROTOTYPE_WITH_NON_OBJECT  functionPrivateName  message  property  property2  JSDocInfo  info  int  noTypeCheckSection  nullCount  typedCount  unknownCount  TypeValidator  validator  ObjectType  type  AbstractCompiler  compiler  JSTypeRegistry  typeRegistry  boolean  enterSection  externs  inExterns  report  reportMissingProperties  typeable  Scope  outerScope  topScope  DiagnosticType  BAD_DELETE  BAD_IMPLEMENTED_TYPE  BIT_OPERATION  CONFLICTING_EXTENDED_TYPE  CONFLICTING_IMPLEMENTED_TYPE  CONSTRUCTOR_NOT_CALLABLE  DETERMINISTIC_TEST  DETERMINISTIC_TEST_NO_RESULT  ENUM_DUP  ENUM_NOT_CONSTANT  EXPECTED_THIS_TYPE  FUNCTION_MASKS_VARIABLE  HIDDEN_INTERFACE_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY_MISMATCH  ILLEGAL_IMPLICIT_CAST  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE  INEXISTENT_ENUM_ELEMENT  INEXISTENT_PROPERTY  INTERFACE_FUNCTION_NOT_EMPTY  INTERFACE_METHOD_OVERRIDE  INVALID_INTERFACE_MEMBER_DECLARATION  MULTIPLE_VAR_DEF  NOT_A_CONSTRUCTOR  NOT_CALLABLE  UNEXPECTED_TOKEN  UNKNOWN_EXPR_TYPE  UNKNOWN_OVERRIDE  UNRESOLVED_TYPE  WRONG_ARGUMENT_COUNT  diagnosticType  InferJSDocInfo  inferJSDocInfo  	projects/Closure66/src/com/google/javascript/jscomp/TypeCheck.java	0.21320071635561041	939	939	2	replace	Node  rightChild  =  leftType.trim();	  Node    rightChild    =    leftType.cloneTree();    	non-compiled	[CE]  orphaned  case	45	None	replace
244	[BUG]  [BUGGY]  Node  rightChild  =  t.getScope().getRootNode(null,  null);  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      Var  var  =  t.getScope().getVar(lvalue.getString());  if  (var  !=  null)  {  if  (var.isTypeInferred())  {  return;  }  }  }  JSType  leftType  =  getJSType(lvalue);      [BUGGY]  Node  rightChild  =  t.getScope().getRootNode(null,  null);  [BUGGY]      JSType  rightType  =  getJSType(rightChild);  if  (validator.expectCanAssignTo(  t,  assign,  rightType,  leftType,       "assignment     "))  {  ensureTyped(t,  assign,  rightType);  }  else  {  ensureTyped(t,  assign);  }  }  [CLASS]  TypeCheck  [METHOD]  visitAssign  [RETURN_TYPE]  void  NodeTraversal  t  Node  assign  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  jsType  leftType  objectJsType  rightType  rvalueType  NodeTraversal  t  DiagnosticGroup  ALL_DIAGNOSTICS  CheckLevel  reportMissingOverride  reportUnknownTypes  Var  var  Node  assign  lvalue  object  object2  rightChild  rvalue  FunctionType  functionType  ScopeCreator  scopeCreator  String  OVERRIDING_PROTOTYPE_WITH_NON_OBJECT  functionPrivateName  message  property  property2  JSDocInfo  info  int  noTypeCheckSection  nullCount  typedCount  unknownCount  TypeValidator  validator  ObjectType  type  AbstractCompiler  compiler  JSTypeRegistry  typeRegistry  boolean  enterSection  externs  inExterns  report  reportMissingProperties  typeable  Scope  outerScope  topScope  DiagnosticType  BAD_DELETE  BAD_IMPLEMENTED_TYPE  BIT_OPERATION  CONFLICTING_EXTENDED_TYPE  CONFLICTING_IMPLEMENTED_TYPE  CONSTRUCTOR_NOT_CALLABLE  DETERMINISTIC_TEST  DETERMINISTIC_TEST_NO_RESULT  ENUM_DUP  ENUM_NOT_CONSTANT  EXPECTED_THIS_TYPE  FUNCTION_MASKS_VARIABLE  HIDDEN_INTERFACE_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY_MISMATCH  ILLEGAL_IMPLICIT_CAST  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE  INEXISTENT_ENUM_ELEMENT  INEXISTENT_PROPERTY  INTERFACE_FUNCTION_NOT_EMPTY  INTERFACE_METHOD_OVERRIDE  INVALID_INTERFACE_MEMBER_DECLARATION  MULTIPLE_VAR_DEF  NOT_A_CONSTRUCTOR  NOT_CALLABLE  UNEXPECTED_TOKEN  UNKNOWN_EXPR_TYPE  UNKNOWN_OVERRIDE  UNRESOLVED_TYPE  WRONG_ARGUMENT_COUNT  diagnosticType  InferJSDocInfo  inferJSDocInfo  	projects/Closure66/src/com/google/javascript/jscomp/TypeCheck.java	0.21320071635561041	939	939	2	replace	Node  rightChild  =  t.getScope().getRootNode(null,  null);	  Node    rightChild    =    t.getScope().getRootNode(true);    	non-compiled	[CE]  orphaned  case	37	None	replace
245	[BUG]  [BUGGY]  Node  rightChild  =  t.getScope().getRootNode(node);  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      Var  var  =  t.getScope().getVar(lvalue.getString());  if  (var  !=  null)  {  if  (var.isTypeInferred())  {  return;  }  }  }  JSType  leftType  =  getJSType(lvalue);      [BUGGY]  Node  rightChild  =  t.getScope().getRootNode(node);  [BUGGY]      JSType  rightType  =  getJSType(rightChild);  if  (validator.expectCanAssignTo(  t,  assign,  rightType,  leftType,       "assignment     "))  {  ensureTyped(t,  assign,  rightType);  }  else  {  ensureTyped(t,  assign);  }  }  [CLASS]  TypeCheck  [METHOD]  visitAssign  [RETURN_TYPE]  void  NodeTraversal  t  Node  assign  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  jsType  leftType  objectJsType  rightType  rvalueType  NodeTraversal  t  DiagnosticGroup  ALL_DIAGNOSTICS  CheckLevel  reportMissingOverride  reportUnknownTypes  Var  var  Node  assign  lvalue  object  object2  rightChild  rvalue  FunctionType  functionType  ScopeCreator  scopeCreator  String  OVERRIDING_PROTOTYPE_WITH_NON_OBJECT  functionPrivateName  message  property  property2  JSDocInfo  info  int  noTypeCheckSection  nullCount  typedCount  unknownCount  TypeValidator  validator  ObjectType  type  AbstractCompiler  compiler  JSTypeRegistry  typeRegistry  boolean  enterSection  externs  inExterns  report  reportMissingProperties  typeable  Scope  outerScope  topScope  DiagnosticType  BAD_DELETE  BAD_IMPLEMENTED_TYPE  BIT_OPERATION  CONFLICTING_EXTENDED_TYPE  CONFLICTING_IMPLEMENTED_TYPE  CONSTRUCTOR_NOT_CALLABLE  DETERMINISTIC_TEST  DETERMINISTIC_TEST_NO_RESULT  ENUM_DUP  ENUM_NOT_CONSTANT  EXPECTED_THIS_TYPE  FUNCTION_MASKS_VARIABLE  HIDDEN_INTERFACE_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY_MISMATCH  ILLEGAL_IMPLICIT_CAST  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE  INEXISTENT_ENUM_ELEMENT  INEXISTENT_PROPERTY  INTERFACE_FUNCTION_NOT_EMPTY  INTERFACE_METHOD_OVERRIDE  INVALID_INTERFACE_MEMBER_DECLARATION  MULTIPLE_VAR_DEF  NOT_A_CONSTRUCTOR  NOT_CALLABLE  UNEXPECTED_TOKEN  UNKNOWN_EXPR_TYPE  UNKNOWN_OVERRIDE  UNRESOLVED_TYPE  WRONG_ARGUMENT_COUNT  diagnosticType  InferJSDocInfo  inferJSDocInfo  	projects/Closure66/src/com/google/javascript/jscomp/TypeCheck.java	0.21320071635561041	939	939	2	replace	Node  rightChild  =  t.getScope().getRootNode(node);	  Node    rightChild    =    t.getScope().getRootNode(true);    	non-compiled	[CE]  orphaned  case	37	None	replace
246	[BUG]  [BUGGY]  Node  rightChild  =  t.getScope().getParentNode(lvalue.getString());  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      Var  var  =  t.getScope().getVar(lvalue.getString());  if  (var  !=  null)  {  if  (var.isTypeInferred())  {  return;  }  }  }  JSType  leftType  =  getJSType(lvalue);      [BUGGY]  Node  rightChild  =  t.getScope().getParentNode(lvalue.getString());  [BUGGY]      JSType  rightType  =  getJSType(rightChild);  if  (validator.expectCanAssignTo(  t,  assign,  rightType,  leftType,       "assignment     "))  {  ensureTyped(t,  assign,  rightType);  }  else  {  ensureTyped(t,  assign);  }  }  [CLASS]  TypeCheck  [METHOD]  visitAssign  [RETURN_TYPE]  void  NodeTraversal  t  Node  assign  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  jsType  leftType  objectJsType  rightType  rvalueType  NodeTraversal  t  DiagnosticGroup  ALL_DIAGNOSTICS  CheckLevel  reportMissingOverride  reportUnknownTypes  Var  var  Node  assign  lvalue  object  object2  rightChild  rvalue  FunctionType  functionType  ScopeCreator  scopeCreator  String  OVERRIDING_PROTOTYPE_WITH_NON_OBJECT  functionPrivateName  message  property  property2  JSDocInfo  info  int  noTypeCheckSection  nullCount  typedCount  unknownCount  TypeValidator  validator  ObjectType  type  AbstractCompiler  compiler  JSTypeRegistry  typeRegistry  boolean  enterSection  externs  inExterns  report  reportMissingProperties  typeable  Scope  outerScope  topScope  DiagnosticType  BAD_DELETE  BAD_IMPLEMENTED_TYPE  BIT_OPERATION  CONFLICTING_EXTENDED_TYPE  CONFLICTING_IMPLEMENTED_TYPE  CONSTRUCTOR_NOT_CALLABLE  DETERMINISTIC_TEST  DETERMINISTIC_TEST_NO_RESULT  ENUM_DUP  ENUM_NOT_CONSTANT  EXPECTED_THIS_TYPE  FUNCTION_MASKS_VARIABLE  HIDDEN_INTERFACE_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY  HIDDEN_SUPERCLASS_PROPERTY_MISMATCH  ILLEGAL_IMPLICIT_CAST  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE  INEXISTENT_ENUM_ELEMENT  INEXISTENT_PROPERTY  INTERFACE_FUNCTION_NOT_EMPTY  INTERFACE_METHOD_OVERRIDE  INVALID_INTERFACE_MEMBER_DECLARATION  MULTIPLE_VAR_DEF  NOT_A_CONSTRUCTOR  NOT_CALLABLE  UNEXPECTED_TOKEN  UNKNOWN_EXPR_TYPE  UNKNOWN_OVERRIDE  UNRESOLVED_TYPE  WRONG_ARGUMENT_COUNT  diagnosticType  InferJSDocInfo  inferJSDocInfo  	projects/Closure66/src/com/google/javascript/jscomp/TypeCheck.java	0.21320071635561041	939	939	2	replace	Node  rightChild  =  t.getScope().getParentNode(lvalue.getString());	  Node    rightChild    =    t.getScope().getVar(rightType.getString());    	non-compiled	[CE]  orphaned  case	10	None	replace
