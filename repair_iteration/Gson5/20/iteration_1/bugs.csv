bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  }  else  if(cleaned.equals(timezoneIndicator))  {  [CE]  cannot  find  symbol  cleaned  [FE]    JsonSyntaxException  [CONTEXT]      String  cleaned  =  act.replace( ": ",   " ");  if  (!cleaned.equals(timezoneId))  {  throw  new  IndexOutOfBoundsException( "Mismatching  time  zone  indicator:   "+timezoneId+ "  given,  resolves  to   "  +timezone.getID());  }  }  }  [BUGGY]  }  else  if(cleaned.equals(timezoneIndicator))  {  [BUGGY]  throw  new  IndexOutOfBoundsException( "Invalid  time  zone  indicator  ' "  +  timezoneIndicator+ "' ");  }  [CLASS]  ISO8601Utils  [METHOD]  parse  [RETURN_TYPE]  Date  String  date  ParsePosition  pos  [VARIABLES]  TimeZone  TIMEZONE_UTC  timezone  tz  boolean  hasT  IndexOutOfBoundsException  e  Calendar  calendar  char  c  timezoneIndicator  NumberFormatException  e  String  UTC_ID  act  cleaned  date  input  msg  timezoneId  timezoneOffset  ParseException  ex  Exception  fail  int  day  endOffset  fraction  hour  milliseconds  minutes  month  offset  parseEndOffset  seconds  year  IllegalArgumentException  e  ParsePosition  pos  	projects/Gson5/gson/src/main/java/com/google/gson/internal/bind/util/ISO8601Utils.java	1.0	243	243	1	replace	}  else  if(cleaned.equals(timezoneIndicator))  {	}  else  {  	non-compiled	[CE]  cannot  find  symbol  cleaned	39	None	replace
2	[BUG]  [BUGGY]  }  else  if(!cleaned.equals(timezoneIndicator))  {  [CE]  cannot  find  symbol  cleaned  [FE]      JsonSyntaxException  [CONTEXT]      String  cleaned  =  act.replace( ": ",   " ");  if  (!cleaned.equals(timezoneId))  {  throw  new  IndexOutOfBoundsException( "Mismatching  time  zone  indicator:   "+timezoneId+ "  given,  resolves  to   "  +timezone.getID());  }  }  }  [BUGGY]  }  else  if(!cleaned.equals(timezoneIndicator))  {  [BUGGY]  throw  new  IndexOutOfBoundsException( "Invalid  time  zone  indicator  ' "  +  timezoneIndicator+ "' ");  }  [CLASS]  ISO8601Utils  [METHOD]  parse  [RETURN_TYPE]  Date  String  date  ParsePosition  pos  [VARIABLES]  TimeZone  TIMEZONE_UTC  timezone  tz  boolean  hasT  IndexOutOfBoundsException  e  Calendar  calendar  char  c  timezoneIndicator  NumberFormatException  e  String  UTC_ID  act  cleaned  date  input  msg  timezoneId  timezoneOffset  ParseException  ex  Exception  fail  int  day  endOffset  fraction  hour  milliseconds  minutes  month  offset  parseEndOffset  seconds  year  IllegalArgumentException  e  ParsePosition  pos  	projects/Gson5/gson/src/main/java/com/google/gson/internal/bind/util/ISO8601Utils.java	1.0	243	243	1	replace	}  else  if(!cleaned.equals(timezoneIndicator))  {	}  else  {  	non-compiled	[CE]  cannot  find  symbol  cleaned	39	None	replace
3	[BUG]  [BUGGY]  }  else  if(cleaned.contains(timezoneIndicator))  {  [CE]  cannot  find  symbol  cleaned  [FE]        JsonSyntaxException  [CONTEXT]      String  cleaned  =  act.replace( ": ",   " ");  if  (!cleaned.equals(timezoneId))  {  throw  new  IndexOutOfBoundsException( "Mismatching  time  zone  indicator:   "+timezoneId+ "  given,  resolves  to   "  +timezone.getID());  }  }  }  [BUGGY]  }  else  if(cleaned.contains(timezoneIndicator))  {  [BUGGY]  throw  new  IndexOutOfBoundsException( "Invalid  time  zone  indicator  ' "  +  timezoneIndicator+ "' ");  }  [CLASS]  ISO8601Utils  [METHOD]  parse  [RETURN_TYPE]  Date  String  date  ParsePosition  pos  [VARIABLES]  TimeZone  TIMEZONE_UTC  timezone  tz  boolean  hasT  IndexOutOfBoundsException  e  Calendar  calendar  char  c  timezoneIndicator  NumberFormatException  e  String  UTC_ID  act  cleaned  date  input  msg  timezoneId  timezoneOffset  ParseException  ex  Exception  fail  int  day  endOffset  fraction  hour  milliseconds  minutes  month  offset  parseEndOffset  seconds  year  IllegalArgumentException  e  ParsePosition  pos  	projects/Gson5/gson/src/main/java/com/google/gson/internal/bind/util/ISO8601Utils.java	1.0	243	243	1	replace	}  else  if(cleaned.contains(timezoneIndicator))  {	}  else  {  	non-compiled	[CE]  cannot  find  symbol  cleaned	39	None	replace
4	[BUG]  [BUGGY]  }  else  if(cleaned.equals(timezoneId))  {  [CE]  cannot  find  symbol  timezoneId  [FE]          JsonSyntaxException  [CONTEXT]      String  cleaned  =  act.replace( ": ",   " ");  if  (!cleaned.equals(timezoneId))  {  throw  new  IndexOutOfBoundsException( "Mismatching  time  zone  indicator:   "+timezoneId+ "  given,  resolves  to   "  +timezone.getID());  }  }  }  [BUGGY]  }  else  if(cleaned.equals(timezoneId))  {  [BUGGY]  throw  new  IndexOutOfBoundsException( "Invalid  time  zone  indicator  ' "  +  timezoneIndicator+ "' ");  }  [CLASS]  ISO8601Utils  [METHOD]  parse  [RETURN_TYPE]  Date  String  date  ParsePosition  pos  [VARIABLES]  TimeZone  TIMEZONE_UTC  timezone  tz  boolean  hasT  IndexOutOfBoundsException  e  Calendar  calendar  char  c  timezoneIndicator  NumberFormatException  e  String  UTC_ID  act  cleaned  date  input  msg  timezoneId  timezoneOffset  ParseException  ex  Exception  fail  int  day  endOffset  fraction  hour  milliseconds  minutes  month  offset  parseEndOffset  seconds  year  IllegalArgumentException  e  ParsePosition  pos  	projects/Gson5/gson/src/main/java/com/google/gson/internal/bind/util/ISO8601Utils.java	1.0	243	243	1	replace	}  else  if(cleaned.equals(timezoneId))  {	}  else  {  	non-compiled	[CE]  cannot  find  symbol  timezoneId	39	None	replace
5	[BUG]  [BUGGY]  }  else  if(timezoneIndicator!=  null)  {  [CE]  incomparable  types:  char  and  <null>  [FE]            JsonSyntaxException  [CONTEXT]      String  cleaned  =  act.replace( ": ",   " ");  if  (!cleaned.equals(timezoneId))  {  throw  new  IndexOutOfBoundsException( "Mismatching  time  zone  indicator:   "+timezoneId+ "  given,  resolves  to   "  +timezone.getID());  }  }  }  [BUGGY]  }  else  if(timezoneIndicator!=  null)  {  [BUGGY]  throw  new  IndexOutOfBoundsException( "Invalid  time  zone  indicator  ' "  +  timezoneIndicator+ "' ");  }  [CLASS]  ISO8601Utils  [METHOD]  parse  [RETURN_TYPE]  Date  String  date  ParsePosition  pos  [VARIABLES]  TimeZone  TIMEZONE_UTC  timezone  tz  boolean  hasT  IndexOutOfBoundsException  e  Calendar  calendar  char  c  timezoneIndicator  NumberFormatException  e  String  UTC_ID  act  cleaned  date  input  msg  timezoneId  timezoneOffset  ParseException  ex  Exception  fail  int  day  endOffset  fraction  hour  milliseconds  minutes  month  offset  parseEndOffset  seconds  year  IllegalArgumentException  e  ParsePosition  pos  	projects/Gson5/gson/src/main/java/com/google/gson/internal/bind/util/ISO8601Utils.java	1.0	243	243	1	replace	}  else  if(timezoneIndicator!=  null)  {	}  else  {  	non-compiled	[CE]  incomparable  types:  char  and  <null>	39	None	replace
6	[BUG]  [BUGGY]  }  else  if(cleaned.equals(timezoneIndicator+ "' "))  {  [CE]  cannot  find  symbol  cleaned  [FE]              JsonSyntaxException  [CONTEXT]      String  cleaned  =  act.replace( ": ",   " ");  if  (!cleaned.equals(timezoneId))  {  throw  new  IndexOutOfBoundsException( "Mismatching  time  zone  indicator:   "+timezoneId+ "  given,  resolves  to   "  +timezone.getID());  }  }  }  [BUGGY]  }  else  if(cleaned.equals(timezoneIndicator+ "' "))  {  [BUGGY]  throw  new  IndexOutOfBoundsException( "Invalid  time  zone  indicator  ' "  +  timezoneIndicator+ "' ");  }  [CLASS]  ISO8601Utils  [METHOD]  parse  [RETURN_TYPE]  Date  String  date  ParsePosition  pos  [VARIABLES]  TimeZone  TIMEZONE_UTC  timezone  tz  boolean  hasT  IndexOutOfBoundsException  e  Calendar  calendar  char  c  timezoneIndicator  NumberFormatException  e  String  UTC_ID  act  cleaned  date  input  msg  timezoneId  timezoneOffset  ParseException  ex  Exception  fail  int  day  endOffset  fraction  hour  milliseconds  minutes  month  offset  parseEndOffset  seconds  year  IllegalArgumentException  e  ParsePosition  pos  	projects/Gson5/gson/src/main/java/com/google/gson/internal/bind/util/ISO8601Utils.java	1.0	243	243	1	replace	}  else  if(cleaned.equals(timezoneIndicator+ "' "))  {	}  else  {  	non-compiled	[CE]  cannot  find  symbol  cleaned	39	None	replace
7	[BUG]  [BUGGY]  }  else  if(!cleaned.equals(timezoneId))  {  [CE]  cannot  find  symbol  timezoneId  [FE]                JsonSyntaxException  [CONTEXT]      String  cleaned  =  act.replace( ": ",   " ");  if  (!cleaned.equals(timezoneId))  {  throw  new  IndexOutOfBoundsException( "Mismatching  time  zone  indicator:   "+timezoneId+ "  given,  resolves  to   "  +timezone.getID());  }  }  }  [BUGGY]  }  else  if(!cleaned.equals(timezoneId))  {  [BUGGY]  throw  new  IndexOutOfBoundsException( "Invalid  time  zone  indicator  ' "  +  timezoneIndicator+ "' ");  }  [CLASS]  ISO8601Utils  [METHOD]  parse  [RETURN_TYPE]  Date  String  date  ParsePosition  pos  [VARIABLES]  TimeZone  TIMEZONE_UTC  timezone  tz  boolean  hasT  IndexOutOfBoundsException  e  Calendar  calendar  char  c  timezoneIndicator  NumberFormatException  e  String  UTC_ID  act  cleaned  date  input  msg  timezoneId  timezoneOffset  ParseException  ex  Exception  fail  int  day  endOffset  fraction  hour  milliseconds  minutes  month  offset  parseEndOffset  seconds  year  IllegalArgumentException  e  ParsePosition  pos  	projects/Gson5/gson/src/main/java/com/google/gson/internal/bind/util/ISO8601Utils.java	1.0	243	243	1	replace	}  else  if(!cleaned.equals(timezoneId))  {	}  else  {  	non-compiled	[CE]  cannot  find  symbol  timezoneId	39	None	replace
8	[BUG]  [BUGGY]  [FE]  JsonSyntaxException  [FE]                  JsonSyntaxException  [CONTEXT]      String  cleaned  =  act.replace( ": ",   " ");  if  (!cleaned.equals(timezoneId))  {  throw  new  IndexOutOfBoundsException( "Mismatching  time  zone  indicator:   "+timezoneId+ "  given,  resolves  to   "  +timezone.getID());  }  }  }  [BUGGY]    [BUGGY]  throw  new  IndexOutOfBoundsException( "Invalid  time  zone  indicator  ' "  +  timezoneIndicator+ "' ");  }  [CLASS]  ISO8601Utils  [METHOD]  parse  [RETURN_TYPE]  Date  String  date  ParsePosition  pos  [VARIABLES]  TimeZone  TIMEZONE_UTC  timezone  tz  boolean  hasT  IndexOutOfBoundsException  e  Calendar  calendar  char  c  timezoneIndicator  NumberFormatException  e  String  UTC_ID  act  cleaned  date  input  msg  timezoneId  timezoneOffset  ParseException  ex  Exception  fail  int  day  endOffset  fraction  hour  milliseconds  minutes  month  offset  parseEndOffset  seconds  year  IllegalArgumentException  e  ParsePosition  pos  	projects/Gson5/gson/src/main/java/com/google/gson/internal/bind/util/ISO8601Utils.java	1.0	243	243	1	add	  	}  else  {  	compilable	  [FE]  JsonSyntaxException  	39	1	replace
9	[BUG]  [BUGGY]    [FE]  JsonSyntaxException  [FE]                  JsonSyntaxException  [CONTEXT]      String  cleaned  =  act.replace( ": ",   " ");  if  (!cleaned.equals(timezoneId))  {  throw  new  IndexOutOfBoundsException( "Mismatching  time  zone  indicator:   "+timezoneId+ "  given,  resolves  to   "  +timezone.getID());  }  }  }  [BUGGY]    [BUGGY]  throw  new  IndexOutOfBoundsException( "Invalid  time  zone  indicator  ' "  +  timezoneIndicator+ "' ");  }  [CLASS]  ISO8601Utils  [METHOD]  parse  [RETURN_TYPE]  Date  String  date  ParsePosition  pos  [VARIABLES]  TimeZone  TIMEZONE_UTC  timezone  tz  boolean  hasT  IndexOutOfBoundsException  e  Calendar  calendar  char  c  timezoneIndicator  NumberFormatException  e  String  UTC_ID  act  cleaned  date  input  msg  timezoneId  timezoneOffset  ParseException  ex  Exception  fail  int  day  endOffset  fraction  hour  milliseconds  minutes  month  offset  parseEndOffset  seconds  year  IllegalArgumentException  e  ParsePosition  pos  	projects/Gson5/gson/src/main/java/com/google/gson/internal/bind/util/ISO8601Utils.java	1.0	243	243	1	replace	  	}  else  {  	compilable	  [FE]  JsonSyntaxException  	39	1	replace
10	[BUG]  [BUGGY]  }  else  if(cleaned!=  null)  {  [CE]  cannot  find  symbol  cleaned  [FE]    JsonSyntaxException  [CONTEXT]      String  cleaned  =  act.replace( ": ",   " ");  if  (!cleaned.equals(timezoneId))  {  throw  new  IndexOutOfBoundsException( "Mismatching  time  zone  indicator:   "+timezoneId+ "  given,  resolves  to   "  +timezone.getID());  }  }  }  [BUGGY]  }  else  if(cleaned!=  null)  {  [BUGGY]  throw  new  IndexOutOfBoundsException( "Invalid  time  zone  indicator  ' "  +  timezoneIndicator+ "' ");  }  [CLASS]  ISO8601Utils  [METHOD]  parse  [RETURN_TYPE]  Date  String  date  ParsePosition  pos  [VARIABLES]  TimeZone  TIMEZONE_UTC  timezone  tz  boolean  hasT  IndexOutOfBoundsException  e  Calendar  calendar  char  c  timezoneIndicator  NumberFormatException  e  String  UTC_ID  act  cleaned  date  input  msg  timezoneId  timezoneOffset  ParseException  ex  Exception  fail  int  day  endOffset  fraction  hour  milliseconds  minutes  month  offset  parseEndOffset  seconds  year  IllegalArgumentException  e  ParsePosition  pos  	projects/Gson5/gson/src/main/java/com/google/gson/internal/bind/util/ISO8601Utils.java	1.0	243	243	1	replace	}  else  if(cleaned!=  null)  {	}  else  {  	non-compiled	[CE]  cannot  find  symbol  cleaned	39	None	replace
11	[BUG]  [BUGGY]  }  else  if(timezoneIndicator  ==  null)  {  [CE]  incomparable  types:  char  and  <null>  [FE]      JsonSyntaxException  [CONTEXT]      String  cleaned  =  act.replace( ": ",   " ");  if  (!cleaned.equals(timezoneId))  {  throw  new  IndexOutOfBoundsException( "Mismatching  time  zone  indicator:   "+timezoneId+ "  given,  resolves  to   "  +timezone.getID());  }  }  }  [BUGGY]  }  else  if(timezoneIndicator  ==  null)  {  [BUGGY]  throw  new  IndexOutOfBoundsException( "Invalid  time  zone  indicator  ' "  +  timezoneIndicator+ "' ");  }  [CLASS]  ISO8601Utils  [METHOD]  parse  [RETURN_TYPE]  Date  String  date  ParsePosition  pos  [VARIABLES]  TimeZone  TIMEZONE_UTC  timezone  tz  boolean  hasT  IndexOutOfBoundsException  e  Calendar  calendar  char  c  timezoneIndicator  NumberFormatException  e  String  UTC_ID  act  cleaned  date  input  msg  timezoneId  timezoneOffset  ParseException  ex  Exception  fail  int  day  endOffset  fraction  hour  milliseconds  minutes  month  offset  parseEndOffset  seconds  year  IllegalArgumentException  e  ParsePosition  pos  	projects/Gson5/gson/src/main/java/com/google/gson/internal/bind/util/ISO8601Utils.java	1.0	243	243	1	replace	}  else  if(timezoneIndicator  ==  null)  {	}  else  {  	non-compiled	[CE]  incomparable  types:  char  and  <null>	39	None	replace
12	[BUG]  [BUGGY]  }  else  if(cleaned  ==  null)  {  [CE]  cannot  find  symbol  cleaned  [FE]        JsonSyntaxException  [CONTEXT]      String  cleaned  =  act.replace( ": ",   " ");  if  (!cleaned.equals(timezoneId))  {  throw  new  IndexOutOfBoundsException( "Mismatching  time  zone  indicator:   "+timezoneId+ "  given,  resolves  to   "  +timezone.getID());  }  }  }  [BUGGY]  }  else  if(cleaned  ==  null)  {  [BUGGY]  throw  new  IndexOutOfBoundsException( "Invalid  time  zone  indicator  ' "  +  timezoneIndicator+ "' ");  }  [CLASS]  ISO8601Utils  [METHOD]  parse  [RETURN_TYPE]  Date  String  date  ParsePosition  pos  [VARIABLES]  TimeZone  TIMEZONE_UTC  timezone  tz  boolean  hasT  IndexOutOfBoundsException  e  Calendar  calendar  char  c  timezoneIndicator  NumberFormatException  e  String  UTC_ID  act  cleaned  date  input  msg  timezoneId  timezoneOffset  ParseException  ex  Exception  fail  int  day  endOffset  fraction  hour  milliseconds  minutes  month  offset  parseEndOffset  seconds  year  IllegalArgumentException  e  ParsePosition  pos  	projects/Gson5/gson/src/main/java/com/google/gson/internal/bind/util/ISO8601Utils.java	1.0	243	243	1	replace	}  else  if(cleaned  ==  null)  {	}  else  {  	non-compiled	[CE]  cannot  find  symbol  cleaned	39	None	replace
13	[BUG]  [BUGGY]  }  else  if(e.getMessage()!=  null)  {  [CE]  cannot  find  symbol  e  [FE]    JsonSyntaxException  [CONTEXT]      String  cleaned  =  act.replace( ": ",   " ");  if  (!cleaned.equals(timezoneId))  {  throw  new  IndexOutOfBoundsException( "Mismatching  time  zone  indicator:   "+timezoneId+ "  given,  resolves  to   "  +timezone.getID());  }  }  }  [BUGGY]  }  else  if(e.getMessage()!=  null)  {  [BUGGY]  throw  new  IndexOutOfBoundsException( "Invalid  time  zone  indicator  ' "  +  timezoneIndicator+ "' ");  }  [CLASS]  ISO8601Utils  [METHOD]  parse  [RETURN_TYPE]  Date  String  date  ParsePosition  pos  [VARIABLES]  TimeZone  TIMEZONE_UTC  timezone  tz  boolean  hasT  IndexOutOfBoundsException  e  Calendar  calendar  char  c  timezoneIndicator  NumberFormatException  e  String  UTC_ID  act  cleaned  date  input  msg  timezoneId  timezoneOffset  ParseException  ex  Exception  fail  int  day  endOffset  fraction  hour  milliseconds  minutes  month  offset  parseEndOffset  seconds  year  IllegalArgumentException  e  ParsePosition  pos  	projects/Gson5/gson/src/main/java/com/google/gson/internal/bind/util/ISO8601Utils.java	1.0	243	243	1	replace	}  else  if(e.getMessage()!=  null)  {	}  else  {  	non-compiled	[CE]  cannot  find  symbol  e	39	None	replace
14	[BUG]  [BUGGY]  [FE]  JsonSyntaxException  [FE]      JsonSyntaxException  [CONTEXT]      String  cleaned  =  act.replace( ": ",   " ");  if  (!cleaned.equals(timezoneId))  {  throw  new  IndexOutOfBoundsException( "Mismatching  time  zone  indicator:   "+timezoneId+ "  given,  resolves  to   "  +timezone.getID());  }  }  }  [BUGGY]  }  else  if(hasT)  {  [BUGGY]  throw  new  IndexOutOfBoundsException( "Invalid  time  zone  indicator  ' "  +  timezoneIndicator+ "' ");  }  [CLASS]  ISO8601Utils  [METHOD]  parse  [RETURN_TYPE]  Date  String  date  ParsePosition  pos  [VARIABLES]  TimeZone  TIMEZONE_UTC  timezone  tz  boolean  hasT  IndexOutOfBoundsException  e  Calendar  calendar  char  c  timezoneIndicator  NumberFormatException  e  String  UTC_ID  act  cleaned  date  input  msg  timezoneId  timezoneOffset  ParseException  ex  Exception  fail  int  day  endOffset  fraction  hour  milliseconds  minutes  month  offset  parseEndOffset  seconds  year  IllegalArgumentException  e  ParsePosition  pos  	projects/Gson5/gson/src/main/java/com/google/gson/internal/bind/util/ISO8601Utils.java	1.0	243	243	1	add	}  else  if(hasT)  {	}  else  {  	compilable	  [FE]  JsonSyntaxException  	39	1	replace
15	[BUG]  [BUGGY]  }  else  if(hasT)  {  [FE]  JsonSyntaxException  [FE]      JsonSyntaxException  [CONTEXT]      String  cleaned  =  act.replace( ": ",   " ");  if  (!cleaned.equals(timezoneId))  {  throw  new  IndexOutOfBoundsException( "Mismatching  time  zone  indicator:   "+timezoneId+ "  given,  resolves  to   "  +timezone.getID());  }  }  }  [BUGGY]  }  else  if(hasT)  {  [BUGGY]  throw  new  IndexOutOfBoundsException( "Invalid  time  zone  indicator  ' "  +  timezoneIndicator+ "' ");  }  [CLASS]  ISO8601Utils  [METHOD]  parse  [RETURN_TYPE]  Date  String  date  ParsePosition  pos  [VARIABLES]  TimeZone  TIMEZONE_UTC  timezone  tz  boolean  hasT  IndexOutOfBoundsException  e  Calendar  calendar  char  c  timezoneIndicator  NumberFormatException  e  String  UTC_ID  act  cleaned  date  input  msg  timezoneId  timezoneOffset  ParseException  ex  Exception  fail  int  day  endOffset  fraction  hour  milliseconds  minutes  month  offset  parseEndOffset  seconds  year  IllegalArgumentException  e  ParsePosition  pos  	projects/Gson5/gson/src/main/java/com/google/gson/internal/bind/util/ISO8601Utils.java	1.0	243	243	1	replace	}  else  if(hasT)  {	}  else  {  	compilable	  [FE]  JsonSyntaxException  	39	1	replace
