bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  [FE]  JsonSyntaxException  [FE]    JsonSyntaxException  [CONTEXT]  switch  (parseEndOffset  -  offset)  {  //  number  of  digits  parsed  case  2:  milliseconds  =  fraction  *  10;  break;  case  1:  milliseconds  =  fraction  *  100;  break;  default:  milliseconds  =  fraction;  }  [BUGGY]  offset  =  parseEndOffset;  [BUGGY]  }  }  }  }  if  (date.length()  <=  offset)  {  throw  new  IllegalArgumentException( "No  time  zone  indicator ");  }  [CLASS]  ISO8601Utils  [METHOD]  parse  [RETURN_TYPE]  Date  String  date  ParsePosition  pos  [VARIABLES]  TimeZone  TIMEZONE_UTC  timezone  tz  boolean  hasT  IndexOutOfBoundsException  e  Calendar  calendar  char  c  timezoneIndicator  NumberFormatException  e  String  UTC_ID  act  cleaned  date  input  msg  timezoneId  timezoneOffset  ParseException  ex  Exception  fail  int  day  endOffset  fraction  hour  milliseconds  minutes  month  offset  parseEndOffset  seconds  year  IllegalArgumentException  e  ParsePosition  pos  	projects/Gson5/gson/src/main/java/com/google/gson/internal/bind/util/ISO8601Utils.java	1.0	193	193	1	add	offset  =  parseEndOffset;	offset  =  endOffset;  	compilable	  [FE]  JsonSyntaxException  	13	1	replace
2	[BUG]  [BUGGY]  offset  =  parseEndOffset;  [FE]  JsonSyntaxException  [FE]    JsonSyntaxException  [CONTEXT]  switch  (parseEndOffset  -  offset)  {  //  number  of  digits  parsed  case  2:  milliseconds  =  fraction  *  10;  break;  case  1:  milliseconds  =  fraction  *  100;  break;  default:  milliseconds  =  fraction;  }  [BUGGY]  offset  =  parseEndOffset;  [BUGGY]  }  }  }  }  if  (date.length()  <=  offset)  {  throw  new  IllegalArgumentException( "No  time  zone  indicator ");  }  [CLASS]  ISO8601Utils  [METHOD]  parse  [RETURN_TYPE]  Date  String  date  ParsePosition  pos  [VARIABLES]  TimeZone  TIMEZONE_UTC  timezone  tz  boolean  hasT  IndexOutOfBoundsException  e  Calendar  calendar  char  c  timezoneIndicator  NumberFormatException  e  String  UTC_ID  act  cleaned  date  input  msg  timezoneId  timezoneOffset  ParseException  ex  Exception  fail  int  day  endOffset  fraction  hour  milliseconds  minutes  month  offset  parseEndOffset  seconds  year  IllegalArgumentException  e  ParsePosition  pos  	projects/Gson5/gson/src/main/java/com/google/gson/internal/bind/util/ISO8601Utils.java	1.0	193	193	1	replace	offset  =  parseEndOffset;	offset  =  endOffset;  	compilable	  [FE]  JsonSyntaxException  	13	1	replace
3	[BUG]  [BUGGY]  offset  =  pos;  [CE]  incompatible  types  [FE]      JsonSyntaxException  [CONTEXT]  switch  (parseEndOffset  -  offset)  {  //  number  of  digits  parsed  case  2:  milliseconds  =  fraction  *  10;  break;  case  1:  milliseconds  =  fraction  *  100;  break;  default:  milliseconds  =  fraction;  }  [BUGGY]  offset  =  pos;  [BUGGY]  }  }  }  }  if  (date.length()  <=  offset)  {  throw  new  IllegalArgumentException( "No  time  zone  indicator ");  }  [CLASS]  ISO8601Utils  [METHOD]  parse  [RETURN_TYPE]  Date  String  date  ParsePosition  pos  [VARIABLES]  TimeZone  TIMEZONE_UTC  timezone  tz  boolean  hasT  IndexOutOfBoundsException  e  Calendar  calendar  char  c  timezoneIndicator  NumberFormatException  e  String  UTC_ID  act  cleaned  date  input  msg  timezoneId  timezoneOffset  ParseException  ex  Exception  fail  int  day  endOffset  fraction  hour  milliseconds  minutes  month  offset  parseEndOffset  seconds  year  IllegalArgumentException  e  ParsePosition  pos  	projects/Gson5/gson/src/main/java/com/google/gson/internal/bind/util/ISO8601Utils.java	1.0	193	193	1	replace	offset  =  pos;	offset  =  endOffset;  	non-compiled	[CE]  incompatible  types	13	None	replace
4	[BUG]  [BUGGY]  [FE]  JsonSyntaxException  [FE]        JsonSyntaxException  [CONTEXT]  switch  (parseEndOffset  -  offset)  {  //  number  of  digits  parsed  case  2:  milliseconds  =  fraction  *  10;  break;  case  1:  milliseconds  =  fraction  *  100;  break;  default:  milliseconds  =  fraction;  }  [BUGGY]  offset  =  0;  [BUGGY]  }  }  }  }  if  (date.length()  <=  offset)  {  throw  new  IllegalArgumentException( "No  time  zone  indicator ");  }  [CLASS]  ISO8601Utils  [METHOD]  parse  [RETURN_TYPE]  Date  String  date  ParsePosition  pos  [VARIABLES]  TimeZone  TIMEZONE_UTC  timezone  tz  boolean  hasT  IndexOutOfBoundsException  e  Calendar  calendar  char  c  timezoneIndicator  NumberFormatException  e  String  UTC_ID  act  cleaned  date  input  msg  timezoneId  timezoneOffset  ParseException  ex  Exception  fail  int  day  endOffset  fraction  hour  milliseconds  minutes  month  offset  parseEndOffset  seconds  year  IllegalArgumentException  e  ParsePosition  pos  	projects/Gson5/gson/src/main/java/com/google/gson/internal/bind/util/ISO8601Utils.java	1.0	193	193	1	add	offset  =  0;	offset  =  endOffset;  	compilable	  [FE]  JsonSyntaxException  	13	1	replace
5	[BUG]  [BUGGY]  offset  =  0;  [FE]  JsonSyntaxException  [FE]        JsonSyntaxException  [CONTEXT]  switch  (parseEndOffset  -  offset)  {  //  number  of  digits  parsed  case  2:  milliseconds  =  fraction  *  10;  break;  case  1:  milliseconds  =  fraction  *  100;  break;  default:  milliseconds  =  fraction;  }  [BUGGY]  offset  =  0;  [BUGGY]  }  }  }  }  if  (date.length()  <=  offset)  {  throw  new  IllegalArgumentException( "No  time  zone  indicator ");  }  [CLASS]  ISO8601Utils  [METHOD]  parse  [RETURN_TYPE]  Date  String  date  ParsePosition  pos  [VARIABLES]  TimeZone  TIMEZONE_UTC  timezone  tz  boolean  hasT  IndexOutOfBoundsException  e  Calendar  calendar  char  c  timezoneIndicator  NumberFormatException  e  String  UTC_ID  act  cleaned  date  input  msg  timezoneId  timezoneOffset  ParseException  ex  Exception  fail  int  day  endOffset  fraction  hour  milliseconds  minutes  month  offset  parseEndOffset  seconds  year  IllegalArgumentException  e  ParsePosition  pos  	projects/Gson5/gson/src/main/java/com/google/gson/internal/bind/util/ISO8601Utils.java	1.0	193	193	1	replace	offset  =  0;	offset  =  endOffset;  	compilable	  [FE]  JsonSyntaxException  	13	1	replace
6	[BUG]  [BUGGY]  offset  =  parseStartOffset;  [CE]  cannot  find  symbol  parseStartOffset  [FE]          JsonSyntaxException  [CONTEXT]  switch  (parseEndOffset  -  offset)  {  //  number  of  digits  parsed  case  2:  milliseconds  =  fraction  *  10;  break;  case  1:  milliseconds  =  fraction  *  100;  break;  default:  milliseconds  =  fraction;  }  [BUGGY]  offset  =  parseStartOffset;  [BUGGY]  }  }  }  }  if  (date.length()  <=  offset)  {  throw  new  IllegalArgumentException( "No  time  zone  indicator ");  }  [CLASS]  ISO8601Utils  [METHOD]  parse  [RETURN_TYPE]  Date  String  date  ParsePosition  pos  [VARIABLES]  TimeZone  TIMEZONE_UTC  timezone  tz  boolean  hasT  IndexOutOfBoundsException  e  Calendar  calendar  char  c  timezoneIndicator  NumberFormatException  e  String  UTC_ID  act  cleaned  date  input  msg  timezoneId  timezoneOffset  ParseException  ex  Exception  fail  int  day  endOffset  fraction  hour  milliseconds  minutes  month  offset  parseEndOffset  seconds  year  IllegalArgumentException  e  ParsePosition  pos  	projects/Gson5/gson/src/main/java/com/google/gson/internal/bind/util/ISO8601Utils.java	1.0	193	193	1	replace	offset  =  parseStartOffset;	offset  =  endOffset;  	non-compiled	[CE]  cannot  find  symbol  parseStartOffset	13	None	replace
7	[BUG]  [BUGGY]  offset  =  pos.getOffset();  [CE]  cannot  find  symbol  [FE]            JsonSyntaxException  [CONTEXT]  switch  (parseEndOffset  -  offset)  {  //  number  of  digits  parsed  case  2:  milliseconds  =  fraction  *  10;  break;  case  1:  milliseconds  =  fraction  *  100;  break;  default:  milliseconds  =  fraction;  }  [BUGGY]  offset  =  pos.getOffset();  [BUGGY]  }  }  }  }  if  (date.length()  <=  offset)  {  throw  new  IllegalArgumentException( "No  time  zone  indicator ");  }  [CLASS]  ISO8601Utils  [METHOD]  parse  [RETURN_TYPE]  Date  String  date  ParsePosition  pos  [VARIABLES]  TimeZone  TIMEZONE_UTC  timezone  tz  boolean  hasT  IndexOutOfBoundsException  e  Calendar  calendar  char  c  timezoneIndicator  NumberFormatException  e  String  UTC_ID  act  cleaned  date  input  msg  timezoneId  timezoneOffset  ParseException  ex  Exception  fail  int  day  endOffset  fraction  hour  milliseconds  minutes  month  offset  parseEndOffset  seconds  year  IllegalArgumentException  e  ParsePosition  pos  	projects/Gson5/gson/src/main/java/com/google/gson/internal/bind/util/ISO8601Utils.java	1.0	193	193	1	replace	offset  =  pos.getOffset();	offset  =  endOffset;  	non-compiled	[CE]  cannot  find  symbol	13	None	replace
8	[BUG]  [BUGGY]  [FE]  JsonSyntaxException  [FE]              JsonSyntaxException  [CONTEXT]  switch  (parseEndOffset  -  offset)  {  //  number  of  digits  parsed  case  2:  milliseconds  =  fraction  *  10;  break;  case  1:  milliseconds  =  fraction  *  100;  break;  default:  milliseconds  =  fraction;  }  [BUGGY]  offset  =  endOffset  +  1;  [BUGGY]  }  }  }  }  if  (date.length()  <=  offset)  {  throw  new  IllegalArgumentException( "No  time  zone  indicator ");  }  [CLASS]  ISO8601Utils  [METHOD]  parse  [RETURN_TYPE]  Date  String  date  ParsePosition  pos  [VARIABLES]  TimeZone  TIMEZONE_UTC  timezone  tz  boolean  hasT  IndexOutOfBoundsException  e  Calendar  calendar  char  c  timezoneIndicator  NumberFormatException  e  String  UTC_ID  act  cleaned  date  input  msg  timezoneId  timezoneOffset  ParseException  ex  Exception  fail  int  day  endOffset  fraction  hour  milliseconds  minutes  month  offset  parseEndOffset  seconds  year  IllegalArgumentException  e  ParsePosition  pos  	projects/Gson5/gson/src/main/java/com/google/gson/internal/bind/util/ISO8601Utils.java	1.0	193	193	1	add	offset  =  endOffset  +  1;	offset  =  endOffset;  	compilable	  [FE]  JsonSyntaxException  	13	1	replace
9	[BUG]  [BUGGY]  offset  =  endOffset  +  1;  [FE]  JsonSyntaxException  [FE]              JsonSyntaxException  [CONTEXT]  switch  (parseEndOffset  -  offset)  {  //  number  of  digits  parsed  case  2:  milliseconds  =  fraction  *  10;  break;  case  1:  milliseconds  =  fraction  *  100;  break;  default:  milliseconds  =  fraction;  }  [BUGGY]  offset  =  endOffset  +  1;  [BUGGY]  }  }  }  }  if  (date.length()  <=  offset)  {  throw  new  IllegalArgumentException( "No  time  zone  indicator ");  }  [CLASS]  ISO8601Utils  [METHOD]  parse  [RETURN_TYPE]  Date  String  date  ParsePosition  pos  [VARIABLES]  TimeZone  TIMEZONE_UTC  timezone  tz  boolean  hasT  IndexOutOfBoundsException  e  Calendar  calendar  char  c  timezoneIndicator  NumberFormatException  e  String  UTC_ID  act  cleaned  date  input  msg  timezoneId  timezoneOffset  ParseException  ex  Exception  fail  int  day  endOffset  fraction  hour  milliseconds  minutes  month  offset  parseEndOffset  seconds  year  IllegalArgumentException  e  ParsePosition  pos  	projects/Gson5/gson/src/main/java/com/google/gson/internal/bind/util/ISO8601Utils.java	1.0	193	193	1	replace	offset  =  endOffset  +  1;	offset  =  endOffset;  	compilable	  [FE]  JsonSyntaxException  	13	1	replace
10	[BUG]  [BUGGY]  offset  =  pos.length();  [CE]  cannot  find  symbol  [FE]                JsonSyntaxException  [CONTEXT]  switch  (parseEndOffset  -  offset)  {  //  number  of  digits  parsed  case  2:  milliseconds  =  fraction  *  10;  break;  case  1:  milliseconds  =  fraction  *  100;  break;  default:  milliseconds  =  fraction;  }  [BUGGY]  offset  =  pos.length();  [BUGGY]  }  }  }  }  if  (date.length()  <=  offset)  {  throw  new  IllegalArgumentException( "No  time  zone  indicator ");  }  [CLASS]  ISO8601Utils  [METHOD]  parse  [RETURN_TYPE]  Date  String  date  ParsePosition  pos  [VARIABLES]  TimeZone  TIMEZONE_UTC  timezone  tz  boolean  hasT  IndexOutOfBoundsException  e  Calendar  calendar  char  c  timezoneIndicator  NumberFormatException  e  String  UTC_ID  act  cleaned  date  input  msg  timezoneId  timezoneOffset  ParseException  ex  Exception  fail  int  day  endOffset  fraction  hour  milliseconds  minutes  month  offset  parseEndOffset  seconds  year  IllegalArgumentException  e  ParsePosition  pos  	projects/Gson5/gson/src/main/java/com/google/gson/internal/bind/util/ISO8601Utils.java	1.0	193	193	1	replace	offset  =  pos.length();	offset  =  endOffset;  	non-compiled	[CE]  cannot  find  symbol	13	None	replace
11	[BUG]  [BUGGY]  [FE]  JsonSyntaxException  [FE]                  JsonSyntaxException  [CONTEXT]  switch  (parseEndOffset  -  offset)  {  //  number  of  digits  parsed  case  2:  milliseconds  =  fraction  *  10;  break;  case  1:  milliseconds  =  fraction  *  100;  break;  default:  milliseconds  =  fraction;  }  [BUGGY]    [BUGGY]  }  }  }  }  if  (date.length()  <=  offset)  {  throw  new  IllegalArgumentException( "No  time  zone  indicator ");  }  [CLASS]  ISO8601Utils  [METHOD]  parse  [RETURN_TYPE]  Date  String  date  ParsePosition  pos  [VARIABLES]  TimeZone  TIMEZONE_UTC  timezone  tz  boolean  hasT  IndexOutOfBoundsException  e  Calendar  calendar  char  c  timezoneIndicator  NumberFormatException  e  String  UTC_ID  act  cleaned  date  input  msg  timezoneId  timezoneOffset  ParseException  ex  Exception  fail  int  day  endOffset  fraction  hour  milliseconds  minutes  month  offset  parseEndOffset  seconds  year  IllegalArgumentException  e  ParsePosition  pos  	projects/Gson5/gson/src/main/java/com/google/gson/internal/bind/util/ISO8601Utils.java	1.0	193	193	1	add	  	offset  =  endOffset;  	compilable	  [FE]  JsonSyntaxException  	13	1	replace
12	[BUG]  [BUGGY]    [FE]  JsonSyntaxException  [FE]                  JsonSyntaxException  [CONTEXT]  switch  (parseEndOffset  -  offset)  {  //  number  of  digits  parsed  case  2:  milliseconds  =  fraction  *  10;  break;  case  1:  milliseconds  =  fraction  *  100;  break;  default:  milliseconds  =  fraction;  }  [BUGGY]    [BUGGY]  }  }  }  }  if  (date.length()  <=  offset)  {  throw  new  IllegalArgumentException( "No  time  zone  indicator ");  }  [CLASS]  ISO8601Utils  [METHOD]  parse  [RETURN_TYPE]  Date  String  date  ParsePosition  pos  [VARIABLES]  TimeZone  TIMEZONE_UTC  timezone  tz  boolean  hasT  IndexOutOfBoundsException  e  Calendar  calendar  char  c  timezoneIndicator  NumberFormatException  e  String  UTC_ID  act  cleaned  date  input  msg  timezoneId  timezoneOffset  ParseException  ex  Exception  fail  int  day  endOffset  fraction  hour  milliseconds  minutes  month  offset  parseEndOffset  seconds  year  IllegalArgumentException  e  ParsePosition  pos  	projects/Gson5/gson/src/main/java/com/google/gson/internal/bind/util/ISO8601Utils.java	1.0	193	193	1	replace	  	offset  =  endOffset;  	compilable	  [FE]  JsonSyntaxException  	13	1	replace
13	[BUG]  [BUGGY]  [FE]  JsonSyntaxException  [FE]    JsonSyntaxException  [CONTEXT]  switch  (parseEndOffset  -  offset)  {  //  number  of  digits  parsed  case  2:  milliseconds  =  fraction  *  10;  break;  case  1:  milliseconds  =  fraction  *  100;  break;  default:  milliseconds  =  fraction;  }  [BUGGY]  offset  =  offset;  [BUGGY]  }  }  }  }  if  (date.length()  <=  offset)  {  throw  new  IllegalArgumentException( "No  time  zone  indicator ");  }  [CLASS]  ISO8601Utils  [METHOD]  parse  [RETURN_TYPE]  Date  String  date  ParsePosition  pos  [VARIABLES]  TimeZone  TIMEZONE_UTC  timezone  tz  boolean  hasT  IndexOutOfBoundsException  e  Calendar  calendar  char  c  timezoneIndicator  NumberFormatException  e  String  UTC_ID  act  cleaned  date  input  msg  timezoneId  timezoneOffset  ParseException  ex  Exception  fail  int  day  endOffset  fraction  hour  milliseconds  minutes  month  offset  parseEndOffset  seconds  year  IllegalArgumentException  e  ParsePosition  pos  	projects/Gson5/gson/src/main/java/com/google/gson/internal/bind/util/ISO8601Utils.java	1.0	193	193	1	add	offset  =  offset;	offset  =  endOffset;  	compilable	  [FE]  JsonSyntaxException  	13	1	replace
14	[BUG]  [BUGGY]  offset  =  offset;  [FE]  JsonSyntaxException  [FE]    JsonSyntaxException  [CONTEXT]  switch  (parseEndOffset  -  offset)  {  //  number  of  digits  parsed  case  2:  milliseconds  =  fraction  *  10;  break;  case  1:  milliseconds  =  fraction  *  100;  break;  default:  milliseconds  =  fraction;  }  [BUGGY]  offset  =  offset;  [BUGGY]  }  }  }  }  if  (date.length()  <=  offset)  {  throw  new  IllegalArgumentException( "No  time  zone  indicator ");  }  [CLASS]  ISO8601Utils  [METHOD]  parse  [RETURN_TYPE]  Date  String  date  ParsePosition  pos  [VARIABLES]  TimeZone  TIMEZONE_UTC  timezone  tz  boolean  hasT  IndexOutOfBoundsException  e  Calendar  calendar  char  c  timezoneIndicator  NumberFormatException  e  String  UTC_ID  act  cleaned  date  input  msg  timezoneId  timezoneOffset  ParseException  ex  Exception  fail  int  day  endOffset  fraction  hour  milliseconds  minutes  month  offset  parseEndOffset  seconds  year  IllegalArgumentException  e  ParsePosition  pos  	projects/Gson5/gson/src/main/java/com/google/gson/internal/bind/util/ISO8601Utils.java	1.0	193	193	1	replace	offset  =  offset;	offset  =  endOffset;  	compilable	  [FE]  JsonSyntaxException  	13	1	replace
15	[BUG]  [BUGGY]  [FE]  JsonSyntaxException  [FE]      JsonSyntaxException  [CONTEXT]  switch  (parseEndOffset  -  offset)  {  //  number  of  digits  parsed  case  2:  milliseconds  =  fraction  *  10;  break;  case  1:  milliseconds  =  fraction  *  100;  break;  default:  milliseconds  =  fraction;  }  [BUGGY]  offset  =  endOffset  -  1;  [BUGGY]  }  }  }  }  if  (date.length()  <=  offset)  {  throw  new  IllegalArgumentException( "No  time  zone  indicator ");  }  [CLASS]  ISO8601Utils  [METHOD]  parse  [RETURN_TYPE]  Date  String  date  ParsePosition  pos  [VARIABLES]  TimeZone  TIMEZONE_UTC  timezone  tz  boolean  hasT  IndexOutOfBoundsException  e  Calendar  calendar  char  c  timezoneIndicator  NumberFormatException  e  String  UTC_ID  act  cleaned  date  input  msg  timezoneId  timezoneOffset  ParseException  ex  Exception  fail  int  day  endOffset  fraction  hour  milliseconds  minutes  month  offset  parseEndOffset  seconds  year  IllegalArgumentException  e  ParsePosition  pos  	projects/Gson5/gson/src/main/java/com/google/gson/internal/bind/util/ISO8601Utils.java	1.0	193	193	1	add	offset  =  endOffset  -  1;	offset  =  endOffset;  	compilable	  [FE]  JsonSyntaxException  	13	1	replace
16	[BUG]  [BUGGY]  offset  =  endOffset  -  1;  [FE]  JsonSyntaxException  [FE]      JsonSyntaxException  [CONTEXT]  switch  (parseEndOffset  -  offset)  {  //  number  of  digits  parsed  case  2:  milliseconds  =  fraction  *  10;  break;  case  1:  milliseconds  =  fraction  *  100;  break;  default:  milliseconds  =  fraction;  }  [BUGGY]  offset  =  endOffset  -  1;  [BUGGY]  }  }  }  }  if  (date.length()  <=  offset)  {  throw  new  IllegalArgumentException( "No  time  zone  indicator ");  }  [CLASS]  ISO8601Utils  [METHOD]  parse  [RETURN_TYPE]  Date  String  date  ParsePosition  pos  [VARIABLES]  TimeZone  TIMEZONE_UTC  timezone  tz  boolean  hasT  IndexOutOfBoundsException  e  Calendar  calendar  char  c  timezoneIndicator  NumberFormatException  e  String  UTC_ID  act  cleaned  date  input  msg  timezoneId  timezoneOffset  ParseException  ex  Exception  fail  int  day  endOffset  fraction  hour  milliseconds  minutes  month  offset  parseEndOffset  seconds  year  IllegalArgumentException  e  ParsePosition  pos  	projects/Gson5/gson/src/main/java/com/google/gson/internal/bind/util/ISO8601Utils.java	1.0	193	193	1	replace	offset  =  endOffset  -  1;	offset  =  endOffset;  	compilable	  [FE]  JsonSyntaxException  	13	1	replace
17	[BUG]  [BUGGY]  [FE]  JsonSyntaxException  [FE]    JsonSyntaxException  [CONTEXT]  switch  (parseEndOffset  -  offset)  {  //  number  of  digits  parsed  case  2:  milliseconds  =  fraction  *  10;  break;  case  1:  milliseconds  =  fraction  *  100;  break;  default:  milliseconds  =  fraction;  }  [BUGGY]  offset  =  parseEndOffset  -  offset;  [BUGGY]  }  }  }  }  if  (date.length()  <=  offset)  {  throw  new  IllegalArgumentException( "No  time  zone  indicator ");  }  [CLASS]  ISO8601Utils  [METHOD]  parse  [RETURN_TYPE]  Date  String  date  ParsePosition  pos  [VARIABLES]  TimeZone  TIMEZONE_UTC  timezone  tz  boolean  hasT  IndexOutOfBoundsException  e  Calendar  calendar  char  c  timezoneIndicator  NumberFormatException  e  String  UTC_ID  act  cleaned  date  input  msg  timezoneId  timezoneOffset  ParseException  ex  Exception  fail  int  day  endOffset  fraction  hour  milliseconds  minutes  month  offset  parseEndOffset  seconds  year  IllegalArgumentException  e  ParsePosition  pos  	projects/Gson5/gson/src/main/java/com/google/gson/internal/bind/util/ISO8601Utils.java	1.0	193	193	1	add	offset  =  parseEndOffset  -  offset;	offset  =  endOffset;  	compilable	  [FE]  JsonSyntaxException  	13	1	replace
18	[BUG]  [BUGGY]  offset  =  parseEndOffset  -  offset;  [FE]  JsonSyntaxException  [FE]    JsonSyntaxException  [CONTEXT]  switch  (parseEndOffset  -  offset)  {  //  number  of  digits  parsed  case  2:  milliseconds  =  fraction  *  10;  break;  case  1:  milliseconds  =  fraction  *  100;  break;  default:  milliseconds  =  fraction;  }  [BUGGY]  offset  =  parseEndOffset  -  offset;  [BUGGY]  }  }  }  }  if  (date.length()  <=  offset)  {  throw  new  IllegalArgumentException( "No  time  zone  indicator ");  }  [CLASS]  ISO8601Utils  [METHOD]  parse  [RETURN_TYPE]  Date  String  date  ParsePosition  pos  [VARIABLES]  TimeZone  TIMEZONE_UTC  timezone  tz  boolean  hasT  IndexOutOfBoundsException  e  Calendar  calendar  char  c  timezoneIndicator  NumberFormatException  e  String  UTC_ID  act  cleaned  date  input  msg  timezoneId  timezoneOffset  ParseException  ex  Exception  fail  int  day  endOffset  fraction  hour  milliseconds  minutes  month  offset  parseEndOffset  seconds  year  IllegalArgumentException  e  ParsePosition  pos  	projects/Gson5/gson/src/main/java/com/google/gson/internal/bind/util/ISO8601Utils.java	1.0	193	193	1	replace	offset  =  parseEndOffset  -  offset;	offset  =  endOffset;  	compilable	  [FE]  JsonSyntaxException  	13	1	replace
