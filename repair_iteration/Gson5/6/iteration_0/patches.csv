bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  [FE]  JsonSyntaxException  [FE]    JsonSyntaxException  [CONTEXT]  int  fraction  =  parseInt(date,  offset,  parseEndOffset);  switch  (parseEndOffset  -  offset)  {  //  number  of  digits  parsed  case  2:  milliseconds  =  fraction  *  10;  break;  case  1:  milliseconds  =  fraction  *  100;  break;  default:  [BUGGY]  milliseconds  =  0;  [BUGGY]  }  offset  =  endOffset;  }  }  }  }  if  (date.length()  <=  offset)  {  throw  new  IllegalArgumentException( "No  time  zone  indicator ");  [CLASS]  ISO8601Utils  [METHOD]  parse  [RETURN_TYPE]  Date  String  date  ParsePosition  pos  [VARIABLES]  TimeZone  TIMEZONE_UTC  timezone  tz  boolean  hasT  IndexOutOfBoundsException  e  Calendar  calendar  char  c  timezoneIndicator  NumberFormatException  e  String  UTC_ID  act  cleaned  date  input  msg  timezoneId  timezoneOffset  ParseException  ex  Exception  fail  int  day  endOffset  fraction  hour  milliseconds  minutes  month  offset  parseEndOffset  seconds  year  IllegalArgumentException  e  ParsePosition  pos  	projects/Gson5/gson/src/main/java/com/google/gson/internal/bind/util/ISO8601Utils.java	1.0	191	191	1	add	milliseconds  =  0;	milliseconds  =  fraction;  	compilable	  [FE]  JsonSyntaxException  	11	1	replace
2	[BUG]  [BUGGY]  milliseconds  =  0;  [FE]  JsonSyntaxException  [FE]    JsonSyntaxException  [CONTEXT]  int  fraction  =  parseInt(date,  offset,  parseEndOffset);  switch  (parseEndOffset  -  offset)  {  //  number  of  digits  parsed  case  2:  milliseconds  =  fraction  *  10;  break;  case  1:  milliseconds  =  fraction  *  100;  break;  default:  [BUGGY]  milliseconds  =  0;  [BUGGY]  }  offset  =  endOffset;  }  }  }  }  if  (date.length()  <=  offset)  {  throw  new  IllegalArgumentException( "No  time  zone  indicator ");  [CLASS]  ISO8601Utils  [METHOD]  parse  [RETURN_TYPE]  Date  String  date  ParsePosition  pos  [VARIABLES]  TimeZone  TIMEZONE_UTC  timezone  tz  boolean  hasT  IndexOutOfBoundsException  e  Calendar  calendar  char  c  timezoneIndicator  NumberFormatException  e  String  UTC_ID  act  cleaned  date  input  msg  timezoneId  timezoneOffset  ParseException  ex  Exception  fail  int  day  endOffset  fraction  hour  milliseconds  minutes  month  offset  parseEndOffset  seconds  year  IllegalArgumentException  e  ParsePosition  pos  	projects/Gson5/gson/src/main/java/com/google/gson/internal/bind/util/ISO8601Utils.java	1.0	191	191	1	replace	milliseconds  =  0;	milliseconds  =  fraction;  	compilable	  [FE]  JsonSyntaxException  	11	1	replace
3	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      JsonSyntaxException  [CONTEXT]  int  fraction  =  parseInt(date,  offset,  parseEndOffset);  switch  (parseEndOffset  -  offset)  {  //  number  of  digits  parsed  case  2:  milliseconds  =  fraction  *  10;  break;  case  1:  milliseconds  =  fraction  *  100;  break;  default:  [BUGGY]  milliseconds  =  1;  [BUGGY]  }  offset  =  endOffset;  }  }  }  }  if  (date.length()  <=  offset)  {  throw  new  IllegalArgumentException( "No  time  zone  indicator ");  [CLASS]  ISO8601Utils  [METHOD]  parse  [RETURN_TYPE]  Date  String  date  ParsePosition  pos  [VARIABLES]  TimeZone  TIMEZONE_UTC  timezone  tz  boolean  hasT  IndexOutOfBoundsException  e  Calendar  calendar  char  c  timezoneIndicator  NumberFormatException  e  String  UTC_ID  act  cleaned  date  input  msg  timezoneId  timezoneOffset  ParseException  ex  Exception  fail  int  day  endOffset  fraction  hour  milliseconds  minutes  month  offset  parseEndOffset  seconds  year  IllegalArgumentException  e  ParsePosition  pos  	projects/Gson5/gson/src/main/java/com/google/gson/internal/bind/util/ISO8601Utils.java	1.0	191	191	1	add	milliseconds  =  1;	milliseconds  =  fraction;  	compilable	  [FE]  AssertionFailedError  	11	1	replace
4	[BUG]  [BUGGY]  milliseconds  =  1;  [FE]  AssertionFailedError  [FE]      JsonSyntaxException  [CONTEXT]  int  fraction  =  parseInt(date,  offset,  parseEndOffset);  switch  (parseEndOffset  -  offset)  {  //  number  of  digits  parsed  case  2:  milliseconds  =  fraction  *  10;  break;  case  1:  milliseconds  =  fraction  *  100;  break;  default:  [BUGGY]  milliseconds  =  1;  [BUGGY]  }  offset  =  endOffset;  }  }  }  }  if  (date.length()  <=  offset)  {  throw  new  IllegalArgumentException( "No  time  zone  indicator ");  [CLASS]  ISO8601Utils  [METHOD]  parse  [RETURN_TYPE]  Date  String  date  ParsePosition  pos  [VARIABLES]  TimeZone  TIMEZONE_UTC  timezone  tz  boolean  hasT  IndexOutOfBoundsException  e  Calendar  calendar  char  c  timezoneIndicator  NumberFormatException  e  String  UTC_ID  act  cleaned  date  input  msg  timezoneId  timezoneOffset  ParseException  ex  Exception  fail  int  day  endOffset  fraction  hour  milliseconds  minutes  month  offset  parseEndOffset  seconds  year  IllegalArgumentException  e  ParsePosition  pos  	projects/Gson5/gson/src/main/java/com/google/gson/internal/bind/util/ISO8601Utils.java	1.0	191	191	1	replace	milliseconds  =  1;	milliseconds  =  fraction;  	compilable	  [FE]  AssertionFailedError  	11	1	replace
5	[BUG]  [BUGGY]  milliseconds  =  digits;  [CE]  cannot  find  symbol  digits  [FE]        JsonSyntaxException  [CONTEXT]  int  fraction  =  parseInt(date,  offset,  parseEndOffset);  switch  (parseEndOffset  -  offset)  {  //  number  of  digits  parsed  case  2:  milliseconds  =  fraction  *  10;  break;  case  1:  milliseconds  =  fraction  *  100;  break;  default:  [BUGGY]  milliseconds  =  digits;  [BUGGY]  }  offset  =  endOffset;  }  }  }  }  if  (date.length()  <=  offset)  {  throw  new  IllegalArgumentException( "No  time  zone  indicator ");  [CLASS]  ISO8601Utils  [METHOD]  parse  [RETURN_TYPE]  Date  String  date  ParsePosition  pos  [VARIABLES]  TimeZone  TIMEZONE_UTC  timezone  tz  boolean  hasT  IndexOutOfBoundsException  e  Calendar  calendar  char  c  timezoneIndicator  NumberFormatException  e  String  UTC_ID  act  cleaned  date  input  msg  timezoneId  timezoneOffset  ParseException  ex  Exception  fail  int  day  endOffset  fraction  hour  milliseconds  minutes  month  offset  parseEndOffset  seconds  year  IllegalArgumentException  e  ParsePosition  pos  	projects/Gson5/gson/src/main/java/com/google/gson/internal/bind/util/ISO8601Utils.java	1.0	191	191	1	replace	milliseconds  =  digits;	milliseconds  =  fraction;  	non-compiled	[CE]  cannot  find  symbol  digits	11	None	replace
6	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          JsonSyntaxException  [CONTEXT]  int  fraction  =  parseInt(date,  offset,  parseEndOffset);  switch  (parseEndOffset  -  offset)  {  //  number  of  digits  parsed  case  2:  milliseconds  =  fraction  *  10;  break;  case  1:  milliseconds  =  fraction  *  100;  break;  default:  [BUGGY]  milliseconds  =  10;  [BUGGY]  }  offset  =  endOffset;  }  }  }  }  if  (date.length()  <=  offset)  {  throw  new  IllegalArgumentException( "No  time  zone  indicator ");  [CLASS]  ISO8601Utils  [METHOD]  parse  [RETURN_TYPE]  Date  String  date  ParsePosition  pos  [VARIABLES]  TimeZone  TIMEZONE_UTC  timezone  tz  boolean  hasT  IndexOutOfBoundsException  e  Calendar  calendar  char  c  timezoneIndicator  NumberFormatException  e  String  UTC_ID  act  cleaned  date  input  msg  timezoneId  timezoneOffset  ParseException  ex  Exception  fail  int  day  endOffset  fraction  hour  milliseconds  minutes  month  offset  parseEndOffset  seconds  year  IllegalArgumentException  e  ParsePosition  pos  	projects/Gson5/gson/src/main/java/com/google/gson/internal/bind/util/ISO8601Utils.java	1.0	191	191	1	add	milliseconds  =  10;	milliseconds  =  fraction;  	compilable	  [FE]  AssertionFailedError  	11	1	replace
7	[BUG]  [BUGGY]  milliseconds  =  10;  [FE]  AssertionFailedError  [FE]          JsonSyntaxException  [CONTEXT]  int  fraction  =  parseInt(date,  offset,  parseEndOffset);  switch  (parseEndOffset  -  offset)  {  //  number  of  digits  parsed  case  2:  milliseconds  =  fraction  *  10;  break;  case  1:  milliseconds  =  fraction  *  100;  break;  default:  [BUGGY]  milliseconds  =  10;  [BUGGY]  }  offset  =  endOffset;  }  }  }  }  if  (date.length()  <=  offset)  {  throw  new  IllegalArgumentException( "No  time  zone  indicator ");  [CLASS]  ISO8601Utils  [METHOD]  parse  [RETURN_TYPE]  Date  String  date  ParsePosition  pos  [VARIABLES]  TimeZone  TIMEZONE_UTC  timezone  tz  boolean  hasT  IndexOutOfBoundsException  e  Calendar  calendar  char  c  timezoneIndicator  NumberFormatException  e  String  UTC_ID  act  cleaned  date  input  msg  timezoneId  timezoneOffset  ParseException  ex  Exception  fail  int  day  endOffset  fraction  hour  milliseconds  minutes  month  offset  parseEndOffset  seconds  year  IllegalArgumentException  e  ParsePosition  pos  	projects/Gson5/gson/src/main/java/com/google/gson/internal/bind/util/ISO8601Utils.java	1.0	191	191	1	replace	milliseconds  =  10;	milliseconds  =  fraction;  	compilable	  [FE]  AssertionFailedError  	11	1	replace
8	[BUG]  [BUGGY]  [FE]  JsonSyntaxException  [FE]            JsonSyntaxException  [CONTEXT]  int  fraction  =  parseInt(date,  offset,  parseEndOffset);  switch  (parseEndOffset  -  offset)  {  //  number  of  digits  parsed  case  2:  milliseconds  =  fraction  *  10;  break;  case  1:  milliseconds  =  fraction  *  100;  break;  default:  [BUGGY]  milliseconds  =  1000;  [BUGGY]  }  offset  =  endOffset;  }  }  }  }  if  (date.length()  <=  offset)  {  throw  new  IllegalArgumentException( "No  time  zone  indicator ");  [CLASS]  ISO8601Utils  [METHOD]  parse  [RETURN_TYPE]  Date  String  date  ParsePosition  pos  [VARIABLES]  TimeZone  TIMEZONE_UTC  timezone  tz  boolean  hasT  IndexOutOfBoundsException  e  Calendar  calendar  char  c  timezoneIndicator  NumberFormatException  e  String  UTC_ID  act  cleaned  date  input  msg  timezoneId  timezoneOffset  ParseException  ex  Exception  fail  int  day  endOffset  fraction  hour  milliseconds  minutes  month  offset  parseEndOffset  seconds  year  IllegalArgumentException  e  ParsePosition  pos  	projects/Gson5/gson/src/main/java/com/google/gson/internal/bind/util/ISO8601Utils.java	1.0	191	191	1	add	milliseconds  =  1000;	milliseconds  =  fraction;  	compilable	  [FE]  JsonSyntaxException  	11	1	replace
9	[BUG]  [BUGGY]  milliseconds  =  1000;  [FE]  JsonSyntaxException  [FE]            JsonSyntaxException  [CONTEXT]  int  fraction  =  parseInt(date,  offset,  parseEndOffset);  switch  (parseEndOffset  -  offset)  {  //  number  of  digits  parsed  case  2:  milliseconds  =  fraction  *  10;  break;  case  1:  milliseconds  =  fraction  *  100;  break;  default:  [BUGGY]  milliseconds  =  1000;  [BUGGY]  }  offset  =  endOffset;  }  }  }  }  if  (date.length()  <=  offset)  {  throw  new  IllegalArgumentException( "No  time  zone  indicator ");  [CLASS]  ISO8601Utils  [METHOD]  parse  [RETURN_TYPE]  Date  String  date  ParsePosition  pos  [VARIABLES]  TimeZone  TIMEZONE_UTC  timezone  tz  boolean  hasT  IndexOutOfBoundsException  e  Calendar  calendar  char  c  timezoneIndicator  NumberFormatException  e  String  UTC_ID  act  cleaned  date  input  msg  timezoneId  timezoneOffset  ParseException  ex  Exception  fail  int  day  endOffset  fraction  hour  milliseconds  minutes  month  offset  parseEndOffset  seconds  year  IllegalArgumentException  e  ParsePosition  pos  	projects/Gson5/gson/src/main/java/com/google/gson/internal/bind/util/ISO8601Utils.java	1.0	191	191	1	replace	milliseconds  =  1000;	milliseconds  =  fraction;  	compilable	  [FE]  JsonSyntaxException  	11	1	replace
10	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]              JsonSyntaxException  [CONTEXT]  int  fraction  =  parseInt(date,  offset,  parseEndOffset);  switch  (parseEndOffset  -  offset)  {  //  number  of  digits  parsed  case  2:  milliseconds  =  fraction  *  10;  break;  case  1:  milliseconds  =  fraction  *  100;  break;  default:  [BUGGY]  milliseconds  =  100;  [BUGGY]  }  offset  =  endOffset;  }  }  }  }  if  (date.length()  <=  offset)  {  throw  new  IllegalArgumentException( "No  time  zone  indicator ");  [CLASS]  ISO8601Utils  [METHOD]  parse  [RETURN_TYPE]  Date  String  date  ParsePosition  pos  [VARIABLES]  TimeZone  TIMEZONE_UTC  timezone  tz  boolean  hasT  IndexOutOfBoundsException  e  Calendar  calendar  char  c  timezoneIndicator  NumberFormatException  e  String  UTC_ID  act  cleaned  date  input  msg  timezoneId  timezoneOffset  ParseException  ex  Exception  fail  int  day  endOffset  fraction  hour  milliseconds  minutes  month  offset  parseEndOffset  seconds  year  IllegalArgumentException  e  ParsePosition  pos  	projects/Gson5/gson/src/main/java/com/google/gson/internal/bind/util/ISO8601Utils.java	1.0	191	191	1	add	milliseconds  =  100;	milliseconds  =  fraction;  	compilable	  [FE]  AssertionFailedError  	11	1	replace
11	[BUG]  [BUGGY]  milliseconds  =  100;  [FE]  AssertionFailedError  [FE]              JsonSyntaxException  [CONTEXT]  int  fraction  =  parseInt(date,  offset,  parseEndOffset);  switch  (parseEndOffset  -  offset)  {  //  number  of  digits  parsed  case  2:  milliseconds  =  fraction  *  10;  break;  case  1:  milliseconds  =  fraction  *  100;  break;  default:  [BUGGY]  milliseconds  =  100;  [BUGGY]  }  offset  =  endOffset;  }  }  }  }  if  (date.length()  <=  offset)  {  throw  new  IllegalArgumentException( "No  time  zone  indicator ");  [CLASS]  ISO8601Utils  [METHOD]  parse  [RETURN_TYPE]  Date  String  date  ParsePosition  pos  [VARIABLES]  TimeZone  TIMEZONE_UTC  timezone  tz  boolean  hasT  IndexOutOfBoundsException  e  Calendar  calendar  char  c  timezoneIndicator  NumberFormatException  e  String  UTC_ID  act  cleaned  date  input  msg  timezoneId  timezoneOffset  ParseException  ex  Exception  fail  int  day  endOffset  fraction  hour  milliseconds  minutes  month  offset  parseEndOffset  seconds  year  IllegalArgumentException  e  ParsePosition  pos  	projects/Gson5/gson/src/main/java/com/google/gson/internal/bind/util/ISO8601Utils.java	1.0	191	191	1	replace	milliseconds  =  100;	milliseconds  =  fraction;  	compilable	  [FE]  AssertionFailedError  	11	1	replace
12	[BUG]  [BUGGY]  [FE]  JsonSyntaxException  [FE]                JsonSyntaxException  [CONTEXT]  int  fraction  =  parseInt(date,  offset,  parseEndOffset);  switch  (parseEndOffset  -  offset)  {  //  number  of  digits  parsed  case  2:  milliseconds  =  fraction  *  10;  break;  case  1:  milliseconds  =  fraction  *  100;  break;  default:  [BUGGY]  milliseconds  =  fraction  *  10;  [BUGGY]  }  offset  =  endOffset;  }  }  }  }  if  (date.length()  <=  offset)  {  throw  new  IllegalArgumentException( "No  time  zone  indicator ");  [CLASS]  ISO8601Utils  [METHOD]  parse  [RETURN_TYPE]  Date  String  date  ParsePosition  pos  [VARIABLES]  TimeZone  TIMEZONE_UTC  timezone  tz  boolean  hasT  IndexOutOfBoundsException  e  Calendar  calendar  char  c  timezoneIndicator  NumberFormatException  e  String  UTC_ID  act  cleaned  date  input  msg  timezoneId  timezoneOffset  ParseException  ex  Exception  fail  int  day  endOffset  fraction  hour  milliseconds  minutes  month  offset  parseEndOffset  seconds  year  IllegalArgumentException  e  ParsePosition  pos  	projects/Gson5/gson/src/main/java/com/google/gson/internal/bind/util/ISO8601Utils.java	1.0	191	191	1	add	milliseconds  =  fraction  *  10;	milliseconds  =  fraction;  	compilable	  [FE]  JsonSyntaxException  	11	1	replace
13	[BUG]  [BUGGY]  milliseconds  =  fraction  *  10;  [FE]  JsonSyntaxException  [FE]                JsonSyntaxException  [CONTEXT]  int  fraction  =  parseInt(date,  offset,  parseEndOffset);  switch  (parseEndOffset  -  offset)  {  //  number  of  digits  parsed  case  2:  milliseconds  =  fraction  *  10;  break;  case  1:  milliseconds  =  fraction  *  100;  break;  default:  [BUGGY]  milliseconds  =  fraction  *  10;  [BUGGY]  }  offset  =  endOffset;  }  }  }  }  if  (date.length()  <=  offset)  {  throw  new  IllegalArgumentException( "No  time  zone  indicator ");  [CLASS]  ISO8601Utils  [METHOD]  parse  [RETURN_TYPE]  Date  String  date  ParsePosition  pos  [VARIABLES]  TimeZone  TIMEZONE_UTC  timezone  tz  boolean  hasT  IndexOutOfBoundsException  e  Calendar  calendar  char  c  timezoneIndicator  NumberFormatException  e  String  UTC_ID  act  cleaned  date  input  msg  timezoneId  timezoneOffset  ParseException  ex  Exception  fail  int  day  endOffset  fraction  hour  milliseconds  minutes  month  offset  parseEndOffset  seconds  year  IllegalArgumentException  e  ParsePosition  pos  	projects/Gson5/gson/src/main/java/com/google/gson/internal/bind/util/ISO8601Utils.java	1.0	191	191	1	replace	milliseconds  =  fraction  *  10;	milliseconds  =  fraction;  	compilable	  [FE]  JsonSyntaxException  	11	1	replace
14	[BUG]  [BUGGY]  [FE]  JsonSyntaxException  [FE]                  JsonSyntaxException  [CONTEXT]  int  fraction  =  parseInt(date,  offset,  parseEndOffset);  switch  (parseEndOffset  -  offset)  {  //  number  of  digits  parsed  case  2:  milliseconds  =  fraction  *  10;  break;  case  1:  milliseconds  =  fraction  *  100;  break;  default:  [BUGGY]    [BUGGY]  }  offset  =  endOffset;  }  }  }  }  if  (date.length()  <=  offset)  {  throw  new  IllegalArgumentException( "No  time  zone  indicator ");  [CLASS]  ISO8601Utils  [METHOD]  parse  [RETURN_TYPE]  Date  String  date  ParsePosition  pos  [VARIABLES]  TimeZone  TIMEZONE_UTC  timezone  tz  boolean  hasT  IndexOutOfBoundsException  e  Calendar  calendar  char  c  timezoneIndicator  NumberFormatException  e  String  UTC_ID  act  cleaned  date  input  msg  timezoneId  timezoneOffset  ParseException  ex  Exception  fail  int  day  endOffset  fraction  hour  milliseconds  minutes  month  offset  parseEndOffset  seconds  year  IllegalArgumentException  e  ParsePosition  pos  	projects/Gson5/gson/src/main/java/com/google/gson/internal/bind/util/ISO8601Utils.java	1.0	191	191	1	add	  	milliseconds  =  fraction;  	compilable	  [FE]  JsonSyntaxException  	11	1	replace
15	[BUG]  [BUGGY]    [FE]  JsonSyntaxException  [FE]                  JsonSyntaxException  [CONTEXT]  int  fraction  =  parseInt(date,  offset,  parseEndOffset);  switch  (parseEndOffset  -  offset)  {  //  number  of  digits  parsed  case  2:  milliseconds  =  fraction  *  10;  break;  case  1:  milliseconds  =  fraction  *  100;  break;  default:  [BUGGY]    [BUGGY]  }  offset  =  endOffset;  }  }  }  }  if  (date.length()  <=  offset)  {  throw  new  IllegalArgumentException( "No  time  zone  indicator ");  [CLASS]  ISO8601Utils  [METHOD]  parse  [RETURN_TYPE]  Date  String  date  ParsePosition  pos  [VARIABLES]  TimeZone  TIMEZONE_UTC  timezone  tz  boolean  hasT  IndexOutOfBoundsException  e  Calendar  calendar  char  c  timezoneIndicator  NumberFormatException  e  String  UTC_ID  act  cleaned  date  input  msg  timezoneId  timezoneOffset  ParseException  ex  Exception  fail  int  day  endOffset  fraction  hour  milliseconds  minutes  month  offset  parseEndOffset  seconds  year  IllegalArgumentException  e  ParsePosition  pos  	projects/Gson5/gson/src/main/java/com/google/gson/internal/bind/util/ISO8601Utils.java	1.0	191	191	1	replace	  	milliseconds  =  fraction;  	compilable	  [FE]  JsonSyntaxException  	11	1	replace
16	[BUG]  [BUGGY]  [FE]  JsonSyntaxException  [FE]    JsonSyntaxException  [CONTEXT]  int  fraction  =  parseInt(date,  offset,  parseEndOffset);  switch  (parseEndOffset  -  offset)  {  //  number  of  digits  parsed  case  2:  milliseconds  =  fraction  *  10;  break;  case  1:  milliseconds  =  fraction  *  100;  break;  default:  [BUGGY]  milliseconds  -=  fraction;  [BUGGY]  }  offset  =  endOffset;  }  }  }  }  if  (date.length()  <=  offset)  {  throw  new  IllegalArgumentException( "No  time  zone  indicator ");  [CLASS]  ISO8601Utils  [METHOD]  parse  [RETURN_TYPE]  Date  String  date  ParsePosition  pos  [VARIABLES]  TimeZone  TIMEZONE_UTC  timezone  tz  boolean  hasT  IndexOutOfBoundsException  e  Calendar  calendar  char  c  timezoneIndicator  NumberFormatException  e  String  UTC_ID  act  cleaned  date  input  msg  timezoneId  timezoneOffset  ParseException  ex  Exception  fail  int  day  endOffset  fraction  hour  milliseconds  minutes  month  offset  parseEndOffset  seconds  year  IllegalArgumentException  e  ParsePosition  pos  	projects/Gson5/gson/src/main/java/com/google/gson/internal/bind/util/ISO8601Utils.java	1.0	191	191	1	add	milliseconds  -=  fraction;	milliseconds  =  fraction;  	compilable	  [FE]  JsonSyntaxException  	11	1	replace
17	[BUG]  [BUGGY]  milliseconds  -=  fraction;  [FE]  JsonSyntaxException  [FE]    JsonSyntaxException  [CONTEXT]  int  fraction  =  parseInt(date,  offset,  parseEndOffset);  switch  (parseEndOffset  -  offset)  {  //  number  of  digits  parsed  case  2:  milliseconds  =  fraction  *  10;  break;  case  1:  milliseconds  =  fraction  *  100;  break;  default:  [BUGGY]  milliseconds  -=  fraction;  [BUGGY]  }  offset  =  endOffset;  }  }  }  }  if  (date.length()  <=  offset)  {  throw  new  IllegalArgumentException( "No  time  zone  indicator ");  [CLASS]  ISO8601Utils  [METHOD]  parse  [RETURN_TYPE]  Date  String  date  ParsePosition  pos  [VARIABLES]  TimeZone  TIMEZONE_UTC  timezone  tz  boolean  hasT  IndexOutOfBoundsException  e  Calendar  calendar  char  c  timezoneIndicator  NumberFormatException  e  String  UTC_ID  act  cleaned  date  input  msg  timezoneId  timezoneOffset  ParseException  ex  Exception  fail  int  day  endOffset  fraction  hour  milliseconds  minutes  month  offset  parseEndOffset  seconds  year  IllegalArgumentException  e  ParsePosition  pos  	projects/Gson5/gson/src/main/java/com/google/gson/internal/bind/util/ISO8601Utils.java	1.0	191	191	1	replace	milliseconds  -=  fraction;	milliseconds  =  fraction;  	compilable	  [FE]  JsonSyntaxException  	11	1	replace
