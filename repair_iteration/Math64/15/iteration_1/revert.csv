projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java426cost=previousCost;
projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java426cost=xNorm;
projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java426cost=tmpVec;
projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java426cost-=previousCost;
projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java426cost=Math.max(previousCost,xNorm);
projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java426
projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java426doubletmpVec=Math.sqrt(xNorm);
projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java426tmpVec=Math.sqrt(xNorm);
projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java426tmpVec=Math.sqrt(previousCost);
projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java426doubletmpVec=Math.sqrt(remainingCost);
projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java426tmpVec=Math.min(previousCost,xNorm);
projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java426Preconditions.checkState(cols<0);
projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java426intsolvedCols=diag[0]*permutation[1];
projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java426Preconditions.checkState(cols!=0);
projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java426Preconditions.checkState(cols<=0);
projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java426cost=Math.max(cosine,previousCost);
projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java426cost=Math.max(cost,previousCost);
projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java426doublecols=diag[k]*point[k];
projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java426tmpVec=Math.min(lastIteration,oldX[0]);
projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java426cost=Math.max(xNorm,previousCost);
projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java426cost=Math.max(result,previousCost);
projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java426cost=Math.max(previousCost,cosine);
projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java426cost-=previousCost;intpreviousCost-=previousCost;
projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java426cost-=previousCost;cost-=previousCost;
projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java426cost-=previousCost;-=previousCost;
projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java426cost-=previousCost;intcost-=previousCost;
projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java426cost-=previousCost;doublepreviousCost-=previousCost;
projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java426tmpVec=Math.min(remainings,oldX[0]);
projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java426tmpVec=Math.min(resistance,oldX[0]);
projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java426tmpVec=Math.min(previousCost,oldX[0]);
projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java426tmpVec=Math.min(result,oldX[0]);
projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java426cost=Math.max(previousCost,cost);
projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java426cost=Math.max(lastIteration,previousCost);
projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java426cost=tmpVec+1;
projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java426cost=tmpVec.length;
projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java426cost=Math.max(cost,previousCost);cost=Math.max(cost,previousCost);
projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java426cost=Math.max(cost,previousCost);intpreviousCost=Math.max(cost,previousCost);
projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java426cost=Math.max(cost,previousCost);Cost=Math.max(cost,previousCost);
projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java426cost=Math.max(cost,previousCost);intcost=Math.max(cost,previousCost);
projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java426cost=Math.max(cost,previousCost);Integercost=Math.max(cost,previousCost);
projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java426doublecols=diag[k]*point[k]+1;
projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java426doublecols=diag[k]*point[0];
projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java426doublecols=point[k]*diag[k];
projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java426tmpVec=Math.sqrt(result);
projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java426tmpVec=Math.sqrt(remainings);
projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java426tmpVec=Math.sqrt(cols,xNorm);
projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java426cost=Math.max(previousCost,xNorm);intcost=Math.max(previousCost,xNorm);
projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java426cost=Math.max(previousCost,xNorm);doublecost=Math.max(previousCost,xNorm);
projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java426cost=Math.max(previousCost,xNorm);cost=Math.max(previousCost,xNorm);
projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java426cost=Math.max(previousCost,xNorm);intpreviousCost=Math.max(previousCost,xNorm);
projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java426cost=Math.max(previousCost,xNorm);Integercost=Math.max(previousCost,xNorm);
projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java426cost=xNorm;cost=xNorm;
projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java426cost=xNorm;intcost=xNorm;
projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java426cost=xNorm;doublecost=xNorm;
projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java426cost=xNorm;xNorm=xNorm;
projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java426cost=xNorm;Cost=xNorm;
projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java426cost=Math.sqrt(xNorm);
projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java426cost=Math.ceil(xNorm);
projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java426cost=xNorm+1;
projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java426cost=Math.sqrt(xK);
projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java426tmpVec=Math.min(result,previousCost,xNorm);
projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java426tmpVec=Math.min(previousCost,xNorm,cols);
projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java426tmpVec=Math.min(remainingCost,xNorm);
projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java426tmpVec=Math.min(previousCost,xNorm,0);
projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java426Preconditions.checkState(cols==0);
projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java426Preconditions.checkState(cols>=0);
projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java426cost-=cols;
projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java426cost-=xNorm;
projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java426cost-=preRed;
projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java426cost-=permutation;
projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java426doubletmpVec=Math.sqrt(previousCost);
projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java426doubleresiduals=Math.sqrt(remainingCost);
projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java426doubletmpVec=Math.sqrt(remainingCost,previousCost);
projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java426IntegersolvedCols=Math.min(results.length,oldX.length);
projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java426intsolvedCols=Math.min(results.length,oldX.length);
projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java426intsolvedCols=oldX.length;
projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java426intsolvedCols=Math.min(results.length,oldX);
projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java426Preconditions.checkState(cols>0);
projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java426solvedCols=Math.min(results.length,oldX.length);
projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java426cost=Math.max(remainingCost,xNorm);
projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java426cost=Math.max(result,xNorm);
projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java426cost=Math.max(period,xNorm);
projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java426tmpVec=Math.sqrt(previousCost,cols);
projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java426tmpVec=Math.sqrt(remainingCost);
projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java426tmpVec=Math.sqrt(previousCost,cost);
projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java426doublesolvedCols=diag[0]*permutation[1];
projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java426DoublesolvedCols=diag[0]*permutation[1];
projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java426longsolvedCols=diag[0]*permutation[1];
projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java426doublesolvedCols=permutation[0]*diag[1];
projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java426doubletmpVec=Math.sqrt(remainings);
projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java426doubletmpVec=Math.sqrt(result);
projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java426doubletmpVec=Math.sqrt(remainder);
projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java426intsolvedCols=Math.min(resolvedCols,xNorm);
projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java426IntegersolvedCols=Math.min(resolvedCols,xNorm);
projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java426IntegersolvedCols=Math.min(resolvedCols,0);
projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java426intsolvedCols=Math.min(resolvedCols,oldX);
projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java426tmpVec=Math.min(remainings,xNorm);
projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java426tmpVec=Math.min(remainders,xNorm);
projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java426tmpVec=Math.sqrt(previousCost+1);
projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java426tmpVec=Math.sqrt(remainderCost);
projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java426cost=xNorm;Integercost=xNorm;
projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java426cost=xNorm;IntegerxNorm=Math.sqrt(xNorm);
projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java426cost-=previousCost;IntegerpreviousCost-=previousCost;
projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java426cost-=previousCost;intpreviousCost=Math.min(previousCost,xNorm);
projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java426doublecols=diag[0]*point[0];
projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java426cost=newVectorialPointValuePair(tmpVec,oldRes);
projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java426cost=newVectorialPointValuePair(tmpVec,cols);
projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java426doubletmpVec=Math.sqrt(diag);
projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java426cost=Math.abs(xNorm);
projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java426cost=0;
projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java426doubletmpVec=Math.sqrt(remainingCost+1);
projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java426doubleresidualCost=Math.sqrt(remainingCost);
projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java426cost=Math.max(cosine,preRed);
projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java426floatsolvedCols=diag[0]*permutation[1];
projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java426tmpVec=Math.min(remainderCost,oldX[0]);
projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java426tmpVec=Math.min(results,oldX[0]);
projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java426cost-=permutation.length;
projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java426cost-=oldX;
projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java426cost=Math.max(cost,previousCost);IntegerpreviousCost=Math.max(cost,previousCost);
projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java426cost=Math.max(cost,previousCost);Preconditions.checkState(cols!=0);
projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java426cost=Math.max(cost,xNorm);
projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java426cost=Math.max(cost,oldX);
projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java426cost=Math.max(remainder,xNorm);
projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java426cost=Math.max(cost,previousCost);doublepreviousCost=Math.max(cost,previousCost);
projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java426cost=Math.max(cost,previousCost);if(previousCost!=null){cost=Math.max(cost,previousCost);}
projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java426cost=tmp;
projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java426IntegersolvedCols=Math.max(relativeTolerance,cols);
projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java426intsolvedCols=Math.min(relatives.length,cols.length);
projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java426IntegersolvedCols=Math.max(relativeTolerance,oldX);
projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java426IntegersolvedCols=Math.max(relativeTolerance,oldX.length);
projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java426cost=Math.max(previousCost,xNorm);doublepreviousCost=Math.max(previousCost,xNorm);
projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java426cost=Math.max(previousCost,xNorm);IntegerpreviousCost=Math.max(previousCost,xNorm);
projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java426cost=xNorm;if(cost<=xNorm){cost=xNorm;}
projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java426cost=Math.max(cosine,xNorm);
projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java426cost=Math.max(cosine,oldX);
projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java426tmpVec=Math.min(remainderCost,xNorm);
projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java426tmpVec=Math.min(previousCost,xNorm,1);
projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java426cost-=Math.ceil(previousCost);
projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java426cost-=Math.max(cosine,previousCost);
projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java426cost=Math.max(remainder,previousCost);
projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java426cost=tmpVec.result;
projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java426cost=tmpVec*tmpVec;
projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java426Preconditions.checkState(oldX<0);
projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java426cost=Math.max(lastIteration,xNorm);
projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java426tmpVec=Math.sqrt(xNorm,firstIteration);
projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java426tmpVec=Math.sqrt(xNorm,previousCost);
projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java426tmpVec=Math.sqrt(xNorm,1);
projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java426cost-=previousCost;if(previousCost!=null){cost-=previousCost;}
projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java426cost-=previousCost;if(previousCost!=null){cost-=previousCost;}else{for(intj=0;j<cols;++k){doublexK=diag[k]*point[k];xNorm+=xK*
projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java426intsolvedCols=Math.min(relatives.length,oldX);
projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java426Preconditions.checkState(oldX!=0);
projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java426doublecols=diagnostic[k]*point[k];
