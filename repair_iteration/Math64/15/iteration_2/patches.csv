bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError      [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  cost  =  Math.max(xNorm,  xNorm);  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	add	cost  =  Math.max(xNorm,  xNorm);	  cost    =    Math.max(result,    xNorm);    	compilable	  [FE]  AssertionFailedError  	79	11	replace
2	[BUG]  [BUGGY]  cost  =  Math.max(xNorm,  xNorm);  [FE]  AssertionFailedError  [FE]          AssertionFailedError      [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  cost  =  Math.max(xNorm,  xNorm);  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	cost  =  Math.max(xNorm,  xNorm);	  cost    =    Math.max(result,    xNorm);    	compilable	  [FE]  AssertionFailedError  	79	11	replace
3	[BUG]  [BUGGY]  cost  =  Math.max(result,  xK);  [CE]  cannot  find  symbol  result  [FE]            AssertionFailedError      [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  cost  =  Math.max(result,  xK);  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	cost  =  Math.max(result,  xK);	  cost    =    Math.max(result,    xNorm);    	non-compiled	[CE]  cannot  find  symbol  result	79	None	replace
4	[BUG]  [BUGGY]  cost  =  Math.max(remainings,  xNorm);  [CE]  cannot  find  symbol  remainings  [FE]              AssertionFailedError      [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  cost  =  Math.max(remainings,  xNorm);  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	cost  =  Math.max(remainings,  xNorm);	  cost    =    Math.max(result,    xNorm);    	non-compiled	[CE]  cannot  find  symbol  remainings	79	None	replace
5	[BUG]  [BUGGY]  tmpVec  =  Math.sqrt(previousCost,  oldX,  cols);  [CE]  method  sqrt  in  class  Math  cannot  be  applied  to  given  types;  [FE]                AssertionFailedError      [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  tmpVec  =  Math.sqrt(previousCost,  oldX,  cols);  [BUGGY]      cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	tmpVec  =  Math.sqrt(previousCost,  oldX,  cols);	  tmpVec    =    Math.sqrt(previousCost,    cols);    	non-compiled	[CE]  method  sqrt  in  class  Math  cannot  be  applied  to  given  types;	81	None	replace
6	[BUG]  [BUGGY]  tmpVec  =  Math.sqrt(previousCost,  xNorm,  cols);  [CE]  method  sqrt  in  class  Math  cannot  be  applied  to  given  types;  [FE]                  AssertionFailedError      [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  tmpVec  =  Math.sqrt(previousCost,  xNorm,  cols);  [BUGGY]      cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	tmpVec  =  Math.sqrt(previousCost,  xNorm,  cols);	  tmpVec    =    Math.sqrt(previousCost,    cols);    	non-compiled	[CE]  method  sqrt  in  class  Math  cannot  be  applied  to  given  types;	81	None	replace
7	[BUG]  [BUGGY]  tmpVec  =  Math.sqrt(previousCost,  previousCost,  cols);  [CE]  method  sqrt  in  class  Math  cannot  be  applied  to  given  types;  [FE]                    AssertionFailedError      [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  tmpVec  =  Math.sqrt(previousCost,  previousCost,  cols);  [BUGGY]      cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	tmpVec  =  Math.sqrt(previousCost,  previousCost,  cols);	  tmpVec    =    Math.sqrt(previousCost,    cols);    	non-compiled	[CE]  method  sqrt  in  class  Math  cannot  be  applied  to  given  types;	81	None	replace
8	[BUG]  [BUGGY]  tmpVec  =  Math.sqrt(previousCost,  preRed,  cols);  [CE]  method  sqrt  in  class  Math  cannot  be  applied  to  given  types;  [FE]                      AssertionFailedError      [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  tmpVec  =  Math.sqrt(previousCost,  preRed,  cols);  [BUGGY]      cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	tmpVec  =  Math.sqrt(previousCost,  preRed,  cols);	  tmpVec    =    Math.sqrt(previousCost,    cols);    	non-compiled	[CE]  method  sqrt  in  class  Math  cannot  be  applied  to  given  types;	81	None	replace
9	[BUG]  [BUGGY]  cost  =  Math.max(previousCost,  tmpVec);  [CE]  no  suitable  method  found  for  max(double,double[])  [FE]                AssertionFailedError      [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  cost  =  Math.max(previousCost,  tmpVec);  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	cost  =  Math.max(previousCost,  tmpVec);	  cost    =    Math.max(previousCost,    cosine);    	non-compiled	[CE]  no  suitable  method  found  for  max(double,double[])	4	None	replace
10	[BUG]  [BUGGY]  cost  =  Math.max(previousCost,  xK);  [CE]  cannot  find  symbol  xK  [FE]                  AssertionFailedError      [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  cost  =  Math.max(previousCost,  xK);  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	cost  =  Math.max(previousCost,  xK);	  cost    =    Math.max(previousCost,    cosine);    	non-compiled	[CE]  cannot  find  symbol  xK	4	None	replace
11	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                    AssertionFailedError      [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  cost  =  Math.max(previousCost,  cols);  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	add	cost  =  Math.max(previousCost,  cols);	  cost    =    Math.max(previousCost,    cosine);    	compilable	  [FE]  AssertionFailedError  	4	8	replace
12	[BUG]  [BUGGY]  cost  =  Math.max(previousCost,  cols);  [FE]  AssertionFailedError  [FE]                    AssertionFailedError      [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  cost  =  Math.max(previousCost,  cols);  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	cost  =  Math.max(previousCost,  cols);	  cost    =    Math.max(previousCost,    cosine);    	compilable	  [FE]  AssertionFailedError  	4	8	replace
13	[BUG]  [BUGGY]  cost    =    Math.max(previousCost,    xNorm);    double  cost  =  Math.max(previousCost,  xNorm);  double  cost  =  Math.max(previousCost,  xNorm);  double  cost  =  Math.max(previousCost,  xNorm);  [CE]  variable  cost  is  already  defined  in  method  doOptimize()  [FE]    AssertionFailedError    [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  cost    =    Math.max(previousCost,    xNorm);    double  cost  =  Math.max(previousCost,  xNorm);  double  cost  =  Math.max(previousCost,  xNorm);  double  cost  =  Math.max(previousCost,  xNorm);  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	cost        =        Math.max(previousCost,        xNorm);        double    cost    =    Math.max(previousCost,    xNorm);    double  cost  =  Math.max(previousCost,  xNorm);  double  cost  =  Math.max(previousCost,  xNorm);	  	non-compiled	[CE]  variable  cost  is  already  defined  in  method  doOptimize()	34	None	add
14	[BUG]  [BUGGY]  cost    =    Math.max(previousCost,    xNorm);    double  cost  =  Math.max(previousCost,  xNorm);  double  previousCost  =  Math.max(previousCost,  xNorm);  double  cost  =  Math.max(previousCost,  xNorm);  [CE]  variable  previousCost  is  already  defined  in  method  doOptimize()  [FE]      AssertionFailedError    [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  cost    =    Math.max(previousCost,    xNorm);    double  cost  =  Math.max(previousCost,  xNorm);  double  previousCost  =  Math.max(previousCost,  xNorm);  double  cost  =  Math.max(previousCost,  xNorm);  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	cost        =        Math.max(previousCost,        xNorm);        double    cost    =    Math.max(previousCost,    xNorm);    double  previousCost  =  Math.max(previousCost,  xNorm);  double  cost  =  Math.max(previousCost,  xNorm);	  	non-compiled	[CE]  variable  previousCost  is  already  defined  in  method  doOptimize()	34	None	add
15	[BUG]  [BUGGY]  cost    =    Math.max(previousCost,    xNorm);    double  cost  =  Math.max(previousCost,  xNorm);  int  previousCost  =  Math.max(previousCost,  xNorm);  double  cost  =  Math.max(previousCost,  xNorm);  [CE]  variable  previousCost  is  already  defined  in  method  doOptimize()  [FE]        AssertionFailedError    [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  cost    =    Math.max(previousCost,    xNorm);    double  cost  =  Math.max(previousCost,  xNorm);  int  previousCost  =  Math.max(previousCost,  xNorm);  double  cost  =  Math.max(previousCost,  xNorm);  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	cost        =        Math.max(previousCost,        xNorm);        double    cost    =    Math.max(previousCost,    xNorm);    int  previousCost  =  Math.max(previousCost,  xNorm);  double  cost  =  Math.max(previousCost,  xNorm);	  	non-compiled	[CE]  variable  previousCost  is  already  defined  in  method  doOptimize()	34	None	add
16	[BUG]  [BUGGY]  cost    =    Math.max(previousCost,    xNorm);    double  cost  =  Math.max(previousCost,  xNorm);  double  initialCost  =  Math.max(previousCost,  xNorm);  double  cost  =  Math.max(previousCost,  xNorm);  [CE]  variable  cost  is  already  defined  in  method  doOptimize()  [FE]          AssertionFailedError    [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  cost    =    Math.max(previousCost,    xNorm);    double  cost  =  Math.max(previousCost,  xNorm);  double  initialCost  =  Math.max(previousCost,  xNorm);  double  cost  =  Math.max(previousCost,  xNorm);  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	cost        =        Math.max(previousCost,        xNorm);        double    cost    =    Math.max(previousCost,    xNorm);    double  initialCost  =  Math.max(previousCost,  xNorm);  double  cost  =  Math.max(previousCost,  xNorm);	  	non-compiled	[CE]  variable  cost  is  already  defined  in  method  doOptimize()	34	None	add
17	[BUG]  [BUGGY]  cost    =    Math.max(previousCost,    xNorm);    double  cost  =  Math.max(previousCost,  xNorm);  cost  =  Math.max(previousCost,  xNorm);  double  cost  =  Math.max(previousCost,  xNorm);  [CE]  variable  cost  is  already  defined  in  method  doOptimize()  [FE]            AssertionFailedError    [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  cost    =    Math.max(previousCost,    xNorm);    double  cost  =  Math.max(previousCost,  xNorm);  cost  =  Math.max(previousCost,  xNorm);  double  cost  =  Math.max(previousCost,  xNorm);  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	cost        =        Math.max(previousCost,        xNorm);        double    cost    =    Math.max(previousCost,    xNorm);    cost  =  Math.max(previousCost,  xNorm);  double  cost  =  Math.max(previousCost,  xNorm);	  	non-compiled	[CE]  variable  cost  is  already  defined  in  method  doOptimize()	34	None	add
18	[BUG]  [BUGGY]  double  remainingCost  =  Math.sqrt(remainingCost);  [CE]  variable  remainingCost  might  not  have  been  initialized  [FE]                    AssertionFailedError      [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  double  remainingCost  =  Math.sqrt(remainingCost);  [BUGGY]      cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	double  remainingCost  =  Math.sqrt(remainingCost);	  double    residualCost    =    Math.sqrt(remainingCost);    	non-compiled	[CE]  variable  remainingCost  might  not  have  been  initialized	116	None	replace
19	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                      AssertionFailedError      [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  double  residualCost  =  Math.sqrt(previousCost);  [BUGGY]      cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	add	double  residualCost  =  Math.sqrt(previousCost);	  double    residualCost    =    Math.sqrt(remainingCost);    	compilable	  [FE]  AssertionFailedError  	116	4	replace
20	[BUG]  [BUGGY]  double  residualCost  =  Math.sqrt(previousCost);  [FE]  AssertionFailedError  [FE]                      AssertionFailedError      [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  double  residualCost  =  Math.sqrt(previousCost);  [BUGGY]      cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	double  residualCost  =  Math.sqrt(previousCost);	  double    residualCost    =    Math.sqrt(remainingCost);    	compilable	  [FE]  AssertionFailedError  	116	4	replace
21	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                        AssertionFailedError      [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  double  remainingCost  =  Math.sqrt(previousCost);  [BUGGY]      cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	add	double  remainingCost  =  Math.sqrt(previousCost);	  double    residualCost    =    Math.sqrt(remainingCost);    	compilable	  [FE]  AssertionFailedError  	116	4	replace
22	[BUG]  [BUGGY]  double  remainingCost  =  Math.sqrt(previousCost);  [FE]  AssertionFailedError  [FE]                        AssertionFailedError      [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  double  remainingCost  =  Math.sqrt(previousCost);  [BUGGY]      cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	double  remainingCost  =  Math.sqrt(previousCost);	  double    residualCost    =    Math.sqrt(remainingCost);    	compilable	  [FE]  AssertionFailedError  	116	4	replace
23	[BUG]  [BUGGY]  double  tmpVec  =  Math.sqrt(results);  [CE]  variable  tmpVec  is  already  defined  in  method  doOptimize()  [FE]            AssertionFailedError      [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  double  tmpVec  =  Math.sqrt(results);  [BUGGY]      cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	double  tmpVec  =  Math.sqrt(results);	  double    tmpVec    =    Math.sqrt(diag);    	non-compiled	[CE]  variable  tmpVec  is  already  defined  in  method  doOptimize()	110	None	replace
24	[BUG]  [BUGGY]  tmpVec  =  Math.sqrt(previousCost  *  1);  [CE]  incompatible  types  [FE]                AssertionFailedError      [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  tmpVec  =  Math.sqrt(previousCost  *  1);  [BUGGY]      cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	tmpVec  =  Math.sqrt(previousCost  *  1);	  tmpVec    =    Math.sqrt(previousCost    +    1);    	non-compiled	[CE]  incompatible  types	100	None	replace
25	[BUG]  [BUGGY]  tmpVec  =  Math.sqrt(previousCost  +  2);  [CE]  incompatible  types  [FE]                  AssertionFailedError      [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  tmpVec  =  Math.sqrt(previousCost  +  2);  [BUGGY]      cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	tmpVec  =  Math.sqrt(previousCost  +  2);	  tmpVec    =    Math.sqrt(previousCost    +    1);    	non-compiled	[CE]  incompatible  types	100	None	replace
26	[BUG]  [BUGGY]  tmpVec  =  Math.sqrt(previousCost  +  3);  [CE]  incompatible  types  [FE]                    AssertionFailedError      [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  tmpVec  =  Math.sqrt(previousCost  +  3);  [BUGGY]      cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	tmpVec  =  Math.sqrt(previousCost  +  3);	  tmpVec    =    Math.sqrt(previousCost    +    1);    	non-compiled	[CE]  incompatible  types	100	None	replace
27	[BUG]  [BUGGY]  double  cols  =  oldX[k]  *  diag[k];  [CE]  cannot  find  symbol  k  [FE]                AssertionFailedError      [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  double  cols  =  oldX[k]  *  diag[k];  [BUGGY]      cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	double  cols  =  oldX[k]  *  diag[k];	  double    cols    =    point[k]    *    diag[k];    	non-compiled	[CE]  cannot  find  symbol  k	29	None	replace
28	[BUG]  [BUGGY]  double  previousCost  =  Math.max(previousCost,  xNorm);  [CE]  variable  previousCost  is  already  defined  in  method  doOptimize()  [FE]        AssertionFailedError      [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  double  previousCost  =  Math.max(previousCost,  xNorm);  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	double  previousCost  =  Math.max(previousCost,  xNorm);	  cost    =    Math.max(previousCost,    xNorm);    double    previousCost    =    Math.max(previousCost,    xNorm);    	non-compiled	[CE]  variable  previousCost  is  already  defined  in  method  doOptimize()	137	None	replace
29	[BUG]  [BUGGY]  double  previousCost  =  Math.max(xNorm,  previousCost);  [CE]  variable  previousCost  is  already  defined  in  method  doOptimize()  [FE]          AssertionFailedError      [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  double  previousCost  =  Math.max(xNorm,  previousCost);  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	double  previousCost  =  Math.max(xNorm,  previousCost);	  cost    =    Math.max(previousCost,    xNorm);    double    previousCost    =    Math.max(previousCost,    xNorm);    	non-compiled	[CE]  variable  previousCost  is  already  defined  in  method  doOptimize()	137	None	replace
30	[BUG]  [BUGGY]  double  previousCost  =  Math.max(remainingCost,  xNorm);  [CE]  variable  previousCost  is  already  defined  in  method  doOptimize()  [FE]            AssertionFailedError      [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  double  previousCost  =  Math.max(remainingCost,  xNorm);  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	double  previousCost  =  Math.max(remainingCost,  xNorm);	  cost    =    Math.max(previousCost,    xNorm);    double    previousCost    =    Math.max(previousCost,    xNorm);    	non-compiled	[CE]  variable  previousCost  is  already  defined  in  method  doOptimize()	137	None	replace
31	[BUG]  [BUGGY]  double  previousCost  =  Math.max(result,  xNorm);  [CE]  variable  previousCost  is  already  defined  in  method  doOptimize()  [FE]              AssertionFailedError      [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  double  previousCost  =  Math.max(result,  xNorm);  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	double  previousCost  =  Math.max(result,  xNorm);	  cost    =    Math.max(previousCost,    xNorm);    double    previousCost    =    Math.max(previousCost,    xNorm);    	non-compiled	[CE]  variable  previousCost  is  already  defined  in  method  doOptimize()	137	None	replace
32	[BUG]  [BUGGY]  double  residuals  =  Math.sqrt(remainings);  [CE]  cannot  find  symbol  remainings  [FE]            AssertionFailedError      [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  double  residuals  =  Math.sqrt(remainings);  [BUGGY]      cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	double  residuals  =  Math.sqrt(remainings);	  double    tmpVec    =    Math.sqrt(remainings);    	non-compiled	[CE]  cannot  find  symbol  remainings	91	None	replace
33	[BUG]  [BUGGY]  double  tmpVec  =  Math.sqrt(remainings  +  1);  [CE]  variable  tmpVec  is  already  defined  in  method  doOptimize()  [FE]              AssertionFailedError      [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  double  tmpVec  =  Math.sqrt(remainings  +  1);  [BUGGY]      cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	double  tmpVec  =  Math.sqrt(remainings  +  1);	  double    tmpVec    =    Math.sqrt(remainings);    	non-compiled	[CE]  variable  tmpVec  is  already  defined  in  method  doOptimize()	91	None	replace
34	[BUG]  [BUGGY]  int  solvedCols  =  Math.min(relatives.length,  cols);  [CE]  cannot  find  symbol  relatives  [FE]        AssertionFailedError      [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  int  solvedCols  =  Math.min(relatives.length,  cols);  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	int  solvedCols  =  Math.min(relatives.length,  cols);	          int    solvedCols    =    Math.min(relatives.length,    oldX);    	non-compiled	[CE]  cannot  find  symbol  relatives	157	None	replace
35	[BUG]  [BUGGY]  int  solvedCols  =  Math.min(relatives.length,  xNorm);  [CE]  cannot  find  symbol  relatives  [FE]          AssertionFailedError      [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  int  solvedCols  =  Math.min(relatives.length,  xNorm);  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	int  solvedCols  =  Math.min(relatives.length,  xNorm);	          int    solvedCols    =    Math.min(relatives.length,    oldX);    	non-compiled	[CE]  cannot  find  symbol  relatives	157	None	replace
36	[BUG]  [BUGGY]  int  solvedCols  =  Math.min(relatives.length,  oldX,  cols);  [CE]  cannot  find  symbol  relatives  [FE]            AssertionFailedError      [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  int  solvedCols  =  Math.min(relatives.length,  oldX,  cols);  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	int  solvedCols  =  Math.min(relatives.length,  oldX,  cols);	          int    solvedCols    =    Math.min(relatives.length,    oldX);    	non-compiled	[CE]  cannot  find  symbol  relatives	157	None	replace
37	[BUG]  [BUGGY]  tmpVec  =  Math.min(remainingCost,  oldX[0]);  [CE]  cannot  find  symbol  remainingCost  [FE]                  AssertionFailedError      [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  tmpVec  =  Math.min(remainingCost,  oldX[0]);  [BUGGY]      cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	tmpVec  =  Math.min(remainingCost,  oldX[0]);	  tmpVec    =    Math.min(previousCost,    oldX[0]);    	non-compiled	[CE]  cannot  find  symbol  remainingCost	13	None	replace
38	[BUG]  [BUGGY]  tmpVec  =  Math.min(result,  previousCost,  oldX[0]);  [CE]  cannot  find  symbol  result  [FE]                    AssertionFailedError      [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  tmpVec  =  Math.min(result,  previousCost,  oldX[0]);  [BUGGY]      cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	tmpVec  =  Math.min(result,  previousCost,  oldX[0]);	  tmpVec    =    Math.min(previousCost,    oldX[0]);    	non-compiled	[CE]  cannot  find  symbol  result	13	None	replace
39	[BUG]  [BUGGY]  tmpVec  =  Math.min(previousCost,  oldX[0],  xNorm);  [CE]  no  suitable  method  found  for  min(double,double,double)  [FE]                      AssertionFailedError      [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  tmpVec  =  Math.min(previousCost,  oldX[0],  xNorm);  [BUGGY]      cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	tmpVec  =  Math.min(previousCost,  oldX[0],  xNorm);	  tmpVec    =    Math.min(previousCost,    oldX[0]);    	non-compiled	[CE]  no  suitable  method  found  for  min(double,double,double)	13	None	replace
40	[BUG]  [BUGGY]  tmpVec  =  Math.min(result,  preRed,  xNorm);  [CE]  cannot  find  symbol  result  [FE]                    AssertionFailedError      [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  tmpVec  =  Math.min(result,  preRed,  xNorm);  [BUGGY]      cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	tmpVec  =  Math.min(result,  preRed,  xNorm);	  tmpVec    =    Math.min(result,    previousCost,    xNorm);    	non-compiled	[CE]  cannot  find  symbol  result	55	None	replace
41	[BUG]  [BUGGY]  tmpVec  =  Math.min(result,  oldX,  previousCost,  xNorm);  [CE]  cannot  find  symbol  result  [FE]                      AssertionFailedError      [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  tmpVec  =  Math.min(result,  oldX,  previousCost,  xNorm);  [BUGGY]      cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	tmpVec  =  Math.min(result,  oldX,  previousCost,  xNorm);	  tmpVec    =    Math.min(result,    previousCost,    xNorm);    	non-compiled	[CE]  cannot  find  symbol  result	55	None	replace
42	[BUG]  [BUGGY]  tmpVec  =  Math.min(result,  previousCost,  xK);  [CE]  cannot  find  symbol  result  [FE]                        AssertionFailedError      [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  tmpVec  =  Math.min(result,  previousCost,  xK);  [BUGGY]      cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	tmpVec  =  Math.min(result,  previousCost,  xK);	  tmpVec    =    Math.min(result,    previousCost,    xNorm);    	non-compiled	[CE]  cannot  find  symbol  result	55	None	replace
43	[BUG]  [BUGGY]  cost  -=  Math.ceil(previousCost);  int  cost  -=  Math.ceil(previousCost);  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  cost  -=  Math.ceil(previousCost);  int  cost  -=  Math.ceil(previousCost);  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	cost    -=    Math.ceil(previousCost);    int  cost  -=  Math.ceil(previousCost);	  	non-compiled	[CE]  ';'  expected	144	None	add
44	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  cost  -=  Math.ceil(previousCost);  cost  -=  Math.ceil(previousCost);  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	add	cost    -=    Math.ceil(previousCost);    cost  -=  Math.ceil(previousCost);	  	compilable	  [FE]  AssertionFailedError  	144	2	add
45	[BUG]  [BUGGY]  cost  -=  Math.ceil(previousCost);  cost  -=  Math.ceil(previousCost);  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  cost  -=  Math.ceil(previousCost);  cost  -=  Math.ceil(previousCost);  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	cost    -=    Math.ceil(previousCost);    cost  -=  Math.ceil(previousCost);	  	compilable	  [FE]  AssertionFailedError  	144	2	add
46	[BUG]  [BUGGY]  cost  -=  Math.ceil(previousCost);  double  cost  -=  Math.ceil(previousCost);  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  cost  -=  Math.ceil(previousCost);  double  cost  -=  Math.ceil(previousCost);  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	cost    -=    Math.ceil(previousCost);    double  cost  -=  Math.ceil(previousCost);	  	non-compiled	[CE]  ';'  expected	144	None	add
47	[BUG]  [BUGGY]  cost  -=  Math.ceil(previousCost);  -=  Math.ceil(previousCost);  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  cost  -=  Math.ceil(previousCost);  -=  Math.ceil(previousCost);  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	cost    -=    Math.ceil(previousCost);    -=  Math.ceil(previousCost);	  	non-compiled	[CE]  illegal  start  of  expression	144	None	add
48	[BUG]  [BUGGY]  cost  -=  Math.ceil(previousCost);  Cost  -=  Math.ceil(previousCost);  [CE]  cannot  find  symbol  Cost  [FE]            AssertionFailedError    [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  cost  -=  Math.ceil(previousCost);  Cost  -=  Math.ceil(previousCost);  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	cost    -=    Math.ceil(previousCost);    Cost  -=  Math.ceil(previousCost);	  	non-compiled	[CE]  cannot  find  symbol  Cost	144	None	add
49	[BUG]  [BUGGY]  double  tmpVec  =  Math.sqrt(previousCost  +  1);  [CE]  variable  tmpVec  is  already  defined  in  method  doOptimize()  [FE]                  AssertionFailedError      [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  double  tmpVec  =  Math.sqrt(previousCost  +  1);  [BUGGY]      cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	double  tmpVec  =  Math.sqrt(previousCost  +  1);	  double    tmpVec    =    Math.sqrt(remainingCost    +    1);    	non-compiled	[CE]  variable  tmpVec  is  already  defined  in  method  doOptimize()	115	None	replace
50	[BUG]  [BUGGY]  double  tmpVec  =  Math.sqrt(remainingCost  *  1);  [CE]  variable  tmpVec  is  already  defined  in  method  doOptimize()  [FE]                    AssertionFailedError      [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  double  tmpVec  =  Math.sqrt(remainingCost  *  1);  [BUGGY]      cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	double  tmpVec  =  Math.sqrt(remainingCost  *  1);	  double    tmpVec    =    Math.sqrt(remainingCost    +    1);    	non-compiled	[CE]  variable  tmpVec  is  already  defined  in  method  doOptimize()	115	None	replace
51	[BUG]  [BUGGY]  double  tmpVec  =  Math.sqrt(remainingCost  +  2);  [CE]  variable  tmpVec  is  already  defined  in  method  doOptimize()  [FE]                      AssertionFailedError      [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  double  tmpVec  =  Math.sqrt(remainingCost  +  2);  [BUGGY]      cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	double  tmpVec  =  Math.sqrt(remainingCost  +  2);	  double    tmpVec    =    Math.sqrt(remainingCost    +    1);    	non-compiled	[CE]  variable  tmpVec  is  already  defined  in  method  doOptimize()	115	None	replace
52	[BUG]  [BUGGY]  Integer  previousCost  -=  previousCost;  [CE]  ';'  expected  [FE]        AssertionFailedError      [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  Integer  previousCost  -=  previousCost;  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	Integer  previousCost  -=  previousCost;	  cost    -=    previousCost;    Integer    previousCost    -=    previousCost;    	non-compiled	[CE]  ';'  expected	104	None	replace
53	[BUG]  [BUGGY]  Integer  previousCost  -=  preRed;  [CE]  ';'  expected  [FE]          AssertionFailedError      [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  Integer  previousCost  -=  preRed;  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	Integer  previousCost  -=  preRed;	  cost    -=    previousCost;    Integer    previousCost    -=    previousCost;    	non-compiled	[CE]  ';'  expected	104	None	replace
54	[BUG]  [BUGGY]  int  previousCost  -=  previousCost;  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  int  previousCost  -=  previousCost;  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	int  previousCost  -=  previousCost;	  cost    -=    previousCost;    Integer    previousCost    -=    previousCost;    	non-compiled	[CE]  ';'  expected	104	None	replace
55	[BUG]  [BUGGY]  Integer  previousCost  -=  oldX;  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  Integer  previousCost  -=  oldX;  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	Integer  previousCost  -=  oldX;	  cost    -=    previousCost;    Integer    previousCost    -=    previousCost;    	non-compiled	[CE]  ';'  expected	104	None	replace
56	[BUG]  [BUGGY]  int  cost  -=  previousCost;  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  int  cost  -=  previousCost;  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	int  cost  -=  previousCost;	  cost    -=    previousCost;    int    cost    -=    previousCost;    	non-compiled	[CE]  ';'  expected	9	None	replace
57	[BUG]  [BUGGY]  int  cost  -=  oldX;  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  int  cost  -=  oldX;  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	int  cost  -=  oldX;	  cost    -=    previousCost;    int    cost    -=    previousCost;    	non-compiled	[CE]  ';'  expected	9	None	replace
58	[BUG]  [BUGGY]  int  cost  -=  preRed;  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  int  cost  -=  preRed;  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	int  cost  -=  preRed;	  cost    -=    previousCost;    int    cost    -=    previousCost;    	non-compiled	[CE]  ';'  expected	9	None	replace
59	[BUG]  [BUGGY]  int  cost  -=  cols;  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  int  cost  -=  cols;  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	int  cost  -=  cols;	  cost    -=    previousCost;    int    cost    -=    previousCost;    	non-compiled	[CE]  ';'  expected	9	None	replace
60	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  cost  =  xNorm  +  2;  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	add	cost  =  xNorm  +  2;	  cost    =    xNorm    +    1;    	compilable	  [FE]  AssertionFailedError  	53	10	replace
61	[BUG]  [BUGGY]  cost  =  xNorm  +  2;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  cost  =  xNorm  +  2;  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	cost  =  xNorm  +  2;	  cost    =    xNorm    +    1;    	compilable	  [FE]  AssertionFailedError  	53	10	replace
62	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  cost  =  cols  +  1;  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	add	cost  =  cols  +  1;	  cost    =    xNorm    +    1;    	compilable	  [FE]  AssertionFailedError  	53	12	replace
63	[BUG]  [BUGGY]  cost  =  cols  +  1;  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  cost  =  cols  +  1;  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	cost  =  cols  +  1;	  cost    =    xNorm    +    1;    	compilable	  [FE]  AssertionFailedError  	53	12	replace
64	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  cost  =  xNorm  +  3;  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	add	cost  =  xNorm  +  3;	  cost    =    xNorm    +    1;    	compilable	  [FE]  AssertionFailedError  	53	10	replace
65	[BUG]  [BUGGY]  cost  =  xNorm  +  3;  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  cost  =  xNorm  +  3;  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	cost  =  xNorm  +  3;	  cost    =    xNorm    +    1;    	compilable	  [FE]  AssertionFailedError  	53	10	replace
66	[BUG]  [BUGGY]  cost  =  Math.max(exprCost,  xNorm);  [CE]  cannot  find  symbol  exprCost  [FE]    AssertionFailedError    [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  cost  =  Math.max(exprCost,  xNorm);  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	cost  =  Math.max(exprCost,  xNorm);	  cost    =    Math.max(xNorm,    previousCost);    	non-compiled	[CE]  cannot  find  symbol  exprCost	2	None	replace
67	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  cost  =  Math.max(0,  previousCost);  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	add	cost  =  Math.max(0,  previousCost);	  cost    =    Math.max(cost,    previousCost);    cost    =    Math.max(cost,    previousCost);    	compilable	  [FE]  AssertionFailedError  	22	2	replace
68	[BUG]  [BUGGY]  cost  =  Math.max(0,  previousCost);  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  cost  =  Math.max(0,  previousCost);  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	cost  =  Math.max(0,  previousCost);	  cost    =    Math.max(cost,    previousCost);    cost    =    Math.max(cost,    previousCost);    	compilable	  [FE]  AssertionFailedError  	22	2	replace
69	[BUG]  [BUGGY]  cost  =  Math.max(remainingCost,  previousCost);  [CE]  cannot  find  symbol  remainingCost  [FE]      AssertionFailedError    [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  cost  =  Math.max(remainingCost,  previousCost);  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	cost  =  Math.max(remainingCost,  previousCost);	  cost    =    Math.max(cost,    previousCost);    cost    =    Math.max(cost,    previousCost);    	non-compiled	[CE]  cannot  find  symbol  remainingCost	22	None	replace
70	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  cost  =  Math.max(xNorm,  cost);  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	add	cost  =  Math.max(xNorm,  cost);	  cost    =    Math.max(cost,    xNorm);    	compilable	  [FE]  AssertionFailedError  	127	9	replace
71	[BUG]  [BUGGY]  cost  =  Math.max(xNorm,  cost);  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  cost  =  Math.max(xNorm,  cost);  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	cost  =  Math.max(xNorm,  cost);	  cost    =    Math.max(cost,    xNorm);    	compilable	  [FE]  AssertionFailedError  	127	9	replace
72	[BUG]  [BUGGY]  cost  =  Math.max(cos,  xNorm);  [CE]  cannot  find  symbol  cos  [FE]      AssertionFailedError    [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  cost  =  Math.max(cos,  xNorm);  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	cost  =  Math.max(cos,  xNorm);	  cost    =    Math.max(cost,    xNorm);    	non-compiled	[CE]  cannot  find  symbol  cos	127	None	replace
73	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  cost  =  Math.min(cost,  xNorm);  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	add	cost  =  Math.min(cost,  xNorm);	  cost    =    Math.max(cost,    xNorm);    	compilable	  [FE]  AssertionFailedError  	127	7	replace
74	[BUG]  [BUGGY]  cost  =  Math.min(cost,  xNorm);  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  cost  =  Math.min(cost,  xNorm);  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	cost  =  Math.min(cost,  xNorm);	  cost    =    Math.max(cost,    xNorm);    	compilable	  [FE]  AssertionFailedError  	127	7	replace
75	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  cost  -=  xNorm  +  1;  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	add	cost  -=  xNorm  +  1;	  cost    -=    xNorm;    	compilable	  [FE]  AssertionFailedError  	64	15	replace
76	[BUG]  [BUGGY]  cost  -=  xNorm  +  1;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  cost  -=  xNorm  +  1;  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	cost  -=  xNorm  +  1;	  cost    -=    xNorm;    	compilable	  [FE]  AssertionFailedError  	64	15	replace
77	[BUG]  [BUGGY]  tmpVec  -=  xNorm;  [CE]  bad  operand  types  for  binary  operator  '-'  [FE]      AssertionFailedError    [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  tmpVec  -=  xNorm;  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	tmpVec  -=  xNorm;	  cost    -=    xNorm;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '-'	64	None	replace
78	[BUG]  [BUGGY]  cost  -=  xK;  [CE]  cannot  find  symbol  xK  [FE]        AssertionFailedError    [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  cost  -=  xK;  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	cost  -=  xK;	  cost    -=    xNorm;    	non-compiled	[CE]  cannot  find  symbol  xK	64	None	replace
79	[BUG]  [BUGGY]  tmpVec  =  Math.sqrt(previousCost,  xNorm,  cost);  [CE]  method  sqrt  in  class  Math  cannot  be  applied  to  given  types;  [FE]                    AssertionFailedError      [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  tmpVec  =  Math.sqrt(previousCost,  xNorm,  cost);  [BUGGY]      cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	tmpVec  =  Math.sqrt(previousCost,  xNorm,  cost);	  tmpVec    =    Math.sqrt(previousCost,    cost);    	non-compiled	[CE]  method  sqrt  in  class  Math  cannot  be  applied  to  given  types;	83	None	replace
80	[BUG]  [BUGGY]  tmpVec  =  Math.sqrt(previousCost,  xNorm);  [CE]  method  sqrt  in  class  Math  cannot  be  applied  to  given  types;  [FE]                      AssertionFailedError      [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  tmpVec  =  Math.sqrt(previousCost,  xNorm);  [BUGGY]      cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	tmpVec  =  Math.sqrt(previousCost,  xNorm);	  tmpVec    =    Math.sqrt(previousCost,    cost);    	non-compiled	[CE]  method  sqrt  in  class  Math  cannot  be  applied  to  given  types;	83	None	replace
81	[BUG]  [BUGGY]  tmpVec  =  Math.sqrt(previousCost,  preRed,  cost);  [CE]  method  sqrt  in  class  Math  cannot  be  applied  to  given  types;  [FE]                        AssertionFailedError      [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  tmpVec  =  Math.sqrt(previousCost,  preRed,  cost);  [BUGGY]      cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	tmpVec  =  Math.sqrt(previousCost,  preRed,  cost);	  tmpVec    =    Math.sqrt(previousCost,    cost);    	non-compiled	[CE]  method  sqrt  in  class  Math  cannot  be  applied  to  given  types;	83	None	replace
82	[BUG]  [BUGGY]  tmpVec  =  Math.sqrt(previousCost,  oldX,  cost);  [CE]  method  sqrt  in  class  Math  cannot  be  applied  to  given  types;  [FE]                          AssertionFailedError      [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  tmpVec  =  Math.sqrt(previousCost,  oldX,  cost);  [BUGGY]      cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	tmpVec  =  Math.sqrt(previousCost,  oldX,  cost);	  tmpVec    =    Math.sqrt(previousCost,    cost);    	non-compiled	[CE]  method  sqrt  in  class  Math  cannot  be  applied  to  given  types;	83	None	replace
83	[BUG]  [BUGGY]  cost  =  Math.max(xNorm,  oldX);  [CE]  no  suitable  method  found  for  max(double,double[])  [FE]              AssertionFailedError      [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  cost  =  Math.max(xNorm,  oldX);  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	cost  =  Math.max(xNorm,  oldX);	  cost    =    Math.max(cosine,    oldX);    	non-compiled	[CE]  no  suitable  method  found  for  max(double,double[])	141	None	replace
84	[BUG]  [BUGGY]  cost  =  Math.max(result,  oldX);  [CE]  cannot  find  symbol  result  [FE]                AssertionFailedError      [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  cost  =  Math.max(result,  oldX);  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	cost  =  Math.max(result,  oldX);	  cost    =    Math.max(cosine,    oldX);    	non-compiled	[CE]  cannot  find  symbol  result	141	None	replace
85	[BUG]  [BUGGY]  cost  =  Math.max(remainings,  oldX);  [CE]  cannot  find  symbol  remainings  [FE]                  AssertionFailedError      [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  cost  =  Math.max(remainings,  oldX);  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	cost  =  Math.max(remainings,  oldX);	  cost    =    Math.max(cosine,    oldX);    	non-compiled	[CE]  cannot  find  symbol  remainings	141	None	replace
86	[BUG]  [BUGGY]  cost  -=  permutation.length;  int  cost  -=  permutation.length;  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  cost  -=  permutation.length;  int  cost  -=  permutation.length;  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	cost    -=    permutation.length;    int  cost  -=  permutation.length;	  	non-compiled	[CE]  ';'  expected	121	None	add
87	[BUG]  [BUGGY]  cost  -=  permutation.length;  -=  permutation.length;  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  cost  -=  permutation.length;  -=  permutation.length;  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	cost    -=    permutation.length;    -=  permutation.length;	  	non-compiled	[CE]  illegal  start  of  expression	121	None	add
88	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  cost  -=  permutation.length;  cost  -=  permutation.length;  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	add	cost    -=    permutation.length;    cost  -=  permutation.length;	  	compilable	  [FE]  AssertionFailedError  	121	2	add
89	[BUG]  [BUGGY]  cost  -=  permutation.length;  cost  -=  permutation.length;  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  cost  -=  permutation.length;  cost  -=  permutation.length;  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	cost    -=    permutation.length;    cost  -=  permutation.length;	  	compilable	  [FE]  AssertionFailedError  	121	2	add
90	[BUG]  [BUGGY]  cost  -=  permutation.length;  Integer  cost  -=  permutation.length;  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  cost  -=  permutation.length;  Integer  cost  -=  permutation.length;  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	cost    -=    permutation.length;    Integer  cost  -=  permutation.length;	  	non-compiled	[CE]  ';'  expected	121	None	add
91	[BUG]  [BUGGY]  cost  -=  permutation.length;  double  cost  -=  permutation.length;  [CE]  ';'  expected  [FE]            AssertionFailedError    [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  cost  -=  permutation.length;  double  cost  -=  permutation.length;  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	cost    -=    permutation.length;    double  cost  -=  permutation.length;	  	non-compiled	[CE]  ';'  expected	121	None	add
92	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  cost  =  0;  cost  =  0;  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	add	cost    =    0;    cost  =  0;	  	compilable	  [FE]  AssertionFailedError  	113	2	add
93	[BUG]  [BUGGY]  cost  =  0;  cost  =  0;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  cost  =  0;  cost  =  0;  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	cost    =    0;    cost  =  0;	  	compilable	  [FE]  AssertionFailedError  	113	2	add
94	[BUG]  [BUGGY]  cost  =  0;  int  cost  =  0;  [CE]  possible  loss  of  precision  [FE]      AssertionFailedError    [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  cost  =  0;  int  cost  =  0;  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	cost    =    0;    int  cost  =  0;	  	non-compiled	[CE]  possible  loss  of  precision	113	None	add
95	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  cost  =  0;  double  cost  =  0;  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	add	cost    =    0;    double  cost  =  0;	  	compilable	  [FE]  AssertionFailedError  	113	15	add
96	[BUG]  [BUGGY]  cost  =  0;  double  cost  =  0;  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  cost  =  0;  double  cost  =  0;  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	cost    =    0;    double  cost  =  0;	  	compilable	  [FE]  AssertionFailedError  	113	15	add
97	[BUG]  [BUGGY]  cost  =  0;  tmpVec  =  Math.sqrt(xNorm);  [CE]  incompatible  types  [FE]          AssertionFailedError    [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  cost  =  0;  tmpVec  =  Math.sqrt(xNorm);  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	cost    =    0;    tmpVec  =  Math.sqrt(xNorm);	  	non-compiled	[CE]  incompatible  types	113	None	add
98	[BUG]  [BUGGY]  cost  =  0;  tmpVec  =  Math.sqrt(tmpVec);  [CE]  method  sqrt  in  class  Math  cannot  be  applied  to  given  types;  [FE]            AssertionFailedError    [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  cost  =  0;  tmpVec  =  Math.sqrt(tmpVec);  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	cost    =    0;    tmpVec  =  Math.sqrt(tmpVec);	  	non-compiled	[CE]  method  sqrt  in  class  Math  cannot  be  applied  to  given  types;	113	None	add
99	[BUG]  [BUGGY]  tmpVec  =  Math.min(result,  xNorm);  [CE]  cannot  find  symbol  result  [FE]                    AssertionFailedError      [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  tmpVec  =  Math.min(result,  xNorm);  [BUGGY]      cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	tmpVec  =  Math.min(result,  xNorm);	  tmpVec    =    Math.min(remainderCost,    xNorm);    	non-compiled	[CE]  cannot  find  symbol  result	142	None	replace
100	[BUG]  [BUGGY]  tmpVec  =  Math.min(resistance,  xNorm);  [CE]  cannot  find  symbol  resistance  [FE]                      AssertionFailedError      [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  tmpVec  =  Math.min(resistance,  xNorm);  [BUGGY]      cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	tmpVec  =  Math.min(resistance,  xNorm);	  tmpVec    =    Math.min(remainderCost,    xNorm);    	non-compiled	[CE]  cannot  find  symbol  resistance	142	None	replace
101	[BUG]  [BUGGY]  Integer  cost  =  xNorm;  [CE]  incompatible  types  [FE]        AssertionFailedError      [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  Integer  cost  =  xNorm;  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	Integer  cost  =  xNorm;	  cost    =    xNorm;    Integer    cost    =    xNorm;    	non-compiled	[CE]  incompatible  types	102	None	replace
102	[BUG]  [BUGGY]  Integer  cost  =  xNorm.intValue();  [CE]  double  cannot  be  dereferenced  [FE]          AssertionFailedError      [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  Integer  cost  =  xNorm.intValue();  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	Integer  cost  =  xNorm.intValue();	  cost    =    xNorm;    Integer    cost    =    xNorm;    	non-compiled	[CE]  double  cannot  be  dereferenced	102	None	replace
103	[BUG]  [BUGGY]  Integer  cost  =  new  Integer(xNorm);  [CE]  no  suitable  constructor  found  for  Integer(double)  [FE]            AssertionFailedError      [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  Integer  cost  =  new  Integer(xNorm);  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	Integer  cost  =  new  Integer(xNorm);	  cost    =    xNorm;    Integer    cost    =    xNorm;    	non-compiled	[CE]  no  suitable  constructor  found  for  Integer(double)	102	None	replace
104	[BUG]  [BUGGY]  Integer  cost  =  xNorm.intValue;  [CE]  double  cannot  be  dereferenced  [FE]              AssertionFailedError      [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  Integer  cost  =  xNorm.intValue;  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	Integer  cost  =  xNorm.intValue;	  cost    =    xNorm;    Integer    cost    =    xNorm;    	non-compiled	[CE]  double  cannot  be  dereferenced	102	None	replace
105	[BUG]  [BUGGY]  tmpVec  =  Math.min(result,  previousCost,  xNorm,  1);  [CE]  cannot  find  symbol  result  [FE]                      AssertionFailedError      [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  tmpVec  =  Math.min(result,  previousCost,  xNorm,  1);  [BUGGY]      cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	tmpVec  =  Math.min(result,  previousCost,  xNorm,  1);	  tmpVec    =    Math.min(previousCost,    xNorm,    1);    	non-compiled	[CE]  cannot  find  symbol  result	143	None	replace
106	[BUG]  [BUGGY]  tmpVec  =  Math.min(remainings,  previousCost,  xNorm,  1);  [CE]  cannot  find  symbol  remainings  [FE]                        AssertionFailedError      [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  tmpVec  =  Math.min(remainings,  previousCost,  xNorm,  1);  [BUGGY]      cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	tmpVec  =  Math.min(remainings,  previousCost,  xNorm,  1);	  tmpVec    =    Math.min(previousCost,    xNorm,    1);    	non-compiled	[CE]  cannot  find  symbol  remainings	143	None	replace
107	[BUG]  [BUGGY]  tmpVec  =  Math.min(previousCost,  xNorm,  2);  [CE]  no  suitable  method  found  for  min(double,double,int)  [FE]                          AssertionFailedError      [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  tmpVec  =  Math.min(previousCost,  xNorm,  2);  [BUGGY]      cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	tmpVec  =  Math.min(previousCost,  xNorm,  2);	  tmpVec    =    Math.min(previousCost,    xNorm,    1);    	non-compiled	[CE]  no  suitable  method  found  for  min(double,double,int)	143	None	replace
108	[BUG]  [BUGGY]  Double  solvedCols  =  diag[0]  *  cols[1];  [CE]  array  required,  but  int  found  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  Double  solvedCols  =  diag[0]  *  cols[1];  [BUGGY]      cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	Double  solvedCols  =  diag[0]  *  cols[1];	  Double    solvedCols    =    diag[0]    *    permutation[1];    	non-compiled	[CE]  array  required,  but  int  found	87	None	replace
109	[BUG]  [BUGGY]  Double  solvedCols  =  cols[0]  *  permutation[1];  [CE]  array  required,  but  int  found  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  Double  solvedCols  =  cols[0]  *  permutation[1];  [BUGGY]      cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	Double  solvedCols  =  cols[0]  *  permutation[1];	  Double    solvedCols    =    diag[0]    *    permutation[1];    	non-compiled	[CE]  array  required,  but  int  found	87	None	replace
110	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  Double  solvedCols  =  permutation[0]  *  diag[1];  [BUGGY]      cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	add	Double  solvedCols  =  permutation[0]  *  diag[1];	  Double    solvedCols    =    diag[0]    *    permutation[1];    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	87	14	replace
111	[BUG]  [BUGGY]  Double  solvedCols  =  permutation[0]  *  diag[1];  [FE]  ArrayIndexOutOfBoundsException  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  Double  solvedCols  =  permutation[0]  *  diag[1];  [BUGGY]      cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	Double  solvedCols  =  permutation[0]  *  diag[1];	  Double    solvedCols    =    diag[0]    *    permutation[1];    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	87	14	replace
112	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  Double  solvedCols  =  permutation[0]  *  diagR[1];  [BUGGY]      cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	add	Double  solvedCols  =  permutation[0]  *  diagR[1];	  Double    solvedCols    =    diag[0]    *    permutation[1];    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	87	11	replace
113	[BUG]  [BUGGY]  Double  solvedCols  =  permutation[0]  *  diagR[1];  [FE]  ArrayIndexOutOfBoundsException  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  Double  solvedCols  =  permutation[0]  *  diagR[1];  [BUGGY]      cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	Double  solvedCols  =  permutation[0]  *  diagR[1];	  Double    solvedCols    =    diag[0]    *    permutation[1];    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	87	11	replace
114	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  cost  =  Math.max(cost,  xNorm);  cost  =  Math.max(cost,  xNorm);  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	add	cost    =    Math.max(cost,    xNorm);    cost  =  Math.max(cost,  xNorm);	  	compilable	  [FE]  AssertionFailedError  	126	2	add
115	[BUG]  [BUGGY]  cost  =  Math.max(cost,  xNorm);  cost  =  Math.max(cost,  xNorm);  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  cost  =  Math.max(cost,  xNorm);  cost  =  Math.max(cost,  xNorm);  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	cost    =    Math.max(cost,    xNorm);    cost  =  Math.max(cost,  xNorm);	  	compilable	  [FE]  AssertionFailedError  	126	2	add
116	[BUG]  [BUGGY]  cost  =  Math.max(cost,  xNorm);  Cost  =  Math.max(cost,  xNorm);  [CE]  cannot  find  symbol  Cost  [FE]      AssertionFailedError    [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  cost  =  Math.max(cost,  xNorm);  Cost  =  Math.max(cost,  xNorm);  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	cost    =    Math.max(cost,    xNorm);    Cost  =  Math.max(cost,  xNorm);	  	non-compiled	[CE]  cannot  find  symbol  Cost	126	None	add
117	[BUG]  [BUGGY]  cost  =  Math.max(cost,  xNorm);  int  cost  =  Math.max(cost,  xNorm);  [CE]  possible  loss  of  precision  [FE]        AssertionFailedError    [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  cost  =  Math.max(cost,  xNorm);  int  cost  =  Math.max(cost,  xNorm);  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	cost    =    Math.max(cost,    xNorm);    int  cost  =  Math.max(cost,  xNorm);	  	non-compiled	[CE]  possible  loss  of  precision	126	None	add
118	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  cost  =  Math.max(cost,  xNorm);  xNorm  =  Math.max(cost,  xNorm);  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	add	cost    =    Math.max(cost,    xNorm);    xNorm  =  Math.max(cost,  xNorm);	  	compilable	  [FE]  AssertionFailedError  	126	6	add
119	[BUG]  [BUGGY]  cost  =  Math.max(cost,  xNorm);  xNorm  =  Math.max(cost,  xNorm);  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  cost  =  Math.max(cost,  xNorm);  xNorm  =  Math.max(cost,  xNorm);  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	cost    =    Math.max(cost,    xNorm);    xNorm  =  Math.max(cost,  xNorm);	  	compilable	  [FE]  AssertionFailedError  	126	6	add
120	[BUG]  [BUGGY]  cost  =  Math.max(cost,  xNorm);  double  cost  =  Math.max(cost,  xNorm);  [CE]  variable  cost  might  not  have  been  initialized  [FE]            AssertionFailedError    [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  cost  =  Math.max(cost,  xNorm);  double  cost  =  Math.max(cost,  xNorm);  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	cost    =    Math.max(cost,    xNorm);    double  cost  =  Math.max(cost,  xNorm);	  	non-compiled	[CE]  variable  cost  might  not  have  been  initialized	126	None	add
121	[BUG]  [BUGGY]  int  solvedCols  =  Math.min(results.length,  cols);  [CE]  cannot  find  symbol  results  [FE]              AssertionFailedError      [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  int  solvedCols  =  Math.min(results.length,  cols);  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	int  solvedCols  =  Math.min(results.length,  cols);	  int    solvedCols    =    Math.min(results.length,    oldX);    	non-compiled	[CE]  cannot  find  symbol  results	75	None	replace
122	[BUG]  [BUGGY]  int  solvedCols  =  Math.min(lmDir.length,  oldX);  [CE]  no  suitable  method  found  for  min(int,double[])  [FE]                AssertionFailedError      [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  int  solvedCols  =  Math.min(lmDir.length,  oldX);  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	int  solvedCols  =  Math.min(lmDir.length,  oldX);	  int    solvedCols    =    Math.min(results.length,    oldX);    	non-compiled	[CE]  no  suitable  method  found  for  min(int,double[])	75	None	replace
123	[BUG]  [BUGGY]  int  solvedCols  =  Math.min(cols.length,  oldX);  [CE]  int  cannot  be  dereferenced  [FE]                  AssertionFailedError      [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  int  solvedCols  =  Math.min(cols.length,  oldX);  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	int  solvedCols  =  Math.min(cols.length,  oldX);	  int    solvedCols    =    Math.min(results.length,    oldX);    	non-compiled	[CE]  int  cannot  be  dereferenced	75	None	replace
124	[BUG]  [BUGGY]  cost  =  tmpVec.cost;  [CE]  cannot  find  symbol  cost  [FE]              AssertionFailedError      [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  cost  =  tmpVec.cost;  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	cost  =  tmpVec.cost;	  cost    =    tmpVec.result;    	non-compiled	[CE]  cannot  find  symbol  cost	148	None	replace
125	[BUG]  [BUGGY]  cost  =  tmpVec.value;  [CE]  cannot  find  symbol  value  [FE]                AssertionFailedError      [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  cost  =  tmpVec.value;  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	cost  =  tmpVec.value;	  cost    =    tmpVec.result;    	non-compiled	[CE]  cannot  find  symbol  value	148	None	replace
126	[BUG]  [BUGGY]  cost  =  tmpVec.r;  [CE]  cannot  find  symbol  r  [FE]                  AssertionFailedError      [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  cost  =  tmpVec.r;  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	cost  =  tmpVec.r;	  cost    =    tmpVec.result;    	non-compiled	[CE]  cannot  find  symbol  r	148	None	replace
127	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  cost  =  Math.abs(xNorm  +  1);  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	add	cost  =  Math.abs(xNorm  +  1);	  cost    =    Math.abs(xNorm);    	compilable	  [FE]  AssertionFailedError  	112	10	replace
128	[BUG]  [BUGGY]  cost  =  Math.abs(xNorm  +  1);  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  cost  =  Math.abs(xNorm  +  1);  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	cost  =  Math.abs(xNorm  +  1);	  cost    =    Math.abs(xNorm);    	compilable	  [FE]  AssertionFailedError  	112	10	replace
129	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  cost  =  Math.abs(xNorm  -  1);  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	add	cost  =  Math.abs(xNorm  -  1);	  cost    =    Math.abs(xNorm);    	compilable	  [FE]  AssertionFailedError  	112	11	replace
130	[BUG]  [BUGGY]  cost  =  Math.abs(xNorm  -  1);  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  cost  =  Math.abs(xNorm  -  1);  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	cost  =  Math.abs(xNorm  -  1);	  cost    =    Math.abs(xNorm);    	compilable	  [FE]  AssertionFailedError  	112	11	replace
131	[BUG]  [BUGGY]  cost  =  Math.abs(xK);  [CE]  cannot  find  symbol  xK  [FE]        AssertionFailedError    [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  cost  =  Math.abs(xK);  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	cost  =  Math.abs(xK);	  cost    =    Math.abs(xNorm);    	non-compiled	[CE]  cannot  find  symbol  xK	112	None	replace
132	[BUG]  [BUGGY]  tmpVec  =  Math.min(result,  oldRes[0]);  [CE]  cannot  find  symbol  result  [FE]                    AssertionFailedError      [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  tmpVec  =  Math.min(result,  oldRes[0]);  [BUGGY]      cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	tmpVec  =  Math.min(result,  oldRes[0]);	  tmpVec    =    Math.min(result,    oldX[0]);    	non-compiled	[CE]  cannot  find  symbol  result	14	None	replace
133	[BUG]  [BUGGY]  tmpVec  =  Math.sqrt(remainder);  [CE]  cannot  find  symbol  remainder  [FE]              AssertionFailedError      [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  tmpVec  =  Math.sqrt(remainder);  [BUGGY]      cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	tmpVec  =  Math.sqrt(remainder);	  tmpVec    =    Math.sqrt(result);    	non-compiled	[CE]  cannot  find  symbol  remainder	30	None	replace
134	[BUG]  [BUGGY]  int  previousCost  -=  oldX;  [CE]  ';'  expected  [FE]        AssertionFailedError      [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  int  previousCost  -=  oldX;  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	int  previousCost  -=  oldX;	  cost    -=    previousCost;    int    previousCost    -=    previousCost;    	non-compiled	[CE]  ';'  expected	5	None	replace
135	[BUG]  [BUGGY]  int  previousCost  -=  preRed;  [CE]  ';'  expected  [FE]          AssertionFailedError      [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  int  previousCost  -=  preRed;  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	int  previousCost  -=  preRed;	  cost    -=    previousCost;    int    previousCost    -=    previousCost;    	non-compiled	[CE]  ';'  expected	5	None	replace
136	[BUG]  [BUGGY]  int  previousCost  -=  cols;  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  int  previousCost  -=  cols;  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	int  previousCost  -=  cols;	  cost    -=    previousCost;    int    previousCost    -=    previousCost;    	non-compiled	[CE]  ';'  expected	5	None	replace
137	[BUG]  [BUGGY]  int  previousCost  -=  permutation.length;  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  int  previousCost  -=  permutation.length;  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	int  previousCost  -=  permutation.length;	  cost    -=    previousCost;    int    previousCost    -=    previousCost;    	non-compiled	[CE]  ';'  expected	5	None	replace
138	[BUG]  [BUGGY]  cost  =  new  VectorialPointValuePair(tmpVec,  oldRes,  cols);  [CE]  no  suitable  constructor  found  for  VectorialPointValuePair(double[],double[],int)  [FE]                AssertionFailedError      [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  cost  =  new  VectorialPointValuePair(tmpVec,  oldRes,  cols);  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	cost  =  new  VectorialPointValuePair(tmpVec,  oldRes,  cols);	  cost    =    new    VectorialPointValuePair(tmpVec,    cols);    	non-compiled	[CE]  no  suitable  constructor  found  for  VectorialPointValuePair(double[],double[],int)	109	None	replace
139	[BUG]  [BUGGY]  cost  =  new  VectorialPointValuePair(tmpVec,  oldX,  cols);  [CE]  no  suitable  constructor  found  for  VectorialPointValuePair(double[],double[],int)  [FE]                  AssertionFailedError      [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  cost  =  new  VectorialPointValuePair(tmpVec,  oldX,  cols);  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	cost  =  new  VectorialPointValuePair(tmpVec,  oldX,  cols);	  cost    =    new    VectorialPointValuePair(tmpVec,    cols);    	non-compiled	[CE]  no  suitable  constructor  found  for  VectorialPointValuePair(double[],double[],int)	109	None	replace
140	[BUG]  [BUGGY]  cost  =  new  VectorialPointValuePair(xNorm,  tmpVec,  cols);  [CE]  no  suitable  constructor  found  for  VectorialPointValuePair(double,double[],int)  [FE]                    AssertionFailedError      [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  cost  =  new  VectorialPointValuePair(xNorm,  tmpVec,  cols);  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	cost  =  new  VectorialPointValuePair(xNorm,  tmpVec,  cols);	  cost    =    new    VectorialPointValuePair(tmpVec,    cols);    	non-compiled	[CE]  no  suitable  constructor  found  for  VectorialPointValuePair(double,double[],int)	109	None	replace
141	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  double  cost  =  Math.max(previousCost,  xNorm);  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	add	double  cost  =  Math.max(previousCost,  xNorm);	  cost    =    Math.max(previousCost,    xNorm);    double    cost    =    Math.max(previousCost,    xNorm);    	compilable	  [FE]  AssertionFailedError  	35	4	replace
142	[BUG]  [BUGGY]  double  cost  =  Math.max(previousCost,  xNorm);  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  double  cost  =  Math.max(previousCost,  xNorm);  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	double  cost  =  Math.max(previousCost,  xNorm);	  cost    =    Math.max(previousCost,    xNorm);    double    cost    =    Math.max(previousCost,    xNorm);    	compilable	  [FE]  AssertionFailedError  	35	4	replace
143	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  double  cost  =  Math.sqrt(xNorm);  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	add	double  cost  =  Math.sqrt(xNorm);	  cost    =    Math.max(previousCost,    xNorm);    double    cost    =    Math.max(previousCost,    xNorm);    	compilable	  [FE]  AssertionFailedError  	35	4	replace
144	[BUG]  [BUGGY]  double  cost  =  Math.sqrt(xNorm);  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  double  cost  =  Math.sqrt(xNorm);  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	double  cost  =  Math.sqrt(xNorm);	  cost    =    Math.max(previousCost,    xNorm);    double    cost    =    Math.max(previousCost,    xNorm);    	compilable	  [FE]  AssertionFailedError  	35	4	replace
145	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  double  cost  =  Math.min(previousCost,  xNorm);  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	add	double  cost  =  Math.min(previousCost,  xNorm);	  cost    =    Math.max(previousCost,    xNorm);    double    cost    =    Math.max(previousCost,    xNorm);    	compilable	  [FE]  AssertionFailedError  	35	4	replace
146	[BUG]  [BUGGY]  double  cost  =  Math.min(previousCost,  xNorm);  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  double  cost  =  Math.min(previousCost,  xNorm);  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	double  cost  =  Math.min(previousCost,  xNorm);	  cost    =    Math.max(previousCost,    xNorm);    double    cost    =    Math.max(previousCost,    xNorm);    	compilable	  [FE]  AssertionFailedError  	35	4	replace
147	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  double  cost  =  Math.max(xNorm,  previousCost);  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	add	double  cost  =  Math.max(xNorm,  previousCost);	  cost    =    Math.max(previousCost,    xNorm);    double    cost    =    Math.max(previousCost,    xNorm);    	compilable	  [FE]  AssertionFailedError  	35	4	replace
148	[BUG]  [BUGGY]  double  cost  =  Math.max(xNorm,  previousCost);  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  double  cost  =  Math.max(xNorm,  previousCost);  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	double  cost  =  Math.max(xNorm,  previousCost);	  cost    =    Math.max(previousCost,    xNorm);    double    cost    =    Math.max(previousCost,    xNorm);    	compilable	  [FE]  AssertionFailedError  	35	4	replace
149	[BUG]  [BUGGY]  cost  =  xNorm.length;  [CE]  double  cannot  be  dereferenced  [FE]    AssertionFailedError    [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  cost  =  xNorm.length;  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	cost  =  xNorm.length;	  cost    =    tmpVec.length;    	non-compiled	[CE]  double  cannot  be  dereferenced	20	None	replace
150	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  cost  =  oldRes.length;  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	add	cost  =  oldRes.length;	  cost    =    tmpVec.length;    	compilable	  [FE]  AssertionFailedError  	20	12	replace
151	[BUG]  [BUGGY]  cost  =  oldRes.length;  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  cost  =  oldRes.length;  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	cost  =  oldRes.length;	  cost    =    tmpVec.length;    	compilable	  [FE]  AssertionFailedError  	20	12	replace
152	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  cost  -=  tmpVec.length;  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	add	cost  -=  tmpVec.length;	  cost    =    tmpVec.length;    	compilable	  [FE]  AssertionFailedError  	20	15	replace
153	[BUG]  [BUGGY]  cost  -=  tmpVec.length;  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  cost  -=  tmpVec.length;  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	cost  -=  tmpVec.length;	  cost    =    tmpVec.length;    	compilable	  [FE]  AssertionFailedError  	20	15	replace
154	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  cost  =  oldX.length;  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	add	cost  =  oldX.length;	  cost    =    tmpVec.length;    	compilable	  [FE]  AssertionFailedError  	20	12	replace
155	[BUG]  [BUGGY]  cost  =  oldX.length;  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  cost  =  oldX.length;  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	cost  =  oldX.length;	  cost    =    tmpVec.length;    	compilable	  [FE]  AssertionFailedError  	20	12	replace
156	[BUG]  [BUGGY]  int  solvedCols  =  Math.min(resolvedCols,  cols);  [CE]  cannot  find  symbol  resolvedCols  [FE]        AssertionFailedError      [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  int  solvedCols  =  Math.min(resolvedCols,  cols);  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	int  solvedCols  =  Math.min(resolvedCols,  cols);	          int    solvedCols    =    Math.min(resolvedCols,    xNorm);    	non-compiled	[CE]  cannot  find  symbol  resolvedCols	94	None	replace
157	[BUG]  [BUGGY]  int  solvedCols  =  Math.min(resolvedCols,  xNorm,  cols);  [CE]  cannot  find  symbol  resolvedCols  [FE]          AssertionFailedError      [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  int  solvedCols  =  Math.min(resolvedCols,  xNorm,  cols);  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	int  solvedCols  =  Math.min(resolvedCols,  xNorm,  cols);	          int    solvedCols    =    Math.min(resolvedCols,    xNorm);    	non-compiled	[CE]  cannot  find  symbol  resolvedCols	94	None	replace
158	[BUG]  [BUGGY]  int  resolvedCols  =  Math.min(resolvedCols,  cols);  [CE]  variable  resolvedCols  might  not  have  been  initialized  [FE]            AssertionFailedError      [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  int  resolvedCols  =  Math.min(resolvedCols,  cols);  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	int  resolvedCols  =  Math.min(resolvedCols,  cols);	          int    solvedCols    =    Math.min(resolvedCols,    xNorm);    	non-compiled	[CE]  variable  resolvedCols  might  not  have  been  initialized	94	None	replace
159	[BUG]  [BUGGY]  Preconditions.checkState(previousCost!=  null);  [CE]  incomparable  types:  double  and  <null>  [FE]        AssertionFailedError      [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  Preconditions.checkState(previousCost!=  null);  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	Preconditions.checkState(previousCost!=  null);	  cost    -=    previousCost;    if(previousCost!=    null)    {    cost    -=    previousCost;    }    	non-compiled	[CE]  incomparable  types:  double  and  <null>	155	None	replace
160	[BUG]  [BUGGY]  prevCost  -=  previousCost;  if(previousCost!=  null)  {  cost  -=  previousCost;  }  [CE]  cannot  find  symbol  prevCost  [FE]          AssertionFailedError      [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  prevCost  -=  previousCost;  if(previousCost!=  null)  {  cost  -=  previousCost;  }  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	prevCost  -=  previousCost;  if(previousCost!=  null)  {  cost  -=  previousCost;  }	  cost    -=    previousCost;    if(previousCost!=    null)    {    cost    -=    previousCost;    }    	non-compiled	[CE]  cannot  find  symbol  prevCost	155	None	replace
161	[BUG]  [BUGGY]  if(previousCost!=  null)  {  cost  -=  previousCost;  }  [CE]  incomparable  types:  double  and  <null>  [FE]            AssertionFailedError      [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  if(previousCost!=  null)  {  cost  -=  previousCost;  }  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	if(previousCost!=  null)  {  cost  -=  previousCost;  }	  cost    -=    previousCost;    if(previousCost!=    null)    {    cost    -=    previousCost;    }    	non-compiled	[CE]  incomparable  types:  double  and  <null>	155	None	replace
162	[BUG]  [BUGGY]  prevCost  -=  previousCost;  [CE]  cannot  find  symbol  prevCost  [FE]              AssertionFailedError      [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  prevCost  -=  previousCost;  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	prevCost  -=  previousCost;	  cost    -=    previousCost;    if(previousCost!=    null)    {    cost    -=    previousCost;    }    	non-compiled	[CE]  cannot  find  symbol  prevCost	155	None	replace
163	[BUG]  [BUGGY]  tmpVec  =  Math.sqrt(previousCost,  xNorm,  1);  [CE]  method  sqrt  in  class  Math  cannot  be  applied  to  given  types;  [FE]                  AssertionFailedError      [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  tmpVec  =  Math.sqrt(previousCost,  xNorm,  1);  [BUGGY]      cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	tmpVec  =  Math.sqrt(previousCost,  xNorm,  1);	  tmpVec    =    Math.sqrt(xNorm,    1);    	non-compiled	[CE]  method  sqrt  in  class  Math  cannot  be  applied  to  given  types;	154	None	replace
164	[BUG]  [BUGGY]  tmpVec  =  Math.sqrt(result,  xNorm,  1);  [CE]  cannot  find  symbol  result  [FE]                    AssertionFailedError      [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  tmpVec  =  Math.sqrt(result,  xNorm,  1);  [BUGGY]      cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	tmpVec  =  Math.sqrt(result,  xNorm,  1);	  tmpVec    =    Math.sqrt(xNorm,    1);    	non-compiled	[CE]  cannot  find  symbol  result	154	None	replace
165	[BUG]  [BUGGY]  tmpVec  =  Math.sqrt(remainings,  xNorm,  1);  [CE]  cannot  find  symbol  remainings  [FE]                      AssertionFailedError      [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  tmpVec  =  Math.sqrt(remainings,  xNorm,  1);  [BUGGY]      cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	tmpVec  =  Math.sqrt(remainings,  xNorm,  1);	  tmpVec    =    Math.sqrt(xNorm,    1);    	non-compiled	[CE]  cannot  find  symbol  remainings	154	None	replace
166	[BUG]  [BUGGY]  tmpVec  =  Math.sqrt(xNorm,  2);  [CE]  method  sqrt  in  class  Math  cannot  be  applied  to  given  types;  [FE]                        AssertionFailedError      [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  tmpVec  =  Math.sqrt(xNorm,  2);  [BUGGY]      cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	tmpVec  =  Math.sqrt(xNorm,  2);	  tmpVec    =    Math.sqrt(xNorm,    1);    	non-compiled	[CE]  method  sqrt  in  class  Math  cannot  be  applied  to  given  types;	154	None	replace
167	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  cost  -=  cols;  cost  -=  previousCost;  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	add	cost  -=  cols;  cost  -=  previousCost;	  cost    -=    previousCost;    cost    -=    previousCost;    	compilable	  [FE]  AssertionFailedError  	7	14	replace
168	[BUG]  [BUGGY]  cost  -=  cols;  cost  -=  previousCost;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  cost  -=  cols;  cost  -=  previousCost;  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	cost  -=  cols;  cost  -=  previousCost;	  cost    -=    previousCost;    cost    -=    previousCost;    	compilable	  [FE]  AssertionFailedError  	7	14	replace
169	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  cost  -=  preRed;  cost  -=  preRed;  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	add	cost  -=  preRed;  cost  -=  preRed;	  cost    -=    previousCost;    cost    -=    previousCost;    	compilable	  [FE]  AssertionFailedError  	7	10	replace
170	[BUG]  [BUGGY]  cost  -=  preRed;  cost  -=  preRed;  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  cost  -=  preRed;  cost  -=  preRed;  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	cost  -=  preRed;  cost  -=  preRed;	  cost    -=    previousCost;    cost    -=    previousCost;    	compilable	  [FE]  AssertionFailedError  	7	10	replace
171	[BUG]  [BUGGY]  cost  -=  oldX;  cost  -=  previousCost;  [CE]  bad  operand  types  for  binary  operator  '-'  [FE]        AssertionFailedError    [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  cost  -=  oldX;  cost  -=  previousCost;  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	cost  -=  oldX;  cost  -=  previousCost;	  cost    -=    previousCost;    cost    -=    previousCost;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '-'	7	None	replace
172	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  cost  -=  cols;  cost  -=  preRed;  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	add	cost  -=  cols;  cost  -=  preRed;	  cost    -=    previousCost;    cost    -=    previousCost;    	compilable	  [FE]  AssertionFailedError  	7	15	replace
173	[BUG]  [BUGGY]  cost  -=  cols;  cost  -=  preRed;  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  cost  -=  cols;  cost  -=  preRed;  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	cost  -=  cols;  cost  -=  preRed;	  cost    -=    previousCost;    cost    -=    previousCost;    	compilable	  [FE]  AssertionFailedError  	7	15	replace
174	[BUG]  [BUGGY]  Preconditions.checkState(oldX  ==  0);  [CE]  incomparable  types:  double[]  and  int  [FE]                AssertionFailedError      [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  Preconditions.checkState(oldX  ==  0);  [BUGGY]      cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	Preconditions.checkState(oldX  ==  0);	  Preconditions.checkState(oldX!=    0);    	non-compiled	[CE]  incomparable  types:  double[]  and  int	158	None	replace
175	[BUG]  [BUGGY]  Preconditions.checkState(oldX  >=  0);  [CE]  bad  operand  types  for  binary  operator  '>='  [FE]                  AssertionFailedError      [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  Preconditions.checkState(oldX  >=  0);  [BUGGY]      cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	Preconditions.checkState(oldX  >=  0);	  Preconditions.checkState(oldX!=    0);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>='	158	None	replace
176	[BUG]  [BUGGY]  Integer  solvedCols  =  diag[0]  *  permutation[1];  [CE]  incompatible  types  [FE]                  AssertionFailedError      [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  Integer  solvedCols  =  diag[0]  *  permutation[1];  [BUGGY]      cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	Integer  solvedCols  =  diag[0]  *  permutation[1];	  long    solvedCols    =    diag[0]    *    permutation[1];    	non-compiled	[CE]  incompatible  types	88	None	replace
177	[BUG]  [BUGGY]  Integer  previousCost  =  Math.max(cost,  xNorm);  [CE]  variable  previousCost  is  already  defined  in  method  doOptimize()  [FE]        AssertionFailedError      [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  Integer  previousCost  =  Math.max(cost,  xNorm);  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	Integer  previousCost  =  Math.max(cost,  xNorm);	  cost    =    Math.max(cost,    previousCost);    Integer    previousCost    =    Math.max(cost,    previousCost);    	non-compiled	[CE]  variable  previousCost  is  already  defined  in  method  doOptimize()	124	None	replace
178	[BUG]  [BUGGY]  Integer  previousCost  =  Math.max(previousCost,  cost);  [CE]  variable  previousCost  is  already  defined  in  method  doOptimize()  [FE]          AssertionFailedError      [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  Integer  previousCost  =  Math.max(previousCost,  cost);  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	Integer  previousCost  =  Math.max(previousCost,  cost);	  cost    =    Math.max(cost,    previousCost);    Integer    previousCost    =    Math.max(cost,    previousCost);    	non-compiled	[CE]  variable  previousCost  is  already  defined  in  method  doOptimize()	124	None	replace
179	[BUG]  [BUGGY]  Integer  previousCost  =  Math.max(cost,  oldX);  [CE]  variable  previousCost  is  already  defined  in  method  doOptimize()  [FE]            AssertionFailedError      [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  Integer  previousCost  =  Math.max(cost,  oldX);  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	Integer  previousCost  =  Math.max(cost,  oldX);	  cost    =    Math.max(cost,    previousCost);    Integer    previousCost    =    Math.max(cost,    previousCost);    	non-compiled	[CE]  variable  previousCost  is  already  defined  in  method  doOptimize()	124	None	replace
180	[BUG]  [BUGGY]  Integer  previousCost  =  Math.max(cost,  preRed);  [CE]  variable  previousCost  is  already  defined  in  method  doOptimize()  [FE]              AssertionFailedError      [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  Integer  previousCost  =  Math.max(cost,  preRed);  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	Integer  previousCost  =  Math.max(cost,  preRed);	  cost    =    Math.max(cost,    previousCost);    Integer    previousCost    =    Math.max(cost,    previousCost);    	non-compiled	[CE]  variable  previousCost  is  already  defined  in  method  doOptimize()	124	None	replace
181	[BUG]  [BUGGY]  cost  =  xK;  [CE]  cannot  find  symbol  xK  [FE]        AssertionFailedError      [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  cost  =  xK;  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	cost  =  xK;	  cost    =    tmp;    	non-compiled	[CE]  cannot  find  symbol  xK	132	None	replace
182	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError      [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  cost  =  cols;  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	add	cost  =  cols;	  cost    =    tmp;    	compilable	  [FE]  AssertionFailedError  	132	12	replace
183	[BUG]  [BUGGY]  cost  =  cols;  [FE]  AssertionFailedError  [FE]          AssertionFailedError      [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  cost  =  cols;  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	cost  =  cols;	  cost    =    tmp;    	compilable	  [FE]  AssertionFailedError  	132	12	replace
184	[BUG]  [BUGGY]  int  solvedCols  =  Math.min(relatives.length,  cols.length  -  1);  [CE]  cannot  find  symbol  relatives  [FE]          AssertionFailedError      [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  int  solvedCols  =  Math.min(relatives.length,  cols.length  -  1);  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	int  solvedCols  =  Math.min(relatives.length,  cols.length  -  1);	  int    solvedCols    =    Math.min(relatives.length,    cols.length);    	non-compiled	[CE]  cannot  find  symbol  relatives	134	None	replace
185	[BUG]  [BUGGY]  int  solvedCols  =  Math.min(relatives.length,  cols.length  +  1);  [CE]  cannot  find  symbol  relatives  [FE]            AssertionFailedError      [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  int  solvedCols  =  Math.min(relatives.length,  cols.length  +  1);  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	int  solvedCols  =  Math.min(relatives.length,  cols.length  +  1);	  int    solvedCols    =    Math.min(relatives.length,    cols.length);    	non-compiled	[CE]  cannot  find  symbol  relatives	134	None	replace
186	[BUG]  [BUGGY]  int  solvedCols  =  Math.min(cols.length,  residuals.length);  [CE]  int  cannot  be  dereferenced  [FE]              AssertionFailedError      [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  int  solvedCols  =  Math.min(cols.length,  residuals.length);  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	int  solvedCols  =  Math.min(cols.length,  residuals.length);	  int    solvedCols    =    Math.min(relatives.length,    cols.length);    	non-compiled	[CE]  int  cannot  be  dereferenced	134	None	replace
187	[BUG]  [BUGGY]  cost  =  Math.max(result,  preRed);  [CE]  cannot  find  symbol  result  [FE]              AssertionFailedError      [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  cost  =  Math.max(result,  preRed);  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	cost  =  Math.max(result,  preRed);	  cost    =    Math.max(result,    previousCost);    	non-compiled	[CE]  cannot  find  symbol  result	3	None	replace
188	[BUG]  [BUGGY]  cost  =  Math.max(remainingCost,  xNorm  +  1);  [CE]  cannot  find  symbol  remainingCost  [FE]        AssertionFailedError      [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  cost  =  Math.max(remainingCost,  xNorm  +  1);  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	cost  =  Math.max(remainingCost,  xNorm  +  1);	  cost    =    Math.max(remainingCost,    xNorm);    	non-compiled	[CE]  cannot  find  symbol  remainingCost	78	None	replace
189	[BUG]  [BUGGY]  cost  =  Math.max(remainingCost,  tmpVec);  [CE]  cannot  find  symbol  remainingCost  [FE]          AssertionFailedError      [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  cost  =  Math.max(remainingCost,  tmpVec);  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	cost  =  Math.max(remainingCost,  tmpVec);	  cost    =    Math.max(remainingCost,    xNorm);    	non-compiled	[CE]  cannot  find  symbol  remainingCost	78	None	replace
190	[BUG]  [BUGGY]  Cost  =  Math.max(previousCost,  cost);  [CE]  cannot  find  symbol  Cost  [FE]            AssertionFailedError      [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  Cost  =  Math.max(previousCost,  cost);  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	Cost  =  Math.max(previousCost,  cost);	  cost    =    Math.max(cost,    previousCost);    Cost    =    Math.max(cost,    previousCost);    	non-compiled	[CE]  cannot  find  symbol  Cost	24	None	replace
191	[BUG]  [BUGGY]  Cost  =  Math.max(cost,  previousCost);  [CE]  cannot  find  symbol  Cost  [FE]              AssertionFailedError      [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  Cost  =  Math.max(cost,  previousCost);  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	Cost  =  Math.max(cost,  previousCost);	  cost    =    Math.max(cost,    previousCost);    Cost    =    Math.max(cost,    previousCost);    	non-compiled	[CE]  cannot  find  symbol  Cost	24	None	replace
192	[BUG]  [BUGGY]  Cost  =  Math.max(cosine,  previousCost);  [CE]  cannot  find  symbol  Cost  [FE]                AssertionFailedError      [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  Cost  =  Math.max(cosine,  previousCost);  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	Cost  =  Math.max(cosine,  previousCost);	  cost    =    Math.max(cost,    previousCost);    Cost    =    Math.max(cost,    previousCost);    	non-compiled	[CE]  cannot  find  symbol  Cost	24	None	replace
193	[BUG]  [BUGGY]  cost  =  new  VectorialPointValuePair(tmpVec,  oldX,  oldRes);  [CE]  no  suitable  constructor  found  for  VectorialPointValuePair(double[],double[],double[])  [FE]              AssertionFailedError      [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  cost  =  new  VectorialPointValuePair(tmpVec,  oldX,  oldRes);  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	cost  =  new  VectorialPointValuePair(tmpVec,  oldX,  oldRes);	  cost    =    new    VectorialPointValuePair(tmpVec,    oldRes);    	non-compiled	[CE]  no  suitable  constructor  found  for  VectorialPointValuePair(double[],double[],double[])	108	None	replace
194	[BUG]  [BUGGY]  cost  =  new  VectorialPointValuePair(tmpVec,  xNorm,  oldRes);  [CE]  no  suitable  constructor  found  for  VectorialPointValuePair(double[],double,double[])  [FE]                AssertionFailedError      [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  cost  =  new  VectorialPointValuePair(tmpVec,  xNorm,  oldRes);  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	cost  =  new  VectorialPointValuePair(tmpVec,  xNorm,  oldRes);	  cost    =    new    VectorialPointValuePair(tmpVec,    oldRes);    	non-compiled	[CE]  no  suitable  constructor  found  for  VectorialPointValuePair(double[],double,double[])	108	None	replace
195	[BUG]  [BUGGY]  cost  =  new  VectorialPointValuePair(tmpVec,  oldRes,  xNorm);  [CE]  no  suitable  constructor  found  for  VectorialPointValuePair(double[],double[],double)  [FE]                  AssertionFailedError      [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  cost  =  new  VectorialPointValuePair(tmpVec,  oldRes,  xNorm);  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	cost  =  new  VectorialPointValuePair(tmpVec,  oldRes,  xNorm);	  cost    =    new    VectorialPointValuePair(tmpVec,    oldRes);    	non-compiled	[CE]  no  suitable  constructor  found  for  VectorialPointValuePair(double[],double[],double)	108	None	replace
196	[BUG]  [BUGGY]  cost  =  new  VectorialPointValuePair(tmpVec,  residuals,  oldRes);  [CE]  no  suitable  constructor  found  for  VectorialPointValuePair(double[],double[],double[])  [FE]                    AssertionFailedError      [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  cost  =  new  VectorialPointValuePair(tmpVec,  residuals,  oldRes);  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	cost  =  new  VectorialPointValuePair(tmpVec,  residuals,  oldRes);	  cost    =    new    VectorialPointValuePair(tmpVec,    oldRes);    	non-compiled	[CE]  no  suitable  constructor  found  for  VectorialPointValuePair(double[],double[],double[])	108	None	replace
197	[BUG]  [BUGGY]  int  previousCost  =  Math.max(cost,  xNorm);  [CE]  variable  previousCost  is  already  defined  in  method  doOptimize()  [FE]          AssertionFailedError      [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  int  previousCost  =  Math.max(cost,  xNorm);  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	int  previousCost  =  Math.max(cost,  xNorm);	  cost    =    Math.max(cost,    previousCost);    int    previousCost    =    Math.max(cost,    previousCost);    	non-compiled	[CE]  variable  previousCost  is  already  defined  in  method  doOptimize()	23	None	replace
198	[BUG]  [BUGGY]  int  previousCost  =  Math.max(previousCost,  cost);  [CE]  variable  previousCost  is  already  defined  in  method  doOptimize()  [FE]            AssertionFailedError      [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  int  previousCost  =  Math.max(previousCost,  cost);  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	int  previousCost  =  Math.max(previousCost,  cost);	  cost    =    Math.max(cost,    previousCost);    int    previousCost    =    Math.max(cost,    previousCost);    	non-compiled	[CE]  variable  previousCost  is  already  defined  in  method  doOptimize()	23	None	replace
199	[BUG]  [BUGGY]  int  previousCost  =  Math.max(cost,  oldX);  [CE]  variable  previousCost  is  already  defined  in  method  doOptimize()  [FE]              AssertionFailedError      [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  int  previousCost  =  Math.max(cost,  oldX);  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	int  previousCost  =  Math.max(cost,  oldX);	  cost    =    Math.max(cost,    previousCost);    int    previousCost    =    Math.max(cost,    previousCost);    	non-compiled	[CE]  variable  previousCost  is  already  defined  in  method  doOptimize()	23	None	replace
200	[BUG]  [BUGGY]  int  previousCost  =  Math.max(cost,  preRed);  [CE]  variable  previousCost  is  already  defined  in  method  doOptimize()  [FE]                AssertionFailedError      [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  int  previousCost  =  Math.max(cost,  preRed);  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	int  previousCost  =  Math.max(cost,  preRed);	  cost    =    Math.max(cost,    previousCost);    int    previousCost    =    Math.max(cost,    previousCost);    	non-compiled	[CE]  variable  previousCost  is  already  defined  in  method  doOptimize()	23	None	replace
201	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError      [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  previousCost  =  Math.max(previousCost,  cost);  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	add	previousCost  =  Math.max(previousCost,  cost);	  cost    =    Math.max(cost,    previousCost);    if(previousCost!=    null)    {    cost    =    Math.max(cost,    previousCost);    }    	compilable	  [FE]  AssertionFailedError  	131	4	replace
202	[BUG]  [BUGGY]  previousCost  =  Math.max(previousCost,  cost);  [FE]  AssertionFailedError  [FE]          AssertionFailedError      [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  previousCost  =  Math.max(previousCost,  cost);  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	previousCost  =  Math.max(previousCost,  cost);	  cost    =    Math.max(cost,    previousCost);    if(previousCost!=    null)    {    cost    =    Math.max(cost,    previousCost);    }    	compilable	  [FE]  AssertionFailedError  	131	4	replace
203	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError      [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  previousCost  =  Math.max(cost,  previousCost);  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	add	previousCost  =  Math.max(cost,  previousCost);	  cost    =    Math.max(cost,    previousCost);    if(previousCost!=    null)    {    cost    =    Math.max(cost,    previousCost);    }    	compilable	  [FE]  AssertionFailedError  	131	4	replace
204	[BUG]  [BUGGY]  previousCost  =  Math.max(cost,  previousCost);  [FE]  AssertionFailedError  [FE]            AssertionFailedError      [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  previousCost  =  Math.max(cost,  previousCost);  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	previousCost  =  Math.max(cost,  previousCost);	  cost    =    Math.max(cost,    previousCost);    if(previousCost!=    null)    {    cost    =    Math.max(cost,    previousCost);    }    	compilable	  [FE]  AssertionFailedError  	131	4	replace
205	[BUG]  [BUGGY]  prevCost  =  Math.max(previousCost,  cost);  [CE]  cannot  find  symbol  prevCost  [FE]              AssertionFailedError      [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  prevCost  =  Math.max(previousCost,  cost);  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	prevCost  =  Math.max(previousCost,  cost);	  cost    =    Math.max(cost,    previousCost);    if(previousCost!=    null)    {    cost    =    Math.max(cost,    previousCost);    }    	non-compiled	[CE]  cannot  find  symbol  prevCost	131	None	replace
206	[BUG]  [BUGGY]  Integer  solvedCols  =  Math.max(resolvedCols,  cols);  [CE]  cannot  find  symbol  resolvedCols  [FE]        AssertionFailedError      [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  Integer  solvedCols  =  Math.max(resolvedCols,  cols);  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	Integer  solvedCols  =  Math.max(resolvedCols,  cols);	  Integer    solvedCols    =    Math.max(relativeTolerance,    cols);    	non-compiled	[CE]  cannot  find  symbol  resolvedCols	133	None	replace
207	[BUG]  [BUGGY]  Integer  solvedCols  =  Math.max(relativeTolerance,  xNorm);  [CE]  cannot  find  symbol  relativeTolerance  [FE]          AssertionFailedError      [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  Integer  solvedCols  =  Math.max(relativeTolerance,  xNorm);  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	Integer  solvedCols  =  Math.max(relativeTolerance,  xNorm);	  Integer    solvedCols    =    Math.max(relativeTolerance,    cols);    	non-compiled	[CE]  cannot  find  symbol  relativeTolerance	133	None	replace
208	[BUG]  [BUGGY]  Integer  solvedCols  =  Math.max(relativeTolerance,  fixedCols);  [CE]  cannot  find  symbol  relativeTolerance  [FE]            AssertionFailedError      [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  Integer  solvedCols  =  Math.max(relativeTolerance,  fixedCols);  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	Integer  solvedCols  =  Math.max(relativeTolerance,  fixedCols);	  Integer    solvedCols    =    Math.max(relativeTolerance,    cols);    	non-compiled	[CE]  cannot  find  symbol  relativeTolerance	133	None	replace
209	[BUG]  [BUGGY]  cost  =  Math.max(permutation,  xNorm);  [CE]  no  suitable  method  found  for  max(int[],double)  [FE]            AssertionFailedError      [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  cost  =  Math.max(permutation,  xNorm);  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	cost  =  Math.max(permutation,  xNorm);	  cost    =    Math.max(period,    xNorm);    	non-compiled	[CE]  no  suitable  method  found  for  max(int[],double)	80	None	replace
210	[BUG]  [BUGGY]  int  cost  =  Math.max(previousCost,  xNorm);  [CE]  possible  loss  of  precision  [FE]        AssertionFailedError      [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  int  cost  =  Math.max(previousCost,  xNorm);  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	int  cost  =  Math.max(previousCost,  xNorm);	  cost    =    Math.max(previousCost,    xNorm);    int    cost    =    Math.max(previousCost,    xNorm);    	non-compiled	[CE]  possible  loss  of  precision	33	None	replace
211	[BUG]  [BUGGY]  long  cost  =  Math.max(previousCost,  xNorm);  [CE]  possible  loss  of  precision  [FE]          AssertionFailedError      [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  long  cost  =  Math.max(previousCost,  xNorm);  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	long  cost  =  Math.max(previousCost,  xNorm);	  cost    =    Math.max(previousCost,    xNorm);    int    cost    =    Math.max(previousCost,    xNorm);    	non-compiled	[CE]  possible  loss  of  precision	33	None	replace
212	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError      [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  Double  cost  =  Math.max(previousCost,  xNorm);  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	add	Double  cost  =  Math.max(previousCost,  xNorm);	  cost    =    Math.max(previousCost,    xNorm);    int    cost    =    Math.max(previousCost,    xNorm);    	compilable	  [FE]  AssertionFailedError  	33	4	replace
213	[BUG]  [BUGGY]  Double  cost  =  Math.max(previousCost,  xNorm);  [FE]  AssertionFailedError  [FE]            AssertionFailedError      [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  Double  cost  =  Math.max(previousCost,  xNorm);  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	Double  cost  =  Math.max(previousCost,  xNorm);	  cost    =    Math.max(previousCost,    xNorm);    int    cost    =    Math.max(previousCost,    xNorm);    	compilable	  [FE]  AssertionFailedError  	33	4	replace
214	[BUG]  [BUGGY]  Cost  =  xNorm;  [CE]  cannot  find  symbol  Cost  [FE]                AssertionFailedError      [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  Cost  =  xNorm;  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	Cost  =  xNorm;	  cost    =    xNorm;    Cost    =    xNorm;    	non-compiled	[CE]  cannot  find  symbol  Cost	47	None	replace
215	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                  AssertionFailedError      [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  xNorm  =  Math.sqrt(xNorm);  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	add	xNorm  =  Math.sqrt(xNorm);	  cost    =    xNorm;    Cost    =    xNorm;    	compilable	  [FE]  AssertionFailedError  	47	4	replace
216	[BUG]  [BUGGY]  xNorm  =  Math.sqrt(xNorm);  [FE]  AssertionFailedError  [FE]                  AssertionFailedError      [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  xNorm  =  Math.sqrt(xNorm);  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	xNorm  =  Math.sqrt(xNorm);	  cost    =    xNorm;    Cost    =    xNorm;    	compilable	  [FE]  AssertionFailedError  	47	4	replace
217	[BUG]  [BUGGY]  cost  -=  preRed;  -=  preRed;  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  cost  -=  preRed;  -=  preRed;  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	cost    -=    preRed;    -=  preRed;	  	non-compiled	[CE]  illegal  start  of  expression	65	None	add
218	[BUG]  [BUGGY]  cost  -=  preRed;  int  cost  -=  preRed;  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  cost  -=  preRed;  int  cost  -=  preRed;  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	cost    -=    preRed;    int  cost  -=  preRed;	  	non-compiled	[CE]  ';'  expected	65	None	add
219	[BUG]  [BUGGY]  cost  -=  preRed;  int  preRed  =  Math.sqrt(preRed);  [CE]  variable  preRed  is  already  defined  in  method  doOptimize()  [FE]        AssertionFailedError    [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  cost  -=  preRed;  int  preRed  =  Math.sqrt(preRed);  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	cost    -=    preRed;    int  preRed  =  Math.sqrt(preRed);	  	non-compiled	[CE]  variable  preRed  is  already  defined  in  method  doOptimize()	65	None	add
220	[BUG]  [BUGGY]  cost  -=  preRed;  double  cost  -=  preRed;  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  cost  -=  preRed;  double  cost  -=  preRed;  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	cost    -=    preRed;    double  cost  -=  preRed;	  	non-compiled	[CE]  ';'  expected	65	None	add
221	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  cost  =  1;  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	add	cost  =  1;	  cost    =    0;    	compilable	  [FE]  AssertionFailedError  	114	12	replace
222	[BUG]  [BUGGY]  cost  =  1;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  cost  =  1;  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	cost  =  1;	  cost    =    0;    	compilable	  [FE]  AssertionFailedError  	114	12	replace
223	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  cost  =  Math.max(0,  cols);  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	add	cost  =  Math.max(0,  cols);	  cost    =    0;    	compilable	  [FE]  AssertionFailedError  	114	12	replace
224	[BUG]  [BUGGY]  cost  =  Math.max(0,  cols);  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  cost  =  Math.max(0,  cols);  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	cost  =  Math.max(0,  cols);	  cost    =    0;    	compilable	  [FE]  AssertionFailedError  	114	12	replace
225	[BUG]  [BUGGY]  double  tmpVec  =  Math.sqrt(previousCost,  remainingCost);  [CE]  variable  tmpVec  is  already  defined  in  method  doOptimize()  [FE]                      AssertionFailedError      [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  double  tmpVec  =  Math.sqrt(previousCost,  remainingCost);  [BUGGY]      cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	double  tmpVec  =  Math.sqrt(previousCost,  remainingCost);	  double    tmpVec    =    Math.sqrt(remainingCost,    previousCost);    	non-compiled	[CE]  variable  tmpVec  is  already  defined  in  method  doOptimize()	70	None	replace
226	[BUG]  [BUGGY]  double  tmpVec  =  Math.sqrt(previousCost,  residualCost);  [CE]  variable  tmpVec  is  already  defined  in  method  doOptimize()  [FE]                        AssertionFailedError      [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  double  tmpVec  =  Math.sqrt(previousCost,  residualCost);  [BUGGY]      cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	double  tmpVec  =  Math.sqrt(previousCost,  residualCost);	  double    tmpVec    =    Math.sqrt(remainingCost,    previousCost);    	non-compiled	[CE]  variable  tmpVec  is  already  defined  in  method  doOptimize()	70	None	replace
227	[BUG]  [BUGGY]  double  tmpVec  =  Math.sqrt(remainingCost,  preRed);  [CE]  variable  tmpVec  is  already  defined  in  method  doOptimize()  [FE]                          AssertionFailedError      [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  double  tmpVec  =  Math.sqrt(remainingCost,  preRed);  [BUGGY]      cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	double  tmpVec  =  Math.sqrt(remainingCost,  preRed);	  double    tmpVec    =    Math.sqrt(remainingCost,    previousCost);    	non-compiled	[CE]  variable  tmpVec  is  already  defined  in  method  doOptimize()	70	None	replace
228	[BUG]  [BUGGY]  double  tmpVec  =  Math.sqrt(remainingCost,  oldX);  [CE]  variable  tmpVec  is  already  defined  in  method  doOptimize()  [FE]                            AssertionFailedError      [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  double  tmpVec  =  Math.sqrt(remainingCost,  oldX);  [BUGGY]      cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	double  tmpVec  =  Math.sqrt(remainingCost,  oldX);	  double    tmpVec    =    Math.sqrt(remainingCost,    previousCost);    	non-compiled	[CE]  variable  tmpVec  is  already  defined  in  method  doOptimize()	70	None	replace
229	[BUG]  [BUGGY]  Preconditions.checkState(cols  ==  1);  [CE]  cannot  find  symbol  Preconditions  [FE]                  AssertionFailedError      [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  Preconditions.checkState(cols  ==  1);  [BUGGY]      cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	Preconditions.checkState(cols  ==  1);	  Preconditions.checkState(cols    ==    0);    	non-compiled	[CE]  cannot  find  symbol  Preconditions	59	None	replace
230	[BUG]  [BUGGY]  tmpVec  -=  oldX;  [CE]  bad  operand  types  for  binary  operator  '-'  [FE]          AssertionFailedError      [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  tmpVec  -=  oldX;  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	tmpVec  -=  oldX;	  cost    -=    oldX;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '-'	123	None	replace
231	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError      [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  cost  -=  oldX.length;  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	add	cost  -=  oldX.length;	  cost    -=    oldX;    	compilable	  [FE]  AssertionFailedError  	123	15	replace
232	[BUG]  [BUGGY]  cost  -=  oldX.length;  [FE]  AssertionFailedError  [FE]            AssertionFailedError      [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  cost  -=  oldX.length;  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	cost  -=  oldX.length;	  cost    -=    oldX;    	compilable	  [FE]  AssertionFailedError  	123	15	replace
233	[BUG]  [BUGGY]  cost  -=  oldXNorm;  [CE]  cannot  find  symbol  oldXNorm  [FE]              AssertionFailedError      [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  cost  -=  oldXNorm;  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	cost  -=  oldXNorm;	  cost    -=    oldX;    	non-compiled	[CE]  cannot  find  symbol  oldXNorm	123	None	replace
234	[BUG]  [BUGGY]  cost  =  tmpVec  +  2;  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]              AssertionFailedError      [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  cost  =  tmpVec  +  2;  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	cost  =  tmpVec  +  2;	  cost    =    tmpVec    +    1;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	18	None	replace
235	[BUG]  [BUGGY]  cost  =  oldX  +  1;  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]                AssertionFailedError      [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  cost  =  oldX  +  1;  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	cost  =  oldX  +  1;	  cost    =    tmpVec    +    1;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	18	None	replace
236	[BUG]  [BUGGY]  double  solvedCols  =  diag[0]  *  permutation[1];  double  solvedCols  =  diag[0]  *  permutation[1];  [CE]  variable  solvedCols  is  already  defined  in  method  doOptimize()  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  double  solvedCols  =  diag[0]  *  permutation[1];  double  solvedCols  =  diag[0]  *  permutation[1];  [BUGGY]      cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	double    solvedCols    =    diag[0]    *    permutation[1];    double  solvedCols  =  diag[0]  *  permutation[1];	  	non-compiled	[CE]  variable  solvedCols  is  already  defined  in  method  doOptimize()	84	None	add
237	[BUG]  [BUGGY]  double  solvedCols  =  diag[0]  *  permutation[1];  Double  solvedCols  =  diag[0]  *  permutation[1];  [CE]  variable  solvedCols  is  already  defined  in  method  doOptimize()  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  double  solvedCols  =  diag[0]  *  permutation[1];  Double  solvedCols  =  diag[0]  *  permutation[1];  [BUGGY]      cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	double    solvedCols    =    diag[0]    *    permutation[1];    Double  solvedCols  =  diag[0]  *  permutation[1];	  	non-compiled	[CE]  variable  solvedCols  is  already  defined  in  method  doOptimize()	84	None	add
238	[BUG]  [BUGGY]  double  solvedCols  =  diag[0]  *  permutation[1];  int  solvedCols  =  diag[0]  *  permutation[1];  [CE]  variable  solvedCols  is  already  defined  in  method  doOptimize()  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  double  solvedCols  =  diag[0]  *  permutation[1];  int  solvedCols  =  diag[0]  *  permutation[1];  [BUGGY]      cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	double    solvedCols    =    diag[0]    *    permutation[1];    int  solvedCols  =  diag[0]  *  permutation[1];	  	non-compiled	[CE]  variable  solvedCols  is  already  defined  in  method  doOptimize()	84	None	add
239	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  double  solvedCols  =  diag[0]  *  permutation[1];  double  resolvedCols  =  diag[0]  *  permutation[1];  [BUGGY]      cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	add	double    solvedCols    =    diag[0]    *    permutation[1];    double  resolvedCols  =  diag[0]  *  permutation[1];	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	84	13	add
240	[BUG]  [BUGGY]  double  solvedCols  =  diag[0]  *  permutation[1];  double  resolvedCols  =  diag[0]  *  permutation[1];  [FE]  ArrayIndexOutOfBoundsException  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  double  solvedCols  =  diag[0]  *  permutation[1];  double  resolvedCols  =  diag[0]  *  permutation[1];  [BUGGY]      cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	double    solvedCols    =    diag[0]    *    permutation[1];    double  resolvedCols  =  diag[0]  *  permutation[1];	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	84	13	add
241	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  double  solvedCols  =  diag[0]  *  permutation[1];  double  solves  =  diag[0]  *  permutation[1];  [BUGGY]      cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	add	double    solvedCols    =    diag[0]    *    permutation[1];    double  solves  =  diag[0]  *  permutation[1];	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	84	13	add
242	[BUG]  [BUGGY]  double  solvedCols  =  diag[0]  *  permutation[1];  double  solves  =  diag[0]  *  permutation[1];  [FE]  ArrayIndexOutOfBoundsException  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  double  solvedCols  =  diag[0]  *  permutation[1];  double  solves  =  diag[0]  *  permutation[1];  [BUGGY]      cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	double    solvedCols    =    diag[0]    *    permutation[1];    double  solves  =  diag[0]  *  permutation[1];	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	84	13	add
243	[BUG]  [BUGGY]  cost  =  Math.max(previousCost,  residuals);  [CE]  no  suitable  method  found  for  max(double,double[])  [FE]        AssertionFailedError      [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  cost  =  Math.max(previousCost,  residuals);  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	cost  =  Math.max(previousCost,  residuals);	  cost    =    Math.max(remainder,    previousCost);    	non-compiled	[CE]  no  suitable  method  found  for  max(double,double[])	147	None	replace
244	[BUG]  [BUGGY]  if(xNorm  <  =  0)  {  cost  =  xNorm;  }  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError      [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  if(xNorm  <  =  0)  {  cost  =  xNorm;  }  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	if(xNorm  <  =  0)  {  cost  =  xNorm;  }	  cost    =    xNorm;    if(    cost    <    =    xNorm)    {    cost    =    xNorm;    }    	non-compiled	[CE]  illegal  start  of  expression	139	None	replace
245	[BUG]  [BUGGY]  tmpVec  =  Math.sqrt(tmpVec);  [CE]  method  sqrt  in  class  Math  cannot  be  applied  to  given  types;  [FE]          AssertionFailedError      [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  tmpVec  =  Math.sqrt(tmpVec);  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	tmpVec  =  Math.sqrt(tmpVec);	  cost    =    xNorm;    if(    cost    <    =    xNorm)    {    cost    =    xNorm;    }    	non-compiled	[CE]  method  sqrt  in  class  Math  cannot  be  applied  to  given  types;	139	None	replace
246	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  cost    -=    previousCost;    cost  -=  previousCost;  cost  -=  previousCost;  cost  -=  previousCost;  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	add	cost        -=        previousCost;        cost    -=    previousCost;    cost  -=  previousCost;  cost  -=  previousCost;	  	compilable	  [FE]  AssertionFailedError  	6	2	add
247	[BUG]  [BUGGY]  cost    -=    previousCost;    cost  -=  previousCost;  cost  -=  previousCost;  cost  -=  previousCost;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  cost    -=    previousCost;    cost  -=  previousCost;  cost  -=  previousCost;  cost  -=  previousCost;  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	cost        -=        previousCost;        cost    -=    previousCost;    cost  -=  previousCost;  cost  -=  previousCost;	  	compilable	  [FE]  AssertionFailedError  	6	2	add
248	[BUG]  [BUGGY]  cost    -=    previousCost;    cost  -=  previousCost;  Cost  -=  previousCost;  cost  -=  previousCost;  [CE]  cannot  find  symbol  Cost  [FE]      AssertionFailedError    [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  cost    -=    previousCost;    cost  -=  previousCost;  Cost  -=  previousCost;  cost  -=  previousCost;  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	cost        -=        previousCost;        cost    -=    previousCost;    Cost  -=  previousCost;  cost  -=  previousCost;	  	non-compiled	[CE]  cannot  find  symbol  Cost	6	None	add
249	[BUG]  [BUGGY]  cost    -=    previousCost;    cost  -=  previousCost;  int  previousCost  -=  previousCost;  cost  -=  previousCost;  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  cost    -=    previousCost;    cost  -=  previousCost;  int  previousCost  -=  previousCost;  cost  -=  previousCost;  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	cost        -=        previousCost;        cost    -=    previousCost;    int  previousCost  -=  previousCost;  cost  -=  previousCost;	  	non-compiled	[CE]  ';'  expected	6	None	add
250	[BUG]  [BUGGY]  cost    -=    previousCost;    cost  -=  previousCost;  double  previousCost  -=  previousCost;  cost  -=  previousCost;  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  cost    -=    previousCost;    cost  -=  previousCost;  double  previousCost  -=  previousCost;  cost  -=  previousCost;  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	cost        -=        previousCost;        cost    -=    previousCost;    double  previousCost  -=  previousCost;  cost  -=  previousCost;	  	non-compiled	[CE]  ';'  expected	6	None	add
251	[BUG]  [BUGGY]  cost    -=    previousCost;    cost  -=  previousCost;  -=  previousCost;  cost  -=  previousCost;  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  cost    -=    previousCost;    cost  -=  previousCost;  -=  previousCost;  cost  -=  previousCost;  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	cost        -=        previousCost;        cost    -=    previousCost;    -=  previousCost;  cost  -=  previousCost;	  	non-compiled	[CE]  illegal  start  of  expression	6	None	add
252	[BUG]  [BUGGY]  Double  solvedCols  =  diag[0]  *  permutation[1];  Double  solvedCols  =  diag[0]  *  permutation[1];  [CE]  variable  solvedCols  is  already  defined  in  method  doOptimize()  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  Double  solvedCols  =  diag[0]  *  permutation[1];  Double  solvedCols  =  diag[0]  *  permutation[1];  [BUGGY]      cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	Double    solvedCols    =    diag[0]    *    permutation[1];    Double  solvedCols  =  diag[0]  *  permutation[1];	  	non-compiled	[CE]  variable  solvedCols  is  already  defined  in  method  doOptimize()	86	None	add
253	[BUG]  [BUGGY]  Double  solvedCols  =  diag[0]  *  permutation[1];  double  solvedCols  =  diag[0]  *  permutation[1];  [CE]  variable  solvedCols  is  already  defined  in  method  doOptimize()  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  Double  solvedCols  =  diag[0]  *  permutation[1];  double  solvedCols  =  diag[0]  *  permutation[1];  [BUGGY]      cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	Double    solvedCols    =    diag[0]    *    permutation[1];    double  solvedCols  =  diag[0]  *  permutation[1];	  	non-compiled	[CE]  variable  solvedCols  is  already  defined  in  method  doOptimize()	86	None	add
254	[BUG]  [BUGGY]  Double  solvedCols  =  diag[0]  *  permutation[1];  Double  solvedCols  =  permutation[0]  *  permutation[1];  [CE]  variable  solvedCols  is  already  defined  in  method  doOptimize()  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  Double  solvedCols  =  diag[0]  *  permutation[1];  Double  solvedCols  =  permutation[0]  *  permutation[1];  [BUGGY]      cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	Double    solvedCols    =    diag[0]    *    permutation[1];    Double  solvedCols  =  permutation[0]  *  permutation[1];	  	non-compiled	[CE]  variable  solvedCols  is  already  defined  in  method  doOptimize()	86	None	add
255	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  Double  solvedCols  =  diag[0]  *  permutation[1];  Double  resolvedCols  =  diag[0]  *  permutation[1];  [BUGGY]      cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	add	Double    solvedCols    =    diag[0]    *    permutation[1];    Double  resolvedCols  =  diag[0]  *  permutation[1];	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	86	13	add
256	[BUG]  [BUGGY]  Double  solvedCols  =  diag[0]  *  permutation[1];  Double  resolvedCols  =  diag[0]  *  permutation[1];  [FE]  ArrayIndexOutOfBoundsException  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  Double  solvedCols  =  diag[0]  *  permutation[1];  Double  resolvedCols  =  diag[0]  *  permutation[1];  [BUGGY]      cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	Double    solvedCols    =    diag[0]    *    permutation[1];    Double  resolvedCols  =  diag[0]  *  permutation[1];	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	86	13	add
257	[BUG]  [BUGGY]  Double  solvedCols  =  diag[0]  *  permutation[1];  Double  solvedCols  =  diag[1]  *  permutation[1];  [CE]  variable  solvedCols  is  already  defined  in  method  doOptimize()  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  Double  solvedCols  =  diag[0]  *  permutation[1];  Double  solvedCols  =  diag[1]  *  permutation[1];  [BUGGY]      cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	Double    solvedCols    =    diag[0]    *    permutation[1];    Double  solvedCols  =  diag[1]  *  permutation[1];	  	non-compiled	[CE]  variable  solvedCols  is  already  defined  in  method  doOptimize()	86	None	add
258	[BUG]  [BUGGY]  tmpVec  =  Math.sqrt(previousCost,  xNorm,  firstIteration);  [CE]  method  sqrt  in  class  Math  cannot  be  applied  to  given  types;  [FE]              AssertionFailedError      [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  tmpVec  =  Math.sqrt(previousCost,  xNorm,  firstIteration);  [BUGGY]      cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	tmpVec  =  Math.sqrt(previousCost,  xNorm,  firstIteration);	  tmpVec    =    Math.sqrt(xNorm,    firstIteration);    	non-compiled	[CE]  method  sqrt  in  class  Math  cannot  be  applied  to  given  types;	152	None	replace
259	[BUG]  [BUGGY]  tmpVec  =  Math.sqrt(firstIteration,  xNorm);  [CE]  method  sqrt  in  class  Math  cannot  be  applied  to  given  types;  [FE]                AssertionFailedError      [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  tmpVec  =  Math.sqrt(firstIteration,  xNorm);  [BUGGY]      cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	tmpVec  =  Math.sqrt(firstIteration,  xNorm);	  tmpVec    =    Math.sqrt(xNorm,    firstIteration);    	non-compiled	[CE]  method  sqrt  in  class  Math  cannot  be  applied  to  given  types;	152	None	replace
260	[BUG]  [BUGGY]  tmpVec  =  Math.sqrt(remainings,  xNorm,  firstIteration);  [CE]  cannot  find  symbol  remainings  [FE]                  AssertionFailedError      [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  tmpVec  =  Math.sqrt(remainings,  xNorm,  firstIteration);  [BUGGY]      cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	tmpVec  =  Math.sqrt(remainings,  xNorm,  firstIteration);	  tmpVec    =    Math.sqrt(xNorm,    firstIteration);    	non-compiled	[CE]  cannot  find  symbol  remainings	152	None	replace
261	[BUG]  [BUGGY]  tmpVec  =  Math.sqrt(v,  xNorm,  firstIteration);  [CE]  cannot  find  symbol  v  [FE]                    AssertionFailedError      [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  tmpVec  =  Math.sqrt(v,  xNorm,  firstIteration);  [BUGGY]      cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	tmpVec  =  Math.sqrt(v,  xNorm,  firstIteration);	  tmpVec    =    Math.sqrt(xNorm,    firstIteration);    	non-compiled	[CE]  cannot  find  symbol  v	152	None	replace
262	[BUG]  [BUGGY]  cost  =  Math.max(permutation,  previousCost);  [CE]  no  suitable  method  found  for  max(int[],double)  [FE]          AssertionFailedError      [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  cost  =  Math.max(permutation,  previousCost);  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	cost  =  Math.max(permutation,  previousCost);	  cost    =    Math.max(lastIteration,    previousCost);    	non-compiled	[CE]  no  suitable  method  found  for  max(int[],double)	17	None	replace
263	[BUG]  [BUGGY]  cost  =  Math.max(previousCost,  k);  [CE]  cannot  find  symbol  k  [FE]            AssertionFailedError      [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  cost  =  Math.max(previousCost,  k);  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	cost  =  Math.max(previousCost,  k);	  cost    =    Math.max(lastIteration,    previousCost);    	non-compiled	[CE]  cannot  find  symbol  k	17	None	replace
264	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  cost  =  xNorm  +  1;  cost  =  xNorm  +  1;  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	add	cost    =    xNorm    +    1;    cost  =  xNorm  +  1;	  	compilable	  [FE]  AssertionFailedError  	52	2	add
265	[BUG]  [BUGGY]  cost  =  xNorm  +  1;  cost  =  xNorm  +  1;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  cost  =  xNorm  +  1;  cost  =  xNorm  +  1;  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	cost    =    xNorm    +    1;    cost  =  xNorm  +  1;	  	compilable	  [FE]  AssertionFailedError  	52	2	add
266	[BUG]  [BUGGY]  cost  =  xNorm  +  1;  int  cost  =  xNorm  +  1;  [CE]  possible  loss  of  precision  [FE]      AssertionFailedError    [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  cost  =  xNorm  +  1;  int  cost  =  xNorm  +  1;  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	cost    =    xNorm    +    1;    int  cost  =  xNorm  +  1;	  	non-compiled	[CE]  possible  loss  of  precision	52	None	add
267	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  cost  =  xNorm  +  1;  double  cost  =  xNorm  +  1;  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	add	cost    =    xNorm    +    1;    double  cost  =  xNorm  +  1;	  	compilable	  [FE]  AssertionFailedError  	52	10	add
268	[BUG]  [BUGGY]  cost  =  xNorm  +  1;  double  cost  =  xNorm  +  1;  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  cost  =  xNorm  +  1;  double  cost  =  xNorm  +  1;  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	cost    =    xNorm    +    1;    double  cost  =  xNorm  +  1;	  	compilable	  [FE]  AssertionFailedError  	52	10	add
269	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  cost  =  xNorm  +  1;  xNorm  =  xNorm  +  1;  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	add	cost    =    xNorm    +    1;    xNorm  =  xNorm  +  1;	  	compilable	  [FE]  AssertionFailedError  	52	2	add
270	[BUG]  [BUGGY]  cost  =  xNorm  +  1;  xNorm  =  xNorm  +  1;  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  cost  =  xNorm  +  1;  xNorm  =  xNorm  +  1;  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	cost    =    xNorm    +    1;    xNorm  =  xNorm  +  1;	  	compilable	  [FE]  AssertionFailedError  	52	2	add
271	[BUG]  [BUGGY]  cost  =  xNorm  +  1;  Cost  =  xNorm  +  1;  [CE]  cannot  find  symbol  Cost  [FE]            AssertionFailedError    [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  cost  =  xNorm  +  1;  Cost  =  xNorm  +  1;  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	cost    =    xNorm    +    1;    Cost  =  xNorm  +  1;	  	non-compiled	[CE]  cannot  find  symbol  Cost	52	None	add
272	[BUG]  [BUGGY]  Integer  solvedCols  =  Math.min(resolvedCols,  cols);  [CE]  cannot  find  symbol  resolvedCols  [FE]          AssertionFailedError      [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  Integer  solvedCols  =  Math.min(resolvedCols,  cols);  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	Integer  solvedCols  =  Math.min(resolvedCols,  cols);	          Integer    solvedCols    =    Math.min(resolvedCols,    xNorm);    	non-compiled	[CE]  cannot  find  symbol  resolvedCols	95	None	replace
273	[BUG]  [BUGGY]  Integer  solvedCols  =  Math.min(resolvedCols,  xNorm,  cols);  [CE]  cannot  find  symbol  resolvedCols  [FE]            AssertionFailedError      [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  Integer  solvedCols  =  Math.min(resolvedCols,  xNorm,  cols);  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	Integer  solvedCols  =  Math.min(resolvedCols,  xNorm,  cols);	          Integer    solvedCols    =    Math.min(resolvedCols,    xNorm);    	non-compiled	[CE]  cannot  find  symbol  resolvedCols	95	None	replace
274	[BUG]  [BUGGY]  Integer  solvedCols  =  Math.min(xNorm,  xNorm);  [CE]  incompatible  types  [FE]              AssertionFailedError      [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  Integer  solvedCols  =  Math.min(xNorm,  xNorm);  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	Integer  solvedCols  =  Math.min(xNorm,  xNorm);	          Integer    solvedCols    =    Math.min(resolvedCols,    xNorm);    	non-compiled	[CE]  incompatible  types	95	None	replace
275	[BUG]  [BUGGY]  tmpVec  =  Math.min(resistance,  oldRes[0]);  [CE]  cannot  find  symbol  resistance  [FE]                AssertionFailedError      [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  tmpVec  =  Math.min(resistance,  oldRes[0]);  [BUGGY]      cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	tmpVec  =  Math.min(resistance,  oldRes[0]);	  tmpVec    =    Math.min(resistance,    oldX[0]);    	non-compiled	[CE]  cannot  find  symbol  resistance	12	None	replace
276	[BUG]  [BUGGY]  tmpVec  =  Math.min(resistance,  oldX[0],  oldRes[0]);  [CE]  cannot  find  symbol  resistance  [FE]                  AssertionFailedError      [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  tmpVec  =  Math.min(resistance,  oldX[0],  oldRes[0]);  [BUGGY]      cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	tmpVec  =  Math.min(resistance,  oldX[0],  oldRes[0]);	  tmpVec    =    Math.min(resistance,    oldX[0]);    	non-compiled	[CE]  cannot  find  symbol  resistance	12	None	replace
277	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  cost    =    xNorm;    xNorm  =  xNorm;  cost  =  xNorm;  xNorm  =  xNorm;  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	add	cost        =        xNorm;        xNorm    =    xNorm;    cost  =  xNorm;  xNorm  =  xNorm;	  	compilable	  [FE]  AssertionFailedError  	45	2	add
278	[BUG]  [BUGGY]  cost    =    xNorm;    xNorm  =  xNorm;  cost  =  xNorm;  xNorm  =  xNorm;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  cost    =    xNorm;    xNorm  =  xNorm;  cost  =  xNorm;  xNorm  =  xNorm;  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	cost        =        xNorm;        xNorm    =    xNorm;    cost  =  xNorm;  xNorm  =  xNorm;	  	compilable	  [FE]  AssertionFailedError  	45	2	add
279	[BUG]  [BUGGY]  cost    =    xNorm;    xNorm  =  xNorm;  int  cost  =  xNorm;  xNorm  =  xNorm;  [CE]  possible  loss  of  precision  [FE]      AssertionFailedError    [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  cost    =    xNorm;    xNorm  =  xNorm;  int  cost  =  xNorm;  xNorm  =  xNorm;  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	cost        =        xNorm;        xNorm    =    xNorm;    int  cost  =  xNorm;  xNorm  =  xNorm;	  	non-compiled	[CE]  possible  loss  of  precision	45	None	add
280	[BUG]  [BUGGY]  cost    =    xNorm;    xNorm  =  xNorm;  Cost  =  xNorm;  xNorm  =  xNorm;  [CE]  cannot  find  symbol  Cost  [FE]        AssertionFailedError    [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  cost    =    xNorm;    xNorm  =  xNorm;  Cost  =  xNorm;  xNorm  =  xNorm;  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	cost        =        xNorm;        xNorm    =    xNorm;    Cost  =  xNorm;  xNorm  =  xNorm;	  	non-compiled	[CE]  cannot  find  symbol  Cost	45	None	add
281	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  cost    =    xNorm;    xNorm  =  xNorm;  xNorm  =  xNorm;  xNorm  =  xNorm;  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	add	cost        =        xNorm;        xNorm    =    xNorm;    xNorm  =  xNorm;  xNorm  =  xNorm;	  	compilable	  [FE]  AssertionFailedError  	45	2	add
282	[BUG]  [BUGGY]  cost    =    xNorm;    xNorm  =  xNorm;  xNorm  =  xNorm;  xNorm  =  xNorm;  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  cost    =    xNorm;    xNorm  =  xNorm;  xNorm  =  xNorm;  xNorm  =  xNorm;  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	cost        =        xNorm;        xNorm    =    xNorm;    xNorm  =  xNorm;  xNorm  =  xNorm;	  	compilable	  [FE]  AssertionFailedError  	45	2	add
283	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  cost    =    xNorm;    xNorm  =  xNorm;  double  cost  =  xNorm;  xNorm  =  xNorm;  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	add	cost        =        xNorm;        xNorm    =    xNorm;    double  cost  =  xNorm;  xNorm  =  xNorm;	  	compilable	  [FE]  AssertionFailedError  	45	11	add
284	[BUG]  [BUGGY]  cost    =    xNorm;    xNorm  =  xNorm;  double  cost  =  xNorm;  xNorm  =  xNorm;  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  cost    =    xNorm;    xNorm  =  xNorm;  double  cost  =  xNorm;  xNorm  =  xNorm;  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	cost        =        xNorm;        xNorm    =    xNorm;    double  cost  =  xNorm;  xNorm  =  xNorm;	  	compilable	  [FE]  AssertionFailedError  	45	11	add
285	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  cost    =    xNorm;    cost  =  xNorm;  cost  =  xNorm;  cost  =  xNorm;  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	add	cost        =        xNorm;        cost    =    xNorm;    cost  =  xNorm;  cost  =  xNorm;	  	compilable	  [FE]  AssertionFailedError  	40	2	add
286	[BUG]  [BUGGY]  cost    =    xNorm;    cost  =  xNorm;  cost  =  xNorm;  cost  =  xNorm;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  cost    =    xNorm;    cost  =  xNorm;  cost  =  xNorm;  cost  =  xNorm;  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	cost        =        xNorm;        cost    =    xNorm;    cost  =  xNorm;  cost  =  xNorm;	  	compilable	  [FE]  AssertionFailedError  	40	2	add
287	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  cost    =    xNorm;    cost  =  xNorm;  double  cost  =  xNorm;  cost  =  xNorm;  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	add	cost        =        xNorm;        cost    =    xNorm;    double  cost  =  xNorm;  cost  =  xNorm;	  	compilable	  [FE]  AssertionFailedError  	40	11	add
288	[BUG]  [BUGGY]  cost    =    xNorm;    cost  =  xNorm;  double  cost  =  xNorm;  cost  =  xNorm;  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  cost    =    xNorm;    cost  =  xNorm;  double  cost  =  xNorm;  cost  =  xNorm;  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	cost        =        xNorm;        cost    =    xNorm;    double  cost  =  xNorm;  cost  =  xNorm;	  	compilable	  [FE]  AssertionFailedError  	40	11	add
289	[BUG]  [BUGGY]  cost    =    xNorm;    cost  =  xNorm;  Cost  =  xNorm;  cost  =  xNorm;  [CE]  cannot  find  symbol  Cost  [FE]        AssertionFailedError    [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  cost    =    xNorm;    cost  =  xNorm;  Cost  =  xNorm;  cost  =  xNorm;  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	cost        =        xNorm;        cost    =    xNorm;    Cost  =  xNorm;  cost  =  xNorm;	  	non-compiled	[CE]  cannot  find  symbol  Cost	40	None	add
290	[BUG]  [BUGGY]  cost    =    xNorm;    cost  =  xNorm;  double  xNorm  =  xNorm;  cost  =  xNorm;  [CE]  variable  xNorm  is  already  defined  in  method  doOptimize()  [FE]          AssertionFailedError    [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  cost    =    xNorm;    cost  =  xNorm;  double  xNorm  =  xNorm;  cost  =  xNorm;  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	cost        =        xNorm;        cost    =    xNorm;    double  xNorm  =  xNorm;  cost  =  xNorm;	  	non-compiled	[CE]  variable  xNorm  is  already  defined  in  method  doOptimize()	40	None	add
291	[BUG]  [BUGGY]  cost    =    xNorm;    cost  =  xNorm;  int  cols  =  Math.min(cols,  cols);  [CE]  variable  cols  might  not  have  been  initialized  [FE]            AssertionFailedError    [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  cost    =    xNorm;    cost  =  xNorm;  int  cols  =  Math.min(cols,  cols);  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	cost        =        xNorm;        cost    =    xNorm;    int  cols  =  Math.min(cols,  cols);	  	non-compiled	[CE]  variable  cols  might  not  have  been  initialized	40	None	add
292	[BUG]  [BUGGY]  int  solvedCols  =  Math.min(results.length,  oldX.length  -  1);  [CE]  cannot  find  symbol  results  [FE]          AssertionFailedError      [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  int  solvedCols  =  Math.min(results.length,  oldX.length  -  1);  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	int  solvedCols  =  Math.min(results.length,  oldX.length  -  1);	  int    solvedCols    =    Math.min(results.length,    oldX.length);    	non-compiled	[CE]  cannot  find  symbol  results	72	None	replace
293	[BUG]  [BUGGY]  int  solvedCols  =  Math.min(cols.length,  oldX.length);  [CE]  int  cannot  be  dereferenced  [FE]            AssertionFailedError      [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  int  solvedCols  =  Math.min(cols.length,  oldX.length);  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	int  solvedCols  =  Math.min(cols.length,  oldX.length);	  int    solvedCols    =    Math.min(results.length,    oldX.length);    	non-compiled	[CE]  int  cannot  be  dereferenced	72	None	replace
294	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]              AssertionFailedError      [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  int  solvedCols  =  Math.min(lmDir.length,  oldX.length);  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	add	int  solvedCols  =  Math.min(lmDir.length,  oldX.length);	  int    solvedCols    =    Math.min(results.length,    oldX.length);    	compilable	  [FE]  AssertionFailedError  	72	4	replace
295	[BUG]  [BUGGY]  int  solvedCols  =  Math.min(lmDir.length,  oldX.length);  [FE]  AssertionFailedError  [FE]              AssertionFailedError      [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  int  solvedCols  =  Math.min(lmDir.length,  oldX.length);  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	int  solvedCols  =  Math.min(lmDir.length,  oldX.length);	  int    solvedCols    =    Math.min(results.length,    oldX.length);    	compilable	  [FE]  AssertionFailedError  	72	4	replace
296	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  cost    =    Math.max(cost,    previousCost);    cost  =  Math.max(cost,  previousCost);  cost  =  Math.max(cost,  previousCost);  cost  =  Math.max(cost,  previousCost);  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	add	cost        =        Math.max(cost,        previousCost);        cost    =    Math.max(cost,    previousCost);    cost  =  Math.max(cost,  previousCost);  cost  =  Math.max(cost,  previousCost);	  	compilable	  [FE]  AssertionFailedError  	21	2	add
297	[BUG]  [BUGGY]  cost    =    Math.max(cost,    previousCost);    cost  =  Math.max(cost,  previousCost);  cost  =  Math.max(cost,  previousCost);  cost  =  Math.max(cost,  previousCost);  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  cost    =    Math.max(cost,    previousCost);    cost  =  Math.max(cost,  previousCost);  cost  =  Math.max(cost,  previousCost);  cost  =  Math.max(cost,  previousCost);  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	cost        =        Math.max(cost,        previousCost);        cost    =    Math.max(cost,    previousCost);    cost  =  Math.max(cost,  previousCost);  cost  =  Math.max(cost,  previousCost);	  	compilable	  [FE]  AssertionFailedError  	21	2	add
298	[BUG]  [BUGGY]  cost    =    Math.max(cost,    previousCost);    cost  =  Math.max(cost,  previousCost);  Cost  =  Math.max(cost,  previousCost);  cost  =  Math.max(cost,  previousCost);  [CE]  cannot  find  symbol  Cost  [FE]      AssertionFailedError    [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  cost    =    Math.max(cost,    previousCost);    cost  =  Math.max(cost,  previousCost);  Cost  =  Math.max(cost,  previousCost);  cost  =  Math.max(cost,  previousCost);  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	cost        =        Math.max(cost,        previousCost);        cost    =    Math.max(cost,    previousCost);    Cost  =  Math.max(cost,  previousCost);  cost  =  Math.max(cost,  previousCost);	  	non-compiled	[CE]  cannot  find  symbol  Cost	21	None	add
299	[BUG]  [BUGGY]  cost    =    Math.max(cost,    previousCost);    cost  =  Math.max(cost,  previousCost);  int  previousCost  =  Math.max(cost,  previousCost);  cost  =  Math.max(cost,  previousCost);  [CE]  variable  previousCost  is  already  defined  in  method  doOptimize()  [FE]        AssertionFailedError    [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  cost    =    Math.max(cost,    previousCost);    cost  =  Math.max(cost,  previousCost);  int  previousCost  =  Math.max(cost,  previousCost);  cost  =  Math.max(cost,  previousCost);  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	cost        =        Math.max(cost,        previousCost);        cost    =    Math.max(cost,    previousCost);    int  previousCost  =  Math.max(cost,  previousCost);  cost  =  Math.max(cost,  previousCost);	  	non-compiled	[CE]  variable  previousCost  is  already  defined  in  method  doOptimize()	21	None	add
300	[BUG]  [BUGGY]  cost    =    Math.max(cost,    previousCost);    cost  =  Math.max(cost,  previousCost);  cost  =  Math.max(previousCost);  cost  =  Math.max(cost,  previousCost);  [CE]  no  suitable  method  found  for  max(double)  [FE]          AssertionFailedError    [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  cost    =    Math.max(cost,    previousCost);    cost  =  Math.max(cost,  previousCost);  cost  =  Math.max(previousCost);  cost  =  Math.max(cost,  previousCost);  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	cost        =        Math.max(cost,        previousCost);        cost    =    Math.max(cost,    previousCost);    cost  =  Math.max(previousCost);  cost  =  Math.max(cost,  previousCost);	  	non-compiled	[CE]  no  suitable  method  found  for  max(double)	21	None	add
301	[BUG]  [BUGGY]  cost    =    Math.max(cost,    previousCost);    cost  =  Math.max(cost,  previousCost);  cost  =  Math.max(cost,  previousCost);  Cost  =  Math.max(cost,  previousCost);  [CE]  cannot  find  symbol  Cost  [FE]            AssertionFailedError    [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  cost    =    Math.max(cost,    previousCost);    cost  =  Math.max(cost,  previousCost);  cost  =  Math.max(cost,  previousCost);  Cost  =  Math.max(cost,  previousCost);  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	cost        =        Math.max(cost,        previousCost);        cost    =    Math.max(cost,    previousCost);    cost  =  Math.max(cost,  previousCost);  Cost  =  Math.max(cost,  previousCost);	  	non-compiled	[CE]  cannot  find  symbol  Cost	21	None	add
302	[BUG]  [BUGGY]  double  solvedCols  =  diag[0]  *  cols[1];  [CE]  array  required,  but  int  found  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  double  solvedCols  =  diag[0]  *  cols[1];  [BUGGY]      cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	double  solvedCols  =  diag[0]  *  cols[1];	  double    solvedCols    =    diag[0]    *    permutation[1];    	non-compiled	[CE]  array  required,  but  int  found	85	None	replace
303	[BUG]  [BUGGY]  double  solvedCols  =  cols[0]  *  permutation[1];  [CE]  array  required,  but  int  found  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  double  solvedCols  =  cols[0]  *  permutation[1];  [BUGGY]      cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	double  solvedCols  =  cols[0]  *  permutation[1];	  double    solvedCols    =    diag[0]    *    permutation[1];    	non-compiled	[CE]  array  required,  but  int  found	85	None	replace
304	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  double  solvedCols  =  permutation[0]  *  diagR[1];  [BUGGY]      cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	add	double  solvedCols  =  permutation[0]  *  diagR[1];	  double    solvedCols    =    diag[0]    *    permutation[1];    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	85	11	replace
305	[BUG]  [BUGGY]  double  solvedCols  =  permutation[0]  *  diagR[1];  [FE]  ArrayIndexOutOfBoundsException  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  double  solvedCols  =  permutation[0]  *  diagR[1];  [BUGGY]      cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	double  solvedCols  =  permutation[0]  *  diagR[1];	  double    solvedCols    =    diag[0]    *    permutation[1];    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	85	11	replace
306	[BUG]  [BUGGY]  double  residuals  =  Math.sqrt(remainder);  [CE]  cannot  find  symbol  remainder  [FE]                AssertionFailedError      [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  double  residuals  =  Math.sqrt(remainder);  [BUGGY]      cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	double  residuals  =  Math.sqrt(remainder);	  double    tmpVec    =    Math.sqrt(remainder);    	non-compiled	[CE]  cannot  find  symbol  remainder	93	None	replace
307	[BUG]  [BUGGY]  cost  =  Math.abs(xNorm);  int  cost  =  Math.abs(xNorm);  [CE]  possible  loss  of  precision  [FE]    AssertionFailedError    [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  cost  =  Math.abs(xNorm);  int  cost  =  Math.abs(xNorm);  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	cost    =    Math.abs(xNorm);    int  cost  =  Math.abs(xNorm);	  	non-compiled	[CE]  possible  loss  of  precision	111	None	add
308	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  cost  =  Math.abs(xNorm);  cost  =  Math.abs(xNorm);  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	add	cost    =    Math.abs(xNorm);    cost  =  Math.abs(xNorm);	  	compilable	  [FE]  AssertionFailedError  	111	2	add
309	[BUG]  [BUGGY]  cost  =  Math.abs(xNorm);  cost  =  Math.abs(xNorm);  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  cost  =  Math.abs(xNorm);  cost  =  Math.abs(xNorm);  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	cost    =    Math.abs(xNorm);    cost  =  Math.abs(xNorm);	  	compilable	  [FE]  AssertionFailedError  	111	2	add
310	[BUG]  [BUGGY]  cost  =  Math.abs(xNorm);  tmpVec  =  Math.abs(xNorm);  [CE]  incompatible  types  [FE]        AssertionFailedError    [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  cost  =  Math.abs(xNorm);  tmpVec  =  Math.abs(xNorm);  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	cost    =    Math.abs(xNorm);    tmpVec  =  Math.abs(xNorm);	  	non-compiled	[CE]  incompatible  types	111	None	add
311	[BUG]  [BUGGY]  cost  =  Math.abs(xNorm);  Integer  cost  =  Math.abs(xNorm);  [CE]  incompatible  types  [FE]          AssertionFailedError    [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  cost  =  Math.abs(xNorm);  Integer  cost  =  Math.abs(xNorm);  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	cost    =    Math.abs(xNorm);    Integer  cost  =  Math.abs(xNorm);	  	non-compiled	[CE]  incompatible  types	111	None	add
312	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  cost  =  Math.abs(xNorm);  double  cost  =  Math.abs(xNorm);  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	add	cost    =    Math.abs(xNorm);    double  cost  =  Math.abs(xNorm);	  	compilable	  [FE]  AssertionFailedError  	111	11	add
313	[BUG]  [BUGGY]  cost  =  Math.abs(xNorm);  double  cost  =  Math.abs(xNorm);  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  cost  =  Math.abs(xNorm);  double  cost  =  Math.abs(xNorm);  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	cost    =    Math.abs(xNorm);    double  cost  =  Math.abs(xNorm);	  	compilable	  [FE]  AssertionFailedError  	111	11	add
314	[BUG]  [BUGGY]  Integer  solvedCols  =  Math.max(relativeTolerance,  cols.length);  [CE]  cannot  find  symbol  relativeTolerance  [FE]              AssertionFailedError      [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  Integer  solvedCols  =  Math.max(relativeTolerance,  cols.length);  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	Integer  solvedCols  =  Math.max(relativeTolerance,  cols.length);	  Integer    solvedCols    =    Math.max(relativeTolerance,    oldX.length);    	non-compiled	[CE]  cannot  find  symbol  relativeTolerance	136	None	replace
315	[BUG]  [BUGGY]  Integer  solvedCols  =  Math.max(relativeTolerance,  oldX.length  -  1);  [CE]  cannot  find  symbol  relativeTolerance  [FE]                AssertionFailedError      [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  Integer  solvedCols  =  Math.max(relativeTolerance,  oldX.length  -  1);  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	Integer  solvedCols  =  Math.max(relativeTolerance,  oldX.length  -  1);	  Integer    solvedCols    =    Math.max(relativeTolerance,    oldX.length);    	non-compiled	[CE]  cannot  find  symbol  relativeTolerance	136	None	replace
316	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError      [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  cost  =  Math.max(xNorm,  preRed);  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	add	cost  =  Math.max(xNorm,  preRed);	  cost    =    Math.max(cosine,    preRed);    	compilable	  [FE]  AssertionFailedError  	117	11	replace
317	[BUG]  [BUGGY]  cost  =  Math.max(xNorm,  preRed);  [FE]  AssertionFailedError  [FE]            AssertionFailedError      [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  cost  =  Math.max(xNorm,  preRed);  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	cost  =  Math.max(xNorm,  preRed);	  cost    =    Math.max(cosine,    preRed);    	compilable	  [FE]  AssertionFailedError  	117	11	replace
318	[BUG]  [BUGGY]  double  cols  =  diag[0]  *  point[0];  double  cols  =  diag[0]  *  point[0];  [CE]  variable  cols  is  already  defined  in  method  doOptimize()  [FE]    AssertionFailedError    [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  double  cols  =  diag[0]  *  point[0];  double  cols  =  diag[0]  *  point[0];  [BUGGY]      cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	double    cols    =    diag[0]    *    point[0];    double  cols  =  diag[0]  *  point[0];	  	non-compiled	[CE]  variable  cols  is  already  defined  in  method  doOptimize()	106	None	add
319	[BUG]  [BUGGY]  double  cols  =  diag[0]  *  point[0];  Double  cols  =  diag[0]  *  point[0];  [CE]  variable  cols  is  already  defined  in  method  doOptimize()  [FE]      AssertionFailedError    [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  double  cols  =  diag[0]  *  point[0];  Double  cols  =  diag[0]  *  point[0];  [BUGGY]      cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	double    cols    =    diag[0]    *    point[0];    Double  cols  =  diag[0]  *  point[0];	  	non-compiled	[CE]  variable  cols  is  already  defined  in  method  doOptimize()	106	None	add
320	[BUG]  [BUGGY]  double  cols  =  diag[0]  *  point[0];  int  cols  =  diag[0]  *  point[0];  [CE]  variable  cols  is  already  defined  in  method  doOptimize()  [FE]        AssertionFailedError    [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  double  cols  =  diag[0]  *  point[0];  int  cols  =  diag[0]  *  point[0];  [BUGGY]      cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	double    cols    =    diag[0]    *    point[0];    int  cols  =  diag[0]  *  point[0];	  	non-compiled	[CE]  variable  cols  is  already  defined  in  method  doOptimize()	106	None	add
321	[BUG]  [BUGGY]  double  cols  =  diag[0]  *  point[0];  double  cols  =  diag[1]  *  point[0];  [CE]  variable  cols  is  already  defined  in  method  doOptimize()  [FE]          AssertionFailedError    [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  double  cols  =  diag[0]  *  point[0];  double  cols  =  diag[1]  *  point[0];  [BUGGY]      cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	double    cols    =    diag[0]    *    point[0];    double  cols  =  diag[1]  *  point[0];	  	non-compiled	[CE]  variable  cols  is  already  defined  in  method  doOptimize()	106	None	add
322	[BUG]  [BUGGY]  double  cols  =  diag[0]  *  point[0];  double  cols  =  diag[0]  *  point[1];  [CE]  variable  cols  is  already  defined  in  method  doOptimize()  [FE]            AssertionFailedError    [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  double  cols  =  diag[0]  *  point[0];  double  cols  =  diag[0]  *  point[1];  [BUGGY]      cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	double    cols    =    diag[0]    *    point[0];    double  cols  =  diag[0]  *  point[1];	  	non-compiled	[CE]  variable  cols  is  already  defined  in  method  doOptimize()	106	None	add
323	[BUG]  [BUGGY]  double  solvedCols  =  cols[0]  *  diag[1];  [CE]  array  required,  but  int  found  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  double  solvedCols  =  cols[0]  *  diag[1];  [BUGGY]      cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	double  solvedCols  =  cols[0]  *  diag[1];	  double    solvedCols    =    permutation[0]    *    diag[1];    	non-compiled	[CE]  array  required,  but  int  found	90	None	replace
324	[BUG]  [BUGGY]  double  solvedCols  =  permutation[0]  *  cols[1];  [CE]  array  required,  but  int  found  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  double  solvedCols  =  permutation[0]  *  cols[1];  [BUGGY]      cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	double  solvedCols  =  permutation[0]  *  cols[1];	  double    solvedCols    =    permutation[0]    *    diag[1];    	non-compiled	[CE]  array  required,  but  int  found	90	None	replace
325	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  double  solvedCols  =  permutation[0]  /  diag[1];  [BUGGY]      cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	add	double  solvedCols  =  permutation[0]  /  diag[1];	  double    solvedCols    =    permutation[0]    *    diag[1];    	compilable	  [FE]  AssertionFailedError  	90	11	replace
326	[BUG]  [BUGGY]  double  solvedCols  =  permutation[0]  /  diag[1];  [FE]  AssertionFailedError  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  double  solvedCols  =  permutation[0]  /  diag[1];  [BUGGY]      cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	double  solvedCols  =  permutation[0]  /  diag[1];	  double    solvedCols    =    permutation[0]    *    diag[1];    	compilable	  [FE]  AssertionFailedError  	90	11	replace
327	[BUG]  [BUGGY]  cost  =  Math.sqrt(result);  [CE]  cannot  find  symbol  result  [FE]              AssertionFailedError      [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  cost  =  Math.sqrt(result);  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	cost  =  Math.sqrt(result);	  cost    =    Math.sqrt(xK);    	non-compiled	[CE]  cannot  find  symbol  result	54	None	replace
328	[BUG]  [BUGGY]  cost  =  Math.sqrt(resulte);  [CE]  cannot  find  symbol  resulte  [FE]                AssertionFailedError      [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  cost  =  Math.sqrt(resulte);  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	cost  =  Math.sqrt(resulte);	  cost    =    Math.sqrt(xK);    	non-compiled	[CE]  cannot  find  symbol  resulte	54	None	replace
329	[BUG]  [BUGGY]  cost  =  Math.sqrt(diag);  [CE]  method  sqrt  in  class  Math  cannot  be  applied  to  given  types;  [FE]                  AssertionFailedError      [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  cost  =  Math.sqrt(diag);  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	cost  =  Math.sqrt(diag);	  cost    =    Math.sqrt(xK);    	non-compiled	[CE]  method  sqrt  in  class  Math  cannot  be  applied  to  given  types;	54	None	replace
330	[BUG]  [BUGGY]  double  cols  =  diag[k]  *  point[1];  [CE]  cannot  find  symbol  k  [FE]              AssertionFailedError      [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  double  cols  =  diag[k]  *  point[1];  [BUGGY]      cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	double  cols  =  diag[k]  *  point[1];	  double    cols    =    diag[k]    *    point[0];    	non-compiled	[CE]  cannot  find  symbol  k	28	None	replace
331	[BUG]  [BUGGY]  double  cols  =  diag[k]  *  point[0]  +  1;  [CE]  cannot  find  symbol  k  [FE]                AssertionFailedError      [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  double  cols  =  diag[k]  *  point[0]  +  1;  [BUGGY]      cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	double  cols  =  diag[k]  *  point[0]  +  1;	  double    cols    =    diag[k]    *    point[0];    	non-compiled	[CE]  cannot  find  symbol  k	28	None	replace
332	[BUG]  [BUGGY]  double  cols  =  diag[k]  *  point[2];  [CE]  cannot  find  symbol  k  [FE]                  AssertionFailedError      [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  double  cols  =  diag[k]  *  point[2];  [BUGGY]      cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	double  cols  =  diag[k]  *  point[2];	  double    cols    =    diag[k]    *    point[0];    	non-compiled	[CE]  cannot  find  symbol  k	28	None	replace
333	[BUG]  [BUGGY]  tmpVec  -=  permutation;  [CE]  bad  operand  types  for  binary  operator  '-'  [FE]              AssertionFailedError      [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  tmpVec  -=  permutation;  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	tmpVec  -=  permutation;	  cost    -=    permutation;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '-'	67	None	replace
334	[BUG]  [BUGGY]  cost  -=  permutation[k];  [CE]  cannot  find  symbol  k  [FE]                AssertionFailedError      [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  cost  -=  permutation[k];  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	cost  -=  permutation[k];	  cost    -=    permutation;    	non-compiled	[CE]  cannot  find  symbol  k	67	None	replace
335	[BUG]  [BUGGY]  Integer  previousCost  =  Math.max(previousCost,  xNorm);  [CE]  variable  previousCost  is  already  defined  in  method  doOptimize()  [FE]          AssertionFailedError      [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  Integer  previousCost  =  Math.max(previousCost,  xNorm);  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	Integer  previousCost  =  Math.max(previousCost,  xNorm);	  cost    =    Math.max(previousCost,    xNorm);    Integer    previousCost    =    Math.max(previousCost,    xNorm);    	non-compiled	[CE]  variable  previousCost  is  already  defined  in  method  doOptimize()	138	None	replace
336	[BUG]  [BUGGY]  Integer  previousCost  =  Math.max(xNorm,  previousCost);  [CE]  variable  previousCost  is  already  defined  in  method  doOptimize()  [FE]            AssertionFailedError      [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  Integer  previousCost  =  Math.max(xNorm,  previousCost);  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	Integer  previousCost  =  Math.max(xNorm,  previousCost);	  cost    =    Math.max(previousCost,    xNorm);    Integer    previousCost    =    Math.max(previousCost,    xNorm);    	non-compiled	[CE]  variable  previousCost  is  already  defined  in  method  doOptimize()	138	None	replace
337	[BUG]  [BUGGY]  int  previousCost  =  Math.max(previousCost,  xNorm);  [CE]  variable  previousCost  is  already  defined  in  method  doOptimize()  [FE]              AssertionFailedError      [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  int  previousCost  =  Math.max(previousCost,  xNorm);  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	int  previousCost  =  Math.max(previousCost,  xNorm);	  cost    =    Math.max(previousCost,    xNorm);    Integer    previousCost    =    Math.max(previousCost,    xNorm);    	non-compiled	[CE]  variable  previousCost  is  already  defined  in  method  doOptimize()	138	None	replace
338	[BUG]  [BUGGY]  Integer  previousCost  =  Math.min(previousCost,  xNorm);  [CE]  variable  previousCost  is  already  defined  in  method  doOptimize()  [FE]                AssertionFailedError      [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  Integer  previousCost  =  Math.min(previousCost,  xNorm);  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	Integer  previousCost  =  Math.min(previousCost,  xNorm);	  cost    =    Math.max(previousCost,    xNorm);    Integer    previousCost    =    Math.max(previousCost,    xNorm);    	non-compiled	[CE]  variable  previousCost  is  already  defined  in  method  doOptimize()	138	None	replace
339	[BUG]  [BUGGY]  tmpVec  =  Math.min(result,  previousCost,  xNorm,  0);  [CE]  cannot  find  symbol  result  [FE]                          AssertionFailedError      [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  tmpVec  =  Math.min(result,  previousCost,  xNorm,  0);  [BUGGY]      cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	tmpVec  =  Math.min(result,  previousCost,  xNorm,  0);	  tmpVec    =    Math.min(previousCost,    xNorm,    0);    	non-compiled	[CE]  cannot  find  symbol  result	58	None	replace
340	[BUG]  [BUGGY]  tmpVec  =  Math.min(previousCost,  xNorm,  0,  cols);  [CE]  no  suitable  method  found  for  min(double,double,int,int)  [FE]                            AssertionFailedError      [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  tmpVec  =  Math.min(previousCost,  xNorm,  0,  cols);  [BUGGY]      cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	tmpVec  =  Math.min(previousCost,  xNorm,  0,  cols);	  tmpVec    =    Math.min(previousCost,    xNorm,    0);    	non-compiled	[CE]  no  suitable  method  found  for  min(double,double,int,int)	58	None	replace
341	[BUG]  [BUGGY]  tmpVec  =  Math.min(remainings,  previousCost,  xNorm,  0);  [CE]  cannot  find  symbol  remainings  [FE]                              AssertionFailedError      [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  tmpVec  =  Math.min(remainings,  previousCost,  xNorm,  0);  [BUGGY]      cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	tmpVec  =  Math.min(remainings,  previousCost,  xNorm,  0);	  tmpVec    =    Math.min(previousCost,    xNorm,    0);    	non-compiled	[CE]  cannot  find  symbol  remainings	58	None	replace
342	[BUG]  [BUGGY]  cost  =  tmpVec.length;  int  cost  =  tmpVec.length;  [CE]  possible  loss  of  precision  [FE]    AssertionFailedError    [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  cost  =  tmpVec.length;  int  cost  =  tmpVec.length;  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	cost    =    tmpVec.length;    int  cost  =  tmpVec.length;	  	non-compiled	[CE]  possible  loss  of  precision	19	None	add
343	[BUG]  [BUGGY]  cost  =  tmpVec.length;  tmpVec  =  tmpVec.length;  [CE]  incompatible  types  [FE]      AssertionFailedError    [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  cost  =  tmpVec.length;  tmpVec  =  tmpVec.length;  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	cost    =    tmpVec.length;    tmpVec  =  tmpVec.length;	  	non-compiled	[CE]  incompatible  types	19	None	add
344	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  cost  =  tmpVec.length;  cost  =  tmpVec.length;  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	add	cost    =    tmpVec.length;    cost  =  tmpVec.length;	  	compilable	  [FE]  AssertionFailedError  	19	2	add
345	[BUG]  [BUGGY]  cost  =  tmpVec.length;  cost  =  tmpVec.length;  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  cost  =  tmpVec.length;  cost  =  tmpVec.length;  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	cost    =    tmpVec.length;    cost  =  tmpVec.length;	  	compilable	  [FE]  AssertionFailedError  	19	2	add
346	[BUG]  [BUGGY]  cost  =  tmpVec.length;  Integer  cost  =  tmpVec.length;  [CE]  incompatible  types  [FE]          AssertionFailedError    [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  cost  =  tmpVec.length;  Integer  cost  =  tmpVec.length;  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	cost    =    tmpVec.length;    Integer  cost  =  tmpVec.length;	  	non-compiled	[CE]  incompatible  types	19	None	add
347	[BUG]  [BUGGY]  cost  =  tmpVec.length;  tmpVec.length;  [CE]  not  a  statement  [FE]            AssertionFailedError    [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  cost  =  tmpVec.length;  tmpVec.length;  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	cost    =    tmpVec.length;    tmpVec.length;	  	non-compiled	[CE]  not  a  statement	19	None	add
348	[BUG]  [BUGGY]  preRed  =  Math.max(previousCost,  cost);  Preconditions.checkState(cols!=  0);  [CE]  cannot  find  symbol  Preconditions  [FE]          AssertionFailedError      [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  preRed  =  Math.max(previousCost,  cost);  Preconditions.checkState(cols!=  0);  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	preRed  =  Math.max(previousCost,  cost);  Preconditions.checkState(cols!=  0);	  cost    =    Math.max(cost,    previousCost);    Preconditions.checkState(cols!=    0);    	non-compiled	[CE]  cannot  find  symbol  Preconditions	125	None	replace
349	[BUG]  [BUGGY]  Preconditions.checkState(cols!=  previousCost;  if(previousCost!=  null)  {  cost  -=  previousCost;  }  [CE]  ')'  expected  [FE]          AssertionFailedError      [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  Preconditions.checkState(cols!=  previousCost;  if(previousCost!=  null)  {  cost  -=  previousCost;  }  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	Preconditions.checkState(cols!=  previousCost;  if(previousCost!=  null)  {  cost  -=  previousCost;  }	  cost    -=    previousCost;    if(previousCost!=    null)    {    cost    -=    previousCost;    }    else    {    for(int    j    =    0;    j    <    cols;    ++k)    {    double    xK    =    diag[k]    *    point[k];    xNorm+=    xK    *    	non-compiled	[CE]  ')'  expected	156	None	replace
350	[BUG]  [BUGGY]  Preconditions.checkState(cols!=  previousCost;  if(previousCost!=  null)  {  cost  -=  previousCost;  }  else  {  for(int  j  =  0;  j  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[  [CE]  ')'  expected  [FE]            AssertionFailedError      [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  Preconditions.checkState(cols!=  previousCost;  if(previousCost!=  null)  {  cost  -=  previousCost;  }  else  {  for(int  j  =  0;  j  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	Preconditions.checkState(cols!=  previousCost;  if(previousCost!=  null)  {  cost  -=  previousCost;  }  else  {  for(int  j  =  0;  j  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[	  cost    -=    previousCost;    if(previousCost!=    null)    {    cost    -=    previousCost;    }    else    {    for(int    j    =    0;    j    <    cols;    ++k)    {    double    xK    =    diag[k]    *    point[k];    xNorm+=    xK    *    	non-compiled	[CE]  ')'  expected	156	None	replace
351	[BUG]  [BUGGY]  Preconditions.checkState(cols!=  previousCost;  if(previousCost!=  null)  {  cost  -=  previousCost;  }  else  {  for(int  j  =  0;  j  <  cols;  ++k)  {  double  x  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  Preconditions.checkState(cols!=  previousCost;  if(previousCost!=  null)  {  cost  -=  previousCost;  }  else  {  for(int  j  =  0;  j  <  cols;  ++k)  {  double  x  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	Preconditions.checkState(cols!=  previousCost;  if(previousCost!=  null)  {  cost  -=  previousCost;  }  else  {  for(int  j  =  0;  j  <  cols;  ++k)  {  double  x	  cost    -=    previousCost;    if(previousCost!=    null)    {    cost    -=    previousCost;    }    else    {    for(int    j    =    0;    j    <    cols;    ++k)    {    double    xK    =    diag[k]    *    point[k];    xNorm+=    xK    *    	non-compiled	[CE]  ')'  expected	156	None	replace
352	[BUG]  [BUGGY]  Preconditions.checkState(cols!=  previousCost;  if(previousCost!=  null)  {  cost  -=  previousCost;  }  else  {  for(int  j  =  0;  j  <  cols;  ++k)  {  double  xK  =  diag[  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  Preconditions.checkState(cols!=  previousCost;  if(previousCost!=  null)  {  cost  -=  previousCost;  }  else  {  for(int  j  =  0;  j  <  cols;  ++k)  {  double  xK  =  diag[  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	Preconditions.checkState(cols!=  previousCost;  if(previousCost!=  null)  {  cost  -=  previousCost;  }  else  {  for(int  j  =  0;  j  <  cols;  ++k)  {  double  xK  =  diag[	  cost    -=    previousCost;    if(previousCost!=    null)    {    cost    -=    previousCost;    }    else    {    for(int    j    =    0;    j    <    cols;    ++k)    {    double    xK    =    diag[k]    *    point[k];    xNorm+=    xK    *    	non-compiled	[CE]  ')'  expected	156	None	replace
353	[BUG]  [BUGGY]  int  previousCost  =  Math.min(previousCost,  xNorm);  [CE]  variable  previousCost  is  already  defined  in  method  doOptimize()  [FE]          AssertionFailedError      [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  int  previousCost  =  Math.min(previousCost,  xNorm);  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	int  previousCost  =  Math.min(previousCost,  xNorm);	  cost    -=    previousCost;    int    previousCost    =    Math.min(previousCost,    xNorm);    	non-compiled	[CE]  variable  previousCost  is  already  defined  in  method  doOptimize()	105	None	replace
354	[BUG]  [BUGGY]  int  previousCost  =  Math.min(remainingCost,  xNorm);  [CE]  variable  previousCost  is  already  defined  in  method  doOptimize()  [FE]            AssertionFailedError      [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  int  previousCost  =  Math.min(remainingCost,  xNorm);  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	int  previousCost  =  Math.min(remainingCost,  xNorm);	  cost    -=    previousCost;    int    previousCost    =    Math.min(previousCost,    xNorm);    	non-compiled	[CE]  variable  previousCost  is  already  defined  in  method  doOptimize()	105	None	replace
355	[BUG]  [BUGGY]  int  previousCost  =  Math.min(period,  xNorm);  [CE]  variable  previousCost  is  already  defined  in  method  doOptimize()  [FE]              AssertionFailedError      [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  int  previousCost  =  Math.min(period,  xNorm);  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	int  previousCost  =  Math.min(period,  xNorm);	  cost    -=    previousCost;    int    previousCost    =    Math.min(previousCost,    xNorm);    	non-compiled	[CE]  variable  previousCost  is  already  defined  in  method  doOptimize()	105	None	replace
356	[BUG]  [BUGGY]  int  previousCost  =  Math.min(xNorm,  previousCost);  [CE]  variable  previousCost  is  already  defined  in  method  doOptimize()  [FE]                AssertionFailedError      [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  int  previousCost  =  Math.min(xNorm,  previousCost);  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	int  previousCost  =  Math.min(xNorm,  previousCost);	  cost    -=    previousCost;    int    previousCost    =    Math.min(previousCost,    xNorm);    	non-compiled	[CE]  variable  previousCost  is  already  defined  in  method  doOptimize()	105	None	replace
357	[BUG]  [BUGGY]  double  solvedCols  =  permutation[0]  *  diag[1];  double  solvedCols  =  permutation[0]  *  diag[1];  [CE]  variable  solvedCols  is  already  defined  in  method  doOptimize()  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  double  solvedCols  =  permutation[0]  *  diag[1];  double  solvedCols  =  permutation[0]  *  diag[1];  [BUGGY]      cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	double    solvedCols    =    permutation[0]    *    diag[1];    double  solvedCols  =  permutation[0]  *  diag[1];	  	non-compiled	[CE]  variable  solvedCols  is  already  defined  in  method  doOptimize()	89	None	add
358	[BUG]  [BUGGY]  double  solvedCols  =  permutation[0]  *  diag[1];  Double  solvedCols  =  permutation[0]  *  diag[1];  [CE]  variable  solvedCols  is  already  defined  in  method  doOptimize()  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  double  solvedCols  =  permutation[0]  *  diag[1];  Double  solvedCols  =  permutation[0]  *  diag[1];  [BUGGY]      cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	double    solvedCols    =    permutation[0]    *    diag[1];    Double  solvedCols  =  permutation[0]  *  diag[1];	  	non-compiled	[CE]  variable  solvedCols  is  already  defined  in  method  doOptimize()	89	None	add
359	[BUG]  [BUGGY]  double  solvedCols  =  permutation[0]  *  diag[1];  int  solvedCols  =  permutation[0]  *  diag[1];  [CE]  variable  solvedCols  is  already  defined  in  method  doOptimize()  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  double  solvedCols  =  permutation[0]  *  diag[1];  int  solvedCols  =  permutation[0]  *  diag[1];  [BUGGY]      cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	double    solvedCols    =    permutation[0]    *    diag[1];    int  solvedCols  =  permutation[0]  *  diag[1];	  	non-compiled	[CE]  variable  solvedCols  is  already  defined  in  method  doOptimize()	89	None	add
360	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  double  solvedCols  =  permutation[0]  *  diag[1];  double  resolvedCols  =  permutation[0]  *  diag[1];  [BUGGY]      cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	add	double    solvedCols    =    permutation[0]    *    diag[1];    double  resolvedCols  =  permutation[0]  *  diag[1];	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	89	14	add
361	[BUG]  [BUGGY]  double  solvedCols  =  permutation[0]  *  diag[1];  double  resolvedCols  =  permutation[0]  *  diag[1];  [FE]  ArrayIndexOutOfBoundsException  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  double  solvedCols  =  permutation[0]  *  diag[1];  double  resolvedCols  =  permutation[0]  *  diag[1];  [BUGGY]      cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	double    solvedCols    =    permutation[0]    *    diag[1];    double  resolvedCols  =  permutation[0]  *  diag[1];	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	89	14	add
362	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  double  solvedCols  =  permutation[0]  *  diag[1];  double  solves  =  permutation[0]  *  diag[1];  [BUGGY]      cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	add	double    solvedCols    =    permutation[0]    *    diag[1];    double  solves  =  permutation[0]  *  diag[1];	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	89	14	add
363	[BUG]  [BUGGY]  double  solvedCols  =  permutation[0]  *  diag[1];  double  solves  =  permutation[0]  *  diag[1];  [FE]  ArrayIndexOutOfBoundsException  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  double  solvedCols  =  permutation[0]  *  diag[1];  double  solves  =  permutation[0]  *  diag[1];  [BUGGY]      cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	double    solvedCols    =    permutation[0]    *    diag[1];    double  solves  =  permutation[0]  *  diag[1];	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	89	14	add
364	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  cost    =    Math.max(previousCost,    xNorm);    cost  =  Math.max(previousCost,  xNorm);  cost  =  Math.max(previousCost,  xNorm);  cost  =  Math.max(previousCost,  xNorm);  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	add	cost        =        Math.max(previousCost,        xNorm);        cost    =    Math.max(previousCost,    xNorm);    cost  =  Math.max(previousCost,  xNorm);  cost  =  Math.max(previousCost,  xNorm);	  	compilable	  [FE]  AssertionFailedError  	36	2	add
365	[BUG]  [BUGGY]  cost    =    Math.max(previousCost,    xNorm);    cost  =  Math.max(previousCost,  xNorm);  cost  =  Math.max(previousCost,  xNorm);  cost  =  Math.max(previousCost,  xNorm);  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  cost    =    Math.max(previousCost,    xNorm);    cost  =  Math.max(previousCost,  xNorm);  cost  =  Math.max(previousCost,  xNorm);  cost  =  Math.max(previousCost,  xNorm);  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	cost        =        Math.max(previousCost,        xNorm);        cost    =    Math.max(previousCost,    xNorm);    cost  =  Math.max(previousCost,  xNorm);  cost  =  Math.max(previousCost,  xNorm);	  	compilable	  [FE]  AssertionFailedError  	36	2	add
366	[BUG]  [BUGGY]  cost    =    Math.max(previousCost,    xNorm);    cost  =  Math.max(previousCost,  xNorm);  double  previousCost  =  Math.max(previousCost,  xNorm);  cost  =  Math.max(previousCost,  xNorm);  [CE]  variable  previousCost  is  already  defined  in  method  doOptimize()  [FE]      AssertionFailedError    [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  cost    =    Math.max(previousCost,    xNorm);    cost  =  Math.max(previousCost,  xNorm);  double  previousCost  =  Math.max(previousCost,  xNorm);  cost  =  Math.max(previousCost,  xNorm);  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	cost        =        Math.max(previousCost,        xNorm);        cost    =    Math.max(previousCost,    xNorm);    double  previousCost  =  Math.max(previousCost,  xNorm);  cost  =  Math.max(previousCost,  xNorm);	  	non-compiled	[CE]  variable  previousCost  is  already  defined  in  method  doOptimize()	36	None	add
367	[BUG]  [BUGGY]  cost    =    Math.max(previousCost,    xNorm);    cost  =  Math.max(previousCost,  xNorm);  int  previousCost  =  Math.max(previousCost,  xNorm);  cost  =  Math.max(previousCost,  xNorm);  [CE]  variable  previousCost  is  already  defined  in  method  doOptimize()  [FE]        AssertionFailedError    [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  cost    =    Math.max(previousCost,    xNorm);    cost  =  Math.max(previousCost,  xNorm);  int  previousCost  =  Math.max(previousCost,  xNorm);  cost  =  Math.max(previousCost,  xNorm);  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	cost        =        Math.max(previousCost,        xNorm);        cost    =    Math.max(previousCost,    xNorm);    int  previousCost  =  Math.max(previousCost,  xNorm);  cost  =  Math.max(previousCost,  xNorm);	  	non-compiled	[CE]  variable  previousCost  is  already  defined  in  method  doOptimize()	36	None	add
368	[BUG]  [BUGGY]  cost    =    Math.max(previousCost,    xNorm);    cost  =  Math.max(previousCost,  xNorm);  Cost  =  Math.max(previousCost,  xNorm);  cost  =  Math.max(previousCost,  xNorm);  [CE]  cannot  find  symbol  Cost  [FE]          AssertionFailedError    [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  cost    =    Math.max(previousCost,    xNorm);    cost  =  Math.max(previousCost,  xNorm);  Cost  =  Math.max(previousCost,  xNorm);  cost  =  Math.max(previousCost,  xNorm);  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	cost        =        Math.max(previousCost,        xNorm);        cost    =    Math.max(previousCost,    xNorm);    Cost  =  Math.max(previousCost,  xNorm);  cost  =  Math.max(previousCost,  xNorm);	  	non-compiled	[CE]  cannot  find  symbol  Cost	36	None	add
369	[BUG]  [BUGGY]  cost    =    Math.max(previousCost,    xNorm);    cost  =  Math.max(previousCost,  xNorm);  int  previousCost  =  Math.min(previousCost,  xNorm);  cost  =  Math.max(previousCost,  xNorm);  [CE]  variable  previousCost  is  already  defined  in  method  doOptimize()  [FE]            AssertionFailedError    [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  cost    =    Math.max(previousCost,    xNorm);    cost  =  Math.max(previousCost,  xNorm);  int  previousCost  =  Math.min(previousCost,  xNorm);  cost  =  Math.max(previousCost,  xNorm);  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	cost        =        Math.max(previousCost,        xNorm);        cost    =    Math.max(previousCost,    xNorm);    int  previousCost  =  Math.min(previousCost,  xNorm);  cost  =  Math.max(previousCost,  xNorm);	  	non-compiled	[CE]  variable  previousCost  is  already  defined  in  method  doOptimize()	36	None	add
370	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  cost  =  Math.min(previousCost,  xNorm);  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	add	cost  =  Math.min(previousCost,  xNorm);	  cost    =    Math.max(previousCost,    xNorm);    cost    =    Math.max(previousCost,    xNorm);    	compilable	  [FE]  AssertionFailedError  	37	5	replace
371	[BUG]  [BUGGY]  cost  =  Math.min(previousCost,  xNorm);  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  cost  =  Math.min(previousCost,  xNorm);  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	cost  =  Math.min(previousCost,  xNorm);	  cost    =    Math.max(previousCost,    xNorm);    cost    =    Math.max(previousCost,    xNorm);    	compilable	  [FE]  AssertionFailedError  	37	5	replace
372	[BUG]  [BUGGY]  n  =  Math.sqrt(xNorm);  [CE]  cannot  find  symbol  n  [FE]      AssertionFailedError    [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  n  =  Math.sqrt(xNorm);  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	n  =  Math.sqrt(xNorm);	  cost    =    Math.max(previousCost,    xNorm);    cost    =    Math.max(previousCost,    xNorm);    	non-compiled	[CE]  cannot  find  symbol  n	37	None	replace
373	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError      [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  cost  =  Math.max(cols,  xNorm);  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	add	cost  =  Math.max(cols,  xNorm);	  cost    =    Math.max(cosine,    xNorm);    	compilable	  [FE]  AssertionFailedError  	140	10	replace
374	[BUG]  [BUGGY]  cost  =  Math.max(cols,  xNorm);  [FE]  AssertionFailedError  [FE]            AssertionFailedError      [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  cost  =  Math.max(cols,  xNorm);  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	cost  =  Math.max(cols,  xNorm);	  cost    =    Math.max(cosine,    xNorm);    	compilable	  [FE]  AssertionFailedError  	140	10	replace
375	[BUG]  [BUGGY]  cost  =  Math.max(period,  previousCost);  [CE]  cannot  find  symbol  period  [FE]    AssertionFailedError    [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  cost  =  Math.max(period,  previousCost);  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	cost  =  Math.max(period,  previousCost);	  cost    =    Math.max(previousCost,    cost);    	non-compiled	[CE]  cannot  find  symbol  period	16	None	replace
376	[BUG]  [BUGGY]  Integer  solvedCols  =  Math.max(xNorm,  oldX);  [CE]  no  suitable  method  found  for  max(double,double[])  [FE]            AssertionFailedError      [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  Integer  solvedCols  =  Math.max(xNorm,  oldX);  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	Integer  solvedCols  =  Math.max(xNorm,  oldX);	  Integer    solvedCols    =    Math.max(relativeTolerance,    oldX);    	non-compiled	[CE]  no  suitable  method  found  for  max(double,double[])	135	None	replace
377	[BUG]  [BUGGY]  Integer  solvedCols  =  Math.max(cols,  oldX);  [CE]  no  suitable  method  found  for  max(int,double[])  [FE]              AssertionFailedError      [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  Integer  solvedCols  =  Math.max(cols,  oldX);  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	Integer  solvedCols  =  Math.max(cols,  oldX);	  Integer    solvedCols    =    Math.max(relativeTolerance,    oldX);    	non-compiled	[CE]  no  suitable  method  found  for  max(int,double[])	135	None	replace
378	[BUG]  [BUGGY]  double  previousCost  -=  previousCost;  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  double  previousCost  -=  previousCost;  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	double  previousCost  -=  previousCost;	  cost    -=    previousCost;    double    previousCost    -=    previousCost;    	non-compiled	[CE]  ';'  expected	10	None	replace
379	[BUG]  [BUGGY]  double  previousCost  -=  preRed;  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  double  previousCost  -=  preRed;  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	double  previousCost  -=  preRed;	  cost    -=    previousCost;    double    previousCost    -=    previousCost;    	non-compiled	[CE]  ';'  expected	10	None	replace
380	[BUG]  [BUGGY]  double  previousCost  -=  oldX;  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  double  previousCost  -=  oldX;  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	double  previousCost  -=  oldX;	  cost    -=    previousCost;    double    previousCost    -=    previousCost;    	non-compiled	[CE]  ';'  expected	10	None	replace
381	[BUG]  [BUGGY]  double  previousCost  -=  prered;  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  double  previousCost  -=  prered;  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	double  previousCost  -=  prered;	  cost    -=    previousCost;    double    previousCost    -=    previousCost;    	non-compiled	[CE]  ';'  expected	10	None	replace
382	[BUG]  [BUGGY]  tmpVec  =  Math.ceil(xNorm);  [CE]  incompatible  types  [FE]    AssertionFailedError    [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  tmpVec  =  Math.ceil(xNorm);  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	tmpVec  =  Math.ceil(xNorm);	  cost    =    Math.ceil(xNorm);    	non-compiled	[CE]  incompatible  types	51	None	replace
383	[BUG]  [BUGGY]  cost  =  Math.ceil(xK);  [CE]  cannot  find  symbol  xK  [FE]      AssertionFailedError    [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  cost  =  Math.ceil(xK);  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	cost  =  Math.ceil(xK);	  cost    =    Math.ceil(xNorm);    	non-compiled	[CE]  cannot  find  symbol  xK	51	None	replace
384	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  cost  =  Math.ceil(xNorm  +  1);  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	add	cost  =  Math.ceil(xNorm  +  1);	  cost    =    Math.ceil(xNorm);    	compilable	  [FE]  AssertionFailedError  	51	10	replace
385	[BUG]  [BUGGY]  cost  =  Math.ceil(xNorm  +  1);  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  cost  =  Math.ceil(xNorm  +  1);  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	cost  =  Math.ceil(xNorm  +  1);	  cost    =    Math.ceil(xNorm);    	compilable	  [FE]  AssertionFailedError  	51	10	replace
386	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError      [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  cost  -=  Math.max(previousCost,  cols);  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	add	cost  -=  Math.max(previousCost,  cols);	  cost    -=    Math.max(cosine,    previousCost);    	compilable	  [FE]  AssertionFailedError  	146	15	replace
387	[BUG]  [BUGGY]  cost  -=  Math.max(previousCost,  cols);  [FE]  AssertionFailedError  [FE]          AssertionFailedError      [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  cost  -=  Math.max(previousCost,  cols);  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	cost  -=  Math.max(previousCost,  cols);	  cost    -=    Math.max(cosine,    previousCost);    	compilable	  [FE]  AssertionFailedError  	146	15	replace
388	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError      [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  cost  -=  Math.max(xNorm,  previousCost);  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	add	cost  -=  Math.max(xNorm,  previousCost);	  cost    -=    Math.max(cosine,    previousCost);    	compilable	  [FE]  AssertionFailedError  	146	15	replace
389	[BUG]  [BUGGY]  cost  -=  Math.max(xNorm,  previousCost);  [FE]  AssertionFailedError  [FE]            AssertionFailedError      [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  cost  -=  Math.max(xNorm,  previousCost);  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	cost  -=  Math.max(xNorm,  previousCost);	  cost    -=    Math.max(cosine,    previousCost);    	compilable	  [FE]  AssertionFailedError  	146	15	replace
390	[BUG]  [BUGGY]  cost  -=  Math.max(result,  previousCost);  [CE]  cannot  find  symbol  result  [FE]              AssertionFailedError      [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  cost  -=  Math.max(result,  previousCost);  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	cost  -=  Math.max(result,  previousCost);	  cost    -=    Math.max(cosine,    previousCost);    	non-compiled	[CE]  cannot  find  symbol  result	146	None	replace
391	[BUG]  [BUGGY]  tmpVec  =  Math.sqrt(xNorm,  previousCost,  cost);  [CE]  method  sqrt  in  class  Math  cannot  be  applied  to  given  types;  [FE]                AssertionFailedError      [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  tmpVec  =  Math.sqrt(xNorm,  previousCost,  cost);  [BUGGY]      cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	tmpVec  =  Math.sqrt(xNorm,  previousCost,  cost);	  tmpVec    =    Math.sqrt(xNorm,    previousCost);    	non-compiled	[CE]  method  sqrt  in  class  Math  cannot  be  applied  to  given  types;	153	None	replace
392	[BUG]  [BUGGY]  tmpVec  =  Math.sqrt(expectedCost,  xNorm);  [CE]  cannot  find  symbol  expectedCost  [FE]                  AssertionFailedError      [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  tmpVec  =  Math.sqrt(expectedCost,  xNorm);  [BUGGY]      cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	tmpVec  =  Math.sqrt(expectedCost,  xNorm);	  tmpVec    =    Math.sqrt(xNorm,    previousCost);    	non-compiled	[CE]  cannot  find  symbol  expectedCost	153	None	replace
393	[BUG]  [BUGGY]  tmpVec  =  Math.sqrt(xNorm,  preRed);  [CE]  method  sqrt  in  class  Math  cannot  be  applied  to  given  types;  [FE]                    AssertionFailedError      [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  tmpVec  =  Math.sqrt(xNorm,  preRed);  [BUGGY]      cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	tmpVec  =  Math.sqrt(xNorm,  preRed);	  tmpVec    =    Math.sqrt(xNorm,    previousCost);    	non-compiled	[CE]  method  sqrt  in  class  Math  cannot  be  applied  to  given  types;	153	None	replace
394	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  cost  -=  cols;  cost  -=  cols;  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	add	cost    -=    cols;    cost  -=  cols;	  	compilable	  [FE]  AssertionFailedError  	61	2	add
395	[BUG]  [BUGGY]  cost  -=  cols;  cost  -=  cols;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  cost  -=  cols;  cost  -=  cols;  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	cost    -=    cols;    cost  -=  cols;	  	compilable	  [FE]  AssertionFailedError  	61	2	add
396	[BUG]  [BUGGY]  cost  -=  cols;  int  cost  -=  cols;  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  cost  -=  cols;  int  cost  -=  cols;  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	cost    -=    cols;    int  cost  -=  cols;	  	non-compiled	[CE]  ';'  expected	61	None	add
397	[BUG]  [BUGGY]  cost  -=  cols;  -=  cols;  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  cost  -=  cols;  -=  cols;  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	cost    -=    cols;    -=  cols;	  	non-compiled	[CE]  illegal  start  of  expression	61	None	add
398	[BUG]  [BUGGY]  cost  -=  cols;  Cost  -=  cols;  [CE]  cannot  find  symbol  Cost  [FE]          AssertionFailedError    [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  cost  -=  cols;  Cost  -=  cols;  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	cost    -=    cols;    Cost  -=  cols;	  	non-compiled	[CE]  cannot  find  symbol  Cost	61	None	add
399	[BUG]  [BUGGY]  cost  -=  cols;  double  cost  -=  cols;  [CE]  ';'  expected  [FE]            AssertionFailedError    [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  cost  -=  cols;  double  cost  -=  cols;  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	cost    -=    cols;    double  cost  -=  cols;	  	non-compiled	[CE]  ';'  expected	61	None	add
400	[BUG]  [BUGGY]  tmpVec  =  Math.min(results,  oldRes[0]);  [CE]  cannot  find  symbol  results  [FE]                AssertionFailedError      [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  tmpVec  =  Math.min(results,  oldRes[0]);  [BUGGY]      cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	tmpVec  =  Math.min(results,  oldRes[0]);	  tmpVec    =    Math.min(results,    oldX[0]);    	non-compiled	[CE]  cannot  find  symbol  results	120	None	replace
401	[BUG]  [BUGGY]  tmpVec  =  Math.min(results,  oldY[0]);  [CE]  cannot  find  symbol  results  [FE]                  AssertionFailedError      [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  tmpVec  =  Math.min(results,  oldY[0]);  [BUGGY]      cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	tmpVec  =  Math.min(results,  oldY[0]);	  tmpVec    =    Math.min(results,    oldX[0]);    	non-compiled	[CE]  cannot  find  symbol  results	120	None	replace
402	[BUG]  [BUGGY]  tmpVec  =  Math.min(results,  oldX[1]);  [CE]  cannot  find  symbol  results  [FE]                    AssertionFailedError      [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  tmpVec  =  Math.min(results,  oldX[1]);  [BUGGY]      cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	tmpVec  =  Math.min(results,  oldX[1]);	  tmpVec    =    Math.min(results,    oldX[0]);    	non-compiled	[CE]  cannot  find  symbol  results	120	None	replace
403	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  double  cols  =  diag[0]  *  point[1];  [BUGGY]      cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	add	double  cols  =  diag[0]  *  point[1];	  double    cols    =    diag[0]    *    point[0];    	compilable	  [FE]  AssertionFailedError  	107	4	replace
404	[BUG]  [BUGGY]  double  cols  =  diag[0]  *  point[1];  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  double  cols  =  diag[0]  *  point[1];  [BUGGY]      cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	double  cols  =  diag[0]  *  point[1];	  double    cols    =    diag[0]    *    point[0];    	compilable	  [FE]  AssertionFailedError  	107	4	replace
405	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  double  cols  =  diag[1]  *  point[0];  [BUGGY]      cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	add	double  cols  =  diag[1]  *  point[0];	  double    cols    =    diag[0]    *    point[0];    	compilable	  [FE]  AssertionFailedError  	107	4	replace
406	[BUG]  [BUGGY]  double  cols  =  diag[1]  *  point[0];  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  double  cols  =  diag[1]  *  point[0];  [BUGGY]      cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	double  cols  =  diag[1]  *  point[0];	  double    cols    =    diag[0]    *    point[0];    	compilable	  [FE]  AssertionFailedError  	107	4	replace
407	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  double  cols  =  oldX[0]  *  point[0];  [BUGGY]      cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	add	double  cols  =  oldX[0]  *  point[0];	  double    cols    =    diag[0]    *    point[0];    	compilable	  [FE]  AssertionFailedError  	107	4	replace
408	[BUG]  [BUGGY]  double  cols  =  oldX[0]  *  point[0];  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  double  cols  =  oldX[0]  *  point[0];  [BUGGY]      cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	double  cols  =  oldX[0]  *  point[0];	  double    cols    =    diag[0]    *    point[0];    	compilable	  [FE]  AssertionFailedError  	107	4	replace
409	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  cost  =  Math.ceil(xNorm);  cost  =  Math.ceil(xNorm);  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	add	cost    =    Math.ceil(xNorm);    cost  =  Math.ceil(xNorm);	  	compilable	  [FE]  AssertionFailedError  	50	2	add
410	[BUG]  [BUGGY]  cost  =  Math.ceil(xNorm);  cost  =  Math.ceil(xNorm);  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  cost  =  Math.ceil(xNorm);  cost  =  Math.ceil(xNorm);  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	cost    =    Math.ceil(xNorm);    cost  =  Math.ceil(xNorm);	  	compilable	  [FE]  AssertionFailedError  	50	2	add
411	[BUG]  [BUGGY]  cost  =  Math.ceil(xNorm);  int  cost  =  Math.ceil(xNorm);  [CE]  possible  loss  of  precision  [FE]      AssertionFailedError    [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  cost  =  Math.ceil(xNorm);  int  cost  =  Math.ceil(xNorm);  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	cost    =    Math.ceil(xNorm);    int  cost  =  Math.ceil(xNorm);	  	non-compiled	[CE]  possible  loss  of  precision	50	None	add
412	[BUG]  [BUGGY]  cost  =  Math.ceil(xNorm);  tmpVec  =  Math.ceil(xNorm);  [CE]  incompatible  types  [FE]        AssertionFailedError    [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  cost  =  Math.ceil(xNorm);  tmpVec  =  Math.ceil(xNorm);  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	cost    =    Math.ceil(xNorm);    tmpVec  =  Math.ceil(xNorm);	  	non-compiled	[CE]  incompatible  types	50	None	add
413	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  cost  =  Math.ceil(xNorm);  double  cost  =  Math.ceil(xNorm);  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	add	cost    =    Math.ceil(xNorm);    double  cost  =  Math.ceil(xNorm);	  	compilable	  [FE]  AssertionFailedError  	50	10	add
414	[BUG]  [BUGGY]  cost  =  Math.ceil(xNorm);  double  cost  =  Math.ceil(xNorm);  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  cost  =  Math.ceil(xNorm);  double  cost  =  Math.ceil(xNorm);  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	cost    =    Math.ceil(xNorm);    double  cost  =  Math.ceil(xNorm);	  	compilable	  [FE]  AssertionFailedError  	50	10	add
415	[BUG]  [BUGGY]  cost  =  Math.ceil(xNorm);  Cost  =  Math.ceil(xNorm);  [CE]  cannot  find  symbol  Cost  [FE]            AssertionFailedError    [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  cost  =  Math.ceil(xNorm);  Cost  =  Math.ceil(xNorm);  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	cost    =    Math.ceil(xNorm);    Cost  =  Math.ceil(xNorm);	  	non-compiled	[CE]  cannot  find  symbol  Cost	50	None	add
416	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  cost  =  Math.sqrt(xNorm);  cost  =  Math.sqrt(xNorm);  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	add	cost    =    Math.sqrt(xNorm);    cost  =  Math.sqrt(xNorm);	  	compilable	  [FE]  AssertionFailedError  	48	2	add
417	[BUG]  [BUGGY]  cost  =  Math.sqrt(xNorm);  cost  =  Math.sqrt(xNorm);  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  cost  =  Math.sqrt(xNorm);  cost  =  Math.sqrt(xNorm);  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	cost    =    Math.sqrt(xNorm);    cost  =  Math.sqrt(xNorm);	  	compilable	  [FE]  AssertionFailedError  	48	2	add
418	[BUG]  [BUGGY]  cost  =  Math.sqrt(xNorm);  int  cost  =  Math.sqrt(xNorm);  [CE]  possible  loss  of  precision  [FE]      AssertionFailedError    [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  cost  =  Math.sqrt(xNorm);  int  cost  =  Math.sqrt(xNorm);  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	cost    =    Math.sqrt(xNorm);    int  cost  =  Math.sqrt(xNorm);	  	non-compiled	[CE]  possible  loss  of  precision	48	None	add
419	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  cost  =  Math.sqrt(xNorm);  double  cost  =  Math.sqrt(xNorm);  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	add	cost    =    Math.sqrt(xNorm);    double  cost  =  Math.sqrt(xNorm);	  	compilable	  [FE]  AssertionFailedError  	48	12	add
420	[BUG]  [BUGGY]  cost  =  Math.sqrt(xNorm);  double  cost  =  Math.sqrt(xNorm);  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  cost  =  Math.sqrt(xNorm);  double  cost  =  Math.sqrt(xNorm);  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	cost    =    Math.sqrt(xNorm);    double  cost  =  Math.sqrt(xNorm);	  	compilable	  [FE]  AssertionFailedError  	48	12	add
421	[BUG]  [BUGGY]  cost  =  Math.sqrt(xNorm);  Cost  =  Math.sqrt(xNorm);  [CE]  cannot  find  symbol  Cost  [FE]          AssertionFailedError    [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  cost  =  Math.sqrt(xNorm);  Cost  =  Math.sqrt(xNorm);  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	cost    =    Math.sqrt(xNorm);    Cost  =  Math.sqrt(xNorm);	  	non-compiled	[CE]  cannot  find  symbol  Cost	48	None	add
422	[BUG]  [BUGGY]  cost  =  Math.sqrt(xNorm);  tmpVec  =  Math.sqrt(xNorm);  [CE]  incompatible  types  [FE]            AssertionFailedError    [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  cost  =  Math.sqrt(xNorm);  tmpVec  =  Math.sqrt(xNorm);  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	cost    =    Math.sqrt(xNorm);    tmpVec  =  Math.sqrt(xNorm);	  	non-compiled	[CE]  incompatible  types	48	None	add
423	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  cost  -=  permutation.length  +  1;  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	add	cost  -=  permutation.length  +  1;	  cost    -=    permutation.length;    	compilable	  [FE]  AssertionFailedError  	122	15	replace
424	[BUG]  [BUGGY]  cost  -=  permutation.length  +  1;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  cost  -=  permutation.length  +  1;  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	cost  -=  permutation.length  +  1;	  cost    -=    permutation.length;    	compilable	  [FE]  AssertionFailedError  	122	15	replace
425	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  cost  -=  permutation.length  -  1;  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	add	cost  -=  permutation.length  -  1;	  cost    -=    permutation.length;    	compilable	  [FE]  AssertionFailedError  	122	15	replace
426	[BUG]  [BUGGY]  cost  -=  permutation.length  -  1;  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  cost  -=  permutation.length  -  1;  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	cost  -=  permutation.length  -  1;	  cost    -=    permutation.length;    	compilable	  [FE]  AssertionFailedError  	122	15	replace
427	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  cost  -=  permutation.length  -  2;  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	add	cost  -=  permutation.length  -  2;	  cost    -=    permutation.length;    	compilable	  [FE]  AssertionFailedError  	122	13	replace
428	[BUG]  [BUGGY]  cost  -=  permutation.length  -  2;  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  cost  -=  permutation.length  -  2;  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	cost  -=  permutation.length  -  2;	  cost    -=    permutation.length;    	compilable	  [FE]  AssertionFailedError  	122	13	replace
429	[BUG]  [BUGGY]  double  cost  =  Math.max(previousCost,  cost);  [CE]  variable  cost  might  not  have  been  initialized  [FE]              AssertionFailedError      [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  double  cost  =  Math.max(previousCost,  cost);  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	double  cost  =  Math.max(previousCost,  cost);	  cost    =    Math.max(cost,    previousCost);    int    cost    =    Math.max(cost,    previousCost);    	non-compiled	[CE]  variable  cost  might  not  have  been  initialized	25	None	replace
430	[BUG]  [BUGGY]  double  cost  =  Math.max(cost,  previousCost);  [CE]  variable  cost  might  not  have  been  initialized  [FE]                AssertionFailedError      [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  double  cost  =  Math.max(cost,  previousCost);  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	double  cost  =  Math.max(cost,  previousCost);	  cost    =    Math.max(cost,    previousCost);    int    cost    =    Math.max(cost,    previousCost);    	non-compiled	[CE]  variable  cost  might  not  have  been  initialized	25	None	replace
431	[BUG]  [BUGGY]  int  cost  =  Math.max(cost,  previousCost);  [CE]  possible  loss  of  precision  [FE]                  AssertionFailedError      [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  int  cost  =  Math.max(cost,  previousCost);  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	int  cost  =  Math.max(cost,  previousCost);	  cost    =    Math.max(cost,    previousCost);    int    cost    =    Math.max(cost,    previousCost);    	non-compiled	[CE]  possible  loss  of  precision	25	None	replace
432	[BUG]  [BUGGY]  int  cost  =  Math.max(previousCost,  cost);  [CE]  possible  loss  of  precision  [FE]                    AssertionFailedError      [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  int  cost  =  Math.max(previousCost,  cost);  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	int  cost  =  Math.max(previousCost,  cost);	  cost    =    Math.max(cost,    previousCost);    int    cost    =    Math.max(cost,    previousCost);    	non-compiled	[CE]  possible  loss  of  precision	25	None	replace
433	[BUG]  [BUGGY]  cost  =  Math.max(oldX,  cost);  [CE]  no  suitable  method  found  for  max(double[],double)  [FE]          AssertionFailedError      [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  cost  =  Math.max(oldX,  cost);  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	cost  =  Math.max(oldX,  cost);	  cost    =    Math.max(cost,    oldX);    	non-compiled	[CE]  no  suitable  method  found  for  max(double[],double)	128	None	replace
434	[BUG]  [BUGGY]  cost  =  Math.max(result,  xNorm,  oldX);  [CE]  cannot  find  symbol  result  [FE]            AssertionFailedError      [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  cost  =  Math.max(result,  xNorm,  oldX);  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	cost  =  Math.max(result,  xNorm,  oldX);	  cost    =    Math.max(cost,    oldX);    	non-compiled	[CE]  cannot  find  symbol  result	128	None	replace
435	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  cost  -=  xNorm;  cost  -=  xNorm;  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	add	cost    -=    xNorm;    cost  -=  xNorm;	  	compilable	  [FE]  AssertionFailedError  	63	2	add
436	[BUG]  [BUGGY]  cost  -=  xNorm;  cost  -=  xNorm;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  cost  -=  xNorm;  cost  -=  xNorm;  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	cost    -=    xNorm;    cost  -=  xNorm;	  	compilable	  [FE]  AssertionFailedError  	63	2	add
437	[BUG]  [BUGGY]  cost  -=  xNorm;  int  cost  -=  xNorm;  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  cost  -=  xNorm;  int  cost  -=  xNorm;  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	cost    -=    xNorm;    int  cost  -=  xNorm;	  	non-compiled	[CE]  ';'  expected	63	None	add
438	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  cost  -=  xNorm;  xNorm  -=  xNorm;  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	add	cost    -=    xNorm;    xNorm  -=  xNorm;	  	compilable	  [FE]  AssertionFailedError  	63	2	add
439	[BUG]  [BUGGY]  cost  -=  xNorm;  xNorm  -=  xNorm;  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  cost  -=  xNorm;  xNorm  -=  xNorm;  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	cost    -=    xNorm;    xNorm  -=  xNorm;	  	compilable	  [FE]  AssertionFailedError  	63	2	add
440	[BUG]  [BUGGY]  cost  -=  xNorm;  double  cost  -=  xNorm;  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  cost  -=  xNorm;  double  cost  -=  xNorm;  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	cost    -=    xNorm;    double  cost  -=  xNorm;	  	non-compiled	[CE]  ';'  expected	63	None	add
441	[BUG]  [BUGGY]  cost  -=  xNorm;  -=  xNorm;  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  cost  -=  xNorm;  -=  xNorm;  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	cost    -=    xNorm;    -=  xNorm;	  	non-compiled	[CE]  illegal  start  of  expression	63	None	add
442	[BUG]  [BUGGY]  Integer  solvedCols  =  Math.min(resolvedCols,  1);  [CE]  cannot  find  symbol  resolvedCols  [FE]            AssertionFailedError      [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  Integer  solvedCols  =  Math.min(resolvedCols,  1);  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	Integer  solvedCols  =  Math.min(resolvedCols,  1);	          Integer    solvedCols    =    Math.min(resolvedCols,    0);    	non-compiled	[CE]  cannot  find  symbol  resolvedCols	96	None	replace
443	[BUG]  [BUGGY]  Integer  solvedCols  =  Math.min(resolvedCols,  0,  cols);  [CE]  cannot  find  symbol  resolvedCols  [FE]              AssertionFailedError      [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  Integer  solvedCols  =  Math.min(resolvedCols,  0,  cols);  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	Integer  solvedCols  =  Math.min(resolvedCols,  0,  cols);	          Integer    solvedCols    =    Math.min(resolvedCols,    0);    	non-compiled	[CE]  cannot  find  symbol  resolvedCols	96	None	replace
444	[BUG]  [BUGGY]  Integer  solvedCols  =  Math.min(xNorm,  0);  [CE]  incompatible  types  [FE]                AssertionFailedError      [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  Integer  solvedCols  =  Math.min(xNorm,  0);  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	Integer  solvedCols  =  Math.min(xNorm,  0);	          Integer    solvedCols    =    Math.min(resolvedCols,    0);    	non-compiled	[CE]  incompatible  types	96	None	replace
445	[BUG]  [BUGGY]  cost  =  Math.max(tmpVec,  xNorm);  [CE]  no  suitable  method  found  for  max(double[],double)  [FE]        AssertionFailedError      [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  cost  =  Math.max(tmpVec,  xNorm);  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	cost  =  Math.max(tmpVec,  xNorm);	  cost    =    Math.max(remainder,    xNorm);    	non-compiled	[CE]  no  suitable  method  found  for  max(double[],double)	129	None	replace
446	[BUG]  [BUGGY]  cost  =  Math.max(xNorm,  residuals);  [CE]  no  suitable  method  found  for  max(double,double[])  [FE]          AssertionFailedError      [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  cost  =  Math.max(xNorm,  residuals);  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	cost  =  Math.max(xNorm,  residuals);	  cost    =    Math.max(remainder,    xNorm);    	non-compiled	[CE]  no  suitable  method  found  for  max(double,double[])	129	None	replace
447	[BUG]  [BUGGY]  int  solvedCols  =  oldX.length;  int  solvedCols  =  oldX.length;  [CE]  variable  solvedCols  is  already  defined  in  method  doOptimize()  [FE]    AssertionFailedError    [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  int  solvedCols  =  oldX.length;  int  solvedCols  =  oldX.length;  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	int    solvedCols    =    oldX.length;    int  solvedCols  =  oldX.length;	  	non-compiled	[CE]  variable  solvedCols  is  already  defined  in  method  doOptimize()	73	None	add
448	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  int  solvedCols  =  oldX.length;  int  resolvedCols  =  oldX.length;  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	add	int    solvedCols    =    oldX.length;    int  resolvedCols  =  oldX.length;	  	compilable	  [FE]  AssertionFailedError  	73	2	add
449	[BUG]  [BUGGY]  int  solvedCols  =  oldX.length;  int  resolvedCols  =  oldX.length;  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  int  solvedCols  =  oldX.length;  int  resolvedCols  =  oldX.length;  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	int    solvedCols    =    oldX.length;    int  resolvedCols  =  oldX.length;	  	compilable	  [FE]  AssertionFailedError  	73	2	add
450	[BUG]  [BUGGY]  int  solvedCols  =  oldX.length;  Int  solvedCols  =  oldX.length;  [CE]  cannot  find  symbol  [FE]        AssertionFailedError    [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  int  solvedCols  =  oldX.length;  Int  solvedCols  =  oldX.length;  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	int    solvedCols    =    oldX.length;    Int  solvedCols  =  oldX.length;	  	non-compiled	[CE]  cannot  find  symbol	73	None	add
451	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  int  solvedCols  =  oldX.length;  int  solves  =  oldX.length;  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	add	int    solvedCols    =    oldX.length;    int  solves  =  oldX.length;	  	compilable	  [FE]  AssertionFailedError  	73	2	add
452	[BUG]  [BUGGY]  int  solvedCols  =  oldX.length;  int  solves  =  oldX.length;  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  int  solvedCols  =  oldX.length;  int  solves  =  oldX.length;  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	int    solvedCols    =    oldX.length;    int  solves  =  oldX.length;	  	compilable	  [FE]  AssertionFailedError  	73	2	add
453	[BUG]  [BUGGY]  double  previousCost  =  Math.max(previousCost,  cost);  [CE]  variable  previousCost  is  already  defined  in  method  doOptimize()  [FE]        AssertionFailedError      [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  double  previousCost  =  Math.max(previousCost,  cost);  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	double  previousCost  =  Math.max(previousCost,  cost);	  cost    =    Math.max(cost,    previousCost);    double    previousCost    =    Math.max(cost,    previousCost);    	non-compiled	[CE]  variable  previousCost  is  already  defined  in  method  doOptimize()	130	None	replace
454	[BUG]  [BUGGY]  double  previousCost  =  Math.max(cost,  xNorm);  [CE]  variable  previousCost  is  already  defined  in  method  doOptimize()  [FE]          AssertionFailedError      [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  double  previousCost  =  Math.max(cost,  xNorm);  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	double  previousCost  =  Math.max(cost,  xNorm);	  cost    =    Math.max(cost,    previousCost);    double    previousCost    =    Math.max(cost,    previousCost);    	non-compiled	[CE]  variable  previousCost  is  already  defined  in  method  doOptimize()	130	None	replace
455	[BUG]  [BUGGY]  double  previousCost  =  Math.max(cost,  preRed);  [CE]  variable  previousCost  is  already  defined  in  method  doOptimize()  [FE]            AssertionFailedError      [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  double  previousCost  =  Math.max(cost,  preRed);  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	double  previousCost  =  Math.max(cost,  preRed);	  cost    =    Math.max(cost,    previousCost);    double    previousCost    =    Math.max(cost,    previousCost);    	non-compiled	[CE]  variable  previousCost  is  already  defined  in  method  doOptimize()	130	None	replace
456	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  cost  -=  solvedCols;  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	add	cost  -=  solvedCols;	  cost    -=    cols;    	compilable	  [FE]  AssertionFailedError  	62	15	replace
457	[BUG]  [BUGGY]  cost  -=  solvedCols;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  cost  -=  solvedCols;  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	cost  -=  solvedCols;	  cost    -=    cols;    	compilable	  [FE]  AssertionFailedError  	62	15	replace
458	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  cost  -=  1;  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	add	cost  -=  1;	  cost    -=    cols;    	compilable	  [FE]  AssertionFailedError  	62	15	replace
459	[BUG]  [BUGGY]  cost  -=  1;  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  cost  -=  1;  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	cost  -=  1;	  cost    -=    cols;    	compilable	  [FE]  AssertionFailedError  	62	15	replace
460	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  cost  -=  Math.ceil(xNorm);  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	add	cost  -=  Math.ceil(xNorm);	  cost    -=    Math.ceil(previousCost);    	compilable	  [FE]  AssertionFailedError  	145	15	replace
461	[BUG]  [BUGGY]  cost  -=  Math.ceil(xNorm);  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  cost  -=  Math.ceil(xNorm);  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	cost  -=  Math.ceil(xNorm);	  cost    -=    Math.ceil(previousCost);    	compilable	  [FE]  AssertionFailedError  	145	15	replace
462	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  preRed  -=  Math.ceil(previousCost);  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	add	preRed  -=  Math.ceil(previousCost);	  cost    -=    Math.ceil(previousCost);    	compilable	  [FE]  AssertionFailedError  	145	6	replace
463	[BUG]  [BUGGY]  preRed  -=  Math.ceil(previousCost);  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  preRed  -=  Math.ceil(previousCost);  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	preRed  -=  Math.ceil(previousCost);	  cost    -=    Math.ceil(previousCost);    	compilable	  [FE]  AssertionFailedError  	145	6	replace
464	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  cost  -=  Math.ceil(previousCost  +  1);  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	add	cost  -=  Math.ceil(previousCost  +  1);	  cost    -=    Math.ceil(previousCost);    	compilable	  [FE]  AssertionFailedError  	145	14	replace
465	[BUG]  [BUGGY]  cost  -=  Math.ceil(previousCost  +  1);  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  cost  -=  Math.ceil(previousCost  +  1);  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	cost  -=  Math.ceil(previousCost  +  1);	  cost    -=    Math.ceil(previousCost);    	compilable	  [FE]  AssertionFailedError  	145	14	replace
466	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  cost  -=  Math.ceil(previousCost  -  1);  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	add	cost  -=  Math.ceil(previousCost  -  1);	  cost    -=    Math.ceil(previousCost);    	compilable	  [FE]  AssertionFailedError  	145	12	replace
467	[BUG]  [BUGGY]  cost  -=  Math.ceil(previousCost  -  1);  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  cost  -=  Math.ceil(previousCost  -  1);  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	cost  -=  Math.ceil(previousCost  -  1);	  cost    -=    Math.ceil(previousCost);    	compilable	  [FE]  AssertionFailedError  	145	12	replace
468	[BUG]  [BUGGY]  tmpVec  =  Math.sqrt(previousCost,  cols,  xNorm);  [CE]  method  sqrt  in  class  Math  cannot  be  applied  to  given  types;  [FE]                  AssertionFailedError      [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  tmpVec  =  Math.sqrt(previousCost,  cols,  xNorm);  [BUGGY]      cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	tmpVec  =  Math.sqrt(previousCost,  cols,  xNorm);	  tmpVec    =    Math.sqrt(cols,    xNorm);    	non-compiled	[CE]  method  sqrt  in  class  Math  cannot  be  applied  to  given  types;	32	None	replace
469	[BUG]  [BUGGY]  tmpVec  =  Math.sqrt(remainings,  xNorm);  [CE]  cannot  find  symbol  remainings  [FE]                    AssertionFailedError      [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  tmpVec  =  Math.sqrt(remainings,  xNorm);  [BUGGY]      cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	tmpVec  =  Math.sqrt(remainings,  xNorm);	  tmpVec    =    Math.sqrt(cols,    xNorm);    	non-compiled	[CE]  cannot  find  symbol  remainings	32	None	replace
470	[BUG]  [BUGGY]  tmpVec  =  Math.sqrt(result,  cols,  xNorm);  [CE]  cannot  find  symbol  result  [FE]                      AssertionFailedError      [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  tmpVec  =  Math.sqrt(result,  cols,  xNorm);  [BUGGY]      cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	tmpVec  =  Math.sqrt(result,  cols,  xNorm);	  tmpVec    =    Math.sqrt(cols,    xNorm);    	non-compiled	[CE]  cannot  find  symbol  result	32	None	replace
471	[BUG]  [BUGGY]  tmpVec  =  Math.sqrt(xNorm,  cols);  [CE]  method  sqrt  in  class  Math  cannot  be  applied  to  given  types;  [FE]                        AssertionFailedError      [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  tmpVec  =  Math.sqrt(xNorm,  cols);  [BUGGY]      cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	tmpVec  =  Math.sqrt(xNorm,  cols);	  tmpVec    =    Math.sqrt(cols,    xNorm);    	non-compiled	[CE]  method  sqrt  in  class  Math  cannot  be  applied  to  given  types;	32	None	replace
472	[BUG]  [BUGGY]  double  cols  =  oldX[k]  *  point[k];  [CE]  cannot  find  symbol  k  [FE]            AssertionFailedError      [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  double  cols  =  oldX[k]  *  point[k];  [BUGGY]      cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	double  cols  =  oldX[k]  *  point[k];	  double    cols    =    diagnostic[k]    *    point[k];    	non-compiled	[CE]  cannot  find  symbol  k	159	None	replace
473	[BUG]  [BUGGY]  double  cols  =  point[k]  *  diagnostic[k];  [CE]  cannot  find  symbol  k  [FE]              AssertionFailedError      [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  double  cols  =  point[k]  *  diagnostic[k];  [BUGGY]      cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	double  cols  =  point[k]  *  diagnostic[k];	  double    cols    =    diagnostic[k]    *    point[k];    	non-compiled	[CE]  cannot  find  symbol  k	159	None	replace
474	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError      [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  double  cost  =  xNorm;  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	add	double  cost  =  xNorm;	  cost    =    xNorm;    int    cost    =    xNorm;    	compilable	  [FE]  AssertionFailedError  	42	4	replace
475	[BUG]  [BUGGY]  double  cost  =  xNorm;  [FE]  AssertionFailedError  [FE]          AssertionFailedError      [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  double  cost  =  xNorm;  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	double  cost  =  xNorm;	  cost    =    xNorm;    int    cost    =    xNorm;    	compilable	  [FE]  AssertionFailedError  	42	4	replace
476	[BUG]  [BUGGY]  int  cost  =  xNorm;  [CE]  possible  loss  of  precision  [FE]            AssertionFailedError      [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  int  cost  =  xNorm;  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	int  cost  =  xNorm;	  cost    =    xNorm;    int    cost    =    xNorm;    	non-compiled	[CE]  possible  loss  of  precision	42	None	replace
477	[BUG]  [BUGGY]  long  cost  =  xNorm;  [CE]  possible  loss  of  precision  [FE]              AssertionFailedError      [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  long  cost  =  xNorm;  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	long  cost  =  xNorm;	  cost    =    xNorm;    int    cost    =    xNorm;    	non-compiled	[CE]  possible  loss  of  precision	42	None	replace
478	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                AssertionFailedError      [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  Double  cost  =  xNorm;  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	add	Double  cost  =  xNorm;	  cost    =    xNorm;    int    cost    =    xNorm;    	compilable	  [FE]  AssertionFailedError  	42	4	replace
479	[BUG]  [BUGGY]  Double  cost  =  xNorm;  [FE]  AssertionFailedError  [FE]                AssertionFailedError      [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  Double  cost  =  xNorm;  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	Double  cost  =  xNorm;	  cost    =    xNorm;    int    cost    =    xNorm;    	compilable	  [FE]  AssertionFailedError  	42	4	replace
480	[BUG]  [BUGGY]  tmpVec  =  Math.min(results,  xNorm);  [CE]  cannot  find  symbol  results  [FE]                      AssertionFailedError      [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  tmpVec  =  Math.min(results,  xNorm);  [BUGGY]      cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	tmpVec  =  Math.min(results,  xNorm);	  tmpVec    =    Math.min(remainders,    xNorm);    	non-compiled	[CE]  cannot  find  symbol  results	99	None	replace
481	[BUG]  [BUGGY]  tmpVec  =  Math.min(remainders,  xNorm,  cols);  [CE]  cannot  find  symbol  remainders  [FE]                        AssertionFailedError      [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  tmpVec  =  Math.min(remainders,  xNorm,  cols);  [BUGGY]      cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	tmpVec  =  Math.min(remainders,  xNorm,  cols);	  tmpVec    =    Math.min(remainders,    xNorm);    	non-compiled	[CE]  cannot  find  symbol  remainders	99	None	replace
482	[BUG]  [BUGGY]  tmpVec  =  Math.min(resid,  xNorm);  [CE]  cannot  find  symbol  resid  [FE]                          AssertionFailedError      [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  tmpVec  =  Math.min(resid,  xNorm);  [BUGGY]      cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	tmpVec  =  Math.min(resid,  xNorm);	  tmpVec    =    Math.min(remainders,    xNorm);    	non-compiled	[CE]  cannot  find  symbol  resid	99	None	replace
483	[BUG]  [BUGGY]  if(previousCost!=  xNorm)  {  cost  -=  previousCost;  -=  previousCost;  }  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  if(previousCost!=  xNorm)  {  cost  -=  previousCost;  -=  previousCost;  }  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	if(previousCost!=  xNorm)  {  cost  -=  previousCost;  -=  previousCost;  }	  cost    -=    previousCost;    -=    previousCost;    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
484	[BUG]  [BUGGY]  if(previousCost!=  null)  {  cost  -=  previousCost;  -=  previousCost;  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  if(previousCost!=  null)  {  cost  -=  previousCost;  -=  previousCost;  }  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	if(previousCost!=  null)  {  cost  -=  previousCost;  -=  previousCost;  }	  cost    -=    previousCost;    -=    previousCost;    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
485	[BUG]  [BUGGY]  -=  previousCost;  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  -=  previousCost;  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	-=  previousCost;	  cost    -=    previousCost;    -=    previousCost;    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
486	[BUG]  [BUGGY]  if(previousCost!=  xNorm)  {  cost  -=  previousCost;  -=  previousCost;  }  else  {  System.arraycopy(previousCost,  0,  oldX,  oldX,  oldY);  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  if(previousCost!=  xNorm)  {  cost  -=  previousCost;  -=  previousCost;  }  else  {  System.arraycopy(previousCost,  0,  oldX,  oldX,  oldY);  }  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	if(previousCost!=  xNorm)  {  cost  -=  previousCost;  -=  previousCost;  }  else  {  System.arraycopy(previousCost,  0,  oldX,  oldX,  oldY);  }	  cost    -=    previousCost;    -=    previousCost;    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
487	[BUG]  [BUGGY]  solvedCols  =  Math.min(results.length,  cols.length);  [CE]  cannot  find  symbol  results  [FE]        AssertionFailedError      [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  solvedCols  =  Math.min(results.length,  cols.length);  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	solvedCols  =  Math.min(results.length,  cols.length);	          solvedCols    =    Math.min(results.length,    oldX.length);    	non-compiled	[CE]  cannot  find  symbol  results	77	None	replace
488	[BUG]  [BUGGY]  solvedCols  =  Math.min(results.length,  oldX.length  -  1);  [CE]  cannot  find  symbol  results  [FE]          AssertionFailedError      [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  solvedCols  =  Math.min(results.length,  oldX.length  -  1);  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	solvedCols  =  Math.min(results.length,  oldX.length  -  1);	          solvedCols    =    Math.min(results.length,    oldX.length);    	non-compiled	[CE]  cannot  find  symbol  results	77	None	replace
489	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError      [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  solvedCols  =  Math.min(lmDir.length,  oldX.length);  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	add	solvedCols  =  Math.min(lmDir.length,  oldX.length);	          solvedCols    =    Math.min(results.length,    oldX.length);    	compilable	  [FE]  AssertionFailedError  	77	4	replace
490	[BUG]  [BUGGY]  solvedCols  =  Math.min(lmDir.length,  oldX.length);  [FE]  AssertionFailedError  [FE]            AssertionFailedError      [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  solvedCols  =  Math.min(lmDir.length,  oldX.length);  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	solvedCols  =  Math.min(lmDir.length,  oldX.length);	          solvedCols    =    Math.min(results.length,    oldX.length);    	compilable	  [FE]  AssertionFailedError  	77	4	replace
491	[BUG]  [BUGGY]  tmpVec  =  Math.sqrt(results);  [CE]  cannot  find  symbol  results  [FE]                AssertionFailedError      [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  tmpVec  =  Math.sqrt(results);  [BUGGY]      cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	tmpVec  =  Math.sqrt(results);	  tmpVec    =    Math.sqrt(remainings);    	non-compiled	[CE]  cannot  find  symbol  results	31	None	replace
492	[BUG]  [BUGGY]  tmpVec  =  Math.min(result,  previousCost,  xNorm,  cols);  [CE]  cannot  find  symbol  result  [FE]                      AssertionFailedError      [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  tmpVec  =  Math.min(result,  previousCost,  xNorm,  cols);  [BUGGY]      cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	tmpVec  =  Math.min(result,  previousCost,  xNorm,  cols);	  tmpVec    =    Math.min(previousCost,    xNorm,    cols);    	non-compiled	[CE]  cannot  find  symbol  result	56	None	replace
493	[BUG]  [BUGGY]  tmpVec  =  Math.min(lastIteration,  previousCost,  xNorm,  cols);  [CE]  cannot  find  symbol  lastIteration  [FE]                        AssertionFailedError      [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  tmpVec  =  Math.min(lastIteration,  previousCost,  xNorm,  cols);  [BUGGY]      cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	tmpVec  =  Math.min(lastIteration,  previousCost,  xNorm,  cols);	  tmpVec    =    Math.min(previousCost,    xNorm,    cols);    	non-compiled	[CE]  cannot  find  symbol  lastIteration	56	None	replace
494	[BUG]  [BUGGY]  tmpVec  =  Math.min(previousCost,  previousCost,  xNorm,  cols);  [CE]  no  suitable  method  found  for  min(double,double,double,int)  [FE]                          AssertionFailedError      [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  tmpVec  =  Math.min(previousCost,  previousCost,  xNorm,  cols);  [BUGGY]      cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	tmpVec  =  Math.min(previousCost,  previousCost,  xNorm,  cols);	  tmpVec    =    Math.min(previousCost,    xNorm,    cols);    	non-compiled	[CE]  no  suitable  method  found  for  min(double,double,double,int)	56	None	replace
495	[BUG]  [BUGGY]  tmpVec  =  Math.min(remainingCost,  previousCost,  xNorm,  cols);  [CE]  cannot  find  symbol  remainingCost  [FE]                            AssertionFailedError      [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  tmpVec  =  Math.min(remainingCost,  previousCost,  xNorm,  cols);  [BUGGY]      cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	tmpVec  =  Math.min(remainingCost,  previousCost,  xNorm,  cols);	  tmpVec    =    Math.min(previousCost,    xNorm,    cols);    	non-compiled	[CE]  cannot  find  symbol  remainingCost	56	None	replace
496	[BUG]  [BUGGY]  Preconditions.checkState(oldX  <  =  0);  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  Preconditions.checkState(oldX  <  =  0);  [BUGGY]      cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	Preconditions.checkState(oldX  <  =  0);	  Preconditions.checkState(oldX    <    0);    	non-compiled	[CE]  illegal  start  of  expression	150	None	replace
497	[BUG]  [BUGGY]  cost    =    xNorm;    double  cost  =  xNorm;  double  cost  =  xNorm;  double  cost  =  xNorm;  [CE]  variable  cost  is  already  defined  in  method  doOptimize()  [FE]    AssertionFailedError    [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  cost    =    xNorm;    double  cost  =  xNorm;  double  cost  =  xNorm;  double  cost  =  xNorm;  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	cost        =        xNorm;        double    cost    =    xNorm;    double  cost  =  xNorm;  double  cost  =  xNorm;	  	non-compiled	[CE]  variable  cost  is  already  defined  in  method  doOptimize()	43	None	add
498	[BUG]  [BUGGY]  cost    =    xNorm;    double  cost  =  xNorm;  cost  =  xNorm;  double  cost  =  xNorm;  [CE]  variable  cost  is  already  defined  in  method  doOptimize()  [FE]      AssertionFailedError    [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  cost    =    xNorm;    double  cost  =  xNorm;  cost  =  xNorm;  double  cost  =  xNorm;  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	cost        =        xNorm;        double    cost    =    xNorm;    cost  =  xNorm;  double  cost  =  xNorm;	  	non-compiled	[CE]  variable  cost  is  already  defined  in  method  doOptimize()	43	None	add
499	[BUG]  [BUGGY]  cost    =    xNorm;    double  cost  =  xNorm;  Double  cost  =  xNorm;  double  cost  =  xNorm;  [CE]  variable  cost  is  already  defined  in  method  doOptimize()  [FE]        AssertionFailedError    [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  cost    =    xNorm;    double  cost  =  xNorm;  Double  cost  =  xNorm;  double  cost  =  xNorm;  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	cost        =        xNorm;        double    cost    =    xNorm;    Double  cost  =  xNorm;  double  cost  =  xNorm;	  	non-compiled	[CE]  variable  cost  is  already  defined  in  method  doOptimize()	43	None	add
500	[BUG]  [BUGGY]  cost    =    xNorm;    double  cost  =  xNorm;  double  cost  =  xNorm;  Double  cost  =  xNorm;  [CE]  variable  cost  is  already  defined  in  method  doOptimize()  [FE]          AssertionFailedError    [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  cost    =    xNorm;    double  cost  =  xNorm;  double  cost  =  xNorm;  Double  cost  =  xNorm;  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	cost        =        xNorm;        double    cost    =    xNorm;    double  cost  =  xNorm;  Double  cost  =  xNorm;	  	non-compiled	[CE]  variable  cost  is  already  defined  in  method  doOptimize()	43	None	add
501	[BUG]  [BUGGY]  cost    =    xNorm;    double  cost  =  xNorm;  int  cols  =  Math.min(cols,  cols);  [CE]  variable  cols  might  not  have  been  initialized  [FE]            AssertionFailedError    [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  cost    =    xNorm;    double  cost  =  xNorm;  int  cols  =  Math.min(cols,  cols);  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	cost        =        xNorm;        double    cost    =    xNorm;    int  cols  =  Math.min(cols,  cols);	  	non-compiled	[CE]  variable  cols  might  not  have  been  initialized	43	None	add
502	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  cost  =  Math.max(previousCost,  cost);  cost  =  Math.max(previousCost,  cost);  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	add	cost    =    Math.max(previousCost,    cost);    cost  =  Math.max(previousCost,  cost);	  	compilable	  [FE]  AssertionFailedError  	15	2	add
503	[BUG]  [BUGGY]  cost  =  Math.max(previousCost,  cost);  cost  =  Math.max(previousCost,  cost);  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  cost  =  Math.max(previousCost,  cost);  cost  =  Math.max(previousCost,  cost);  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	cost    =    Math.max(previousCost,    cost);    cost  =  Math.max(previousCost,  cost);	  	compilable	  [FE]  AssertionFailedError  	15	2	add
504	[BUG]  [BUGGY]  cost  =  Math.max(previousCost,  cost);  int  previousCost  =  Math.max(previousCost,  cost);  [CE]  variable  previousCost  is  already  defined  in  method  doOptimize()  [FE]      AssertionFailedError    [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  cost  =  Math.max(previousCost,  cost);  int  previousCost  =  Math.max(previousCost,  cost);  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	cost    =    Math.max(previousCost,    cost);    int  previousCost  =  Math.max(previousCost,  cost);	  	non-compiled	[CE]  variable  previousCost  is  already  defined  in  method  doOptimize()	15	None	add
505	[BUG]  [BUGGY]  cost  =  Math.max(previousCost,  cost);  Cost  =  Math.max(previousCost,  cost);  [CE]  cannot  find  symbol  Cost  [FE]        AssertionFailedError    [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  cost  =  Math.max(previousCost,  cost);  Cost  =  Math.max(previousCost,  cost);  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	cost    =    Math.max(previousCost,    cost);    Cost  =  Math.max(previousCost,  cost);	  	non-compiled	[CE]  cannot  find  symbol  Cost	15	None	add
506	[BUG]  [BUGGY]  cost  =  Math.max(previousCost,  cost);  int  cost  =  Math.max(previousCost,  cost);  [CE]  possible  loss  of  precision  [FE]          AssertionFailedError    [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  cost  =  Math.max(previousCost,  cost);  int  cost  =  Math.max(previousCost,  cost);  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	cost    =    Math.max(previousCost,    cost);    int  cost  =  Math.max(previousCost,  cost);	  	non-compiled	[CE]  possible  loss  of  precision	15	None	add
507	[BUG]  [BUGGY]  cost  =  Math.max(previousCost,  cost);  double  cost  =  Math.max(previousCost,  cost);  [CE]  variable  cost  might  not  have  been  initialized  [FE]            AssertionFailedError    [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  cost  =  Math.max(previousCost,  cost);  double  cost  =  Math.max(previousCost,  cost);  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	cost    =    Math.max(previousCost,    cost);    double  cost  =  Math.max(previousCost,  cost);	  	non-compiled	[CE]  variable  cost  might  not  have  been  initialized	15	None	add
508	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  cost  -=  preRed  +  1;  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	add	cost  -=  preRed  +  1;	  cost    -=    preRed;    	compilable	  [FE]  AssertionFailedError  	66	15	replace
509	[BUG]  [BUGGY]  cost  -=  preRed  +  1;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  cost  -=  preRed  +  1;  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	cost  -=  preRed  +  1;	  cost    -=    preRed;    	compilable	  [FE]  AssertionFailedError  	66	15	replace
510	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  preRed  -=  xNorm;  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	add	preRed  -=  xNorm;	  cost    -=    preRed;    	compilable	  [FE]  AssertionFailedError  	66	6	replace
511	[BUG]  [BUGGY]  preRed  -=  xNorm;  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  preRed  -=  xNorm;  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	preRed  -=  xNorm;	  cost    -=    preRed;    	compilable	  [FE]  AssertionFailedError  	66	6	replace
512	[BUG]  [BUGGY]  double  cols  =  diag[k]  *  point[k]  +  2;  [CE]  cannot  find  symbol  k  [FE]            AssertionFailedError      [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  double  cols  =  diag[k]  *  point[k]  +  2;  [BUGGY]      cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	double  cols  =  diag[k]  *  point[k]  +  2;	  double    cols    =    diag[k]    *    point[k]    +    1;    	non-compiled	[CE]  cannot  find  symbol  k	27	None	replace
513	[BUG]  [BUGGY]  double  cols  =  diag[k]  *  point[k]  +  3;  [CE]  cannot  find  symbol  k  [FE]              AssertionFailedError      [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  double  cols  =  diag[k]  *  point[k]  +  3;  [BUGGY]      cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	double  cols  =  diag[k]  *  point[k]  +  3;	  double    cols    =    diag[k]    *    point[k]    +    1;    	non-compiled	[CE]  cannot  find  symbol  k	27	None	replace
514	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  int  solvedCols  =  oldX.length  -  1;  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	add	int  solvedCols  =  oldX.length  -  1;	  int    solvedCols    =    oldX.length;    	compilable	  [FE]  AssertionFailedError  	74	12	replace
515	[BUG]  [BUGGY]  int  solvedCols  =  oldX.length  -  1;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  int  solvedCols  =  oldX.length  -  1;  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	int  solvedCols  =  oldX.length  -  1;	  int    solvedCols    =    oldX.length;    	compilable	  [FE]  AssertionFailedError  	74	12	replace
516	[BUG]  [BUGGY]  int  solvedCols  =  cols.length;  [CE]  int  cannot  be  dereferenced  [FE]      AssertionFailedError    [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  int  solvedCols  =  cols.length;  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	int  solvedCols  =  cols.length;	  int    solvedCols    =    oldX.length;    	non-compiled	[CE]  int  cannot  be  dereferenced	74	None	replace
517	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  int  solvedCols  =  oldX.length  -  cols;  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	add	int  solvedCols  =  oldX.length  -  cols;	  int    solvedCols    =    oldX.length;    	compilable	  [FE]  AssertionFailedError  	74	11	replace
518	[BUG]  [BUGGY]  int  solvedCols  =  oldX.length  -  cols;  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  int  solvedCols  =  oldX.length  -  cols;  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	int  solvedCols  =  oldX.length  -  cols;	  int    solvedCols    =    oldX.length;    	compilable	  [FE]  AssertionFailedError  	74	11	replace
519	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  int  solvedCols  =  oldX.length  -  2;  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	add	int  solvedCols  =  oldX.length  -  2;	  int    solvedCols    =    oldX.length;    	compilable	  [FE]  AssertionFailedError  	74	11	replace
520	[BUG]  [BUGGY]  int  solvedCols  =  oldX.length  -  2;  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  int  solvedCols  =  oldX.length  -  2;  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	int  solvedCols  =  oldX.length  -  2;	  int    solvedCols    =    oldX.length;    	compilable	  [FE]  AssertionFailedError  	74	11	replace
521	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  double  cost  =  Math.abs(xNorm);  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	add	double  cost  =  Math.abs(xNorm);	  cost    =    xNorm;    double    cost    =    xNorm;    	compilable	  [FE]  AssertionFailedError  	44	4	replace
522	[BUG]  [BUGGY]  double  cost  =  Math.abs(xNorm);  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  double  cost  =  Math.abs(xNorm);  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	double  cost  =  Math.abs(xNorm);	  cost    =    xNorm;    double    cost    =    xNorm;    	compilable	  [FE]  AssertionFailedError  	44	4	replace
523	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  double  cost  =  xNorm  +  1;  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	add	double  cost  =  xNorm  +  1;	  cost    =    xNorm;    double    cost    =    xNorm;    	compilable	  [FE]  AssertionFailedError  	44	4	replace
524	[BUG]  [BUGGY]  double  cost  =  xNorm  +  1;  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  double  cost  =  xNorm  +  1;  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	double  cost  =  xNorm  +  1;	  cost    =    xNorm;    double    cost    =    xNorm;    	compilable	  [FE]  AssertionFailedError  	44	4	replace
525	[BUG]  [BUGGY]  Integer  cost  =  Math.max(previousCost,  xNorm);  [CE]  incompatible  types  [FE]                AssertionFailedError      [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  Integer  cost  =  Math.max(previousCost,  xNorm);  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	Integer  cost  =  Math.max(previousCost,  xNorm);	  cost    =    Math.max(previousCost,    xNorm);    Integer    cost    =    Math.max(previousCost,    xNorm);    	non-compiled	[CE]  incompatible  types	39	None	replace
526	[BUG]  [BUGGY]  Integer  cost  =  Math.min(previousCost,  xNorm);  [CE]  incompatible  types  [FE]                  AssertionFailedError      [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  Integer  cost  =  Math.min(previousCost,  xNorm);  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	Integer  cost  =  Math.min(previousCost,  xNorm);	  cost    =    Math.max(previousCost,    xNorm);    Integer    cost    =    Math.max(previousCost,    xNorm);    	non-compiled	[CE]  incompatible  types	39	None	replace
527	[BUG]  [BUGGY]  Integer  cost  =  Math.max(previousCost,  xNorm,  cols);  [CE]  no  suitable  method  found  for  max(double,double,int)  [FE]                    AssertionFailedError      [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  Integer  cost  =  Math.max(previousCost,  xNorm,  cols);  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	Integer  cost  =  Math.max(previousCost,  xNorm,  cols);	  cost    =    Math.max(previousCost,    xNorm);    Integer    cost    =    Math.max(previousCost,    xNorm);    	non-compiled	[CE]  no  suitable  method  found  for  max(double,double,int)	39	None	replace
528	[BUG]  [BUGGY]  int  previousCost  =  Math.max(xNorm,  previousCost);  [CE]  variable  previousCost  is  already  defined  in  method  doOptimize()  [FE]              AssertionFailedError      [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  int  previousCost  =  Math.max(xNorm,  previousCost);  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	int  previousCost  =  Math.max(xNorm,  previousCost);	  cost    =    Math.max(previousCost,    xNorm);    int    previousCost    =    Math.max(previousCost,    xNorm);    	non-compiled	[CE]  variable  previousCost  is  already  defined  in  method  doOptimize()	38	None	replace
529	[BUG]  [BUGGY]  int  previousCost  =  Math.max(remainingCost,  xNorm);  [CE]  variable  previousCost  is  already  defined  in  method  doOptimize()  [FE]                AssertionFailedError      [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  int  previousCost  =  Math.max(remainingCost,  xNorm);  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	int  previousCost  =  Math.max(remainingCost,  xNorm);	  cost    =    Math.max(previousCost,    xNorm);    int    previousCost    =    Math.max(previousCost,    xNorm);    	non-compiled	[CE]  variable  previousCost  is  already  defined  in  method  doOptimize()	38	None	replace
530	[BUG]  [BUGGY]  Integer  cost  =  Math.max(previousCost,  cost);  [CE]  incompatible  types  [FE]                AssertionFailedError      [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  Integer  cost  =  Math.max(previousCost,  cost);  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	Integer  cost  =  Math.max(previousCost,  cost);	  cost    =    Math.max(cost,    previousCost);    Integer    cost    =    Math.max(cost,    previousCost);    	non-compiled	[CE]  incompatible  types	26	None	replace
531	[BUG]  [BUGGY]  Integer  cost  =  Math.max(cosine,  previousCost);  [CE]  cannot  find  symbol  cosine  [FE]                  AssertionFailedError      [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  Integer  cost  =  Math.max(cosine,  previousCost);  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	Integer  cost  =  Math.max(cosine,  previousCost);	  cost    =    Math.max(cost,    previousCost);    Integer    cost    =    Math.max(cost,    previousCost);    	non-compiled	[CE]  cannot  find  symbol  cosine	26	None	replace
532	[BUG]  [BUGGY]  Integer  cost  =  Math.max(cost,  previousCost);  [CE]  incompatible  types  [FE]                    AssertionFailedError      [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  Integer  cost  =  Math.max(cost,  previousCost);  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	Integer  cost  =  Math.max(cost,  previousCost);	  cost    =    Math.max(cost,    previousCost);    Integer    cost    =    Math.max(cost,    previousCost);    	non-compiled	[CE]  incompatible  types	26	None	replace
533	[BUG]  [BUGGY]  Integer  cost  =  Math.max(cost,  preRed);  [CE]  incompatible  types  [FE]                      AssertionFailedError      [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  Integer  cost  =  Math.max(cost,  preRed);  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	Integer  cost  =  Math.max(cost,  preRed);	  cost    =    Math.max(cost,    previousCost);    Integer    cost    =    Math.max(cost,    previousCost);    	non-compiled	[CE]  incompatible  types	26	None	replace
534	[BUG]  [BUGGY]  Integer  xNorm  =  Math.sqrt(diag);  [CE]  variable  xNorm  is  already  defined  in  method  doOptimize()  [FE]          AssertionFailedError      [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  Integer  xNorm  =  Math.sqrt(diag);  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	Integer  xNorm  =  Math.sqrt(diag);	  cost    =    xNorm;    Integer    xNorm    =    Math.sqrt(xNorm);    	non-compiled	[CE]  variable  xNorm  is  already  defined  in  method  doOptimize()	103	None	replace
535	[BUG]  [BUGGY]  Integer  xNorm  =  Math.sqrt(lmNorm);  [CE]  variable  xNorm  is  already  defined  in  method  doOptimize()  [FE]            AssertionFailedError      [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  Integer  xNorm  =  Math.sqrt(lmNorm);  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	Integer  xNorm  =  Math.sqrt(lmNorm);	  cost    =    xNorm;    Integer    xNorm    =    Math.sqrt(xNorm);    	non-compiled	[CE]  variable  xNorm  is  already  defined  in  method  doOptimize()	103	None	replace
536	[BUG]  [BUGGY]  Integer  xNorm  =  Math.sqrt(cols);  [CE]  variable  xNorm  is  already  defined  in  method  doOptimize()  [FE]              AssertionFailedError      [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  Integer  xNorm  =  Math.sqrt(cols);  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	Integer  xNorm  =  Math.sqrt(cols);	  cost    =    xNorm;    Integer    xNorm    =    Math.sqrt(xNorm);    	non-compiled	[CE]  variable  xNorm  is  already  defined  in  method  doOptimize()	103	None	replace
537	[BUG]  [BUGGY]  Integer  xNorm  =  Math.sqrt(type);  [CE]  variable  xNorm  is  already  defined  in  method  doOptimize()  [FE]                AssertionFailedError      [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  Integer  xNorm  =  Math.sqrt(type);  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	Integer  xNorm  =  Math.sqrt(type);	  cost    =    xNorm;    Integer    xNorm    =    Math.sqrt(xNorm);    	non-compiled	[CE]  variable  xNorm  is  already  defined  in  method  doOptimize()	103	None	replace
538	[BUG]  [BUGGY]  cost  =  Math.max(xNorm,  previousCost);  int  previousCost  =  Math.max(xNorm,  previousCost);  [CE]  variable  previousCost  is  already  defined  in  method  doOptimize()  [FE]    AssertionFailedError    [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  cost  =  Math.max(xNorm,  previousCost);  int  previousCost  =  Math.max(xNorm,  previousCost);  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	cost    =    Math.max(xNorm,    previousCost);    int  previousCost  =  Math.max(xNorm,  previousCost);	  	non-compiled	[CE]  variable  previousCost  is  already  defined  in  method  doOptimize()	1	None	add
539	[BUG]  [BUGGY]  cost  =  Math.max(xNorm,  previousCost);  int  cost  =  Math.max(xNorm,  previousCost);  [CE]  possible  loss  of  precision  [FE]      AssertionFailedError    [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  cost  =  Math.max(xNorm,  previousCost);  int  cost  =  Math.max(xNorm,  previousCost);  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	cost    =    Math.max(xNorm,    previousCost);    int  cost  =  Math.max(xNorm,  previousCost);	  	non-compiled	[CE]  possible  loss  of  precision	1	None	add
540	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  cost  =  Math.max(xNorm,  previousCost);  double  cost  =  Math.max(xNorm,  previousCost);  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	add	cost    =    Math.max(xNorm,    previousCost);    double  cost  =  Math.max(xNorm,  previousCost);	  	compilable	  [FE]  AssertionFailedError  	1	9	add
541	[BUG]  [BUGGY]  cost  =  Math.max(xNorm,  previousCost);  double  cost  =  Math.max(xNorm,  previousCost);  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  cost  =  Math.max(xNorm,  previousCost);  double  cost  =  Math.max(xNorm,  previousCost);  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	cost    =    Math.max(xNorm,    previousCost);    double  cost  =  Math.max(xNorm,  previousCost);	  	compilable	  [FE]  AssertionFailedError  	1	9	add
542	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  cost  =  Math.max(xNorm,  previousCost);  cost  =  Math.max(xNorm,  previousCost);  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	add	cost    =    Math.max(xNorm,    previousCost);    cost  =  Math.max(xNorm,  previousCost);	  	compilable	  [FE]  AssertionFailedError  	1	2	add
543	[BUG]  [BUGGY]  cost  =  Math.max(xNorm,  previousCost);  cost  =  Math.max(xNorm,  previousCost);  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  cost  =  Math.max(xNorm,  previousCost);  cost  =  Math.max(xNorm,  previousCost);  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	cost    =    Math.max(xNorm,    previousCost);    cost  =  Math.max(xNorm,  previousCost);	  	compilable	  [FE]  AssertionFailedError  	1	2	add
544	[BUG]  [BUGGY]  cost  =  Math.max(xNorm,  previousCost);  Integer  cost  =  Math.max(xNorm,  previousCost);  [CE]  incompatible  types  [FE]            AssertionFailedError    [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  cost  =  Math.max(xNorm,  previousCost);  Integer  cost  =  Math.max(xNorm,  previousCost);  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	cost    =    Math.max(xNorm,    previousCost);    Integer  cost  =  Math.max(xNorm,  previousCost);	  	non-compiled	[CE]  incompatible  types	1	None	add
545	[BUG]  [BUGGY]  double  residuals  =  Math.sqrt(previousCost);  [CE]  incompatible  types  [FE]                    AssertionFailedError      [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  double  residuals  =  Math.sqrt(previousCost);  [BUGGY]      cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	double  residuals  =  Math.sqrt(previousCost);	  double    residuals    =    Math.sqrt(remainingCost);    	non-compiled	[CE]  incompatible  types	69	None	replace
546	[BUG]  [BUGGY]  double  residuals  =  Math.sqrt(xNorm);  [CE]  incompatible  types  [FE]                      AssertionFailedError      [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  double  residuals  =  Math.sqrt(xNorm);  [BUGGY]      cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	double  residuals  =  Math.sqrt(xNorm);	  double    residuals    =    Math.sqrt(remainingCost);    	non-compiled	[CE]  incompatible  types	69	None	replace
547	[BUG]  [BUGGY]  double  residuals  =  Math.sqrt(xK);  [CE]  cannot  find  symbol  xK  [FE]                        AssertionFailedError      [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  double  residuals  =  Math.sqrt(xK);  [BUGGY]      cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	double  residuals  =  Math.sqrt(xK);	  double    residuals    =    Math.sqrt(remainingCost);    	non-compiled	[CE]  cannot  find  symbol  xK	69	None	replace
548	[BUG]  [BUGGY]  Integer  solvedCols  =  Math.min(results.length,  oldX.length  -  1);  [CE]  cannot  find  symbol  results  [FE]        AssertionFailedError      [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  Integer  solvedCols  =  Math.min(results.length,  oldX.length  -  1);  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	Integer  solvedCols  =  Math.min(results.length,  oldX.length  -  1);	  Integer    solvedCols    =    Math.min(results.length,    oldX.length);    	non-compiled	[CE]  cannot  find  symbol  results	71	None	replace
549	[BUG]  [BUGGY]  Integer  solvedCols  =  Math.min(oldCols.length,  oldX.length);  [CE]  cannot  find  symbol  oldCols  [FE]          AssertionFailedError      [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  Integer  solvedCols  =  Math.min(oldCols.length,  oldX.length);  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	Integer  solvedCols  =  Math.min(oldCols.length,  oldX.length);	  Integer    solvedCols    =    Math.min(results.length,    oldX.length);    	non-compiled	[CE]  cannot  find  symbol  oldCols	71	None	replace
550	[BUG]  [BUGGY]  Integer  solvedCols  =  Math.min(results.length,  cols.length);  [CE]  cannot  find  symbol  results  [FE]            AssertionFailedError      [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  Integer  solvedCols  =  Math.min(results.length,  cols.length);  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	Integer  solvedCols  =  Math.min(results.length,  cols.length);	  Integer    solvedCols    =    Math.min(results.length,    oldX.length);    	non-compiled	[CE]  cannot  find  symbol  results	71	None	replace
551	[BUG]  [BUGGY]  xNorm  =  Math.sqrt(null);  [CE]  method  sqrt  in  class  Math  cannot  be  applied  to  given  types;  [FE]    AssertionFailedError    [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  xNorm  =  Math.sqrt(null);  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	xNorm  =  Math.sqrt(null);	  cost    =    xNorm;    xNorm    =    xNorm;    	non-compiled	[CE]  method  sqrt  in  class  Math  cannot  be  applied  to  given  types;	46	None	replace
552	[BUG]  [BUGGY]  xNorm  =  Math.sqrt(yNorm);  [CE]  cannot  find  symbol  yNorm  [FE]      AssertionFailedError    [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  xNorm  =  Math.sqrt(yNorm);  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	xNorm  =  Math.sqrt(yNorm);	  cost    =    xNorm;    xNorm    =    xNorm;    	non-compiled	[CE]  cannot  find  symbol  yNorm	46	None	replace
553	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  xNorm  =  Math.abs(xNorm);  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	add	xNorm  =  Math.abs(xNorm);	  cost    =    xNorm;    xNorm    =    xNorm;    	compilable	  [FE]  AssertionFailedError  	46	4	replace
554	[BUG]  [BUGGY]  xNorm  =  Math.abs(xNorm);  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  xNorm  =  Math.abs(xNorm);  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	xNorm  =  Math.abs(xNorm);	  cost    =    xNorm;    xNorm    =    xNorm;    	compilable	  [FE]  AssertionFailedError  	46	4	replace
555	[BUG]  [BUGGY]  cost  =  residuals  *  tmpVec;  [CE]  bad  operand  types  for  binary  operator  '*'  [FE]                AssertionFailedError      [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  cost  =  residuals  *  tmpVec;  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	cost  =  residuals  *  tmpVec;	  cost    =    tmpVec    *    tmpVec;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '*'	149	None	replace
556	[BUG]  [BUGGY]  cost  =  tmpVec  *  xNorm;  [CE]  bad  operand  types  for  binary  operator  '*'  [FE]                  AssertionFailedError      [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  cost  =  tmpVec  *  xNorm;  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	cost  =  tmpVec  *  xNorm;	  cost    =    tmpVec    *    tmpVec;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '*'	149	None	replace
557	[BUG]  [BUGGY]  cost  =  oldX  *  tmpVec;  [CE]  bad  operand  types  for  binary  operator  '*'  [FE]                    AssertionFailedError      [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  cost  =  oldX  *  tmpVec;  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	cost  =  oldX  *  tmpVec;	  cost    =    tmpVec    *    tmpVec;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '*'	149	None	replace
558	[BUG]  [BUGGY]  cost  =  Math.ceil(xNorm);  Integer  cost  =  Math.ceil(xNorm);  [CE]  incompatible  types  [FE]    AssertionFailedError    [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  cost  =  Math.ceil(xNorm);  Integer  cost  =  Math.ceil(xNorm);  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	cost    =    Math.ceil(xNorm);    Integer  cost  =  Math.ceil(xNorm);	  	non-compiled	[CE]  incompatible  types	50	None	add
559	[BUG]  [BUGGY]  Integer  solvedCols  =  Math.max(resolvedCols,  oldX.length);  [CE]  cannot  find  symbol  resolvedCols  [FE]              AssertionFailedError      [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  Integer  solvedCols  =  Math.max(resolvedCols,  oldX.length);  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	Integer  solvedCols  =  Math.max(resolvedCols,  oldX.length);	  Integer    solvedCols    =    Math.max(relativeTolerance,    oldX.length);    	non-compiled	[CE]  cannot  find  symbol  resolvedCols	136	None	replace
560	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                AssertionFailedError      [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  Integer  solvedCols  =  Math.max(cols,  oldX.length);  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	add	Integer  solvedCols  =  Math.max(cols,  oldX.length);	  Integer    solvedCols    =    Math.max(relativeTolerance,    oldX.length);    	compilable	  [FE]  AssertionFailedError  	136	4	replace
561	[BUG]  [BUGGY]  Integer  solvedCols  =  Math.max(cols,  oldX.length);  [FE]  AssertionFailedError  [FE]                AssertionFailedError      [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  Integer  solvedCols  =  Math.max(cols,  oldX.length);  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	Integer  solvedCols  =  Math.max(cols,  oldX.length);	  Integer    solvedCols    =    Math.max(relativeTolerance,    oldX.length);    	compilable	  [FE]  AssertionFailedError  	136	4	replace
562	[BUG]  [BUGGY]  cost  =  Math.max(colons,  xNorm);  [CE]  cannot  find  symbol  colons  [FE]            AssertionFailedError      [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  cost  =  Math.max(colons,  xNorm);  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	cost  =  Math.max(colons,  xNorm);	  cost    =    Math.max(cosine,    xNorm);    	non-compiled	[CE]  cannot  find  symbol  colons	140	None	replace
563	[BUG]  [BUGGY]  cost  =  Math.max(previousCost,  cost);  Cost  =  Math.max(cost,  previousCost);  [CE]  cannot  find  symbol  Cost  [FE]            AssertionFailedError      [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  cost  =  Math.max(previousCost,  cost);  Cost  =  Math.max(cost,  previousCost);  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	cost  =  Math.max(previousCost,  cost);  Cost  =  Math.max(cost,  previousCost);	  cost    =    Math.max(cost,    previousCost);    Cost    =    Math.max(cost,    previousCost);    	non-compiled	[CE]  cannot  find  symbol  Cost	24	None	replace
564	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  cost  =  Math.max(0,  xNorm);  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	add	cost  =  Math.max(0,  xNorm);	  cost    =    xNorm;    cost    =    xNorm;    	compilable	  [FE]  AssertionFailedError  	41	11	replace
565	[BUG]  [BUGGY]  cost  =  Math.max(0,  xNorm);  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  cost  =  Math.max(0,  xNorm);  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	cost  =  Math.max(0,  xNorm);	  cost    =    xNorm;    cost    =    xNorm;    	compilable	  [FE]  AssertionFailedError  	41	11	replace
566	[BUG]  [BUGGY]  tmpVec  =  Math.sqrt(oldX,  xNorm,  1);  [CE]  method  sqrt  in  class  Math  cannot  be  applied  to  given  types;  [FE]                  AssertionFailedError      [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  tmpVec  =  Math.sqrt(oldX,  xNorm,  1);  [BUGGY]      cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	tmpVec  =  Math.sqrt(oldX,  xNorm,  1);	  tmpVec    =    Math.sqrt(xNorm,    1);    	non-compiled	[CE]  method  sqrt  in  class  Math  cannot  be  applied  to  given  types;	154	None	replace
567	[BUG]  [BUGGY]  tmpVec  =  Math.sqrt(previousCost,  1);  [CE]  method  sqrt  in  class  Math  cannot  be  applied  to  given  types;  [FE]                    AssertionFailedError      [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  tmpVec  =  Math.sqrt(previousCost,  1);  [BUGGY]      cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	tmpVec  =  Math.sqrt(previousCost,  1);	  tmpVec    =    Math.sqrt(xNorm,    1);    	non-compiled	[CE]  method  sqrt  in  class  Math  cannot  be  applied  to  given  types;	154	None	replace
568	[BUG]  [BUGGY]  cost  =  oldRes  +  1;  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]              AssertionFailedError      [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  cost  =  oldRes  +  1;  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	cost  =  oldRes  +  1;	  cost    =    tmpVec    +    1;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	18	None	replace
569	[BUG]  [BUGGY]  cost  =  xNorm  +  1;  Integer  cost  =  xNorm  +  1;  [CE]  incompatible  types  [FE]    AssertionFailedError    [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  cost  =  xNorm  +  1;  Integer  cost  =  xNorm  +  1;  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	cost    =    xNorm    +    1;    Integer  cost  =  xNorm  +  1;	  	non-compiled	[CE]  incompatible  types	52	None	add
570	[BUG]  [BUGGY]  cost  =  xNorm  +  1;  Integer  p  =  xNorm  +  1;  [CE]  incompatible  types  [FE]      AssertionFailedError    [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  cost  =  xNorm  +  1;  Integer  p  =  xNorm  +  1;  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	cost    =    xNorm    +    1;    Integer  p  =  xNorm  +  1;	  	non-compiled	[CE]  incompatible  types	52	None	add
571	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError      [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  Integer  cost  =  new  Integer(0);  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	add	Integer  cost  =  new  Integer(0);	  cost    =    xNorm;    Integer    cost    =    xNorm;    	compilable	  [FE]  AssertionFailedError  	102	4	replace
572	[BUG]  [BUGGY]  Integer  cost  =  new  Integer(0);  [FE]  AssertionFailedError  [FE]        AssertionFailedError      [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  Integer  cost  =  new  Integer(0);  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	Integer  cost  =  new  Integer(0);	  cost    =    xNorm;    Integer    cost    =    xNorm;    	compilable	  [FE]  AssertionFailedError  	102	4	replace
573	[BUG]  [BUGGY]  Integer  xNorm  =  Math.sqrt(tolerance);  [CE]  variable  xNorm  is  already  defined  in  method  doOptimize()  [FE]          AssertionFailedError      [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  Integer  xNorm  =  Math.sqrt(tolerance);  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	Integer  xNorm  =  Math.sqrt(tolerance);	  cost    =    xNorm;    Integer    xNorm    =    Math.sqrt(xNorm);    	non-compiled	[CE]  variable  xNorm  is  already  defined  in  method  doOptimize()	103	None	replace
574	[BUG]  [BUGGY]  Integer  xNorm  =  Math.sqrt(value);  [CE]  variable  xNorm  is  already  defined  in  method  doOptimize()  [FE]            AssertionFailedError      [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  Integer  xNorm  =  Math.sqrt(value);  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	Integer  xNorm  =  Math.sqrt(value);	  cost    =    xNorm;    Integer    xNorm    =    Math.sqrt(xNorm);    	non-compiled	[CE]  variable  xNorm  is  already  defined  in  method  doOptimize()	103	None	replace
575	[BUG]  [BUGGY]  cost  =  Math.max(xNorm,  previousCost);  double  previousCost  =  Math.max(xNorm,  previousCost);  [CE]  variable  previousCost  is  already  defined  in  method  doOptimize()  [FE]    AssertionFailedError    [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  cost  =  Math.max(xNorm,  previousCost);  double  previousCost  =  Math.max(xNorm,  previousCost);  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	cost    =    Math.max(xNorm,    previousCost);    double  previousCost  =  Math.max(xNorm,  previousCost);	  	non-compiled	[CE]  variable  previousCost  is  already  defined  in  method  doOptimize()	1	None	add
576	[BUG]  [BUGGY]  cost  =  Math.max(xNorm,  previousCost);  Preconditions.checkState(cols!=  0);  [CE]  cannot  find  symbol  Preconditions  [FE]      AssertionFailedError    [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  cost  =  Math.max(xNorm,  previousCost);  Preconditions.checkState(cols!=  0);  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	cost    =    Math.max(xNorm,    previousCost);    Preconditions.checkState(cols!=  0);	  	non-compiled	[CE]  cannot  find  symbol  Preconditions	1	None	add
577	[BUG]  [BUGGY]  double  solvedCols  =  diag[0]  *  permutation[1];  double  solvedCols  =  diag[1]  *  permutation[1];  [CE]  variable  solvedCols  is  already  defined  in  method  doOptimize()  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  double  solvedCols  =  diag[0]  *  permutation[1];  double  solvedCols  =  diag[1]  *  permutation[1];  [BUGGY]      cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	double    solvedCols    =    diag[0]    *    permutation[1];    double  solvedCols  =  diag[1]  *  permutation[1];	  	non-compiled	[CE]  variable  solvedCols  is  already  defined  in  method  doOptimize()	84	None	add
578	[BUG]  [BUGGY]  double  solvedCols  =  diag[0]  *  permutation[1];  double  solvedCols  =  diag[0]  *  permutation[2];  [CE]  variable  solvedCols  is  already  defined  in  method  doOptimize()  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  double  solvedCols  =  diag[0]  *  permutation[1];  double  solvedCols  =  diag[0]  *  permutation[2];  [BUGGY]      cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	double    solvedCols    =    diag[0]    *    permutation[1];    double  solvedCols  =  diag[0]  *  permutation[2];	  	non-compiled	[CE]  variable  solvedCols  is  already  defined  in  method  doOptimize()	84	None	add
579	[BUG]  [BUGGY]  cost  =  new  VectorialPointValuePair(oldX,  tmpVec,  cols);  [CE]  no  suitable  constructor  found  for  VectorialPointValuePair(double[],double[],int)  [FE]                AssertionFailedError      [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  cost  =  new  VectorialPointValuePair(oldX,  tmpVec,  cols);  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	cost  =  new  VectorialPointValuePair(oldX,  tmpVec,  cols);	  cost    =    new    VectorialPointValuePair(tmpVec,    cols);    	non-compiled	[CE]  no  suitable  constructor  found  for  VectorialPointValuePair(double[],double[],int)	109	None	replace
580	[BUG]  [BUGGY]  CostRelativeTolerance  cost  =  new  VectorialPointValuePair(tmpVec,  oldRes);  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  CostRelativeTolerance  cost  =  new  VectorialPointValuePair(tmpVec,  oldRes);  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	CostRelativeTolerance  cost  =  new  VectorialPointValuePair(tmpVec,  oldRes);	  cost    =    new    VectorialPointValuePair(tmpVec,    cols);    	non-compiled	[CE]  cannot  find  symbol	109	None	replace
581	[BUG]  [BUGGY]  preRed  =  Math.max(previousCost,  xNorm);  Preconditions.checkState(cols!=  0);  [CE]  cannot  find  symbol  Preconditions  [FE]          AssertionFailedError      [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  preRed  =  Math.max(previousCost,  xNorm);  Preconditions.checkState(cols!=  0);  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	preRed  =  Math.max(previousCost,  xNorm);  Preconditions.checkState(cols!=  0);	  cost    =    Math.max(cost,    previousCost);    Preconditions.checkState(cols!=    0);    	non-compiled	[CE]  cannot  find  symbol  Preconditions	125	None	replace
582	[BUG]  [BUGGY]  cost    =    Math.max(previousCost,    xNorm);    double  cost  =  Math.max(previousCost,  xNorm);  Integer  previousCost  =  Math.max(previousCost,  xNorm);  double  cost  =  Math.max(previousCost,  xNorm);  [CE]  variable  previousCost  is  already  defined  in  method  doOptimize()  [FE]    AssertionFailedError    [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  cost    =    Math.max(previousCost,    xNorm);    double  cost  =  Math.max(previousCost,  xNorm);  Integer  previousCost  =  Math.max(previousCost,  xNorm);  double  cost  =  Math.max(previousCost,  xNorm);  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	cost        =        Math.max(previousCost,        xNorm);        double    cost    =    Math.max(previousCost,    xNorm);    Integer  previousCost  =  Math.max(previousCost,  xNorm);  double  cost  =  Math.max(previousCost,  xNorm);	  	non-compiled	[CE]  variable  previousCost  is  already  defined  in  method  doOptimize()	34	None	add
583	[BUG]  [BUGGY]  int  previousCost  -=  prered;  [CE]  ';'  expected  [FE]        AssertionFailedError      [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  int  previousCost  -=  prered;  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	int  previousCost  -=  prered;	  cost    -=    previousCost;    int    previousCost    -=    previousCost;    	non-compiled	[CE]  ';'  expected	5	None	replace
584	[BUG]  [BUGGY]  cost  =  xNorm;  Cost  =  xK;  [CE]  cannot  find  symbol  Cost  [FE]                AssertionFailedError      [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  cost  =  xNorm;  Cost  =  xK;  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	cost  =  xNorm;  Cost  =  xK;	  cost    =    xNorm;    Cost    =    xNorm;    	non-compiled	[CE]  cannot  find  symbol  Cost	47	None	replace
585	[BUG]  [BUGGY]  double  tmpVec  =  Math.sqrt(oldX);  [CE]  variable  tmpVec  is  already  defined  in  method  doOptimize()  [FE]            AssertionFailedError      [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  double  tmpVec  =  Math.sqrt(oldX);  [BUGGY]      cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	double  tmpVec  =  Math.sqrt(oldX);	  double    tmpVec    =    Math.sqrt(diag);    	non-compiled	[CE]  variable  tmpVec  is  already  defined  in  method  doOptimize()	110	None	replace
586	[BUG]  [BUGGY]  tmpVec  =  Math.min(remainders,  oldX[0]);  [CE]  cannot  find  symbol  remainders  [FE]              AssertionFailedError      [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  tmpVec  =  Math.min(remainders,  oldX[0]);  [BUGGY]      cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	tmpVec  =  Math.min(remainders,  oldX[0]);	  tmpVec    =    Math.min(remainderCost,    oldX[0]);    	non-compiled	[CE]  cannot  find  symbol  remainders	119	None	replace
587	[BUG]  [BUGGY]  double  tmpVec  =  Math.sqrt(previous);  [CE]  variable  tmpVec  is  already  defined  in  method  doOptimize()  [FE]                AssertionFailedError      [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  double  tmpVec  =  Math.sqrt(previous);  [BUGGY]      cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	double  tmpVec  =  Math.sqrt(previous);	  double    tmpVec    =    Math.sqrt(remainder);    	non-compiled	[CE]  variable  tmpVec  is  already  defined  in  method  doOptimize()	93	None	replace
588	[BUG]  [BUGGY]  double  tmpVec  =  Math.sqrt(remainder  +  1);  [CE]  variable  tmpVec  is  already  defined  in  method  doOptimize()  [FE]                  AssertionFailedError      [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  double  tmpVec  =  Math.sqrt(remainder  +  1);  [BUGGY]      cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	double  tmpVec  =  Math.sqrt(remainder  +  1);	  double    tmpVec    =    Math.sqrt(remainder);    	non-compiled	[CE]  variable  tmpVec  is  already  defined  in  method  doOptimize()	93	None	replace
589	[BUG]  [BUGGY]  previousCost  =  Math.max(period,  xNorm);  cost  =  Math.max(period,  xNorm);  [CE]  cannot  find  symbol  period  [FE]    AssertionFailedError    [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  previousCost  =  Math.max(period,  xNorm);  cost  =  Math.max(period,  xNorm);  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	previousCost  =  Math.max(period,  xNorm);  cost  =  Math.max(period,  xNorm);	  cost    =    Math.max(previousCost,    xNorm);    cost    =    Math.max(previousCost,    xNorm);    	non-compiled	[CE]  cannot  find  symbol  period	37	None	replace
590	[BUG]  [BUGGY]  int  cost  =  Math.max(cost,  preRed);  [CE]  possible  loss  of  precision  [FE]              AssertionFailedError      [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  int  cost  =  Math.max(cost,  preRed);  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	int  cost  =  Math.max(cost,  preRed);	  cost    =    Math.max(cost,    previousCost);    int    cost    =    Math.max(cost,    previousCost);    	non-compiled	[CE]  possible  loss  of  precision	25	None	replace
591	[BUG]  [BUGGY]  Integer  solvedCols  =  Math.min(resolvedCols,  xNorm  +  1);  [CE]  cannot  find  symbol  resolvedCols  [FE]          AssertionFailedError      [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  Integer  solvedCols  =  Math.min(resolvedCols,  xNorm  +  1);  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	Integer  solvedCols  =  Math.min(resolvedCols,  xNorm  +  1);	          Integer    solvedCols    =    Math.min(resolvedCols,    xNorm);    	non-compiled	[CE]  cannot  find  symbol  resolvedCols	95	None	replace
592	[BUG]  [BUGGY]  Integer  solvedCols  =  Math.min(resolvedCols,  xNorm-1);  [CE]  cannot  find  symbol  resolvedCols  [FE]            AssertionFailedError      [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  Integer  solvedCols  =  Math.min(resolvedCols,  xNorm-1);  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	Integer  solvedCols  =  Math.min(resolvedCols,  xNorm-1);	          Integer    solvedCols    =    Math.min(resolvedCols,    xNorm);    	non-compiled	[CE]  cannot  find  symbol  resolvedCols	95	None	replace
593	[BUG]  [BUGGY]  double  previousCost  =  Math.max(cost,  oldX);  [CE]  variable  previousCost  is  already  defined  in  method  doOptimize()  [FE]        AssertionFailedError      [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  double  previousCost  =  Math.max(cost,  oldX);  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	double  previousCost  =  Math.max(cost,  oldX);	  cost    =    Math.max(cost,    previousCost);    double    previousCost    =    Math.max(cost,    previousCost);    	non-compiled	[CE]  variable  previousCost  is  already  defined  in  method  doOptimize()	130	None	replace
594	[BUG]  [BUGGY]  cost  =  tmpVec.previous;  [CE]  cannot  find  symbol  previous  [FE]              AssertionFailedError      [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  cost  =  tmpVec.previous;  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	cost  =  tmpVec.previous;	  cost    =    tmpVec.result;    	non-compiled	[CE]  cannot  find  symbol  previous	148	None	replace
595	[BUG]  [BUGGY]  Preconditions.checkNotNull(previousCost);  [CE]  cannot  find  symbol  Preconditions  [FE]          AssertionFailedError      [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  Preconditions.checkNotNull(previousCost);  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	Preconditions.checkNotNull(previousCost);	  cost    =    Math.max(cost,    previousCost);    if(previousCost!=    null)    {    cost    =    Math.max(cost,    previousCost);    }    	non-compiled	[CE]  cannot  find  symbol  Preconditions	131	None	replace
596	[BUG]  [BUGGY]  Preconditions.checkArgument(previousCost!=  null);  [CE]  incomparable  types:  double  and  <null>  [FE]            AssertionFailedError      [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  Preconditions.checkArgument(previousCost!=  null);  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	Preconditions.checkArgument(previousCost!=  null);	  cost    =    Math.max(cost,    previousCost);    if(previousCost!=    null)    {    cost    =    Math.max(cost,    previousCost);    }    	non-compiled	[CE]  incomparable  types:  double  and  <null>	131	None	replace
597	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  double  cost  =  Math.max(cols,  xNorm);  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	add	double  cost  =  Math.max(cols,  xNorm);	  cost    =    Math.max(previousCost,    xNorm);    double    cost    =    Math.max(previousCost,    xNorm);    	compilable	  [FE]  AssertionFailedError  	35	4	replace
598	[BUG]  [BUGGY]  double  cost  =  Math.max(cols,  xNorm);  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  double  cost  =  Math.max(cols,  xNorm);  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	double  cost  =  Math.max(cols,  xNorm);	  cost    =    Math.max(previousCost,    xNorm);    double    cost    =    Math.max(previousCost,    xNorm);    	compilable	  [FE]  AssertionFailedError  	35	4	replace
599	[BUG]  [BUGGY]  tmpVec  =  Math.min(remainings,  xNorm,  0);  [CE]  cannot  find  symbol  remainings  [FE]                          AssertionFailedError      [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  tmpVec  =  Math.min(remainings,  xNorm,  0);  [BUGGY]      cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	tmpVec  =  Math.min(remainings,  xNorm,  0);	  tmpVec    =    Math.min(previousCost,    xNorm,    0);    	non-compiled	[CE]  cannot  find  symbol  remainings	58	None	replace
600	[BUG]  [BUGGY]  tmpVec  =  Math.min(results,  previousCost,  xNorm,  0);  [CE]  cannot  find  symbol  results  [FE]                            AssertionFailedError      [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  tmpVec  =  Math.min(results,  previousCost,  xNorm,  0);  [BUGGY]      cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	tmpVec  =  Math.min(results,  previousCost,  xNorm,  0);	  tmpVec    =    Math.min(previousCost,    xNorm,    0);    	non-compiled	[CE]  cannot  find  symbol  results	58	None	replace
601	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  int  solvedCols  =  oldX.length;  int  fixedCols  =  oldX.length;  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	add	int    solvedCols    =    oldX.length;    int  fixedCols  =  oldX.length;	  	compilable	  [FE]  AssertionFailedError  	73	2	add
602	[BUG]  [BUGGY]  int  solvedCols  =  oldX.length;  int  fixedCols  =  oldX.length;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  int  solvedCols  =  oldX.length;  int  fixedCols  =  oldX.length;  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	int    solvedCols    =    oldX.length;    int  fixedCols  =  oldX.length;	  	compilable	  [FE]  AssertionFailedError  	73	2	add
603	[BUG]  [BUGGY]  if(previousCost!=  0)  {  cost  -=  previousCost;  -=  previousCost;  }  else  {  for(int  i  =  0;  i  <  cols;  ++i)  {  oldX[i]  =  oldX[i];  }  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  if(previousCost!=  0)  {  cost  -=  previousCost;  -=  previousCost;  }  else  {  for(int  i  =  0;  i  <  cols;  ++i)  {  oldX[i]  =  oldX[i];  }  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	if(previousCost!=  0)  {  cost  -=  previousCost;  -=  previousCost;  }  else  {  for(int  i  =  0;  i  <  cols;  ++i)  {  oldX[i]  =  oldX[i];  }	  cost    -=    previousCost;    -=    previousCost;    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
604	[BUG]  [BUGGY]  if(previousCost!=  0)  {  cost  -=  previousCost;  -=  previousCost;  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  if(previousCost!=  0)  {  cost  -=  previousCost;  -=  previousCost;  }  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	if(previousCost!=  0)  {  cost  -=  previousCost;  -=  previousCost;  }	  cost    -=    previousCost;    -=    previousCost;    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
605	[BUG]  [BUGGY]  if(previousCost!=  0)  {  cost  -=  previousCost;  -=  previousCost;  }  else  {  for(int  i  =  0;  i  <  cols;  ++i)  {  permutation[i]  =  oldX[i];  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  if(previousCost!=  0)  {  cost  -=  previousCost;  -=  previousCost;  }  else  {  for(int  i  =  0;  i  <  cols;  ++i)  {  permutation[i]  =  oldX[i];  }  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	if(previousCost!=  0)  {  cost  -=  previousCost;  -=  previousCost;  }  else  {  for(int  i  =  0;  i  <  cols;  ++i)  {  permutation[i]  =  oldX[i];  }	  cost    -=    previousCost;    -=    previousCost;    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
606	[BUG]  [BUGGY]  cost  -=  solveCols;  [CE]  cannot  find  symbol  solveCols  [FE]    AssertionFailedError    [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  cost  -=  solveCols;  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	cost  -=  solveCols;	  cost    -=    cols;    	non-compiled	[CE]  cannot  find  symbol  solveCols	62	None	replace
607	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  Double  solvedCols  =  diag[0]  *  point[1];  [BUGGY]      cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	add	Double  solvedCols  =  diag[0]  *  point[1];	  Double    solvedCols    =    diag[0]    *    permutation[1];    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	87	13	replace
608	[BUG]  [BUGGY]  Double  solvedCols  =  diag[0]  *  point[1];  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  Double  solvedCols  =  diag[0]  *  point[1];  [BUGGY]      cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	Double  solvedCols  =  diag[0]  *  point[1];	  Double    solvedCols    =    diag[0]    *    permutation[1];    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	87	13	replace
609	[BUG]  [BUGGY]  tmpVec  =  Math.min(result,  xNorm,  previousCost);  [CE]  cannot  find  symbol  result  [FE]                    AssertionFailedError      [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  tmpVec  =  Math.min(result,  xNorm,  previousCost);  [BUGGY]      cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	tmpVec  =  Math.min(result,  xNorm,  previousCost);	  tmpVec    =    Math.min(result,    previousCost,    xNorm);    	non-compiled	[CE]  cannot  find  symbol  result	55	None	replace
610	[BUG]  [BUGGY]  tmpVec  =  Math.min(remainders,  previousCost,  xNorm);  [CE]  cannot  find  symbol  remainders  [FE]                      AssertionFailedError      [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  tmpVec  =  Math.min(remainders,  previousCost,  xNorm);  [BUGGY]      cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	tmpVec  =  Math.min(remainders,  previousCost,  xNorm);	  tmpVec    =    Math.min(result,    previousCost,    xNorm);    	non-compiled	[CE]  cannot  find  symbol  remainders	55	None	replace
611	[BUG]  [BUGGY]  cost  -=  cols;  Integer  cost  -=  cols;  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  cost  -=  cols;  Integer  cost  -=  cols;  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	cost    -=    cols;    Integer  cost  -=  cols;	  	non-compiled	[CE]  ';'  expected	61	None	add
612	[BUG]  [BUGGY]  Preconditions.checkState(oldX!=  cols);  [CE]  incomparable  types:  double[]  and  int  [FE]                AssertionFailedError      [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  Preconditions.checkState(oldX!=  cols);  [BUGGY]      cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	Preconditions.checkState(oldX!=  cols);	  Preconditions.checkState(oldX!=    0);    	non-compiled	[CE]  incomparable  types:  double[]  and  int	158	None	replace
613	[BUG]  [BUGGY]  tmpVec  =  Math.min(relatives,  xNorm);  [CE]  cannot  find  symbol  relatives  [FE]                      AssertionFailedError      [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  tmpVec  =  Math.min(relatives,  xNorm);  [BUGGY]      cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	tmpVec  =  Math.min(relatives,  xNorm);	  tmpVec    =    Math.min(remainders,    xNorm);    	non-compiled	[CE]  cannot  find  symbol  relatives	99	None	replace
614	[BUG]  [BUGGY]  tmpVec  =  Math.min(res,  xNorm);  [CE]  cannot  find  symbol  res  [FE]                        AssertionFailedError      [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  tmpVec  =  Math.min(res,  xNorm);  [BUGGY]      cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	tmpVec  =  Math.min(res,  xNorm);	  tmpVec    =    Math.min(remainders,    xNorm);    	non-compiled	[CE]  cannot  find  symbol  res	99	None	replace
615	[BUG]  [BUGGY]  double  tmpVec  =  Math.sqrt(previousCost,  restingCost);  [CE]  variable  tmpVec  is  already  defined  in  method  doOptimize()  [FE]                      AssertionFailedError      [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  double  tmpVec  =  Math.sqrt(previousCost,  restingCost);  [BUGGY]      cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	double  tmpVec  =  Math.sqrt(previousCost,  restingCost);	  double    tmpVec    =    Math.sqrt(remainingCost,    previousCost);    	non-compiled	[CE]  variable  tmpVec  is  already  defined  in  method  doOptimize()	70	None	replace
616	[BUG]  [BUGGY]  tmpVec  =  Math.sqrt(random,  cols,  xNorm);  [CE]  cannot  find  symbol  random  [FE]                  AssertionFailedError      [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  tmpVec  =  Math.sqrt(random,  cols,  xNorm);  [BUGGY]      cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	tmpVec  =  Math.sqrt(random,  cols,  xNorm);	  tmpVec    =    Math.sqrt(cols,    xNorm);    	non-compiled	[CE]  cannot  find  symbol  random	32	None	replace
617	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  double  solvedCols  =  permutation[0]  *  diag[1]  +  1;  [BUGGY]      cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	add	double  solvedCols  =  permutation[0]  *  diag[1]  +  1;	  double    solvedCols    =    permutation[0]    *    diag[1];    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	90	14	replace
618	[BUG]  [BUGGY]  double  solvedCols  =  permutation[0]  *  diag[1]  +  1;  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  double  solvedCols  =  permutation[0]  *  diag[1]  +  1;  [BUGGY]      cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	double  solvedCols  =  permutation[0]  *  diag[1]  +  1;	  double    solvedCols    =    permutation[0]    *    diag[1];    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	90	14	replace
619	[BUG]  [BUGGY]  double  tmpVec  =  Math.sqrt(xK);  [CE]  variable  tmpVec  is  already  defined  in  method  doOptimize()  [FE]              AssertionFailedError      [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  double  tmpVec  =  Math.sqrt(xK);  [BUGGY]      cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	double  tmpVec  =  Math.sqrt(xK);	  double    tmpVec    =    Math.sqrt(result);    	non-compiled	[CE]  variable  tmpVec  is  already  defined  in  method  doOptimize()	92	None	replace
620	[BUG]  [BUGGY]  double  tmpVec  =  Math.sqrt(rect);  [CE]  variable  tmpVec  is  already  defined  in  method  doOptimize()  [FE]                AssertionFailedError      [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  double  tmpVec  =  Math.sqrt(rect);  [BUGGY]      cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	double  tmpVec  =  Math.sqrt(rect);	  double    tmpVec    =    Math.sqrt(result);    	non-compiled	[CE]  variable  tmpVec  is  already  defined  in  method  doOptimize()	92	None	replace
621	[BUG]  [BUGGY]  cost  -=  Math.ceil(diag);  [CE]  method  ceil  in  class  Math  cannot  be  applied  to  given  types;  [FE]    AssertionFailedError    [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  cost  -=  Math.ceil(diag);  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	cost  -=  Math.ceil(diag);	  cost    -=    Math.ceil(previousCost);    	non-compiled	[CE]  method  ceil  in  class  Math  cannot  be  applied  to  given  types;	145	None	replace
622	[BUG]  [BUGGY]  tmpVec  -=  Math.ceil(previousCost);  [CE]  bad  operand  types  for  binary  operator  '-'  [FE]      AssertionFailedError    [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  tmpVec  -=  Math.ceil(previousCost);  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	tmpVec  -=  Math.ceil(previousCost);	  cost    -=    Math.ceil(previousCost);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '-'	145	None	replace
623	[BUG]  [BUGGY]  tmpVec  =  Math.min(remainings,  xNorm,  cols);  [CE]  cannot  find  symbol  remainings  [FE]                      AssertionFailedError      [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  tmpVec  =  Math.min(remainings,  xNorm,  cols);  [BUGGY]      cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	tmpVec  =  Math.min(remainings,  xNorm,  cols);	  tmpVec    =    Math.min(previousCost,    xNorm,    cols);    	non-compiled	[CE]  cannot  find  symbol  remainings	56	None	replace
624	[BUG]  [BUGGY]  tmpVec  =  Math.min(lastIteration,  preRed,  xNorm,  cols);  [CE]  cannot  find  symbol  lastIteration  [FE]                        AssertionFailedError      [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  tmpVec  =  Math.min(lastIteration,  preRed,  xNorm,  cols);  [BUGGY]      cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	tmpVec  =  Math.min(lastIteration,  preRed,  xNorm,  cols);	  tmpVec    =    Math.min(previousCost,    xNorm,    cols);    	non-compiled	[CE]  cannot  find  symbol  lastIteration	56	None	replace
625	[BUG]  [BUGGY]  tmpVec  =  Math.sqrt(previousCost,  oldX);  [CE]  method  sqrt  in  class  Math  cannot  be  applied  to  given  types;  [FE]                AssertionFailedError      [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  tmpVec  =  Math.sqrt(previousCost,  oldX);  [BUGGY]      cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	tmpVec  =  Math.sqrt(previousCost,  oldX);	  tmpVec    =    Math.sqrt(previousCost,    cols);    	non-compiled	[CE]  method  sqrt  in  class  Math  cannot  be  applied  to  given  types;	81	None	replace
626	[BUG]  [BUGGY]  tmpVec  =  Math.sqrt(period,  previousCost,  cols);  [CE]  cannot  find  symbol  period  [FE]                  AssertionFailedError      [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  tmpVec  =  Math.sqrt(period,  previousCost,  cols);  [BUGGY]      cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	tmpVec  =  Math.sqrt(period,  previousCost,  cols);	  tmpVec    =    Math.sqrt(previousCost,    cols);    	non-compiled	[CE]  cannot  find  symbol  period	81	None	replace
627	[BUG]  [BUGGY]  tmpVec  =  Math.sqrt(previousCost,  diagR);  [CE]  method  sqrt  in  class  Math  cannot  be  applied  to  given  types;  [FE]                    AssertionFailedError      [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  tmpVec  =  Math.sqrt(previousCost,  diagR);  [BUGGY]      cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	tmpVec  =  Math.sqrt(previousCost,  diagR);	  tmpVec    =    Math.sqrt(previousCost,    cols);    	non-compiled	[CE]  method  sqrt  in  class  Math  cannot  be  applied  to  given  types;	81	None	replace
628	[BUG]  [BUGGY]  tmpVec  =  Math.sqrt(cols,  previousCost);  [CE]  method  sqrt  in  class  Math  cannot  be  applied  to  given  types;  [FE]                      AssertionFailedError      [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  tmpVec  =  Math.sqrt(cols,  previousCost);  [BUGGY]      cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	tmpVec  =  Math.sqrt(cols,  previousCost);	  tmpVec    =    Math.sqrt(previousCost,    cols);    	non-compiled	[CE]  method  sqrt  in  class  Math  cannot  be  applied  to  given  types;	81	None	replace
629	[BUG]  [BUGGY]  cost  =  new  VectorialPointValuePair();  [CE]  no  suitable  constructor  found  for  VectorialPointValuePair()  [FE]        AssertionFailedError      [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  cost  =  new  VectorialPointValuePair();  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	cost  =  new  VectorialPointValuePair();	  cost    =    tmp;    	non-compiled	[CE]  no  suitable  constructor  found  for  VectorialPointValuePair()	132	None	replace
630	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  double  solvedCols  =  permutation[0]  *  diag[1];  double  solveCols  =  permutation[0]  *  diag[1];  [BUGGY]      cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	add	double    solvedCols    =    permutation[0]    *    diag[1];    double  solveCols  =  permutation[0]  *  diag[1];	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	89	14	add
631	[BUG]  [BUGGY]  double  solvedCols  =  permutation[0]  *  diag[1];  double  solveCols  =  permutation[0]  *  diag[1];  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  double  solvedCols  =  permutation[0]  *  diag[1];  double  solveCols  =  permutation[0]  *  diag[1];  [BUGGY]      cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	double    solvedCols    =    permutation[0]    *    diag[1];    double  solveCols  =  permutation[0]  *  diag[1];	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	89	14	add
632	[BUG]  [BUGGY]  Integer  previousCost  =  Math.max(remainderCost,  xNorm);  [CE]  variable  previousCost  is  already  defined  in  method  doOptimize()  [FE]          AssertionFailedError      [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  Integer  previousCost  =  Math.max(remainderCost,  xNorm);  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	Integer  previousCost  =  Math.max(remainderCost,  xNorm);	  cost    =    Math.max(previousCost,    xNorm);    Integer    previousCost    =    Math.max(previousCost,    xNorm);    	non-compiled	[CE]  variable  previousCost  is  already  defined  in  method  doOptimize()	138	None	replace
633	[BUG]  [BUGGY]  cost  =  Math.sqrt(xNorm);  Integer  cost  =  Math.sqrt(xNorm);  [CE]  incompatible  types  [FE]    AssertionFailedError    [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  cost  =  Math.sqrt(xNorm);  Integer  cost  =  Math.sqrt(xNorm);  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	cost    =    Math.sqrt(xNorm);    Integer  cost  =  Math.sqrt(xNorm);	  	non-compiled	[CE]  incompatible  types	48	None	add
634	[BUG]  [BUGGY]  int  solvedCols  =  Math.min(colons.length,  cols.length);  [CE]  cannot  find  symbol  colons  [FE]          AssertionFailedError      [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  int  solvedCols  =  Math.min(colons.length,  cols.length);  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	int  solvedCols  =  Math.min(colons.length,  cols.length);	  int    solvedCols    =    Math.min(relatives.length,    cols.length);    	non-compiled	[CE]  cannot  find  symbol  colons	134	None	replace
635	[BUG]  [BUGGY]  cost  =  Math.max(remainder,  cost);  [CE]  cannot  find  symbol  remainder  [FE]    AssertionFailedError    [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  cost  =  Math.max(remainder,  cost);  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	cost  =  Math.max(remainder,  cost);	  cost    =    Math.max(previousCost,    cost);    	non-compiled	[CE]  cannot  find  symbol  remainder	16	None	replace
636	[BUG]  [BUGGY]  cost    =    xNorm;    xNorm  =  xNorm;  Integer  cost  =  xNorm;  xNorm  =  xNorm;  [CE]  incompatible  types  [FE]    AssertionFailedError    [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  cost    =    xNorm;    xNorm  =  xNorm;  Integer  cost  =  xNorm;  xNorm  =  xNorm;  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	cost        =        xNorm;        xNorm    =    xNorm;    Integer  cost  =  xNorm;  xNorm  =  xNorm;	  	non-compiled	[CE]  incompatible  types	45	None	add
637	[BUG]  [BUGGY]  cost  =  Math.max(previousCost,  lastIteration);  [CE]  cannot  find  symbol  lastIteration  [FE]          AssertionFailedError      [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  cost  =  Math.max(previousCost,  lastIteration);  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	cost  =  Math.max(previousCost,  lastIteration);	  cost    =    Math.max(lastIteration,    previousCost);    	non-compiled	[CE]  cannot  find  symbol  lastIteration	17	None	replace
638	[BUG]  [BUGGY]  cost  =  Math.max(remainings,  previousCost);  [CE]  cannot  find  symbol  remainings  [FE]            AssertionFailedError      [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  cost  =  Math.max(remainings,  previousCost);  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	cost  =  Math.max(remainings,  previousCost);	  cost    =    Math.max(lastIteration,    previousCost);    	non-compiled	[CE]  cannot  find  symbol  remainings	17	None	replace
639	[BUG]  [BUGGY]  cost  =  Math.max(remainings,  preRed);  [CE]  cannot  find  symbol  remainings  [FE]            AssertionFailedError      [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  cost  =  Math.max(remainings,  preRed);  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	cost  =  Math.max(remainings,  preRed);	  cost    =    Math.max(cosine,    preRed);    	non-compiled	[CE]  cannot  find  symbol  remainings	117	None	replace
640	[BUG]  [BUGGY]  tmpVec  =  Math.sqrt(xK);  [CE]  cannot  find  symbol  xK  [FE]              AssertionFailedError      [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  tmpVec  =  Math.sqrt(xK);  [BUGGY]      cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	tmpVec  =  Math.sqrt(xK);	  tmpVec    =    Math.sqrt(result);    	non-compiled	[CE]  cannot  find  symbol  xK	30	None	replace
641	[BUG]  [BUGGY]  int  previousCost  =  Math.max(remainderCost,  xNorm);  [CE]  variable  previousCost  is  already  defined  in  method  doOptimize()  [FE]              AssertionFailedError      [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  int  previousCost  =  Math.max(remainderCost,  xNorm);  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	int  previousCost  =  Math.max(remainderCost,  xNorm);	  cost    =    Math.max(previousCost,    xNorm);    int    previousCost    =    Math.max(previousCost,    xNorm);    	non-compiled	[CE]  variable  previousCost  is  already  defined  in  method  doOptimize()	38	None	replace
642	[BUG]  [BUGGY]  solvedCols  =  Math.min(lmDir,  oldX.length);  [CE]  no  suitable  method  found  for  min(double[],int)  [FE]        AssertionFailedError      [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  solvedCols  =  Math.min(lmDir,  oldX.length);  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	solvedCols  =  Math.min(lmDir,  oldX.length);	          solvedCols    =    Math.min(results.length,    oldX.length);    	non-compiled	[CE]  no  suitable  method  found  for  min(double[],int)	77	None	replace
643	[BUG]  [BUGGY]  solvedCols  =  Math.min(results,  oldX.length);  [CE]  cannot  find  symbol  results  [FE]          AssertionFailedError      [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  solvedCols  =  Math.min(results,  oldX.length);  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	solvedCols  =  Math.min(results,  oldX.length);	          solvedCols    =    Math.min(results.length,    oldX.length);    	non-compiled	[CE]  cannot  find  symbol  results	77	None	replace
644	[BUG]  [BUGGY]  Preconditions.checkState(cols  <  previousCost);  [CE]  cannot  find  symbol  Preconditions  [FE]          AssertionFailedError      [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  Preconditions.checkState(cols  <  previousCost);  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	Preconditions.checkState(cols  <  previousCost);	  cost    -=    previousCost;    if(previousCost!=    null)    {    cost    -=    previousCost;    }    else    {    for(int    j    =    0;    j    <    cols;    ++k)    {    double    xK    =    diag[k]    *    point[k];    xNorm+=    xK    *    	non-compiled	[CE]  cannot  find  symbol  Preconditions	156	None	replace
645	[BUG]  [BUGGY]  cost  =  Math.max(previousCost,  cost);  Integer  previousCost  =  Math.max(previousCost,  cost);  [CE]  variable  previousCost  is  already  defined  in  method  doOptimize()  [FE]    AssertionFailedError    [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  cost  =  Math.max(previousCost,  cost);  Integer  previousCost  =  Math.max(previousCost,  cost);  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	cost    =    Math.max(previousCost,    cost);    Integer  previousCost  =  Math.max(previousCost,  cost);	  	non-compiled	[CE]  variable  previousCost  is  already  defined  in  method  doOptimize()	15	None	add
646	[BUG]  [BUGGY]  cost  =  Math.max(previousCost,  cost);  Preconditions.checkState(cols!=  0);  [CE]  cannot  find  symbol  Preconditions  [FE]      AssertionFailedError    [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  cost  =  Math.max(previousCost,  cost);  Preconditions.checkState(cols!=  0);  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	cost    =    Math.max(previousCost,    cost);    Preconditions.checkState(cols!=  0);	  	non-compiled	[CE]  cannot  find  symbol  Preconditions	15	None	add
647	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError      [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  double  cols  =  diag[0]  *  point[0]  +  1;  [BUGGY]      cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	add	double  cols  =  diag[0]  *  point[0]  +  1;	  double    cols    =    diag[k]    *    point[k]    +    1;    	compilable	  [FE]  AssertionFailedError  	27	4	replace
648	[BUG]  [BUGGY]  double  cols  =  diag[0]  *  point[0]  +  1;  [FE]  AssertionFailedError  [FE]            AssertionFailedError      [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  double  cols  =  diag[0]  *  point[0]  +  1;  [BUGGY]      cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	double  cols  =  diag[0]  *  point[0]  +  1;	  double    cols    =    diag[k]    *    point[k]    +    1;    	compilable	  [FE]  AssertionFailedError  	27	4	replace
649	[BUG]  [BUGGY]  Double  solvedCols  =  diag[0]  *  permutation[1];  Integer  solvedCols  =  diag[0]  *  permutation[1];  [CE]  variable  solvedCols  is  already  defined  in  method  doOptimize()  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  Double  solvedCols  =  diag[0]  *  permutation[1];  Integer  solvedCols  =  diag[0]  *  permutation[1];  [BUGGY]      cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	Double    solvedCols    =    diag[0]    *    permutation[1];    Integer  solvedCols  =  diag[0]  *  permutation[1];	  	non-compiled	[CE]  variable  solvedCols  is  already  defined  in  method  doOptimize()	86	None	add
650	[BUG]  [BUGGY]  double  tmpVec  =  Math.sqrt(remainderCost);  [CE]  variable  tmpVec  is  already  defined  in  method  doOptimize()  [FE]                  AssertionFailedError      [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  double  tmpVec  =  Math.sqrt(remainderCost);  [BUGGY]      cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	double  tmpVec  =  Math.sqrt(remainderCost);	  double    tmpVec    =    Math.sqrt(previousCost);    	non-compiled	[CE]  variable  tmpVec  is  already  defined  in  method  doOptimize()	68	None	replace
651	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  double  cols  =  diag[1]  *  point[1];  [BUGGY]      cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	add	double  cols  =  diag[1]  *  point[1];	  double    cols    =    diag[0]    *    point[0];    	compilable	  [FE]  AssertionFailedError  	107	4	replace
652	[BUG]  [BUGGY]  double  cols  =  diag[1]  *  point[1];  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  double  cols  =  diag[1]  *  point[1];  [BUGGY]      cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	double  cols  =  diag[1]  *  point[1];	  double    cols    =    diag[0]    *    point[0];    	compilable	  [FE]  AssertionFailedError  	107	4	replace
653	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  double  cols  =  diag[0]  *  oldX[0];  [BUGGY]      cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	add	double  cols  =  diag[0]  *  oldX[0];	  double    cols    =    diag[0]    *    point[0];    	compilable	  [FE]  AssertionFailedError  	107	4	replace
654	[BUG]  [BUGGY]  double  cols  =  diag[0]  *  oldX[0];  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  double  cols  =  diag[0]  *  oldX[0];  [BUGGY]      cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	double  cols  =  diag[0]  *  oldX[0];	  double    cols    =    diag[0]    *    point[0];    	compilable	  [FE]  AssertionFailedError  	107	4	replace
655	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  cost  =  tmpVec.length  +  1;  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	add	cost  =  tmpVec.length  +  1;	  cost    =    tmpVec.length;    	compilable	  [FE]  AssertionFailedError  	20	12	replace
656	[BUG]  [BUGGY]  cost  =  tmpVec.length  +  1;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  cost  =  tmpVec.length  +  1;  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	cost  =  tmpVec.length  +  1;	  cost    =    tmpVec.length;    	compilable	  [FE]  AssertionFailedError  	20	12	replace
657	[BUG]  [BUGGY]  float  cost  =  xNorm;  [CE]  possible  loss  of  precision  [FE]          AssertionFailedError      [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  float  cost  =  xNorm;  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	float  cost  =  xNorm;	  cost    =    xNorm;    int    cost    =    xNorm;    	non-compiled	[CE]  possible  loss  of  precision	42	None	replace
658	[BUG]  [BUGGY]  float  cost  =  Math.max(previousCost,  xNorm);  [CE]  possible  loss  of  precision  [FE]        AssertionFailedError      [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  float  cost  =  Math.max(previousCost,  xNorm);  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	float  cost  =  Math.max(previousCost,  xNorm);	  cost    =    Math.max(previousCost,    xNorm);    int    cost    =    Math.max(previousCost,    xNorm);    	non-compiled	[CE]  possible  loss  of  precision	33	None	replace
659	[BUG]  [BUGGY]  tmpVec  =  Math.sqrt(remaining);  [CE]  cannot  find  symbol  remaining  [FE]                  AssertionFailedError      [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  tmpVec  =  Math.sqrt(remaining);  [BUGGY]      cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	tmpVec  =  Math.sqrt(remaining);	  tmpVec    =    Math.sqrt(remainingCost);    	non-compiled	[CE]  cannot  find  symbol  remaining	82	None	replace
660	[BUG]  [BUGGY]  tmpVec  -=  permutation.length;  [CE]  bad  operand  types  for  binary  operator  '-'  [FE]    AssertionFailedError    [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  tmpVec  -=  permutation.length;  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	tmpVec  -=  permutation.length;	  cost    -=    permutation.length;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '-'	122	None	replace
661	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  cost  =  Math.sqrt(cost);  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	add	cost  =  Math.sqrt(cost);	  cost    =    Math.sqrt(xNorm);    	compilable	  [FE]  AssertionFailedError  	49	12	replace
662	[BUG]  [BUGGY]  cost  =  Math.sqrt(cost);  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  cost  =  Math.sqrt(cost);  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	cost  =  Math.sqrt(cost);	  cost    =    Math.sqrt(xNorm);    	compilable	  [FE]  AssertionFailedError  	49	12	replace
663	[BUG]  [BUGGY]  cost  =  Math.sqrt(value);  [CE]  cannot  find  symbol  value  [FE]      AssertionFailedError    [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  cost  =  Math.sqrt(value);  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	cost  =  Math.sqrt(value);	  cost    =    Math.sqrt(xNorm);    	non-compiled	[CE]  cannot  find  symbol  value	49	None	replace
664	[BUG]  [BUGGY]  cost  -=  preRed;  Integer  cost  -=  preRed;  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  cost  -=  preRed;  Integer  cost  -=  preRed;  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	cost    -=    preRed;    Integer  cost  -=  preRed;	  	non-compiled	[CE]  ';'  expected	65	None	add
665	[BUG]  [BUGGY]  cost  -=  preRed;  double  preRed  =  Math.sqrt(preRed);  cost  -=  preRed;  [CE]  variable  preRed  is  already  defined  in  method  doOptimize()  [FE]      AssertionFailedError    [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  cost  -=  preRed;  double  preRed  =  Math.sqrt(preRed);  cost  -=  preRed;  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	cost    -=    preRed;    double  preRed  =  Math.sqrt(preRed);  cost  -=  preRed;	  	non-compiled	[CE]  variable  preRed  is  already  defined  in  method  doOptimize()	65	None	add
666	[BUG]  [BUGGY]  cost  -=  preRed;  double  preRed  =  Math.sqrt(preRed);  [CE]  variable  preRed  is  already  defined  in  method  doOptimize()  [FE]        AssertionFailedError    [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  cost  -=  preRed;  double  preRed  =  Math.sqrt(preRed);  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	cost    -=    preRed;    double  preRed  =  Math.sqrt(preRed);	  	non-compiled	[CE]  variable  preRed  is  already  defined  in  method  doOptimize()	65	None	add
667	[BUG]  [BUGGY]  cost  -=  preRed;  int  preRed  =  Math.min(preRed,  preRed);  [CE]  variable  preRed  is  already  defined  in  method  doOptimize()  [FE]          AssertionFailedError    [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  cost  -=  preRed;  int  preRed  =  Math.min(preRed,  preRed);  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	cost    -=    preRed;    int  preRed  =  Math.min(preRed,  preRed);	  	non-compiled	[CE]  variable  preRed  is  already  defined  in  method  doOptimize()	65	None	add
668	[BUG]  [BUGGY]  cost  -=  preRed;  int  preRed  =  Math.min(results.length,  preRed);  [CE]  variable  preRed  is  already  defined  in  method  doOptimize()  [FE]            AssertionFailedError    [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  cost  -=  preRed;  int  preRed  =  Math.min(results.length,  preRed);  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	cost    -=    preRed;    int  preRed  =  Math.min(results.length,  preRed);	  	non-compiled	[CE]  variable  preRed  is  already  defined  in  method  doOptimize()	65	None	add
669	[BUG]  [BUGGY]  cost  -=  permutation.length;  Integer  permutation  =  getRelativeTolerance();  [CE]  cannot  find  symbol  [FE]    AssertionFailedError    [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  cost  -=  permutation.length;  Integer  permutation  =  getRelativeTolerance();  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	cost    -=    permutation.length;    Integer  permutation  =  getRelativeTolerance();	  	non-compiled	[CE]  cannot  find  symbol	121	None	add
670	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  double  solvedCols  =  diag[0]  *  permutation[1]  +  1;  [BUGGY]      cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	add	double  solvedCols  =  diag[0]  *  permutation[1]  +  1;	  double    solvedCols    =    diag[0]    *    permutation[1];    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	85	13	replace
671	[BUG]  [BUGGY]  double  solvedCols  =  diag[0]  *  permutation[1]  +  1;  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  double  solvedCols  =  diag[0]  *  permutation[1]  +  1;  [BUGGY]      cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	double  solvedCols  =  diag[0]  *  permutation[1]  +  1;	  double    solvedCols    =    diag[0]    *    permutation[1];    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	85	13	replace
672	[BUG]  [BUGGY]  int  solvedCols  =  Math.min(resolvedCols,  oldY);  [CE]  cannot  find  symbol  resolvedCols  [FE]              AssertionFailedError      [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  int  solvedCols  =  Math.min(resolvedCols,  oldY);  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	int  solvedCols  =  Math.min(resolvedCols,  oldY);	          int    solvedCols    =    Math.min(resolvedCols,    oldX);    	non-compiled	[CE]  cannot  find  symbol  resolvedCols	97	None	replace
673	[BUG]  [BUGGY]  cost  =  Math.ceil(diag);  [CE]  method  ceil  in  class  Math  cannot  be  applied  to  given  types;  [FE]    AssertionFailedError    [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  cost  =  Math.ceil(diag);  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	cost  =  Math.ceil(diag);	  cost    =    Math.ceil(xNorm);    	non-compiled	[CE]  method  ceil  in  class  Math  cannot  be  applied  to  given  types;	51	None	replace
674	[BUG]  [BUGGY]  cost    =    xNorm;    cost  =  xNorm;  int  solvedCols  =  diag[0]  *  permutation[1];  [CE]  possible  loss  of  precision  [FE]    AssertionFailedError    [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  cost    =    xNorm;    cost  =  xNorm;  int  solvedCols  =  diag[0]  *  permutation[1];  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	cost        =        xNorm;        cost    =    xNorm;    int  solvedCols  =  diag[0]  *  permutation[1];	  	non-compiled	[CE]  possible  loss  of  precision	40	None	add
675	[BUG]  [BUGGY]  cost    =    xNorm;    cost  =  xNorm;  int  solvedCols  =  diag[0]  *  cols;  [CE]  possible  loss  of  precision  [FE]      AssertionFailedError    [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  cost    =    xNorm;    cost  =  xNorm;  int  solvedCols  =  diag[0]  *  cols;  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	cost        =        xNorm;        cost    =    xNorm;    int  solvedCols  =  diag[0]  *  cols;	  	non-compiled	[CE]  possible  loss  of  precision	40	None	add
676	[BUG]  [BUGGY]  cost    =    xNorm;    cost  =  xNorm;  int  solvedCols  =  diag[0]  *  permutation[0];  [CE]  possible  loss  of  precision  [FE]        AssertionFailedError    [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  cost    =    xNorm;    cost  =  xNorm;  int  solvedCols  =  diag[0]  *  permutation[0];  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	cost        =        xNorm;        cost    =    xNorm;    int  solvedCols  =  diag[0]  *  permutation[0];	  	non-compiled	[CE]  possible  loss  of  precision	40	None	add
677	[BUG]  [BUGGY]  cost  =  Math.max(relativeTolerance,  xNorm);  [CE]  cannot  find  symbol  relativeTolerance  [FE]        AssertionFailedError      [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  cost  =  Math.max(relativeTolerance,  xNorm);  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	cost  =  Math.max(relativeTolerance,  xNorm);	  cost    =    Math.max(remainder,    xNorm);    	non-compiled	[CE]  cannot  find  symbol  relativeTolerance	129	None	replace
678	[BUG]  [BUGGY]  cost  =  Math.max(remainder,  xK);  [CE]  cannot  find  symbol  remainder  [FE]          AssertionFailedError      [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  cost  =  Math.max(remainder,  xK);  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	cost  =  Math.max(remainder,  xK);	  cost    =    Math.max(remainder,    xNorm);    	non-compiled	[CE]  cannot  find  symbol  remainder	129	None	replace
679	[BUG]  [BUGGY]  int  solvedCols  =  Math.min(relatives.length,  oldY);  [CE]  cannot  find  symbol  relatives  [FE]        AssertionFailedError      [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  int  solvedCols  =  Math.min(relatives.length,  oldY);  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	int  solvedCols  =  Math.min(relatives.length,  oldY);	          int    solvedCols    =    Math.min(relatives.length,    oldX);    	non-compiled	[CE]  cannot  find  symbol  relatives	157	None	replace
680	[BUG]  [BUGGY]  cost    =    xNorm;    double  cost  =  xNorm;  int  solvedCols  =  diag[0]  *  permutation[1];  [CE]  possible  loss  of  precision  [FE]    AssertionFailedError    [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  cost    =    xNorm;    double  cost  =  xNorm;  int  solvedCols  =  diag[0]  *  permutation[1];  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	cost        =        xNorm;        double    cost    =    xNorm;    int  solvedCols  =  diag[0]  *  permutation[1];	  	non-compiled	[CE]  possible  loss  of  precision	43	None	add
681	[BUG]  [BUGGY]  cost    =    xNorm;    double  cost  =  xNorm;  int  solvedCols  =  diag[0]  *  permutation[0];  [CE]  possible  loss  of  precision  [FE]      AssertionFailedError    [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  cost    =    xNorm;    double  cost  =  xNorm;  int  solvedCols  =  diag[0]  *  permutation[0];  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	cost        =        xNorm;        double    cost    =    xNorm;    int  solvedCols  =  diag[0]  *  permutation[0];	  	non-compiled	[CE]  possible  loss  of  precision	43	None	add
682	[BUG]  [BUGGY]  cost    =    xNorm;    double  cost  =  xNorm;  double  cost  =  xNorm;  [CE]  variable  cost  is  already  defined  in  method  doOptimize()  [FE]        AssertionFailedError    [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  cost    =    xNorm;    double  cost  =  xNorm;  double  cost  =  xNorm;  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	cost        =        xNorm;        double    cost    =    xNorm;    double  cost  =  xNorm;	  	non-compiled	[CE]  variable  cost  is  already  defined  in  method  doOptimize()	43	None	add
683	[BUG]  [BUGGY]  tmpVec  =  Math.min(remainings,  xNorm,  1);  [CE]  cannot  find  symbol  remainings  [FE]                      AssertionFailedError      [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  tmpVec  =  Math.min(remainings,  xNorm,  1);  [BUGGY]      cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	tmpVec  =  Math.min(remainings,  xNorm,  1);	  tmpVec    =    Math.min(previousCost,    xNorm,    1);    	non-compiled	[CE]  cannot  find  symbol  remainings	143	None	replace
684	[BUG]  [BUGGY]  tmpVec  =  Math.min(results,  previousCost,  xNorm,  1);  [CE]  cannot  find  symbol  results  [FE]                        AssertionFailedError      [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  tmpVec  =  Math.min(results,  previousCost,  xNorm,  1);  [BUGGY]      cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	tmpVec  =  Math.min(results,  previousCost,  xNorm,  1);	  tmpVec    =    Math.min(previousCost,    xNorm,    1);    	non-compiled	[CE]  cannot  find  symbol  results	143	None	replace
685	[BUG]  [BUGGY]  tmpVec  =  Math.min(remainders,  xNorm,  1);  [CE]  cannot  find  symbol  remainders  [FE]                          AssertionFailedError      [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  tmpVec  =  Math.min(remainders,  xNorm,  1);  [BUGGY]      cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	tmpVec  =  Math.min(remainders,  xNorm,  1);	  tmpVec    =    Math.min(previousCost,    xNorm,    1);    	non-compiled	[CE]  cannot  find  symbol  remainders	143	None	replace
686	[BUG]  [BUGGY]  tmpVec  =  Math.sqrt(previousCost,  xK);  [CE]  cannot  find  symbol  xK  [FE]                    AssertionFailedError      [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  tmpVec  =  Math.sqrt(previousCost,  xK);  [BUGGY]      cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	tmpVec  =  Math.sqrt(previousCost,  xK);	  tmpVec    =    Math.sqrt(previousCost,    cost);    	non-compiled	[CE]  cannot  find  symbol  xK	83	None	replace
687	[BUG]  [BUGGY]  tmpVec  =  Math.sqrt(previousCost,  preRed);  [CE]  method  sqrt  in  class  Math  cannot  be  applied  to  given  types;  [FE]                      AssertionFailedError      [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  tmpVec  =  Math.sqrt(previousCost,  preRed);  [BUGGY]      cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	tmpVec  =  Math.sqrt(previousCost,  preRed);	  tmpVec    =    Math.sqrt(previousCost,    cost);    	non-compiled	[CE]  method  sqrt  in  class  Math  cannot  be  applied  to  given  types;	83	None	replace
688	[BUG]  [BUGGY]  int  solvedCols  =  Math.min(results.length,  xNorm);  [CE]  cannot  find  symbol  results  [FE]              AssertionFailedError      [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  int  solvedCols  =  Math.min(results.length,  xNorm);  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	int  solvedCols  =  Math.min(results.length,  xNorm);	  int    solvedCols    =    Math.min(results.length,    oldX);    	non-compiled	[CE]  cannot  find  symbol  results	75	None	replace
689	[BUG]  [BUGGY]  tmpVec  =  Math.min(relatives,  oldX[0]);  [CE]  cannot  find  symbol  relatives  [FE]              AssertionFailedError      [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  tmpVec  =  Math.min(relatives,  oldX[0]);  [BUGGY]      cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	tmpVec  =  Math.min(relatives,  oldX[0]);	  tmpVec    =    Math.min(remainings,    oldX[0]);    	non-compiled	[CE]  cannot  find  symbol  relatives	11	None	replace
690	[BUG]  [BUGGY]  cost  -=  xNorm;  Integer  cost  -=  xNorm;  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  cost  -=  xNorm;  Integer  cost  -=  xNorm;  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	cost    -=    xNorm;    Integer  cost  -=  xNorm;	  	non-compiled	[CE]  ';'  expected	63	None	add
691	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  cost  =  Math.max(cost,  cols);  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	add	cost  =  Math.max(cost,  cols);	  cost    =    Math.max(cost,    previousCost);    cost    =    Math.max(cost,    previousCost);    	compilable	  [FE]  AssertionFailedError  	22	8	replace
692	[BUG]  [BUGGY]  cost  =  Math.max(cost,  cols);  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  cost  =  Math.max(cost,  cols);  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	cost  =  Math.max(cost,  cols);	  cost    =    Math.max(cost,    previousCost);    cost    =    Math.max(cost,    previousCost);    	compilable	  [FE]  AssertionFailedError  	22	8	replace
693	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  cost  =  tmpVec.length;  double  cost  =  tmpVec.length;  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	add	cost    =    tmpVec.length;    double  cost  =  tmpVec.length;	  	compilable	  [FE]  AssertionFailedError  	19	12	add
694	[BUG]  [BUGGY]  cost  =  tmpVec.length;  double  cost  =  tmpVec.length;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  cost  =  tmpVec.length;  double  cost  =  tmpVec.length;  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	cost    =    tmpVec.length;    double  cost  =  tmpVec.length;	  	compilable	  [FE]  AssertionFailedError  	19	12	add
695	[BUG]  [BUGGY]  cost  -=  oldX  +  cols;  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]          AssertionFailedError      [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  cost  -=  oldX  +  cols;  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	cost  -=  oldX  +  cols;	  cost    -=    oldX;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	123	None	replace
696	[BUG]  [BUGGY]  cost  =  0;  Integer  cost  =  0;  [CE]  incompatible  types  [FE]    AssertionFailedError    [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  cost  =  0;  Integer  cost  =  0;  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	cost    =    0;    Integer  cost  =  0;	  	non-compiled	[CE]  incompatible  types	113	None	add
697	[BUG]  [BUGGY]  cost  =  0;  tmpVec  =  0;  [CE]  incompatible  types  [FE]      AssertionFailedError    [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  cost  =  0;  tmpVec  =  0;  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	cost    =    0;    tmpVec  =  0;	  	non-compiled	[CE]  incompatible  types	113	None	add
698	[BUG]  [BUGGY]  cost  =  Math.max(cost,  xNorm);  Integer  cost  =  Math.max(cost,  xNorm);  [CE]  incompatible  types  [FE]    AssertionFailedError    [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  cost  =  Math.max(cost,  xNorm);  Integer  cost  =  Math.max(cost,  xNorm);  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	cost    =    Math.max(cost,    xNorm);    Integer  cost  =  Math.max(cost,  xNorm);	  	non-compiled	[CE]  incompatible  types	126	None	add
699	[BUG]  [BUGGY]  cost  =  Math.max(cost,  xNorm);  tmpVec  =  Math.max(cost,  xNorm);  [CE]  incompatible  types  [FE]      AssertionFailedError    [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  cost  =  Math.max(cost,  xNorm);  tmpVec  =  Math.max(cost,  xNorm);  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	cost    =    Math.max(cost,    xNorm);    tmpVec  =  Math.max(cost,  xNorm);	  	non-compiled	[CE]  incompatible  types	126	None	add
700	[BUG]  [BUGGY]  cost    -=    previousCost;    cost  -=  previousCost;  int  previousCost  =  Math.min(previousCost,  xNorm);  cost  -=  previousCost;  [CE]  variable  previousCost  is  already  defined  in  method  doOptimize()  [FE]    AssertionFailedError    [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  cost    -=    previousCost;    cost  -=  previousCost;  int  previousCost  =  Math.min(previousCost,  xNorm);  cost  -=  previousCost;  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	cost        -=        previousCost;        cost    -=    previousCost;    int  previousCost  =  Math.min(previousCost,  xNorm);  cost  -=  previousCost;	  	non-compiled	[CE]  variable  previousCost  is  already  defined  in  method  doOptimize()	6	None	add
701	[BUG]  [BUGGY]  cost  =  tmpVec  *  oldRes;  [CE]  bad  operand  types  for  binary  operator  '*'  [FE]                AssertionFailedError      [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  cost  =  tmpVec  *  oldRes;  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	cost  =  tmpVec  *  oldRes;	  cost    =    tmpVec    *    tmpVec;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '*'	149	None	replace
702	[BUG]  [BUGGY]  cost  =  oldRes  *  tmpVec;  [CE]  bad  operand  types  for  binary  operator  '*'  [FE]                  AssertionFailedError      [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  cost  =  oldRes  *  tmpVec;  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	cost  =  oldRes  *  tmpVec;	  cost    =    tmpVec    *    tmpVec;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '*'	149	None	replace
703	[BUG]  [BUGGY]  cost  =  Math.max(cost,  oldX,  solvedCols);  [CE]  no  suitable  method  found  for  max(double,double[],int)  [FE]          AssertionFailedError      [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  cost  =  Math.max(cost,  oldX,  solvedCols);  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	cost  =  Math.max(cost,  oldX,  solvedCols);	  cost    =    Math.max(cost,    oldX);    	non-compiled	[CE]  no  suitable  method  found  for  max(double,double[],int)	128	None	replace
704	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  cost  =  Math.max(cost,  xNorm  +  1);  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	add	cost  =  Math.max(cost,  xNorm  +  1);	  cost    =    Math.max(cost,    xNorm);    	compilable	  [FE]  AssertionFailedError  	127	9	replace
705	[BUG]  [BUGGY]  cost  =  Math.max(cost,  xNorm  +  1);  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  cost  =  Math.max(cost,  xNorm  +  1);  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	cost  =  Math.max(cost,  xNorm  +  1);	  cost    =    Math.max(cost,    xNorm);    	compilable	  [FE]  AssertionFailedError  	127	9	replace
706	[BUG]  [BUGGY]  int  solvedCols  =  Math.min(oldCols.length,  oldX.length);  [CE]  cannot  find  symbol  oldCols  [FE]          AssertionFailedError      [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  int  solvedCols  =  Math.min(oldCols.length,  oldX.length);  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	int  solvedCols  =  Math.min(oldCols.length,  oldX.length);	  int    solvedCols    =    Math.min(results.length,    oldX.length);    	non-compiled	[CE]  cannot  find  symbol  oldCols	72	None	replace
707	[BUG]  [BUGGY]  int  solvedCols  =  Math.min(resolvedCols,  xNorm  +  1);  [CE]  cannot  find  symbol  resolvedCols  [FE]        AssertionFailedError      [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  int  solvedCols  =  Math.min(resolvedCols,  xNorm  +  1);  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	int  solvedCols  =  Math.min(resolvedCols,  xNorm  +  1);	          int    solvedCols    =    Math.min(resolvedCols,    xNorm);    	non-compiled	[CE]  cannot  find  symbol  resolvedCols	94	None	replace
708	[BUG]  [BUGGY]  int  solvedCols  =  Math.min(cols,  xNorm);  [CE]  possible  loss  of  precision  [FE]          AssertionFailedError      [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  int  solvedCols  =  Math.min(cols,  xNorm);  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	int  solvedCols  =  Math.min(cols,  xNorm);	          int    solvedCols    =    Math.min(resolvedCols,    xNorm);    	non-compiled	[CE]  possible  loss  of  precision	94	None	replace
709	[BUG]  [BUGGY]  cost  -=  tmpVec;  [CE]  bad  operand  types  for  binary  operator  '-'  [FE]    AssertionFailedError    [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  cost  -=  tmpVec;  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	cost  -=  tmpVec;	  cost    -=    preRed;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '-'	66	None	replace
710	[BUG]  [BUGGY]  double  previousCost  =  Math.max(remainderCost,  xNorm);  [CE]  variable  previousCost  is  already  defined  in  method  doOptimize()  [FE]        AssertionFailedError      [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  double  previousCost  =  Math.max(remainderCost,  xNorm);  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	double  previousCost  =  Math.max(remainderCost,  xNorm);	  cost    =    Math.max(previousCost,    xNorm);    double    previousCost    =    Math.max(previousCost,    xNorm);    	non-compiled	[CE]  variable  previousCost  is  already  defined  in  method  doOptimize()	137	None	replace
711	[BUG]  [BUGGY]  cost    =    Math.max(previousCost,    xNorm);    cost  =  Math.max(previousCost,  xNorm);  Integer  previousCost  =  Math.max(previousCost,  xNorm);  cost  =  Math.max(previousCost,  xNorm);  [CE]  variable  previousCost  is  already  defined  in  method  doOptimize()  [FE]    AssertionFailedError    [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  cost    =    Math.max(previousCost,    xNorm);    cost  =  Math.max(previousCost,  xNorm);  Integer  previousCost  =  Math.max(previousCost,  xNorm);  cost  =  Math.max(previousCost,  xNorm);  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	cost        =        Math.max(previousCost,        xNorm);        cost    =    Math.max(previousCost,    xNorm);    Integer  previousCost  =  Math.max(previousCost,  xNorm);  cost  =  Math.max(previousCost,  xNorm);	  	non-compiled	[CE]  variable  previousCost  is  already  defined  in  method  doOptimize()	36	None	add
712	[BUG]  [BUGGY]  cost    =    Math.max(previousCost,    xNorm);    cost  =  Math.max(previousCost,  xNorm);  Integer  previousCost  =  Math.min(previousCost,  xNorm);  cost  =  Math.max(previousCost,  xNorm);  [CE]  variable  previousCost  is  already  defined  in  method  doOptimize()  [FE]      AssertionFailedError    [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  cost    =    Math.max(previousCost,    xNorm);    cost  =  Math.max(previousCost,  xNorm);  Integer  previousCost  =  Math.min(previousCost,  xNorm);  cost  =  Math.max(previousCost,  xNorm);  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	cost        =        Math.max(previousCost,        xNorm);        cost    =    Math.max(previousCost,    xNorm);    Integer  previousCost  =  Math.min(previousCost,  xNorm);  cost  =  Math.max(previousCost,  xNorm);	  	non-compiled	[CE]  variable  previousCost  is  already  defined  in  method  doOptimize()	36	None	add
713	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]              AssertionFailedError      [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  cost  -=  permutation[0];  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	add	cost  -=  permutation[0];	  cost    -=    permutation;    	compilable	  [FE]  AssertionFailedError  	67	12	replace
714	[BUG]  [BUGGY]  cost  -=  permutation[0];  [FE]  AssertionFailedError  [FE]              AssertionFailedError      [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  cost  -=  permutation[0];  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	cost  -=  permutation[0];	  cost    -=    permutation;    	compilable	  [FE]  AssertionFailedError  	67	12	replace
715	[BUG]  [BUGGY]  Preconditions.checkNotNull(xNorm);  if(cost  <  =  0)  {  cost  =  0;  }  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError      [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  Preconditions.checkNotNull(xNorm);  if(cost  <  =  0)  {  cost  =  0;  }  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	Preconditions.checkNotNull(xNorm);  if(cost  <  =  0)  {  cost  =  0;  }	  cost    =    xNorm;    if(    cost    <    =    xNorm)    {    cost    =    xNorm;    }    	non-compiled	[CE]  illegal  start  of  expression	139	None	replace
716	[BUG]  [BUGGY]  Preconditions.checkNotNull(xNorm);  if(cost  >  0)  {  cost  =  xNorm;  }  [CE]  cannot  find  symbol  Preconditions  [FE]          AssertionFailedError      [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  Preconditions.checkNotNull(xNorm);  if(cost  >  0)  {  cost  =  xNorm;  }  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	Preconditions.checkNotNull(xNorm);  if(cost  >  0)  {  cost  =  xNorm;  }	  cost    =    xNorm;    if(    cost    <    =    xNorm)    {    cost    =    xNorm;    }    	non-compiled	[CE]  cannot  find  symbol  Preconditions	139	None	replace
717	[BUG]  [BUGGY]  cost    =    Math.max(cost,    previousCost);    cost  =  Math.max(cost,  previousCost);  Integer  cost  =  Math.max(cost,  previousCost);  cost  =  Math.max(cost,  previousCost);  [CE]  incompatible  types  [FE]    AssertionFailedError    [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  cost    =    Math.max(cost,    previousCost);    cost  =  Math.max(cost,  previousCost);  Integer  cost  =  Math.max(cost,  previousCost);  cost  =  Math.max(cost,  previousCost);  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	cost        =        Math.max(cost,        previousCost);        cost    =    Math.max(cost,    previousCost);    Integer  cost  =  Math.max(cost,  previousCost);  cost  =  Math.max(cost,  previousCost);	  	non-compiled	[CE]  incompatible  types	21	None	add
718	[BUG]  [BUGGY]  cost    =    Math.max(cost,    previousCost);    cost  =  Math.max(cost,  previousCost);  int  solvedCols  =  Math.max(diag,  previousCost);  cost  =  Math.max(cost,  previousCost);  [CE]  no  suitable  method  found  for  max(double[],double)  [FE]      AssertionFailedError    [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  cost    =    Math.max(cost,    previousCost);    cost  =  Math.max(cost,  previousCost);  int  solvedCols  =  Math.max(diag,  previousCost);  cost  =  Math.max(cost,  previousCost);  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	cost        =        Math.max(cost,        previousCost);        cost    =    Math.max(cost,    previousCost);    int  solvedCols  =  Math.max(diag,  previousCost);  cost  =  Math.max(cost,  previousCost);	  	non-compiled	[CE]  no  suitable  method  found  for  max(double[],double)	21	None	add
719	[BUG]  [BUGGY]  cost    =    Math.max(cost,    previousCost);    cost  =  Math.max(cost,  previousCost);  int  solvedCols  =  Math.max(diag[0],  previousCost);  cost  =  Math.max(cost,  previousCost);  [CE]  possible  loss  of  precision  [FE]        AssertionFailedError    [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  cost    =    Math.max(cost,    previousCost);    cost  =  Math.max(cost,  previousCost);  int  solvedCols  =  Math.max(diag[0],  previousCost);  cost  =  Math.max(cost,  previousCost);  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	cost        =        Math.max(cost,        previousCost);        cost    =    Math.max(cost,    previousCost);    int  solvedCols  =  Math.max(diag[0],  previousCost);  cost  =  Math.max(cost,  previousCost);	  	non-compiled	[CE]  possible  loss  of  precision	21	None	add
720	[BUG]  [BUGGY]  cost  =  new  VectorialPointValuePair(tmpVec,  oldRes,  costRelativeTolerance);  [CE]  no  suitable  constructor  found  for  VectorialPointValuePair(double[],double[],double)  [FE]              AssertionFailedError      [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  cost  =  new  VectorialPointValuePair(tmpVec,  oldRes,  costRelativeTolerance);  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	cost  =  new  VectorialPointValuePair(tmpVec,  oldRes,  costRelativeTolerance);	  cost    =    new    VectorialPointValuePair(tmpVec,    oldRes);    	non-compiled	[CE]  no  suitable  constructor  found  for  VectorialPointValuePair(double[],double[],double)	108	None	replace
721	[BUG]  [BUGGY]  CostRelativeTolerance  cost  =  new  VectorialPointValuePair(tmpVec,  oldRes,  costRelativeTolerance);  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  CostRelativeTolerance  cost  =  new  VectorialPointValuePair(tmpVec,  oldRes,  costRelativeTolerance);  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	CostRelativeTolerance  cost  =  new  VectorialPointValuePair(tmpVec,  oldRes,  costRelativeTolerance);	  cost    =    new    VectorialPointValuePair(tmpVec,    oldRes);    	non-compiled	[CE]  cannot  find  symbol	108	None	replace
722	[BUG]  [BUGGY]  Integer  cost  =  Math.max(previousCost,  xNorm  +  1);  [CE]  incompatible  types  [FE]                AssertionFailedError      [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  Integer  cost  =  Math.max(previousCost,  xNorm  +  1);  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	Integer  cost  =  Math.max(previousCost,  xNorm  +  1);	  cost    =    Math.max(previousCost,    xNorm);    Integer    cost    =    Math.max(previousCost,    xNorm);    	non-compiled	[CE]  incompatible  types	39	None	replace
723	[BUG]  [BUGGY]  cost  -=  Math.max(cosine,  preRed);  [CE]  cannot  find  symbol  cosine  [FE]          AssertionFailedError      [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  cost  -=  Math.max(cosine,  preRed);  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	cost  -=  Math.max(cosine,  preRed);	  cost    -=    Math.max(cosine,    previousCost);    	non-compiled	[CE]  cannot  find  symbol  cosine	146	None	replace
724	[BUG]  [BUGGY]  cost  -=  Math.max(cosine,  oldX);  [CE]  cannot  find  symbol  cosine  [FE]            AssertionFailedError      [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  cost  -=  Math.max(cosine,  oldX);  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	cost  -=  Math.max(cosine,  oldX);	  cost    -=    Math.max(cosine,    previousCost);    	non-compiled	[CE]  cannot  find  symbol  cosine	146	None	replace
725	[BUG]  [BUGGY]  int  cost  -=  permutation.length;  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  int  cost  -=  permutation.length;  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	int  cost  -=  permutation.length;	  cost    -=    previousCost;    int    cost    -=    previousCost;    	non-compiled	[CE]  ';'  expected	9	None	replace
726	[BUG]  [BUGGY]  tmpVec  =  Math.min(resistance,  oldX[0]  +  1);  [CE]  cannot  find  symbol  resistance  [FE]                AssertionFailedError      [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  tmpVec  =  Math.min(resistance,  oldX[0]  +  1);  [BUGGY]      cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	tmpVec  =  Math.min(resistance,  oldX[0]  +  1);	  tmpVec    =    Math.min(resistance,    oldX[0]);    	non-compiled	[CE]  cannot  find  symbol  resistance	12	None	replace
727	[BUG]  [BUGGY]  Integer  solvedCols  =  Math.min(oldCols,  0);  [CE]  cannot  find  symbol  oldCols  [FE]            AssertionFailedError      [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  Integer  solvedCols  =  Math.min(oldCols,  0);  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	Integer  solvedCols  =  Math.min(oldCols,  0);	          Integer    solvedCols    =    Math.min(resolvedCols,    0);    	non-compiled	[CE]  cannot  find  symbol  oldCols	96	None	replace
728	[BUG]  [BUGGY]  Integer  solvedCols  =  Math.max(relativeTolerance,  oldY);  [CE]  cannot  find  symbol  relativeTolerance  [FE]            AssertionFailedError      [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  Integer  solvedCols  =  Math.max(relativeTolerance,  oldY);  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	Integer  solvedCols  =  Math.max(relativeTolerance,  oldY);	  Integer    solvedCols    =    Math.max(relativeTolerance,    oldX);    	non-compiled	[CE]  cannot  find  symbol  relativeTolerance	135	None	replace
729	[BUG]  [BUGGY]  Preconditions.checkNotNull(previousCost);  if(previousCost!=  null)  {  cost  -=  previousCost;  }  [CE]  cannot  find  symbol  Preconditions  [FE]        AssertionFailedError      [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  Preconditions.checkNotNull(previousCost);  if(previousCost!=  null)  {  cost  -=  previousCost;  }  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	Preconditions.checkNotNull(previousCost);  if(previousCost!=  null)  {  cost  -=  previousCost;  }	  cost    -=    previousCost;    if(previousCost!=    null)    {    cost    -=    previousCost;    }    	non-compiled	[CE]  cannot  find  symbol  Preconditions	155	None	replace
730	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  double  cost  =  0;  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	add	double  cost  =  0;	  cost    =    xNorm;    double    cost    =    xNorm;    	compilable	  [FE]  AssertionFailedError  	44	4	replace
731	[BUG]  [BUGGY]  double  cost  =  0;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  double  cost  =  0;  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	double  cost  =  0;	  cost    =    xNorm;    double    cost    =    xNorm;    	compilable	  [FE]  AssertionFailedError  	44	4	replace
732	[BUG]  [BUGGY]  cost  -=  Math.ceil(previousCost);  int  previousCost  -=  Math.ceil(previousCost);  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  cost  -=  Math.ceil(previousCost);  int  previousCost  -=  Math.ceil(previousCost);  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	cost    -=    Math.ceil(previousCost);    int  previousCost  -=  Math.ceil(previousCost);	  	non-compiled	[CE]  ';'  expected	144	None	add
733	[BUG]  [BUGGY]  cost  -=  Math.ceil(previousCost);  Integer  cost  -=  Math.ceil(previousCost);  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  cost  -=  Math.ceil(previousCost);  Integer  cost  -=  Math.ceil(previousCost);  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	cost    -=    Math.ceil(previousCost);    Integer  cost  -=  Math.ceil(previousCost);	  	non-compiled	[CE]  ';'  expected	144	None	add
734	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError      [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  Integer  solvedCols  =  Math.min(lmDir.length,  oldX.length);  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	add	Integer  solvedCols  =  Math.min(lmDir.length,  oldX.length);	  Integer    solvedCols    =    Math.min(results.length,    oldX.length);    	compilable	  [FE]  AssertionFailedError  	71	4	replace
735	[BUG]  [BUGGY]  Integer  solvedCols  =  Math.min(lmDir.length,  oldX.length);  [FE]  AssertionFailedError  [FE]        AssertionFailedError      [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  Integer  solvedCols  =  Math.min(lmDir.length,  oldX.length);  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	Integer  solvedCols  =  Math.min(lmDir.length,  oldX.length);	  Integer    solvedCols    =    Math.min(results.length,    oldX.length);    	compilable	  [FE]  AssertionFailedError  	71	4	replace
736	[BUG]  [BUGGY]  tmpVec  =  Math.sqrt(xNorm  +  1);  [CE]  incompatible  types  [FE]                AssertionFailedError      [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  tmpVec  =  Math.sqrt(xNorm  +  1);  [BUGGY]      cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	tmpVec  =  Math.sqrt(xNorm  +  1);	  tmpVec    =    Math.sqrt(previousCost    +    1);    	non-compiled	[CE]  incompatible  types	100	None	replace
737	[BUG]  [BUGGY]  double  previousCost  =  Math.sqrt(previousCost);  [CE]  variable  previousCost  is  already  defined  in  method  doOptimize()  [FE]                    AssertionFailedError      [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  double  previousCost  =  Math.sqrt(previousCost);  [BUGGY]      cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	double  previousCost  =  Math.sqrt(previousCost);	  double    residualCost    =    Math.sqrt(remainingCost);    	non-compiled	[CE]  variable  previousCost  is  already  defined  in  method  doOptimize()	116	None	replace
738	[BUG]  [BUGGY]  Integer  cost  =  Math.max(cost,  xNorm);  [CE]  incompatible  types  [FE]                AssertionFailedError      [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  Integer  cost  =  Math.max(cost,  xNorm);  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	Integer  cost  =  Math.max(cost,  xNorm);	  cost    =    Math.max(cost,    previousCost);    Integer    cost    =    Math.max(cost,    previousCost);    	non-compiled	[CE]  incompatible  types	26	None	replace
739	[BUG]  [BUGGY]  tmpVec  =  Math.min(lastIteration,  previousCost,  xNorm,  1);  [CE]  cannot  find  symbol  lastIteration  [FE]                      AssertionFailedError      [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  tmpVec  =  Math.min(lastIteration,  previousCost,  xNorm,  1);  [BUGGY]      cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	tmpVec  =  Math.min(lastIteration,  previousCost,  xNorm,  1);	  tmpVec    =    Math.min(previousCost,    xNorm,    1);    	non-compiled	[CE]  cannot  find  symbol  lastIteration	143	None	replace
740	[BUG]  [BUGGY]  tmpVec  =  Math.min(remainders,  previousCost,  xNorm,  1);  [CE]  cannot  find  symbol  remainders  [FE]                        AssertionFailedError      [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  tmpVec  =  Math.min(remainders,  previousCost,  xNorm,  1);  [BUGGY]      cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	tmpVec  =  Math.min(remainders,  previousCost,  xNorm,  1);	  tmpVec    =    Math.min(previousCost,    xNorm,    1);    	non-compiled	[CE]  cannot  find  symbol  remainders	143	None	replace
741	[BUG]  [BUGGY]  cost    -=    previousCost;    cost  -=  previousCost;  if(previousCost  <  =  cols)  {  cost  -=  previousCost;  cost  -=  previousCost;  }  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  cost    -=    previousCost;    cost  -=  previousCost;  if(previousCost  <  =  cols)  {  cost  -=  previousCost;  cost  -=  previousCost;  }  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	cost        -=        previousCost;        cost    -=    previousCost;    if(previousCost  <  =  cols)  {  cost  -=  previousCost;  cost  -=  previousCost;  }	  	non-compiled	[CE]  illegal  start  of  expression	6	None	add
742	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  double  solvedCols  =  diag[0]  *  point[1];  [BUGGY]      cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	add	double  solvedCols  =  diag[0]  *  point[1];	  double    solvedCols    =    diag[0]    *    permutation[1];    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	85	13	replace
743	[BUG]  [BUGGY]  double  solvedCols  =  diag[0]  *  point[1];  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  double  solvedCols  =  diag[0]  *  point[1];  [BUGGY]      cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	double  solvedCols  =  diag[0]  *  point[1];	  double    solvedCols    =    diag[0]    *    permutation[1];    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	85	13	replace
744	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  double  solvedCols  =  diag[0]  *  xNorm;  [BUGGY]      cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	add	double  solvedCols  =  diag[0]  *  xNorm;	  double    solvedCols    =    diag[0]    *    permutation[1];    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	85	14	replace
745	[BUG]  [BUGGY]  double  solvedCols  =  diag[0]  *  xNorm;  [FE]  ArrayIndexOutOfBoundsException  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  double  solvedCols  =  diag[0]  *  xNorm;  [BUGGY]      cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	double  solvedCols  =  diag[0]  *  xNorm;	  double    solvedCols    =    diag[0]    *    permutation[1];    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	85	14	replace
746	[BUG]  [BUGGY]  cost  =  0;  for(int  j  =  0;  j  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  [CE]  cannot  find  symbol  k  [FE]    AssertionFailedError    [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  cost  =  0;  for(int  j  =  0;  j  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	cost    =    0;    for(int  j  =  0;  j  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }	  	non-compiled	[CE]  cannot  find  symbol  k	113	None	add
747	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  cost  =  0;  for(int  i  =  0;  i  <  cols;  ++i)  {  double  xK  =  diag[i]  *  point[i];  xNorm+=  xK  *  xK;  }  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	add	cost    =    0;    for(int  i  =  0;  i  <  cols;  ++i)  {  double  xK  =  diag[i]  *  point[i];  xNorm+=  xK  *  xK;  }	  	compilable	  [FE]  AssertionFailedError  	113	6	add
748	[BUG]  [BUGGY]  cost  =  0;  for(int  i  =  0;  i  <  cols;  ++i)  {  double  xK  =  diag[i]  *  point[i];  xNorm+=  xK  *  xK;  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  cost  =  0;  for(int  i  =  0;  i  <  cols;  ++i)  {  double  xK  =  diag[i]  *  point[i];  xNorm+=  xK  *  xK;  }  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	cost    =    0;    for(int  i  =  0;  i  <  cols;  ++i)  {  double  xK  =  diag[i]  *  point[i];  xNorm+=  xK  *  xK;  }	  	compilable	  [FE]  AssertionFailedError  	113	6	add
749	[BUG]  [BUGGY]  cost  =  0;  for(int  j  =  0;  j  <  cols;  ++j)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  [CE]  cannot  find  symbol  k  [FE]        AssertionFailedError    [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  cost  =  0;  for(int  j  =  0;  j  <  cols;  ++j)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	cost    =    0;    for(int  j  =  0;  j  <  cols;  ++j)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }	  	non-compiled	[CE]  cannot  find  symbol  k	113	None	add
750	[BUG]  [BUGGY]  double  previousCost  =  Math.max(period,  xNorm);  [CE]  variable  previousCost  is  already  defined  in  method  doOptimize()  [FE]        AssertionFailedError      [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  double  previousCost  =  Math.max(period,  xNorm);  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	double  previousCost  =  Math.max(period,  xNorm);	  cost    =    Math.max(previousCost,    xNorm);    double    previousCost    =    Math.max(previousCost,    xNorm);    	non-compiled	[CE]  variable  previousCost  is  already  defined  in  method  doOptimize()	137	None	replace
751	[BUG]  [BUGGY]  tmpVec  =  Math.sqrt(previousCost,  xNorm1,  1);  [CE]  cannot  find  symbol  xNorm1  [FE]                  AssertionFailedError      [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  tmpVec  =  Math.sqrt(previousCost,  xNorm1,  1);  [BUGGY]      cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	tmpVec  =  Math.sqrt(previousCost,  xNorm1,  1);	  tmpVec    =    Math.sqrt(xNorm,    1);    	non-compiled	[CE]  cannot  find  symbol  xNorm1	154	None	replace
752	[BUG]  [BUGGY]  tmpVec  =  Math.sqrt(v0,  xNorm,  1);  [CE]  cannot  find  symbol  v0  [FE]                    AssertionFailedError      [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  tmpVec  =  Math.sqrt(v0,  xNorm,  1);  [BUGGY]      cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	tmpVec  =  Math.sqrt(v0,  xNorm,  1);	  tmpVec    =    Math.sqrt(xNorm,    1);    	non-compiled	[CE]  cannot  find  symbol  v0	154	None	replace
753	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError      [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  Integer  solvedCols  =  Math.min(oldRes.length,  oldX.length);  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	add	Integer  solvedCols  =  Math.min(oldRes.length,  oldX.length);	  Integer    solvedCols    =    Math.min(results.length,    oldX.length);    	compilable	  [FE]  AssertionFailedError  	71	4	replace
754	[BUG]  [BUGGY]  Integer  solvedCols  =  Math.min(oldRes.length,  oldX.length);  [FE]  AssertionFailedError  [FE]        AssertionFailedError      [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  Integer  solvedCols  =  Math.min(oldRes.length,  oldX.length);  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	Integer  solvedCols  =  Math.min(oldRes.length,  oldX.length);	  Integer    solvedCols    =    Math.min(results.length,    oldX.length);    	compilable	  [FE]  AssertionFailedError  	71	4	replace
755	[BUG]  [BUGGY]  int  solvedCols  =  Math.min(cols.length,  resolvedCols.length);  [CE]  int  cannot  be  dereferenced  [FE]          AssertionFailedError      [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  int  solvedCols  =  Math.min(cols.length,  resolvedCols.length);  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	int  solvedCols  =  Math.min(cols.length,  resolvedCols.length);	  int    solvedCols    =    Math.min(relatives.length,    cols.length);    	non-compiled	[CE]  int  cannot  be  dereferenced	134	None	replace
756	[BUG]  [BUGGY]  int  solvedCols  =  Math.min(lmDir.results.length,  oldX);  [CE]  cannot  find  symbol  results  [FE]              AssertionFailedError      [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  int  solvedCols  =  Math.min(lmDir.results.length,  oldX);  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	int  solvedCols  =  Math.min(lmDir.results.length,  oldX);	  int    solvedCols    =    Math.min(results.length,    oldX);    	non-compiled	[CE]  cannot  find  symbol  results	75	None	replace
757	[BUG]  [BUGGY]  int  solvedCols  =  Math.min(oldCols.length,  oldX);  [CE]  cannot  find  symbol  oldCols  [FE]                AssertionFailedError      [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  int  solvedCols  =  Math.min(oldCols.length,  oldX);  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	int  solvedCols  =  Math.min(oldCols.length,  oldX);	  int    solvedCols    =    Math.min(results.length,    oldX);    	non-compiled	[CE]  cannot  find  symbol  oldCols	75	None	replace
758	[BUG]  [BUGGY]  Cost  =  Math.max(cosine,  xNorm);  [CE]  cannot  find  symbol  Cost  [FE]            AssertionFailedError      [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  Cost  =  Math.max(cosine,  xNorm);  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	Cost  =  Math.max(cosine,  xNorm);	  cost    =    Math.max(cosine,    xNorm);    	non-compiled	[CE]  cannot  find  symbol  Cost	140	None	replace
759	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  Double  solvedCols  =  diag[0]  *  xNorm;  [BUGGY]      cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	add	Double  solvedCols  =  diag[0]  *  xNorm;	  Double    solvedCols    =    diag[0]    *    permutation[1];    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	87	14	replace
760	[BUG]  [BUGGY]  Double  solvedCols  =  diag[0]  *  xNorm;  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  Double  solvedCols  =  diag[0]  *  xNorm;  [BUGGY]      cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	Double  solvedCols  =  diag[0]  *  xNorm;	  Double    solvedCols    =    diag[0]    *    permutation[1];    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	87	14	replace
761	[BUG]  [BUGGY]  cost  =  Math.abs(xNorm);  Integer  tmpVec  =  Math.abs(tmpVec);  [CE]  variable  tmpVec  is  already  defined  in  method  doOptimize()  [FE]    AssertionFailedError    [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  cost  =  Math.abs(xNorm);  Integer  tmpVec  =  Math.abs(tmpVec);  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	cost    =    Math.abs(xNorm);    Integer  tmpVec  =  Math.abs(tmpVec);	  	non-compiled	[CE]  variable  tmpVec  is  already  defined  in  method  doOptimize()	111	None	add
762	[BUG]  [BUGGY]  cost  =  Math.abs(xNorm);  Integer  tmpVec  =  Math.abs(xNorm);  [CE]  variable  tmpVec  is  already  defined  in  method  doOptimize()  [FE]      AssertionFailedError    [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  cost  =  Math.abs(xNorm);  Integer  tmpVec  =  Math.abs(xNorm);  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	cost    =    Math.abs(xNorm);    Integer  tmpVec  =  Math.abs(xNorm);	  	non-compiled	[CE]  variable  tmpVec  is  already  defined  in  method  doOptimize()	111	None	add
763	[BUG]  [BUGGY]  if(previousCost!=  null)  {  cost  =  Math.max(cost,  previousCost);  }  [CE]  incomparable  types:  double  and  <null>  [FE]          AssertionFailedError      [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  if(previousCost!=  null)  {  cost  =  Math.max(cost,  previousCost);  }  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	if(previousCost!=  null)  {  cost  =  Math.max(cost,  previousCost);  }	  cost    =    Math.max(cost,    previousCost);    if(previousCost!=    null)    {    cost    =    Math.max(cost,    previousCost);    }    	non-compiled	[CE]  incomparable  types:  double  and  <null>	131	None	replace
764	[BUG]  [BUGGY]  Preconditions.checkState(oldX  >  0);  [CE]  bad  operand  types  for  binary  operator  '>'  [FE]            AssertionFailedError      [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  Preconditions.checkState(oldX  >  0);  [BUGGY]      cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	Preconditions.checkState(oldX  >  0);	  Preconditions.checkState(oldX    <    0);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>'	150	None	replace
765	[BUG]  [BUGGY]  tmpVec  =  Math.min(previousCost,  xNorm,  xNorm);  [CE]  no  suitable  method  found  for  min(double,double,double)  [FE]                    AssertionFailedError      [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  tmpVec  =  Math.min(previousCost,  xNorm,  xNorm);  [BUGGY]      cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	tmpVec  =  Math.min(previousCost,  xNorm,  xNorm);	  tmpVec    =    Math.min(result,    previousCost,    xNorm);    	non-compiled	[CE]  no  suitable  method  found  for  min(double,double,double)	55	None	replace
766	[BUG]  [BUGGY]  tmpVec  =  Math.min(result,  oldX,  oldCost);  [CE]  cannot  find  symbol  result  [FE]                      AssertionFailedError      [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  tmpVec  =  Math.min(result,  oldX,  oldCost);  [BUGGY]      cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	tmpVec  =  Math.min(result,  oldX,  oldCost);	  tmpVec    =    Math.min(result,    previousCost,    xNorm);    	non-compiled	[CE]  cannot  find  symbol  result	55	None	replace
767	[BUG]  [BUGGY]  tmpVec  =  Math.min(result,  oldX,  previousCost);  [CE]  cannot  find  symbol  result  [FE]                        AssertionFailedError      [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  tmpVec  =  Math.min(result,  oldX,  previousCost);  [BUGGY]      cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	tmpVec  =  Math.min(result,  oldX,  previousCost);	  tmpVec    =    Math.min(result,    previousCost,    xNorm);    	non-compiled	[CE]  cannot  find  symbol  result	55	None	replace
768	[BUG]  [BUGGY]  Integer  solvedCols  =  Math.min(cols,  xNorm);  [CE]  incompatible  types  [FE]          AssertionFailedError      [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  Integer  solvedCols  =  Math.min(cols,  xNorm);  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	Integer  solvedCols  =  Math.min(cols,  xNorm);	          Integer    solvedCols    =    Math.min(resolvedCols,    xNorm);    	non-compiled	[CE]  incompatible  types	95	None	replace
769	[BUG]  [BUGGY]  double  cost  =  Math.max(remainderCost,  xNorm);  [CE]  cannot  find  symbol  remainderCost  [FE]    AssertionFailedError    [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  double  cost  =  Math.max(remainderCost,  xNorm);  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	double  cost  =  Math.max(remainderCost,  xNorm);	  cost    =    Math.max(previousCost,    xNorm);    double    cost    =    Math.max(previousCost,    xNorm);    	non-compiled	[CE]  cannot  find  symbol  remainderCost	35	None	replace
770	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError      [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  previousCost  -=  previousCost;  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	add	previousCost  -=  previousCost;	  cost    -=    previousCost;    if(previousCost!=    null)    {    cost    -=    previousCost;    }    	compilable	  [FE]  AssertionFailedError  	155	4	replace
771	[BUG]  [BUGGY]  previousCost  -=  previousCost;  [FE]  AssertionFailedError  [FE]        AssertionFailedError      [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  previousCost  -=  previousCost;  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	previousCost  -=  previousCost;	  cost    -=    previousCost;    if(previousCost!=    null)    {    cost    -=    previousCost;    }    	compilable	  [FE]  AssertionFailedError  	155	4	replace
772	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  cost  -=  xNorm;  for(int  i  =  0;  i  <  cols;  ++i)  {  double  xK  =  diag[i]  *  point[i];  xNorm+=  xK  *  xNorm;  }  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	add	cost    -=    xNorm;    for(int  i  =  0;  i  <  cols;  ++i)  {  double  xK  =  diag[i]  *  point[i];  xNorm+=  xK  *  xNorm;  }	  	compilable	  [FE]  AssertionFailedError  	63	9	add
773	[BUG]  [BUGGY]  cost  -=  xNorm;  for(int  i  =  0;  i  <  cols;  ++i)  {  double  xK  =  diag[i]  *  point[i];  xNorm+=  xK  *  xNorm;  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  cost  -=  xNorm;  for(int  i  =  0;  i  <  cols;  ++i)  {  double  xK  =  diag[i]  *  point[i];  xNorm+=  xK  *  xNorm;  }  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	cost    -=    xNorm;    for(int  i  =  0;  i  <  cols;  ++i)  {  double  xK  =  diag[i]  *  point[i];  xNorm+=  xK  *  xNorm;  }	  	compilable	  [FE]  AssertionFailedError  	63	9	add
774	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  cost  -=  xNorm;  for(int  i  =  0;  i  <  cols;  ++i)  {  double  xK  =  diag[i]  *  point[i];  xNorm+=  xK  *  xK;  }  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	add	cost    -=    xNorm;    for(int  i  =  0;  i  <  cols;  ++i)  {  double  xK  =  diag[i]  *  point[i];  xNorm+=  xK  *  xK;  }	  	compilable	  [FE]  AssertionFailedError  	63	6	add
775	[BUG]  [BUGGY]  cost  -=  xNorm;  for(int  i  =  0;  i  <  cols;  ++i)  {  double  xK  =  diag[i]  *  point[i];  xNorm+=  xK  *  xK;  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  cost  -=  xNorm;  for(int  i  =  0;  i  <  cols;  ++i)  {  double  xK  =  diag[i]  *  point[i];  xNorm+=  xK  *  xK;  }  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	cost    -=    xNorm;    for(int  i  =  0;  i  <  cols;  ++i)  {  double  xK  =  diag[i]  *  point[i];  xNorm+=  xK  *  xK;  }	  	compilable	  [FE]  AssertionFailedError  	63	6	add
776	[BUG]  [BUGGY]  tmpVec  =  Math.sqrt(random,  xNorm,  firstIteration);  [CE]  cannot  find  symbol  random  [FE]              AssertionFailedError      [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  tmpVec  =  Math.sqrt(random,  xNorm,  firstIteration);  [BUGGY]      cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	tmpVec  =  Math.sqrt(random,  xNorm,  firstIteration);	  tmpVec    =    Math.sqrt(xNorm,    firstIteration);    	non-compiled	[CE]  cannot  find  symbol  random	152	None	replace
777	[BUG]  [BUGGY]  tmpVec  =  Math.sqrt(v0,  xNorm,  firstIteration);  [CE]  cannot  find  symbol  v0  [FE]                AssertionFailedError      [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  tmpVec  =  Math.sqrt(v0,  xNorm,  firstIteration);  [BUGGY]      cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	tmpVec  =  Math.sqrt(v0,  xNorm,  firstIteration);	  tmpVec    =    Math.sqrt(xNorm,    firstIteration);    	non-compiled	[CE]  cannot  find  symbol  v0	152	None	replace
778	[BUG]  [BUGGY]  cost  -=  cols.length;  [CE]  int  cannot  be  dereferenced  [FE]    AssertionFailedError    [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  cost  -=  cols.length;  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	cost  -=  cols.length;	  cost    -=    permutation.length;    	non-compiled	[CE]  int  cannot  be  dereferenced	122	None	replace
779	[BUG]  [BUGGY]  Double  solvedCols  =  diag[0]  *  permutation[1];  Double  solvedCols  =  diag[0]  *  permutation[2];  [CE]  variable  solvedCols  is  already  defined  in  method  doOptimize()  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  Double  solvedCols  =  diag[0]  *  permutation[1];  Double  solvedCols  =  diag[0]  *  permutation[2];  [BUGGY]      cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	Double    solvedCols    =    diag[0]    *    permutation[1];    Double  solvedCols  =  diag[0]  *  permutation[2];	  	non-compiled	[CE]  variable  solvedCols  is  already  defined  in  method  doOptimize()	86	None	add
780	[BUG]  [BUGGY]  int  solvedCols  =  Math.min(oldX,  residuals.length);  [CE]  no  suitable  method  found  for  min(double[],int)  [FE]        AssertionFailedError      [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  int  solvedCols  =  Math.min(oldX,  residuals.length);  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	int  solvedCols  =  Math.min(oldX,  residuals.length);	          int    solvedCols    =    Math.min(relatives.length,    oldX);    	non-compiled	[CE]  no  suitable  method  found  for  min(double[],int)	157	None	replace
781	[BUG]  [BUGGY]  int  solvedCols  =  Math.min(relatives.length,  oldX  +  1);  [CE]  cannot  find  symbol  relatives  [FE]          AssertionFailedError      [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  int  solvedCols  =  Math.min(relatives.length,  oldX  +  1);  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	int  solvedCols  =  Math.min(relatives.length,  oldX  +  1);	          int    solvedCols    =    Math.min(relatives.length,    oldX);    	non-compiled	[CE]  cannot  find  symbol  relatives	157	None	replace
782	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  cost  -=  permutation.length;  if(permutation.length  >  0)  {  cost  -=  permutation.length;  }  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	add	cost    -=    permutation.length;    if(permutation.length  >  0)  {  cost  -=  permutation.length;  }	  	compilable	  [FE]  AssertionFailedError  	121	2	add
783	[BUG]  [BUGGY]  cost  -=  permutation.length;  if(permutation.length  >  0)  {  cost  -=  permutation.length;  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  cost  -=  permutation.length;  if(permutation.length  >  0)  {  cost  -=  permutation.length;  }  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	cost    -=    permutation.length;    if(permutation.length  >  0)  {  cost  -=  permutation.length;  }	  	compilable	  [FE]  AssertionFailedError  	121	2	add
784	[BUG]  [BUGGY]  cost  -=  permutation.length;  if(permutation.length  >  0)  {  cost  -=  permutation.length;  }  else  {  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  cost  -=  permutation.length;  if(permutation.length  >  0)  {  cost  -=  permutation.length;  }  else  {  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	cost    -=    permutation.length;    if(permutation.length  >  0)  {  cost  -=  permutation.length;  }  else  {	  	non-compiled	[CE]  illegal  start  of  expression	121	None	add
785	[BUG]  [BUGGY]  int  previousCost  =  Math.max(0,  previousCost);  [CE]  variable  previousCost  is  already  defined  in  method  doOptimize()  [FE]          AssertionFailedError      [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  int  previousCost  =  Math.max(0,  previousCost);  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	int  previousCost  =  Math.max(0,  previousCost);	  cost    =    Math.max(cost,    previousCost);    int    previousCost    =    Math.max(cost,    previousCost);    	non-compiled	[CE]  variable  previousCost  is  already  defined  in  method  doOptimize()	23	None	replace
786	[BUG]  [BUGGY]  double  tmpVec  =  Math.sqrt(v);  [CE]  variable  tmpVec  is  already  defined  in  method  doOptimize()  [FE]            AssertionFailedError      [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  double  tmpVec  =  Math.sqrt(v);  [BUGGY]      cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	double  tmpVec  =  Math.sqrt(v);	  double    tmpVec    =    Math.sqrt(diag);    	non-compiled	[CE]  variable  tmpVec  is  already  defined  in  method  doOptimize()	110	None	replace
787	[BUG]  [BUGGY]  cost  =  xNorm  +  1;  if(  cost  <  =  xNorm  +  1)  {  cost  =  xNorm  +  1;  }  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  cost  =  xNorm  +  1;  if(  cost  <  =  xNorm  +  1)  {  cost  =  xNorm  +  1;  }  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	cost    =    xNorm    +    1;    if(  cost  <  =  xNorm  +  1)  {  cost  =  xNorm  +  1;  }	  	non-compiled	[CE]  illegal  start  of  expression	52	None	add
788	[BUG]  [BUGGY]  cost  =  xNorm  +  1;  if(  cost  <  =  xNorm  +  1)  {  cost  =  xNorm  +  1;  }  else  {  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  cost  =  xNorm  +  1;  if(  cost  <  =  xNorm  +  1)  {  cost  =  xNorm  +  1;  }  else  {  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	cost    =    xNorm    +    1;    if(  cost  <  =  xNorm  +  1)  {  cost  =  xNorm  +  1;  }  else  {	  	non-compiled	[CE]  illegal  start  of  expression	52	None	add
789	[BUG]  [BUGGY]  int  previousCost  =  Math.max(period,  xNorm);  [CE]  variable  previousCost  is  already  defined  in  method  doOptimize()  [FE]              AssertionFailedError      [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  int  previousCost  =  Math.max(period,  xNorm);  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	int  previousCost  =  Math.max(period,  xNorm);	  cost    =    Math.max(previousCost,    xNorm);    int    previousCost    =    Math.max(previousCost,    xNorm);    	non-compiled	[CE]  variable  previousCost  is  already  defined  in  method  doOptimize()	38	None	replace
790	[BUG]  [BUGGY]  Integer  solvedCols  =  Math.max(relativeTolerance,  coeff1);  [CE]  cannot  find  symbol  relativeTolerance  [FE]        AssertionFailedError      [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  Integer  solvedCols  =  Math.max(relativeTolerance,  coeff1);  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	Integer  solvedCols  =  Math.max(relativeTolerance,  coeff1);	  Integer    solvedCols    =    Math.max(relativeTolerance,    cols);    	non-compiled	[CE]  cannot  find  symbol  relativeTolerance	133	None	replace
791	[BUG]  [BUGGY]  Preconditions.checkState(i  >  0);  [CE]  cannot  find  symbol  i  [FE]                    AssertionFailedError      [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  Preconditions.checkState(i  >  0);  [BUGGY]      cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	Preconditions.checkState(i  >  0);	  Preconditions.checkState(cols    >=    0);    	non-compiled	[CE]  cannot  find  symbol  i	60	None	replace
792	[BUG]  [BUGGY]  tmpVec  =  Math.min(remainder,  oldX[0]);  [CE]  cannot  find  symbol  remainder  [FE]                    AssertionFailedError      [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  tmpVec  =  Math.min(remainder,  oldX[0]);  [BUGGY]      cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	tmpVec  =  Math.min(remainder,  oldX[0]);	  tmpVec    =    Math.min(result,    oldX[0]);    	non-compiled	[CE]  cannot  find  symbol  remainder	14	None	replace
793	[BUG]  [BUGGY]  double  solvedCols  =  permutation[0]  *  diag[1];  double  solvedCols  =  permutation[1]  *  diag[1];  [CE]  variable  solvedCols  is  already  defined  in  method  doOptimize()  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  double  solvedCols  =  permutation[0]  *  diag[1];  double  solvedCols  =  permutation[1]  *  diag[1];  [BUGGY]      cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	double    solvedCols    =    permutation[0]    *    diag[1];    double  solvedCols  =  permutation[1]  *  diag[1];	  	non-compiled	[CE]  variable  solvedCols  is  already  defined  in  method  doOptimize()	89	None	add
794	[BUG]  [BUGGY]  solvedCols  =  Math.min(oldCols.length,  oldX.length);  [CE]  cannot  find  symbol  oldCols  [FE]        AssertionFailedError      [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  solvedCols  =  Math.min(oldCols.length,  oldX.length);  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	solvedCols  =  Math.min(oldCols.length,  oldX.length);	          solvedCols    =    Math.min(results.length,    oldX.length);    	non-compiled	[CE]  cannot  find  symbol  oldCols	77	None	replace
795	[BUG]  [BUGGY]  solvedCols  =  Math.min(solutions.length,  oldX.length);  [CE]  cannot  find  symbol  solutions  [FE]          AssertionFailedError      [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  solvedCols  =  Math.min(solutions.length,  oldX.length);  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	solvedCols  =  Math.min(solutions.length,  oldX.length);	          solvedCols    =    Math.min(results.length,    oldX.length);    	non-compiled	[CE]  cannot  find  symbol  solutions	77	None	replace
796	[BUG]  [BUGGY]  cost  =  Math.max(remainder,  oldX);  [CE]  cannot  find  symbol  remainder  [FE]          AssertionFailedError      [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  cost  =  Math.max(remainder,  oldX);  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	cost  =  Math.max(remainder,  oldX);	  cost    =    Math.max(cost,    oldX);    	non-compiled	[CE]  cannot  find  symbol  remainder	128	None	replace
797	[BUG]  [BUGGY]  cost  =  Math.ceil(xNorm);  int  cols  =  Math.ceil(cols);  [CE]  possible  loss  of  precision  [FE]    AssertionFailedError    [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  cost  =  Math.ceil(xNorm);  int  cols  =  Math.ceil(cols);  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	cost    =    Math.ceil(xNorm);    int  cols  =  Math.ceil(cols);	  	non-compiled	[CE]  possible  loss  of  precision	50	None	add
798	[BUG]  [BUGGY]  cost  =  Math.ceil(xNorm);  int  cols  =  Math.ceil(xNorm);  [CE]  possible  loss  of  precision  [FE]      AssertionFailedError    [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  cost  =  Math.ceil(xNorm);  int  cols  =  Math.ceil(xNorm);  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	cost    =    Math.ceil(xNorm);    int  cols  =  Math.ceil(xNorm);	  	non-compiled	[CE]  possible  loss  of  precision	50	None	add
799	[BUG]  [BUGGY]  cost    =    Math.max(cost,    previousCost);    cost  =  Math.max(cost,  previousCost);  int  solvedCols  =  Math.max(cosine,  previousCost);  cost  =  Math.max(cosine,  previousCost);  [CE]  cannot  find  symbol  cosine  [FE]    AssertionFailedError    [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  cost    =    Math.max(cost,    previousCost);    cost  =  Math.max(cost,  previousCost);  int  solvedCols  =  Math.max(cosine,  previousCost);  cost  =  Math.max(cosine,  previousCost);  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	cost        =        Math.max(cost,        previousCost);        cost    =    Math.max(cost,    previousCost);    int  solvedCols  =  Math.max(cosine,  previousCost);  cost  =  Math.max(cosine,  previousCost);	  	non-compiled	[CE]  cannot  find  symbol  cosine	21	None	add
800	[BUG]  [BUGGY]  cost    =    Math.max(cost,    previousCost);    cost  =  Math.max(cost,  previousCost);  int  solvedCols  =  Math.max(cols,  previousCost);  cost  =  Math.max(cost,  previousCost);  [CE]  possible  loss  of  precision  [FE]      AssertionFailedError    [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  cost    =    Math.max(cost,    previousCost);    cost  =  Math.max(cost,  previousCost);  int  solvedCols  =  Math.max(cols,  previousCost);  cost  =  Math.max(cost,  previousCost);  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	cost        =        Math.max(cost,        previousCost);        cost    =    Math.max(cost,    previousCost);    int  solvedCols  =  Math.max(cols,  previousCost);  cost  =  Math.max(cost,  previousCost);	  	non-compiled	[CE]  possible  loss  of  precision	21	None	add
801	[BUG]  [BUGGY]  cost    =    Math.max(cost,    previousCost);    cost  =  Math.max(cost,  previousCost);  int  solvedCols  =  Math.max(cosine,  previousCost);  cost  =  Math.max(cost,  previousCost);  [CE]  cannot  find  symbol  cosine  [FE]        AssertionFailedError    [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  cost    =    Math.max(cost,    previousCost);    cost  =  Math.max(cost,  previousCost);  int  solvedCols  =  Math.max(cosine,  previousCost);  cost  =  Math.max(cost,  previousCost);  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	cost        =        Math.max(cost,        previousCost);        cost    =    Math.max(cost,    previousCost);    int  solvedCols  =  Math.max(cosine,  previousCost);  cost  =  Math.max(cost,  previousCost);	  	non-compiled	[CE]  cannot  find  symbol  cosine	21	None	add
802	[BUG]  [BUGGY]  cost  =  Math.max(cosine,  tmpVec);  [CE]  cannot  find  symbol  cosine  [FE]            AssertionFailedError      [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  cost  =  Math.max(cosine,  tmpVec);  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	cost  =  Math.max(cosine,  tmpVec);	  cost    =    Math.max(cosine,    preRed);    	non-compiled	[CE]  cannot  find  symbol  cosine	117	None	replace
803	[BUG]  [BUGGY]  cost  =  tmpVec.length;  tmpVec.length  =  tmpVec.length;  [CE]  cannot  assign  a  value  to  final  variable  length  [FE]    AssertionFailedError    [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  cost  =  tmpVec.length;  tmpVec.length  =  tmpVec.length;  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	cost    =    tmpVec.length;    tmpVec.length  =  tmpVec.length;	  	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  length	19	None	add
804	[BUG]  [BUGGY]  cost  =  new  VectorialPointValuePair(tmpVec,  oldX);  [CE]  incompatible  types  [FE]              AssertionFailedError      [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  cost  =  new  VectorialPointValuePair(tmpVec,  oldX);  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	cost  =  new  VectorialPointValuePair(tmpVec,  oldX);	  cost    =    new    VectorialPointValuePair(tmpVec,    oldRes);    	non-compiled	[CE]  incompatible  types	108	None	replace
805	[BUG]  [BUGGY]  cost  =  Math.max(xNorm,  previousCost);  Integer  previousCost  =  Math.max(xNorm,  previousCost);  [CE]  variable  previousCost  is  already  defined  in  method  doOptimize()  [FE]    AssertionFailedError    [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  cost  =  Math.max(xNorm,  previousCost);  Integer  previousCost  =  Math.max(xNorm,  previousCost);  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	cost    =    Math.max(xNorm,    previousCost);    Integer  previousCost  =  Math.max(xNorm,  previousCost);	  	non-compiled	[CE]  variable  previousCost  is  already  defined  in  method  doOptimize()	1	None	add
806	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  int  solvedCols  =  oldX.length;  int  solveCols  =  oldX.length;  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	add	int    solvedCols    =    oldX.length;    int  solveCols  =  oldX.length;	  	compilable	  [FE]  AssertionFailedError  	73	2	add
807	[BUG]  [BUGGY]  int  solvedCols  =  oldX.length;  int  solveCols  =  oldX.length;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  int  solvedCols  =  oldX.length;  int  solveCols  =  oldX.length;  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	int    solvedCols    =    oldX.length;    int  solveCols  =  oldX.length;	  	compilable	  [FE]  AssertionFailedError  	73	2	add
808	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]              AssertionFailedError      [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  cost  =  Math.sqrt(coeff1);  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	add	cost  =  Math.sqrt(coeff1);	  cost    =    Math.sqrt(xK);    	compilable	  [FE]  AssertionFailedError  	54	13	replace
809	[BUG]  [BUGGY]  cost  =  Math.sqrt(coeff1);  [FE]  AssertionFailedError  [FE]              AssertionFailedError      [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  cost  =  Math.sqrt(coeff1);  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	cost  =  Math.sqrt(coeff1);	  cost    =    Math.sqrt(xK);    	compilable	  [FE]  AssertionFailedError  	54	13	replace
810	[BUG]  [BUGGY]  cost  =  Math.sqrt(exp);  [CE]  cannot  find  symbol  exp  [FE]                AssertionFailedError      [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  cost  =  Math.sqrt(exp);  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	cost  =  Math.sqrt(exp);	  cost    =    Math.sqrt(xK);    	non-compiled	[CE]  cannot  find  symbol  exp	54	None	replace
811	[BUG]  [BUGGY]  tmpVec  =  Math.min(remainders,  xNorm  +  1);  [CE]  cannot  find  symbol  remainders  [FE]                      AssertionFailedError      [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  tmpVec  =  Math.min(remainders,  xNorm  +  1);  [BUGGY]      cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	tmpVec  =  Math.min(remainders,  xNorm  +  1);	  tmpVec    =    Math.min(remainders,    xNorm);    	non-compiled	[CE]  cannot  find  symbol  remainders	99	None	replace
812	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  cost    =    xNorm;    xNorm  =  xNorm;  for(int  i  =  0;  i  <  cols;  ++i)  {  cost  =  xNorm;  xNorm  =  xNorm;  }  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	add	cost        =        xNorm;        xNorm    =    xNorm;    for(int  i  =  0;  i  <  cols;  ++i)  {  cost  =  xNorm;  xNorm  =  xNorm;  }	  	compilable	  [FE]  AssertionFailedError  	45	2	add
813	[BUG]  [BUGGY]  cost    =    xNorm;    xNorm  =  xNorm;  for(int  i  =  0;  i  <  cols;  ++i)  {  cost  =  xNorm;  xNorm  =  xNorm;  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  cost    =    xNorm;    xNorm  =  xNorm;  for(int  i  =  0;  i  <  cols;  ++i)  {  cost  =  xNorm;  xNorm  =  xNorm;  }  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	cost        =        xNorm;        xNorm    =    xNorm;    for(int  i  =  0;  i  <  cols;  ++i)  {  cost  =  xNorm;  xNorm  =  xNorm;  }	  	compilable	  [FE]  AssertionFailedError  	45	2	add
814	[BUG]  [BUGGY]  int  previousCost  =  Math.min(lastIteration,  xNorm);  [CE]  variable  previousCost  is  already  defined  in  method  doOptimize()  [FE]          AssertionFailedError      [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  int  previousCost  =  Math.min(lastIteration,  xNorm);  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	int  previousCost  =  Math.min(lastIteration,  xNorm);	  cost    -=    previousCost;    int    previousCost    =    Math.min(previousCost,    xNorm);    	non-compiled	[CE]  variable  previousCost  is  already  defined  in  method  doOptimize()	105	None	replace
815	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError      [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  for(int  j  =  0;  j  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	for(int  j  =  0;  j  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *	  cost    -=    previousCost;    if(previousCost!=    null)    {    cost    -=    previousCost;    }    else    {    for(int    j    =    0;    j    <    cols;    ++k)    {    double    xK    =    diag[k]    *    point[k];    xNorm+=    xK    *    	non-compiled	[CE]  illegal  start  of  expression	156	None	replace
816	[BUG]  [BUGGY]  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *	  cost    -=    previousCost;    if(previousCost!=    null)    {    cost    -=    previousCost;    }    else    {    for(int    j    =    0;    j    <    cols;    ++k)    {    double    xK    =    diag[k]    *    point[k];    xNorm+=    xK    *    	non-compiled	[CE]  illegal  start  of  expression	156	None	replace
817	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  for(int  j  =  0;  j  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  }  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	for(int  j  =  0;  j  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  }	  cost    -=    previousCost;    if(previousCost!=    null)    {    cost    -=    previousCost;    }    else    {    for(int    j    =    0;    j    <    cols;    ++k)    {    double    xK    =    diag[k]    *    point[k];    xNorm+=    xK    *    	non-compiled	[CE]  illegal  start  of  expression	156	None	replace
818	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  cols;  ++k)  {  double  xNorm  =  diag[k]  *  point[k];  xNorm+=  xK  *  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  for(int  j  =  0;  j  <  cols;  ++k)  {  double  xNorm  =  diag[k]  *  point[k];  xNorm+=  xK  *  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	for(int  j  =  0;  j  <  cols;  ++k)  {  double  xNorm  =  diag[k]  *  point[k];  xNorm+=  xK  *	  cost    -=    previousCost;    if(previousCost!=    null)    {    cost    -=    previousCost;    }    else    {    for(int    j    =    0;    j    <    cols;    ++k)    {    double    xK    =    diag[k]    *    point[k];    xNorm+=    xK    *    	non-compiled	[CE]  illegal  start  of  expression	156	None	replace
819	[BUG]  [BUGGY]  cost    =    Math.max(previousCost,    xNorm);    double  cost  =  Math.max(previousCost,  xNorm);  double  previousCost  =  Math.max(period,  xNorm);  double  cost  =  Math.max(period,  xNorm);  [CE]  variable  previousCost  is  already  defined  in  method  doOptimize()  [FE]    AssertionFailedError    [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  cost    =    Math.max(previousCost,    xNorm);    double  cost  =  Math.max(previousCost,  xNorm);  double  previousCost  =  Math.max(period,  xNorm);  double  cost  =  Math.max(period,  xNorm);  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	cost        =        Math.max(previousCost,        xNorm);        double    cost    =    Math.max(previousCost,    xNorm);    double  previousCost  =  Math.max(period,  xNorm);  double  cost  =  Math.max(period,  xNorm);	  	non-compiled	[CE]  variable  previousCost  is  already  defined  in  method  doOptimize()	34	None	add
820	[BUG]  [BUGGY]  cost    =    Math.max(previousCost,    xNorm);    double  cost  =  Math.max(previousCost,  xNorm);  double  previousCost  =  Math.max(previousCost,  xNorm);  [CE]  variable  previousCost  is  already  defined  in  method  doOptimize()  [FE]      AssertionFailedError    [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  cost    =    Math.max(previousCost,    xNorm);    double  cost  =  Math.max(previousCost,  xNorm);  double  previousCost  =  Math.max(previousCost,  xNorm);  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	cost        =        Math.max(previousCost,        xNorm);        double    cost    =    Math.max(previousCost,    xNorm);    double  previousCost  =  Math.max(previousCost,  xNorm);	  	non-compiled	[CE]  variable  previousCost  is  already  defined  in  method  doOptimize()	34	None	add
821	[BUG]  [BUGGY]  double  tmpVec  =  Math.sqrt(xNorm,  previousCost);  [CE]  variable  tmpVec  is  already  defined  in  method  doOptimize()  [FE]                      AssertionFailedError      [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  double  tmpVec  =  Math.sqrt(xNorm,  previousCost);  [BUGGY]      cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	double  tmpVec  =  Math.sqrt(xNorm,  previousCost);	  double    tmpVec    =    Math.sqrt(remainingCost,    previousCost);    	non-compiled	[CE]  variable  tmpVec  is  already  defined  in  method  doOptimize()	70	None	replace
822	[BUG]  [BUGGY]  tmpVec  =  Math.min(oldRes,  oldX[0]);  [CE]  no  suitable  method  found  for  min(double[],double)  [FE]              AssertionFailedError      [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  tmpVec  =  Math.min(oldRes,  oldX[0]);  [BUGGY]      cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	tmpVec  =  Math.min(oldRes,  oldX[0]);	  tmpVec    =    Math.min(remainderCost,    oldX[0]);    	non-compiled	[CE]  no  suitable  method  found  for  min(double[],double)	119	None	replace
823	[BUG]  [BUGGY]  Integer  previousCost  -=  prered;  [CE]  ';'  expected  [FE]        AssertionFailedError      [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  Integer  previousCost  -=  prered;  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	Integer  previousCost  -=  prered;	  cost    -=    previousCost;    Integer    previousCost    -=    previousCost;    	non-compiled	[CE]  ';'  expected	104	None	replace
824	[BUG]  [BUGGY]  Integer  previousCost  -=  prevCost;  [CE]  ';'  expected  [FE]          AssertionFailedError      [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  Integer  previousCost  -=  prevCost;  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	Integer  previousCost  -=  prevCost;	  cost    -=    previousCost;    Integer    previousCost    -=    previousCost;    	non-compiled	[CE]  ';'  expected	104	None	replace
825	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError      [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  Integer  solvedCols  =  Math.min(cols,  0);  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	add	Integer  solvedCols  =  Math.min(cols,  0);	          Integer    solvedCols    =    Math.min(resolvedCols,    0);    	compilable	  [FE]  AssertionFailedError  	96	11	replace
826	[BUG]  [BUGGY]  Integer  solvedCols  =  Math.min(cols,  0);  [FE]  AssertionFailedError  [FE]            AssertionFailedError      [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  Integer  solvedCols  =  Math.min(cols,  0);  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	Integer  solvedCols  =  Math.min(cols,  0);	          Integer    solvedCols    =    Math.min(resolvedCols,    0);    	compilable	  [FE]  AssertionFailedError  	96	11	replace
827	[BUG]  [BUGGY]  Integer  solvedCols  =  Math.min(oldX,  0);  [CE]  no  suitable  method  found  for  min(double[],int)  [FE]              AssertionFailedError      [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  Integer  solvedCols  =  Math.min(oldX,  0);  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	Integer  solvedCols  =  Math.min(oldX,  0);	          Integer    solvedCols    =    Math.min(resolvedCols,    0);    	non-compiled	[CE]  no  suitable  method  found  for  min(double[],int)	96	None	replace
828	[BUG]  [BUGGY]  cost  -=  cols;  -=  previousCost;  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  cost  -=  cols;  -=  previousCost;  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	cost  -=  cols;  -=  previousCost;	  cost    -=    previousCost;    -=    previousCost;    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
829	[BUG]  [BUGGY]  cost  -=  oldX;  -=  previousCost;  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  cost  -=  oldX;  -=  previousCost;  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	cost  -=  oldX;  -=  previousCost;	  cost    -=    previousCost;    -=    previousCost;    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
830	[BUG]  [BUGGY]  if(previousCost!=  xNorm)  {  cost  -=  previousCost;  -=  previousCost;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  if(previousCost!=  xNorm)  {  cost  -=  previousCost;  -=  previousCost;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	if(previousCost!=  xNorm)  {  cost  -=  previousCost;  -=  previousCost;  }  else  {  throw  new  IllegalArgumentException( " ");  }	  cost    -=    previousCost;    -=    previousCost;    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
831	[BUG]  [BUGGY]  cost  -=  cols;  tmpVec  -=  cols;  [CE]  bad  operand  types  for  binary  operator  '-'  [FE]    AssertionFailedError    [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  cost  -=  cols;  tmpVec  -=  cols;  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	cost    -=    cols;    tmpVec  -=  cols;	  	non-compiled	[CE]  bad  operand  types  for  binary  operator  '-'	61	None	add
832	[BUG]  [BUGGY]  cost  =  tmpVec  *  oldX;  [CE]  bad  operand  types  for  binary  operator  '*'  [FE]                AssertionFailedError      [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  cost  =  tmpVec  *  oldX;  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	cost  =  tmpVec  *  oldX;	  cost    =    tmpVec    *    tmpVec;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '*'	149	None	replace
833	[BUG]  [BUGGY]  cost    =    Math.max(previousCost,    xNorm);    cost  =  Math.max(previousCost,  xNorm);  double  previousCost  =  Math.sqrt(xNorm);  cost  =  Math.max(previousCost,  xNorm);  [CE]  variable  previousCost  is  already  defined  in  method  doOptimize()  [FE]    AssertionFailedError    [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  cost    =    Math.max(previousCost,    xNorm);    cost  =  Math.max(previousCost,  xNorm);  double  previousCost  =  Math.sqrt(xNorm);  cost  =  Math.max(previousCost,  xNorm);  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	cost        =        Math.max(previousCost,        xNorm);        cost    =    Math.max(previousCost,    xNorm);    double  previousCost  =  Math.sqrt(xNorm);  cost  =  Math.max(previousCost,  xNorm);	  	non-compiled	[CE]  variable  previousCost  is  already  defined  in  method  doOptimize()	36	None	add
834	[BUG]  [BUGGY]  cost    =    Math.max(previousCost,    xNorm);    cost  =  Math.max(previousCost,  xNorm);  double  previousCost  =  Math.max(previousCost,  xNorm);  [CE]  variable  previousCost  is  already  defined  in  method  doOptimize()  [FE]      AssertionFailedError    [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  cost    =    Math.max(previousCost,    xNorm);    cost  =  Math.max(previousCost,  xNorm);  double  previousCost  =  Math.max(previousCost,  xNorm);  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	cost        =        Math.max(previousCost,        xNorm);        cost    =    Math.max(previousCost,    xNorm);    double  previousCost  =  Math.max(previousCost,  xNorm);	  	non-compiled	[CE]  variable  previousCost  is  already  defined  in  method  doOptimize()	36	None	add
835	[BUG]  [BUGGY]  tmpVec  =  Math.min(previousCost,  xNorm,  oldX);  [CE]  no  suitable  method  found  for  min(double,double,double[])  [FE]                      AssertionFailedError      [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  tmpVec  =  Math.min(previousCost,  xNorm,  oldX);  [BUGGY]      cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	tmpVec  =  Math.min(previousCost,  xNorm,  oldX);	  tmpVec    =    Math.min(previousCost,    xNorm,    cols);    	non-compiled	[CE]  no  suitable  method  found  for  min(double,double,double[])	56	None	replace
836	[BUG]  [BUGGY]  tmpVec  =  Math.min(cos,  previousCost,  xNorm,  cols);  [CE]  cannot  find  symbol  cos  [FE]                        AssertionFailedError      [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  tmpVec  =  Math.min(cos,  previousCost,  xNorm,  cols);  [BUGGY]      cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	tmpVec  =  Math.min(cos,  previousCost,  xNorm,  cols);	  tmpVec    =    Math.min(previousCost,    xNorm,    cols);    	non-compiled	[CE]  cannot  find  symbol  cos	56	None	replace
837	[BUG]  [BUGGY]  tmpVec  =  Math.min(period,  previousCost,  xNorm,  cols);  [CE]  cannot  find  symbol  period  [FE]                          AssertionFailedError      [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  tmpVec  =  Math.min(period,  previousCost,  xNorm,  cols);  [BUGGY]      cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	tmpVec  =  Math.min(period,  previousCost,  xNorm,  cols);	  tmpVec    =    Math.min(previousCost,    xNorm,    cols);    	non-compiled	[CE]  cannot  find  symbol  period	56	None	replace
838	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  cost  -=  2;  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	add	cost  -=  2;	  cost    -=    cols;    	compilable	  [FE]  AssertionFailedError  	62	15	replace
839	[BUG]  [BUGGY]  cost  -=  2;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  cost  -=  2;  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	cost  -=  2;	  cost    -=    cols;    	compilable	  [FE]  AssertionFailedError  	62	15	replace
840	[BUG]  [BUGGY]  double  solvedCols  =  diag[0]  *  permutation[1];  double  solvedCols  =  permutation[0]  *  permutation[1];  [CE]  variable  solvedCols  is  already  defined  in  method  doOptimize()  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  double  solvedCols  =  diag[0]  *  permutation[1];  double  solvedCols  =  permutation[0]  *  permutation[1];  [BUGGY]      cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	double    solvedCols    =    diag[0]    *    permutation[1];    double  solvedCols  =  permutation[0]  *  permutation[1];	  	non-compiled	[CE]  variable  solvedCols  is  already  defined  in  method  doOptimize()	84	None	add
841	[BUG]  [BUGGY]  Preconditions.checkState(oldX!=  xNorm);  [CE]  incomparable  types:  double[]  and  double  [FE]                AssertionFailedError      [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  Preconditions.checkState(oldX!=  xNorm);  [BUGGY]      cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	Preconditions.checkState(oldX!=  xNorm);	  Preconditions.checkState(oldX!=    0);    	non-compiled	[CE]  incomparable  types:  double[]  and  double	158	None	replace
842	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  cost  =  Math.max(coeff1,  xNorm);  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	add	cost  =  Math.max(coeff1,  xNorm);	  cost    =    Math.max(cost,    xNorm);    	compilable	  [FE]  AssertionFailedError  	127	11	replace
843	[BUG]  [BUGGY]  cost  =  Math.max(coeff1,  xNorm);  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  cost  =  Math.max(coeff1,  xNorm);  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	cost  =  Math.max(coeff1,  xNorm);	  cost    =    Math.max(cost,    xNorm);    	compilable	  [FE]  AssertionFailedError  	127	11	replace
844	[BUG]  [BUGGY]  Integer  previousCost  =  Math.max(cosine,  previousCost);  [CE]  variable  previousCost  is  already  defined  in  method  doOptimize()  [FE]        AssertionFailedError      [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  Integer  previousCost  =  Math.max(cosine,  previousCost);  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	Integer  previousCost  =  Math.max(cosine,  previousCost);	  cost    =    Math.max(cost,    previousCost);    Integer    previousCost    =    Math.max(cost,    previousCost);    	non-compiled	[CE]  variable  previousCost  is  already  defined  in  method  doOptimize()	124	None	replace
845	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  double  cost  =  cols;  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	add	double  cost  =  cols;	  cost    =    xNorm;    double    cost    =    xNorm;    	compilable	  [FE]  AssertionFailedError  	44	4	replace
846	[BUG]  [BUGGY]  double  cost  =  cols;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  double  cost  =  cols;  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	double  cost  =  cols;	  cost    =    xNorm;    double    cost    =    xNorm;    	compilable	  [FE]  AssertionFailedError  	44	4	replace
847	[BUG]  [BUGGY]  if(cost  <  =  0)  {  cost  =  0;  }  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError      [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  if(cost  <  =  0)  {  cost  =  0;  }  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	if(cost  <  =  0)  {  cost  =  0;  }	  cost    =    xNorm;    if(    cost    <    =    xNorm)    {    cost    =    xNorm;    }    	non-compiled	[CE]  illegal  start  of  expression	139	None	replace
848	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError      [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  if(cost  >  0)  {  cost  =  xNorm;  }  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	add	if(cost  >  0)  {  cost  =  xNorm;  }	  cost    =    xNorm;    if(    cost    <    =    xNorm)    {    cost    =    xNorm;    }    	compilable	  [FE]  AssertionFailedError  	139	11	replace
849	[BUG]  [BUGGY]  if(cost  >  0)  {  cost  =  xNorm;  }  [FE]  AssertionFailedError  [FE]          AssertionFailedError      [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  if(cost  >  0)  {  cost  =  xNorm;  }  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	if(cost  >  0)  {  cost  =  xNorm;  }	  cost    =    xNorm;    if(    cost    <    =    xNorm)    {    cost    =    xNorm;    }    	compilable	  [FE]  AssertionFailedError  	139	11	replace
850	[BUG]  [BUGGY]  if(cost  <  =  xNorm)  {  cost  =  xNorm;  }  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  if(cost  <  =  xNorm)  {  cost  =  xNorm;  }  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	if(cost  <  =  xNorm)  {  cost  =  xNorm;  }	  cost    =    xNorm;    if(    cost    <    =    xNorm)    {    cost    =    xNorm;    }    	non-compiled	[CE]  illegal  start  of  expression	139	None	replace
851	[BUG]  [BUGGY]  double  residuals  =  Math.sqrt(oldX);  [CE]  method  sqrt  in  class  Math  cannot  be  applied  to  given  types;  [FE]                    AssertionFailedError      [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  double  residuals  =  Math.sqrt(oldX);  [BUGGY]      cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	double  residuals  =  Math.sqrt(oldX);	  double    residuals    =    Math.sqrt(remainingCost);    	non-compiled	[CE]  method  sqrt  in  class  Math  cannot  be  applied  to  given  types;	69	None	replace
852	[BUG]  [BUGGY]  CostRelativeTolerance  tmpVec  =  Math.ceil(xNorm);  [CE]  cannot  find  symbol  [FE]    AssertionFailedError    [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  CostRelativeTolerance  tmpVec  =  Math.ceil(xNorm);  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	CostRelativeTolerance  tmpVec  =  Math.ceil(xNorm);	  cost    =    Math.ceil(xNorm);    	non-compiled	[CE]  cannot  find  symbol	51	None	replace
853	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  cost    =    xNorm;    cost  =  xNorm;  double  xK  =  xNorm;  cost  =  xK;  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	add	cost        =        xNorm;        cost    =    xNorm;    double  xK  =  xNorm;  cost  =  xK;	  	compilable	  [FE]  AssertionFailedError  	40	2	add
854	[BUG]  [BUGGY]  cost    =    xNorm;    cost  =  xNorm;  double  xK  =  xNorm;  cost  =  xK;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  cost    =    xNorm;    cost  =  xNorm;  double  xK  =  xNorm;  cost  =  xK;  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	cost        =        xNorm;        cost    =    xNorm;    double  xK  =  xNorm;  cost  =  xK;	  	compilable	  [FE]  AssertionFailedError  	40	2	add
855	[BUG]  [BUGGY]  cost    =    xNorm;    cost  =  xNorm;  tmpVec  =  Math.sqrt(tmpVec);  [CE]  method  sqrt  in  class  Math  cannot  be  applied  to  given  types;  [FE]      AssertionFailedError    [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  cost    =    xNorm;    cost  =  xNorm;  tmpVec  =  Math.sqrt(tmpVec);  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	cost        =        xNorm;        cost    =    xNorm;    tmpVec  =  Math.sqrt(tmpVec);	  	non-compiled	[CE]  method  sqrt  in  class  Math  cannot  be  applied  to  given  types;	40	None	add
856	[BUG]  [BUGGY]  cost    =    xNorm;    cost  =  xNorm;  int  cols  =  Math.min(cols,  xNorm);  [CE]  possible  loss  of  precision  [FE]        AssertionFailedError    [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  cost    =    xNorm;    cost  =  xNorm;  int  cols  =  Math.min(cols,  xNorm);  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	cost        =        xNorm;        cost    =    xNorm;    int  cols  =  Math.min(cols,  xNorm);	  	non-compiled	[CE]  possible  loss  of  precision	40	None	add
857	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  cost  -=  0;  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	add	cost  -=  0;	  cost    =    0;    	compilable	  [FE]  AssertionFailedError  	114	4	replace
858	[BUG]  [BUGGY]  cost  -=  0;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  cost  -=  0;  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	cost  -=  0;	  cost    =    0;    	compilable	  [FE]  AssertionFailedError  	114	4	replace
859	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  xNorm  =  xNorm;  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	add	xNorm  =  xNorm;	  cost    =    xNorm;    xNorm    =    xNorm;    	compilable	  [FE]  AssertionFailedError  	46	4	replace
860	[BUG]  [BUGGY]  xNorm  =  xNorm;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  xNorm  =  xNorm;  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	xNorm  =  xNorm;	  cost    =    xNorm;    xNorm    =    xNorm;    	compilable	  [FE]  AssertionFailedError  	46	4	replace
861	[BUG]  [BUGGY]  cost  -=  preRed;  tmpVec  -=  preRed;  [CE]  bad  operand  types  for  binary  operator  '-'  [FE]    AssertionFailedError    [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  cost  -=  preRed;  tmpVec  -=  preRed;  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	cost    -=    preRed;    tmpVec  -=  preRed;	  	non-compiled	[CE]  bad  operand  types  for  binary  operator  '-'	65	None	add
862	[BUG]  [BUGGY]  cost  -=  preRed;  int  preRed  =  Math.min(preRed,  xNorm);  [CE]  variable  preRed  is  already  defined  in  method  doOptimize()  [FE]      AssertionFailedError    [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  cost  -=  preRed;  int  preRed  =  Math.min(preRed,  xNorm);  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	cost    -=    preRed;    int  preRed  =  Math.min(preRed,  xNorm);	  	non-compiled	[CE]  variable  preRed  is  already  defined  in  method  doOptimize()	65	None	add
863	[BUG]  [BUGGY]  cost  -=  Math.ceil(exp);  [CE]  cannot  find  symbol  exp  [FE]    AssertionFailedError    [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  cost  -=  Math.ceil(exp);  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	cost  -=  Math.ceil(exp);	  cost    -=    Math.ceil(previousCost);    	non-compiled	[CE]  cannot  find  symbol  exp	145	None	replace
864	[BUG]  [BUGGY]  cost  -=  Math.ceil(remainder);  [CE]  cannot  find  symbol  remainder  [FE]      AssertionFailedError    [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  cost  -=  Math.ceil(remainder);  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	cost  -=  Math.ceil(remainder);	  cost    -=    Math.ceil(previousCost);    	non-compiled	[CE]  cannot  find  symbol  remainder	145	None	replace
865	[BUG]  [BUGGY]  int  solvedCols  =  Math.min(resolvedCols,  oldX  +  1);  [CE]  cannot  find  symbol  resolvedCols  [FE]              AssertionFailedError      [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  int  solvedCols  =  Math.min(resolvedCols,  oldX  +  1);  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	int  solvedCols  =  Math.min(resolvedCols,  oldX  +  1);	          int    solvedCols    =    Math.min(resolvedCols,    oldX);    	non-compiled	[CE]  cannot  find  symbol  resolvedCols	97	None	replace
866	[BUG]  [BUGGY]  int  solvedCols  =  Math.min(oldX,  oldX);  [CE]  no  suitable  method  found  for  min(double[],double[])  [FE]                AssertionFailedError      [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  int  solvedCols  =  Math.min(oldX,  oldX);  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	int  solvedCols  =  Math.min(oldX,  oldX);	          int    solvedCols    =    Math.min(resolvedCols,    oldX);    	non-compiled	[CE]  no  suitable  method  found  for  min(double[],double[])	97	None	replace
867	[BUG]  [BUGGY]  Integer  solvedCols  =  Math.max(lmDir,  oldX.length);  [CE]  no  suitable  method  found  for  max(double[],int)  [FE]              AssertionFailedError      [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  Integer  solvedCols  =  Math.max(lmDir,  oldX.length);  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	Integer  solvedCols  =  Math.max(lmDir,  oldX.length);	  Integer    solvedCols    =    Math.max(relativeTolerance,    oldX.length);    	non-compiled	[CE]  no  suitable  method  found  for  max(double[],int)	136	None	replace
868	[BUG]  [BUGGY]  tmpVec  =  Math.min(lastIteration,  previousCost,  xNorm,  0);  [CE]  cannot  find  symbol  lastIteration  [FE]                          AssertionFailedError      [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  tmpVec  =  Math.min(lastIteration,  previousCost,  xNorm,  0);  [BUGGY]      cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	tmpVec  =  Math.min(lastIteration,  previousCost,  xNorm,  0);	  tmpVec    =    Math.min(previousCost,    xNorm,    0);    	non-compiled	[CE]  cannot  find  symbol  lastIteration	58	None	replace
869	[BUG]  [BUGGY]  tmpVec  =  Math.sqrt(prettyPrinter,  xNorm);  [CE]  cannot  find  symbol  prettyPrinter  [FE]                AssertionFailedError      [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  tmpVec  =  Math.sqrt(prettyPrinter,  xNorm);  [BUGGY]      cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	tmpVec  =  Math.sqrt(prettyPrinter,  xNorm);	  tmpVec    =    Math.sqrt(xNorm,    previousCost);    	non-compiled	[CE]  cannot  find  symbol  prettyPrinter	153	None	replace
870	[BUG]  [BUGGY]  cost  =  Math.max(xNorm,  xK);  [CE]  cannot  find  symbol  xK  [FE]    AssertionFailedError    [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  cost  =  Math.max(xNorm,  xK);  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	cost  =  Math.max(xNorm,  xK);	  cost    =    Math.max(xNorm,    previousCost);    	non-compiled	[CE]  cannot  find  symbol  xK	2	None	replace
871	[BUG]  [BUGGY]  cost  =  Math.max(xNorm,  tmpVec);  [CE]  no  suitable  method  found  for  max(double,double[])  [FE]      AssertionFailedError    [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  cost  =  Math.max(xNorm,  tmpVec);  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	cost  =  Math.max(xNorm,  tmpVec);	  cost    =    Math.max(xNorm,    previousCost);    	non-compiled	[CE]  no  suitable  method  found  for  max(double,double[])	2	None	replace
872	[BUG]  [BUGGY]  Integer  xNorm  =  Math.sqrt(xNorm);  [CE]  variable  xNorm  is  already  defined  in  method  doOptimize()  [FE]          AssertionFailedError      [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  Integer  xNorm  =  Math.sqrt(xNorm);  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	Integer  xNorm  =  Math.sqrt(xNorm);	  cost    =    xNorm;    Integer    xNorm    =    Math.sqrt(xNorm);    	non-compiled	[CE]  variable  xNorm  is  already  defined  in  method  doOptimize()	103	None	replace
873	[BUG]  [BUGGY]  Integer  xNorm  =  Math.sqrt(cost);  [CE]  variable  xNorm  is  already  defined  in  method  doOptimize()  [FE]            AssertionFailedError      [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  Integer  xNorm  =  Math.sqrt(cost);  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	Integer  xNorm  =  Math.sqrt(cost);	  cost    =    xNorm;    Integer    xNorm    =    Math.sqrt(xNorm);    	non-compiled	[CE]  variable  xNorm  is  already  defined  in  method  doOptimize()	103	None	replace
874	[BUG]  [BUGGY]  double  tmpVec  =  Math.sqrt(xNorm  +  1);  [CE]  variable  tmpVec  is  already  defined  in  method  doOptimize()  [FE]                  AssertionFailedError      [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  double  tmpVec  =  Math.sqrt(xNorm  +  1);  [BUGGY]      cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	double  tmpVec  =  Math.sqrt(xNorm  +  1);	  double    tmpVec    =    Math.sqrt(remainingCost    +    1);    	non-compiled	[CE]  variable  tmpVec  is  already  defined  in  method  doOptimize()	115	None	replace
875	[BUG]  [BUGGY]  preRed  =  Math.max(previousCost,  cols);  Preconditions.checkState(cols!=  0);  [CE]  cannot  find  symbol  Preconditions  [FE]          AssertionFailedError      [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  preRed  =  Math.max(previousCost,  cols);  Preconditions.checkState(cols!=  0);  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	preRed  =  Math.max(previousCost,  cols);  Preconditions.checkState(cols!=  0);	  cost    =    Math.max(cost,    previousCost);    Preconditions.checkState(cols!=    0);    	non-compiled	[CE]  cannot  find  symbol  Preconditions	125	None	replace
876	[BUG]  [BUGGY]  Cost  =  Math.max(previousCost,  xNorm);  [CE]  cannot  find  symbol  Cost  [FE]                AssertionFailedError      [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  Cost  =  Math.max(previousCost,  xNorm);  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	Cost  =  Math.max(previousCost,  xNorm);	  cost    =    Math.max(previousCost,    cosine);    	non-compiled	[CE]  cannot  find  symbol  Cost	4	None	replace
877	[BUG]  [BUGGY]  double  cols  =  diagnostic[k]  *  point[k]  +  1;  [CE]  cannot  find  symbol  diagnostic  [FE]            AssertionFailedError      [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  double  cols  =  diagnostic[k]  *  point[k]  +  1;  [BUGGY]      cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	double  cols  =  diagnostic[k]  *  point[k]  +  1;	  double    cols    =    diag[k]    *    point[k]    +    1;    	non-compiled	[CE]  cannot  find  symbol  diagnostic	27	None	replace
878	[BUG]  [BUGGY]  cost  -=  Math.ceil(previousCost);  double  previousCost  -=  Math.ceil(previousCost);  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  cost  -=  Math.ceil(previousCost);  double  previousCost  -=  Math.ceil(previousCost);  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	cost    -=    Math.ceil(previousCost);    double  previousCost  -=  Math.ceil(previousCost);	  	non-compiled	[CE]  ';'  expected	144	None	add
879	[BUG]  [BUGGY]  cost  -=  Math.ceil(previousCost);  int  previousCost  =  Math.ceil(previousCost);  [CE]  variable  previousCost  is  already  defined  in  method  doOptimize()  [FE]      AssertionFailedError    [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  cost  -=  Math.ceil(previousCost);  int  previousCost  =  Math.ceil(previousCost);  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	cost    -=    Math.ceil(previousCost);    int  previousCost  =  Math.ceil(previousCost);	  	non-compiled	[CE]  variable  previousCost  is  already  defined  in  method  doOptimize()	144	None	add
880	[BUG]  [BUGGY]  int  solvedCols  =  Math.min(lmDir,  xNorm);  [CE]  no  suitable  method  found  for  min(double[],double)  [FE]        AssertionFailedError      [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  int  solvedCols  =  Math.min(lmDir,  xNorm);  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	int  solvedCols  =  Math.min(lmDir,  xNorm);	          int    solvedCols    =    Math.min(resolvedCols,    xNorm);    	non-compiled	[CE]  no  suitable  method  found  for  min(double[],double)	94	None	replace
881	[BUG]  [BUGGY]  tmpVec  =  Math.min(remainings,  oldX);  [CE]  cannot  find  symbol  remainings  [FE]                    AssertionFailedError      [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  tmpVec  =  Math.min(remainings,  oldX);  [BUGGY]      cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	tmpVec  =  Math.min(remainings,  oldX);	  tmpVec    =    Math.min(remainings,    xNorm);    	non-compiled	[CE]  cannot  find  symbol  remainings	98	None	replace
882	[BUG]  [BUGGY]  cost    =    xNorm;    double  cost  =  xNorm;  int  cols  =  diag[k]  *  point[k];  [CE]  cannot  find  symbol  k  [FE]    AssertionFailedError    [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  cost    =    xNorm;    double  cost  =  xNorm;  int  cols  =  diag[k]  *  point[k];  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	cost        =        xNorm;        double    cost    =    xNorm;    int  cols  =  diag[k]  *  point[k];	  	non-compiled	[CE]  cannot  find  symbol  k	43	None	add
883	[BUG]  [BUGGY]  cost    =    xNorm;    double  cost  =  xNorm;  int  cols  =  Math.min(cols,  xNorm);  [CE]  possible  loss  of  precision  [FE]      AssertionFailedError    [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  cost    =    xNorm;    double  cost  =  xNorm;  int  cols  =  Math.min(cols,  xNorm);  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	cost        =        xNorm;        double    cost    =    xNorm;    int  cols  =  Math.min(cols,  xNorm);	  	non-compiled	[CE]  possible  loss  of  precision	43	None	add
884	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError      [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  int  solvedCols  =  Math.min(oldRes.length,  oldX.length);  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	add	int  solvedCols  =  Math.min(oldRes.length,  oldX.length);	  int    solvedCols    =    Math.min(results.length,    oldX.length);    	compilable	  [FE]  AssertionFailedError  	72	4	replace
885	[BUG]  [BUGGY]  int  solvedCols  =  Math.min(oldRes.length,  oldX.length);  [FE]  AssertionFailedError  [FE]          AssertionFailedError      [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  int  solvedCols  =  Math.min(oldRes.length,  oldX.length);  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	int  solvedCols  =  Math.min(oldRes.length,  oldX.length);	  int    solvedCols    =    Math.min(results.length,    oldX.length);    	compilable	  [FE]  AssertionFailedError  	72	4	replace
886	[BUG]  [BUGGY]  cost  =  Math.max(previousCost,  cost);  double  previousCost  =  Math.max(previousCost,  cost);  [CE]  variable  previousCost  is  already  defined  in  method  doOptimize()  [FE]    AssertionFailedError    [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  cost  =  Math.max(previousCost,  cost);  double  previousCost  =  Math.max(previousCost,  cost);  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	cost    =    Math.max(previousCost,    cost);    double  previousCost  =  Math.max(previousCost,  cost);	  	non-compiled	[CE]  variable  previousCost  is  already  defined  in  method  doOptimize()	15	None	add
887	[BUG]  [BUGGY]  cost  =  Math.max(previousCost,  cost);  tmpVec  =  Math.max(previousCost,  cost);  [CE]  incompatible  types  [FE]      AssertionFailedError    [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  cost  =  Math.max(previousCost,  cost);  tmpVec  =  Math.max(previousCost,  cost);  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	cost    =    Math.max(previousCost,    cost);    tmpVec  =  Math.max(previousCost,  cost);	  	non-compiled	[CE]  incompatible  types	15	None	add
888	[BUG]  [BUGGY]  tmpVec  =  Math.min(previousCost,  oldX[0],  oldRes[0]);  [CE]  no  suitable  method  found  for  min(double,double,double)  [FE]                  AssertionFailedError      [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  tmpVec  =  Math.min(previousCost,  oldX[0],  oldRes[0]);  [BUGGY]      cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	tmpVec  =  Math.min(previousCost,  oldX[0],  oldRes[0]);	  tmpVec    =    Math.min(previousCost,    oldX[0]);    	non-compiled	[CE]  no  suitable  method  found  for  min(double,double,double)	13	None	replace
889	[BUG]  [BUGGY]  tmpVec  =  Math.min(results,  oldX[0],  oldRes[0]);  [CE]  cannot  find  symbol  results  [FE]                AssertionFailedError      [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  tmpVec  =  Math.min(results,  oldX[0],  oldRes[0]);  [BUGGY]      cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	tmpVec  =  Math.min(results,  oldX[0],  oldRes[0]);	  tmpVec    =    Math.min(results,    oldX[0]);    	non-compiled	[CE]  cannot  find  symbol  results	120	None	replace
890	[BUG]  [BUGGY]  tmpVec  =  Math.min(lastIteration,  xNorm);  [CE]  cannot  find  symbol  lastIteration  [FE]                    AssertionFailedError      [CONTEXT]      for  (int  k  =  0;  k  <  cols;  ++k)  {  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {        [BUGGY]  tmpVec  =  Math.min(lastIteration,  xNorm);  [BUGGY]      cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	426	426	2	replace	tmpVec  =  Math.min(lastIteration,  xNorm);	  tmpVec    =    Math.min(remainderCost,    xNorm);    	non-compiled	[CE]  cannot  find  symbol  lastIteration	142	None	replace
