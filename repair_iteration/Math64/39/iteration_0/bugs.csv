bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	failing_test_number	action	patch
77	[BUG] [BUGGY] double sPar = Math.sqrt(lmPar); [FE] AssertionFailedError [CONTEXT] if (lmPar == 0) { lmPar = gNorm / dxNorm; } for (int countdown = 10; countdown >= 0; --countdown) {  if (lmPar == 0) { lmPar = Math.max(2.2251e-308, 0.001 * paru); } [BUGGY] double sPar = Math.sqrt(lmPar); [BUGGY] for (int j = 0; j < solvedCols; ++j) { int pj = permutation[j]; work1[pj] = sPar * diag[pj]; } determineLMDirection(qy, work1, work2, work3); dxNorm = 0; for (int j = 0; j < solvedCols; ++j) { int pj = permutation[j]; double s = diag[pj] * lmDir[pj]; [CLASS] LevenbergMarquardtOptimizer [METHOD] determineLMParameter [RETURN_TYPE] void  double[] qy double delta double[] diag double[] work1 double[] work2 double[] work3 [VARIABLES] int[] permutation boolean double[] beta diag diagR jacNorm lmDir oldRes oldX qy tmpVec work1 work2 work3 double actRed coeff1 coeff2 correction costRelativeTolerance delta dirDer dirJ dk dxNorm fp gNorm initialStepBoundFactor lmNorm lmPar maxCosine orthoTolerance parRelativeTolerance parl paru pc2 preRed previousCost previousFP qrRankingThreshold r ratio s sPar sum sum2 threshold tmp xK xNorm xk ypk int countdown i j k pj pk rank solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	579	579	2	replace	
78	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] if (lmPar == 0) { lmPar = gNorm / dxNorm; } for (int countdown = 10; countdown >= 0; --countdown) {  if (lmPar == 0) { lmPar = Math.max(2.2251e-308, 0.001 * paru); } [BUGGY] [BUGGY] double sPar = Math.sqrt(lmPar); for (int j = 0; j < solvedCols; ++j) { int pj = permutation[j]; work1[pj] = sPar * diag[pj]; } determineLMDirection(qy, work1, work2, work3); dxNorm = 0; for (int j = 0; j < solvedCols; ++j) { int pj = permutation[j]; double s = diag[pj] * lmDir[pj]; [CLASS] LevenbergMarquardtOptimizer [METHOD] determineLMParameter [RETURN_TYPE] void  double[] qy double delta double[] diag double[] work1 double[] work2 double[] work3 [VARIABLES] int[] permutation boolean double[] beta diag diagR jacNorm lmDir oldRes oldX qy tmpVec work1 work2 work3 double actRed coeff1 coeff2 correction costRelativeTolerance delta dirDer dirJ dk dxNorm fp gNorm initialStepBoundFactor lmNorm lmPar maxCosine orthoTolerance parRelativeTolerance parl paru pc2 preRed previousCost previousFP qrRankingThreshold r ratio s sPar sum sum2 threshold tmp xK xNorm xk ypk int countdown i j k pj pk rank solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	579	579	2	add	
