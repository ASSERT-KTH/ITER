bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  tmpVec  =  cost;  [CE]  incompatible  types  [FE]    AssertionFailedError    [CONTEXT]        }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;      [BUGGY]  tmpVec  =  cost;  [BUGGY]      oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	432	432	2	replace	tmpVec  =  cost;	  tmpVec    =    oldRes;    	non-compiled	[CE]  incompatible  types	48	None	replace
2	[BUG]  [BUGGY]  tmpVec  =  previousCost;  [CE]  incompatible  types  [FE]      AssertionFailedError    [CONTEXT]        }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;      [BUGGY]  tmpVec  =  previousCost;  [BUGGY]      oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	432	432	2	replace	tmpVec  =  previousCost;	  tmpVec    =    oldRes;    	non-compiled	[CE]  incompatible  types	48	None	replace
3	[BUG]  [BUGGY]  tmpVec  =  preRed;  [CE]  incompatible  types  [FE]        AssertionFailedError    [CONTEXT]        }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;      [BUGGY]  tmpVec  =  preRed;  [BUGGY]      oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	432	432	2	replace	tmpVec  =  preRed;	  tmpVec    =    oldRes;    	non-compiled	[CE]  incompatible  types	48	None	replace
4	[BUG]  [BUGGY]  tmpVec  =  new  VectorialPointValuePair(previousCost,  oldX,  previousCost,  cost);  [CE]  no  suitable  constructor  found  for  VectorialPointValuePair(double,double[],double,double)  [FE]                AssertionFailedError      [CONTEXT]        }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;      [BUGGY]  tmpVec  =  new  VectorialPointValuePair(previousCost,  oldX,  previousCost,  cost);  [BUGGY]      residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	432	432	2	replace	tmpVec  =  new  VectorialPointValuePair(previousCost,  oldX,  previousCost,  cost);	  tmpVec    =    new    VectorialPointValuePair(previousCost,    oldX,    cost);    	non-compiled	[CE]  no  suitable  constructor  found  for  VectorialPointValuePair(double,double[],double,double)	13	None	replace
5	[BUG]  [BUGGY]  tmpVec  =  new  VectorialPointValuePair(previousCost,  oldX,  preRed,  cost);  [CE]  no  suitable  constructor  found  for  VectorialPointValuePair(double,double[],double,double)  [FE]                  AssertionFailedError      [CONTEXT]        }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;      [BUGGY]  tmpVec  =  new  VectorialPointValuePair(previousCost,  oldX,  preRed,  cost);  [BUGGY]      residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	432	432	2	replace	tmpVec  =  new  VectorialPointValuePair(previousCost,  oldX,  preRed,  cost);	  tmpVec    =    new    VectorialPointValuePair(previousCost,    oldX,    cost);    	non-compiled	[CE]  no  suitable  constructor  found  for  VectorialPointValuePair(double,double[],double,double)	13	None	replace
6	[BUG]  [BUGGY]  tmpVec  =  new  VectorialPointValuePair(previousCost,  oldX,  preres,  cost);  [CE]  cannot  find  symbol  preres  [FE]                    AssertionFailedError      [CONTEXT]        }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;      [BUGGY]  tmpVec  =  new  VectorialPointValuePair(previousCost,  oldX,  preres,  cost);  [BUGGY]      residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	432	432	2	replace	tmpVec  =  new  VectorialPointValuePair(previousCost,  oldX,  preres,  cost);	  tmpVec    =    new    VectorialPointValuePair(previousCost,    oldX,    cost);    	non-compiled	[CE]  cannot  find  symbol  preres	13	None	replace
7	[BUG]  [BUGGY]  tmpVec  =  new  VectorialPointValuePair(previousCost,  oldX,  point,  cost);  [CE]  no  suitable  constructor  found  for  VectorialPointValuePair(double,double[],double[],double)  [FE]                      AssertionFailedError      [CONTEXT]        }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;      [BUGGY]  tmpVec  =  new  VectorialPointValuePair(previousCost,  oldX,  point,  cost);  [BUGGY]      residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	432	432	2	replace	tmpVec  =  new  VectorialPointValuePair(previousCost,  oldX,  point,  cost);	  tmpVec    =    new    VectorialPointValuePair(previousCost,    oldX,    cost);    	non-compiled	[CE]  no  suitable  constructor  found  for  VectorialPointValuePair(double,double[],double[],double)	13	None	replace
8	[BUG]  [BUGGY]  tmpVec  =  new  VectorialPointValuePair(previousCost,  point,  oldX,  cost);  [CE]  no  suitable  constructor  found  for  VectorialPointValuePair(double,double[],double[],double)  [FE]                  AssertionFailedError      [CONTEXT]        }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;      [BUGGY]  tmpVec  =  new  VectorialPointValuePair(previousCost,  point,  oldX,  cost);  [BUGGY]      residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	432	432	2	replace	tmpVec  =  new  VectorialPointValuePair(previousCost,  point,  oldX,  cost);	  tmpVec    =    new    VectorialPointValuePair(previousCost,    point,    cost);    	non-compiled	[CE]  no  suitable  constructor  found  for  VectorialPointValuePair(double,double[],double[],double)	14	None	replace
9	[BUG]  [BUGGY]  tmpVec  =  new  VectorialPointValuePair(previousCost,  cost,  point);  [CE]  no  suitable  constructor  found  for  VectorialPointValuePair(double,double,double[])  [FE]                    AssertionFailedError      [CONTEXT]        }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;      [BUGGY]  tmpVec  =  new  VectorialPointValuePair(previousCost,  cost,  point);  [BUGGY]      residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	432	432	2	replace	tmpVec  =  new  VectorialPointValuePair(previousCost,  cost,  point);	  tmpVec    =    new    VectorialPointValuePair(previousCost,    point,    cost);    	non-compiled	[CE]  no  suitable  constructor  found  for  VectorialPointValuePair(double,double,double[])	14	None	replace
10	[BUG]  [BUGGY]  tmpVec  =  new  VectorialPointValuePair(previousCost,  point,  preRed,  cost);  [CE]  no  suitable  constructor  found  for  VectorialPointValuePair(double,double[],double,double)  [FE]                      AssertionFailedError      [CONTEXT]        }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;      [BUGGY]  tmpVec  =  new  VectorialPointValuePair(previousCost,  point,  preRed,  cost);  [BUGGY]      residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	432	432	2	replace	tmpVec  =  new  VectorialPointValuePair(previousCost,  point,  preRed,  cost);	  tmpVec    =    new    VectorialPointValuePair(previousCost,    point,    cost);    	non-compiled	[CE]  no  suitable  constructor  found  for  VectorialPointValuePair(double,double[],double,double)	14	None	replace
11	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]        }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;      [BUGGY]  tmpVec  =  oldRes;  tmpVec  =  oldRes;  [BUGGY]      oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	432	432	2	add	tmpVec    =    oldRes;    tmpVec  =  oldRes;	  	compilable	  [FE]  AssertionFailedError  	47	10	add
12	[BUG]  [BUGGY]  tmpVec  =  oldRes;  tmpVec  =  oldRes;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]        }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;      [BUGGY]  tmpVec  =  oldRes;  tmpVec  =  oldRes;  [BUGGY]      oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	432	432	2	replace	tmpVec    =    oldRes;    tmpVec  =  oldRes;	  	compilable	  [FE]  AssertionFailedError  	47	10	add
13	[BUG]  [BUGGY]  tmpVec  =  oldRes;  ((  VectorialPointValuePair)previousCost).doubleValue();  tmpVec  =  oldRes;  [CE]  inconvertible  types  [FE]      AssertionFailedError    [CONTEXT]        }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;      [BUGGY]  tmpVec  =  oldRes;  ((  VectorialPointValuePair)previousCost).doubleValue();  tmpVec  =  oldRes;  [BUGGY]      oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	432	432	2	replace	tmpVec    =    oldRes;    ((  VectorialPointValuePair)previousCost).doubleValue();  tmpVec  =  oldRes;	  	non-compiled	[CE]  inconvertible  types	47	None	add
14	[BUG]  [BUGGY]  tmpVec  =  oldRes;  ((  VectorialPointValuePair)previousCost).setVec(tmpVec);  tmpVec  =  oldRes;  [CE]  inconvertible  types  [FE]        AssertionFailedError    [CONTEXT]        }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;      [BUGGY]  tmpVec  =  oldRes;  ((  VectorialPointValuePair)previousCost).setVec(tmpVec);  tmpVec  =  oldRes;  [BUGGY]      oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	432	432	2	replace	tmpVec    =    oldRes;    ((  VectorialPointValuePair)previousCost).setVec(tmpVec);  tmpVec  =  oldRes;	  	non-compiled	[CE]  inconvertible  types	47	None	add
15	[BUG]  [BUGGY]  tmpVec  =  oldRes;  ((  VectorialPointValuePair)previousCost).setVec(tmpVec);  [CE]  inconvertible  types  [FE]          AssertionFailedError    [CONTEXT]        }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;      [BUGGY]  tmpVec  =  oldRes;  ((  VectorialPointValuePair)previousCost).setVec(tmpVec);  [BUGGY]      oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	432	432	2	replace	tmpVec    =    oldRes;    ((  VectorialPointValuePair)previousCost).setVec(tmpVec);	  	non-compiled	[CE]  inconvertible  types	47	None	add
16	[BUG]  [BUGGY]  tmpVec  =  oldRes;  ((  VectorialPointValuePair)previousCost).doubleValue();  tmpVec  =  oldRes.doubleValue();  [CE]  inconvertible  types  [FE]            AssertionFailedError    [CONTEXT]        }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;      [BUGGY]  tmpVec  =  oldRes;  ((  VectorialPointValuePair)previousCost).doubleValue();  tmpVec  =  oldRes.doubleValue();  [BUGGY]      oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	432	432	2	replace	tmpVec    =    oldRes;    ((  VectorialPointValuePair)previousCost).doubleValue();  tmpVec  =  oldRes.doubleValue();	  	non-compiled	[CE]  inconvertible  types	47	None	add
17	[BUG]  [BUGGY]  new  VectorialPointValuePair(previousCost,  oldX,  oldRes,  tmpVec,  tmpVec);  [CE]  no  suitable  constructor  found  for  VectorialPointValuePair(double,double[],double[],double[],double[])  [FE]            AssertionFailedError      [CONTEXT]        }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;      [BUGGY]  new  VectorialPointValuePair(previousCost,  oldX,  oldRes,  tmpVec,  tmpVec);  [BUGGY]      residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	432	432	2	replace	new  VectorialPointValuePair(previousCost,  oldX,  oldRes,  tmpVec,  tmpVec);	          oldRes    =    tmpVec;    new    VectorialPointValuePair(previousCost,    oldX,    oldRes,    tmpVec);    	non-compiled	[CE]  no  suitable  constructor  found  for  VectorialPointValuePair(double,double[],double[],double[],double[])	41	None	replace
18	[BUG]  [BUGGY]  new  VectorialPointValuePair(previousCost,  oldX,  oldRes,  tmpVec);  [CE]  no  suitable  constructor  found  for  VectorialPointValuePair(double,double[],double[],double[])  [FE]              AssertionFailedError      [CONTEXT]        }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;      [BUGGY]  new  VectorialPointValuePair(previousCost,  oldX,  oldRes,  tmpVec);  [BUGGY]      residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	432	432	2	replace	new  VectorialPointValuePair(previousCost,  oldX,  oldRes,  tmpVec);	          oldRes    =    tmpVec;    new    VectorialPointValuePair(previousCost,    oldX,    oldRes,    tmpVec);    	non-compiled	[CE]  no  suitable  constructor  found  for  VectorialPointValuePair(double,double[],double[],double[])	41	None	replace
19	[BUG]  [BUGGY]  oldRes  =  prevCost;  new  VectorialPointValuePair(previousCost,  oldX,  oldRes,  tmpVec);  [CE]  cannot  find  symbol  prevCost  [FE]                AssertionFailedError      [CONTEXT]        }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;      [BUGGY]  oldRes  =  prevCost;  new  VectorialPointValuePair(previousCost,  oldX,  oldRes,  tmpVec);  [BUGGY]      residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	432	432	2	replace	oldRes  =  prevCost;  new  VectorialPointValuePair(previousCost,  oldX,  oldRes,  tmpVec);	          oldRes    =    tmpVec;    new    VectorialPointValuePair(previousCost,    oldX,    oldRes,    tmpVec);    	non-compiled	[CE]  cannot  find  symbol  prevCost	41	None	replace
20	[BUG]  [BUGGY]  result  =  cost;  [CE]  cannot  find  symbol  result  [FE]            AssertionFailedError      [CONTEXT]        }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;      [BUGGY]  result  =  cost;  [BUGGY]      oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	432	432	2	replace	result  =  cost;	  rsults    =    result;    	non-compiled	[CE]  cannot  find  symbol  result	84	None	replace
21	[BUG]  [BUGGY]  results  =  result;  [CE]  cannot  find  symbol  results  [FE]              AssertionFailedError      [CONTEXT]        }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;      [BUGGY]  results  =  result;  [BUGGY]      oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	432	432	2	replace	results  =  result;	  rsults    =    result;    	non-compiled	[CE]  cannot  find  symbol  results	84	None	replace
22	[BUG]  [BUGGY]  results  =  cost;  [CE]  cannot  find  symbol  results  [FE]                AssertionFailedError      [CONTEXT]        }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;      [BUGGY]  results  =  cost;  [BUGGY]      oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	432	432	2	replace	results  =  cost;	  rsults    =    result;    	non-compiled	[CE]  cannot  find  symbol  results	84	None	replace
23	[BUG]  [BUGGY]  if(remainings  >  0)  {  oldRes  =  tmpVec;  }  else  {  cost  =  previousCost;  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  point[j]  =  point[j];  }  }  [CE]  cannot  find  symbol  remainings  [FE]        AssertionFailedError      [CONTEXT]        }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;      [BUGGY]  if(remainings  >  0)  {  oldRes  =  tmpVec;  }  else  {  cost  =  previousCost;  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  point[j]  =  point[j];  }  }  [BUGGY]      residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	432	432	2	replace	if(remainings  >  0)  {  oldRes  =  tmpVec;  }  else  {  cost  =  previousCost;  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  point[j]  =  point[j];  }  }	          oldRes    =    tmpVec;    if(remainings    >    0)    {    oldRes    =    tmpVec;    }    else    {    cost    =    previousCost;    for(int    j    =    0;    j    <    solvedCols;    ++j)    {    point[j]    =    point[j];    }    	non-compiled	[CE]  cannot  find  symbol  remainings	97	None	replace
24	[BUG]  [BUGGY]  if(remainings  >  0)  {  oldRes  =  previousCost;  }  else  {  cost  =  previousCost;  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  point[j]  =  point[j];  }  }  [CE]  cannot  find  symbol  remainings  [FE]          AssertionFailedError      [CONTEXT]        }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;      [BUGGY]  if(remainings  >  0)  {  oldRes  =  previousCost;  }  else  {  cost  =  previousCost;  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  point[j]  =  point[j];  }  }  [BUGGY]      residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	432	432	2	replace	if(remainings  >  0)  {  oldRes  =  previousCost;  }  else  {  cost  =  previousCost;  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  point[j]  =  point[j];  }  }	          oldRes    =    tmpVec;    if(remainings    >    0)    {    oldRes    =    tmpVec;    }    else    {    cost    =    previousCost;    for(int    j    =    0;    j    <    solvedCols;    ++j)    {    point[j]    =    point[j];    }    	non-compiled	[CE]  cannot  find  symbol  remainings	97	None	replace
25	[BUG]  [BUGGY]  if(remainings  >  0)  {  oldRes  =  tmpVec;  }  else  {  cost  =  previousCost;  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  point[j]  =  point[j];  }  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]        }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;      [BUGGY]  if(remainings  >  0)  {  oldRes  =  tmpVec;  }  else  {  cost  =  previousCost;  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  point[j]  =  point[j];  }  [BUGGY]      residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	432	432	2	replace	if(remainings  >  0)  {  oldRes  =  tmpVec;  }  else  {  cost  =  previousCost;  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  point[j]  =  point[j];  }	          oldRes    =    tmpVec;    if(remainings    >    0)    {    oldRes    =    tmpVec;    }    else    {    cost    =    previousCost;    for(int    j    =    0;    j    <    solvedCols;    ++j)    {    point[j]    =    point[j];    }    	non-compiled	[CE]  illegal  start  of  expression	97	None	replace
26	[BUG]  [BUGGY]  if(remainings  >  0)  {  oldRes  =  previousCost;  }  else  {  cost  =  previousCost;  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  point[j]  =  point[j];  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]        }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;      [BUGGY]  if(remainings  >  0)  {  oldRes  =  previousCost;  }  else  {  cost  =  previousCost;  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  point[j]  =  point[j];  }  [BUGGY]      residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	432	432	2	replace	if(remainings  >  0)  {  oldRes  =  previousCost;  }  else  {  cost  =  previousCost;  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  point[j]  =  point[j];  }	          oldRes    =    tmpVec;    if(remainings    >    0)    {    oldRes    =    tmpVec;    }    else    {    cost    =    previousCost;    for(int    j    =    0;    j    <    solvedCols;    ++j)    {    point[j]    =    point[j];    }    	non-compiled	[CE]  illegal  start  of  expression	97	None	replace
27	[BUG]  [BUGGY]  residuals  -=  oldX.length;  [CE]  bad  operand  types  for  binary  operator  '-'  [FE]                  AssertionFailedError      [CONTEXT]        }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;      [BUGGY]  residuals  -=  oldX.length;  [BUGGY]      oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	432	432	2	replace	residuals  -=  oldX.length;	  residuals    -=    oldRes.length;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '-'	45	None	replace
28	[BUG]  [BUGGY]  tmpVec  -=  oldRes.length;  [CE]  bad  operand  types  for  binary  operator  '-'  [FE]                    AssertionFailedError      [CONTEXT]        }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;      [BUGGY]  tmpVec  -=  oldRes.length;  [BUGGY]      oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	432	432	2	replace	tmpVec  -=  oldRes.length;	  residuals    -=    oldRes.length;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '-'	45	None	replace
29	[BUG]  [BUGGY]  residuals  -=  oldRes.length  -  1;  [CE]  bad  operand  types  for  binary  operator  '-'  [FE]                      AssertionFailedError      [CONTEXT]        }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;      [BUGGY]  residuals  -=  oldRes.length  -  1;  [BUGGY]      oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	432	432	2	replace	residuals  -=  oldRes.length  -  1;	  residuals    -=    oldRes.length;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '-'	45	None	replace
30	[BUG]  [BUGGY]  tmpVec  =  preRed;  for(int  j  =  0;  j  <  solveCols;  ++j)  {  point[pj]  =  oldX[pj].doubleValue();  }  [CE]  incompatible  types  [FE]                    AssertionFailedError      [CONTEXT]        }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;      [BUGGY]  tmpVec  =  preRed;  for(int  j  =  0;  j  <  solveCols;  ++j)  {  point[pj]  =  oldX[pj].doubleValue();  }  [BUGGY]      residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	432	432	2	replace	tmpVec  =  preRed;  for(int  j  =  0;  j  <  solveCols;  ++j)  {  point[pj]  =  oldX[pj].doubleValue();  }	  tmpVec    =    previousCost;    for(int    j    =    0;    j    <    solveCols;    ++j)    {    point[pj]    =    oldX[pj].doubleValue();    }    	non-compiled	[CE]  incompatible  types	4	None	replace
31	[BUG]  [BUGGY]  tmpVec  =  preRed;  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  point[pj]  =  oldX[pj].doubleValue();  }  [CE]  incompatible  types  [FE]                      AssertionFailedError      [CONTEXT]        }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;      [BUGGY]  tmpVec  =  preRed;  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  point[pj]  =  oldX[pj].doubleValue();  }  [BUGGY]      residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	432	432	2	replace	tmpVec  =  preRed;  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  point[pj]  =  oldX[pj].doubleValue();  }	  tmpVec    =    previousCost;    for(int    j    =    0;    j    <    solveCols;    ++j)    {    point[pj]    =    oldX[pj].doubleValue();    }    	non-compiled	[CE]  incompatible  types	4	None	replace
32	[BUG]  [BUGGY]  rs  =  cost;  [CE]  cannot  find  symbol  rs  [FE]              AssertionFailedError      [CONTEXT]        }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;      [BUGGY]  rs  =  cost;  [BUGGY]      oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	432	432	2	replace	rs  =  cost;	  rsults    =    cost;    	non-compiled	[CE]  cannot  find  symbol  rs	85	None	replace
33	[BUG]  [BUGGY]  tmpVec  =  new  VectorialPointValuePair(previousCost,  preRed,  costRelativeTolerance);  [CE]  no  suitable  constructor  found  for  VectorialPointValuePair(double,double,double)  [FE]                      AssertionFailedError      [CONTEXT]        }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;      [BUGGY]  tmpVec  =  new  VectorialPointValuePair(previousCost,  preRed,  costRelativeTolerance);  [BUGGY]      residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	432	432	2	replace	tmpVec  =  new  VectorialPointValuePair(previousCost,  preRed,  costRelativeTolerance);	  tmpVec    =    new    VectorialPointValuePair(previousCost,    preRed,    lastIteration);    	non-compiled	[CE]  no  suitable  constructor  found  for  VectorialPointValuePair(double,double,double)	10	None	replace
34	[BUG]  [BUGGY]  tmpVec  =  new  VectorialPointValuePair(previousCost,  preRed,  costIteration);  [CE]  cannot  find  symbol  costIteration  [FE]                        AssertionFailedError      [CONTEXT]        }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;      [BUGGY]  tmpVec  =  new  VectorialPointValuePair(previousCost,  preRed,  costIteration);  [BUGGY]      residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	432	432	2	replace	tmpVec  =  new  VectorialPointValuePair(previousCost,  preRed,  costIteration);	  tmpVec    =    new    VectorialPointValuePair(previousCost,    preRed,    lastIteration);    	non-compiled	[CE]  cannot  find  symbol  costIteration	10	None	replace
35	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]        }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;      [BUGGY]          oldRes    =    tmpVec;    tmpVec  =  tmpVec;  oldRes  =  tmpVec;  tmpVec  =  tmpVec;  [BUGGY]      residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	432	432	2	add	                oldRes        =        tmpVec;        tmpVec    =    tmpVec;    oldRes  =  tmpVec;  tmpVec  =  tmpVec;	  	compilable	  [FE]  AssertionFailedError  	39	10	add
36	[BUG]  [BUGGY]          oldRes    =    tmpVec;    tmpVec  =  tmpVec;  oldRes  =  tmpVec;  tmpVec  =  tmpVec;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]        }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;      [BUGGY]          oldRes    =    tmpVec;    tmpVec  =  tmpVec;  oldRes  =  tmpVec;  tmpVec  =  tmpVec;  [BUGGY]      residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	432	432	2	replace	                oldRes        =        tmpVec;        tmpVec    =    tmpVec;    oldRes  =  tmpVec;  tmpVec  =  tmpVec;	  	compilable	  [FE]  AssertionFailedError  	39	10	add
37	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]        }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;      [BUGGY]          oldRes    =    tmpVec;    tmpVec  =  tmpVec;  tmpVec  =  tmpVec;  tmpVec  =  tmpVec;  [BUGGY]      residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	432	432	2	add	                oldRes        =        tmpVec;        tmpVec    =    tmpVec;    tmpVec  =  tmpVec;  tmpVec  =  tmpVec;	  	compilable	  [FE]  AssertionFailedError  	39	10	add
38	[BUG]  [BUGGY]          oldRes    =    tmpVec;    tmpVec  =  tmpVec;  tmpVec  =  tmpVec;  tmpVec  =  tmpVec;  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]        }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;      [BUGGY]          oldRes    =    tmpVec;    tmpVec  =  tmpVec;  tmpVec  =  tmpVec;  tmpVec  =  tmpVec;  [BUGGY]      residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	432	432	2	replace	                oldRes        =        tmpVec;        tmpVec    =    tmpVec;    tmpVec  =  tmpVec;  tmpVec  =  tmpVec;	  	compilable	  [FE]  AssertionFailedError  	39	10	add
39	[BUG]  [BUGGY]          oldRes    =    tmpVec;    tmpVec  =  tmpVec;  OldRes  =  tmpVec;  tmpVec  =  tmpVec;  [CE]  cannot  find  symbol  OldRes  [FE]        AssertionFailedError    [CONTEXT]        }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;      [BUGGY]          oldRes    =    tmpVec;    tmpVec  =  tmpVec;  OldRes  =  tmpVec;  tmpVec  =  tmpVec;  [BUGGY]      residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	432	432	2	replace	                oldRes        =        tmpVec;        tmpVec    =    tmpVec;    OldRes  =  tmpVec;  tmpVec  =  tmpVec;	  	non-compiled	[CE]  cannot  find  symbol  OldRes	39	None	add
40	[BUG]  [BUGGY]          oldRes    =    tmpVec;    tmpVec  =  tmpVec;  newRes  =  tmpVec;  tmpVec  =  tmpVec;  [CE]  cannot  find  symbol  newRes  [FE]          AssertionFailedError    [CONTEXT]        }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;      [BUGGY]          oldRes    =    tmpVec;    tmpVec  =  tmpVec;  newRes  =  tmpVec;  tmpVec  =  tmpVec;  [BUGGY]      residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	432	432	2	replace	                oldRes        =        tmpVec;        tmpVec    =    tmpVec;    newRes  =  tmpVec;  tmpVec  =  tmpVec;	  	non-compiled	[CE]  cannot  find  symbol  newRes	39	None	add
41	[BUG]  [BUGGY]  residuals  =  tmpVec  +  2;  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]        AssertionFailedError      [CONTEXT]        }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;      [BUGGY]  residuals  =  tmpVec  +  2;  [BUGGY]      oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	432	432	2	replace	residuals  =  tmpVec  +  2;	  residuals    =    tmpVec    +    1;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	1	None	replace
42	[BUG]  [BUGGY]  residuals  =  oldX  +  1;  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]          AssertionFailedError      [CONTEXT]        }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;      [BUGGY]  residuals  =  oldX  +  1;  [BUGGY]      oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	432	432	2	replace	residuals  =  oldX  +  1;	  residuals    =    tmpVec    +    1;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	1	None	replace
43	[BUG]  [BUGGY]  res  =  tmpVec  +  1;  [CE]  cannot  find  symbol  res  [FE]            AssertionFailedError      [CONTEXT]        }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;      [BUGGY]  res  =  tmpVec  +  1;  [BUGGY]      oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	432	432	2	replace	res  =  tmpVec  +  1;	  residuals    =    tmpVec    +    1;    	non-compiled	[CE]  cannot  find  symbol  res	1	None	replace
44	[BUG]  [BUGGY]  tmpVec  =  preRed;  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  points[pj]  =  oldX[pj];  }  [CE]  incompatible  types  [FE]                  AssertionFailedError      [CONTEXT]        }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;      [BUGGY]  tmpVec  =  preRed;  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  points[pj]  =  oldX[pj];  }  [BUGGY]      residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	432	432	2	replace	tmpVec  =  preRed;  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  points[pj]  =  oldX[pj];  }	  tmpVec    =    previousCost;    for(int    j    =    0;    j    <    solvedCols;    ++j)    {    points[pj]    =    oldX[pj];    }    	non-compiled	[CE]  incompatible  types	33	None	replace
45	[BUG]  [BUGGY]  tmpVec  =  permutation;  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  points[pj]  =  oldX[pj];  }  [CE]  incompatible  types  [FE]                    AssertionFailedError      [CONTEXT]        }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;      [BUGGY]  tmpVec  =  permutation;  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  points[pj]  =  oldX[pj];  }  [BUGGY]      residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	432	432	2	replace	tmpVec  =  permutation;  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  points[pj]  =  oldX[pj];  }	  tmpVec    =    previousCost;    for(int    j    =    0;    j    <    solvedCols;    ++j)    {    points[pj]    =    oldX[pj];    }    	non-compiled	[CE]  incompatible  types	33	None	replace
46	[BUG]  [BUGGY]  tmpVec  =  preresult;  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  points[pj]  =  oldX[pj];  }  [CE]  cannot  find  symbol  preresult  [FE]                      AssertionFailedError      [CONTEXT]        }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;      [BUGGY]  tmpVec  =  preresult;  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  points[pj]  =  oldX[pj];  }  [BUGGY]      residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	432	432	2	replace	tmpVec  =  preresult;  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  points[pj]  =  oldX[pj];  }	  tmpVec    =    previousCost;    for(int    j    =    0;    j    <    solvedCols;    ++j)    {    points[pj]    =    oldX[pj];    }    	non-compiled	[CE]  cannot  find  symbol  preresult	33	None	replace
47	[BUG]  [BUGGY]  tmpVec  =  permutation[j];  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  point[j]  =  oldX[pj];  }  [CE]  cannot  find  symbol  j  [FE]                    AssertionFailedError      [CONTEXT]        }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;      [BUGGY]  tmpVec  =  permutation[j];  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  point[j]  =  oldX[pj];  }  [BUGGY]      residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	432	432	2	replace	tmpVec  =  permutation[j];  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  point[j]  =  oldX[pj];  }	  if(tmpVec!=    previousCost)    {    cost    =    permutation[j];    for(int    j    =    0;    j    <    solvedCols;    ++j)    {    point[j]    =    oldX[pj];    }    	non-compiled	[CE]  cannot  find  symbol  j	93	None	replace
48	[BUG]  [BUGGY]  tmpVec  =  permutation[j];  for(int  j  =  0;  j  <  solveCols;  ++j)  {  point[j]  =  oldX[pj];  }  [CE]  cannot  find  symbol  j  [FE]                      AssertionFailedError      [CONTEXT]        }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;      [BUGGY]  tmpVec  =  permutation[j];  for(int  j  =  0;  j  <  solveCols;  ++j)  {  point[j]  =  oldX[pj];  }  [BUGGY]      residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	432	432	2	replace	tmpVec  =  permutation[j];  for(int  j  =  0;  j  <  solveCols;  ++j)  {  point[j]  =  oldX[pj];  }	  if(tmpVec!=    previousCost)    {    cost    =    permutation[j];    for(int    j    =    0;    j    <    solvedCols;    ++j)    {    point[j]    =    oldX[pj];    }    	non-compiled	[CE]  cannot  find  symbol  j	93	None	replace
49	[BUG]  [BUGGY]  tmpVec  =  permutation[j];  for(int  j  =  0;  j  <  resolvedCols;  ++j)  {  point[j]  =  oldX[pj];  }  [CE]  cannot  find  symbol  j  [FE]                        AssertionFailedError      [CONTEXT]        }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;      [BUGGY]  tmpVec  =  permutation[j];  for(int  j  =  0;  j  <  resolvedCols;  ++j)  {  point[j]  =  oldX[pj];  }  [BUGGY]      residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	432	432	2	replace	tmpVec  =  permutation[j];  for(int  j  =  0;  j  <  resolvedCols;  ++j)  {  point[j]  =  oldX[pj];  }	  if(tmpVec!=    previousCost)    {    cost    =    permutation[j];    for(int    j    =    0;    j    <    solvedCols;    ++j)    {    point[j]    =    oldX[pj];    }    	non-compiled	[CE]  cannot  find  symbol  j	93	None	replace
50	[BUG]  [BUGGY]  tmpVec  =  permutation[j];  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  points[j]  =  oldX[pj];  }  [CE]  cannot  find  symbol  j  [FE]                          AssertionFailedError      [CONTEXT]        }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;      [BUGGY]  tmpVec  =  permutation[j];  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  points[j]  =  oldX[pj];  }  [BUGGY]      residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	432	432	2	replace	tmpVec  =  permutation[j];  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  points[j]  =  oldX[pj];  }	  if(tmpVec!=    previousCost)    {    cost    =    permutation[j];    for(int    j    =    0;    j    <    solvedCols;    ++j)    {    point[j]    =    oldX[pj];    }    	non-compiled	[CE]  cannot  find  symbol  j	93	None	replace
51	[BUG]  [BUGGY]  if(remainings  >  0)  {  oldRes  =  tmpVec;  }  else  {  cost  =  previousCost;  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  point[pj]  =  point[j];  }  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]        }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;      [BUGGY]  if(remainings  >  0)  {  oldRes  =  tmpVec;  }  else  {  cost  =  previousCost;  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  point[pj]  =  point[j];  }  [BUGGY]      residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	432	432	2	replace	if(remainings  >  0)  {  oldRes  =  tmpVec;  }  else  {  cost  =  previousCost;  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  point[pj]  =  point[j];  }	          oldRes    =    tmpVec;    if(remainings    >    0)    {    oldRes    =    tmpVec;    }    else    {    cost    =    previousCost;    for(int    j    =    0;    j    <    solvedCols;    ++j)    {    point[pj]    =    point[j];    }    	non-compiled	[CE]  illegal  start  of  expression	99	None	replace
52	[BUG]  [BUGGY]  if(remainings  >  0)  {  oldRes  =  previousCost;  }  else  {  cost  =  previousCost;  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  point[pj]  =  point[j];  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]        }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;      [BUGGY]  if(remainings  >  0)  {  oldRes  =  previousCost;  }  else  {  cost  =  previousCost;  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  point[pj]  =  point[j];  }  [BUGGY]      residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	432	432	2	replace	if(remainings  >  0)  {  oldRes  =  previousCost;  }  else  {  cost  =  previousCost;  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  point[pj]  =  point[j];  }	          oldRes    =    tmpVec;    if(remainings    >    0)    {    oldRes    =    tmpVec;    }    else    {    cost    =    previousCost;    for(int    j    =    0;    j    <    solvedCols;    ++j)    {    point[pj]    =    point[j];    }    	non-compiled	[CE]  illegal  start  of  expression	99	None	replace
53	[BUG]  [BUGGY]  if(remainings  >  0)  {  oldRes  =  tmpVec;  }  else  {  cost  =  previousCost;  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  point[pj]  =  point[j];  }  }  [CE]  cannot  find  symbol  remainings  [FE]                AssertionFailedError      [CONTEXT]        }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;      [BUGGY]  if(remainings  >  0)  {  oldRes  =  tmpVec;  }  else  {  cost  =  previousCost;  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  point[pj]  =  point[j];  }  }  [BUGGY]      residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	432	432	2	replace	if(remainings  >  0)  {  oldRes  =  tmpVec;  }  else  {  cost  =  previousCost;  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  point[pj]  =  point[j];  }  }	          oldRes    =    tmpVec;    if(remainings    >    0)    {    oldRes    =    tmpVec;    }    else    {    cost    =    previousCost;    for(int    j    =    0;    j    <    solvedCols;    ++j)    {    point[pj]    =    point[j];    }    	non-compiled	[CE]  cannot  find  symbol  remainings	99	None	replace
54	[BUG]  [BUGGY]  if(remainings  >  0)  {  oldRes  =  previousCost;  }  else  {  cost  =  previousCost;  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  point[pj]  =  point[j];  }  }  [CE]  cannot  find  symbol  remainings  [FE]                  AssertionFailedError      [CONTEXT]        }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;      [BUGGY]  if(remainings  >  0)  {  oldRes  =  previousCost;  }  else  {  cost  =  previousCost;  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  point[pj]  =  point[j];  }  }  [BUGGY]      residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	432	432	2	replace	if(remainings  >  0)  {  oldRes  =  previousCost;  }  else  {  cost  =  previousCost;  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  point[pj]  =  point[j];  }  }	          oldRes    =    tmpVec;    if(remainings    >    0)    {    oldRes    =    tmpVec;    }    else    {    cost    =    previousCost;    for(int    j    =    0;    j    <    solvedCols;    ++j)    {    point[pj]    =    point[j];    }    	non-compiled	[CE]  cannot  find  symbol  remainings	99	None	replace
55	[BUG]  [BUGGY]  tmpVec  =  preRed;  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  point[pj]  =  oldX[pj];  }  [CE]  incompatible  types  [FE]            AssertionFailedError      [CONTEXT]        }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;      [BUGGY]  tmpVec  =  preRed;  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  point[pj]  =  oldX[pj];  }  [BUGGY]      residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	432	432	2	replace	tmpVec  =  preRed;  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  point[pj]  =  oldX[pj];  }	  tmpVec    =    previousCost;    for(int    j    =    0;    j    <    solvedCols;    ++j)    {    point[pj]    =    oldX[pj];    }    	non-compiled	[CE]  incompatible  types	30	None	replace
56	[BUG]  [BUGGY]  tmpVec  =  permutation;  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  point[pj]  =  oldX[pj];  }  [CE]  incompatible  types  [FE]              AssertionFailedError      [CONTEXT]        }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;      [BUGGY]  tmpVec  =  permutation;  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  point[pj]  =  oldX[pj];  }  [BUGGY]      residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	432	432	2	replace	tmpVec  =  permutation;  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  point[pj]  =  oldX[pj];  }	  tmpVec    =    previousCost;    for(int    j    =    0;    j    <    solvedCols;    ++j)    {    point[pj]    =    oldX[pj];    }    	non-compiled	[CE]  incompatible  types	30	None	replace
57	[BUG]  [BUGGY]  tmpVec  =  preresult;  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  point[pj]  =  oldX[pj];  }  [CE]  cannot  find  symbol  preresult  [FE]                AssertionFailedError      [CONTEXT]        }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;      [BUGGY]  tmpVec  =  preresult;  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  point[pj]  =  oldX[pj];  }  [BUGGY]      residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	432	432	2	replace	tmpVec  =  preresult;  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  point[pj]  =  oldX[pj];  }	  tmpVec    =    previousCost;    for(int    j    =    0;    j    <    solvedCols;    ++j)    {    point[pj]    =    oldX[pj];    }    	non-compiled	[CE]  cannot  find  symbol  preresult	30	None	replace
58	[BUG]  [BUGGY]  if(remainings  >  oldRes)  {  oldRes  =  previousCost;  }  else  {  cost  =  previousCost;  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  point[pj]  =  point[pj].getX();  }  }  [CE]  cannot  find  symbol  remainings  [FE]            AssertionFailedError      [CONTEXT]        }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;      [BUGGY]  if(remainings  >  oldRes)  {  oldRes  =  previousCost;  }  else  {  cost  =  previousCost;  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  point[pj]  =  point[pj].getX();  }  }  [BUGGY]      residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	432	432	2	replace	if(remainings  >  oldRes)  {  oldRes  =  previousCost;  }  else  {  cost  =  previousCost;  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  point[pj]  =  point[pj].getX();  }  }	          oldRes    =    tmpVec;    if(remainings    >    oldRes)    {    oldRes    =    tmpVec;    }    else    {    cost    =    previousCost;    for(int    j    =    0;    j    <    solvedCols;    ++j)    {    point[pj]    =    point[pj].getX();    }    	non-compiled	[CE]  cannot  find  symbol  remainings	122	None	replace
59	[BUG]  [BUGGY]  if(remainings  >  oldRes)  {  oldRes  =  originalCost;  }  else  {  cost  =  previousCost;  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  point[pj]  =  point[pj].getX();  }  }  [CE]  cannot  find  symbol  remainings  [FE]              AssertionFailedError      [CONTEXT]        }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;      [BUGGY]  if(remainings  >  oldRes)  {  oldRes  =  originalCost;  }  else  {  cost  =  previousCost;  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  point[pj]  =  point[pj].getX();  }  }  [BUGGY]      residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	432	432	2	replace	if(remainings  >  oldRes)  {  oldRes  =  originalCost;  }  else  {  cost  =  previousCost;  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  point[pj]  =  point[pj].getX();  }  }	          oldRes    =    tmpVec;    if(remainings    >    oldRes)    {    oldRes    =    tmpVec;    }    else    {    cost    =    previousCost;    for(int    j    =    0;    j    <    solvedCols;    ++j)    {    point[pj]    =    point[pj].getX();    }    	non-compiled	[CE]  cannot  find  symbol  remainings	122	None	replace
60	[BUG]  [BUGGY]  if(remainings  >  oldRes)  {  oldRes  =  previousCost;  }  else  {  cost  =  previousCost;  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  point[pj]  =  point[pj].getX();  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]        }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;      [BUGGY]  if(remainings  >  oldRes)  {  oldRes  =  previousCost;  }  else  {  cost  =  previousCost;  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  point[pj]  =  point[pj].getX();  }  [BUGGY]      residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	432	432	2	replace	if(remainings  >  oldRes)  {  oldRes  =  previousCost;  }  else  {  cost  =  previousCost;  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  point[pj]  =  point[pj].getX();  }	          oldRes    =    tmpVec;    if(remainings    >    oldRes)    {    oldRes    =    tmpVec;    }    else    {    cost    =    previousCost;    for(int    j    =    0;    j    <    solvedCols;    ++j)    {    point[pj]    =    point[pj].getX();    }    	non-compiled	[CE]  illegal  start  of  expression	122	None	replace
61	[BUG]  [BUGGY]  if(remainings  >  oldRes)  {  oldRes  =  previousCost;  }  else  {  cost  =  previousCost;  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  point[pj]  =  point[pj].getY();  }  }  [CE]  cannot  find  symbol  remainings  [FE]                  AssertionFailedError      [CONTEXT]        }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;      [BUGGY]  if(remainings  >  oldRes)  {  oldRes  =  previousCost;  }  else  {  cost  =  previousCost;  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  point[pj]  =  point[pj].getY();  }  }  [BUGGY]      residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	432	432	2	replace	if(remainings  >  oldRes)  {  oldRes  =  previousCost;  }  else  {  cost  =  previousCost;  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  point[pj]  =  point[pj].getY();  }  }	          oldRes    =    tmpVec;    if(remainings    >    oldRes)    {    oldRes    =    tmpVec;    }    else    {    cost    =    previousCost;    for(int    j    =    0;    j    <    solvedCols;    ++j)    {    point[pj]    =    point[pj].getX();    }    	non-compiled	[CE]  cannot  find  symbol  remainings	122	None	replace
62	[BUG]  [BUGGY]  tmpVec  =  new  VectorialPointValuePair(previousCost,  preRed,  oldX);  [CE]  no  suitable  constructor  found  for  VectorialPointValuePair(double,double,double[])  [FE]                AssertionFailedError      [CONTEXT]        }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;      [BUGGY]  tmpVec  =  new  VectorialPointValuePair(previousCost,  preRed,  oldX);  [BUGGY]      residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	432	432	2	replace	tmpVec  =  new  VectorialPointValuePair(previousCost,  preRed,  oldX);	  tmpVec    =    new    VectorialPointValuePair(previousCost,    cost,    oldX);    	non-compiled	[CE]  no  suitable  constructor  found  for  VectorialPointValuePair(double,double,double[])	116	None	replace
63	[BUG]  [BUGGY]  tmpVec  =  new  VectorialPointValuePair(oldX,  cost,  previousCost);  [CE]  no  suitable  constructor  found  for  VectorialPointValuePair(double[],double,double)  [FE]                  AssertionFailedError      [CONTEXT]        }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;      [BUGGY]  tmpVec  =  new  VectorialPointValuePair(oldX,  cost,  previousCost);  [BUGGY]      residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	432	432	2	replace	tmpVec  =  new  VectorialPointValuePair(oldX,  cost,  previousCost);	  tmpVec    =    new    VectorialPointValuePair(previousCost,    cost,    oldX);    	non-compiled	[CE]  no  suitable  constructor  found  for  VectorialPointValuePair(double[],double,double)	116	None	replace
64	[BUG]  [BUGGY]  tmpVec  =  preRed;  for(int  j  =  0;  j  <  solveCols;  ++j)  {  point[j]  =  oldX[pj];  }  [CE]  incompatible  types  [FE]                      AssertionFailedError      [CONTEXT]        }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;      [BUGGY]  tmpVec  =  preRed;  for(int  j  =  0;  j  <  solveCols;  ++j)  {  point[j]  =  oldX[pj];  }  [BUGGY]      residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	432	432	2	replace	tmpVec  =  preRed;  for(int  j  =  0;  j  <  solveCols;  ++j)  {  point[j]  =  oldX[pj];  }	  tmpVec    =    previousCost;    for(int    j    =    0;    j    <    solveCols;    ++j)    {    point[j]    =    oldX[pj];    }    	non-compiled	[CE]  incompatible  types	65	None	replace
65	[BUG]  [BUGGY]  tmpVec  =  prevCost;  for(int  j  =  0;  j  <  solveCols;  ++j)  {  point[j]  =  oldX[pj];  }  [CE]  cannot  find  symbol  prevCost  [FE]                        AssertionFailedError      [CONTEXT]        }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;      [BUGGY]  tmpVec  =  prevCost;  for(int  j  =  0;  j  <  solveCols;  ++j)  {  point[j]  =  oldX[pj];  }  [BUGGY]      residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	432	432	2	replace	tmpVec  =  prevCost;  for(int  j  =  0;  j  <  solveCols;  ++j)  {  point[j]  =  oldX[pj];  }	  tmpVec    =    previousCost;    for(int    j    =    0;    j    <    solveCols;    ++j)    {    point[j]    =    oldX[pj];    }    	non-compiled	[CE]  cannot  find  symbol  prevCost	65	None	replace
66	[BUG]  [BUGGY]  tmpVec  =  preRed;  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  point[j]  =  oldX[pj];  }  [CE]  incompatible  types  [FE]                          AssertionFailedError      [CONTEXT]        }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;      [BUGGY]  tmpVec  =  preRed;  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  point[j]  =  oldX[pj];  }  [BUGGY]      residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	432	432	2	replace	tmpVec  =  preRed;  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  point[j]  =  oldX[pj];  }	  tmpVec    =    previousCost;    for(int    j    =    0;    j    <    solveCols;    ++j)    {    point[j]    =    oldX[pj];    }    	non-compiled	[CE]  incompatible  types	65	None	replace
67	[BUG]  [BUGGY]  tmpVec  =  prevCost;  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  point[pj]  =  oldX[pj];  }  [CE]  cannot  find  symbol  prevCost  [FE]              AssertionFailedError      [CONTEXT]        }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;      [BUGGY]  tmpVec  =  prevCost;  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  point[pj]  =  oldX[pj];  }  [BUGGY]      residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	432	432	2	replace	tmpVec  =  prevCost;  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  point[pj]  =  oldX[pj];  }	  if(tmpVec!=    previousCost)    {    cost    =    prevCost;    for(int    j    =    0;    j    <    solvedCols;    ++j)    {    point[pj]    =    oldX[pj];    }    	non-compiled	[CE]  cannot  find  symbol  prevCost	101	None	replace
68	[BUG]  [BUGGY]  previousCost  =  prevCost;  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  point[pj]  =  oldX[pj];  }  [CE]  cannot  find  symbol  prevCost  [FE]                AssertionFailedError      [CONTEXT]        }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;      [BUGGY]  previousCost  =  prevCost;  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  point[pj]  =  oldX[pj];  }  [BUGGY]      residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	432	432	2	replace	previousCost  =  prevCost;  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  point[pj]  =  oldX[pj];  }	  if(tmpVec!=    previousCost)    {    cost    =    prevCost;    for(int    j    =    0;    j    <    solvedCols;    ++j)    {    point[pj]    =    oldX[pj];    }    	non-compiled	[CE]  cannot  find  symbol  prevCost	101	None	replace
69	[BUG]  [BUGGY]  tmpVec  =  prevCost;  for(int  j  =  0;  j  <  resolvedCols;  ++j)  {  point[pj]  =  oldX[pj];  }  [CE]  cannot  find  symbol  prevCost  [FE]                  AssertionFailedError      [CONTEXT]        }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;      [BUGGY]  tmpVec  =  prevCost;  for(int  j  =  0;  j  <  resolvedCols;  ++j)  {  point[pj]  =  oldX[pj];  }  [BUGGY]      residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	432	432	2	replace	tmpVec  =  prevCost;  for(int  j  =  0;  j  <  resolvedCols;  ++j)  {  point[pj]  =  oldX[pj];  }	  if(tmpVec!=    previousCost)    {    cost    =    prevCost;    for(int    j    =    0;    j    <    solvedCols;    ++j)    {    point[pj]    =    oldX[pj];    }    	non-compiled	[CE]  cannot  find  symbol  prevCost	101	None	replace
70	[BUG]  [BUGGY]  tmpVec  =  preRed;  for(int  j  =  0;  j  <  solveCols;  ++j)  {  point[pj]  =  oldX[pj];  }  [CE]  incompatible  types  [FE]                AssertionFailedError      [CONTEXT]        }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;      [BUGGY]  tmpVec  =  preRed;  for(int  j  =  0;  j  <  solveCols;  ++j)  {  point[pj]  =  oldX[pj];  }  [BUGGY]      residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	432	432	2	replace	tmpVec  =  preRed;  for(int  j  =  0;  j  <  solveCols;  ++j)  {  point[pj]  =  oldX[pj];  }	  tmpVec    =    previousCost;    for(int    j    =    0;    j    <    solveCols;    ++j)    {    point[pj]    =    oldX[pj];    }    	non-compiled	[CE]  incompatible  types	32	None	replace
71	[BUG]  [BUGGY]  tmpVec  =  preresult;  for(int  j  =  0;  j  <  solveCols;  ++j)  {  point[pj]  =  oldX[pj];  }  [CE]  cannot  find  symbol  preresult  [FE]                  AssertionFailedError      [CONTEXT]        }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;      [BUGGY]  tmpVec  =  preresult;  for(int  j  =  0;  j  <  solveCols;  ++j)  {  point[pj]  =  oldX[pj];  }  [BUGGY]      residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	432	432	2	replace	tmpVec  =  preresult;  for(int  j  =  0;  j  <  solveCols;  ++j)  {  point[pj]  =  oldX[pj];  }	  tmpVec    =    previousCost;    for(int    j    =    0;    j    <    solveCols;    ++j)    {    point[pj]    =    oldX[pj];    }    	non-compiled	[CE]  cannot  find  symbol  preresult	32	None	replace
72	[BUG]  [BUGGY]  null  =  tmpVec;  tmpVec  =  tmpVec;  [CE]  unexpected  type  [FE]    AssertionFailedError    [CONTEXT]        }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;      [BUGGY]  null  =  tmpVec;  tmpVec  =  tmpVec;  [BUGGY]      oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	432	432	2	replace	null  =  tmpVec;  tmpVec  =  tmpVec;	  residuals    =    tmpVec;    tmpVec    =    tmpVec;    	non-compiled	[CE]  unexpected  type	19	None	replace
73	[BUG]  [BUGGY]  tmpVec  =  tmpVec.cloneTree();  [CE]  cannot  find  symbol  [FE]      AssertionFailedError    [CONTEXT]        }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;      [BUGGY]  tmpVec  =  tmpVec.cloneTree();  [BUGGY]      oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	432	432	2	replace	tmpVec  =  tmpVec.cloneTree();	  residuals    =    tmpVec;    tmpVec    =    tmpVec;    	non-compiled	[CE]  cannot  find  symbol	19	None	replace
74	[BUG]  [BUGGY]  tmpVec  -=  oldX;  [CE]  bad  operand  types  for  binary  operator  '-'  [FE]                AssertionFailedError      [CONTEXT]        }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;      [BUGGY]  tmpVec  -=  oldX;  [BUGGY]      oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	432	432	2	replace	tmpVec  -=  oldX;	  tmpVec    -=    oldRes;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '-'	44	None	replace
75	[BUG]  [BUGGY]  tmpVec  -=  oldRes  +  1;  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]                  AssertionFailedError      [CONTEXT]        }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;      [BUGGY]  tmpVec  -=  oldRes  +  1;  [BUGGY]      oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	432	432	2	replace	tmpVec  -=  oldRes  +  1;	  tmpVec    -=    oldRes;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	44	None	replace
76	[BUG]  [BUGGY]  tmpVec  =  oldX[oldRes];  [CE]  incompatible  types  [FE]                  AssertionFailedError      [CONTEXT]        }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;      [BUGGY]  tmpVec  =  oldX[oldRes];  [BUGGY]      residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	432	432	2	replace	tmpVec  =  oldX[oldRes];	  tmpVec    =    oldX[pj];    	non-compiled	[CE]  incompatible  types	60	None	replace
77	[BUG]  [BUGGY]  tmpVec  =  oldX[i];  [CE]  cannot  find  symbol  i  [FE]                    AssertionFailedError      [CONTEXT]        }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;      [BUGGY]  tmpVec  =  oldX[i];  [BUGGY]      residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	432	432	2	replace	tmpVec  =  oldX[i];	  tmpVec    =    oldX[pj];    	non-compiled	[CE]  cannot  find  symbol  i	60	None	replace
78	[BUG]  [BUGGY]  result  =  tmpVec.results;  [CE]  cannot  find  symbol  result  [FE]              AssertionFailedError      [CONTEXT]        }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;      [BUGGY]  result  =  tmpVec.results;  [BUGGY]      oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	432	432	2	replace	result  =  tmpVec.results;	  results    =    tmpVec.results;    	non-compiled	[CE]  cannot  find  symbol  result	78	None	replace
79	[BUG]  [BUGGY]  tmpVec  =  preRed;  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  points[pj]  =  oldX[pj].doubleValue();  }  [CE]  incompatible  types  [FE]                      AssertionFailedError      [CONTEXT]        }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;      [BUGGY]  tmpVec  =  preRed;  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  points[pj]  =  oldX[pj].doubleValue();  }  [BUGGY]      residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	432	432	2	replace	tmpVec  =  preRed;  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  points[pj]  =  oldX[pj].doubleValue();  }	  tmpVec    =    previousCost;    for(int    j    =    0;    j    <    solvedCols;    ++j)    {    points[pj]    =    oldX[pj].doubleValue();    }    	non-compiled	[CE]  incompatible  types	5	None	replace
80	[BUG]  [BUGGY]  tmpVec  =  permutation.length;  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  points[pj]  =  oldX[pj].doubleValue();  }  [CE]  incompatible  types  [FE]                        AssertionFailedError      [CONTEXT]        }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;      [BUGGY]  tmpVec  =  permutation.length;  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  points[pj]  =  oldX[pj].doubleValue();  }  [BUGGY]      residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	432	432	2	replace	tmpVec  =  permutation.length;  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  points[pj]  =  oldX[pj].doubleValue();  }	  tmpVec    =    previousCost;    for(int    j    =    0;    j    <    solvedCols;    ++j)    {    points[pj]    =    oldX[pj].doubleValue();    }    	non-compiled	[CE]  incompatible  types	5	None	replace
81	[BUG]  [BUGGY]  tmpVec  =  previousCost;  for(int  j  =  0;  j  <  resolvedCols;  ++j)  {  points[pj]  =  oldX[pj].doubleValue();  }  [CE]  incompatible  types  [FE]                          AssertionFailedError      [CONTEXT]        }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;      [BUGGY]  tmpVec  =  previousCost;  for(int  j  =  0;  j  <  resolvedCols;  ++j)  {  points[pj]  =  oldX[pj].doubleValue();  }  [BUGGY]      residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	432	432	2	replace	tmpVec  =  previousCost;  for(int  j  =  0;  j  <  resolvedCols;  ++j)  {  points[pj]  =  oldX[pj].doubleValue();  }	  tmpVec    =    previousCost;    for(int    j    =    0;    j    <    solvedCols;    ++j)    {    points[pj]    =    oldX[pj].doubleValue();    }    	non-compiled	[CE]  incompatible  types	5	None	replace
82	[BUG]  [BUGGY]  tmpVec  =  Math.max(results,  oldX);  [CE]  cannot  find  symbol  results  [FE]                        AssertionFailedError      [CONTEXT]        }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;      [BUGGY]  tmpVec  =  Math.max(results,  oldX);  [BUGGY]      residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	432	432	2	replace	tmpVec  =  Math.max(results,  oldX);	  tmpVec    =    Math.max(remainings,    oldX);    	non-compiled	[CE]  cannot  find  symbol  results	56	None	replace
83	[BUG]  [BUGGY]  tmpVec  =  Math.max(remainings,  oldRes);  [CE]  cannot  find  symbol  remainings  [FE]                          AssertionFailedError      [CONTEXT]        }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;      [BUGGY]  tmpVec  =  Math.max(remainings,  oldRes);  [BUGGY]      residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	432	432	2	replace	tmpVec  =  Math.max(remainings,  oldRes);	  tmpVec    =    Math.max(remainings,    oldX);    	non-compiled	[CE]  cannot  find  symbol  remainings	56	None	replace
84	[BUG]  [BUGGY]  tmpVec  =  Math.max(result,  oldX);  [CE]  cannot  find  symbol  result  [FE]                            AssertionFailedError      [CONTEXT]        }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;      [BUGGY]  tmpVec  =  Math.max(result,  oldX);  [BUGGY]      residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	432	432	2	replace	tmpVec  =  Math.max(result,  oldX);	  tmpVec    =    Math.max(remainings,    oldX);    	non-compiled	[CE]  cannot  find  symbol  result	56	None	replace
85	[BUG]  [BUGGY]  tmpVec  =  new  VectorialPointValuePair(pj,  preRed,  cost);  [CE]  cannot  find  symbol  pj  [FE]                    AssertionFailedError      [CONTEXT]        }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;      [BUGGY]  tmpVec  =  new  VectorialPointValuePair(pj,  preRed,  cost);  [BUGGY]      residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	432	432	2	replace	tmpVec  =  new  VectorialPointValuePair(pj,  preRed,  cost);	  tmpVec    =    new    VectorialPointValuePair(pj,    previousCost,    cost);    	non-compiled	[CE]  cannot  find  symbol  pj	90	None	replace
86	[BUG]  [BUGGY]  tmpVec  =  new  VectorialPointValuePair(permutation,  previousCost,  cost);  [CE]  no  suitable  constructor  found  for  VectorialPointValuePair(int[],double,double)  [FE]                      AssertionFailedError      [CONTEXT]        }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;      [BUGGY]  tmpVec  =  new  VectorialPointValuePair(permutation,  previousCost,  cost);  [BUGGY]      residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	432	432	2	replace	tmpVec  =  new  VectorialPointValuePair(permutation,  previousCost,  cost);	  tmpVec    =    new    VectorialPointValuePair(pj,    previousCost,    cost);    	non-compiled	[CE]  no  suitable  constructor  found  for  VectorialPointValuePair(int[],double,double)	90	None	replace
87	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]        }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;      [BUGGY]  tmpVec  =  tmpVec;  tmpVec  =  tmpVec;  [BUGGY]      oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	432	432	2	add	tmpVec    =    tmpVec;    tmpVec  =  tmpVec;	  	compilable	  [FE]  AssertionFailedError  	67	2	add
88	[BUG]  [BUGGY]  tmpVec  =  tmpVec;  tmpVec  =  tmpVec;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]        }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;      [BUGGY]  tmpVec  =  tmpVec;  tmpVec  =  tmpVec;  [BUGGY]      oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	432	432	2	replace	tmpVec    =    tmpVec;    tmpVec  =  tmpVec;	  	compilable	  [FE]  AssertionFailedError  	67	2	add
89	[BUG]  [BUGGY]  tmpVec  =  tmpVec;  int  tmpVec  =  tmpVec;  [CE]  variable  tmpVec  is  already  defined  in  method  doOptimize()  [FE]      AssertionFailedError    [CONTEXT]        }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;      [BUGGY]  tmpVec  =  tmpVec;  int  tmpVec  =  tmpVec;  [BUGGY]      oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	432	432	2	replace	tmpVec    =    tmpVec;    int  tmpVec  =  tmpVec;	  	non-compiled	[CE]  variable  tmpVec  is  already  defined  in  method  doOptimize()	67	None	add
90	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]        }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;      [BUGGY]  tmpVec  =  tmpVec;  tmpVec  =  tmpVec.clone();  [BUGGY]      oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	432	432	2	add	tmpVec    =    tmpVec;    tmpVec  =  tmpVec.clone();	  	compilable	  [FE]  AssertionFailedError  	67	2	add
91	[BUG]  [BUGGY]  tmpVec  =  tmpVec;  tmpVec  =  tmpVec.clone();  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]        }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;      [BUGGY]  tmpVec  =  tmpVec;  tmpVec  =  tmpVec.clone();  [BUGGY]      oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	432	432	2	replace	tmpVec    =    tmpVec;    tmpVec  =  tmpVec.clone();	  	compilable	  [FE]  AssertionFailedError  	67	2	add
92	[BUG]  [BUGGY]  tmpVec  =  tmpVec;  tmpVec  =  tmpVec.remainings;  [CE]  cannot  find  symbol  remainings  [FE]          AssertionFailedError    [CONTEXT]        }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;      [BUGGY]  tmpVec  =  tmpVec;  tmpVec  =  tmpVec.remainings;  [BUGGY]      oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	432	432	2	replace	tmpVec    =    tmpVec;    tmpVec  =  tmpVec.remainings;	  	non-compiled	[CE]  cannot  find  symbol  remainings	67	None	add
93	[BUG]  [BUGGY]  tmpVec  =  Math.max(result,  cost);  [CE]  cannot  find  symbol  result  [FE]                    AssertionFailedError      [CONTEXT]        }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;      [BUGGY]  tmpVec  =  Math.max(result,  cost);  [BUGGY]      residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	432	432	2	replace	tmpVec  =  Math.max(result,  cost);	  tmpVec    =    Math.max(remainings,    cost);    	non-compiled	[CE]  cannot  find  symbol  result	114	None	replace
94	[BUG]  [BUGGY]  tmpVec  =  Math.max(results,  cost);  [CE]  cannot  find  symbol  results  [FE]                      AssertionFailedError      [CONTEXT]        }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;      [BUGGY]  tmpVec  =  Math.max(results,  cost);  [BUGGY]      residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	432	432	2	replace	tmpVec  =  Math.max(results,  cost);	  tmpVec    =    Math.max(remainings,    cost);    	non-compiled	[CE]  cannot  find  symbol  results	114	None	replace
95	[BUG]  [BUGGY]  tmpVec  =  new  VectorialPointValuePair(previousCost,  oldX,  point);  [CE]  no  suitable  constructor  found  for  VectorialPointValuePair(double,double[],double[])  [FE]            AssertionFailedError      [CONTEXT]        }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;      [BUGGY]  tmpVec  =  new  VectorialPointValuePair(previousCost,  oldX,  point);  [BUGGY]      residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	432	432	2	replace	tmpVec  =  new  VectorialPointValuePair(previousCost,  oldX,  point);	  tmpVec    =    new    VectorialPointValuePair(previousCost,    point);    	non-compiled	[CE]  no  suitable  constructor  found  for  VectorialPointValuePair(double,double[],double[])	57	None	replace
96	[BUG]  [BUGGY]  tmpVec  =  new  VectorialPointValuePair(previousCost,  point,  preRed);  [CE]  no  suitable  constructor  found  for  VectorialPointValuePair(double,double[],double)  [FE]              AssertionFailedError      [CONTEXT]        }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;      [BUGGY]  tmpVec  =  new  VectorialPointValuePair(previousCost,  point,  preRed);  [BUGGY]      residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	432	432	2	replace	tmpVec  =  new  VectorialPointValuePair(previousCost,  point,  preRed);	  tmpVec    =    new    VectorialPointValuePair(previousCost,    point);    	non-compiled	[CE]  no  suitable  constructor  found  for  VectorialPointValuePair(double,double[],double)	57	None	replace
97	[BUG]  [BUGGY]  tmpVec  =  point[j];  [CE]  cannot  find  symbol  j  [FE]                    AssertionFailedError      [CONTEXT]        }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;      [BUGGY]  tmpVec  =  point[j];  [BUGGY]      residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	432	432	2	replace	tmpVec  =  point[j];	  tmpVec    =    point[pj];    	non-compiled	[CE]  cannot  find  symbol  j	61	None	replace
98	[BUG]  [BUGGY]  tmpVec  =  points[j];  [CE]  cannot  find  symbol  points  [FE]                      AssertionFailedError      [CONTEXT]        }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;      [BUGGY]  tmpVec  =  points[j];  [BUGGY]      residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	432	432	2	replace	tmpVec  =  points[j];	  tmpVec    =    point[pj];    	non-compiled	[CE]  cannot  find  symbol  points	61	None	replace
99	[BUG]  [BUGGY]  oldRes  -=  oldRes.length;  [CE]  bad  operand  types  for  binary  operator  '-'  [FE]                    AssertionFailedError      [CONTEXT]        }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;      [BUGGY]  oldRes  -=  oldRes.length;  [BUGGY]      oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	432	432	2	replace	oldRes  -=  oldRes.length;	  remainings    -=    oldRes.length;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '-'	46	None	replace
100	[BUG]  [BUGGY]  remainings  -=  oldX.length;  [CE]  cannot  find  symbol  remainings  [FE]                      AssertionFailedError      [CONTEXT]        }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;      [BUGGY]  remainings  -=  oldX.length;  [BUGGY]      oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	432	432	2	replace	remainings  -=  oldX.length;	  remainings    -=    oldRes.length;    	non-compiled	[CE]  cannot  find  symbol  remainings	46	None	replace
101	[BUG]  [BUGGY]  tmpVec  =  permutation[j];  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  point[pj]  =  oldX[pj];  }  [CE]  cannot  find  symbol  j  [FE]            AssertionFailedError      [CONTEXT]        }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;      [BUGGY]  tmpVec  =  permutation[j];  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  point[pj]  =  oldX[pj];  }  [BUGGY]      residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	432	432	2	replace	tmpVec  =  permutation[j];  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  point[pj]  =  oldX[pj];  }	  if(tmpVec!=    previousCost)    {    cost    =    permutation[j];    for(int    j    =    0;    j    <    solvedCols;    ++j)    {    point[pj]    =    oldX[pj];    }    	non-compiled	[CE]  cannot  find  symbol  j	100	None	replace
102	[BUG]  [BUGGY]  tmpVec  =  permutation[j];  for(int  j  =  0;  j  <  solveCols;  ++j)  {  point[pj]  =  oldX[pj];  }  [CE]  cannot  find  symbol  j  [FE]              AssertionFailedError      [CONTEXT]        }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;      [BUGGY]  tmpVec  =  permutation[j];  for(int  j  =  0;  j  <  solveCols;  ++j)  {  point[pj]  =  oldX[pj];  }  [BUGGY]      residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	432	432	2	replace	tmpVec  =  permutation[j];  for(int  j  =  0;  j  <  solveCols;  ++j)  {  point[pj]  =  oldX[pj];  }	  if(tmpVec!=    previousCost)    {    cost    =    permutation[j];    for(int    j    =    0;    j    <    solvedCols;    ++j)    {    point[pj]    =    oldX[pj];    }    	non-compiled	[CE]  cannot  find  symbol  j	100	None	replace
103	[BUG]  [BUGGY]  tmpVec  =  permutation[j];  for(int  j  =  0;  j  <  resolvedCols;  ++j)  {  point[pj]  =  oldX[pj];  }  [CE]  cannot  find  symbol  j  [FE]                AssertionFailedError      [CONTEXT]        }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;      [BUGGY]  tmpVec  =  permutation[j];  for(int  j  =  0;  j  <  resolvedCols;  ++j)  {  point[pj]  =  oldX[pj];  }  [BUGGY]      residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	432	432	2	replace	tmpVec  =  permutation[j];  for(int  j  =  0;  j  <  resolvedCols;  ++j)  {  point[pj]  =  oldX[pj];  }	  if(tmpVec!=    previousCost)    {    cost    =    permutation[j];    for(int    j    =    0;    j    <    solvedCols;    ++j)    {    point[pj]    =    oldX[pj];    }    	non-compiled	[CE]  cannot  find  symbol  j	100	None	replace
104	[BUG]  [BUGGY]  tmpVec  =  permutation[j];  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  points[pj]  =  oldX[pj];  }  [CE]  cannot  find  symbol  j  [FE]                  AssertionFailedError      [CONTEXT]        }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;      [BUGGY]  tmpVec  =  permutation[j];  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  points[pj]  =  oldX[pj];  }  [BUGGY]      residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	432	432	2	replace	tmpVec  =  permutation[j];  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  points[pj]  =  oldX[pj];  }	  if(tmpVec!=    previousCost)    {    cost    =    permutation[j];    for(int    j    =    0;    j    <    solvedCols;    ++j)    {    point[pj]    =    oldX[pj];    }    	non-compiled	[CE]  cannot  find  symbol  j	100	None	replace
105	[BUG]  [BUGGY]  tmpVec  =  new  VectorialPointValuePair(previousCost,  oldX);  [CE]  no  suitable  constructor  found  for  VectorialPointValuePair(double,double[])  [FE]              AssertionFailedError      [CONTEXT]        }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;      [BUGGY]  tmpVec  =  new  VectorialPointValuePair(previousCost,  oldX);  [BUGGY]      residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	432	432	2	replace	tmpVec  =  new  VectorialPointValuePair(previousCost,  oldX);	  tmpVec    =    new    VectorialPointValuePair(oldX);    	non-compiled	[CE]  no  suitable  constructor  found  for  VectorialPointValuePair(double,double[])	74	None	replace
106	[BUG]  [BUGGY]  tmpVec  =  new  VectorialPointValuePair(pj,  oldX);  [CE]  cannot  find  symbol  pj  [FE]                AssertionFailedError      [CONTEXT]        }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;      [BUGGY]  tmpVec  =  new  VectorialPointValuePair(pj,  oldX);  [BUGGY]      residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	432	432	2	replace	tmpVec  =  new  VectorialPointValuePair(pj,  oldX);	  tmpVec    =    new    VectorialPointValuePair(oldX);    	non-compiled	[CE]  cannot  find  symbol  pj	74	None	replace
107	[BUG]  [BUGGY]  tmpVec  =  new  VectorialPointValuePair(results,  oldX);  [CE]  cannot  find  symbol  results  [FE]                  AssertionFailedError      [CONTEXT]        }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;      [BUGGY]  tmpVec  =  new  VectorialPointValuePair(results,  oldX);  [BUGGY]      residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	432	432	2	replace	tmpVec  =  new  VectorialPointValuePair(results,  oldX);	  tmpVec    =    new    VectorialPointValuePair(oldX);    	non-compiled	[CE]  cannot  find  symbol  results	74	None	replace
108	[BUG]  [BUGGY]  if(remainings  ==  tmpVec)  {  residuals  =  previousCost;  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  oldX[j]  =  oldX[j];  }  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError      [CONTEXT]        }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;      [BUGGY]  if(remainings  ==  tmpVec)  {  residuals  =  previousCost;  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  oldX[j]  =  oldX[j];  }  [BUGGY]      oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	432	432	2	replace	if(remainings  ==  tmpVec)  {  residuals  =  previousCost;  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  oldX[j]  =  oldX[j];  }	  residuals    =    tmpVec;    if(remainings    ==    tmpVec)    {    cost    =    previousCost;    for(int    j    =    0;    j    <    solvedCols;    ++j)    {    oldX[j]    =    oldX[j];    }    	non-compiled	[CE]  illegal  start  of  expression	76	None	replace
109	[BUG]  [BUGGY]  if(remainings  ==  tmpVec)  {  residuals  =  originalCost;  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  oldX[j]  =  oldX[j];  }  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]        }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;      [BUGGY]  if(remainings  ==  tmpVec)  {  residuals  =  originalCost;  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  oldX[j]  =  oldX[j];  }  [BUGGY]      oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	432	432	2	replace	if(remainings  ==  tmpVec)  {  residuals  =  originalCost;  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  oldX[j]  =  oldX[j];  }	  residuals    =    tmpVec;    if(remainings    ==    tmpVec)    {    cost    =    previousCost;    for(int    j    =    0;    j    <    solvedCols;    ++j)    {    oldX[j]    =    oldX[j];    }    	non-compiled	[CE]  illegal  start  of  expression	76	None	replace
110	[BUG]  [BUGGY]  if(remainings  ==  tmpVec)  {  residuals  =  previousCost;  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  oldRes[j]  =  oldX[j];  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]        }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;      [BUGGY]  if(remainings  ==  tmpVec)  {  residuals  =  previousCost;  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  oldRes[j]  =  oldX[j];  }  [BUGGY]      oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	432	432	2	replace	if(remainings  ==  tmpVec)  {  residuals  =  previousCost;  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  oldRes[j]  =  oldX[j];  }	  residuals    =    tmpVec;    if(remainings    ==    tmpVec)    {    cost    =    previousCost;    for(int    j    =    0;    j    <    solvedCols;    ++j)    {    oldX[j]    =    oldX[j];    }    	non-compiled	[CE]  illegal  start  of  expression	76	None	replace
111	[BUG]  [BUGGY]  if(remainings  ==  tmpVec)  {  residuals  =  new  double[remainings.length];  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  oldX[j]  =  oldX[j];  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]        }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;      [BUGGY]  if(remainings  ==  tmpVec)  {  residuals  =  new  double[remainings.length];  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  oldX[j]  =  oldX[j];  }  [BUGGY]      oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	432	432	2	replace	if(remainings  ==  tmpVec)  {  residuals  =  new  double[remainings.length];  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  oldX[j]  =  oldX[j];  }	  residuals    =    tmpVec;    if(remainings    ==    tmpVec)    {    cost    =    previousCost;    for(int    j    =    0;    j    <    solvedCols;    ++j)    {    oldX[j]    =    oldX[j];    }    	non-compiled	[CE]  illegal  start  of  expression	76	None	replace
112	[BUG]  [BUGGY]  tmpVec  =  prevCost;  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  permutation[j]  =  oldX[pj];  }  [CE]  cannot  find  symbol  prevCost  [FE]              AssertionFailedError      [CONTEXT]        }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;      [BUGGY]  tmpVec  =  prevCost;  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  permutation[j]  =  oldX[pj];  }  [BUGGY]      residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	432	432	2	replace	tmpVec  =  prevCost;  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  permutation[j]  =  oldX[pj];  }	  if(tmpVec!=    previousCost)    {    cost    =    prevCost;    for(int    j    =    0;    j    <    solvedCols;    ++j)    {    permutation[j]    =    oldX[pj];    }    	non-compiled	[CE]  cannot  find  symbol  prevCost	72	None	replace
113	[BUG]  [BUGGY]  if(previousCost!=  tmpVec)  {  cost  =  prevCost;  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  permutation[j]  =  oldX[pj];  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]        }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;      [BUGGY]  if(previousCost!=  tmpVec)  {  cost  =  prevCost;  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  permutation[j]  =  oldX[pj];  }  [BUGGY]      residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	432	432	2	replace	if(previousCost!=  tmpVec)  {  cost  =  prevCost;  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  permutation[j]  =  oldX[pj];  }	  if(tmpVec!=    previousCost)    {    cost    =    prevCost;    for(int    j    =    0;    j    <    solvedCols;    ++j)    {    permutation[j]    =    oldX[pj];    }    	non-compiled	[CE]  illegal  start  of  expression	72	None	replace
114	[BUG]  [BUGGY]  if(previousCost!=  tmpVec)  {  cost  =  previousCost;  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  permutation[j]  =  oldX[pj];  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]        }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;      [BUGGY]  if(previousCost!=  tmpVec)  {  cost  =  previousCost;  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  permutation[j]  =  oldX[pj];  }  [BUGGY]      residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	432	432	2	replace	if(previousCost!=  tmpVec)  {  cost  =  previousCost;  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  permutation[j]  =  oldX[pj];  }	  if(tmpVec!=    previousCost)    {    cost    =    prevCost;    for(int    j    =    0;    j    <    solvedCols;    ++j)    {    permutation[j]    =    oldX[pj];    }    	non-compiled	[CE]  illegal  start  of  expression	72	None	replace
115	[BUG]  [BUGGY]  tmpVec  =  new  VectorialPointValuePair(previousCost,  previousCost,  cost);  [CE]  no  suitable  constructor  found  for  VectorialPointValuePair(double,double,double)  [FE]                AssertionFailedError      [CONTEXT]        }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;      [BUGGY]  tmpVec  =  new  VectorialPointValuePair(previousCost,  previousCost,  cost);  [BUGGY]      residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	432	432	2	replace	tmpVec  =  new  VectorialPointValuePair(previousCost,  previousCost,  cost);	  tmpVec    =    new    VectorialPointValuePair(lastX,    previousCost,    cost);    	non-compiled	[CE]  no  suitable  constructor  found  for  VectorialPointValuePair(double,double,double)	88	None	replace
116	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]        }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;      [BUGGY]  residuals    =    tmpVec;    tmpVec  =  residuals;  oldRes  =  tmpVec;  tmpVec  =  residuals;  [BUGGY]      oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	432	432	2	add	residuals        =        tmpVec;        tmpVec    =    residuals;    oldRes  =  tmpVec;  tmpVec  =  residuals;	  	compilable	  [FE]  AssertionFailedError  	23	10	add
117	[BUG]  [BUGGY]  residuals    =    tmpVec;    tmpVec  =  residuals;  oldRes  =  tmpVec;  tmpVec  =  residuals;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]        }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;      [BUGGY]  residuals    =    tmpVec;    tmpVec  =  residuals;  oldRes  =  tmpVec;  tmpVec  =  residuals;  [BUGGY]      oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	432	432	2	replace	residuals        =        tmpVec;        tmpVec    =    residuals;    oldRes  =  tmpVec;  tmpVec  =  residuals;	  	compilable	  [FE]  AssertionFailedError  	23	10	add
118	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]        }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;      [BUGGY]  residuals    =    tmpVec;    tmpVec  =  residuals;  tmpVec  =  residuals;  [BUGGY]      oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	432	432	2	add	residuals        =        tmpVec;        tmpVec    =    residuals;    tmpVec  =  residuals;	  	compilable	  [FE]  AssertionFailedError  	23	2	add
119	[BUG]  [BUGGY]  residuals    =    tmpVec;    tmpVec  =  residuals;  tmpVec  =  residuals;  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]        }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;      [BUGGY]  residuals    =    tmpVec;    tmpVec  =  residuals;  tmpVec  =  residuals;  [BUGGY]      oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	432	432	2	replace	residuals        =        tmpVec;        tmpVec    =    residuals;    tmpVec  =  residuals;	  	compilable	  [FE]  AssertionFailedError  	23	2	add
120	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]        }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;      [BUGGY]  residuals    =    tmpVec;    tmpVec  =  residuals;  tmpVec  =  tmpVec;  tmpVec  =  residuals;  [BUGGY]      oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	432	432	2	add	residuals        =        tmpVec;        tmpVec    =    residuals;    tmpVec  =  tmpVec;  tmpVec  =  residuals;	  	compilable	  [FE]  AssertionFailedError  	23	2	add
121	[BUG]  [BUGGY]  residuals    =    tmpVec;    tmpVec  =  residuals;  tmpVec  =  tmpVec;  tmpVec  =  residuals;  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]        }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;      [BUGGY]  residuals    =    tmpVec;    tmpVec  =  residuals;  tmpVec  =  tmpVec;  tmpVec  =  residuals;  [BUGGY]      oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	432	432	2	replace	residuals        =        tmpVec;        tmpVec    =    residuals;    tmpVec  =  tmpVec;  tmpVec  =  residuals;	  	compilable	  [FE]  AssertionFailedError  	23	2	add
122	[BUG]  [BUGGY]  residuals    =    tmpVec;    tmpVec  =  residuals;  oldRes  =  tmpVec;  tmpVec  =  remainings;  [CE]  cannot  find  symbol  remainings  [FE]          AssertionFailedError    [CONTEXT]        }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;      [BUGGY]  residuals    =    tmpVec;    tmpVec  =  residuals;  oldRes  =  tmpVec;  tmpVec  =  remainings;  [BUGGY]      oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	432	432	2	replace	residuals        =        tmpVec;        tmpVec    =    residuals;    oldRes  =  tmpVec;  tmpVec  =  remainings;	  	non-compiled	[CE]  cannot  find  symbol  remainings	23	None	add
123	[BUG]  [BUGGY]  residuals    =    tmpVec;    tmpVec  =  residuals;  tmpVec  =  tmpVec;  tmpVec  =  remainings;  [CE]  cannot  find  symbol  remainings  [FE]            AssertionFailedError    [CONTEXT]        }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;      [BUGGY]  residuals    =    tmpVec;    tmpVec  =  residuals;  tmpVec  =  tmpVec;  tmpVec  =  remainings;  [BUGGY]      oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	432	432	2	replace	residuals        =        tmpVec;        tmpVec    =    residuals;    tmpVec  =  tmpVec;  tmpVec  =  remainings;	  	non-compiled	[CE]  cannot  find  symbol  remainings	23	None	add
124	[BUG]  [BUGGY]  tmpVec  =  preRed;  for(int  j  =  0;  j  <  resolvedCols;  ++j)  {  int  oldRes  =  oldX[pj];  }  [CE]  incompatible  types  [FE]                      AssertionFailedError      [CONTEXT]        }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;      [BUGGY]  tmpVec  =  preRed;  for(int  j  =  0;  j  <  resolvedCols;  ++j)  {  int  oldRes  =  oldX[pj];  }  [BUGGY]      residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	432	432	2	replace	tmpVec  =  preRed;  for(int  j  =  0;  j  <  resolvedCols;  ++j)  {  int  oldRes  =  oldX[pj];  }	  tmpVec    =    previousCost;    for(int    j    =    0;    j    <    resolvedCols;    ++j)    {    int    oldRes    =    oldX[pj];    }    	non-compiled	[CE]  incompatible  types	26	None	replace
125	[BUG]  [BUGGY]  tmpVec  =  oldX;  for(int  j  =  0;  j  <  resolvedCols;  ++j)  {  int  oldRes  =  oldX[pj];  }  [CE]  cannot  find  symbol  resolvedCols  [FE]                        AssertionFailedError      [CONTEXT]        }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;      [BUGGY]  tmpVec  =  oldX;  for(int  j  =  0;  j  <  resolvedCols;  ++j)  {  int  oldRes  =  oldX[pj];  }  [BUGGY]      residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	432	432	2	replace	tmpVec  =  oldX;  for(int  j  =  0;  j  <  resolvedCols;  ++j)  {  int  oldRes  =  oldX[pj];  }	  tmpVec    =    previousCost;    for(int    j    =    0;    j    <    resolvedCols;    ++j)    {    int    oldRes    =    oldX[pj];    }    	non-compiled	[CE]  cannot  find  symbol  resolvedCols	26	None	replace
126	[BUG]  [BUGGY]  tmpVec  =  preresult;  for(int  j  =  0;  j  <  resolvedCols;  ++j)  {  int  oldRes  =  oldX[pj];  }  [CE]  cannot  find  symbol  preresult  [FE]                          AssertionFailedError      [CONTEXT]        }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;      [BUGGY]  tmpVec  =  preresult;  for(int  j  =  0;  j  <  resolvedCols;  ++j)  {  int  oldRes  =  oldX[pj];  }  [BUGGY]      residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	432	432	2	replace	tmpVec  =  preresult;  for(int  j  =  0;  j  <  resolvedCols;  ++j)  {  int  oldRes  =  oldX[pj];  }	  tmpVec    =    previousCost;    for(int    j    =    0;    j    <    resolvedCols;    ++j)    {    int    oldRes    =    oldX[pj];    }    	non-compiled	[CE]  cannot  find  symbol  preresult	26	None	replace
127	[BUG]  [BUGGY]  tmpVec  =  preRed;  for(int  j  =  0;  j  <  solveCols;  ++j)  {  int  oldRes  =  oldX[pj];  }  [CE]  incompatible  types  [FE]                        AssertionFailedError      [CONTEXT]        }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;      [BUGGY]  tmpVec  =  preRed;  for(int  j  =  0;  j  <  solveCols;  ++j)  {  int  oldRes  =  oldX[pj];  }  [BUGGY]      residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	432	432	2	replace	tmpVec  =  preRed;  for(int  j  =  0;  j  <  solveCols;  ++j)  {  int  oldRes  =  oldX[pj];  }	  tmpVec    =    previousCost;    for(int    j    =    0;    j    <    solveCols;    ++j)    {    int    oldRes    =    oldX[pj];    }    	non-compiled	[CE]  incompatible  types	27	None	replace
128	[BUG]  [BUGGY]  tmpVec  =  preresult;  for(int  j  =  0;  j  <  solveCols;  ++j)  {  int  oldRes  =  oldX[pj];  }  [CE]  cannot  find  symbol  preresult  [FE]                          AssertionFailedError      [CONTEXT]        }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;      [BUGGY]  tmpVec  =  preresult;  for(int  j  =  0;  j  <  solveCols;  ++j)  {  int  oldRes  =  oldX[pj];  }  [BUGGY]      residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	432	432	2	replace	tmpVec  =  preresult;  for(int  j  =  0;  j  <  solveCols;  ++j)  {  int  oldRes  =  oldX[pj];  }	  tmpVec    =    previousCost;    for(int    j    =    0;    j    <    solveCols;    ++j)    {    int    oldRes    =    oldX[pj];    }    	non-compiled	[CE]  cannot  find  symbol  preresult	27	None	replace
129	[BUG]  [BUGGY]  tmpVec  =  permutation[j].doubleValue();  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  point[pj]  =  oldX[pj].doubleValue();  }  [CE]  cannot  find  symbol  j  [FE]                  AssertionFailedError      [CONTEXT]        }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;      [BUGGY]  tmpVec  =  permutation[j].doubleValue();  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  point[pj]  =  oldX[pj].doubleValue();  }  [BUGGY]      residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	432	432	2	replace	tmpVec  =  permutation[j].doubleValue();  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  point[pj]  =  oldX[pj].doubleValue();  }	  if(tmpVec!=    previousCost)    {    cost    =    permutation[j].doubleValue();    for(int    j    =    0;    j    <    solvedCols;    ++j)    {    point[pj]    =    oldX[pj].doubleValue();    }    	non-compiled	[CE]  cannot  find  symbol  j	105	None	replace
130	[BUG]  [BUGGY]  tmpVec  =  tmpVec.doubleValue();  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  point[pj]  =  oldX[pj].doubleValue();  }  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]        }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;      [BUGGY]  tmpVec  =  tmpVec.doubleValue();  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  point[pj]  =  oldX[pj].doubleValue();  }  [BUGGY]      residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	432	432	2	replace	tmpVec  =  tmpVec.doubleValue();  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  point[pj]  =  oldX[pj].doubleValue();  }	  if(tmpVec!=    previousCost)    {    cost    =    permutation[j].doubleValue();    for(int    j    =    0;    j    <    solvedCols;    ++j)    {    point[pj]    =    oldX[pj].doubleValue();    }    	non-compiled	[CE]  cannot  find  symbol	105	None	replace
131	[BUG]  [BUGGY]  tmpVec  =  permutation[j].doubleValue();  for(int  j  =  0;  j  <  resolvedCols;  ++j)  {  point[pj]  =  oldX[pj].doubleValue();  }  [CE]  cannot  find  symbol  j  [FE]                      AssertionFailedError      [CONTEXT]        }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;      [BUGGY]  tmpVec  =  permutation[j].doubleValue();  for(int  j  =  0;  j  <  resolvedCols;  ++j)  {  point[pj]  =  oldX[pj].doubleValue();  }  [BUGGY]      residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	432	432	2	replace	tmpVec  =  permutation[j].doubleValue();  for(int  j  =  0;  j  <  resolvedCols;  ++j)  {  point[pj]  =  oldX[pj].doubleValue();  }	  if(tmpVec!=    previousCost)    {    cost    =    permutation[j].doubleValue();    for(int    j    =    0;    j    <    solvedCols;    ++j)    {    point[pj]    =    oldX[pj].doubleValue();    }    	non-compiled	[CE]  cannot  find  symbol  j	105	None	replace
132	[BUG]  [BUGGY]  tmpVec  =  permutation[j].doubleValue();  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  points[pj]  =  oldX[pj].doubleValue();  }  [CE]  cannot  find  symbol  j  [FE]                        AssertionFailedError      [CONTEXT]        }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;      [BUGGY]  tmpVec  =  permutation[j].doubleValue();  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  points[pj]  =  oldX[pj].doubleValue();  }  [BUGGY]      residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	432	432	2	replace	tmpVec  =  permutation[j].doubleValue();  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  points[pj]  =  oldX[pj].doubleValue();  }	  if(tmpVec!=    previousCost)    {    cost    =    permutation[j].doubleValue();    for(int    j    =    0;    j    <    solvedCols;    ++j)    {    point[pj]    =    oldX[pj].doubleValue();    }    	non-compiled	[CE]  cannot  find  symbol  j	105	None	replace
133	[BUG]  [BUGGY]  tmpVec  =  preRed;  for(int  j  =  0;  j  <  resolvedCols;  ++j)  {  point[j]  =  oldX[pj];  }  [CE]  incompatible  types  [FE]                    AssertionFailedError      [CONTEXT]        }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;      [BUGGY]  tmpVec  =  preRed;  for(int  j  =  0;  j  <  resolvedCols;  ++j)  {  point[j]  =  oldX[pj];  }  [BUGGY]      residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	432	432	2	replace	tmpVec  =  preRed;  for(int  j  =  0;  j  <  resolvedCols;  ++j)  {  point[j]  =  oldX[pj];  }	  tmpVec    =    previousCost;    for(int    j    =    0;    j    <    resolvedCols;    ++j)    {    point[j]    =    oldX[pj];    }    	non-compiled	[CE]  incompatible  types	64	None	replace
134	[BUG]  [BUGGY]  tmpVec  =  preresult;  for(int  j  =  0;  j  <  resolvedCols;  ++j)  {  point[j]  =  oldX[pj];  }  [CE]  cannot  find  symbol  preresult  [FE]                      AssertionFailedError      [CONTEXT]        }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;      [BUGGY]  tmpVec  =  preresult;  for(int  j  =  0;  j  <  resolvedCols;  ++j)  {  point[j]  =  oldX[pj];  }  [BUGGY]      residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	432	432	2	replace	tmpVec  =  preresult;  for(int  j  =  0;  j  <  resolvedCols;  ++j)  {  point[j]  =  oldX[pj];  }	  tmpVec    =    previousCost;    for(int    j    =    0;    j    <    resolvedCols;    ++j)    {    point[j]    =    oldX[pj];    }    	non-compiled	[CE]  cannot  find  symbol  preresult	64	None	replace
135	[BUG]  [BUGGY]  tmpVec  =  permutation;  for(int  j  =  0;  j  <  resolvedCols;  ++j)  {  point[j]  =  oldX[pj];  }  [CE]  incompatible  types  [FE]                        AssertionFailedError      [CONTEXT]        }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;      [BUGGY]  tmpVec  =  permutation;  for(int  j  =  0;  j  <  resolvedCols;  ++j)  {  point[j]  =  oldX[pj];  }  [BUGGY]      residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	432	432	2	replace	tmpVec  =  permutation;  for(int  j  =  0;  j  <  resolvedCols;  ++j)  {  point[j]  =  oldX[pj];  }	  tmpVec    =    previousCost;    for(int    j    =    0;    j    <    resolvedCols;    ++j)    {    point[j]    =    oldX[pj];    }    	non-compiled	[CE]  incompatible  types	64	None	replace
136	[BUG]  [BUGGY]  tmpVec  =  permutation[0].doubleValue()  +  1;  [CE]  int  cannot  be  dereferenced  [FE]              AssertionFailedError      [CONTEXT]        }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;      [BUGGY]  tmpVec  =  permutation[0].doubleValue()  +  1;  [BUGGY]      residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	432	432	2	replace	tmpVec  =  permutation[0].doubleValue()  +  1;	  tmpVec    =    permutation[0].doubleValue();    	non-compiled	[CE]  int  cannot  be  dereferenced	86	None	replace
137	[BUG]  [BUGGY]  tmpVec  =  permutation[1].doubleValue();  [CE]  int  cannot  be  dereferenced  [FE]                AssertionFailedError      [CONTEXT]        }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;      [BUGGY]  tmpVec  =  permutation[1].doubleValue();  [BUGGY]      residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	432	432	2	replace	tmpVec  =  permutation[1].doubleValue();	  tmpVec    =    permutation[0].doubleValue();    	non-compiled	[CE]  int  cannot  be  dereferenced	86	None	replace
138	[BUG]  [BUGGY]  tmpVec  =  permutation[0].doubleValue().doubleValue();  [CE]  int  cannot  be  dereferenced  [FE]                  AssertionFailedError      [CONTEXT]        }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;      [BUGGY]  tmpVec  =  permutation[0].doubleValue().doubleValue();  [BUGGY]      residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	432	432	2	replace	tmpVec  =  permutation[0].doubleValue().doubleValue();	  tmpVec    =    permutation[0].doubleValue();    	non-compiled	[CE]  int  cannot  be  dereferenced	86	None	replace
139	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]        }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;      [BUGGY]          oldRes    =    tmpVec;    oldRes  =  tmpVec;  oldRes  =  tmpVec;  oldRes  =  tmpVec;  [BUGGY]      residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	432	432	2	add	                oldRes        =        tmpVec;        oldRes    =    tmpVec;    oldRes  =  tmpVec;  oldRes  =  tmpVec;	  	compilable	  [FE]  AssertionFailedError  	37	10	add
140	[BUG]  [BUGGY]          oldRes    =    tmpVec;    oldRes  =  tmpVec;  oldRes  =  tmpVec;  oldRes  =  tmpVec;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]        }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;      [BUGGY]          oldRes    =    tmpVec;    oldRes  =  tmpVec;  oldRes  =  tmpVec;  oldRes  =  tmpVec;  [BUGGY]      residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	432	432	2	replace	                oldRes        =        tmpVec;        oldRes    =    tmpVec;    oldRes  =  tmpVec;  oldRes  =  tmpVec;	  	compilable	  [FE]  AssertionFailedError  	37	10	add
141	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]        }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;      [BUGGY]          oldRes    =    tmpVec;    oldRes  =  tmpVec;  tmpVec  =  tmpVec;  oldRes  =  tmpVec;  [BUGGY]      residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	432	432	2	add	                oldRes        =        tmpVec;        oldRes    =    tmpVec;    tmpVec  =  tmpVec;  oldRes  =  tmpVec;	  	compilable	  [FE]  AssertionFailedError  	37	10	add
142	[BUG]  [BUGGY]          oldRes    =    tmpVec;    oldRes  =  tmpVec;  tmpVec  =  tmpVec;  oldRes  =  tmpVec;  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]        }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;      [BUGGY]          oldRes    =    tmpVec;    oldRes  =  tmpVec;  tmpVec  =  tmpVec;  oldRes  =  tmpVec;  [BUGGY]      residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	432	432	2	replace	                oldRes        =        tmpVec;        oldRes    =    tmpVec;    tmpVec  =  tmpVec;  oldRes  =  tmpVec;	  	compilable	  [FE]  AssertionFailedError  	37	10	add
143	[BUG]  [BUGGY]          oldRes    =    tmpVec;    oldRes  =  tmpVec;  remainings  =  tmpVec;  oldRes  =  tmpVec;  [CE]  cannot  find  symbol  remainings  [FE]        AssertionFailedError    [CONTEXT]        }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;      [BUGGY]          oldRes    =    tmpVec;    oldRes  =  tmpVec;  remainings  =  tmpVec;  oldRes  =  tmpVec;  [BUGGY]      residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	432	432	2	replace	                oldRes        =        tmpVec;        oldRes    =    tmpVec;    remainings  =  tmpVec;  oldRes  =  tmpVec;	  	non-compiled	[CE]  cannot  find  symbol  remainings	37	None	add
144	[BUG]  [BUGGY]          oldRes    =    tmpVec;    oldRes  =  tmpVec;  newRes  =  tmpVec;  oldRes  =  tmpVec;  [CE]  cannot  find  symbol  newRes  [FE]          AssertionFailedError    [CONTEXT]        }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;      [BUGGY]          oldRes    =    tmpVec;    oldRes  =  tmpVec;  newRes  =  tmpVec;  oldRes  =  tmpVec;  [BUGGY]      residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	432	432	2	replace	                oldRes        =        tmpVec;        oldRes    =    tmpVec;    newRes  =  tmpVec;  oldRes  =  tmpVec;	  	non-compiled	[CE]  cannot  find  symbol  newRes	37	None	add
145	[BUG]  [BUGGY]  if(remainings  >  oldRes)  {  oldRes  =  previousCost;  }  else  {  cost  =  previousCost;  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  point[pj]  =  point[pj];  }  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError      [CONTEXT]        }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;      [BUGGY]  if(remainings  >  oldRes)  {  oldRes  =  previousCost;  }  else  {  cost  =  previousCost;  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  point[pj]  =  point[pj];  }  [BUGGY]      residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	432	432	2	replace	if(remainings  >  oldRes)  {  oldRes  =  previousCost;  }  else  {  cost  =  previousCost;  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  point[pj]  =  point[pj];  }	          oldRes    =    tmpVec;    if(remainings    >    oldRes)    {    oldRes    =    tmpVec;    }    else    {    cost    =    previousCost;    for(int    j    =    0;    j    <    solvedCols;    ++j)    {    point[pj]    =    point[pj];    }    	non-compiled	[CE]  illegal  start  of  expression	120	None	replace
146	[BUG]  [BUGGY]  if(remainings  >  oldRes)  {  oldRes  =  previousCost;  }  else  {  cost  =  previousCost;  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  point[pj]  =  point[pj];  }  }  [CE]  cannot  find  symbol  remainings  [FE]          AssertionFailedError      [CONTEXT]        }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;      [BUGGY]  if(remainings  >  oldRes)  {  oldRes  =  previousCost;  }  else  {  cost  =  previousCost;  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  point[pj]  =  point[pj];  }  }  [BUGGY]      residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	432	432	2	replace	if(remainings  >  oldRes)  {  oldRes  =  previousCost;  }  else  {  cost  =  previousCost;  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  point[pj]  =  point[pj];  }  }	          oldRes    =    tmpVec;    if(remainings    >    oldRes)    {    oldRes    =    tmpVec;    }    else    {    cost    =    previousCost;    for(int    j    =    0;    j    <    solvedCols;    ++j)    {    point[pj]    =    point[pj];    }    	non-compiled	[CE]  cannot  find  symbol  remainings	120	None	replace
147	[BUG]  [BUGGY]  if(remainings  >  oldRes)  {  oldRes  =  originalCost;  }  else  {  cost  =  previousCost;  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  point[pj]  =  point[pj];  }  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]        }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;      [BUGGY]  if(remainings  >  oldRes)  {  oldRes  =  originalCost;  }  else  {  cost  =  previousCost;  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  point[pj]  =  point[pj];  }  [BUGGY]      residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	432	432	2	replace	if(remainings  >  oldRes)  {  oldRes  =  originalCost;  }  else  {  cost  =  previousCost;  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  point[pj]  =  point[pj];  }	          oldRes    =    tmpVec;    if(remainings    >    oldRes)    {    oldRes    =    tmpVec;    }    else    {    cost    =    previousCost;    for(int    j    =    0;    j    <    solvedCols;    ++j)    {    point[pj]    =    point[pj];    }    	non-compiled	[CE]  illegal  start  of  expression	120	None	replace
148	[BUG]  [BUGGY]  if(remainings  >  oldRes)  {  oldRes  =  prevCost;  }  else  {  cost  =  previousCost;  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  point[pj]  =  point[pj];  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]        }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;      [BUGGY]  if(remainings  >  oldRes)  {  oldRes  =  prevCost;  }  else  {  cost  =  previousCost;  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  point[pj]  =  point[pj];  }  [BUGGY]      residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	432	432	2	replace	if(remainings  >  oldRes)  {  oldRes  =  prevCost;  }  else  {  cost  =  previousCost;  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  point[pj]  =  point[pj];  }	          oldRes    =    tmpVec;    if(remainings    >    oldRes)    {    oldRes    =    tmpVec;    }    else    {    cost    =    previousCost;    for(int    j    =    0;    j    <    solvedCols;    ++j)    {    point[pj]    =    point[pj];    }    	non-compiled	[CE]  illegal  start  of  expression	120	None	replace
149	[BUG]  [BUGGY]  results  =  new  VectorialPointValuePair(oldX,  oldRes,  tmpVec);  [CE]  cannot  find  symbol  results  [FE]                AssertionFailedError      [CONTEXT]        }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;      [BUGGY]  results  =  new  VectorialPointValuePair(oldX,  oldRes,  tmpVec);  [BUGGY]      oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	432	432	2	replace	results  =  new  VectorialPointValuePair(oldX,  oldRes,  tmpVec);	  results    =    new    VectorialPointValuePair(oldX,    oldRes);    	non-compiled	[CE]  cannot  find  symbol  results	79	None	replace
150	[BUG]  [BUGGY]  results  =  new  VectorialPointValuePair(oldX,  oldVec);  [CE]  cannot  find  symbol  results  [FE]                  AssertionFailedError      [CONTEXT]        }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;      [BUGGY]  results  =  new  VectorialPointValuePair(oldX,  oldVec);  [BUGGY]      oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	432	432	2	replace	results  =  new  VectorialPointValuePair(oldX,  oldVec);	  results    =    new    VectorialPointValuePair(oldX,    oldRes);    	non-compiled	[CE]  cannot  find  symbol  results	79	None	replace
151	[BUG]  [BUGGY]  result  =  new  VectorialPointValuePair(oldX,  oldRes,  cost);  [CE]  cannot  find  symbol  result  [FE]                    AssertionFailedError      [CONTEXT]        }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;      [BUGGY]  result  =  new  VectorialPointValuePair(oldX,  oldRes,  cost);  [BUGGY]      oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	432	432	2	replace	result  =  new  VectorialPointValuePair(oldX,  oldRes,  cost);	  results    =    new    VectorialPointValuePair(oldX,    oldRes);    	non-compiled	[CE]  cannot  find  symbol  result	79	None	replace
152	[BUG]  [BUGGY]  if(remainings  >  oldRes)  {  oldRes  =  previousCost;  }  else  {  cost  =  previousCost;  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  point[pj]  =  point[pj].doubleValue();  }  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError      [CONTEXT]        }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;      [BUGGY]  if(remainings  >  oldRes)  {  oldRes  =  previousCost;  }  else  {  cost  =  previousCost;  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  point[pj]  =  point[pj].doubleValue();  }  [BUGGY]      residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	432	432	2	replace	if(remainings  >  oldRes)  {  oldRes  =  previousCost;  }  else  {  cost  =  previousCost;  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  point[pj]  =  point[pj].doubleValue();  }	          oldRes    =    tmpVec;    if(remainings    >    oldRes)    {    oldRes    =    tmpVec;    }    else    {    cost    =    previousCost;    for(int    j    =    0;    j    <    solvedCols;    ++j)    {    point[pj]    =    point[pj].doubleValue();    }    	non-compiled	[CE]  illegal  start  of  expression	121	None	replace
153	[BUG]  [BUGGY]  if(remainings  >  oldRes)  {  oldRes  =  previousCost;  }  else  {  cost  =  previousCost;  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  point[pj]  =  point[pj].doubleValue();  }  }  [CE]  cannot  find  symbol  remainings  [FE]            AssertionFailedError      [CONTEXT]        }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;      [BUGGY]  if(remainings  >  oldRes)  {  oldRes  =  previousCost;  }  else  {  cost  =  previousCost;  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  point[pj]  =  point[pj].doubleValue();  }  }  [BUGGY]      residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	432	432	2	replace	if(remainings  >  oldRes)  {  oldRes  =  previousCost;  }  else  {  cost  =  previousCost;  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  point[pj]  =  point[pj].doubleValue();  }  }	          oldRes    =    tmpVec;    if(remainings    >    oldRes)    {    oldRes    =    tmpVec;    }    else    {    cost    =    previousCost;    for(int    j    =    0;    j    <    solvedCols;    ++j)    {    point[pj]    =    point[pj].doubleValue();    }    	non-compiled	[CE]  cannot  find  symbol  remainings	121	None	replace
154	[BUG]  [BUGGY]  if(remainings  >  0)  {  oldRes  =  tmpVec;  }  else  {  cost  =  previousCost;  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  point[pj]  =  point[pj].doubleValu  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]        }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;      [BUGGY]  if(remainings  >  0)  {  oldRes  =  tmpVec;  }  else  {  cost  =  previousCost;  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  point[pj]  =  point[pj].doubleValu  [BUGGY]      residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	432	432	2	replace	if(remainings  >  0)  {  oldRes  =  tmpVec;  }  else  {  cost  =  previousCost;  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  point[pj]  =  point[pj].doubleValu	          oldRes    =    tmpVec;    if(remainings    >    oldRes)    {    oldRes    =    tmpVec;    }    else    {    cost    =    previousCost;    for(int    j    =    0;    j    <    solvedCols;    ++j)    {    point[pj]    =    point[pj].doubleValue();    }    	non-compiled	[CE]  ';'  expected	121	None	replace
155	[BUG]  [BUGGY]  if(remainings  >  0)  {  oldRes  =  previousCost;  }  else  {  cost  =  previousCost;  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  point[pj]  =  point[pj].doubleValue();  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]        }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;      [BUGGY]  if(remainings  >  0)  {  oldRes  =  previousCost;  }  else  {  cost  =  previousCost;  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  point[pj]  =  point[pj].doubleValue();  }  [BUGGY]      residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	432	432	2	replace	if(remainings  >  0)  {  oldRes  =  previousCost;  }  else  {  cost  =  previousCost;  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  point[pj]  =  point[pj].doubleValue();  }	          oldRes    =    tmpVec;    if(remainings    >    oldRes)    {    oldRes    =    tmpVec;    }    else    {    cost    =    previousCost;    for(int    j    =    0;    j    <    solvedCols;    ++j)    {    point[pj]    =    point[pj].doubleValue();    }    	non-compiled	[CE]  illegal  start  of  expression	121	None	replace
156	[BUG]  [BUGGY]  tmpVec  =  permutation;  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  point[j]  =  oldX[pj];  }  [CE]  incompatible  types  [FE]                  AssertionFailedError      [CONTEXT]        }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;      [BUGGY]  tmpVec  =  permutation;  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  point[j]  =  oldX[pj];  }  [BUGGY]      residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	432	432	2	replace	tmpVec  =  permutation;  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  point[j]  =  oldX[pj];  }	  tmpVec    =    previousCost;    for(int    j    =    0;    j    <    solvedCols;    ++j)    {    point[j]    =    oldX[pj];    }    	non-compiled	[CE]  incompatible  types	63	None	replace
157	[BUG]  [BUGGY]  tmpVec  =  prevCost;  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  point[j]  =  oldX[pj];  }  [CE]  cannot  find  symbol  prevCost  [FE]                    AssertionFailedError      [CONTEXT]        }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;      [BUGGY]  tmpVec  =  prevCost;  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  point[j]  =  oldX[pj];  }  [BUGGY]      residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	432	432	2	replace	tmpVec  =  prevCost;  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  point[j]  =  oldX[pj];  }	  tmpVec    =    previousCost;    for(int    j    =    0;    j    <    solvedCols;    ++j)    {    point[j]    =    oldX[pj];    }    	non-compiled	[CE]  cannot  find  symbol  prevCost	63	None	replace
158	[BUG]  [BUGGY]  Preconditions.checkState(remainings!=  oldX[pj]);  [CE]  cannot  find  symbol  remainings  [FE]                    AssertionFailedError      [CONTEXT]        }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;      [BUGGY]  Preconditions.checkState(remainings!=  oldX[pj]);  [BUGGY]      residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	432	432	2	replace	Preconditions.checkState(remainings!=  oldX[pj]);	  if(tmpVec!=    previousCost)    {    cost    =    permutation[j];    for(int    j    =    0;    j    <    solvedCols;    ++j)    {    int    oldRes    =    oldX[pj];    }    	non-compiled	[CE]  cannot  find  symbol  remainings	94	None	replace
159	[BUG]  [BUGGY]  tmpVec  =  new  VectorialPointValuePair(oldX,  oldRes,  cost);  [CE]  no  suitable  constructor  found  for  VectorialPointValuePair(double[],double[],double)  [FE]              AssertionFailedError      [CONTEXT]        }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;      [BUGGY]  tmpVec  =  new  VectorialPointValuePair(oldX,  oldRes,  cost);  [BUGGY]      residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	432	432	2	replace	tmpVec  =  new  VectorialPointValuePair(oldX,  oldRes,  cost);	  tmpVec    =    new    VectorialPointValuePair(oldX,    oldRes);    	non-compiled	[CE]  no  suitable  constructor  found  for  VectorialPointValuePair(double[],double[],double)	118	None	replace
160	[BUG]  [BUGGY]  tmpVec  =  new  VectorialPointValuePair(oldX,  oldRes,  pj);  [CE]  cannot  find  symbol  pj  [FE]                AssertionFailedError      [CONTEXT]        }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;      [BUGGY]  tmpVec  =  new  VectorialPointValuePair(oldX,  oldRes,  pj);  [BUGGY]      residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	432	432	2	replace	tmpVec  =  new  VectorialPointValuePair(oldX,  oldRes,  pj);	  tmpVec    =    new    VectorialPointValuePair(oldX,    oldRes);    	non-compiled	[CE]  cannot  find  symbol  pj	118	None	replace
161	[BUG]  [BUGGY]  tmpVec  =  new  VectorialPointValuePair(oldRes,  oldX);  [CE]  incompatible  types  [FE]                  AssertionFailedError      [CONTEXT]        }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;      [BUGGY]  tmpVec  =  new  VectorialPointValuePair(oldRes,  oldX);  [BUGGY]      residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	432	432	2	replace	tmpVec  =  new  VectorialPointValuePair(oldRes,  oldX);	  tmpVec    =    new    VectorialPointValuePair(oldX,    oldRes);    	non-compiled	[CE]  incompatible  types	118	None	replace
162	[BUG]  [BUGGY]  tmpVec  =  new  VectorialPointValuePair(oldX,  oldRes,  point);  [CE]  no  suitable  constructor  found  for  VectorialPointValuePair(double[],double[],double[])  [FE]                    AssertionFailedError      [CONTEXT]        }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;      [BUGGY]  tmpVec  =  new  VectorialPointValuePair(oldX,  oldRes,  point);  [BUGGY]      residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	432	432	2	replace	tmpVec  =  new  VectorialPointValuePair(oldX,  oldRes,  point);	  tmpVec    =    new    VectorialPointValuePair(oldX,    oldRes);    	non-compiled	[CE]  no  suitable  constructor  found  for  VectorialPointValuePair(double[],double[],double[])	118	None	replace
163	[BUG]  [BUGGY]  remainders  =  tmpVec;  oldRes  =  tmpVec;  [CE]  cannot  find  symbol  remainders  [FE]    AssertionFailedError    [CONTEXT]        }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;      [BUGGY]  remainders  =  tmpVec;  oldRes  =  tmpVec;  [BUGGY]      oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	432	432	2	replace	remainders  =  tmpVec;  oldRes  =  tmpVec;	  residuals    =    tmpVec;    oldRes    =    tmpVec;    	non-compiled	[CE]  cannot  find  symbol  remainders	17	None	replace
164	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]        }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;      [BUGGY]  tmpVec  =  tmpVec;  oldRes  =  tmpVec;  [BUGGY]      oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	432	432	2	add	tmpVec  =  tmpVec;  oldRes  =  tmpVec;	  residuals    =    tmpVec;    oldRes    =    tmpVec;    	compilable	  [FE]  AssertionFailedError  	17	10	replace
165	[BUG]  [BUGGY]  tmpVec  =  tmpVec;  oldRes  =  tmpVec;  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]        }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;      [BUGGY]  tmpVec  =  tmpVec;  oldRes  =  tmpVec;  [BUGGY]      oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	432	432	2	replace	tmpVec  =  tmpVec;  oldRes  =  tmpVec;	  residuals    =    tmpVec;    oldRes    =    tmpVec;    	compilable	  [FE]  AssertionFailedError  	17	10	replace
166	[BUG]  [BUGGY]  tmpVec  =  new  VectorialPointValuePair(previousCost,  oldX,  previousCost);  [CE]  no  suitable  constructor  found  for  VectorialPointValuePair(double,double[],double)  [FE]                      AssertionFailedError      [CONTEXT]        }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;      [BUGGY]  tmpVec  =  new  VectorialPointValuePair(previousCost,  oldX,  previousCost);  [BUGGY]      residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	432	432	2	replace	tmpVec  =  new  VectorialPointValuePair(previousCost,  oldX,  previousCost);	  tmpVec    =    new    VectorialPointValuePair(last,    previousCost,    cost);    	non-compiled	[CE]  no  suitable  constructor  found  for  VectorialPointValuePair(double,double[],double)	91	None	replace
167	[BUG]  [BUGGY]  tmpVec  =  preRed;  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  points[j]  =  oldX[pj];  }  [CE]  incompatible  types  [FE]                        AssertionFailedError      [CONTEXT]        }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;      [BUGGY]  tmpVec  =  preRed;  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  points[j]  =  oldX[pj];  }  [BUGGY]      residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	432	432	2	replace	tmpVec  =  preRed;  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  points[j]  =  oldX[pj];  }	  tmpVec    =    previousCost;    for(int    j    =    0;    j    <    solvedCols;    ++j)    {    points[j]    =    oldX[pj];    }    	non-compiled	[CE]  incompatible  types	66	None	replace
168	[BUG]  [BUGGY]  tmpVec  =  permutation;  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  points[j]  =  oldX[pj];  }  [CE]  incompatible  types  [FE]                          AssertionFailedError      [CONTEXT]        }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;      [BUGGY]  tmpVec  =  permutation;  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  points[j]  =  oldX[pj];  }  [BUGGY]      residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	432	432	2	replace	tmpVec  =  permutation;  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  points[j]  =  oldX[pj];  }	  tmpVec    =    previousCost;    for(int    j    =    0;    j    <    solvedCols;    ++j)    {    points[j]    =    oldX[pj];    }    	non-compiled	[CE]  incompatible  types	66	None	replace
169	[BUG]  [BUGGY]  tmpVec  =  preresult;  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  points[j]  =  oldX[pj];  }  [CE]  cannot  find  symbol  preresult  [FE]                            AssertionFailedError      [CONTEXT]        }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;      [BUGGY]  tmpVec  =  preresult;  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  points[j]  =  oldX[pj];  }  [BUGGY]      residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	432	432	2	replace	tmpVec  =  preresult;  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  points[j]  =  oldX[pj];  }	  tmpVec    =    previousCost;    for(int    j    =    0;    j    <    solvedCols;    ++j)    {    points[j]    =    oldX[pj];    }    	non-compiled	[CE]  cannot  find  symbol  preresult	66	None	replace
170	[BUG]  [BUGGY]  tmpVec  =  preRed;  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  int  oldRes  =  oldX[pj];  }  [CE]  incompatible  types  [FE]                    AssertionFailedError      [CONTEXT]        }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;      [BUGGY]  tmpVec  =  preRed;  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  int  oldRes  =  oldX[pj];  }  [BUGGY]      residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	432	432	2	replace	tmpVec  =  preRed;  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  int  oldRes  =  oldX[pj];  }	  tmpVec    =    previousCost;    for(int    j    =    0;    j    <    solvedCols;    ++j)    {    int    oldRes    =    oldX[pj];    }    	non-compiled	[CE]  incompatible  types	25	None	replace
171	[BUG]  [BUGGY]  tmpVec  =  oldX;  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  int  oldRes  =  oldX[pj];  }  [CE]  variable  oldRes  is  already  defined  in  method  doOptimize()  [FE]                      AssertionFailedError      [CONTEXT]        }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;      [BUGGY]  tmpVec  =  oldX;  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  int  oldRes  =  oldX[pj];  }  [BUGGY]      residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	432	432	2	replace	tmpVec  =  oldX;  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  int  oldRes  =  oldX[pj];  }	  tmpVec    =    previousCost;    for(int    j    =    0;    j    <    solvedCols;    ++j)    {    int    oldRes    =    oldX[pj];    }    	non-compiled	[CE]  variable  oldRes  is  already  defined  in  method  doOptimize()	25	None	replace
172	[BUG]  [BUGGY]  tmpVec  =  preresult;  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  int  oldRes  =  oldX[pj];  }  [CE]  cannot  find  symbol  preresult  [FE]                        AssertionFailedError      [CONTEXT]        }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;      [BUGGY]  tmpVec  =  preresult;  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  int  oldRes  =  oldX[pj];  }  [BUGGY]      residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	432	432	2	replace	tmpVec  =  preresult;  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  int  oldRes  =  oldX[pj];  }	  tmpVec    =    previousCost;    for(int    j    =    0;    j    <    solvedCols;    ++j)    {    int    oldRes    =    oldX[pj];    }    	non-compiled	[CE]  cannot  find  symbol  preresult	25	None	replace
173	[BUG]  [BUGGY]  tmpVec  =  new  VectorialPointValuePair(previousCost,  preres,  cost);  [CE]  cannot  find  symbol  preres  [FE]                  AssertionFailedError      [CONTEXT]        }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;      [BUGGY]  tmpVec  =  new  VectorialPointValuePair(previousCost,  preres,  cost);  [BUGGY]      residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	432	432	2	replace	tmpVec  =  new  VectorialPointValuePair(previousCost,  preres,  cost);	  tmpVec    =    new    VectorialPointValuePair(previousCost,    prered,    cost);    	non-compiled	[CE]  cannot  find  symbol  preres	110	None	replace
174	[BUG]  [BUGGY]  tmpVec  =  new  VectorialPointValuePair(previous);  [CE]  no  suitable  constructor  found  for  VectorialPointValuePair(VectorialPointValuePair)  [FE]            AssertionFailedError      [CONTEXT]        }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;      [BUGGY]  tmpVec  =  new  VectorialPointValuePair(previous);  [BUGGY]      residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	432	432	2	replace	tmpVec  =  new  VectorialPointValuePair(previous);	  tmpVec    =    new    VectorialPointValuePair(currentCost);    	non-compiled	[CE]  no  suitable  constructor  found  for  VectorialPointValuePair(VectorialPointValuePair)	119	None	replace
175	[BUG]  [BUGGY]  tmpVec  =  new  VectorialPointValuePair(lastIteration);  [CE]  cannot  find  symbol  lastIteration  [FE]              AssertionFailedError      [CONTEXT]        }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;      [BUGGY]  tmpVec  =  new  VectorialPointValuePair(lastIteration);  [BUGGY]      residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	432	432	2	replace	tmpVec  =  new  VectorialPointValuePair(lastIteration);	  tmpVec    =    new    VectorialPointValuePair(currentCost);    	non-compiled	[CE]  cannot  find  symbol  lastIteration	119	None	replace
176	[BUG]  [BUGGY]  tmpVec  =  permutation[j].doubleValue()  *  1;  [CE]  cannot  find  symbol  j  [FE]                AssertionFailedError      [CONTEXT]        }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;      [BUGGY]  tmpVec  =  permutation[j].doubleValue()  *  1;  [BUGGY]      residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	432	432	2	replace	tmpVec  =  permutation[j].doubleValue()  *  1;	  tmpVec    =    permutation[j].doubleValue()    +    1;    	non-compiled	[CE]  cannot  find  symbol  j	53	None	replace
177	[BUG]  [BUGGY]  tmpVec  =  permutation[j].doubleValue()  +  2;  [CE]  cannot  find  symbol  j  [FE]                  AssertionFailedError      [CONTEXT]        }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;      [BUGGY]  tmpVec  =  permutation[j].doubleValue()  +  2;  [BUGGY]      residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	432	432	2	replace	tmpVec  =  permutation[j].doubleValue()  +  2;	  tmpVec    =    permutation[j].doubleValue()    +    1;    	non-compiled	[CE]  cannot  find  symbol  j	53	None	replace
178	[BUG]  [BUGGY]  if(remainings  >  0)  {  oldRes  =  tmpVec;  }  else  {  cost  =  previousCost;  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  point[pj]  =  point[pj];  }  }  [CE]  cannot  find  symbol  remainings  [FE]          AssertionFailedError      [CONTEXT]        }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;      [BUGGY]  if(remainings  >  0)  {  oldRes  =  tmpVec;  }  else  {  cost  =  previousCost;  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  point[pj]  =  point[pj];  }  }  [BUGGY]      residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	432	432	2	replace	if(remainings  >  0)  {  oldRes  =  tmpVec;  }  else  {  cost  =  previousCost;  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  point[pj]  =  point[pj];  }  }	          oldRes    =    tmpVec;    if(remainings    >    0)    {    oldRes    =    tmpVec;    }    else    {    cost    =    previousCost;    for(int    j    =    0;    j    <    solvedCols;    ++j)    {    point[pj]    =    point[pj];    }    	non-compiled	[CE]  cannot  find  symbol  remainings	98	None	replace
179	[BUG]  [BUGGY]  if(remainings  >  0)  {  oldRes  =  previousCost;  }  else  {  cost  =  previousCost;  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  point[pj]  =  point[pj];  }  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]        }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;      [BUGGY]  if(remainings  >  0)  {  oldRes  =  previousCost;  }  else  {  cost  =  previousCost;  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  point[pj]  =  point[pj];  }  [BUGGY]      residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	432	432	2	replace	if(remainings  >  0)  {  oldRes  =  previousCost;  }  else  {  cost  =  previousCost;  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  point[pj]  =  point[pj];  }	          oldRes    =    tmpVec;    if(remainings    >    0)    {    oldRes    =    tmpVec;    }    else    {    cost    =    previousCost;    for(int    j    =    0;    j    <    solvedCols;    ++j)    {    point[pj]    =    point[pj];    }    	non-compiled	[CE]  illegal  start  of  expression	98	None	replace
180	[BUG]  [BUGGY]  if(remainings  >  0)  {  oldRes  =  tmpVec;  }  else  {  cost  =  previousCost;  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  point[pj]  =  point[pj];  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]        }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;      [BUGGY]  if(remainings  >  0)  {  oldRes  =  tmpVec;  }  else  {  cost  =  previousCost;  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  point[pj]  =  point[pj];  }  [BUGGY]      residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	432	432	2	replace	if(remainings  >  0)  {  oldRes  =  tmpVec;  }  else  {  cost  =  previousCost;  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  point[pj]  =  point[pj];  }	          oldRes    =    tmpVec;    if(remainings    >    0)    {    oldRes    =    tmpVec;    }    else    {    cost    =    previousCost;    for(int    j    =    0;    j    <    solvedCols;    ++j)    {    point[pj]    =    point[pj];    }    	non-compiled	[CE]  illegal  start  of  expression	98	None	replace
181	[BUG]  [BUGGY]  if(remainings  >  0)  {  oldRes  =  previousCost;  }  else  {  cost  =  previousCost;  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  point[pj]  =  point[pj];  }  }  [CE]  cannot  find  symbol  remainings  [FE]                AssertionFailedError      [CONTEXT]        }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;      [BUGGY]  if(remainings  >  0)  {  oldRes  =  previousCost;  }  else  {  cost  =  previousCost;  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  point[pj]  =  point[pj];  }  }  [BUGGY]      residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	432	432	2	replace	if(remainings  >  0)  {  oldRes  =  previousCost;  }  else  {  cost  =  previousCost;  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  point[pj]  =  point[pj];  }  }	          oldRes    =    tmpVec;    if(remainings    >    0)    {    oldRes    =    tmpVec;    }    else    {    cost    =    previousCost;    for(int    j    =    0;    j    <    solvedCols;    ++j)    {    point[pj]    =    point[pj];    }    	non-compiled	[CE]  cannot  find  symbol  remainings	98	None	replace
182	[BUG]  [BUGGY]  tmpVec  =  new  VectorialPointValuePair(previousCost,  previousCost);  [CE]  no  suitable  constructor  found  for  VectorialPointValuePair(double,double)  [FE]            AssertionFailedError      [CONTEXT]        }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;      [BUGGY]  tmpVec  =  new  VectorialPointValuePair(previousCost,  previousCost);  [BUGGY]      residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	432	432	2	replace	tmpVec  =  new  VectorialPointValuePair(previousCost,  previousCost);	  tmpVec    =    new    VectorialPointValuePair(lastX,    previousCost);    	non-compiled	[CE]  no  suitable  constructor  found  for  VectorialPointValuePair(double,double)	102	None	replace
183	[BUG]  [BUGGY]  tmpVec  =  new  VectorialPointValuePair(lastX,  oldRes);  [CE]  cannot  find  symbol  lastX  [FE]              AssertionFailedError      [CONTEXT]        }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;      [BUGGY]  tmpVec  =  new  VectorialPointValuePair(lastX,  oldRes);  [BUGGY]      residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	432	432	2	replace	tmpVec  =  new  VectorialPointValuePair(lastX,  oldRes);	  tmpVec    =    new    VectorialPointValuePair(lastX,    previousCost);    	non-compiled	[CE]  cannot  find  symbol  lastX	102	None	replace
184	[BUG]  [BUGGY]  tmpVec  =  cost[pj];  [CE]  cannot  find  symbol  pj  [FE]              AssertionFailedError      [CONTEXT]        }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;      [BUGGY]  tmpVec  =  cost[pj];  [BUGGY]      residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	432	432	2	replace	tmpVec  =  cost[pj];	  tmpVec    =    cost[j];    	non-compiled	[CE]  cannot  find  symbol  pj	113	None	replace
185	[BUG]  [BUGGY]  tmpVec  =  prevCost;  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  int  oldRes  =  oldX[pj];  }  [CE]  cannot  find  symbol  prevCost  [FE]                      AssertionFailedError      [CONTEXT]        }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;      [BUGGY]  tmpVec  =  prevCost;  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  int  oldRes  =  oldX[pj];  }  [BUGGY]      residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	432	432	2	replace	tmpVec  =  prevCost;  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  int  oldRes  =  oldX[pj];  }	  if(tmpVec!=    previousCost)    {    cost    =    prevCost;    for(int    j    =    0;    j    <    solvedCols;    ++j)    {    int    oldRes    =    oldX[pj];    }    	non-compiled	[CE]  cannot  find  symbol  prevCost	95	None	replace
186	[BUG]  [BUGGY]  if(previousCost!=  tmpVec)  {  cost  =  prevCost;  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  int  oldRes  =  oldX[pj];  }  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]        }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;      [BUGGY]  if(previousCost!=  tmpVec)  {  cost  =  prevCost;  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  int  oldRes  =  oldX[pj];  }  [BUGGY]      residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	432	432	2	replace	if(previousCost!=  tmpVec)  {  cost  =  prevCost;  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  int  oldRes  =  oldX[pj];  }	  if(tmpVec!=    previousCost)    {    cost    =    prevCost;    for(int    j    =    0;    j    <    solvedCols;    ++j)    {    int    oldRes    =    oldX[pj];    }    	non-compiled	[CE]  illegal  start  of  expression	95	None	replace
187	[BUG]  [BUGGY]  if(previousCost!=  tmpVec)  {  cost  =  previousCost;  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  int  oldRes  =  oldX[pj];  }  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]        }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;      [BUGGY]  if(previousCost!=  tmpVec)  {  cost  =  previousCost;  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  int  oldRes  =  oldX[pj];  }  [BUGGY]      residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	432	432	2	replace	if(previousCost!=  tmpVec)  {  cost  =  previousCost;  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  int  oldRes  =  oldX[pj];  }	  if(tmpVec!=    previousCost)    {    cost    =    prevCost;    for(int    j    =    0;    j    <    solvedCols;    ++j)    {    int    oldRes    =    oldX[pj];    }    	non-compiled	[CE]  illegal  start  of  expression	95	None	replace
188	[BUG]  [BUGGY]  tmpVec  =  permutation[point].doubleValue()  +  1;  [CE]  incompatible  types  [FE]                AssertionFailedError      [CONTEXT]        }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;      [BUGGY]  tmpVec  =  permutation[point].doubleValue()  +  1;  [BUGGY]      residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	432	432	2	replace	tmpVec  =  permutation[point].doubleValue()  +  1;	  tmpVec    =    permutation[point].doubleValue();    	non-compiled	[CE]  incompatible  types	87	None	replace
189	[BUG]  [BUGGY]  residuals  -=  oldX  +  1;  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]              AssertionFailedError      [CONTEXT]        }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;      [BUGGY]  residuals  -=  oldX  +  1;  [BUGGY]      oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	432	432	2	replace	residuals  -=  oldX  +  1;	  residuals    -=    oldRes    +    1;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	96	None	replace
190	[BUG]  [BUGGY]  residuals  -=  oldRes  +  2;  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]                AssertionFailedError      [CONTEXT]        }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;      [BUGGY]  residuals  -=  oldRes  +  2;  [BUGGY]      oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	432	432	2	replace	residuals  -=  oldRes  +  2;	  residuals    -=    oldRes    +    1;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	96	None	replace
191	[BUG]  [BUGGY]  value  =  oldRes;  [CE]  cannot  find  symbol  value  [FE]                AssertionFailedError      [CONTEXT]        }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;      [BUGGY]  value  =  oldRes;  [BUGGY]      oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	432	432	2	replace	value  =  oldRes;	  value    =    tmpVec;    	non-compiled	[CE]  cannot  find  symbol  value	70	None	replace
192	[BUG]  [BUGGY]  new  VectorialPointValuePair(oldX,  oldRes,  tmpVec);  [CE]  no  suitable  constructor  found  for  VectorialPointValuePair(double[],double[],double[])  [FE]              AssertionFailedError      [CONTEXT]        }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;      [BUGGY]  new  VectorialPointValuePair(oldX,  oldRes,  tmpVec);  [BUGGY]      residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	432	432	2	replace	new  VectorialPointValuePair(oldX,  oldRes,  tmpVec);	          oldRes    =    tmpVec;    new    VectorialPointValuePair(oldX,    oldRes,    tmpVec);    	non-compiled	[CE]  no  suitable  constructor  found  for  VectorialPointValuePair(double[],double[],double[])	42	None	replace
193	[BUG]  [BUGGY]  new  VectorialPointValuePair(oldX,  oldRes,  tmpVec,  cost);  [CE]  no  suitable  constructor  found  for  VectorialPointValuePair(double[],double[],double[],double)  [FE]                AssertionFailedError      [CONTEXT]        }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;      [BUGGY]  new  VectorialPointValuePair(oldX,  oldRes,  tmpVec,  cost);  [BUGGY]      residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	432	432	2	replace	new  VectorialPointValuePair(oldX,  oldRes,  tmpVec,  cost);	          oldRes    =    tmpVec;    new    VectorialPointValuePair(oldX,    oldRes,    tmpVec);    	non-compiled	[CE]  no  suitable  constructor  found  for  VectorialPointValuePair(double[],double[],double[],double)	42	None	replace
194	[BUG]  [BUGGY]  new  VectorialPointValuePair(oldX,  oldRes,  tmpVec,  tmpVec);  [CE]  no  suitable  constructor  found  for  VectorialPointValuePair(double[],double[],double[],double[])  [FE]                  AssertionFailedError      [CONTEXT]        }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;      [BUGGY]  new  VectorialPointValuePair(oldX,  oldRes,  tmpVec,  tmpVec);  [BUGGY]      residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	432	432	2	replace	new  VectorialPointValuePair(oldX,  oldRes,  tmpVec,  tmpVec);	          oldRes    =    tmpVec;    new    VectorialPointValuePair(oldX,    oldRes,    tmpVec);    	non-compiled	[CE]  no  suitable  constructor  found  for  VectorialPointValuePair(double[],double[],double[],double[])	42	None	replace
195	[BUG]  [BUGGY]  tmpVec  =  preRed;  for(int  j  =  0;  j  <  resolvedCols;  ++j)  {  point[pj]  =  oldX[pj];  }  [CE]  incompatible  types  [FE]              AssertionFailedError      [CONTEXT]        }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;      [BUGGY]  tmpVec  =  preRed;  for(int  j  =  0;  j  <  resolvedCols;  ++j)  {  point[pj]  =  oldX[pj];  }  [BUGGY]      residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	432	432	2	replace	tmpVec  =  preRed;  for(int  j  =  0;  j  <  resolvedCols;  ++j)  {  point[pj]  =  oldX[pj];  }	  tmpVec    =    previousCost;    for(int    j    =    0;    j    <    resolvedCols;    ++j)    {    point[pj]    =    oldX[pj];    }    	non-compiled	[CE]  incompatible  types	31	None	replace
196	[BUG]  [BUGGY]  tmpVec  =  preresult;  for(int  j  =  0;  j  <  resolvedCols;  ++j)  {  point[pj]  =  oldX[pj];  }  [CE]  cannot  find  symbol  preresult  [FE]                AssertionFailedError      [CONTEXT]        }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;      [BUGGY]  tmpVec  =  preresult;  for(int  j  =  0;  j  <  resolvedCols;  ++j)  {  point[pj]  =  oldX[pj];  }  [BUGGY]      residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	432	432	2	replace	tmpVec  =  preresult;  for(int  j  =  0;  j  <  resolvedCols;  ++j)  {  point[pj]  =  oldX[pj];  }	  tmpVec    =    previousCost;    for(int    j    =    0;    j    <    resolvedCols;    ++j)    {    point[pj]    =    oldX[pj];    }    	non-compiled	[CE]  cannot  find  symbol  preresult	31	None	replace
197	[BUG]  [BUGGY]  tmpVec  =  permutation;  for(int  j  =  0;  j  <  resolvedCols;  ++j)  {  point[pj]  =  oldX[pj];  }  [CE]  incompatible  types  [FE]                  AssertionFailedError      [CONTEXT]        }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;      [BUGGY]  tmpVec  =  permutation;  for(int  j  =  0;  j  <  resolvedCols;  ++j)  {  point[pj]  =  oldX[pj];  }  [BUGGY]      residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	432	432	2	replace	tmpVec  =  permutation;  for(int  j  =  0;  j  <  resolvedCols;  ++j)  {  point[pj]  =  oldX[pj];  }	  tmpVec    =    previousCost;    for(int    j    =    0;    j    <    resolvedCols;    ++j)    {    point[pj]    =    oldX[pj];    }    	non-compiled	[CE]  incompatible  types	31	None	replace
198	[BUG]  [BUGGY]  oldRes  =  new  VectorialPointValuePair(oldX,  oldRes);  [CE]  incompatible  types  [FE]                AssertionFailedError      [CONTEXT]        }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;      [BUGGY]  oldRes  =  new  VectorialPointValuePair(oldX,  oldRes);  [BUGGY]      oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	432	432	2	replace	oldRes  =  new  VectorialPointValuePair(oldX,  oldRes);	  remainders    =    new    VectorialPointValuePair(oldX,    oldRes);    	non-compiled	[CE]  incompatible  types	82	None	replace
199	[BUG]  [BUGGY]  remainings  =  new  VectorialPointValuePair(oldX,  oldRes);  [CE]  cannot  find  symbol  remainings  [FE]                  AssertionFailedError      [CONTEXT]        }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;      [BUGGY]  remainings  =  new  VectorialPointValuePair(oldX,  oldRes);  [BUGGY]      oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	432	432	2	replace	remainings  =  new  VectorialPointValuePair(oldX,  oldRes);	  remainders    =    new    VectorialPointValuePair(oldX,    oldRes);    	non-compiled	[CE]  cannot  find  symbol  remainings	82	None	replace
200	[BUG]  [BUGGY]  tmpVec  =  tmpVec.doubleValue();  [CE]  cannot  find  symbol  [FE]        AssertionFailedError      [CONTEXT]        }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;      [BUGGY]  tmpVec  =  tmpVec.doubleValue();  [BUGGY]      oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	432	432	2	replace	tmpVec  =  tmpVec.doubleValue();	  residuals    =    tmpVec;    tmpVec    =    tmpVec.doubleValue();    	non-compiled	[CE]  cannot  find  symbol	108	None	replace
201	[BUG]  [BUGGY]  results  =  tmpVec;  tmpVec  =  tmpVec.doubleValue();  [CE]  cannot  find  symbol  results  [FE]          AssertionFailedError      [CONTEXT]        }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;      [BUGGY]  results  =  tmpVec;  tmpVec  =  tmpVec.doubleValue();  [BUGGY]      oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	432	432	2	replace	results  =  tmpVec;  tmpVec  =  tmpVec.doubleValue();	  residuals    =    tmpVec;    tmpVec    =    tmpVec.doubleValue();    	non-compiled	[CE]  cannot  find  symbol  results	108	None	replace
202	[BUG]  [BUGGY]  res  =  tmpVec;  tmpVec  =  tmpVec.doubleValue();  [CE]  cannot  find  symbol  res  [FE]            AssertionFailedError      [CONTEXT]        }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;      [BUGGY]  res  =  tmpVec;  tmpVec  =  tmpVec.doubleValue();  [BUGGY]      oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	432	432	2	replace	res  =  tmpVec;  tmpVec  =  tmpVec.doubleValue();	  residuals    =    tmpVec;    tmpVec    =    tmpVec.doubleValue();    	non-compiled	[CE]  cannot  find  symbol  res	108	None	replace
203	[BUG]  [BUGGY]  tmpVec  =  permutation.length;  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  point[pj]  =  oldX[pj].doubleValue();  }  [CE]  incompatible  types  [FE]                AssertionFailedError      [CONTEXT]        }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;      [BUGGY]  tmpVec  =  permutation.length;  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  point[pj]  =  oldX[pj].doubleValue();  }  [BUGGY]      residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	432	432	2	replace	tmpVec  =  permutation.length;  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  point[pj]  =  oldX[pj].doubleValue();  }	  tmpVec    =    previousCost;    for(int    j    =    0;    j    <    solvedCols;    ++j)    {    point[pj]    =    oldX[pj].doubleValue();    }    	non-compiled	[CE]  incompatible  types	2	None	replace
204	[BUG]  [BUGGY]  tmpVec  =  oldRes[j];  [CE]  cannot  find  symbol  j  [FE]            AssertionFailedError      [CONTEXT]        }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;      [BUGGY]  tmpVec  =  oldRes[j];  [BUGGY]      residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	432	432	2	replace	tmpVec  =  oldRes[j];	  tmpVec    =    oldX[j];    	non-compiled	[CE]  cannot  find  symbol  j	112	None	replace
205	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]        }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;      [BUGGY]  tmpVec  =  oldX;  tmpVec  =  oldX;  [BUGGY]      oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	432	432	2	add	tmpVec    =    oldX;    tmpVec  =  oldX;	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	34	12	add
206	[BUG]  [BUGGY]  tmpVec  =  oldX;  tmpVec  =  oldX;  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]        }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;      [BUGGY]  tmpVec  =  oldX;  tmpVec  =  oldX;  [BUGGY]      oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	432	432	2	replace	tmpVec    =    oldX;    tmpVec  =  oldX;	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	34	12	add
207	[BUG]  [BUGGY]  tmpVec  =  oldX;  ((  VectorialPointValuePair)new  VectorialPointValuePair.Double(previousCost,  oldX,  oldRes)).doubleValue();  [CE]  cannot  find  symbol  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]        }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;      [BUGGY]  tmpVec  =  oldX;  ((  VectorialPointValuePair)new  VectorialPointValuePair.Double(previousCost,  oldX,  oldRes)).doubleValue();  [BUGGY]      oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	432	432	2	replace	tmpVec    =    oldX;    ((  VectorialPointValuePair)new  VectorialPointValuePair.Double(previousCost,  oldX,  oldRes)).doubleValue();	  	non-compiled	[CE]  cannot  find  symbol	34	None	add
208	[BUG]  [BUGGY]  tmpVec  =  oldX;  ((  VectorialPointValuePair)new  VectorialPointValuePair.Double(previousCost,  oldX,  oldRes));  tmpVec  =  oldX;  [CE]  not  a  statement  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]        }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;      [BUGGY]  tmpVec  =  oldX;  ((  VectorialPointValuePair)new  VectorialPointValuePair.Double(previousCost,  oldX,  oldRes));  tmpVec  =  oldX;  [BUGGY]      oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	432	432	2	replace	tmpVec    =    oldX;    ((  VectorialPointValuePair)new  VectorialPointValuePair.Double(previousCost,  oldX,  oldRes));  tmpVec  =  oldX;	  	non-compiled	[CE]  not  a  statement	34	None	add
209	[BUG]  [BUGGY]  tmpVec  =  oldX;  ((  VectorialPointValuePair)new  VectorialPointValuePair.Double(oldX,  oldRes)).doubleValue();  [CE]  cannot  find  symbol  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]        }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;      [BUGGY]  tmpVec  =  oldX;  ((  VectorialPointValuePair)new  VectorialPointValuePair.Double(oldX,  oldRes)).doubleValue();  [BUGGY]      oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	432	432	2	replace	tmpVec    =    oldX;    ((  VectorialPointValuePair)new  VectorialPointValuePair.Double(oldX,  oldRes)).doubleValue();	  	non-compiled	[CE]  cannot  find  symbol	34	None	add
210	[BUG]  [BUGGY]  tmpVec  =  oldX;  ((  VectorialPointValuePair)new  VectorialPointValuePair.Double(oldX,  oldRes));  tmpVec  =  oldX;  [CE]  not  a  statement  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]        }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;      [BUGGY]  tmpVec  =  oldX;  ((  VectorialPointValuePair)new  VectorialPointValuePair.Double(oldX,  oldRes));  tmpVec  =  oldX;  [BUGGY]      oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	432	432	2	replace	tmpVec    =    oldX;    ((  VectorialPointValuePair)new  VectorialPointValuePair.Double(oldX,  oldRes));  tmpVec  =  oldX;	  	non-compiled	[CE]  not  a  statement	34	None	add
211	[BUG]  [BUGGY]  tmpVec  =  permutation[j].remainder;  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  point[pj]  =  oldX[pj];  }  [CE]  cannot  find  symbol  j  [FE]            AssertionFailedError      [CONTEXT]        }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;      [BUGGY]  tmpVec  =  permutation[j].remainder;  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  point[pj]  =  oldX[pj];  }  [BUGGY]      residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	432	432	2	replace	tmpVec  =  permutation[j].remainder;  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  point[pj]  =  oldX[pj];  }	  if(tmpVec!=    previousCost)    {    cost    =    permutation[j].remainder;    for(int    j    =    0;    j    <    solvedCols;    ++j)    {    point[pj]    =    oldX[pj];    }    	non-compiled	[CE]  cannot  find  symbol  j	109	None	replace
212	[BUG]  [BUGGY]  tmpVec  =  oldX[pj].remainder;  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  point[pj]  =  oldX[pj];  }  [CE]  cannot  find  symbol  pj  [FE]              AssertionFailedError      [CONTEXT]        }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;      [BUGGY]  tmpVec  =  oldX[pj].remainder;  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  point[pj]  =  oldX[pj];  }  [BUGGY]      residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	432	432	2	replace	tmpVec  =  oldX[pj].remainder;  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  point[pj]  =  oldX[pj];  }	  if(tmpVec!=    previousCost)    {    cost    =    permutation[j].remainder;    for(int    j    =    0;    j    <    solvedCols;    ++j)    {    point[pj]    =    oldX[pj];    }    	non-compiled	[CE]  cannot  find  symbol  pj	109	None	replace
213	[BUG]  [BUGGY]  tmpVec  =  oldX[previousCost].remainder;  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  point[pj]  =  oldX[pj];  }  [CE]  possible  loss  of  precision  [FE]                AssertionFailedError      [CONTEXT]        }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;      [BUGGY]  tmpVec  =  oldX[previousCost].remainder;  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  point[pj]  =  oldX[pj];  }  [BUGGY]      residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	432	432	2	replace	tmpVec  =  oldX[previousCost].remainder;  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  point[pj]  =  oldX[pj];  }	  if(tmpVec!=    previousCost)    {    cost    =    permutation[j].remainder;    for(int    j    =    0;    j    <    solvedCols;    ++j)    {    point[pj]    =    oldX[pj];    }    	non-compiled	[CE]  possible  loss  of  precision	109	None	replace
214	[BUG]  [BUGGY]  tmpVec  =  permutation[j].remainder;  for(int  j  =  0;  j  <  solveCols;  ++j)  {  point[pj]  =  oldX[pj];  }  [CE]  cannot  find  symbol  j  [FE]                  AssertionFailedError      [CONTEXT]        }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;      [BUGGY]  tmpVec  =  permutation[j].remainder;  for(int  j  =  0;  j  <  solveCols;  ++j)  {  point[pj]  =  oldX[pj];  }  [BUGGY]      residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	432	432	2	replace	tmpVec  =  permutation[j].remainder;  for(int  j  =  0;  j  <  solveCols;  ++j)  {  point[pj]  =  oldX[pj];  }	  if(tmpVec!=    previousCost)    {    cost    =    permutation[j].remainder;    for(int    j    =    0;    j    <    solvedCols;    ++j)    {    point[pj]    =    oldX[pj];    }    	non-compiled	[CE]  cannot  find  symbol  j	109	None	replace
215	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]        }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;      [BUGGY]  tmpVec  =  residuals;  [BUGGY]      oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	432	432	2	add	tmpVec  =  residuals;	  residuals    =    tmpVec;    tmpVec    =    residuals;    	compilable	  [FE]  AssertionFailedError  	24	10	replace
216	[BUG]  [BUGGY]  tmpVec  =  residuals;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]        }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;      [BUGGY]  tmpVec  =  residuals;  [BUGGY]      oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	432	432	2	replace	tmpVec  =  residuals;	  residuals    =    tmpVec;    tmpVec    =    residuals;    	compilable	  [FE]  AssertionFailedError  	24	10	replace
217	[BUG]  [BUGGY]  tmpVec  =  new  VectorialPointValuePair(previousCost,  oldX,  oldRes);  [CE]  no  suitable  constructor  found  for  VectorialPointValuePair(double,double[],double[])  [FE]      AssertionFailedError    [CONTEXT]        }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;      [BUGGY]  tmpVec  =  new  VectorialPointValuePair(previousCost,  oldX,  oldRes);  [BUGGY]      oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	432	432	2	replace	tmpVec  =  new  VectorialPointValuePair(previousCost,  oldX,  oldRes);	  residuals    =    tmpVec;    tmpVec    =    residuals;    	non-compiled	[CE]  no  suitable  constructor  found  for  VectorialPointValuePair(double,double[],double[])	24	None	replace
218	[BUG]  [BUGGY]  tmpVec  =  new  VectorialPointValuePair(point);  [CE]  no  suitable  constructor  found  for  VectorialPointValuePair(double[])  [FE]              AssertionFailedError      [CONTEXT]        }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;      [BUGGY]  tmpVec  =  new  VectorialPointValuePair(point);  [BUGGY]      residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	432	432	2	replace	tmpVec  =  new  VectorialPointValuePair(point);	  tmpVec    =    new    VectorialPointValuePair(pj);    	non-compiled	[CE]  no  suitable  constructor  found  for  VectorialPointValuePair(double[])	28	None	replace
219	[BUG]  [BUGGY]  tmpVec  =  new  VectorialPointValuePair(permutation);  [CE]  no  suitable  constructor  found  for  VectorialPointValuePair(int[])  [FE]                AssertionFailedError      [CONTEXT]        }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;      [BUGGY]  tmpVec  =  new  VectorialPointValuePair(permutation);  [BUGGY]      residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	432	432	2	replace	tmpVec  =  new  VectorialPointValuePair(permutation);	  tmpVec    =    new    VectorialPointValuePair(pj);    	non-compiled	[CE]  no  suitable  constructor  found  for  VectorialPointValuePair(int[])	28	None	replace
220	[BUG]  [BUGGY]  tmpVec  =  Math.max(results,  preRed);  [CE]  cannot  find  symbol  results  [FE]                      AssertionFailedError      [CONTEXT]        }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;      [BUGGY]  tmpVec  =  Math.max(results,  preRed);  [BUGGY]      residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	432	432	2	replace	tmpVec  =  Math.max(results,  preRed);	  tmpVec    =    Math.max(results,    previousCost);    	non-compiled	[CE]  cannot  find  symbol  results	55	None	replace
221	[BUG]  [BUGGY]  tmpVec  =  Math.max(previousCost,  result);  [CE]  cannot  find  symbol  result  [FE]                        AssertionFailedError      [CONTEXT]        }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;      [BUGGY]  tmpVec  =  Math.max(previousCost,  result);  [BUGGY]      residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	432	432	2	replace	tmpVec  =  Math.max(previousCost,  result);	  tmpVec    =    Math.max(results,    previousCost);    	non-compiled	[CE]  cannot  find  symbol  result	55	None	replace
222	[BUG]  [BUGGY]  tmpVec  =  new  VectorialPointValuePair(previousCost,  cost,  preRed);  [CE]  no  suitable  constructor  found  for  VectorialPointValuePair(double,double,double)  [FE]                  AssertionFailedError      [CONTEXT]        }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;      [BUGGY]  tmpVec  =  new  VectorialPointValuePair(previousCost,  cost,  preRed);  [BUGGY]      residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	432	432	2	replace	tmpVec  =  new  VectorialPointValuePair(previousCost,  cost,  preRed);	  tmpVec    =    new    VectorialPointValuePair(previousCost,    preRed,    cost);    	non-compiled	[CE]  no  suitable  constructor  found  for  VectorialPointValuePair(double,double,double)	8	None	replace
223	[BUG]  [BUGGY]  tmpVec  =  new  VectorialPointValuePair(previousCost,  preRed,  point,  cost);  [CE]  no  suitable  constructor  found  for  VectorialPointValuePair(double,double,double[],double)  [FE]                    AssertionFailedError      [CONTEXT]        }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;      [BUGGY]  tmpVec  =  new  VectorialPointValuePair(previousCost,  preRed,  point,  cost);  [BUGGY]      residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	432	432	2	replace	tmpVec  =  new  VectorialPointValuePair(previousCost,  preRed,  point,  cost);	  tmpVec    =    new    VectorialPointValuePair(previousCost,    preRed,    cost);    	non-compiled	[CE]  no  suitable  constructor  found  for  VectorialPointValuePair(double,double,double[],double)	8	None	replace
224	[BUG]  [BUGGY]  tmpVec  =  new  VectorialPointValuePair(previousCost,  preRed,  cost,  fixedCols);  [CE]  cannot  find  symbol  fixedCols  [FE]                      AssertionFailedError      [CONTEXT]        }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;      [BUGGY]  tmpVec  =  new  VectorialPointValuePair(previousCost,  preRed,  cost,  fixedCols);  [BUGGY]      residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	432	432	2	replace	tmpVec  =  new  VectorialPointValuePair(previousCost,  preRed,  cost,  fixedCols);	  tmpVec    =    new    VectorialPointValuePair(previousCost,    preRed,    cost);    	non-compiled	[CE]  cannot  find  symbol  fixedCols	8	None	replace
225	[BUG]  [BUGGY]  tmpVec  =  new  VectorialPointValuePair(previousCost,  previousCost,  costRelativeTolerance);  [CE]  no  suitable  constructor  found  for  VectorialPointValuePair(double,double,double)  [FE]                    AssertionFailedError      [CONTEXT]        }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;      [BUGGY]  tmpVec  =  new  VectorialPointValuePair(previousCost,  previousCost,  costRelativeTolerance);  [BUGGY]      residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	432	432	2	replace	tmpVec  =  new  VectorialPointValuePair(previousCost,  previousCost,  costRelativeTolerance);	  tmpVec    =    new    VectorialPointValuePair(lastX,    previousCost,    preRed);    	non-compiled	[CE]  no  suitable  constructor  found  for  VectorialPointValuePair(double,double,double)	111	None	replace
226	[BUG]  [BUGGY]  tmpVec  =  new  VectorialPointValuePair(previousCost,  oldX,  preRed);  [CE]  no  suitable  constructor  found  for  VectorialPointValuePair(double,double[],double)  [FE]                      AssertionFailedError      [CONTEXT]        }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;      [BUGGY]  tmpVec  =  new  VectorialPointValuePair(previousCost,  oldX,  preRed);  [BUGGY]      residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	432	432	2	replace	tmpVec  =  new  VectorialPointValuePair(previousCost,  oldX,  preRed);	  tmpVec    =    new    VectorialPointValuePair(lastX,    previousCost,    preRed);    	non-compiled	[CE]  no  suitable  constructor  found  for  VectorialPointValuePair(double,double[],double)	111	None	replace
227	[BUG]  [BUGGY]  if(remainings  ==  tmpVec)  {  residuals  =  previousCost;  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  oldRes  =  tmpVec;  }  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError      [CONTEXT]        }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;      [BUGGY]  if(remainings  ==  tmpVec)  {  residuals  =  previousCost;  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  oldRes  =  tmpVec;  }  [BUGGY]      oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	432	432	2	replace	if(remainings  ==  tmpVec)  {  residuals  =  previousCost;  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  oldRes  =  tmpVec;  }	  residuals    =    tmpVec;    if(remainings    ==    tmpVec)    {    cost    =    previousCost;    for(int    j    =    0;    j    <    solvedCols;    ++j)    {    oldRes    =    tmpVec;    }    	non-compiled	[CE]  illegal  start  of  expression	75	None	replace
228	[BUG]  [BUGGY]  if(remainings  ==  tmpVec)  {  residuals  =  originalCost;  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  oldRes  =  tmpVec;  }  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError      [CONTEXT]        }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;      [BUGGY]  if(remainings  ==  tmpVec)  {  residuals  =  originalCost;  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  oldRes  =  tmpVec;  }  [BUGGY]      oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	432	432	2	replace	if(remainings  ==  tmpVec)  {  residuals  =  originalCost;  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  oldRes  =  tmpVec;  }	  residuals    =    tmpVec;    if(remainings    ==    tmpVec)    {    cost    =    previousCost;    for(int    j    =    0;    j    <    solvedCols;    ++j)    {    oldRes    =    tmpVec;    }    	non-compiled	[CE]  illegal  start  of  expression	75	None	replace
229	[BUG]  [BUGGY]  if(remainings  ==  tmpVec)  {  residuals  =  new  double[remainings.length];  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  oldRes  =  tmpVec;  }  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]        }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;      [BUGGY]  if(remainings  ==  tmpVec)  {  residuals  =  new  double[remainings.length];  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  oldRes  =  tmpVec;  }  [BUGGY]      oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	432	432	2	replace	if(remainings  ==  tmpVec)  {  residuals  =  new  double[remainings.length];  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  oldRes  =  tmpVec;  }	  residuals    =    tmpVec;    if(remainings    ==    tmpVec)    {    cost    =    previousCost;    for(int    j    =    0;    j    <    solvedCols;    ++j)    {    oldRes    =    tmpVec;    }    	non-compiled	[CE]  illegal  start  of  expression	75	None	replace
230	[BUG]  [BUGGY]  if(remainings  ==  tmpVec)  {  residuals  =  previousCost;  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  oldRes  +=  tmpVec;  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]        }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;      [BUGGY]  if(remainings  ==  tmpVec)  {  residuals  =  previousCost;  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  oldRes  +=  tmpVec;  }  [BUGGY]      oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	432	432	2	replace	if(remainings  ==  tmpVec)  {  residuals  =  previousCost;  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  oldRes  +=  tmpVec;  }	  residuals    =    tmpVec;    if(remainings    ==    tmpVec)    {    cost    =    previousCost;    for(int    j    =    0;    j    <    solvedCols;    ++j)    {    oldRes    =    tmpVec;    }    	non-compiled	[CE]  illegal  start  of  expression	75	None	replace
231	[BUG]  [BUGGY]  tmpVec  =  new  VectorialPointValuePair(previousCost,  preRed,  point,  lastIteration);  [CE]  cannot  find  symbol  lastIteration  [FE]                    AssertionFailedError      [CONTEXT]        }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;      [BUGGY]  tmpVec  =  new  VectorialPointValuePair(previousCost,  preRed,  point,  lastIteration);  [BUGGY]      residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	432	432	2	replace	tmpVec  =  new  VectorialPointValuePair(previousCost,  preRed,  point,  lastIteration);	  tmpVec    =    new    VectorialPointValuePair(previousCost,    preRed,    point);    	non-compiled	[CE]  cannot  find  symbol  lastIteration	9	None	replace
232	[BUG]  [BUGGY]  tmpVec  =  new  VectorialPointValuePair(previousCost,  preRed,  point.length);  [CE]  no  suitable  constructor  found  for  VectorialPointValuePair(double,double,int)  [FE]                      AssertionFailedError      [CONTEXT]        }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;      [BUGGY]  tmpVec  =  new  VectorialPointValuePair(previousCost,  preRed,  point.length);  [BUGGY]      residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	432	432	2	replace	tmpVec  =  new  VectorialPointValuePair(previousCost,  preRed,  point.length);	  tmpVec    =    new    VectorialPointValuePair(previousCost,    preRed,    point);    	non-compiled	[CE]  no  suitable  constructor  found  for  VectorialPointValuePair(double,double,int)	9	None	replace
233	[BUG]  [BUGGY]  tmpVec  =  previousCost.length;  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  point[pj]  =  oldX[pj].doubleValue();  }  [CE]  double  cannot  be  dereferenced  [FE]                    AssertionFailedError      [CONTEXT]        }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;      [BUGGY]  tmpVec  =  previousCost.length;  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  point[pj]  =  oldX[pj].doubleValue();  }  [BUGGY]      residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	432	432	2	replace	tmpVec  =  previousCost.length;  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  point[pj]  =  oldX[pj].doubleValue();  }	  if(tmpVec!=    previousCost)    {    cost    =    permutation.length;    for(int    j    =    0;    j    <    solvedCols;    ++j)    {    point[pj]    =    oldX[pj].doubleValue();    }    	non-compiled	[CE]  double  cannot  be  dereferenced	106	None	replace
234	[BUG]  [BUGGY]  tmpVec  =  permutation.length;  for(int  j  =  0;  j  <  resolvedCols;  ++j)  {  point[pj]  =  oldX[pj].doubleValue();  }  [CE]  incompatible  types  [FE]                      AssertionFailedError      [CONTEXT]        }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;      [BUGGY]  tmpVec  =  permutation.length;  for(int  j  =  0;  j  <  resolvedCols;  ++j)  {  point[pj]  =  oldX[pj].doubleValue();  }  [BUGGY]      residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	432	432	2	replace	tmpVec  =  permutation.length;  for(int  j  =  0;  j  <  resolvedCols;  ++j)  {  point[pj]  =  oldX[pj].doubleValue();  }	  if(tmpVec!=    previousCost)    {    cost    =    permutation.length;    for(int    j    =    0;    j    <    solvedCols;    ++j)    {    point[pj]    =    oldX[pj].doubleValue();    }    	non-compiled	[CE]  incompatible  types	106	None	replace
235	[BUG]  [BUGGY]  results  =  tmpVec  +  2;  [CE]  cannot  find  symbol  results  [FE]            AssertionFailedError      [CONTEXT]        }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;      [BUGGY]  results  =  tmpVec  +  2;  [BUGGY]      oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	432	432	2	replace	results  =  tmpVec  +  2;	  results    =    tmpVec    +    1;    	non-compiled	[CE]  cannot  find  symbol  results	77	None	replace
236	[BUG]  [BUGGY]  results  =  oldRes  +  1;  [CE]  cannot  find  symbol  results  [FE]              AssertionFailedError      [CONTEXT]        }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;      [BUGGY]  results  =  oldRes  +  1;  [BUGGY]      oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	432	432	2	replace	results  =  oldRes  +  1;	  results    =    tmpVec    +    1;    	non-compiled	[CE]  cannot  find  symbol  results	77	None	replace
237	[BUG]  [BUGGY]  results  =  oldX  +  1;  [CE]  cannot  find  symbol  results  [FE]                AssertionFailedError      [CONTEXT]        }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;      [BUGGY]  results  =  oldX  +  1;  [BUGGY]      oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	432	432	2	replace	results  =  oldX  +  1;	  results    =    tmpVec    +    1;    	non-compiled	[CE]  cannot  find  symbol  results	77	None	replace
238	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]        }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;      [BUGGY]  residuals    =    tmpVec;    residuals  =  tmpVec;  residuals  =  tmpVec;  residuals  =  tmpVec;  [BUGGY]      oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	432	432	2	add	residuals        =        tmpVec;        residuals    =    tmpVec;    residuals  =  tmpVec;  residuals  =  tmpVec;	  	compilable	  [FE]  AssertionFailedError  	20	2	add
239	[BUG]  [BUGGY]  residuals    =    tmpVec;    residuals  =  tmpVec;  residuals  =  tmpVec;  residuals  =  tmpVec;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]        }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;      [BUGGY]  residuals    =    tmpVec;    residuals  =  tmpVec;  residuals  =  tmpVec;  residuals  =  tmpVec;  [BUGGY]      oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	432	432	2	replace	residuals        =        tmpVec;        residuals    =    tmpVec;    residuals  =  tmpVec;  residuals  =  tmpVec;	  	compilable	  [FE]  AssertionFailedError  	20	2	add
240	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]        }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;      [BUGGY]  residuals    =    tmpVec;    residuals  =  tmpVec;  oldRes  =  tmpVec;  residuals  =  tmpVec;  [BUGGY]      oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	432	432	2	add	residuals        =        tmpVec;        residuals    =    tmpVec;    oldRes  =  tmpVec;  residuals  =  tmpVec;	  	compilable	  [FE]  AssertionFailedError  	20	10	add
241	[BUG]  [BUGGY]  residuals    =    tmpVec;    residuals  =  tmpVec;  oldRes  =  tmpVec;  residuals  =  tmpVec;  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]        }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;      [BUGGY]  residuals    =    tmpVec;    residuals  =  tmpVec;  oldRes  =  tmpVec;  residuals  =  tmpVec;  [BUGGY]      oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	432	432	2	replace	residuals        =        tmpVec;        residuals    =    tmpVec;    oldRes  =  tmpVec;  residuals  =  tmpVec;	  	compilable	  [FE]  AssertionFailedError  	20	10	add
242	[BUG]  [BUGGY]  residuals    =    tmpVec;    residuals  =  tmpVec;  remainings  =  tmpVec;  residuals  =  tmpVec;  [CE]  cannot  find  symbol  remainings  [FE]        AssertionFailedError    [CONTEXT]        }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;      [BUGGY]  residuals    =    tmpVec;    residuals  =  tmpVec;  remainings  =  tmpVec;  residuals  =  tmpVec;  [BUGGY]      oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	432	432	2	replace	residuals        =        tmpVec;        residuals    =    tmpVec;    remainings  =  tmpVec;  residuals  =  tmpVec;	  	non-compiled	[CE]  cannot  find  symbol  remainings	20	None	add
243	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]        }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;      [BUGGY]  residuals    =    tmpVec;    residuals  =  tmpVec;  tmpVec  =  tmpVec;  residuals  =  tmpVec;  [BUGGY]      oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	432	432	2	add	residuals        =        tmpVec;        residuals    =    tmpVec;    tmpVec  =  tmpVec;  residuals  =  tmpVec;	  	compilable	  [FE]  AssertionFailedError  	20	2	add
244	[BUG]  [BUGGY]  residuals    =    tmpVec;    residuals  =  tmpVec;  tmpVec  =  tmpVec;  residuals  =  tmpVec;  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]        }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;      [BUGGY]  residuals    =    tmpVec;    residuals  =  tmpVec;  tmpVec  =  tmpVec;  residuals  =  tmpVec;  [BUGGY]      oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	432	432	2	replace	residuals        =        tmpVec;        residuals    =    tmpVec;    tmpVec  =  tmpVec;  residuals  =  tmpVec;	  	compilable	  [FE]  AssertionFailedError  	20	2	add
245	[BUG]  [BUGGY]  residuals    =    tmpVec;    residuals  =  tmpVec;  tmpVec;  residuals  =  tmpVec;  [CE]  not  a  statement  [FE]            AssertionFailedError    [CONTEXT]        }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;      [BUGGY]  residuals    =    tmpVec;    residuals  =  tmpVec;  tmpVec;  residuals  =  tmpVec;  [BUGGY]      oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	432	432	2	replace	residuals        =        tmpVec;        residuals    =    tmpVec;    tmpVec;  residuals  =  tmpVec;	  	non-compiled	[CE]  not  a  statement	20	None	add
246	[BUG]  [BUGGY]  tmpVec  =  new  VectorialPointValuePair(period,  previousCost,  cost);  [CE]  cannot  find  symbol  period  [FE]                  AssertionFailedError      [CONTEXT]        }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;      [BUGGY]  tmpVec  =  new  VectorialPointValuePair(period,  previousCost,  cost);  [BUGGY]      residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	432	432	2	replace	tmpVec  =  new  VectorialPointValuePair(period,  previousCost,  cost);	  tmpVec    =    new    VectorialPointValuePair(point,    previousCost,    cost);    	non-compiled	[CE]  cannot  find  symbol  period	89	None	replace
247	[BUG]  [BUGGY]  tmpVec  =  new  VectorialPointValuePair(pr,  previousCost,  cost);  [CE]  cannot  find  symbol  pr  [FE]                    AssertionFailedError      [CONTEXT]        }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;      [BUGGY]  tmpVec  =  new  VectorialPointValuePair(pr,  previousCost,  cost);  [BUGGY]      residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	432	432	2	replace	tmpVec  =  new  VectorialPointValuePair(pr,  previousCost,  cost);	  tmpVec    =    new    VectorialPointValuePair(point,    previousCost,    cost);    	non-compiled	[CE]  cannot  find  symbol  pr	89	None	replace
248	[BUG]  [BUGGY]  tmpVec  =  Math.max(remainingCost,  previousCost);  [CE]  cannot  find  symbol  remainingCost  [FE]                    AssertionFailedError      [CONTEXT]        }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;      [BUGGY]  tmpVec  =  Math.max(remainingCost,  previousCost);  [BUGGY]      residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	432	432	2	replace	tmpVec  =  Math.max(remainingCost,  previousCost);	  tmpVec    =    Math.max(relativeTolerance,    previousCost);    	non-compiled	[CE]  cannot  find  symbol  remainingCost	80	None	replace
249	[BUG]  [BUGGY]  tmpVec  =  new  VectorialPointValuePair(pr,  previousCost);  [CE]  cannot  find  symbol  pr  [FE]              AssertionFailedError      [CONTEXT]        }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;      [BUGGY]  tmpVec  =  new  VectorialPointValuePair(pr,  previousCost);  [BUGGY]      residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	432	432	2	replace	tmpVec  =  new  VectorialPointValuePair(pr,  previousCost);	  tmpVec    =    new    VectorialPointValuePair(point,    previousCost);    	non-compiled	[CE]  cannot  find  symbol  pr	103	None	replace
250	[BUG]  [BUGGY]  tmpVec  =  new  VectorialPointValuePair(point,  preRed,  previousCost);  [CE]  no  suitable  constructor  found  for  VectorialPointValuePair(double[],double,double)  [FE]                AssertionFailedError      [CONTEXT]        }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;      [BUGGY]  tmpVec  =  new  VectorialPointValuePair(point,  preRed,  previousCost);  [BUGGY]      residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	432	432	2	replace	tmpVec  =  new  VectorialPointValuePair(point,  preRed,  previousCost);	  tmpVec    =    new    VectorialPointValuePair(point,    previousCost);    	non-compiled	[CE]  no  suitable  constructor  found  for  VectorialPointValuePair(double[],double,double)	103	None	replace
251	[BUG]  [BUGGY]  oldRes  =  tmpVec;  remainings  =  tmpVec;  [CE]  cannot  find  symbol  remainings  [FE]              AssertionFailedError      [CONTEXT]        }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;      [BUGGY]  oldRes  =  tmpVec;  remainings  =  tmpVec;  [BUGGY]      oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	432	432	2	replace	oldRes  =  tmpVec;  remainings  =  tmpVec;	  residuals    =    tmpVec;    remainings    =    tmpVec;    	non-compiled	[CE]  cannot  find  symbol  remainings	22	None	replace
252	[BUG]  [BUGGY]  remainings  =  tmpVec;  oldRes  =  tmpVec;  [CE]  cannot  find  symbol  remainings  [FE]    AssertionFailedError    [CONTEXT]        }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;      [BUGGY]  remainings  =  tmpVec;  oldRes  =  tmpVec;  [BUGGY]      residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	432	432	2	replace	remainings  =  tmpVec;  oldRes  =  tmpVec;	          oldRes    =    tmpVec;    oldRes    =    tmpVec;    	non-compiled	[CE]  cannot  find  symbol  remainings	38	None	replace
253	[BUG]  [BUGGY]  remainders  =  oldRes  +  1;  [CE]  cannot  find  symbol  remainders  [FE]              AssertionFailedError      [CONTEXT]        }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;      [BUGGY]  remainders  =  oldRes  +  1;  [BUGGY]      oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	432	432	2	replace	remainders  =  oldRes  +  1;	  remainders    =    tmpVec    +    1;    	non-compiled	[CE]  cannot  find  symbol  remainders	81	None	replace
254	[BUG]  [BUGGY]  remainders  =  oldX  +  1;  [CE]  cannot  find  symbol  remainders  [FE]                AssertionFailedError      [CONTEXT]        }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;      [BUGGY]  remainders  =  oldX  +  1;  [BUGGY]      oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	432	432	2	replace	remainders  =  oldX  +  1;	  remainders    =    tmpVec    +    1;    	non-compiled	[CE]  cannot  find  symbol  remainders	81	None	replace
255	[BUG]  [BUGGY]  tmpVec  =  tmpVec  +  1;  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]                  AssertionFailedError      [CONTEXT]        }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;      [BUGGY]  tmpVec  =  tmpVec  +  1;  [BUGGY]      oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	432	432	2	replace	tmpVec  =  tmpVec  +  1;	  remainders    =    tmpVec    +    1;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	81	None	replace
256	[BUG]  [BUGGY]  tmpVec  =  new  VectorialPointValuePair(results);  [CE]  cannot  find  symbol  results  [FE]                AssertionFailedError      [CONTEXT]        }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;      [BUGGY]  tmpVec  =  new  VectorialPointValuePair(results);  [BUGGY]      residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	432	432	2	replace	tmpVec  =  new  VectorialPointValuePair(results);	  tmpVec    =    new    VectorialPointValuePair(remainings);    	non-compiled	[CE]  cannot  find  symbol  results	29	None	replace
257	[BUG]  [BUGGY]  tmpVec  =  Math.max(result,  preRed);  [CE]  cannot  find  symbol  result  [FE]                    AssertionFailedError      [CONTEXT]        }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;      [BUGGY]  tmpVec  =  Math.max(result,  preRed);  [BUGGY]      residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	432	432	2	replace	tmpVec  =  Math.max(result,  preRed);	  tmpVec    =    Math.max(result,    previousCost);    	non-compiled	[CE]  cannot  find  symbol  result	54	None	replace
258	[BUG]  [BUGGY]  tmpVec  =  Math.max(previousCost,  pj);  [CE]  cannot  find  symbol  pj  [FE]                      AssertionFailedError      [CONTEXT]        }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;      [BUGGY]  tmpVec  =  Math.max(previousCost,  pj);  [BUGGY]      residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	432	432	2	replace	tmpVec  =  Math.max(previousCost,  pj);	  tmpVec    =    Math.max(result,    previousCost);    	non-compiled	[CE]  cannot  find  symbol  pj	54	None	replace
259	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]        }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;      [BUGGY]  residuals    =    tmpVec;    oldRes  =  tmpVec;  oldRes  =  tmpVec;  oldRes  =  tmpVec;  [BUGGY]      oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	432	432	2	add	residuals        =        tmpVec;        oldRes    =    tmpVec;    oldRes  =  tmpVec;  oldRes  =  tmpVec;	  	compilable	  [FE]  AssertionFailedError  	16	10	add
260	[BUG]  [BUGGY]  residuals    =    tmpVec;    oldRes  =  tmpVec;  oldRes  =  tmpVec;  oldRes  =  tmpVec;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]        }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;      [BUGGY]  residuals    =    tmpVec;    oldRes  =  tmpVec;  oldRes  =  tmpVec;  oldRes  =  tmpVec;  [BUGGY]      oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	432	432	2	replace	residuals        =        tmpVec;        oldRes    =    tmpVec;    oldRes  =  tmpVec;  oldRes  =  tmpVec;	  	compilable	  [FE]  AssertionFailedError  	16	10	add
261	[BUG]  [BUGGY]  residuals    =    tmpVec;    oldRes  =  tmpVec;  remainings  =  tmpVec;  oldRes  =  tmpVec;  [CE]  cannot  find  symbol  remainings  [FE]      AssertionFailedError    [CONTEXT]        }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;      [BUGGY]  residuals    =    tmpVec;    oldRes  =  tmpVec;  remainings  =  tmpVec;  oldRes  =  tmpVec;  [BUGGY]      oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	432	432	2	replace	residuals        =        tmpVec;        oldRes    =    tmpVec;    remainings  =  tmpVec;  oldRes  =  tmpVec;	  	non-compiled	[CE]  cannot  find  symbol  remainings	16	None	add
262	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]        }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;      [BUGGY]  residuals    =    tmpVec;    oldRes  =  tmpVec;  tmpVec  =  tmpVec;  oldRes  =  tmpVec;  [BUGGY]      oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	432	432	2	add	residuals        =        tmpVec;        oldRes    =    tmpVec;    tmpVec  =  tmpVec;  oldRes  =  tmpVec;	  	compilable	  [FE]  AssertionFailedError  	16	10	add
263	[BUG]  [BUGGY]  residuals    =    tmpVec;    oldRes  =  tmpVec;  tmpVec  =  tmpVec;  oldRes  =  tmpVec;  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]        }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;      [BUGGY]  residuals    =    tmpVec;    oldRes  =  tmpVec;  tmpVec  =  tmpVec;  oldRes  =  tmpVec;  [BUGGY]      oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	432	432	2	replace	residuals        =        tmpVec;        oldRes    =    tmpVec;    tmpVec  =  tmpVec;  oldRes  =  tmpVec;	  	compilable	  [FE]  AssertionFailedError  	16	10	add
264	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]        }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;      [BUGGY]  residuals    =    tmpVec;    oldRes  =  tmpVec;  oldRes  =  tmpVec;  [BUGGY]      oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	432	432	2	add	residuals        =        tmpVec;        oldRes    =    tmpVec;    oldRes  =  tmpVec;	  	compilable	  [FE]  AssertionFailedError  	16	10	add
265	[BUG]  [BUGGY]  residuals    =    tmpVec;    oldRes  =  tmpVec;  oldRes  =  tmpVec;  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]        }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;      [BUGGY]  residuals    =    tmpVec;    oldRes  =  tmpVec;  oldRes  =  tmpVec;  [BUGGY]      oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	432	432	2	replace	residuals        =        tmpVec;        oldRes    =    tmpVec;    oldRes  =  tmpVec;	  	compilable	  [FE]  AssertionFailedError  	16	10	add
266	[BUG]  [BUGGY]  tmpVec  =  new  VectorialPointValuePair(pj,  cost);  [CE]  cannot  find  symbol  pj  [FE]                    AssertionFailedError      [CONTEXT]        }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;      [BUGGY]  tmpVec  =  new  VectorialPointValuePair(pj,  cost);  [BUGGY]      residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	432	432	2	replace	tmpVec  =  new  VectorialPointValuePair(pj,  cost);	  tmpVec    =    new    VectorialPointValuePair(currentCost,    cost);    	non-compiled	[CE]  cannot  find  symbol  pj	15	None	replace
267	[BUG]  [BUGGY]  tmpVec  =  new  VectorialPointValuePair(period,  cost);  [CE]  cannot  find  symbol  period  [FE]                      AssertionFailedError      [CONTEXT]        }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;      [BUGGY]  tmpVec  =  new  VectorialPointValuePair(period,  cost);  [BUGGY]      residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	432	432	2	replace	tmpVec  =  new  VectorialPointValuePair(period,  cost);	  tmpVec    =    new    VectorialPointValuePair(currentCost,    cost);    	non-compiled	[CE]  cannot  find  symbol  period	15	None	replace
268	[BUG]  [BUGGY]  tmpVec  =  new  VectorialPointValuePair(previous,  cost);  [CE]  no  suitable  constructor  found  for  VectorialPointValuePair(VectorialPointValuePair,double)  [FE]                        AssertionFailedError      [CONTEXT]        }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;      [BUGGY]  tmpVec  =  new  VectorialPointValuePair(previous,  cost);  [BUGGY]      residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	432	432	2	replace	tmpVec  =  new  VectorialPointValuePair(previous,  cost);	  tmpVec    =    new    VectorialPointValuePair(currentCost,    cost);    	non-compiled	[CE]  no  suitable  constructor  found  for  VectorialPointValuePair(VectorialPointValuePair,double)	15	None	replace
269	[BUG]  [BUGGY]  tmpVec  =  point[permutation];  [CE]  incompatible  types  [FE]                  AssertionFailedError      [CONTEXT]        }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;      [BUGGY]  tmpVec  =  point[permutation];  [BUGGY]      residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	432	432	2	replace	tmpVec  =  point[permutation];	  tmpVec    =    permutation[point];    	non-compiled	[CE]  incompatible  types	71	None	replace
270	[BUG]  [BUGGY]  tmpVec  =  permutation[point]  +  1;  [CE]  incompatible  types  [FE]                    AssertionFailedError      [CONTEXT]        }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;      [BUGGY]  tmpVec  =  permutation[point]  +  1;  [BUGGY]      residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	432	432	2	replace	tmpVec  =  permutation[point]  +  1;	  tmpVec    =    permutation[point];    	non-compiled	[CE]  incompatible  types	71	None	replace
271	[BUG]  [BUGGY]  tmpVec  =  permutation[point]  +  point;  [CE]  incompatible  types  [FE]                      AssertionFailedError      [CONTEXT]        }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;      [BUGGY]  tmpVec  =  permutation[point]  +  point;  [BUGGY]      residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	432	432	2	replace	tmpVec  =  permutation[point]  +  point;	  tmpVec    =    permutation[point];    	non-compiled	[CE]  incompatible  types	71	None	replace
272	[BUG]  [BUGGY]  tmpVec  =  permutation[j]  +  2;  [CE]  cannot  find  symbol  j  [FE]              AssertionFailedError      [CONTEXT]        }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;      [BUGGY]  tmpVec  =  permutation[j]  +  2;  [BUGGY]      residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	432	432	2	replace	tmpVec  =  permutation[j]  +  2;	  tmpVec    =    permutation[j]    +    1;    	non-compiled	[CE]  cannot  find  symbol  j	12	None	replace
273	[BUG]  [BUGGY]  tmpVec  =  permutation[pj]  +  1;  [CE]  cannot  find  symbol  pj  [FE]                AssertionFailedError      [CONTEXT]        }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;      [BUGGY]  tmpVec  =  permutation[pj]  +  1;  [BUGGY]      residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	432	432	2	replace	tmpVec  =  permutation[pj]  +  1;	  tmpVec    =    permutation[j]    +    1;    	non-compiled	[CE]  cannot  find  symbol  pj	12	None	replace
274	[BUG]  [BUGGY]  tmpVec  =  permutation[j]  +  3;  [CE]  cannot  find  symbol  j  [FE]                  AssertionFailedError      [CONTEXT]        }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;      [BUGGY]  tmpVec  =  permutation[j]  +  3;  [BUGGY]      residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	432	432	2	replace	tmpVec  =  permutation[j]  +  3;	  tmpVec    =    permutation[j]    +    1;    	non-compiled	[CE]  cannot  find  symbol  j	12	None	replace
275	[BUG]  [BUGGY]  tmpVec  =  permutation[j].remainder;  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  point[j]  =  oldX[pj];  }  [CE]  cannot  find  symbol  j  [FE]                  AssertionFailedError      [CONTEXT]        }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;      [BUGGY]  tmpVec  =  permutation[j].remainder;  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  point[j]  =  oldX[pj];  }  [BUGGY]      residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	432	432	2	replace	tmpVec  =  permutation[j].remainder;  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  point[j]  =  oldX[pj];  }	  if(tmpVec!=    previousCost)    {    cost    =    permutation[j].remainder;    for(int    j    =    0;    j    <    solvedCols;    ++j)    {    point[j]    =    oldX[pj];    }    	non-compiled	[CE]  cannot  find  symbol  j	115	None	replace
276	[BUG]  [BUGGY]  tmpVec  =  oldX[pj].remainder;  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  point[j]  =  oldX[pj];  }  [CE]  cannot  find  symbol  pj  [FE]                    AssertionFailedError      [CONTEXT]        }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;      [BUGGY]  tmpVec  =  oldX[pj].remainder;  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  point[j]  =  oldX[pj];  }  [BUGGY]      residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	432	432	2	replace	tmpVec  =  oldX[pj].remainder;  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  point[j]  =  oldX[pj];  }	  if(tmpVec!=    previousCost)    {    cost    =    permutation[j].remainder;    for(int    j    =    0;    j    <    solvedCols;    ++j)    {    point[j]    =    oldX[pj];    }    	non-compiled	[CE]  cannot  find  symbol  pj	115	None	replace
277	[BUG]  [BUGGY]  tmpVec  =  permutation[j].remainder;  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  points[j]  =  oldX[pj];  }  [CE]  cannot  find  symbol  j  [FE]                      AssertionFailedError      [CONTEXT]        }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;      [BUGGY]  tmpVec  =  permutation[j].remainder;  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  points[j]  =  oldX[pj];  }  [BUGGY]      residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	432	432	2	replace	tmpVec  =  permutation[j].remainder;  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  points[j]  =  oldX[pj];  }	  if(tmpVec!=    previousCost)    {    cost    =    permutation[j].remainder;    for(int    j    =    0;    j    <    solvedCols;    ++j)    {    point[j]    =    oldX[pj];    }    	non-compiled	[CE]  cannot  find  symbol  j	115	None	replace
278	[BUG]  [BUGGY]  tmpVec  =  permutation[j].remainder;  for(int  j  =  0;  j  <  solveCols;  ++j)  {  point[j]  =  oldX[pj];  }  [CE]  cannot  find  symbol  j  [FE]                        AssertionFailedError      [CONTEXT]        }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;      [BUGGY]  tmpVec  =  permutation[j].remainder;  for(int  j  =  0;  j  <  solveCols;  ++j)  {  point[j]  =  oldX[pj];  }  [BUGGY]      residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	432	432	2	replace	tmpVec  =  permutation[j].remainder;  for(int  j  =  0;  j  <  solveCols;  ++j)  {  point[j]  =  oldX[pj];  }	  if(tmpVec!=    previousCost)    {    cost    =    permutation[j].remainder;    for(int    j    =    0;    j    <    solvedCols;    ++j)    {    point[j]    =    oldX[pj];    }    	non-compiled	[CE]  cannot  find  symbol  j	115	None	replace
279	[BUG]  [BUGGY]  tmpVec  =  new  VectorialPointValuePair(pj,  preRed);  [CE]  cannot  find  symbol  pj  [FE]              AssertionFailedError      [CONTEXT]        }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;      [BUGGY]  tmpVec  =  new  VectorialPointValuePair(pj,  preRed);  [BUGGY]      residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	432	432	2	replace	tmpVec  =  new  VectorialPointValuePair(pj,  preRed);	  tmpVec    =    new    VectorialPointValuePair(pj,    previousCost);    	non-compiled	[CE]  cannot  find  symbol  pj	58	None	replace
280	[BUG]  [BUGGY]  if(results!=  null)  {  if(previousCost!=  null)  {  cost  =  previousCost;  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  point[j]  =  oldX[pj];  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]        }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;      [BUGGY]  if(results!=  null)  {  if(previousCost!=  null)  {  cost  =  previousCost;  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  point[j]  =  oldX[pj];  }  [BUGGY]      residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	432	432	2	replace	if(results!=  null)  {  if(previousCost!=  null)  {  cost  =  previousCost;  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  point[j]  =  oldX[pj];  }	  if(tmpVec!=    null)    {    cost    =    previousCost;    for(int    j    =    0;    j    <    solvedCols;    ++j)    {    point[j]    =    oldX[pj];    }    	non-compiled	[CE]  illegal  start  of  expression	92	None	replace
281	[BUG]  [BUGGY]  if(results!=  null)  {  if(previousCost!=  null)  {  cost  =  previousCost;  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  point[j]  =  oldX[pj];  }  }  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]        }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;      [BUGGY]  if(results!=  null)  {  if(previousCost!=  null)  {  cost  =  previousCost;  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  point[j]  =  oldX[pj];  }  }  [BUGGY]      residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	432	432	2	replace	if(results!=  null)  {  if(previousCost!=  null)  {  cost  =  previousCost;  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  point[j]  =  oldX[pj];  }  }	  if(tmpVec!=    null)    {    cost    =    previousCost;    for(int    j    =    0;    j    <    solvedCols;    ++j)    {    point[j]    =    oldX[pj];    }    	non-compiled	[CE]  illegal  start  of  expression	92	None	replace
282	[BUG]  [BUGGY]  if(results!=  null)  {  if(tmpVec!=  null)  {  cost  =  previousCost;  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  point[j]  =  oldX[pj];  }  }  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]        }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;      [BUGGY]  if(results!=  null)  {  if(tmpVec!=  null)  {  cost  =  previousCost;  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  point[j]  =  oldX[pj];  }  }  [BUGGY]      residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	432	432	2	replace	if(results!=  null)  {  if(tmpVec!=  null)  {  cost  =  previousCost;  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  point[j]  =  oldX[pj];  }  }	  if(tmpVec!=    null)    {    cost    =    previousCost;    for(int    j    =    0;    j    <    solvedCols;    ++j)    {    point[j]    =    oldX[pj];    }    	non-compiled	[CE]  illegal  start  of  expression	92	None	replace
283	[BUG]  [BUGGY]  tmpVec  =  previousCost;  for(int  j  =  0;  j  <  solveCols;  ++j)  {  permutation[j]  =  oldX[pj];  }  [CE]  incompatible  types  [FE]              AssertionFailedError      [CONTEXT]        }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;      [BUGGY]  tmpVec  =  previousCost;  for(int  j  =  0;  j  <  solveCols;  ++j)  {  permutation[j]  =  oldX[pj];  }  [BUGGY]      residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	432	432	2	replace	tmpVec  =  previousCost;  for(int  j  =  0;  j  <  solveCols;  ++j)  {  permutation[j]  =  oldX[pj];  }	  if(tmpVec!=    preRed)    {    cost    =    previousCost;    for(int    j    =    0;    j    <    solvedCols;    ++j)    {    permutation[j]    =    oldX[pj];    }    	non-compiled	[CE]  incompatible  types	123	None	replace
284	[BUG]  [BUGGY]  tmpVec  =  previousCost;  for(int  j  =  0;  j  <  solvingCols;  ++j)  {  permutation[j]  =  oldX[pj];  }  [CE]  incompatible  types  [FE]                AssertionFailedError      [CONTEXT]        }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;      [BUGGY]  tmpVec  =  previousCost;  for(int  j  =  0;  j  <  solvingCols;  ++j)  {  permutation[j]  =  oldX[pj];  }  [BUGGY]      residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	432	432	2	replace	tmpVec  =  previousCost;  for(int  j  =  0;  j  <  solvingCols;  ++j)  {  permutation[j]  =  oldX[pj];  }	  if(tmpVec!=    preRed)    {    cost    =    previousCost;    for(int    j    =    0;    j    <    solvedCols;    ++j)    {    permutation[j]    =    oldX[pj];    }    	non-compiled	[CE]  incompatible  types	123	None	replace
285	[BUG]  [BUGGY]  tmpVec  =  permutation[j];  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  point[pj]  =  oldX[pj].doubleValue();  }  [CE]  cannot  find  symbol  j  [FE]                AssertionFailedError      [CONTEXT]        }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;      [BUGGY]  tmpVec  =  permutation[j];  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  point[pj]  =  oldX[pj].doubleValue();  }  [BUGGY]      residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	432	432	2	replace	tmpVec  =  permutation[j];  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  point[pj]  =  oldX[pj].doubleValue();  }	  if(tmpVec!=    previousCost)    {    cost    =    permutation[j];    for(int    j    =    0;    j    <    solvedCols;    ++j)    {    point[pj]    =    oldX[pj].doubleValue();    }    	non-compiled	[CE]  cannot  find  symbol  j	104	None	replace
286	[BUG]  [BUGGY]  tmpVec  =  permutation[j];  for(int  j  =  0;  j  <  resolvedCols;  ++j)  {  point[pj]  =  oldX[pj].doubleValue();  }  [CE]  cannot  find  symbol  j  [FE]                  AssertionFailedError      [CONTEXT]        }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;      [BUGGY]  tmpVec  =  permutation[j];  for(int  j  =  0;  j  <  resolvedCols;  ++j)  {  point[pj]  =  oldX[pj].doubleValue();  }  [BUGGY]      residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	432	432	2	replace	tmpVec  =  permutation[j];  for(int  j  =  0;  j  <  resolvedCols;  ++j)  {  point[pj]  =  oldX[pj].doubleValue();  }	  if(tmpVec!=    previousCost)    {    cost    =    permutation[j];    for(int    j    =    0;    j    <    solvedCols;    ++j)    {    point[pj]    =    oldX[pj].doubleValue();    }    	non-compiled	[CE]  cannot  find  symbol  j	104	None	replace
287	[BUG]  [BUGGY]  tmpVec  =  permutation[j];  for(int  j  =  0;  j  <  solveCols;  ++j)  {  point[pj]  =  oldX[pj].doubleValue();  }  [CE]  cannot  find  symbol  j  [FE]                    AssertionFailedError      [CONTEXT]        }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;      [BUGGY]  tmpVec  =  permutation[j];  for(int  j  =  0;  j  <  solveCols;  ++j)  {  point[pj]  =  oldX[pj].doubleValue();  }  [BUGGY]      residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	432	432	2	replace	tmpVec  =  permutation[j];  for(int  j  =  0;  j  <  solveCols;  ++j)  {  point[pj]  =  oldX[pj].doubleValue();  }	  if(tmpVec!=    previousCost)    {    cost    =    permutation[j];    for(int    j    =    0;    j    <    solvedCols;    ++j)    {    point[pj]    =    oldX[pj].doubleValue();    }    	non-compiled	[CE]  cannot  find  symbol  j	104	None	replace
288	[BUG]  [BUGGY]  tmpVec  =  permutation[j];  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  points[pj]  =  oldX[pj].doubleValue();  }  [CE]  cannot  find  symbol  j  [FE]                      AssertionFailedError      [CONTEXT]        }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;      [BUGGY]  tmpVec  =  permutation[j];  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  points[pj]  =  oldX[pj].doubleValue();  }  [BUGGY]      residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	432	432	2	replace	tmpVec  =  permutation[j];  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  points[pj]  =  oldX[pj].doubleValue();  }	  if(tmpVec!=    previousCost)    {    cost    =    permutation[j];    for(int    j    =    0;    j    <    solvedCols;    ++j)    {    point[pj]    =    oldX[pj].doubleValue();    }    	non-compiled	[CE]  cannot  find  symbol  j	104	None	replace
289	[BUG]  [BUGGY]  tmpVec  =  preRed;  for(int  j  =  0;  j  <  resolvedCols;  ++j)  {  permutation[j]  =  oldX[pj];  }  [CE]  incompatible  types  [FE]                AssertionFailedError      [CONTEXT]        }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;      [BUGGY]  tmpVec  =  preRed;  for(int  j  =  0;  j  <  resolvedCols;  ++j)  {  permutation[j]  =  oldX[pj];  }  [BUGGY]      residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	432	432	2	replace	tmpVec  =  preRed;  for(int  j  =  0;  j  <  resolvedCols;  ++j)  {  permutation[j]  =  oldX[pj];  }	  tmpVec    =    previousCost;    for(int    j    =    0;    j    <    resolvedCols;    ++j)    {    permutation[j]    =    oldX[pj];    }    	non-compiled	[CE]  incompatible  types	7	None	replace
290	[BUG]  [BUGGY]  tmpVec  =  permutation.length;  for(int  j  =  0;  j  <  resolvedCols;  ++j)  {  permutation[j]  =  oldX[pj];  }  [CE]  incompatible  types  [FE]                  AssertionFailedError      [CONTEXT]        }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;      [BUGGY]  tmpVec  =  permutation.length;  for(int  j  =  0;  j  <  resolvedCols;  ++j)  {  permutation[j]  =  oldX[pj];  }  [BUGGY]      residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	432	432	2	replace	tmpVec  =  permutation.length;  for(int  j  =  0;  j  <  resolvedCols;  ++j)  {  permutation[j]  =  oldX[pj];  }	  tmpVec    =    previousCost;    for(int    j    =    0;    j    <    resolvedCols;    ++j)    {    permutation[j]    =    oldX[pj];    }    	non-compiled	[CE]  incompatible  types	7	None	replace
291	[BUG]  [BUGGY]  tmpVec  =  preresult;  for(int  j  =  0;  j  <  resolvedCols;  ++j)  {  permutation[j]  =  oldX[pj];  }  [CE]  cannot  find  symbol  preresult  [FE]                    AssertionFailedError      [CONTEXT]        }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;      [BUGGY]  tmpVec  =  preresult;  for(int  j  =  0;  j  <  resolvedCols;  ++j)  {  permutation[j]  =  oldX[pj];  }  [BUGGY]      residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	432	432	2	replace	tmpVec  =  preresult;  for(int  j  =  0;  j  <  resolvedCols;  ++j)  {  permutation[j]  =  oldX[pj];  }	  tmpVec    =    previousCost;    for(int    j    =    0;    j    <    resolvedCols;    ++j)    {    permutation[j]    =    oldX[pj];    }    	non-compiled	[CE]  cannot  find  symbol  preresult	7	None	replace
292	[BUG]  [BUGGY]  residuals  -=  tmpVec  +  1;  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]              AssertionFailedError      [CONTEXT]        }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;      [BUGGY]  residuals  -=  tmpVec  +  1;  [BUGGY]      oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	432	432	2	replace	residuals  -=  tmpVec  +  1;	  residuals    -=    tmpVec;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	117	None	replace
293	[BUG]  [BUGGY]  tmpVec  -=  residuals;  [CE]  bad  operand  types  for  binary  operator  '-'  [FE]                AssertionFailedError      [CONTEXT]        }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;      [BUGGY]  tmpVec  -=  residuals;  [BUGGY]      oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	432	432	2	replace	tmpVec  -=  residuals;	  residuals    -=    tmpVec;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '-'	117	None	replace
294	[BUG]  [BUGGY]  residuals  -=  tmpVec.length;  [CE]  bad  operand  types  for  binary  operator  '-'  [FE]                  AssertionFailedError      [CONTEXT]        }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;      [BUGGY]  residuals  -=  tmpVec.length;  [BUGGY]      oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	432	432	2	replace	residuals  -=  tmpVec.length;	  residuals    -=    tmpVec;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '-'	117	None	replace
295	[BUG]  [BUGGY]  tmpVec  =  previousCost;  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  oldRes  =  oldX[pj];  }  [CE]  incompatible  types  [FE]                    AssertionFailedError      [CONTEXT]        }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;      [BUGGY]  tmpVec  =  previousCost;  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  oldRes  =  oldX[pj];  }  [BUGGY]      residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	432	432	2	replace	tmpVec  =  previousCost;  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  oldRes  =  oldX[pj];  }	  if(tmpVec!=    preRed)    {    cost    =    previousCost;    for(int    j    =    0;    j    <    solvedCols;    ++j)    {    int    oldRes    =    oldX[pj];    }    	non-compiled	[CE]  incompatible  types	126	None	replace
296	[BUG]  [BUGGY]  tmpVec  =  preRed;  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  permutation[j]  =  oldX[pj];  }  [CE]  incompatible  types  [FE]                  AssertionFailedError      [CONTEXT]        }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;      [BUGGY]  tmpVec  =  preRed;  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  permutation[j]  =  oldX[pj];  }  [BUGGY]      residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	432	432	2	replace	tmpVec  =  preRed;  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  permutation[j]  =  oldX[pj];  }	  if(tmpVec!=    previousCost)    {    cost    =    preRed;    for(int    j    =    0;    j    <    solvedCols;    ++j)    {    permutation[j]    =    oldX[pj];    }    	non-compiled	[CE]  incompatible  types	125	None	replace
297	[BUG]  [BUGGY]  if(previousCost!=  tmpVec)  {  cost  =  preRed;  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  permutation[j]  =  oldX[pj];  }  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]        }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;      [BUGGY]  if(previousCost!=  tmpVec)  {  cost  =  preRed;  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  permutation[j]  =  oldX[pj];  }  [BUGGY]      residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	432	432	2	replace	if(previousCost!=  tmpVec)  {  cost  =  preRed;  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  permutation[j]  =  oldX[pj];  }	  if(tmpVec!=    previousCost)    {    cost    =    preRed;    for(int    j    =    0;    j    <    solvedCols;    ++j)    {    permutation[j]    =    oldX[pj];    }    	non-compiled	[CE]  illegal  start  of  expression	125	None	replace
298	[BUG]  [BUGGY]  preRed  =  tmpVec;  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  permutation[j]  =  oldX[pj];  }  [CE]  incompatible  types  [FE]                      AssertionFailedError      [CONTEXT]        }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;      [BUGGY]  preRed  =  tmpVec;  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  permutation[j]  =  oldX[pj];  }  [BUGGY]      residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	432	432	2	replace	preRed  =  tmpVec;  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  permutation[j]  =  oldX[pj];  }	  if(tmpVec!=    previousCost)    {    cost    =    preRed;    for(int    j    =    0;    j    <    solvedCols;    ++j)    {    permutation[j]    =    oldX[pj];    }    	non-compiled	[CE]  incompatible  types	125	None	replace
299	[BUG]  [BUGGY]  if(previousCost!=  tmpVec)  {  cost  =  oldRes;  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  permutation[j]  =  oldX[pj];  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]        }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;      [BUGGY]  if(previousCost!=  tmpVec)  {  cost  =  oldRes;  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  permutation[j]  =  oldX[pj];  }  [BUGGY]      residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	432	432	2	replace	if(previousCost!=  tmpVec)  {  cost  =  oldRes;  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  permutation[j]  =  oldX[pj];  }	  if(tmpVec!=    previousCost)    {    cost    =    oldRes;    for(int    j    =    0;    j    <    solvedCols;    ++j)    {    permutation[j]    =    oldX[pj];    }    	non-compiled	[CE]  illegal  start  of  expression	73	None	replace
300	[BUG]  [BUGGY]  if(previousCost!=  tmpVec)  {  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  permutation[j]  =  oldX[pj];  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]        }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;      [BUGGY]  if(previousCost!=  tmpVec)  {  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  permutation[j]  =  oldX[pj];  }  [BUGGY]      residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	432	432	2	replace	if(previousCost!=  tmpVec)  {  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  permutation[j]  =  oldX[pj];  }	  if(tmpVec!=    previousCost)    {    cost    =    oldRes;    for(int    j    =    0;    j    <    solvedCols;    ++j)    {    permutation[j]    =    oldX[pj];    }    	non-compiled	[CE]  illegal  start  of  expression	73	None	replace
301	[BUG]  [BUGGY]  if(previousCost!=  tmpVec)  {  cost  =  preRed;  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  int  oldRes  =  oldX[pj];  }  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]        }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;      [BUGGY]  if(previousCost!=  tmpVec)  {  cost  =  preRed;  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  int  oldRes  =  oldX[pj];  }  [BUGGY]      residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	432	432	2	replace	if(previousCost!=  tmpVec)  {  cost  =  preRed;  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  int  oldRes  =  oldX[pj];  }	  if(tmpVec!=    previousCost)    {    cost    =    preRed;    for(int    j    =    0;    j    <    solvedCols;    ++j)    {    int    oldRes    =    oldX[pj];    }    	non-compiled	[CE]  illegal  start  of  expression	127	None	replace
302	[BUG]  [BUGGY]  tmpVec  =  permutation.length;  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  permutation[j]  =  oldX[pj];  }  [CE]  incompatible  types  [FE]              AssertionFailedError      [CONTEXT]        }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;      [BUGGY]  tmpVec  =  permutation.length;  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  permutation[j]  =  oldX[pj];  }  [BUGGY]      residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	432	432	2	replace	tmpVec  =  permutation.length;  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  permutation[j]  =  oldX[pj];  }	  tmpVec    =    previousCost;    for(int    j    =    0;    j    <    solvedCols;    ++j)    {    permutation[j]    =    oldX[pj];    }    	non-compiled	[CE]  incompatible  types	6	None	replace
303	[BUG]  [BUGGY]  tmpVec  =  permutation;  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  permutation[j]  =  oldX[pj];  }  [CE]  incompatible  types  [FE]                AssertionFailedError      [CONTEXT]        }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;      [BUGGY]  tmpVec  =  permutation;  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  permutation[j]  =  oldX[pj];  }  [BUGGY]      residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	432	432	2	replace	tmpVec  =  permutation;  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  permutation[j]  =  oldX[pj];  }	  tmpVec    =    previousCost;    for(int    j    =    0;    j    <    solvedCols;    ++j)    {    permutation[j]    =    oldX[pj];    }    	non-compiled	[CE]  incompatible  types	6	None	replace
304	[BUG]  [BUGGY]  oldRes  =  tmpVec  +  2;  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]        AssertionFailedError      [CONTEXT]        }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;      [BUGGY]  oldRes  =  tmpVec  +  2;  [BUGGY]      residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	432	432	2	replace	oldRes  =  tmpVec  +  2;	  oldRes    =    tmpVec    +    1;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	59	None	replace
305	[BUG]  [BUGGY]  tmpVec  =  oldRes[permutation];  [CE]  incompatible  types  [FE]            AssertionFailedError      [CONTEXT]        }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;      [BUGGY]  tmpVec  =  oldRes[permutation];  [BUGGY]      residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	432	432	2	replace	tmpVec  =  oldRes[permutation];	  tmpVec    =    permutation[oldRes];    	non-compiled	[CE]  incompatible  types	83	None	replace
306	[BUG]  [BUGGY]  tmpVec  =  oldRes[oldRes];  [CE]  incompatible  types  [FE]              AssertionFailedError      [CONTEXT]        }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;      [BUGGY]  tmpVec  =  oldRes[oldRes];  [BUGGY]      residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	432	432	2	replace	tmpVec  =  oldRes[oldRes];	  tmpVec    =    permutation[oldRes];    	non-compiled	[CE]  incompatible  types	83	None	replace
307	[BUG]  [BUGGY]  tmpVec  =  permutation[0]  +  1;  [CE]  incompatible  types  [FE]            AssertionFailedError      [CONTEXT]        }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;      [BUGGY]  tmpVec  =  permutation[0]  +  1;  [BUGGY]      residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	432	432	2	replace	tmpVec  =  permutation[0]  +  1;	  tmpVec    =    permutation[0];    	non-compiled	[CE]  incompatible  types	11	None	replace
308	[BUG]  [BUGGY]  tmpVec  =  permutation[1];  [CE]  incompatible  types  [FE]              AssertionFailedError      [CONTEXT]        }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;      [BUGGY]  tmpVec  =  permutation[1];  [BUGGY]      residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	432	432	2	replace	tmpVec  =  permutation[1];	  tmpVec    =    permutation[0];    	non-compiled	[CE]  incompatible  types	11	None	replace
309	[BUG]  [BUGGY]  tmpVec  =  permutation[0]  +  point[pj];  [CE]  cannot  find  symbol  pj  [FE]                AssertionFailedError      [CONTEXT]        }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;      [BUGGY]  tmpVec  =  permutation[0]  +  point[pj];  [BUGGY]      residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	432	432	2	replace	tmpVec  =  permutation[0]  +  point[pj];	  tmpVec    =    permutation[0];    	non-compiled	[CE]  cannot  find  symbol  pj	11	None	replace
310	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]        }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;      [BUGGY]  residuals    =    tmpVec;    tmpVec  =  tmpVec;  oldRes  =  tmpVec;  tmpVec  =  tmpVec;  [BUGGY]      oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	432	432	2	add	residuals        =        tmpVec;        tmpVec    =    tmpVec;    oldRes  =  tmpVec;  tmpVec  =  tmpVec;	  	compilable	  [FE]  AssertionFailedError  	18	10	add
311	[BUG]  [BUGGY]  residuals    =    tmpVec;    tmpVec  =  tmpVec;  oldRes  =  tmpVec;  tmpVec  =  tmpVec;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]        }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;      [BUGGY]  residuals    =    tmpVec;    tmpVec  =  tmpVec;  oldRes  =  tmpVec;  tmpVec  =  tmpVec;  [BUGGY]      oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	432	432	2	replace	residuals        =        tmpVec;        tmpVec    =    tmpVec;    oldRes  =  tmpVec;  tmpVec  =  tmpVec;	  	compilable	  [FE]  AssertionFailedError  	18	10	add
312	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]        }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;      [BUGGY]  residuals    =    tmpVec;    tmpVec  =  tmpVec;  tmpVec  =  tmpVec;  tmpVec  =  tmpVec;  [BUGGY]      oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	432	432	2	add	residuals        =        tmpVec;        tmpVec    =    tmpVec;    tmpVec  =  tmpVec;  tmpVec  =  tmpVec;	  	compilable	  [FE]  AssertionFailedError  	18	2	add
313	[BUG]  [BUGGY]  residuals    =    tmpVec;    tmpVec  =  tmpVec;  tmpVec  =  tmpVec;  tmpVec  =  tmpVec;  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]        }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;      [BUGGY]  residuals    =    tmpVec;    tmpVec  =  tmpVec;  tmpVec  =  tmpVec;  tmpVec  =  tmpVec;  [BUGGY]      oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	432	432	2	replace	residuals        =        tmpVec;        tmpVec    =    tmpVec;    tmpVec  =  tmpVec;  tmpVec  =  tmpVec;	  	compilable	  [FE]  AssertionFailedError  	18	2	add
314	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]        }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;      [BUGGY]  residuals    =    tmpVec;    tmpVec  =  tmpVec;  tmpVec  =  tmpVec;  [BUGGY]      oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	432	432	2	add	residuals        =        tmpVec;        tmpVec    =    tmpVec;    tmpVec  =  tmpVec;	  	compilable	  [FE]  AssertionFailedError  	18	2	add
315	[BUG]  [BUGGY]  residuals    =    tmpVec;    tmpVec  =  tmpVec;  tmpVec  =  tmpVec;  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]        }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;      [BUGGY]  residuals    =    tmpVec;    tmpVec  =  tmpVec;  tmpVec  =  tmpVec;  [BUGGY]      oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	432	432	2	replace	residuals        =        tmpVec;        tmpVec    =    tmpVec;    tmpVec  =  tmpVec;	  	compilable	  [FE]  AssertionFailedError  	18	2	add
316	[BUG]  [BUGGY]  tmpVec  =  preRed;  for(int  j  =  0;  j  <  resolvedCols;  ++j)  {  point[pj]  =  oldX[pj].doubleValue();  }  [CE]  incompatible  types  [FE]                  AssertionFailedError      [CONTEXT]        }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;      [BUGGY]  tmpVec  =  preRed;  for(int  j  =  0;  j  <  resolvedCols;  ++j)  {  point[pj]  =  oldX[pj].doubleValue();  }  [BUGGY]      residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	432	432	2	replace	tmpVec  =  preRed;  for(int  j  =  0;  j  <  resolvedCols;  ++j)  {  point[pj]  =  oldX[pj].doubleValue();  }	  tmpVec    =    previousCost;    for(int    j    =    0;    j    <    resolvedCols;    ++j)    {    point[pj]    =    oldX[pj].doubleValue();    }    	non-compiled	[CE]  incompatible  types	3	None	replace
317	[BUG]  [BUGGY]  tmpVec  =  preresult;  for(int  j  =  0;  j  <  resolvedCols;  ++j)  {  point[pj]  =  oldX[pj].doubleValue();  }  [CE]  cannot  find  symbol  preresult  [FE]                    AssertionFailedError      [CONTEXT]        }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;      [BUGGY]  tmpVec  =  preresult;  for(int  j  =  0;  j  <  resolvedCols;  ++j)  {  point[pj]  =  oldX[pj].doubleValue();  }  [BUGGY]      residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	432	432	2	replace	tmpVec  =  preresult;  for(int  j  =  0;  j  <  resolvedCols;  ++j)  {  point[pj]  =  oldX[pj].doubleValue();  }	  tmpVec    =    previousCost;    for(int    j    =    0;    j    <    resolvedCols;    ++j)    {    point[pj]    =    oldX[pj].doubleValue();    }    	non-compiled	[CE]  cannot  find  symbol  preresult	3	None	replace
318	[BUG]  [BUGGY]  tmpVec  =  prered;  for(int  j  =  0;  j  <  resolvedCols;  ++j)  {  int  oldRes  =  oldX[pj];  }  [CE]  cannot  find  symbol  prered  [FE]                      AssertionFailedError      [CONTEXT]        }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;      [BUGGY]  tmpVec  =  prered;  for(int  j  =  0;  j  <  resolvedCols;  ++j)  {  int  oldRes  =  oldX[pj];  }  [BUGGY]      residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	432	432	2	replace	tmpVec  =  prered;  for(int  j  =  0;  j  <  resolvedCols;  ++j)  {  int  oldRes  =  oldX[pj];  }	  tmpVec    =    previousCost;    for(int    j    =    0;    j    <    resolvedCols;    ++j)    {    int    oldRes    =    oldX[pj];    }    	non-compiled	[CE]  cannot  find  symbol  prered	26	None	replace
319	[BUG]  [BUGGY]  tmpVec  =  prev;  [CE]  cannot  find  symbol  prev  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]        }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;      [BUGGY]  tmpVec  =  prev;  [BUGGY]      oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	432	432	2	replace	tmpVec  =  prev;	  tmpVec    =    oldX;    	non-compiled	[CE]  cannot  find  symbol  prev	35	None	replace
320	[BUG]  [BUGGY]  tmpVec  =  new  VectorialPointValuePair(last);  [CE]  cannot  find  symbol  last  [FE]            AssertionFailedError      [CONTEXT]        }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;      [BUGGY]  tmpVec  =  new  VectorialPointValuePair(last);  [BUGGY]      residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	432	432	2	replace	tmpVec  =  new  VectorialPointValuePair(last);	  tmpVec    =    new    VectorialPointValuePair(currentCost);    	non-compiled	[CE]  cannot  find  symbol  last	119	None	replace
321	[BUG]  [BUGGY]  tmpVec  =  preres;  for(int  j  =  0;  j  <  resolvedCols;  ++j)  {  point[pj]  =  oldX[pj];  }  [CE]  cannot  find  symbol  preres  [FE]              AssertionFailedError      [CONTEXT]        }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;      [BUGGY]  tmpVec  =  preres;  for(int  j  =  0;  j  <  resolvedCols;  ++j)  {  point[pj]  =  oldX[pj];  }  [BUGGY]      residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	432	432	2	replace	tmpVec  =  preres;  for(int  j  =  0;  j  <  resolvedCols;  ++j)  {  point[pj]  =  oldX[pj];  }	  tmpVec    =    previousCost;    for(int    j    =    0;    j    <    resolvedCols;    ++j)    {    point[pj]    =    oldX[pj];    }    	non-compiled	[CE]  cannot  find  symbol  preres	31	None	replace
322	[BUG]  [BUGGY]  tmpVec  =  oldX;  for(int  j  =  0;  j  <  resolvedCols;  ++j)  {  point[pj]  =  oldX[pj];  }  [CE]  cannot  find  symbol  resolvedCols  [FE]                AssertionFailedError      [CONTEXT]        }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;      [BUGGY]  tmpVec  =  oldX;  for(int  j  =  0;  j  <  resolvedCols;  ++j)  {  point[pj]  =  oldX[pj];  }  [BUGGY]      residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	432	432	2	replace	tmpVec  =  oldX;  for(int  j  =  0;  j  <  resolvedCols;  ++j)  {  point[pj]  =  oldX[pj];  }	  tmpVec    =    previousCost;    for(int    j    =    0;    j    <    resolvedCols;    ++j)    {    point[pj]    =    oldX[pj];    }    	non-compiled	[CE]  cannot  find  symbol  resolvedCols	31	None	replace
323	[BUG]  [BUGGY]  oldRes  =  tmpVec;  new  VectorialPointValuePair(oldX,  oldRes,  tmpVec,  cost);  [CE]  no  suitable  constructor  found  for  VectorialPointValuePair(double[],double[],double[],double)  [FE]              AssertionFailedError      [CONTEXT]        }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;      [BUGGY]  oldRes  =  tmpVec;  new  VectorialPointValuePair(oldX,  oldRes,  tmpVec,  cost);  [BUGGY]      residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	432	432	2	replace	oldRes  =  tmpVec;  new  VectorialPointValuePair(oldX,  oldRes,  tmpVec,  cost);	          oldRes    =    tmpVec;    new    VectorialPointValuePair(oldX,    oldRes,    tmpVec);    	non-compiled	[CE]  no  suitable  constructor  found  for  VectorialPointValuePair(double[],double[],double[],double)	42	None	replace
324	[BUG]  [BUGGY]  oldRes  =  tmpVec;  tmpVec  =  tmpVec  +  1;  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]    AssertionFailedError    [CONTEXT]        }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;      [BUGGY]  oldRes  =  tmpVec;  tmpVec  =  tmpVec  +  1;  [BUGGY]      residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	432	432	2	replace	oldRes  =  tmpVec;  tmpVec  =  tmpVec  +  1;	          oldRes    =    tmpVec;    tmpVec    =    tmpVec;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	40	None	replace
325	[BUG]  [BUGGY]  tmpVec  =  preres;  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  point[j]  =  oldX[pj];  }  [CE]  cannot  find  symbol  preres  [FE]                  AssertionFailedError      [CONTEXT]        }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;      [BUGGY]  tmpVec  =  preres;  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  point[j]  =  oldX[pj];  }  [BUGGY]      residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	432	432	2	replace	tmpVec  =  preres;  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  point[j]  =  oldX[pj];  }	  tmpVec    =    previousCost;    for(int    j    =    0;    j    <    solvedCols;    ++j)    {    point[j]    =    oldX[pj];    }    	non-compiled	[CE]  cannot  find  symbol  preres	63	None	replace
326	[BUG]  [BUGGY]  previousCost  =  previousCost;  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  int  oldRes  =  oldX[pj];  }  [CE]  variable  oldRes  is  already  defined  in  method  doOptimize()  [FE]                    AssertionFailedError      [CONTEXT]        }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;      [BUGGY]  previousCost  =  previousCost;  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  int  oldRes  =  oldX[pj];  }  [BUGGY]      residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	432	432	2	replace	previousCost  =  previousCost;  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  int  oldRes  =  oldX[pj];  }	  if(tmpVec!=    preRed)    {    cost    =    previousCost;    for(int    j    =    0;    j    <    solvedCols;    ++j)    {    int    oldRes    =    oldX[pj];    }    	non-compiled	[CE]  variable  oldRes  is  already  defined  in  method  doOptimize()	126	None	replace
327	[BUG]  [BUGGY]  if(tmpVec!=  preRed)  {  cost  =  previousCost;  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  oldRes  =  oldX[pj];  }  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]        }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;      [BUGGY]  if(tmpVec!=  preRed)  {  cost  =  previousCost;  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  oldRes  =  oldX[pj];  }  [BUGGY]      residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	432	432	2	replace	if(tmpVec!=  preRed)  {  cost  =  previousCost;  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  oldRes  =  oldX[pj];  }	  if(tmpVec!=    preRed)    {    cost    =    previousCost;    for(int    j    =    0;    j    <    solvedCols;    ++j)    {    int    oldRes    =    oldX[pj];    }    	non-compiled	[CE]  illegal  start  of  expression	126	None	replace
328	[BUG]  [BUGGY]  if(tmpVec!=  preRed)  {  cost  =  previousCost;  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  int  oldRes  =  oldX[oldRes];  }  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]        }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;      [BUGGY]  if(tmpVec!=  preRed)  {  cost  =  previousCost;  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  int  oldRes  =  oldX[oldRes];  }  [BUGGY]      residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	432	432	2	replace	if(tmpVec!=  preRed)  {  cost  =  previousCost;  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  int  oldRes  =  oldX[oldRes];  }	  if(tmpVec!=    preRed)    {    cost    =    previousCost;    for(int    j    =    0;    j    <    solvedCols;    ++j)    {    int    oldRes    =    oldX[pj];    }    	non-compiled	[CE]  illegal  start  of  expression	126	None	replace
329	[BUG]  [BUGGY]  previousCost  =  prevCost;  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  permutation[j]  =  oldX[pj];  }  [CE]  cannot  find  symbol  prevCost  [FE]              AssertionFailedError      [CONTEXT]        }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;      [BUGGY]  previousCost  =  prevCost;  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  permutation[j]  =  oldX[pj];  }  [BUGGY]      residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	432	432	2	replace	previousCost  =  prevCost;  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  permutation[j]  =  oldX[pj];  }	  if(tmpVec!=    previousCost)    {    cost    =    prevCost;    for(int    j    =    0;    j    <    solvedCols;    ++j)    {    permutation[j]    =    oldX[pj];    }    	non-compiled	[CE]  cannot  find  symbol  prevCost	72	None	replace
330	[BUG]  [BUGGY]  tmpVec  =  preres;  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  point[pj]  =  oldX[pj];  }  [CE]  cannot  find  symbol  preres  [FE]            AssertionFailedError      [CONTEXT]        }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;      [BUGGY]  tmpVec  =  preres;  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  point[pj]  =  oldX[pj];  }  [BUGGY]      residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	432	432	2	replace	tmpVec  =  preres;  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  point[pj]  =  oldX[pj];  }	  tmpVec    =    previousCost;    for(int    j    =    0;    j    <    solvedCols;    ++j)    {    point[pj]    =    oldX[pj];    }    	non-compiled	[CE]  cannot  find  symbol  preres	30	None	replace
331	[BUG]  [BUGGY]  if(tmpVec!=  null)  {  oldRes  =  tmpVec;  oldRes  =  tmpVec;  }  else  {  cost  =  new  VectorialPointValuePair();  }  [CE]  no  suitable  constructor  found  for  VectorialPointValuePair()  [FE]    AssertionFailedError    [CONTEXT]        }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;      [BUGGY]  if(tmpVec!=  null)  {  oldRes  =  tmpVec;  oldRes  =  tmpVec;  }  else  {  cost  =  new  VectorialPointValuePair();  }  [BUGGY]      residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	432	432	2	replace	if(tmpVec!=  null)  {  oldRes  =  tmpVec;  oldRes  =  tmpVec;  }  else  {  cost  =  new  VectorialPointValuePair();  }	          oldRes    =    tmpVec;    oldRes    =    tmpVec;    	non-compiled	[CE]  no  suitable  constructor  found  for  VectorialPointValuePair()	38	None	replace
332	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]        }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;      [BUGGY]  if(tmpVec!=  null)  {  oldRes  =  tmpVec;  oldRes  =  tmpVec;  }  [BUGGY]      residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	432	432	2	add	if(tmpVec!=  null)  {  oldRes  =  tmpVec;  oldRes  =  tmpVec;  }	          oldRes    =    tmpVec;    oldRes    =    tmpVec;    	compilable	  [FE]  AssertionFailedError  	38	10	replace
333	[BUG]  [BUGGY]  if(tmpVec!=  null)  {  oldRes  =  tmpVec;  oldRes  =  tmpVec;  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]        }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;      [BUGGY]  if(tmpVec!=  null)  {  oldRes  =  tmpVec;  oldRes  =  tmpVec;  }  [BUGGY]      residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	432	432	2	replace	if(tmpVec!=  null)  {  oldRes  =  tmpVec;  oldRes  =  tmpVec;  }	          oldRes    =    tmpVec;    oldRes    =    tmpVec;    	compilable	  [FE]  AssertionFailedError  	38	10	replace
334	[BUG]  [BUGGY]  tmpVec  =  Math.max(remainderCost,  previousCost);  [CE]  cannot  find  symbol  remainderCost  [FE]                    AssertionFailedError      [CONTEXT]        }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;      [BUGGY]  tmpVec  =  Math.max(remainderCost,  previousCost);  [BUGGY]      residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	432	432	2	replace	tmpVec  =  Math.max(remainderCost,  previousCost);	  tmpVec    =    Math.max(result,    previousCost);    	non-compiled	[CE]  cannot  find  symbol  remainderCost	54	None	replace
335	[BUG]  [BUGGY]  previousCost  =  permutation[j].remainder;  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  point[j]  =  oldX[pj];  }  [CE]  cannot  find  symbol  j  [FE]                  AssertionFailedError      [CONTEXT]        }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;      [BUGGY]  previousCost  =  permutation[j].remainder;  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  point[j]  =  oldX[pj];  }  [BUGGY]      residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	432	432	2	replace	previousCost  =  permutation[j].remainder;  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  point[j]  =  oldX[pj];  }	  if(tmpVec!=    previousCost)    {    cost    =    permutation[j].remainder;    for(int    j    =    0;    j    <    solvedCols;    ++j)    {    point[j]    =    oldX[pj];    }    	non-compiled	[CE]  cannot  find  symbol  j	115	None	replace
336	[BUG]  [BUGGY]  results  =  new  VectorialPointValuePair(oldX,  oldRes,  cost);  [CE]  cannot  find  symbol  results  [FE]                AssertionFailedError      [CONTEXT]        }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;      [BUGGY]  results  =  new  VectorialPointValuePair(oldX,  oldRes,  cost);  [BUGGY]      oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	432	432	2	replace	results  =  new  VectorialPointValuePair(oldX,  oldRes,  cost);	  results    =    new    VectorialPointValuePair(oldX,    oldRes);    	non-compiled	[CE]  cannot  find  symbol  results	79	None	replace
337	[BUG]  [BUGGY]  results  =  new  VectorialPointValuePair(oldX,  tmpVec);  [CE]  cannot  find  symbol  results  [FE]                  AssertionFailedError      [CONTEXT]        }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;      [BUGGY]  results  =  new  VectorialPointValuePair(oldX,  tmpVec);  [BUGGY]      oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	432	432	2	replace	results  =  new  VectorialPointValuePair(oldX,  tmpVec);	  results    =    new    VectorialPointValuePair(oldX,    oldRes);    	non-compiled	[CE]  cannot  find  symbol  results	79	None	replace
338	[BUG]  [BUGGY]  tmpVec  =  new  VectorialPointValuePair(previous,  oldX);  [CE]  no  suitable  constructor  found  for  VectorialPointValuePair(VectorialPointValuePair,double[])  [FE]              AssertionFailedError      [CONTEXT]        }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;      [BUGGY]  tmpVec  =  new  VectorialPointValuePair(previous,  oldX);  [BUGGY]      residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	432	432	2	replace	tmpVec  =  new  VectorialPointValuePair(previous,  oldX);	  tmpVec    =    new    VectorialPointValuePair(oldX);    	non-compiled	[CE]  no  suitable  constructor  found  for  VectorialPointValuePair(VectorialPointValuePair,double[])	74	None	replace
339	[BUG]  [BUGGY]  tmpVec  =  new  VectorialPointValuePair(point,  oldX);  [CE]  incompatible  types  [FE]                AssertionFailedError      [CONTEXT]        }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;      [BUGGY]  tmpVec  =  new  VectorialPointValuePair(point,  oldX);  [BUGGY]      residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	432	432	2	replace	tmpVec  =  new  VectorialPointValuePair(point,  oldX);	  tmpVec    =    new    VectorialPointValuePair(oldX);    	non-compiled	[CE]  incompatible  types	74	None	replace
340	[BUG]  [BUGGY]  tmpVec  =  new  VectorialPointValuePair(oldX,  prev);  [CE]  cannot  find  symbol  prev  [FE]                  AssertionFailedError      [CONTEXT]        }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;      [BUGGY]  tmpVec  =  new  VectorialPointValuePair(oldX,  prev);  [BUGGY]      residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	432	432	2	replace	tmpVec  =  new  VectorialPointValuePair(oldX,  prev);	  tmpVec    =    new    VectorialPointValuePair(oldX);    	non-compiled	[CE]  cannot  find  symbol  prev	74	None	replace
341	[BUG]  [BUGGY]  tmpVec  =  new  VectorialPointValuePair(point,  preRed);  [CE]  no  suitable  constructor  found  for  VectorialPointValuePair(double[],double)  [FE]            AssertionFailedError      [CONTEXT]        }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;      [BUGGY]  tmpVec  =  new  VectorialPointValuePair(point,  preRed);  [BUGGY]      residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	432	432	2	replace	tmpVec  =  new  VectorialPointValuePair(point,  preRed);	  tmpVec    =    new    VectorialPointValuePair(previousCost,    point);    	non-compiled	[CE]  no  suitable  constructor  found  for  VectorialPointValuePair(double[],double)	57	None	replace
342	[BUG]  [BUGGY]  tmpVec  =  new  VectorialPointValuePair(lastX,  previousCost,  point);  [CE]  cannot  find  symbol  lastX  [FE]              AssertionFailedError      [CONTEXT]        }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;      [BUGGY]  tmpVec  =  new  VectorialPointValuePair(lastX,  previousCost,  point);  [BUGGY]      residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	432	432	2	replace	tmpVec  =  new  VectorialPointValuePair(lastX,  previousCost,  point);	  tmpVec    =    new    VectorialPointValuePair(previousCost,    point);    	non-compiled	[CE]  cannot  find  symbol  lastX	57	None	replace
343	[BUG]  [BUGGY]  tmpVec  =  prered;  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  int  oldRes  =  oldX[pj];  }  [CE]  cannot  find  symbol  prered  [FE]                    AssertionFailedError      [CONTEXT]        }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;      [BUGGY]  tmpVec  =  prered;  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  int  oldRes  =  oldX[pj];  }  [BUGGY]      residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	432	432	2	replace	tmpVec  =  prered;  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  int  oldRes  =  oldX[pj];  }	  tmpVec    =    previousCost;    for(int    j    =    0;    j    <    solvedCols;    ++j)    {    int    oldRes    =    oldX[pj];    }    	non-compiled	[CE]  cannot  find  symbol  prered	25	None	replace
344	[BUG]  [BUGGY]  tmpVec  =  new  VectorialPointValuePair(previousCost,  pj);  [CE]  cannot  find  symbol  pj  [FE]            AssertionFailedError      [CONTEXT]        }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;      [BUGGY]  tmpVec  =  new  VectorialPointValuePair(previousCost,  pj);  [BUGGY]      residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	432	432	2	replace	tmpVec  =  new  VectorialPointValuePair(previousCost,  pj);	  tmpVec    =    new    VectorialPointValuePair(lastX,    previousCost);    	non-compiled	[CE]  cannot  find  symbol  pj	102	None	replace
345	[BUG]  [BUGGY]  result  =  tmpVec  +  1;  [CE]  cannot  find  symbol  result  [FE]                AssertionFailedError      [CONTEXT]        }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;      [BUGGY]  result  =  tmpVec  +  1;  [BUGGY]      oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	432	432	2	replace	result  =  tmpVec  +  1;	  result    =    tmpVec;    	non-compiled	[CE]  cannot  find  symbol  result	50	None	replace
346	[BUG]  [BUGGY]  value  =  value;  [CE]  cannot  find  symbol  value  [FE]                AssertionFailedError      [CONTEXT]        }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;      [BUGGY]  value  =  value;  [BUGGY]      oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	432	432	2	replace	value  =  value;	  value    =    tmpVec;    	non-compiled	[CE]  cannot  find  symbol  value	70	None	replace
347	[BUG]  [BUGGY]  if(tmpVec!=  previousCost)  {  cost  =  newRes;  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  permutation[j]  =  oldX[pj];  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]        }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;      [BUGGY]  if(tmpVec!=  previousCost)  {  cost  =  newRes;  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  permutation[j]  =  oldX[pj];  }  [BUGGY]      residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	432	432	2	replace	if(tmpVec!=  previousCost)  {  cost  =  newRes;  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  permutation[j]  =  oldX[pj];  }	  if(tmpVec!=    previousCost)    {    cost    =    oldRes;    for(int    j    =    0;    j    <    solvedCols;    ++j)    {    permutation[j]    =    oldX[pj];    }    	non-compiled	[CE]  illegal  start  of  expression	73	None	replace
348	[BUG]  [BUGGY]  luate(previousCost,  tmpVec))  {  cost  =  oldRes;  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  permutation[j]  =  oldX[pj];  }  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]        }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;      [BUGGY]  luate(previousCost,  tmpVec))  {  cost  =  oldRes;  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  permutation[j]  =  oldX[pj];  }  [BUGGY]      residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	432	432	2	replace	luate(previousCost,  tmpVec))  {  cost  =  oldRes;  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  permutation[j]  =  oldX[pj];  }	  if(tmpVec!=    previousCost)    {    cost    =    oldRes;    for(int    j    =    0;    j    <    solvedCols;    ++j)    {    permutation[j]    =    oldX[pj];    }    	non-compiled	[CE]  ';'  expected	73	None	replace
349	[BUG]  [BUGGY]  tmpVec  =  new  VectorialPointValuePair(currentCost,  oldX,  cost);  [CE]  cannot  find  symbol  currentCost  [FE]                AssertionFailedError      [CONTEXT]        }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;      [BUGGY]  tmpVec  =  new  VectorialPointValuePair(currentCost,  oldX,  cost);  [BUGGY]      residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	432	432	2	replace	tmpVec  =  new  VectorialPointValuePair(currentCost,  oldX,  cost);	  tmpVec    =    new    VectorialPointValuePair(previousCost,    cost,    oldX);    	non-compiled	[CE]  cannot  find  symbol  currentCost	116	None	replace
350	[BUG]  [BUGGY]  tmpVec  =  cost[oldRes];  [CE]  incompatible  types  [FE]              AssertionFailedError      [CONTEXT]        }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;      [BUGGY]  tmpVec  =  cost[oldRes];  [BUGGY]      residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	432	432	2	replace	tmpVec  =  cost[oldRes];	  tmpVec    =    cost[j];    	non-compiled	[CE]  incompatible  types	113	None	replace
351	[BUG]  [BUGGY]  tmpVec  =  new  VectorialPointValuePair(oldX,  previousCost,  cost);  [CE]  no  suitable  constructor  found  for  VectorialPointValuePair(double[],double,double)  [FE]                AssertionFailedError      [CONTEXT]        }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;      [BUGGY]  tmpVec  =  new  VectorialPointValuePair(oldX,  previousCost,  cost);  [BUGGY]      residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	432	432	2	replace	tmpVec  =  new  VectorialPointValuePair(oldX,  previousCost,  cost);	  tmpVec    =    new    VectorialPointValuePair(previousCost,    oldX,    cost);    	non-compiled	[CE]  no  suitable  constructor  found  for  VectorialPointValuePair(double[],double,double)	13	None	replace
352	[BUG]  [BUGGY]  tmpVec  =  new  VectorialPointValuePair(oldX,  preRed,  cost);  [CE]  no  suitable  constructor  found  for  VectorialPointValuePair(double[],double,double)  [FE]                  AssertionFailedError      [CONTEXT]        }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;      [BUGGY]  tmpVec  =  new  VectorialPointValuePair(oldX,  preRed,  cost);  [BUGGY]      residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	432	432	2	replace	tmpVec  =  new  VectorialPointValuePair(oldX,  preRed,  cost);	  tmpVec    =    new    VectorialPointValuePair(previousCost,    oldX,    cost);    	non-compiled	[CE]  no  suitable  constructor  found  for  VectorialPointValuePair(double[],double,double)	13	None	replace
353	[BUG]  [BUGGY]  tmpVec  =  new  VectorialPointValuePair(lastX,  oldRes,  cost);  [CE]  cannot  find  symbol  lastX  [FE]                AssertionFailedError      [CONTEXT]        }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;      [BUGGY]  tmpVec  =  new  VectorialPointValuePair(lastX,  oldRes,  cost);  [BUGGY]      residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	432	432	2	replace	tmpVec  =  new  VectorialPointValuePair(lastX,  oldRes,  cost);	  tmpVec    =    new    VectorialPointValuePair(lastX,    previousCost,    cost);    	non-compiled	[CE]  cannot  find  symbol  lastX	88	None	replace
354	[BUG]  [BUGGY]  tmpVec  =  prered;  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  points[pj]  =  oldX[pj];  }  [CE]  cannot  find  symbol  prered  [FE]                  AssertionFailedError      [CONTEXT]        }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;      [BUGGY]  tmpVec  =  prered;  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  points[pj]  =  oldX[pj];  }  [BUGGY]      residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	432	432	2	replace	tmpVec  =  prered;  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  points[pj]  =  oldX[pj];  }	  tmpVec    =    previousCost;    for(int    j    =    0;    j    <    solvedCols;    ++j)    {    points[pj]    =    oldX[pj];    }    	non-compiled	[CE]  cannot  find  symbol  prered	33	None	replace
355	[BUG]  [BUGGY]  tmpVec  =  permutation.length;  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  points[pj]  =  oldX[pj];  }  [CE]  incompatible  types  [FE]                    AssertionFailedError      [CONTEXT]        }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;      [BUGGY]  tmpVec  =  permutation.length;  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  points[pj]  =  oldX[pj];  }  [BUGGY]      residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	432	432	2	replace	tmpVec  =  permutation.length;  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  points[pj]  =  oldX[pj];  }	  tmpVec    =    previousCost;    for(int    j    =    0;    j    <    solvedCols;    ++j)    {    points[pj]    =    oldX[pj];    }    	non-compiled	[CE]  incompatible  types	33	None	replace
356	[BUG]  [BUGGY]  tmpVec  =  preres;  for(int  j  =  0;  j  <  resolvedCols;  ++j)  {  permutation[j]  =  oldX[pj];  }  [CE]  cannot  find  symbol  preres  [FE]                AssertionFailedError      [CONTEXT]        }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;      [BUGGY]  tmpVec  =  preres;  for(int  j  =  0;  j  <  resolvedCols;  ++j)  {  permutation[j]  =  oldX[pj];  }  [BUGGY]      residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	432	432	2	replace	tmpVec  =  preres;  for(int  j  =  0;  j  <  resolvedCols;  ++j)  {  permutation[j]  =  oldX[pj];  }	  tmpVec    =    previousCost;    for(int    j    =    0;    j    <    resolvedCols;    ++j)    {    permutation[j]    =    oldX[pj];    }    	non-compiled	[CE]  cannot  find  symbol  preres	7	None	replace
357	[BUG]  [BUGGY]  tmpVec  =  prered;  for(int  j  =  0;  j  <  solveCols;  ++j)  {  int  oldRes  =  oldX[pj];  }  [CE]  cannot  find  symbol  prered  [FE]                        AssertionFailedError      [CONTEXT]        }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;      [BUGGY]  tmpVec  =  prered;  for(int  j  =  0;  j  <  solveCols;  ++j)  {  int  oldRes  =  oldX[pj];  }  [BUGGY]      residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	432	432	2	replace	tmpVec  =  prered;  for(int  j  =  0;  j  <  solveCols;  ++j)  {  int  oldRes  =  oldX[pj];  }	  tmpVec    =    previousCost;    for(int    j    =    0;    j    <    solveCols;    ++j)    {    int    oldRes    =    oldX[pj];    }    	non-compiled	[CE]  cannot  find  symbol  prered	27	None	replace
358	[BUG]  [BUGGY]  tmpVec  =  solveCols;  for(int  j  =  0;  j  <  previousCost;  ++j)  {  int  oldRes  =  oldX[pj];  }  [CE]  cannot  find  symbol  solveCols  [FE]                          AssertionFailedError      [CONTEXT]        }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;      [BUGGY]  tmpVec  =  solveCols;  for(int  j  =  0;  j  <  previousCost;  ++j)  {  int  oldRes  =  oldX[pj];  }  [BUGGY]      residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	432	432	2	replace	tmpVec  =  solveCols;  for(int  j  =  0;  j  <  previousCost;  ++j)  {  int  oldRes  =  oldX[pj];  }	  tmpVec    =    previousCost;    for(int    j    =    0;    j    <    solveCols;    ++j)    {    int    oldRes    =    oldX[pj];    }    	non-compiled	[CE]  cannot  find  symbol  solveCols	27	None	replace
359	[BUG]  [BUGGY]  tmpVec  =  permutation[p];  [CE]  cannot  find  symbol  p  [FE]                  AssertionFailedError      [CONTEXT]        }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;      [BUGGY]  tmpVec  =  permutation[p];  [BUGGY]      residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	432	432	2	replace	tmpVec  =  permutation[p];	  tmpVec    =    permutation[point];    	non-compiled	[CE]  cannot  find  symbol  p	71	None	replace
360	[BUG]  [BUGGY]  tmpVec  =  new  VectorialPointValuePair(j,  previousCost,  cost);  [CE]  cannot  find  symbol  j  [FE]                    AssertionFailedError      [CONTEXT]        }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;      [BUGGY]  tmpVec  =  new  VectorialPointValuePair(j,  previousCost,  cost);  [BUGGY]      residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	432	432	2	replace	tmpVec  =  new  VectorialPointValuePair(j,  previousCost,  cost);	  tmpVec    =    new    VectorialPointValuePair(pj,    previousCost,    cost);    	non-compiled	[CE]  cannot  find  symbol  j	90	None	replace
361	[BUG]  [BUGGY]  if(previousCost!=  tmpVec)  {  cost  =  permutation[j];  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  permutation[j]  =  oldX[pj];  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]        }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;      [BUGGY]  if(previousCost!=  tmpVec)  {  cost  =  permutation[j];  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  permutation[j]  =  oldX[pj];  }  [BUGGY]      residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	432	432	2	replace	if(previousCost!=  tmpVec)  {  cost  =  permutation[j];  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  permutation[j]  =  oldX[pj];  }	  if(tmpVec!=    previousCost)    {    cost    =    permutation[j];    for(int    j    =    0;    j    <    solvedCols;    ++j)    {    permutation[j]    =    oldX[pj];    }    	non-compiled	[CE]  illegal  start  of  expression	124	None	replace
362	[BUG]  [BUGGY]  if(previousCost!=  tmpVec)  {  cost  =  oldRes[j];  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  permutation[j]  =  oldX[pj];  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]        }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;      [BUGGY]  if(previousCost!=  tmpVec)  {  cost  =  oldRes[j];  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  permutation[j]  =  oldX[pj];  }  [BUGGY]      residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	432	432	2	replace	if(previousCost!=  tmpVec)  {  cost  =  oldRes[j];  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  permutation[j]  =  oldX[pj];  }	  if(tmpVec!=    previousCost)    {    cost    =    permutation[j];    for(int    j    =    0;    j    <    solvedCols;    ++j)    {    permutation[j]    =    oldX[pj];    }    	non-compiled	[CE]  illegal  start  of  expression	124	None	replace
363	[BUG]  [BUGGY]  if(previousCost!=  tmpVec)  {  cost  =  oldX[j];  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  permutation[j]  =  oldX[pj];  }  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]        }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;      [BUGGY]  if(previousCost!=  tmpVec)  {  cost  =  oldX[j];  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  permutation[j]  =  oldX[pj];  }  [BUGGY]      residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	432	432	2	replace	if(previousCost!=  tmpVec)  {  cost  =  oldX[j];  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  permutation[j]  =  oldX[pj];  }	  if(tmpVec!=    previousCost)    {    cost    =    permutation[j];    for(int    j    =    0;    j    <    solvedCols;    ++j)    {    permutation[j]    =    oldX[pj];    }    	non-compiled	[CE]  illegal  start  of  expression	124	None	replace
364	[BUG]  [BUGGY]  luate(previousCost,  tmpVec))  {  cost  =  permutation[j];  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  permutation[j]  =  oldX[pj];  }  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]        }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;      [BUGGY]  luate(previousCost,  tmpVec))  {  cost  =  permutation[j];  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  permutation[j]  =  oldX[pj];  }  [BUGGY]      residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	432	432	2	replace	luate(previousCost,  tmpVec))  {  cost  =  permutation[j];  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  permutation[j]  =  oldX[pj];  }	  if(tmpVec!=    previousCost)    {    cost    =    permutation[j];    for(int    j    =    0;    j    <    solvedCols;    ++j)    {    permutation[j]    =    oldX[pj];    }    	non-compiled	[CE]  ';'  expected	124	None	replace
365	[BUG]  [BUGGY]  if(tmpVec!=  previousCost)  {  cost  =  oldRes[j];  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  point[pj]  =  oldX[pj];  }  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]        }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;      [BUGGY]  if(tmpVec!=  previousCost)  {  cost  =  oldRes[j];  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  point[pj]  =  oldX[pj];  }  [BUGGY]      residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	432	432	2	replace	if(tmpVec!=  previousCost)  {  cost  =  oldRes[j];  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  point[pj]  =  oldX[pj];  }	  if(tmpVec!=    previousCost)    {    cost    =    permutation[j];    for(int    j    =    0;    j    <    solvedCols;    ++j)    {    point[pj]    =    oldX[pj];    }    	non-compiled	[CE]  illegal  start  of  expression	100	None	replace
366	[BUG]  [BUGGY]  luate(previousCost,  tmpVec))  {  cost  =  permutation[j];  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  point[pj]  =  oldX[pj];  }  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]        }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;      [BUGGY]  luate(previousCost,  tmpVec))  {  cost  =  permutation[j];  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  point[pj]  =  oldX[pj];  }  [BUGGY]      residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	432	432	2	replace	luate(previousCost,  tmpVec))  {  cost  =  permutation[j];  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  point[pj]  =  oldX[pj];  }	  if(tmpVec!=    previousCost)    {    cost    =    permutation[j];    for(int    j    =    0;    j    <    solvedCols;    ++j)    {    point[pj]    =    oldX[pj];    }    	non-compiled	[CE]  ';'  expected	100	None	replace
367	[BUG]  [BUGGY]  if(tmpVec!=  previousCost)  {  cost  =  oldX[j];  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  point[pj]  =  oldX[pj];  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]        }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;      [BUGGY]  if(tmpVec!=  previousCost)  {  cost  =  oldX[j];  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  point[pj]  =  oldX[pj];  }  [BUGGY]      residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	432	432	2	replace	if(tmpVec!=  previousCost)  {  cost  =  oldX[j];  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  point[pj]  =  oldX[pj];  }	  if(tmpVec!=    previousCost)    {    cost    =    permutation[j];    for(int    j    =    0;    j    <    solvedCols;    ++j)    {    point[pj]    =    oldX[pj];    }    	non-compiled	[CE]  illegal  start  of  expression	100	None	replace
368	[BUG]  [BUGGY]  tmpVec  =  new  VectorialPointValuePair(j,  previousCost);  [CE]  cannot  find  symbol  j  [FE]              AssertionFailedError      [CONTEXT]        }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;      [BUGGY]  tmpVec  =  new  VectorialPointValuePair(j,  previousCost);  [BUGGY]      residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	432	432	2	replace	tmpVec  =  new  VectorialPointValuePair(j,  previousCost);	  tmpVec    =    new    VectorialPointValuePair(pj,    previousCost);    	non-compiled	[CE]  cannot  find  symbol  j	58	None	replace
369	[BUG]  [BUGGY]  tmpVec  =  new  VectorialPointValuePair(last,  previousCost);  [CE]  cannot  find  symbol  last  [FE]                AssertionFailedError      [CONTEXT]        }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;      [BUGGY]  tmpVec  =  new  VectorialPointValuePair(last,  previousCost);  [BUGGY]      residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	432	432	2	replace	tmpVec  =  new  VectorialPointValuePair(last,  previousCost);	  tmpVec    =    new    VectorialPointValuePair(pj,    previousCost);    	non-compiled	[CE]  cannot  find  symbol  last	58	None	replace
370	[BUG]  [BUGGY]  tmpVec  -=  oldRes,  cost;  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]        }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;      [BUGGY]  tmpVec  -=  oldRes,  cost;  [BUGGY]      oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	432	432	2	replace	tmpVec  -=  oldRes,  cost;	  tmpVec    -=    oldRes;    	non-compiled	[CE]  ';'  expected	44	None	replace
371	[BUG]  [BUGGY]  tmpVec  =  new  VectorialPointValuePair(oldX,  oldRes,  value);  [CE]  cannot  find  symbol  value  [FE]              AssertionFailedError      [CONTEXT]        }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;      [BUGGY]  tmpVec  =  new  VectorialPointValuePair(oldX,  oldRes,  value);  [BUGGY]      residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	432	432	2	replace	tmpVec  =  new  VectorialPointValuePair(oldX,  oldRes,  value);	  tmpVec    =    new    VectorialPointValuePair(oldX,    oldRes);    	non-compiled	[CE]  cannot  find  symbol  value	118	None	replace
372	[BUG]  [BUGGY]  tmpVec  =  new  VectorialPointValuePair(point,  oldX,  previousCost);  [CE]  no  suitable  constructor  found  for  VectorialPointValuePair(double[],double[],double)  [FE]              AssertionFailedError      [CONTEXT]        }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;      [BUGGY]  tmpVec  =  new  VectorialPointValuePair(point,  oldX,  previousCost);  [BUGGY]      residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	432	432	2	replace	tmpVec  =  new  VectorialPointValuePair(point,  oldX,  previousCost);	  tmpVec    =    new    VectorialPointValuePair(point,    previousCost);    	non-compiled	[CE]  no  suitable  constructor  found  for  VectorialPointValuePair(double[],double[],double)	103	None	replace
373	[BUG]  [BUGGY]  tmpVec  =  new  VectorialPointValuePair(point,  cost);  [CE]  no  suitable  constructor  found  for  VectorialPointValuePair(double[],double)  [FE]                AssertionFailedError      [CONTEXT]        }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;      [BUGGY]  tmpVec  =  new  VectorialPointValuePair(point,  cost);  [BUGGY]      residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	432	432	2	replace	tmpVec  =  new  VectorialPointValuePair(point,  cost);	  tmpVec    =    new    VectorialPointValuePair(point,    previousCost);    	non-compiled	[CE]  no  suitable  constructor  found  for  VectorialPointValuePair(double[],double)	103	None	replace
374	[BUG]  [BUGGY]  residuals  =  tmpVec  +  3;  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]        AssertionFailedError      [CONTEXT]        }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;      [BUGGY]  residuals  =  tmpVec  +  3;  [BUGGY]      oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	432	432	2	replace	residuals  =  tmpVec  +  3;	  residuals    =    tmpVec    +    1;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	1	None	replace
375	[BUG]  [BUGGY]  residuals  =  oldRes  +  1;  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]          AssertionFailedError      [CONTEXT]        }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;      [BUGGY]  residuals  =  oldRes  +  1;  [BUGGY]      oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	432	432	2	replace	residuals  =  oldRes  +  1;	  residuals    =    tmpVec    +    1;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	1	None	replace
376	[BUG]  [BUGGY]  tmpVec  =  oldRes;  if(oldRes!=  null)  {  tmpVec  =  oldRes;  }  else  {  cost  =  previousCost;  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  value[j]  =  value[j];  }  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]        }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;      [BUGGY]  tmpVec  =  oldRes;  if(oldRes!=  null)  {  tmpVec  =  oldRes;  }  else  {  cost  =  previousCost;  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  value[j]  =  value[j];  }  [BUGGY]      oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	432	432	2	replace	tmpVec    =    oldRes;    if(oldRes!=  null)  {  tmpVec  =  oldRes;  }  else  {  cost  =  previousCost;  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  value[j]  =  value[j];  }	  	non-compiled	[CE]  illegal  start  of  expression	47	None	add
377	[BUG]  [BUGGY]  tmpVec  =  oldRes;  if(oldRes!=  null)  {  tmpVec  =  oldRes;  }  else  {  cost  =  previousCost;  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  point[pj]  =  point[pj];  }  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]        }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;      [BUGGY]  tmpVec  =  oldRes;  if(oldRes!=  null)  {  tmpVec  =  oldRes;  }  else  {  cost  =  previousCost;  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  point[pj]  =  point[pj];  }  [BUGGY]      oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	432	432	2	replace	tmpVec    =    oldRes;    if(oldRes!=  null)  {  tmpVec  =  oldRes;  }  else  {  cost  =  previousCost;  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  point[pj]  =  point[pj];  }	  	non-compiled	[CE]  illegal  start  of  expression	47	None	add
378	[BUG]  [BUGGY]  tmpVec  =  oldRes;  if(oldRes!=  null)  {  tmpVec  =  oldRes;  }  else  {  cost  =  previousCost;  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  point[pj]  =  oldX[j];  }  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]        }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;      [BUGGY]  tmpVec  =  oldRes;  if(oldRes!=  null)  {  tmpVec  =  oldRes;  }  else  {  cost  =  previousCost;  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  point[pj]  =  oldX[j];  }  [BUGGY]      oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	432	432	2	replace	tmpVec    =    oldRes;    if(oldRes!=  null)  {  tmpVec  =  oldRes;  }  else  {  cost  =  previousCost;  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  point[pj]  =  oldX[j];  }	  	non-compiled	[CE]  illegal  start  of  expression	47	None	add
379	[BUG]  [BUGGY]  tmpVec  =  oldRes;  if(oldRes!=  null)  {  tmpVec  =  oldRes;  }  else  {  cost  =  previousCost;  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  point[pj]  =  point[j];  }  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]        }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;      [BUGGY]  tmpVec  =  oldRes;  if(oldRes!=  null)  {  tmpVec  =  oldRes;  }  else  {  cost  =  previousCost;  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  point[pj]  =  point[j];  }  [BUGGY]      oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	432	432	2	replace	tmpVec    =    oldRes;    if(oldRes!=  null)  {  tmpVec  =  oldRes;  }  else  {  cost  =  previousCost;  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  point[pj]  =  point[j];  }	  	non-compiled	[CE]  illegal  start  of  expression	47	None	add
380	[BUG]  [BUGGY]  tmpVec  =  prered;  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  points[pj]  =  oldX[pj].doubleValue();  }  [CE]  cannot  find  symbol  prered  [FE]                      AssertionFailedError      [CONTEXT]        }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;      [BUGGY]  tmpVec  =  prered;  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  points[pj]  =  oldX[pj].doubleValue();  }  [BUGGY]      residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	432	432	2	replace	tmpVec  =  prered;  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  points[pj]  =  oldX[pj].doubleValue();  }	  tmpVec    =    previousCost;    for(int    j    =    0;    j    <    solvedCols;    ++j)    {    points[pj]    =    oldX[pj].doubleValue();    }    	non-compiled	[CE]  cannot  find  symbol  prered	5	None	replace
381	[BUG]  [BUGGY]  if(tmpVec!=  previousCost)  {  cost  =  oldRes[j];  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  point[j]  =  oldX[pj];  }  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]        }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;      [BUGGY]  if(tmpVec!=  previousCost)  {  cost  =  oldRes[j];  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  point[j]  =  oldX[pj];  }  [BUGGY]      residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	432	432	2	replace	if(tmpVec!=  previousCost)  {  cost  =  oldRes[j];  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  point[j]  =  oldX[pj];  }	  if(tmpVec!=    previousCost)    {    cost    =    permutation[j];    for(int    j    =    0;    j    <    solvedCols;    ++j)    {    point[j]    =    oldX[pj];    }    	non-compiled	[CE]  illegal  start  of  expression	93	None	replace
382	[BUG]  [BUGGY]  luate(previousCost,  tmpVec))  {  cost  =  permutation[j];  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  point[j]  =  oldX[pj];  }  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]        }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;      [BUGGY]  luate(previousCost,  tmpVec))  {  cost  =  permutation[j];  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  point[j]  =  oldX[pj];  }  [BUGGY]      residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	432	432	2	replace	luate(previousCost,  tmpVec))  {  cost  =  permutation[j];  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  point[j]  =  oldX[pj];  }	  if(tmpVec!=    previousCost)    {    cost    =    permutation[j];    for(int    j    =    0;    j    <    solvedCols;    ++j)    {    point[j]    =    oldX[pj];    }    	non-compiled	[CE]  ';'  expected	93	None	replace
383	[BUG]  [BUGGY]  if(tmpVec!=  previousCost)  {  cost  =  oldX[j];  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  point[j]  =  oldX[pj];  }  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]        }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;      [BUGGY]  if(tmpVec!=  previousCost)  {  cost  =  oldX[j];  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  point[j]  =  oldX[pj];  }  [BUGGY]      residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	432	432	2	replace	if(tmpVec!=  previousCost)  {  cost  =  oldX[j];  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  point[j]  =  oldX[pj];  }	  if(tmpVec!=    previousCost)    {    cost    =    permutation[j];    for(int    j    =    0;    j    <    solvedCols;    ++j)    {    point[j]    =    oldX[pj];    }    	non-compiled	[CE]  illegal  start  of  expression	93	None	replace
384	[BUG]  [BUGGY]  tmpVec  =  Math.max(resultRelativeTolerance,  previousCost);  [CE]  cannot  find  symbol  resultRelativeTolerance  [FE]                    AssertionFailedError      [CONTEXT]        }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;      [BUGGY]  tmpVec  =  Math.max(resultRelativeTolerance,  previousCost);  [BUGGY]      residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	432	432	2	replace	tmpVec  =  Math.max(resultRelativeTolerance,  previousCost);	  tmpVec    =    Math.max(relativeTolerance,    previousCost);    	non-compiled	[CE]  cannot  find  symbol  resultRelativeTolerance	80	None	replace
385	[BUG]  [BUGGY]  tmpVec  =  Math.max(relativeTolerance,  cost);  [CE]  cannot  find  symbol  relativeTolerance  [FE]                      AssertionFailedError      [CONTEXT]        }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;      [BUGGY]  tmpVec  =  Math.max(relativeTolerance,  cost);  [BUGGY]      residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	432	432	2	replace	tmpVec  =  Math.max(relativeTolerance,  cost);	  tmpVec    =    Math.max(relativeTolerance,    previousCost);    	non-compiled	[CE]  cannot  find  symbol  relativeTolerance	80	None	replace
386	[BUG]  [BUGGY]  if(tmpVec!=  previousCost)  {  cost  =  oldRes[j].doubleValue();  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  point[pj]  =  oldX[pj].doubleValue();  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]        }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;      [BUGGY]  if(tmpVec!=  previousCost)  {  cost  =  oldRes[j].doubleValue();  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  point[pj]  =  oldX[pj].doubleValue();  }  [BUGGY]      residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	432	432	2	replace	if(tmpVec!=  previousCost)  {  cost  =  oldRes[j].doubleValue();  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  point[pj]  =  oldX[pj].doubleValue();  }	  if(tmpVec!=    previousCost)    {    cost    =    permutation[j].doubleValue();    for(int    j    =    0;    j    <    solvedCols;    ++j)    {    point[pj]    =    oldX[pj].doubleValue();    }    	non-compiled	[CE]  illegal  start  of  expression	105	None	replace
387	[BUG]  [BUGGY]  if(tmpVec!=  previousCost)  {  cost  =  oldRes.doubleValue();  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  point[pj]  =  oldX[pj].doubleValue();  }  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]        }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;      [BUGGY]  if(tmpVec!=  previousCost)  {  cost  =  oldRes.doubleValue();  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  point[pj]  =  oldX[pj].doubleValue();  }  [BUGGY]      residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	432	432	2	replace	if(tmpVec!=  previousCost)  {  cost  =  oldRes.doubleValue();  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  point[pj]  =  oldX[pj].doubleValue();  }	  if(tmpVec!=    previousCost)    {    cost    =    permutation[j].doubleValue();    for(int    j    =    0;    j    <    solvedCols;    ++j)    {    point[pj]    =    oldX[pj].doubleValue();    }    	non-compiled	[CE]  illegal  start  of  expression	105	None	replace
388	[BUG]  [BUGGY]  if(tmpVec!=  previousCost)  {  cost  =  oldX[j].doubleValue();  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  point[pj]  =  oldX[pj].doubleValue();  }  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]        }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;      [BUGGY]  if(tmpVec!=  previousCost)  {  cost  =  oldX[j].doubleValue();  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  point[pj]  =  oldX[pj].doubleValue();  }  [BUGGY]      residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	432	432	2	replace	if(tmpVec!=  previousCost)  {  cost  =  oldX[j].doubleValue();  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  point[pj]  =  oldX[pj].doubleValue();  }	  if(tmpVec!=    previousCost)    {    cost    =    permutation[j].doubleValue();    for(int    j    =    0;    j    <    solvedCols;    ++j)    {    point[pj]    =    oldX[pj].doubleValue();    }    	non-compiled	[CE]  illegal  start  of  expression	105	None	replace
389	[BUG]  [BUGGY]  if(previousCost!=  tmpVec)  {  cost  =  permutation[j];  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  int  oldRes  =  oldX[pj];  }  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]        }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;      [BUGGY]  if(previousCost!=  tmpVec)  {  cost  =  permutation[j];  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  int  oldRes  =  oldX[pj];  }  [BUGGY]      residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	432	432	2	replace	if(previousCost!=  tmpVec)  {  cost  =  permutation[j];  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  int  oldRes  =  oldX[pj];  }	  if(tmpVec!=    previousCost)    {    cost    =    permutation[j];    for(int    j    =    0;    j    <    solvedCols;    ++j)    {    int    oldRes    =    oldX[pj];    }    	non-compiled	[CE]  illegal  start  of  expression	94	None	replace
390	[BUG]  [BUGGY]  if(previousCost!=  tmpVec)  {  cost  =  previousCost[j];  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  int  oldRes  =  oldX[pj];  }  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]        }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;      [BUGGY]  if(previousCost!=  tmpVec)  {  cost  =  previousCost[j];  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  int  oldRes  =  oldX[pj];  }  [BUGGY]      residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	432	432	2	replace	if(previousCost!=  tmpVec)  {  cost  =  previousCost[j];  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  int  oldRes  =  oldX[pj];  }	  if(tmpVec!=    previousCost)    {    cost    =    permutation[j];    for(int    j    =    0;    j    <    solvedCols;    ++j)    {    int    oldRes    =    oldX[pj];    }    	non-compiled	[CE]  illegal  start  of  expression	94	None	replace
391	[BUG]  [BUGGY]  if(previousCost!=  tmpVec)  {  cost  =  oldX[j];  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  int  oldRes  =  oldX[pj];  }  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]        }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;      [BUGGY]  if(previousCost!=  tmpVec)  {  cost  =  oldX[j];  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  int  oldRes  =  oldX[pj];  }  [BUGGY]      residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	432	432	2	replace	if(previousCost!=  tmpVec)  {  cost  =  oldX[j];  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  int  oldRes  =  oldX[pj];  }	  if(tmpVec!=    previousCost)    {    cost    =    permutation[j];    for(int    j    =    0;    j    <    solvedCols;    ++j)    {    int    oldRes    =    oldX[pj];    }    	non-compiled	[CE]  illegal  start  of  expression	94	None	replace
392	[BUG]  [BUGGY]  tmpVec  =  permutation.length;  for(int  j  =  0;  j  <  solveCols;  ++j)  {  point[pj]  =  oldX[pj].doubleValue();  }  [CE]  incompatible  types  [FE]                    AssertionFailedError      [CONTEXT]        }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;      [BUGGY]  tmpVec  =  permutation.length;  for(int  j  =  0;  j  <  solveCols;  ++j)  {  point[pj]  =  oldX[pj].doubleValue();  }  [BUGGY]      residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	432	432	2	replace	tmpVec  =  permutation.length;  for(int  j  =  0;  j  <  solveCols;  ++j)  {  point[pj]  =  oldX[pj].doubleValue();  }	  if(tmpVec!=    previousCost)    {    cost    =    permutation.length;    for(int    j    =    0;    j    <    solvedCols;    ++j)    {    point[pj]    =    oldX[pj].doubleValue();    }    	non-compiled	[CE]  incompatible  types	106	None	replace
393	[BUG]  [BUGGY]  tmpVec  =  solveCols;  for(int  j  =  0;  j  <  previousCost;  ++j)  {  point[j]  =  oldX[pj];  }  [CE]  cannot  find  symbol  solveCols  [FE]                      AssertionFailedError      [CONTEXT]        }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;      [BUGGY]  tmpVec  =  solveCols;  for(int  j  =  0;  j  <  previousCost;  ++j)  {  point[j]  =  oldX[pj];  }  [BUGGY]      residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	432	432	2	replace	tmpVec  =  solveCols;  for(int  j  =  0;  j  <  previousCost;  ++j)  {  point[j]  =  oldX[pj];  }	  tmpVec    =    previousCost;    for(int    j    =    0;    j    <    solveCols;    ++j)    {    point[j]    =    oldX[pj];    }    	non-compiled	[CE]  cannot  find  symbol  solveCols	65	None	replace
394	[BUG]  [BUGGY]  tmpVec  =  preres;  for(int  j  =  0;  j  <  solveCols;  ++j)  {  point[j]  =  oldX[pj];  }  [CE]  cannot  find  symbol  preres  [FE]                        AssertionFailedError      [CONTEXT]        }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;      [BUGGY]  tmpVec  =  preres;  for(int  j  =  0;  j  <  solveCols;  ++j)  {  point[j]  =  oldX[pj];  }  [BUGGY]      residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	432	432	2	replace	tmpVec  =  preres;  for(int  j  =  0;  j  <  solveCols;  ++j)  {  point[j]  =  oldX[pj];  }	  tmpVec    =    previousCost;    for(int    j    =    0;    j    <    solveCols;    ++j)    {    point[j]    =    oldX[pj];    }    	non-compiled	[CE]  cannot  find  symbol  preres	65	None	replace
395	[BUG]  [BUGGY]  residuals    =    tmpVec;    tmpVec  =  residuals;  RelativeTolerance  tmpVec  =  new  RelativeTolerance(previousCost);  [CE]  cannot  find  symbol  [FE]    AssertionFailedError    [CONTEXT]        }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;      [BUGGY]  residuals    =    tmpVec;    tmpVec  =  residuals;  RelativeTolerance  tmpVec  =  new  RelativeTolerance(previousCost);  [BUGGY]      oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	432	432	2	replace	residuals        =        tmpVec;        tmpVec    =    residuals;    RelativeTolerance  tmpVec  =  new  RelativeTolerance(previousCost);	  	non-compiled	[CE]  cannot  find  symbol	23	None	add
396	[BUG]  [BUGGY]  tmpVec  =  oldX;  ((  VectorialPointValuePair)oldRes).add(tmpVec);  [CE]  inconvertible  types  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]        }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;      [BUGGY]  tmpVec  =  oldX;  ((  VectorialPointValuePair)oldRes).add(tmpVec);  [BUGGY]      oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	432	432	2	replace	tmpVec    =    oldX;    ((  VectorialPointValuePair)oldRes).add(tmpVec);	  	non-compiled	[CE]  inconvertible  types	34	None	add
397	[BUG]  [BUGGY]  tmpVec  =  oldX;  ((  VectorialPointValuePair)oldRes).setIndex(pj);  [CE]  cannot  find  symbol  pj  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]        }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;      [BUGGY]  tmpVec  =  oldX;  ((  VectorialPointValuePair)oldRes).setIndex(pj);  [BUGGY]      oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	432	432	2	replace	tmpVec    =    oldX;    ((  VectorialPointValuePair)oldRes).setIndex(pj);	  	non-compiled	[CE]  cannot  find  symbol  pj	34	None	add
398	[BUG]  [BUGGY]  tmpVec  =  oldX;  ((  VectorialPointValuePair)oldX).setIndex(0,  oldRes);  [CE]  inconvertible  types  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]        }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;      [BUGGY]  tmpVec  =  oldX;  ((  VectorialPointValuePair)oldX).setIndex(0,  oldRes);  [BUGGY]      oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	432	432	2	replace	tmpVec    =    oldX;    ((  VectorialPointValuePair)oldX).setIndex(0,  oldRes);	  	non-compiled	[CE]  inconvertible  types	34	None	add
399	[BUG]  [BUGGY]  tmpVec  =  oldX;  ((  VectorialPointValuePair)oldX).setIndex(pj);  [CE]  cannot  find  symbol  pj  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]        }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;      [BUGGY]  tmpVec  =  oldX;  ((  VectorialPointValuePair)oldX).setIndex(pj);  [BUGGY]      oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	432	432	2	replace	tmpVec    =    oldX;    ((  VectorialPointValuePair)oldX).setIndex(pj);	  	non-compiled	[CE]  cannot  find  symbol  pj	34	None	add
400	[BUG]  [BUGGY]  tmpVec  =  Math.max(relativeCost,  cost);  [CE]  cannot  find  symbol  relativeCost  [FE]                    AssertionFailedError      [CONTEXT]        }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;      [BUGGY]  tmpVec  =  Math.max(relativeCost,  cost);  [BUGGY]      residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	432	432	2	replace	tmpVec  =  Math.max(relativeCost,  cost);	  tmpVec    =    Math.max(remainings,    cost);    	non-compiled	[CE]  cannot  find  symbol  relativeCost	114	None	replace
401	[BUG]  [BUGGY]  if(remainings  >  0)  {  oldRes  =  originalCost;  }  else  {  cost  =  previousCost;  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  point[pj]  =  oldX[pj];  }  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError      [CONTEXT]        }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;      [BUGGY]  if(remainings  >  0)  {  oldRes  =  originalCost;  }  else  {  cost  =  previousCost;  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  point[pj]  =  oldX[pj];  }  [BUGGY]      residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	432	432	2	replace	if(remainings  >  0)  {  oldRes  =  originalCost;  }  else  {  cost  =  previousCost;  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  point[pj]  =  oldX[pj];  }	          oldRes    =    tmpVec;    if(remainings    >    0)    {    oldRes    =    tmpVec;    }    else    {    cost    =    previousCost;    for(int    j    =    0;    j    <    solvedCols;    ++j)    {    point[pj]    =    point[pj];    }    	non-compiled	[CE]  illegal  start  of  expression	98	None	replace
402	[BUG]  [BUGGY]  tmpVec  =  tmpVec;  remainings  =  tmpVec;  [CE]  cannot  find  symbol  remainings  [FE]              AssertionFailedError      [CONTEXT]        }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;      [BUGGY]  tmpVec  =  tmpVec;  remainings  =  tmpVec;  [BUGGY]      oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	432	432	2	replace	tmpVec  =  tmpVec;  remainings  =  tmpVec;	  residuals    =    tmpVec;    remainings    =    tmpVec;    	non-compiled	[CE]  cannot  find  symbol  remainings	22	None	replace
403	[BUG]  [BUGGY]  résultats  =  tmpVec;  [CE]  cannot  find  symbol  r  [FE]              AssertionFailedError      [CONTEXT]        }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;      [BUGGY]  résultats  =  tmpVec;  [BUGGY]      oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	432	432	2	replace	résultats  =  tmpVec;	  results    =    oldRes;    	non-compiled	[CE]  cannot  find  symbol  r	49	None	replace
404	[BUG]  [BUGGY]          oldRes    =    tmpVec;    oldRes  =  tmpVec;  OldRes  =  tmpVec;  oldRes  =  tmpVec;  [CE]  cannot  find  symbol  OldRes  [FE]    AssertionFailedError    [CONTEXT]        }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;      [BUGGY]          oldRes    =    tmpVec;    oldRes  =  tmpVec;  OldRes  =  tmpVec;  oldRes  =  tmpVec;  [BUGGY]      residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	432	432	2	replace	                oldRes        =        tmpVec;        oldRes    =    tmpVec;    OldRes  =  tmpVec;  oldRes  =  tmpVec;	  	non-compiled	[CE]  cannot  find  symbol  OldRes	37	None	add
405	[BUG]  [BUGGY]          oldRes    =    tmpVec;    oldRes  =  tmpVec;  if(remainings  ==  0)  {  oldRes  =  tmpVec;  oldRes  =  tmpVec;  }  else  {  cost  =  previousCost;  }  [CE]  cannot  find  symbol  remainings  [FE]      AssertionFailedError    [CONTEXT]        }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;      [BUGGY]          oldRes    =    tmpVec;    oldRes  =  tmpVec;  if(remainings  ==  0)  {  oldRes  =  tmpVec;  oldRes  =  tmpVec;  }  else  {  cost  =  previousCost;  }  [BUGGY]      residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	432	432	2	replace	                oldRes        =        tmpVec;        oldRes    =    tmpVec;    if(remainings  ==  0)  {  oldRes  =  tmpVec;  oldRes  =  tmpVec;  }  else  {  cost  =  previousCost;  }	  	non-compiled	[CE]  cannot  find  symbol  remainings	37	None	add
406	[BUG]  [BUGGY]  oldRes  -=  tmpVec.length;  [CE]  bad  operand  types  for  binary  operator  '-'  [FE]                    AssertionFailedError      [CONTEXT]        }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;      [BUGGY]  oldRes  -=  tmpVec.length;  [BUGGY]      oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	432	432	2	replace	oldRes  -=  tmpVec.length;	  remainings    -=    oldRes.length;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '-'	46	None	replace
407	[BUG]  [BUGGY]  tmpVec  =  prered;  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  points[j]  =  oldX[pj];  }  [CE]  cannot  find  symbol  prered  [FE]                        AssertionFailedError      [CONTEXT]        }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;      [BUGGY]  tmpVec  =  prered;  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  points[j]  =  oldX[pj];  }  [BUGGY]      residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	432	432	2	replace	tmpVec  =  prered;  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  points[j]  =  oldX[pj];  }	  tmpVec    =    previousCost;    for(int    j    =    0;    j    <    solvedCols;    ++j)    {    points[j]    =    oldX[pj];    }    	non-compiled	[CE]  cannot  find  symbol  prered	66	None	replace
408	[BUG]  [BUGGY]  tmpVec  =  permutation.length;  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  points[j]  =  oldX[pj];  }  [CE]  incompatible  types  [FE]                          AssertionFailedError      [CONTEXT]        }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;      [BUGGY]  tmpVec  =  permutation.length;  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  points[j]  =  oldX[pj];  }  [BUGGY]      residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	432	432	2	replace	tmpVec  =  permutation.length;  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  points[j]  =  oldX[pj];  }	  tmpVec    =    previousCost;    for(int    j    =    0;    j    <    solvedCols;    ++j)    {    points[j]    =    oldX[pj];    }    	non-compiled	[CE]  incompatible  types	66	None	replace
409	[BUG]  [BUGGY]  tmpVec  =  new  VectorialPointValuePair(lastX,  preRed,  previousCost);  [CE]  cannot  find  symbol  lastX  [FE]                    AssertionFailedError      [CONTEXT]        }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;      [BUGGY]  tmpVec  =  new  VectorialPointValuePair(lastX,  preRed,  previousCost);  [BUGGY]      residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	432	432	2	replace	tmpVec  =  new  VectorialPointValuePair(lastX,  preRed,  previousCost);	  tmpVec    =    new    VectorialPointValuePair(lastX,    previousCost,    preRed);    	non-compiled	[CE]  cannot  find  symbol  lastX	111	None	replace
410	[BUG]  [BUGGY]  if(remainings  >  0)  {  oldRes  =  tmpVec;  }  else  {  cost  =  previousCost;  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  point[point[j]  =  point[j];  }  [CE]  ']'  expected  [FE]            AssertionFailedError      [CONTEXT]        }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;      [BUGGY]  if(remainings  >  0)  {  oldRes  =  tmpVec;  }  else  {  cost  =  previousCost;  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  point[point[j]  =  point[j];  }  [BUGGY]      residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	432	432	2	replace	if(remainings  >  0)  {  oldRes  =  tmpVec;  }  else  {  cost  =  previousCost;  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  point[point[j]  =  point[j];  }	          oldRes    =    tmpVec;    if(remainings    >    0)    {    oldRes    =    tmpVec;    }    else    {    cost    =    previousCost;    for(int    j    =    0;    j    <    solvedCols;    ++j)    {    point[pj]    =    point[j];    }    	non-compiled	[CE]  ']'  expected	99	None	replace
411	[BUG]  [BUGGY]  if(remainings  >  0)  {  oldRes  =  originalCost;  }  else  {  cost  =  previousCost;  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  point[pj]  =  oldX[j];  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]        }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;      [BUGGY]  if(remainings  >  0)  {  oldRes  =  originalCost;  }  else  {  cost  =  previousCost;  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  point[pj]  =  oldX[j];  }  [BUGGY]      residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	432	432	2	replace	if(remainings  >  0)  {  oldRes  =  originalCost;  }  else  {  cost  =  previousCost;  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  point[pj]  =  oldX[j];  }	          oldRes    =    tmpVec;    if(remainings    >    0)    {    oldRes    =    tmpVec;    }    else    {    cost    =    previousCost;    for(int    j    =    0;    j    <    solvedCols;    ++j)    {    point[pj]    =    point[j];    }    	non-compiled	[CE]  illegal  start  of  expression	99	None	replace
412	[BUG]  [BUGGY]  previousCost  =  preRed;  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  int  oldRes  =  oldX[pj];  }  [CE]  variable  oldRes  is  already  defined  in  method  doOptimize()  [FE]                      AssertionFailedError      [CONTEXT]        }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;      [BUGGY]  previousCost  =  preRed;  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  int  oldRes  =  oldX[pj];  }  [BUGGY]      residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	432	432	2	replace	previousCost  =  preRed;  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  int  oldRes  =  oldX[pj];  }	  if(tmpVec!=    previousCost)    {    cost    =    preRed;    for(int    j    =    0;    j    <    solvedCols;    ++j)    {    int    oldRes    =    oldX[pj];    }    	non-compiled	[CE]  variable  oldRes  is  already  defined  in  method  doOptimize()	127	None	replace
413	[BUG]  [BUGGY]  if(tmpVec!=  previousCost)  {  cost  =  oldRes[j];  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  point[pj]  =  oldX[pj].doubleValue();  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]        }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;      [BUGGY]  if(tmpVec!=  previousCost)  {  cost  =  oldRes[j];  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  point[pj]  =  oldX[pj].doubleValue();  }  [BUGGY]      residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	432	432	2	replace	if(tmpVec!=  previousCost)  {  cost  =  oldRes[j];  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  point[pj]  =  oldX[pj].doubleValue();  }	  if(tmpVec!=    previousCost)    {    cost    =    permutation[j];    for(int    j    =    0;    j    <    solvedCols;    ++j)    {    point[pj]    =    oldX[pj].doubleValue();    }    	non-compiled	[CE]  illegal  start  of  expression	104	None	replace
414	[BUG]  [BUGGY]  if(tmpVec!=  previousCost)  {  cost  =  preRed;  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  point[pj]  =  oldX[pj].doubleValue();  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]        }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;      [BUGGY]  if(tmpVec!=  previousCost)  {  cost  =  preRed;  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  point[pj]  =  oldX[pj].doubleValue();  }  [BUGGY]      residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	432	432	2	replace	if(tmpVec!=  previousCost)  {  cost  =  preRed;  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  point[pj]  =  oldX[pj].doubleValue();  }	  if(tmpVec!=    previousCost)    {    cost    =    permutation[j];    for(int    j    =    0;    j    <    solvedCols;    ++j)    {    point[pj]    =    oldX[pj].doubleValue();    }    	non-compiled	[CE]  illegal  start  of  expression	104	None	replace
415	[BUG]  [BUGGY]  if(tmpVec!=  previousCost)  {  cost  =  preRed[j];  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  point[pj]  =  oldX[pj].doubleValue();  }  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]        }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;      [BUGGY]  if(tmpVec!=  previousCost)  {  cost  =  preRed[j];  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  point[pj]  =  oldX[pj].doubleValue();  }  [BUGGY]      residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	432	432	2	replace	if(tmpVec!=  previousCost)  {  cost  =  preRed[j];  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  point[pj]  =  oldX[pj].doubleValue();  }	  if(tmpVec!=    previousCost)    {    cost    =    permutation[j];    for(int    j    =    0;    j    <    solvedCols;    ++j)    {    point[pj]    =    oldX[pj].doubleValue();    }    	non-compiled	[CE]  illegal  start  of  expression	104	None	replace
416	[BUG]  [BUGGY]  remainders  =  tmpVec;  tmpVec  =  tmpVec;  [CE]  cannot  find  symbol  remainders  [FE]    AssertionFailedError    [CONTEXT]        }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;      [BUGGY]  remainders  =  tmpVec;  tmpVec  =  tmpVec;  [BUGGY]      oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	432	432	2	replace	remainders  =  tmpVec;  tmpVec  =  tmpVec;	  residuals    =    tmpVec;    tmpVec    =    tmpVec;    	non-compiled	[CE]  cannot  find  symbol  remainders	19	None	replace
417	[BUG]  [BUGGY]  remainders  =  tmpVec;  tmpVec  =  tmpVec  +  1;  [CE]  cannot  find  symbol  remainders  [FE]      AssertionFailedError    [CONTEXT]        }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;      [BUGGY]  remainders  =  tmpVec;  tmpVec  =  tmpVec  +  1;  [BUGGY]      oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	432	432	2	replace	remainders  =  tmpVec;  tmpVec  =  tmpVec  +  1;	  residuals    =    tmpVec;    tmpVec    =    tmpVec;    	non-compiled	[CE]  cannot  find  symbol  remainders	19	None	replace
418	[BUG]  [BUGGY]  remainders  =  tmpVec  +  1;  tmpVec  =  tmpVec;  [CE]  cannot  find  symbol  remainders  [FE]        AssertionFailedError    [CONTEXT]        }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;      [BUGGY]  remainders  =  tmpVec  +  1;  tmpVec  =  tmpVec;  [BUGGY]      oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	432	432	2	replace	remainders  =  tmpVec  +  1;  tmpVec  =  tmpVec;	  residuals    =    tmpVec;    tmpVec    =    tmpVec;    	non-compiled	[CE]  cannot  find  symbol  remainders	19	None	replace
419	[BUG]  [BUGGY]  tmpVec  =  prered;  for(int  j  =  0;  j  <  solveCols;  ++j)  {  point[pj]  =  oldX[pj].doubleValue();  }  [CE]  cannot  find  symbol  prered  [FE]                    AssertionFailedError      [CONTEXT]        }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;      [BUGGY]  tmpVec  =  prered;  for(int  j  =  0;  j  <  solveCols;  ++j)  {  point[pj]  =  oldX[pj].doubleValue();  }  [BUGGY]      residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	432	432	2	replace	tmpVec  =  prered;  for(int  j  =  0;  j  <  solveCols;  ++j)  {  point[pj]  =  oldX[pj].doubleValue();  }	  tmpVec    =    previousCost;    for(int    j    =    0;    j    <    solveCols;    ++j)    {    point[pj]    =    oldX[pj].doubleValue();    }    	non-compiled	[CE]  cannot  find  symbol  prered	4	None	replace
420	[BUG]  [BUGGY]  if(tmpVec!=  prevCost)  {  cost  =  prevCost;  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  point[pj]  =  oldX[pj];  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]        }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;      [BUGGY]  if(tmpVec!=  prevCost)  {  cost  =  prevCost;  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  point[pj]  =  oldX[pj];  }  [BUGGY]      residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	432	432	2	replace	if(tmpVec!=  prevCost)  {  cost  =  prevCost;  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  point[pj]  =  oldX[pj];  }	  if(tmpVec!=    previousCost)    {    cost    =    prevCost;    for(int    j    =    0;    j    <    solvedCols;    ++j)    {    point[pj]    =    oldX[pj];    }    	non-compiled	[CE]  illegal  start  of  expression	101	None	replace
421	[BUG]  [BUGGY]  results  =  tmpVec  +  3;  [CE]  cannot  find  symbol  results  [FE]            AssertionFailedError      [CONTEXT]        }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;      [BUGGY]  results  =  tmpVec  +  3;  [BUGGY]      oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	432	432	2	replace	results  =  tmpVec  +  3;	  results    =    tmpVec    +    1;    	non-compiled	[CE]  cannot  find  symbol  results	77	None	replace
422	[BUG]  [BUGGY]  tmpVec  =  point[0];  [CE]  incompatible  types  [FE]                    AssertionFailedError      [CONTEXT]        }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;      [BUGGY]  tmpVec  =  point[0];  [BUGGY]      residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	432	432	2	replace	tmpVec  =  point[0];	  tmpVec    =    point[pj];    	non-compiled	[CE]  incompatible  types	61	None	replace
423	[BUG]  [BUGGY]  RelativeTolerance  tmpVec  =  tmpVec.doubleValue();  [CE]  cannot  find  symbol  [FE]        AssertionFailedError      [CONTEXT]        }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;      [BUGGY]  RelativeTolerance  tmpVec  =  tmpVec.doubleValue();  [BUGGY]      oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	432	432	2	replace	RelativeTolerance  tmpVec  =  tmpVec.doubleValue();	  residuals    =    tmpVec;    tmpVec    =    tmpVec.doubleValue();    	non-compiled	[CE]  cannot  find  symbol	108	None	replace
424	[BUG]  [BUGGY]  residuals    =    tmpVec;    tmpVec  =  tmpVec;  FixedRes  =  tmpVec;  tmpVec  =  tmpVec;  [CE]  cannot  find  symbol  FixedRes  [FE]    AssertionFailedError    [CONTEXT]        }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;      [BUGGY]  residuals    =    tmpVec;    tmpVec  =  tmpVec;  FixedRes  =  tmpVec;  tmpVec  =  tmpVec;  [BUGGY]      oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	432	432	2	replace	residuals        =        tmpVec;        tmpVec    =    tmpVec;    FixedRes  =  tmpVec;  tmpVec  =  tmpVec;	  	non-compiled	[CE]  cannot  find  symbol  FixedRes	18	None	add
425	[BUG]  [BUGGY]  residuals    =    tmpVec;    tmpVec  =  tmpVec;  RelativeTolerance  tmpVec  =  new  RelativeTolerance(relatives);  [CE]  cannot  find  symbol  [FE]      AssertionFailedError    [CONTEXT]        }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;      [BUGGY]  residuals    =    tmpVec;    tmpVec  =  tmpVec;  RelativeTolerance  tmpVec  =  new  RelativeTolerance(relatives);  [BUGGY]      oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	432	432	2	replace	residuals        =        tmpVec;        tmpVec    =    tmpVec;    RelativeTolerance  tmpVec  =  new  RelativeTolerance(relatives);	  	non-compiled	[CE]  cannot  find  symbol	18	None	add
426	[BUG]  [BUGGY]  Results  =  tmpVec.results;  [CE]  cannot  find  symbol  Results  [FE]              AssertionFailedError      [CONTEXT]        }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;      [BUGGY]  Results  =  tmpVec.results;  [BUGGY]      oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	432	432	2	replace	Results  =  tmpVec.results;	  results    =    tmpVec.results;    	non-compiled	[CE]  cannot  find  symbol  Results	78	None	replace
427	[BUG]  [BUGGY]  tmpVec  =  new  VectorialPointValuePair(point,  preRed,  cost);  [CE]  no  suitable  constructor  found  for  VectorialPointValuePair(double[],double,double)  [FE]                  AssertionFailedError      [CONTEXT]        }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;      [BUGGY]  tmpVec  =  new  VectorialPointValuePair(point,  preRed,  cost);  [BUGGY]      residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	432	432	2	replace	tmpVec  =  new  VectorialPointValuePair(point,  preRed,  cost);	  tmpVec    =    new    VectorialPointValuePair(previousCost,    point,    cost);    	non-compiled	[CE]  no  suitable  constructor  found  for  VectorialPointValuePair(double[],double,double)	14	None	replace
428	[BUG]  [BUGGY]  residuals  -=  oldRes  *  1;  [CE]  bad  operand  types  for  binary  operator  '*'  [FE]              AssertionFailedError      [CONTEXT]        }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;      [BUGGY]  residuals  -=  oldRes  *  1;  [BUGGY]      oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	432	432	2	replace	residuals  -=  oldRes  *  1;	  residuals    -=    oldRes    +    1;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '*'	96	None	replace
429	[BUG]  [BUGGY]  if(remainings  >  oldRes)  {  oldRes  =  previousCost;  }  else  {  cost  =  previousCost;  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  point[pj]  =  point[pj].doubleValu  [CE]  ';'  expected  [FE]          AssertionFailedError      [CONTEXT]        }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;      [BUGGY]  if(remainings  >  oldRes)  {  oldRes  =  previousCost;  }  else  {  cost  =  previousCost;  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  point[pj]  =  point[pj].doubleValu  [BUGGY]      residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	432	432	2	replace	if(remainings  >  oldRes)  {  oldRes  =  previousCost;  }  else  {  cost  =  previousCost;  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  point[pj]  =  point[pj].doubleValu	          oldRes    =    tmpVec;    if(remainings    >    oldRes)    {    oldRes    =    tmpVec;    }    else    {    cost    =    previousCost;    for(int    j    =    0;    j    <    solvedCols;    ++j)    {    point[pj]    =    point[pj].doubleValue();    }    	non-compiled	[CE]  ';'  expected	121	None	replace
430	[BUG]  [BUGGY]  previousCost  =  preRed;  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  permutation[j]  =  oldX[pj];  }  [CE]  cannot  find  symbol  pj  [FE]                  AssertionFailedError      [CONTEXT]        }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;      [BUGGY]  previousCost  =  preRed;  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  permutation[j]  =  oldX[pj];  }  [BUGGY]      residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	432	432	2	replace	previousCost  =  preRed;  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  permutation[j]  =  oldX[pj];  }	  if(tmpVec!=    previousCost)    {    cost    =    preRed;    for(int    j    =    0;    j    <    solvedCols;    ++j)    {    permutation[j]    =    oldX[pj];    }    	non-compiled	[CE]  cannot  find  symbol  pj	125	None	replace
431	[BUG]  [BUGGY]  tmpVec  =  preRed;  for(int  j  =  0;  j  <  solveCols;  ++j)  {  permutation[j]  =  oldX[pj];  }  [CE]  incompatible  types  [FE]                    AssertionFailedError      [CONTEXT]        }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;      [BUGGY]  tmpVec  =  preRed;  for(int  j  =  0;  j  <  solveCols;  ++j)  {  permutation[j]  =  oldX[pj];  }  [BUGGY]      residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	432	432	2	replace	tmpVec  =  preRed;  for(int  j  =  0;  j  <  solveCols;  ++j)  {  permutation[j]  =  oldX[pj];  }	  if(tmpVec!=    previousCost)    {    cost    =    preRed;    for(int    j    =    0;    j    <    solvedCols;    ++j)    {    permutation[j]    =    oldX[pj];    }    	non-compiled	[CE]  incompatible  types	125	None	replace
432	[BUG]  [BUGGY]  tmpVec  =  preres;  for(int  j  =  0;  j  <  resolvedCols;  ++j)  {  point[j]  =  oldX[pj];  }  [CE]  cannot  find  symbol  preres  [FE]                    AssertionFailedError      [CONTEXT]        }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;      [BUGGY]  tmpVec  =  preres;  for(int  j  =  0;  j  <  resolvedCols;  ++j)  {  point[j]  =  oldX[pj];  }  [BUGGY]      residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	432	432	2	replace	tmpVec  =  preres;  for(int  j  =  0;  j  <  resolvedCols;  ++j)  {  point[j]  =  oldX[pj];  }	  tmpVec    =    previousCost;    for(int    j    =    0;    j    <    resolvedCols;    ++j)    {    point[j]    =    oldX[pj];    }    	non-compiled	[CE]  cannot  find  symbol  preres	64	None	replace
433	[BUG]  [BUGGY]  tmpVec  =  prevCost;  for(int  j  =  0;  j  <  resolvedCols;  ++j)  {  point[j]  =  oldX[pj];  }  [CE]  cannot  find  symbol  prevCost  [FE]                      AssertionFailedError      [CONTEXT]        }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;      [BUGGY]  tmpVec  =  prevCost;  for(int  j  =  0;  j  <  resolvedCols;  ++j)  {  point[j]  =  oldX[pj];  }  [BUGGY]      residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	432	432	2	replace	tmpVec  =  prevCost;  for(int  j  =  0;  j  <  resolvedCols;  ++j)  {  point[j]  =  oldX[pj];  }	  tmpVec    =    previousCost;    for(int    j    =    0;    j    <    resolvedCols;    ++j)    {    point[j]    =    oldX[pj];    }    	non-compiled	[CE]  cannot  find  symbol  prevCost	64	None	replace
434	[BUG]  [BUGGY]  rs  =  result;  [CE]  cannot  find  symbol  rs  [FE]            AssertionFailedError      [CONTEXT]        }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;      [BUGGY]  rs  =  result;  [BUGGY]      oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	432	432	2	replace	rs  =  result;	  rsults    =    result;    	non-compiled	[CE]  cannot  find  symbol  rs	84	None	replace
435	[BUG]  [BUGGY]  tmpVec  =  new  VectorialPointValuePair(last,  cost);  [CE]  cannot  find  symbol  last  [FE]                    AssertionFailedError      [CONTEXT]        }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;      [BUGGY]  tmpVec  =  new  VectorialPointValuePair(last,  cost);  [BUGGY]      residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	432	432	2	replace	tmpVec  =  new  VectorialPointValuePair(last,  cost);	  tmpVec    =    new    VectorialPointValuePair(currentCost,    cost);    	non-compiled	[CE]  cannot  find  symbol  last	15	None	replace
436	[BUG]  [BUGGY]  if(remainings  >  0)  {  oldRes  =  oldX;  }  else  {  cost  =  previousCost;  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  point[j]  =  point[j];  }  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError      [CONTEXT]        }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;      [BUGGY]  if(remainings  >  0)  {  oldRes  =  oldX;  }  else  {  cost  =  previousCost;  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  point[j]  =  point[j];  }  [BUGGY]      residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	432	432	2	replace	if(remainings  >  0)  {  oldRes  =  oldX;  }  else  {  cost  =  previousCost;  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  point[j]  =  point[j];  }	          oldRes    =    tmpVec;    if(remainings    >    0)    {    oldRes    =    tmpVec;    }    else    {    cost    =    previousCost;    for(int    j    =    0;    j    <    solvedCols;    ++j)    {    point[j]    =    point[j];    }    	non-compiled	[CE]  illegal  start  of  expression	97	None	replace
437	[BUG]  [BUGGY]  if(remainings  >  0)  {  oldRes  =  prevCost;  }  else  {  cost  =  previousCost;  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  point[j]  =  point[j];  }  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError      [CONTEXT]        }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;      [BUGGY]  if(remainings  >  0)  {  oldRes  =  prevCost;  }  else  {  cost  =  previousCost;  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  point[j]  =  point[j];  }  [BUGGY]      residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	432	432	2	replace	if(remainings  >  0)  {  oldRes  =  prevCost;  }  else  {  cost  =  previousCost;  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  point[j]  =  point[j];  }	          oldRes    =    tmpVec;    if(remainings    >    0)    {    oldRes    =    tmpVec;    }    else    {    cost    =    previousCost;    for(int    j    =    0;    j    <    solvedCols;    ++j)    {    point[j]    =    point[j];    }    	non-compiled	[CE]  illegal  start  of  expression	97	None	replace
438	[BUG]  [BUGGY]  tmpVec  =  oldX[point];  [CE]  incompatible  types  [FE]                  AssertionFailedError      [CONTEXT]        }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;      [BUGGY]  tmpVec  =  oldX[point];  [BUGGY]      residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	432	432	2	replace	tmpVec  =  oldX[point];	  tmpVec    =    oldX[pj];    	non-compiled	[CE]  incompatible  types	60	None	replace
439	[BUG]  [BUGGY]  tmpVec  =  prered;  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  point[pj]  =  oldX[pj].doubleValue();  }  [CE]  cannot  find  symbol  prered  [FE]                AssertionFailedError      [CONTEXT]        }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;      [BUGGY]  tmpVec  =  prered;  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  point[pj]  =  oldX[pj].doubleValue();  }  [BUGGY]      residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	432	432	2	replace	tmpVec  =  prered;  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  point[pj]  =  oldX[pj].doubleValue();  }	  tmpVec    =    previousCost;    for(int    j    =    0;    j    <    solvedCols;    ++j)    {    point[pj]    =    oldX[pj].doubleValue();    }    	non-compiled	[CE]  cannot  find  symbol  prered	2	None	replace
440	[BUG]  [BUGGY]  tmpVec  =  new  VectorialPointValuePair(previousCost,  preRed,  cost,  solvedCols);  [CE]  no  suitable  constructor  found  for  VectorialPointValuePair(double,double,double,int)  [FE]                  AssertionFailedError      [CONTEXT]        }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;      [BUGGY]  tmpVec  =  new  VectorialPointValuePair(previousCost,  preRed,  cost,  solvedCols);  [BUGGY]      residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	432	432	2	replace	tmpVec  =  new  VectorialPointValuePair(previousCost,  preRed,  cost,  solvedCols);	  tmpVec    =    new    VectorialPointValuePair(previousCost,    preRed,    cost);    	non-compiled	[CE]  no  suitable  constructor  found  for  VectorialPointValuePair(double,double,double,int)	8	None	replace
441	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]        }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;      [BUGGY]  residuals    =    tmpVec;    oldRes  =  tmpVec;  tmpVec  =  tmpVec;  [BUGGY]      oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	432	432	2	add	residuals        =        tmpVec;        oldRes    =    tmpVec;    tmpVec  =  tmpVec;	  	compilable	  [FE]  AssertionFailedError  	16	10	add
442	[BUG]  [BUGGY]  residuals    =    tmpVec;    oldRes  =  tmpVec;  tmpVec  =  tmpVec;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]        }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;      [BUGGY]  residuals    =    tmpVec;    oldRes  =  tmpVec;  tmpVec  =  tmpVec;  [BUGGY]      oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	432	432	2	replace	residuals        =        tmpVec;        oldRes    =    tmpVec;    tmpVec  =  tmpVec;	  	compilable	  [FE]  AssertionFailedError  	16	10	add
443	[BUG]  [BUGGY]  if(remainings  ==  tmpVec)  {  cost  =  previousCost;  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  oldX[j]  =  oldX[j];  }  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError      [CONTEXT]        }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;      [BUGGY]  if(remainings  ==  tmpVec)  {  cost  =  previousCost;  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  oldX[j]  =  oldX[j];  }  [BUGGY]      oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	432	432	2	replace	if(remainings  ==  tmpVec)  {  cost  =  previousCost;  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  oldX[j]  =  oldX[j];  }	  residuals    =    tmpVec;    if(remainings    ==    tmpVec)    {    cost    =    previousCost;    for(int    j    =    0;    j    <    solvedCols;    ++j)    {    oldX[j]    =    oldX[j];    }    	non-compiled	[CE]  illegal  start  of  expression	76	None	replace
444	[BUG]  [BUGGY]  if(remainings  ==  tmpVec)  {  previousCost;  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  oldX[j]  =  oldX[j];  }  [CE]  not  a  statement  [FE]            AssertionFailedError      [CONTEXT]        }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;      [BUGGY]  if(remainings  ==  tmpVec)  {  previousCost;  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  oldX[j]  =  oldX[j];  }  [BUGGY]      oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	432	432	2	replace	if(remainings  ==  tmpVec)  {  previousCost;  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  oldX[j]  =  oldX[j];  }	  residuals    =    tmpVec;    if(remainings    ==    tmpVec)    {    cost    =    previousCost;    for(int    j    =    0;    j    <    solvedCols;    ++j)    {    oldX[j]    =    oldX[j];    }    	non-compiled	[CE]  not  a  statement	76	None	replace
445	[BUG]  [BUGGY]  if(remainings  ==  tmpVec)  {  cost  =  previousCost;  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  oldX[j]  =  oldY[j];  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]        }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;      [BUGGY]  if(remainings  ==  tmpVec)  {  cost  =  previousCost;  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  oldX[j]  =  oldY[j];  }  [BUGGY]      oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	432	432	2	replace	if(remainings  ==  tmpVec)  {  cost  =  previousCost;  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  oldX[j]  =  oldY[j];  }	  residuals    =    tmpVec;    if(remainings    ==    tmpVec)    {    cost    =    previousCost;    for(int    j    =    0;    j    <    solvedCols;    ++j)    {    oldX[j]    =    oldX[j];    }    	non-compiled	[CE]  illegal  start  of  expression	76	None	replace
446	[BUG]  [BUGGY]  if(remainings  >  0)  {  oldRes  =  tmpVec;  }  else  {  cost  =  previousCost;  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  point[pj]  =  point[pj].getX();  }  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]        }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;      [BUGGY]  if(remainings  >  0)  {  oldRes  =  tmpVec;  }  else  {  cost  =  previousCost;  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  point[pj]  =  point[pj].getX();  }  [BUGGY]      residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	432	432	2	replace	if(remainings  >  0)  {  oldRes  =  tmpVec;  }  else  {  cost  =  previousCost;  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  point[pj]  =  point[pj].getX();  }	          oldRes    =    tmpVec;    if(remainings    >    oldRes)    {    oldRes    =    tmpVec;    }    else    {    cost    =    previousCost;    for(int    j    =    0;    j    <    solvedCols;    ++j)    {    point[pj]    =    point[pj].getX();    }    	non-compiled	[CE]  illegal  start  of  expression	122	None	replace
447	[BUG]  [BUGGY]  if(remainings  >  0)  {  oldRes  =  tmpVec;  }  else  {  cost  =  previousCost;  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  point[pj]  =  point[pj].getY();  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]        }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;      [BUGGY]  if(remainings  >  0)  {  oldRes  =  tmpVec;  }  else  {  cost  =  previousCost;  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  point[pj]  =  point[pj].getY();  }  [BUGGY]      residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	432	432	2	replace	if(remainings  >  0)  {  oldRes  =  tmpVec;  }  else  {  cost  =  previousCost;  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  point[pj]  =  point[pj].getY();  }	          oldRes    =    tmpVec;    if(remainings    >    oldRes)    {    oldRes    =    tmpVec;    }    else    {    cost    =    previousCost;    for(int    j    =    0;    j    <    solvedCols;    ++j)    {    point[pj]    =    point[pj].getX();    }    	non-compiled	[CE]  illegal  start  of  expression	122	None	replace
448	[BUG]  [BUGGY]  residuals  -=  oldRes.length  +  1;  [CE]  bad  operand  types  for  binary  operator  '-'  [FE]                  AssertionFailedError      [CONTEXT]        }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;      [BUGGY]  residuals  -=  oldRes.length  +  1;  [BUGGY]      oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	432	432	2	replace	residuals  -=  oldRes.length  +  1;	  residuals    -=    oldRes.length;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '-'	45	None	replace
449	[BUG]  [BUGGY]  remainders  -=  oldRes.length;  [CE]  cannot  find  symbol  remainders  [FE]                    AssertionFailedError      [CONTEXT]        }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;      [BUGGY]  remainders  -=  oldRes.length;  [BUGGY]      oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	432	432	2	replace	remainders  -=  oldRes.length;	  residuals    -=    oldRes.length;    	non-compiled	[CE]  cannot  find  symbol  remainders	45	None	replace
450	[BUG]  [BUGGY]  remainders  =  new  VectorialPointValuePair(oldX,  oldVec);  [CE]  cannot  find  symbol  remainders  [FE]                AssertionFailedError      [CONTEXT]        }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;      [BUGGY]  remainders  =  new  VectorialPointValuePair(oldX,  oldVec);  [BUGGY]      oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	432	432	2	replace	remainders  =  new  VectorialPointValuePair(oldX,  oldVec);	  remainders    =    new    VectorialPointValuePair(oldX,    oldRes);    	non-compiled	[CE]  cannot  find  symbol  remainders	82	None	replace
451	[BUG]  [BUGGY]  tmpVec  =  new  VectorialPointValuePair(point,  oldX,  previousCost,  cost);  [CE]  no  suitable  constructor  found  for  VectorialPointValuePair(double[],double[],double,double)  [FE]                  AssertionFailedError      [CONTEXT]        }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;      [BUGGY]  tmpVec  =  new  VectorialPointValuePair(point,  oldX,  previousCost,  cost);  [BUGGY]      residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	432	432	2	replace	tmpVec  =  new  VectorialPointValuePair(point,  oldX,  previousCost,  cost);	  tmpVec    =    new    VectorialPointValuePair(point,    previousCost,    cost);    	non-compiled	[CE]  no  suitable  constructor  found  for  VectorialPointValuePair(double[],double[],double,double)	89	None	replace
452	[BUG]  [BUGGY]  tmpVec  =  new  VectorialPointValuePair(point,  cost,  previousCost);  [CE]  no  suitable  constructor  found  for  VectorialPointValuePair(double[],double,double)  [FE]                    AssertionFailedError      [CONTEXT]        }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;      [BUGGY]  tmpVec  =  new  VectorialPointValuePair(point,  cost,  previousCost);  [BUGGY]      residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	432	432	2	replace	tmpVec  =  new  VectorialPointValuePair(point,  cost,  previousCost);	  tmpVec    =    new    VectorialPointValuePair(point,    previousCost,    cost);    	non-compiled	[CE]  no  suitable  constructor  found  for  VectorialPointValuePair(double[],double,double)	89	None	replace
453	[BUG]  [BUGGY]  tmpVec  =  new  VectorialPointValuePair(point,  preRed,  previousCost,  cost);  [CE]  no  suitable  constructor  found  for  VectorialPointValuePair(double[],double,double,double)  [FE]                      AssertionFailedError      [CONTEXT]        }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;      [BUGGY]  tmpVec  =  new  VectorialPointValuePair(point,  preRed,  previousCost,  cost);  [BUGGY]      residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	432	432	2	replace	tmpVec  =  new  VectorialPointValuePair(point,  preRed,  previousCost,  cost);	  tmpVec    =    new    VectorialPointValuePair(point,    previousCost,    cost);    	non-compiled	[CE]  no  suitable  constructor  found  for  VectorialPointValuePair(double[],double,double,double)	89	None	replace
454	[BUG]  [BUGGY]  remainders  =  tmpVec  +  2;  [CE]  cannot  find  symbol  remainders  [FE]              AssertionFailedError      [CONTEXT]        }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;      [BUGGY]  remainders  =  tmpVec  +  2;  [BUGGY]      oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	432	432	2	replace	remainders  =  tmpVec  +  2;	  remainders    =    tmpVec    +    1;    	non-compiled	[CE]  cannot  find  symbol  remainders	81	None	replace
455	[BUG]  [BUGGY]  tmpVec  =  Math.max(results,  oldRes);  [CE]  cannot  find  symbol  results  [FE]                      AssertionFailedError      [CONTEXT]        }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;      [BUGGY]  tmpVec  =  Math.max(results,  oldRes);  [BUGGY]      residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	432	432	2	replace	tmpVec  =  Math.max(results,  oldRes);	  tmpVec    =    Math.max(results,    previousCost);    	non-compiled	[CE]  cannot  find  symbol  results	55	None	replace
456	[BUG]  [BUGGY]  if(results!=  null)  {  cost  =  previousCost;  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  point[j]  =  oldX[pj];  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]        }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;      [BUGGY]  if(results!=  null)  {  cost  =  previousCost;  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  point[j]  =  oldX[pj];  }  [BUGGY]      residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	432	432	2	replace	if(results!=  null)  {  cost  =  previousCost;  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  point[j]  =  oldX[pj];  }	  if(tmpVec!=    null)    {    cost    =    previousCost;    for(int    j    =    0;    j    <    solvedCols;    ++j)    {    point[j]    =    oldX[pj];    }    	non-compiled	[CE]  illegal  start  of  expression	92	None	replace
457	[BUG]  [BUGGY]  if(tmpVec!=  null)  {  cost  =  permutation[j];  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  point[j]  =  oldX[pj];  }  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]        }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;      [BUGGY]  if(tmpVec!=  null)  {  cost  =  permutation[j];  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  point[j]  =  oldX[pj];  }  [BUGGY]      residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	432	432	2	replace	if(tmpVec!=  null)  {  cost  =  permutation[j];  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  point[j]  =  oldX[pj];  }	  if(tmpVec!=    null)    {    cost    =    previousCost;    for(int    j    =    0;    j    <    solvedCols;    ++j)    {    point[j]    =    oldX[pj];    }    	non-compiled	[CE]  illegal  start  of  expression	92	None	replace
458	[BUG]  [BUGGY]  if(tmpVec!=  null)  {  cost  =  permutation;  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  point[j]  =  oldX[pj];  }  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]        }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;      [BUGGY]  if(tmpVec!=  null)  {  cost  =  permutation;  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  point[j]  =  oldX[pj];  }  [BUGGY]      residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	432	432	2	replace	if(tmpVec!=  null)  {  cost  =  permutation;  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  point[j]  =  oldX[pj];  }	  if(tmpVec!=    null)    {    cost    =    previousCost;    for(int    j    =    0;    j    <    solvedCols;    ++j)    {    point[j]    =    oldX[pj];    }    	non-compiled	[CE]  illegal  start  of  expression	92	None	replace
459	[BUG]  [BUGGY]  previousCost  =  previousCost;  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  permutation[j]  =  oldX[pj];  }  [CE]  cannot  find  symbol  pj  [FE]              AssertionFailedError      [CONTEXT]        }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;      [BUGGY]  previousCost  =  previousCost;  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  permutation[j]  =  oldX[pj];  }  [BUGGY]      residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	432	432	2	replace	previousCost  =  previousCost;  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  permutation[j]  =  oldX[pj];  }	  if(tmpVec!=    preRed)    {    cost    =    previousCost;    for(int    j    =    0;    j    <    solvedCols;    ++j)    {    permutation[j]    =    oldX[pj];    }    	non-compiled	[CE]  cannot  find  symbol  pj	123	None	replace
460	[BUG]  [BUGGY]  luate(previousCost,  tmpVec,  solvedCols,  ++j))  {  cost  =  previousCost;  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  permutation[j]  =  oldX[pj];  }  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]        }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;      [BUGGY]  luate(previousCost,  tmpVec,  solvedCols,  ++j))  {  cost  =  previousCost;  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  permutation[j]  =  oldX[pj];  }  [BUGGY]      residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	432	432	2	replace	luate(previousCost,  tmpVec,  solvedCols,  ++j))  {  cost  =  previousCost;  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  permutation[j]  =  oldX[pj];  }	  if(tmpVec!=    preRed)    {    cost    =    previousCost;    for(int    j    =    0;    j    <    solvedCols;    ++j)    {    permutation[j]    =    oldX[pj];    }    	non-compiled	[CE]  ';'  expected	123	None	replace
461	[BUG]  [BUGGY]  if(tmpVec!=  preRed)  {  cost  =  previousCost;  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  permutation[j]  =  oldY[pj];  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]        }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;      [BUGGY]  if(tmpVec!=  preRed)  {  cost  =  previousCost;  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  permutation[j]  =  oldY[pj];  }  [BUGGY]      residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	432	432	2	replace	if(tmpVec!=  preRed)  {  cost  =  previousCost;  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  permutation[j]  =  oldY[pj];  }	  if(tmpVec!=    preRed)    {    cost    =    previousCost;    for(int    j    =    0;    j    <    solvedCols;    ++j)    {    permutation[j]    =    oldX[pj];    }    	non-compiled	[CE]  illegal  start  of  expression	123	None	replace
462	[BUG]  [BUGGY]  tmpVec  =  permutation[pj].doubleValue()  +  1;  [CE]  cannot  find  symbol  pj  [FE]                AssertionFailedError      [CONTEXT]        }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;      [BUGGY]  tmpVec  =  permutation[pj].doubleValue()  +  1;  [BUGGY]      residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	432	432	2	replace	tmpVec  =  permutation[pj].doubleValue()  +  1;	  tmpVec    =    permutation[j].doubleValue()    +    1;    	non-compiled	[CE]  cannot  find  symbol  pj	53	None	replace
463	[BUG]  [BUGGY]  tmpVec  =  point;  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  permutation[j]  =  oldX[pj];  }  [CE]  cannot  find  symbol  pj  [FE]              AssertionFailedError      [CONTEXT]        }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;      [BUGGY]  tmpVec  =  point;  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  permutation[j]  =  oldX[pj];  }  [BUGGY]      residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	432	432	2	replace	tmpVec  =  point;  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  permutation[j]  =  oldX[pj];  }	  tmpVec    =    previousCost;    for(int    j    =    0;    j    <    solvedCols;    ++j)    {    permutation[j]    =    oldX[pj];    }    	non-compiled	[CE]  cannot  find  symbol  pj	6	None	replace
464	[BUG]  [BUGGY]  tmpVec  =  prered;  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  permutation[j]  =  oldX[pj];  }  [CE]  cannot  find  symbol  prered  [FE]                AssertionFailedError      [CONTEXT]        }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;      [BUGGY]  tmpVec  =  prered;  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  permutation[j]  =  oldX[pj];  }  [BUGGY]      residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	432	432	2	replace	tmpVec  =  prered;  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  permutation[j]  =  oldX[pj];  }	  tmpVec    =    previousCost;    for(int    j    =    0;    j    <    solvedCols;    ++j)    {    permutation[j]    =    oldX[pj];    }    	non-compiled	[CE]  cannot  find  symbol  prered	6	None	replace
465	[BUG]  [BUGGY]  residuals    =    tmpVec;    residuals  =  tmpVec;  if(remainings  ==  tmpVec)  {  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  oldX[j]  =  oldX[j];  }  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]        }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;      [BUGGY]  residuals    =    tmpVec;    residuals  =  tmpVec;  if(remainings  ==  tmpVec)  {  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  oldX[j]  =  oldX[j];  }  [BUGGY]      oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	432	432	2	replace	residuals        =        tmpVec;        residuals    =    tmpVec;    if(remainings  ==  tmpVec)  {  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  oldX[j]  =  oldX[j];  }	  	non-compiled	[CE]  illegal  start  of  expression	20	None	add
466	[BUG]  [BUGGY]  residuals    =    tmpVec;    residuals  =  tmpVec;  if(remainings  ==  tmpVec)  {  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  oldX[j]  =  point[pj];  }  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]        }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;      [BUGGY]  residuals    =    tmpVec;    residuals  =  tmpVec;  if(remainings  ==  tmpVec)  {  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  oldX[j]  =  point[pj];  }  [BUGGY]      oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	432	432	2	replace	residuals        =        tmpVec;        residuals    =    tmpVec;    if(remainings  ==  tmpVec)  {  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  oldX[j]  =  point[pj];  }	  	non-compiled	[CE]  illegal  start  of  expression	20	None	add
467	[BUG]  [BUGGY]  tmpVec  =  solveCols;  for(int  j  =  0;  j  <  previousCost;  ++j)  {  point[pj]  =  oldX[pj];  }  [CE]  cannot  find  symbol  solveCols  [FE]                AssertionFailedError      [CONTEXT]        }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;      [BUGGY]  tmpVec  =  solveCols;  for(int  j  =  0;  j  <  previousCost;  ++j)  {  point[pj]  =  oldX[pj];  }  [BUGGY]      residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	432	432	2	replace	tmpVec  =  solveCols;  for(int  j  =  0;  j  <  previousCost;  ++j)  {  point[pj]  =  oldX[pj];  }	  tmpVec    =    previousCost;    for(int    j    =    0;    j    <    solveCols;    ++j)    {    point[pj]    =    oldX[pj];    }    	non-compiled	[CE]  cannot  find  symbol  solveCols	32	None	replace
468	[BUG]  [BUGGY]  tmpVec  =  preres;  for(int  j  =  0;  j  <  solveCols;  ++j)  {  point[pj]  =  oldX[pj];  }  [CE]  cannot  find  symbol  preres  [FE]                  AssertionFailedError      [CONTEXT]        }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;      [BUGGY]  tmpVec  =  preres;  for(int  j  =  0;  j  <  solveCols;  ++j)  {  point[pj]  =  oldX[pj];  }  [BUGGY]      residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	432	432	2	replace	tmpVec  =  preres;  for(int  j  =  0;  j  <  solveCols;  ++j)  {  point[pj]  =  oldX[pj];  }	  tmpVec    =    previousCost;    for(int    j    =    0;    j    <    solveCols;    ++j)    {    point[pj]    =    oldX[pj];    }    	non-compiled	[CE]  cannot  find  symbol  preres	32	None	replace
469	[BUG]  [BUGGY]  tmpVec  =  firstIteration;  for(int  j  =  0;  j  <  solveCols;  ++j)  {  point[pj]  =  oldX[pj];  }  [CE]  incompatible  types  [FE]                    AssertionFailedError      [CONTEXT]        }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;      [BUGGY]  tmpVec  =  firstIteration;  for(int  j  =  0;  j  <  solveCols;  ++j)  {  point[pj]  =  oldX[pj];  }  [BUGGY]      residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	432	432	2	replace	tmpVec  =  firstIteration;  for(int  j  =  0;  j  <  solveCols;  ++j)  {  point[pj]  =  oldX[pj];  }	  tmpVec    =    previousCost;    for(int    j    =    0;    j    <    solveCols;    ++j)    {    point[pj]    =    oldX[pj];    }    	non-compiled	[CE]  incompatible  types	32	None	replace
470	[BUG]  [BUGGY]  tmpVec  =  Math.max(relatives,  oldX);  [CE]  cannot  find  symbol  relatives  [FE]                        AssertionFailedError      [CONTEXT]        }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;      [BUGGY]  tmpVec  =  Math.max(relatives,  oldX);  [BUGGY]      residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	432	432	2	replace	tmpVec  =  Math.max(relatives,  oldX);	  tmpVec    =    Math.max(remainings,    oldX);    	non-compiled	[CE]  cannot  find  symbol  relatives	56	None	replace
471	[BUG]  [BUGGY]  tmpVec  =  tmpVec;  ((  VectorialPointValuePair)previous).setVec(  tmpVec);  [CE]  cannot  find  symbol  [FE]    AssertionFailedError    [CONTEXT]        }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;      [BUGGY]  tmpVec  =  tmpVec;  ((  VectorialPointValuePair)previous).setVec(  tmpVec);  [BUGGY]      oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	432	432	2	replace	tmpVec    =    tmpVec;    ((  VectorialPointValuePair)previous).setVec(  tmpVec);	  	non-compiled	[CE]  cannot  find  symbol	67	None	add
472	[BUG]  [BUGGY]  previousCost  =  permutation[j].remainder;  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  point[pj]  =  oldX[pj];  }  [CE]  cannot  find  symbol  j  [FE]            AssertionFailedError      [CONTEXT]        }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;      [BUGGY]  previousCost  =  permutation[j].remainder;  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  point[pj]  =  oldX[pj];  }  [BUGGY]      residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	432	432	2	replace	previousCost  =  permutation[j].remainder;  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  point[pj]  =  oldX[pj];  }	  if(tmpVec!=    previousCost)    {    cost    =    permutation[j].remainder;    for(int    j    =    0;    j    <    solvedCols;    ++j)    {    point[pj]    =    oldX[pj];    }    	non-compiled	[CE]  cannot  find  symbol  j	109	None	replace
473	[BUG]  [BUGGY]  if(tmpVec!=  previousCost)  {  cost  =  oldRes[j].remainder;  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  point[pj]  =  oldX[pj];  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]        }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;      [BUGGY]  if(tmpVec!=  previousCost)  {  cost  =  oldRes[j].remainder;  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  point[pj]  =  oldX[pj];  }  [BUGGY]      residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	432	432	2	replace	if(tmpVec!=  previousCost)  {  cost  =  oldRes[j].remainder;  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  point[pj]  =  oldX[pj];  }	  if(tmpVec!=    previousCost)    {    cost    =    permutation[j].remainder;    for(int    j    =    0;    j    <    solvedCols;    ++j)    {    point[pj]    =    oldX[pj];    }    	non-compiled	[CE]  illegal  start  of  expression	109	None	replace
474	[BUG]  [BUGGY]  tmpVec  =  preres;  for(int  j  =  0;  j  <  resolvedCols;  ++j)  {  point[pj]  =  oldX[pj].doubleValue();  }  [CE]  cannot  find  symbol  preres  [FE]                  AssertionFailedError      [CONTEXT]        }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;      [BUGGY]  tmpVec  =  preres;  for(int  j  =  0;  j  <  resolvedCols;  ++j)  {  point[pj]  =  oldX[pj].doubleValue();  }  [BUGGY]      residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	432	432	2	replace	tmpVec  =  preres;  for(int  j  =  0;  j  <  resolvedCols;  ++j)  {  point[pj]  =  oldX[pj].doubleValue();  }	  tmpVec    =    previousCost;    for(int    j    =    0;    j    <    resolvedCols;    ++j)    {    point[pj]    =    oldX[pj].doubleValue();    }    	non-compiled	[CE]  cannot  find  symbol  preres	3	None	replace
475	[BUG]  [BUGGY]  previousCost  =  prevCost;  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  int  oldRes  =  oldX[pj];  }  [CE]  cannot  find  symbol  prevCost  [FE]                      AssertionFailedError      [CONTEXT]        }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;      [BUGGY]  previousCost  =  prevCost;  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  int  oldRes  =  oldX[pj];  }  [BUGGY]      residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	432	432	2	replace	previousCost  =  prevCost;  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  int  oldRes  =  oldX[pj];  }	  if(tmpVec!=    previousCost)    {    cost    =    prevCost;    for(int    j    =    0;    j    <    solvedCols;    ++j)    {    int    oldRes    =    oldX[pj];    }    	non-compiled	[CE]  cannot  find  symbol  prevCost	95	None	replace
476	[BUG]  [BUGGY]  tmpVec  =  new  VectorialPointValuePair(previousCost,  pj,  cost);  [CE]  cannot  find  symbol  pj  [FE]                      AssertionFailedError      [CONTEXT]        }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;      [BUGGY]  tmpVec  =  new  VectorialPointValuePair(previousCost,  pj,  cost);  [BUGGY]      residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	432	432	2	replace	tmpVec  =  new  VectorialPointValuePair(previousCost,  pj,  cost);	  tmpVec    =    new    VectorialPointValuePair(last,    previousCost,    cost);    	non-compiled	[CE]  cannot  find  symbol  pj	91	None	replace
477	[BUG]  [BUGGY]  tmpVec  =  new  VectorialPointValuePair(j);  [CE]  cannot  find  symbol  j  [FE]              AssertionFailedError      [CONTEXT]        }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;      [BUGGY]  tmpVec  =  new  VectorialPointValuePair(j);  [BUGGY]      residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	432	432	2	replace	tmpVec  =  new  VectorialPointValuePair(j);	  tmpVec    =    new    VectorialPointValuePair(pj);    	non-compiled	[CE]  cannot  find  symbol  j	28	None	replace
478	[BUG]  [BUGGY]  new  VectorialPointValuePair(previousCost,  oldX,  oldRes,  tmpVec,  cost);  [CE]  no  suitable  constructor  found  for  VectorialPointValuePair(double,double[],double[],double[],double)  [FE]            AssertionFailedError      [CONTEXT]        }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;      [BUGGY]  new  VectorialPointValuePair(previousCost,  oldX,  oldRes,  tmpVec,  cost);  [BUGGY]      residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	432	432	2	replace	new  VectorialPointValuePair(previousCost,  oldX,  oldRes,  tmpVec,  cost);	          oldRes    =    tmpVec;    new    VectorialPointValuePair(previousCost,    oldX,    oldRes,    tmpVec);    	non-compiled	[CE]  no  suitable  constructor  found  for  VectorialPointValuePair(double,double[],double[],double[],double)	41	None	replace
479	[BUG]  [BUGGY]  oldRes  =  tmpVec;  new  VectorialPointValuePair(previousCost,  oldX,  oldRes,  tmpVec,  cost);  [CE]  no  suitable  constructor  found  for  VectorialPointValuePair(double,double[],double[],double[],double)  [FE]              AssertionFailedError      [CONTEXT]        }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;      [BUGGY]  oldRes  =  tmpVec;  new  VectorialPointValuePair(previousCost,  oldX,  oldRes,  tmpVec,  cost);  [BUGGY]      residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	432	432	2	replace	oldRes  =  tmpVec;  new  VectorialPointValuePair(previousCost,  oldX,  oldRes,  tmpVec,  cost);	          oldRes    =    tmpVec;    new    VectorialPointValuePair(previousCost,    oldX,    oldRes,    tmpVec);    	non-compiled	[CE]  no  suitable  constructor  found  for  VectorialPointValuePair(double,double[],double[],double[],double)	41	None	replace
480	[BUG]  [BUGGY]  if(remainings  ==  tmpVec)  {  cost  =  previousCost;  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  oldRes  =  tmpVec;  }  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError      [CONTEXT]        }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;      [BUGGY]  if(remainings  ==  tmpVec)  {  cost  =  previousCost;  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  oldRes  =  tmpVec;  }  [BUGGY]      oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	432	432	2	replace	if(remainings  ==  tmpVec)  {  cost  =  previousCost;  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  oldRes  =  tmpVec;  }	  residuals    =    tmpVec;    if(remainings    ==    tmpVec)    {    cost    =    previousCost;    for(int    j    =    0;    j    <    solvedCols;    ++j)    {    oldRes    =    tmpVec;    }    	non-compiled	[CE]  illegal  start  of  expression	75	None	replace
481	[BUG]  [BUGGY]  if(remainings  ==  0)  {  residuals  =  oldX;  if(remainings  ==  tmpVec)  {  cost  =  previousCost;  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  oldRes  =  tmpV  [CE]  ';'  expected  [FE]          AssertionFailedError      [CONTEXT]        }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;      [BUGGY]  if(remainings  ==  0)  {  residuals  =  oldX;  if(remainings  ==  tmpVec)  {  cost  =  previousCost;  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  oldRes  =  tmpV  [BUGGY]      oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	432	432	2	replace	if(remainings  ==  0)  {  residuals  =  oldX;  if(remainings  ==  tmpVec)  {  cost  =  previousCost;  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  oldRes  =  tmpV	  residuals    =    tmpVec;    if(remainings    ==    tmpVec)    {    cost    =    previousCost;    for(int    j    =    0;    j    <    solvedCols;    ++j)    {    oldRes    =    tmpVec;    }    	non-compiled	[CE]  ';'  expected	75	None	replace
482	[BUG]  [BUGGY]  if(remainings  ==  0)  {  residuals  =  oldX;  if(remainings  ==  tmpVec)  {  cost  =  previousCost;  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  oldRe  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]        }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;      [BUGGY]  if(remainings  ==  0)  {  residuals  =  oldX;  if(remainings  ==  tmpVec)  {  cost  =  previousCost;  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  oldRe  [BUGGY]      oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	432	432	2	replace	if(remainings  ==  0)  {  residuals  =  oldX;  if(remainings  ==  tmpVec)  {  cost  =  previousCost;  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  oldRe	  residuals    =    tmpVec;    if(remainings    ==    tmpVec)    {    cost    =    previousCost;    for(int    j    =    0;    j    <    solvedCols;    ++j)    {    oldRes    =    tmpVec;    }    	non-compiled	[CE]  illegal  start  of  expression	75	None	replace
483	[BUG]  [BUGGY]  if(remainings  ==  0)  {  residuals  =  oldX;  if(remainings  ==  tmpVec)  {  cost  =  previousCost;  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  oldRes  =  tmpVe  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]        }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;      [BUGGY]  if(remainings  ==  0)  {  residuals  =  oldX;  if(remainings  ==  tmpVec)  {  cost  =  previousCost;  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  oldRes  =  tmpVe  [BUGGY]      oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	432	432	2	replace	if(remainings  ==  0)  {  residuals  =  oldX;  if(remainings  ==  tmpVec)  {  cost  =  previousCost;  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  oldRes  =  tmpVe	  residuals    =    tmpVec;    if(remainings    ==    tmpVec)    {    cost    =    previousCost;    for(int    j    =    0;    j    <    solvedCols;    ++j)    {    oldRes    =    tmpVec;    }    	non-compiled	[CE]  ';'  expected	75	None	replace
484	[BUG]  [BUGGY]  oldRes  =  tmpVec;  new  VectorialPointValuePair(oldX,  oldRes,  tmpVec,  tmpVec);  [CE]  no  suitable  constructor  found  for  VectorialPointValuePair(double[],double[],double[],double[])  [FE]              AssertionFailedError      [CONTEXT]        }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;      [BUGGY]  oldRes  =  tmpVec;  new  VectorialPointValuePair(oldX,  oldRes,  tmpVec,  tmpVec);  [BUGGY]      residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	432	432	2	replace	oldRes  =  tmpVec;  new  VectorialPointValuePair(oldX,  oldRes,  tmpVec,  tmpVec);	          oldRes    =    tmpVec;    new    VectorialPointValuePair(oldX,    oldRes,    tmpVec);    	non-compiled	[CE]  no  suitable  constructor  found  for  VectorialPointValuePair(double[],double[],double[],double[])	42	None	replace
485	[BUG]  [BUGGY]  if(tmpVec  >  oldRes)  {  oldRes  =  tmpVec;  }  else  {  cost  =  previousCost;  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  point[pj]  =  point[pj];  }  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError      [CONTEXT]        }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;      [BUGGY]  if(tmpVec  >  oldRes)  {  oldRes  =  tmpVec;  }  else  {  cost  =  previousCost;  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  point[pj]  =  point[pj];  }  [BUGGY]      residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	432	432	2	replace	if(tmpVec  >  oldRes)  {  oldRes  =  tmpVec;  }  else  {  cost  =  previousCost;  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  point[pj]  =  point[pj];  }	          oldRes    =    tmpVec;    if(remainings    >    oldRes)    {    oldRes    =    tmpVec;    }    else    {    cost    =    previousCost;    for(int    j    =    0;    j    <    solvedCols;    ++j)    {    point[pj]    =    point[pj];    }    	non-compiled	[CE]  illegal  start  of  expression	120	None	replace
486	[BUG]  [BUGGY]  if(remainings  >  oldRes)  {  oldRes  =  tmpVec;  }  else  {  cost  =  previousCost;  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  point[pj]  =  point[pj];  }  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError      [CONTEXT]        }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;      [BUGGY]  if(remainings  >  oldRes)  {  oldRes  =  tmpVec;  }  else  {  cost  =  previousCost;  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  point[pj]  =  point[pj];  }  [BUGGY]      residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	432	432	2	replace	if(remainings  >  oldRes)  {  oldRes  =  tmpVec;  }  else  {  cost  =  previousCost;  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  point[pj]  =  point[pj];  }	          oldRes    =    tmpVec;    if(remainings    >    oldRes)    {    oldRes    =    tmpVec;    }    else    {    cost    =    previousCost;    for(int    j    =    0;    j    <    solvedCols;    ++j)    {    point[pj]    =    point[pj];    }    	non-compiled	[CE]  illegal  start  of  expression	120	None	replace
487	[BUG]  [BUGGY]  if(remainings  >  oldRes)  {  oldRes  =  tmpVec;  }  else  {  cost  =  previousCost;  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  point[pj]  =  point[pj];  }  }  [CE]  cannot  find  symbol  remainings  [FE]            AssertionFailedError      [CONTEXT]        }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;      [BUGGY]  if(remainings  >  oldRes)  {  oldRes  =  tmpVec;  }  else  {  cost  =  previousCost;  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  point[pj]  =  point[pj];  }  }  [BUGGY]      residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	432	432	2	replace	if(remainings  >  oldRes)  {  oldRes  =  tmpVec;  }  else  {  cost  =  previousCost;  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  point[pj]  =  point[pj];  }  }	          oldRes    =    tmpVec;    if(remainings    >    oldRes)    {    oldRes    =    tmpVec;    }    else    {    cost    =    previousCost;    for(int    j    =    0;    j    <    solvedCols;    ++j)    {    point[pj]    =    point[pj];    }    	non-compiled	[CE]  cannot  find  symbol  remainings	120	None	replace
488	[BUG]  [BUGGY]  tmpVec  =  new  VectorialPointValuePair(previousCost);  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  point[j]  =  oldX[pj];  }  [CE]  no  suitable  constructor  found  for  VectorialPointValuePair(double)  [FE]                  AssertionFailedError      [CONTEXT]        }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;      [BUGGY]  tmpVec  =  new  VectorialPointValuePair(previousCost);  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  point[j]  =  oldX[pj];  }  [BUGGY]      residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	432	432	2	replace	tmpVec  =  new  VectorialPointValuePair(previousCost);  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  point[j]  =  oldX[pj];  }	  if(tmpVec!=    null)    {    cost    =    previousCost;    for(int    j    =    0;    j    <    solvedCols;    ++j)    {    point[j]    =    oldX[pj];    }    	non-compiled	[CE]  no  suitable  constructor  found  for  VectorialPointValuePair(double)	92	None	replace
489	[BUG]  [BUGGY]  if(tmpVec!=  0)  {  residuals  =  tmpVec;  tmpVec  =  tmpVec;  }  [CE]  incomparable  types:  double[]  and  int  [FE]    AssertionFailedError    [CONTEXT]        }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;      [BUGGY]  if(tmpVec!=  0)  {  residuals  =  tmpVec;  tmpVec  =  tmpVec;  }  [BUGGY]      oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	432	432	2	replace	if(tmpVec!=  0)  {  residuals  =  tmpVec;  tmpVec  =  tmpVec;  }	  residuals    =    tmpVec;    tmpVec    =    tmpVec;    	non-compiled	[CE]  incomparable  types:  double[]  and  int	19	None	replace
490	[BUG]  [BUGGY]  if(tmpVec  <  =  0)  {  residuals  =  tmpVec;  tmpVec  =  tmpVec;  }  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]        }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;      [BUGGY]  if(tmpVec  <  =  0)  {  residuals  =  tmpVec;  tmpVec  =  tmpVec;  }  [BUGGY]      oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	432	432	2	replace	if(tmpVec  <  =  0)  {  residuals  =  tmpVec;  tmpVec  =  tmpVec;  }	  residuals    =    tmpVec;    tmpVec    =    tmpVec;    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
491	[BUG]  [BUGGY]  if(tmpVec!=  0)  {  oldRes  =  tmpVec;  tmpVec  =  tmpVec;  }  [CE]  incomparable  types:  double[]  and  int  [FE]    AssertionFailedError    [CONTEXT]        }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;      [BUGGY]  if(tmpVec!=  0)  {  oldRes  =  tmpVec;  tmpVec  =  tmpVec;  }  [BUGGY]      residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	432	432	2	replace	if(tmpVec!=  0)  {  oldRes  =  tmpVec;  tmpVec  =  tmpVec;  }	          oldRes    =    tmpVec;    tmpVec    =    tmpVec;    	non-compiled	[CE]  incomparable  types:  double[]  and  int	40	None	replace
492	[BUG]  [BUGGY]  tmpVec  =  new  VectorialPointValuePair(permutation,  point);  [CE]  no  suitable  constructor  found  for  VectorialPointValuePair(int[],double[])  [FE]            AssertionFailedError      [CONTEXT]        }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;      [BUGGY]  tmpVec  =  new  VectorialPointValuePair(permutation,  point);  [BUGGY]      residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	432	432	2	replace	tmpVec  =  new  VectorialPointValuePair(permutation,  point);	  tmpVec    =    permutation[0];    	non-compiled	[CE]  no  suitable  constructor  found  for  VectorialPointValuePair(int[],double[])	11	None	replace
493	[BUG]  [BUGGY]  tmpVec  =  oldX[0];  [CE]  incompatible  types  [FE]              AssertionFailedError      [CONTEXT]        }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;      [BUGGY]  tmpVec  =  oldX[0];  [BUGGY]      residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	432	432	2	replace	tmpVec  =  oldX[0];	  tmpVec    =    permutation[0];    	non-compiled	[CE]  incompatible  types	11	None	replace
494	[BUG]  [BUGGY]  if(tmpVec!=  preRed)  {  cost  =  permutation[j];  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  permutation[j]  =  oldX[pj];  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]        }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;      [BUGGY]  if(tmpVec!=  preRed)  {  cost  =  permutation[j];  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  permutation[j]  =  oldX[pj];  }  [BUGGY]      residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	432	432	2	replace	if(tmpVec!=  preRed)  {  cost  =  permutation[j];  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  permutation[j]  =  oldX[pj];  }	  if(tmpVec!=    previousCost)    {    cost    =    permutation[j];    for(int    j    =    0;    j    <    solvedCols;    ++j)    {    permutation[j]    =    oldX[pj];    }    	non-compiled	[CE]  illegal  start  of  expression	124	None	replace
495	[BUG]  [BUGGY]  if(tmpVec!=  previousCost)  {  cost  =  preRed[j];  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  permutation[j]  =  oldX[pj];  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]        }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;      [BUGGY]  if(tmpVec!=  previousCost)  {  cost  =  preRed[j];  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  permutation[j]  =  oldX[pj];  }  [BUGGY]      residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	432	432	2	replace	if(tmpVec!=  previousCost)  {  cost  =  preRed[j];  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  permutation[j]  =  oldX[pj];  }	  if(tmpVec!=    previousCost)    {    cost    =    permutation[j];    for(int    j    =    0;    j    <    solvedCols;    ++j)    {    permutation[j]    =    oldX[pj];    }    	non-compiled	[CE]  illegal  start  of  expression	124	None	replace
496	[BUG]  [BUGGY]  res  =  oldX;  [CE]  cannot  find  symbol  res  [FE]                  AssertionFailedError      [CONTEXT]        }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;      [BUGGY]  res  =  oldX;  [BUGGY]      oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	432	432	2	replace	res  =  oldX;	  res    =    oldRes;    	non-compiled	[CE]  cannot  find  symbol  res	36	None	replace
497	[BUG]  [BUGGY]  tmpVec  =  new  VectorialPointValuePair(pj,  point);  [CE]  cannot  find  symbol  pj  [FE]              AssertionFailedError      [CONTEXT]        }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;      [BUGGY]  tmpVec  =  new  VectorialPointValuePair(pj,  point);  [BUGGY]      residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	432	432	2	replace	tmpVec  =  new  VectorialPointValuePair(pj,  point);	  tmpVec    =    new    VectorialPointValuePair(pj,    previousCost);    	non-compiled	[CE]  cannot  find  symbol  pj	58	None	replace
498	[BUG]  [BUGGY]  tmpVec  =  new  VectorialPointValuePair(previousCost,  preRed,  cost,  oldX);  [CE]  no  suitable  constructor  found  for  VectorialPointValuePair(double,double,double,double[])  [FE]                  AssertionFailedError      [CONTEXT]        }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;      [BUGGY]  tmpVec  =  new  VectorialPointValuePair(previousCost,  preRed,  cost,  oldX);  [BUGGY]      residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	432	432	2	replace	tmpVec  =  new  VectorialPointValuePair(previousCost,  preRed,  cost,  oldX);	  tmpVec    =    new    VectorialPointValuePair(previousCost,    preRed,    cost);    	non-compiled	[CE]  no  suitable  constructor  found  for  VectorialPointValuePair(double,double,double,double[])	8	None	replace
499	[BUG]  [BUGGY]  if(tmpVec!=  0)  {  oldRes  =  tmpVec;  oldRes  =  tmpVec;  }  else  {  cost  =  previousCost;  }  [CE]  incomparable  types:  double[]  and  int  [FE]    AssertionFailedError    [CONTEXT]        }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;      [BUGGY]  if(tmpVec!=  0)  {  oldRes  =  tmpVec;  oldRes  =  tmpVec;  }  else  {  cost  =  previousCost;  }  [BUGGY]      residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	432	432	2	replace	if(tmpVec!=  0)  {  oldRes  =  tmpVec;  oldRes  =  tmpVec;  }  else  {  cost  =  previousCost;  }	          oldRes    =    tmpVec;    oldRes    =    tmpVec;    	non-compiled	[CE]  incomparable  types:  double[]  and  int	38	None	replace
500	[BUG]  [BUGGY]  if(tmpVec!=  0)  {  oldRes  =  tmpVec;  oldRes  =  tmpVec;  }  else  {  preRed  =  previousCost;  }  [CE]  incomparable  types:  double[]  and  int  [FE]      AssertionFailedError    [CONTEXT]        }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;      [BUGGY]  if(tmpVec!=  0)  {  oldRes  =  tmpVec;  oldRes  =  tmpVec;  }  else  {  preRed  =  previousCost;  }  [BUGGY]      residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	432	432	2	replace	if(tmpVec!=  0)  {  oldRes  =  tmpVec;  oldRes  =  tmpVec;  }  else  {  preRed  =  previousCost;  }	          oldRes    =    tmpVec;    oldRes    =    tmpVec;    	non-compiled	[CE]  incomparable  types:  double[]  and  int	38	None	replace
501	[BUG]  [BUGGY]  tmpVec  =  prevCost;  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  points[j]  =  oldX[pj];  }  [CE]  cannot  find  symbol  prevCost  [FE]                        AssertionFailedError      [CONTEXT]        }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;      [BUGGY]  tmpVec  =  prevCost;  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  points[j]  =  oldX[pj];  }  [BUGGY]      residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	432	432	2	replace	tmpVec  =  prevCost;  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  points[j]  =  oldX[pj];  }	  tmpVec    =    previousCost;    for(int    j    =    0;    j    <    solvedCols;    ++j)    {    points[j]    =    oldX[pj];    }    	non-compiled	[CE]  cannot  find  symbol  prevCost	66	None	replace
502	[BUG]  [BUGGY]  tmpVec  =  cost;  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  points[j]  =  oldX[pj];  }  [CE]  incompatible  types  [FE]                          AssertionFailedError      [CONTEXT]        }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;      [BUGGY]  tmpVec  =  cost;  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  points[j]  =  oldX[pj];  }  [BUGGY]      residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	432	432	2	replace	tmpVec  =  cost;  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  points[j]  =  oldX[pj];  }	  tmpVec    =    previousCost;    for(int    j    =    0;    j    <    solvedCols;    ++j)    {    points[j]    =    oldX[pj];    }    	non-compiled	[CE]  incompatible  types	66	None	replace
503	[BUG]  [BUGGY]  if(tmpVec!=  preRed)  {  cost  =  permutation[j];  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  point[pj]  =  oldX[pj];  }  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]        }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;      [BUGGY]  if(tmpVec!=  preRed)  {  cost  =  permutation[j];  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  point[pj]  =  oldX[pj];  }  [BUGGY]      residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	432	432	2	replace	if(tmpVec!=  preRed)  {  cost  =  permutation[j];  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  point[pj]  =  oldX[pj];  }	  if(tmpVec!=    previousCost)    {    cost    =    permutation[j];    for(int    j    =    0;    j    <    solvedCols;    ++j)    {    point[pj]    =    oldX[pj];    }    	non-compiled	[CE]  illegal  start  of  expression	100	None	replace
504	[BUG]  [BUGGY]  if(tmpVec!=  previousCost)  {  cost  =  preRed[j];  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  point[pj]  =  oldX[pj];  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]        }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;      [BUGGY]  if(tmpVec!=  previousCost)  {  cost  =  preRed[j];  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  point[pj]  =  oldX[pj];  }  [BUGGY]      residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	432	432	2	replace	if(tmpVec!=  previousCost)  {  cost  =  preRed[j];  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  point[pj]  =  oldX[pj];  }	  if(tmpVec!=    previousCost)    {    cost    =    permutation[j];    for(int    j    =    0;    j    <    solvedCols;    ++j)    {    point[pj]    =    oldX[pj];    }    	non-compiled	[CE]  illegal  start  of  expression	100	None	replace
505	[BUG]  [BUGGY]  tmpVec  =  oldX[0].doubleValue();  [CE]  double  cannot  be  dereferenced  [FE]              AssertionFailedError      [CONTEXT]        }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;      [BUGGY]  tmpVec  =  oldX[0].doubleValue();  [BUGGY]      residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	432	432	2	replace	tmpVec  =  oldX[0].doubleValue();	  tmpVec    =    permutation[0].doubleValue();    	non-compiled	[CE]  double  cannot  be  dereferenced	86	None	replace
506	[BUG]  [BUGGY]  tmpVec  =  point[0].doubleValue();  [CE]  double  cannot  be  dereferenced  [FE]                AssertionFailedError      [CONTEXT]        }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;      [BUGGY]  tmpVec  =  point[0].doubleValue();  [BUGGY]      residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	432	432	2	replace	tmpVec  =  point[0].doubleValue();	  tmpVec    =    permutation[0].doubleValue();    	non-compiled	[CE]  double  cannot  be  dereferenced	86	None	replace
507	[BUG]  [BUGGY]  if(tmpVec  >  oldRes)  {  oldRes  =  tmpVec;  }  else  {  cost  =  previousCost;  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  point[pj]  =  point[pj].getX();  }  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]        }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;      [BUGGY]  if(tmpVec  >  oldRes)  {  oldRes  =  tmpVec;  }  else  {  cost  =  previousCost;  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  point[pj]  =  point[pj].getX();  }  [BUGGY]      residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	432	432	2	replace	if(tmpVec  >  oldRes)  {  oldRes  =  tmpVec;  }  else  {  cost  =  previousCost;  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  point[pj]  =  point[pj].getX();  }	          oldRes    =    tmpVec;    if(remainings    >    oldRes)    {    oldRes    =    tmpVec;    }    else    {    cost    =    previousCost;    for(int    j    =    0;    j    <    solvedCols;    ++j)    {    point[pj]    =    point[pj].getX();    }    	non-compiled	[CE]  illegal  start  of  expression	122	None	replace
508	[BUG]  [BUGGY]  if(remainings  >  oldRes)  {  oldRes  =  tmpVec;  }  else  {  cost  =  previousCost;  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  point[pj]  =  point[pj].getX();  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]        }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;      [BUGGY]  if(remainings  >  oldRes)  {  oldRes  =  tmpVec;  }  else  {  cost  =  previousCost;  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  point[pj]  =  point[pj].getX();  }  [BUGGY]      residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	432	432	2	replace	if(remainings  >  oldRes)  {  oldRes  =  tmpVec;  }  else  {  cost  =  previousCost;  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  point[pj]  =  point[pj].getX();  }	          oldRes    =    tmpVec;    if(remainings    >    oldRes)    {    oldRes    =    tmpVec;    }    else    {    cost    =    previousCost;    for(int    j    =    0;    j    <    solvedCols;    ++j)    {    point[pj]    =    point[pj].getX();    }    	non-compiled	[CE]  illegal  start  of  expression	122	None	replace
509	[BUG]  [BUGGY]  if(tmpVec!=  preRed)  {  cost  =  permutation[j];  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  point[pj]  =  oldX[pj].doubleValue();  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]        }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;      [BUGGY]  if(tmpVec!=  preRed)  {  cost  =  permutation[j];  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  point[pj]  =  oldX[pj].doubleValue();  }  [BUGGY]      residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	432	432	2	replace	if(tmpVec!=  preRed)  {  cost  =  permutation[j];  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  point[pj]  =  oldX[pj].doubleValue();  }	  if(tmpVec!=    previousCost)    {    cost    =    permutation[j];    for(int    j    =    0;    j    <    solvedCols;    ++j)    {    point[pj]    =    oldX[pj].doubleValue();    }    	non-compiled	[CE]  illegal  start  of  expression	104	None	replace
510	[BUG]  [BUGGY]  if(tmpVec!=  preRed)  {  cost  =  preRed;  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  permutation[j]  =  oldX[pj];  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]        }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;      [BUGGY]  if(tmpVec!=  preRed)  {  cost  =  preRed;  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  permutation[j]  =  oldX[pj];  }  [BUGGY]      residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	432	432	2	replace	if(tmpVec!=  preRed)  {  cost  =  preRed;  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  permutation[j]  =  oldX[pj];  }	  if(tmpVec!=    previousCost)    {    cost    =    preRed;    for(int    j    =    0;    j    <    solvedCols;    ++j)    {    permutation[j]    =    oldX[pj];    }    	non-compiled	[CE]  illegal  start  of  expression	125	None	replace
511	[BUG]  [BUGGY]  résultats  =  tmpVec.results;  [CE]  cannot  find  symbol  r  [FE]              AssertionFailedError      [CONTEXT]        }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;      [BUGGY]  résultats  =  tmpVec.results;  [BUGGY]      oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	432	432	2	replace	résultats  =  tmpVec.results;	  results    =    tmpVec.results;    	non-compiled	[CE]  cannot  find  symbol  r	78	None	replace
512	[BUG]  [BUGGY]  remainders  -=  oldX  +  1;  [CE]  cannot  find  symbol  remainders  [FE]              AssertionFailedError      [CONTEXT]        }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;      [BUGGY]  remainders  -=  oldX  +  1;  [BUGGY]      oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	432	432	2	replace	remainders  -=  oldX  +  1;	  residuals    -=    oldRes    +    1;    	non-compiled	[CE]  cannot  find  symbol  remainders	96	None	replace
513	[BUG]  [BUGGY]  tmpVec  =  Math.max(relativeTolerance,  costRelativeTolerance);  [CE]  cannot  find  symbol  relativeTolerance  [FE]                    AssertionFailedError      [CONTEXT]        }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;      [BUGGY]  tmpVec  =  Math.max(relativeTolerance,  costRelativeTolerance);  [BUGGY]      residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	432	432	2	replace	tmpVec  =  Math.max(relativeTolerance,  costRelativeTolerance);	  tmpVec    =    Math.max(relativeTolerance,    previousCost);    	non-compiled	[CE]  cannot  find  symbol  relativeTolerance	80	None	replace
514	[BUG]  [BUGGY]  tmpVec  =  Math.max(remainder,  previousCost);  [CE]  cannot  find  symbol  remainder  [FE]                      AssertionFailedError      [CONTEXT]        }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;      [BUGGY]  tmpVec  =  Math.max(remainder,  previousCost);  [BUGGY]      residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	432	432	2	replace	tmpVec  =  Math.max(remainder,  previousCost);	  tmpVec    =    Math.max(relativeTolerance,    previousCost);    	non-compiled	[CE]  cannot  find  symbol  remainder	80	None	replace
515	[BUG]  [BUGGY]  if(tmpVec!=  preRed)  {  cost  =  lastIteration;  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  permutation[j]  =  oldX[pj];  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]        }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;      [BUGGY]  if(tmpVec!=  preRed)  {  cost  =  lastIteration;  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  permutation[j]  =  oldX[pj];  }  [BUGGY]      residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	432	432	2	replace	if(tmpVec!=  preRed)  {  cost  =  lastIteration;  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  permutation[j]  =  oldX[pj];  }	  if(tmpVec!=    preRed)    {    cost    =    previousCost;    for(int    j    =    0;    j    <    solvedCols;    ++j)    {    permutation[j]    =    oldX[pj];    }    	non-compiled	[CE]  illegal  start  of  expression	123	None	replace
516	[BUG]  [BUGGY]  if(tmpVec!=  preRed)  {  cost  =  previousCost;  for(int  j  =  0;  j  <  resolvedCols;  ++j)  {  permutation[j]  =  oldX[pj];  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]        }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;      [BUGGY]  if(tmpVec!=  preRed)  {  cost  =  previousCost;  for(int  j  =  0;  j  <  resolvedCols;  ++j)  {  permutation[j]  =  oldX[pj];  }  [BUGGY]      residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	432	432	2	replace	if(tmpVec!=  preRed)  {  cost  =  previousCost;  for(int  j  =  0;  j  <  resolvedCols;  ++j)  {  permutation[j]  =  oldX[pj];  }	  if(tmpVec!=    preRed)    {    cost    =    previousCost;    for(int    j    =    0;    j    <    solvedCols;    ++j)    {    permutation[j]    =    oldX[pj];    }    	non-compiled	[CE]  illegal  start  of  expression	123	None	replace
517	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]        }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;      [BUGGY]  residuals    =    tmpVec;    tmpVec  =  residuals;  tmpVec  =  oldX;  tmpVec  =  residuals;  [BUGGY]      oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	432	432	2	add	residuals        =        tmpVec;        tmpVec    =    residuals;    tmpVec  =  oldX;  tmpVec  =  residuals;	  	compilable	  [FE]  AssertionFailedError  	23	2	add
518	[BUG]  [BUGGY]  residuals    =    tmpVec;    tmpVec  =  residuals;  tmpVec  =  oldX;  tmpVec  =  residuals;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]        }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;      [BUGGY]  residuals    =    tmpVec;    tmpVec  =  residuals;  tmpVec  =  oldX;  tmpVec  =  residuals;  [BUGGY]      oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	432	432	2	replace	residuals        =        tmpVec;        tmpVec    =    residuals;    tmpVec  =  oldX;  tmpVec  =  residuals;	  	compilable	  [FE]  AssertionFailedError  	23	2	add
519	[BUG]  [BUGGY]  remainders  =  oldX;  [CE]  cannot  find  symbol  remainders  [FE]              AssertionFailedError      [CONTEXT]        }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;      [BUGGY]  remainders  =  oldX;  [BUGGY]      oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	432	432	2	replace	remainders  =  oldX;	  remainders    =    oldRes;    	non-compiled	[CE]  cannot  find  symbol  remainders	51	None	replace
520	[BUG]  [BUGGY]  if(resolvedCols  >  0)  {  tmpVec  =  previousCost;  for(int  j  =  0;  j  <  resolvedCols;  ++j)  {  point[pj]  =  oldX[pj].doubleValue();  }  }  [CE]  cannot  find  symbol  resolvedCols  [FE]                  AssertionFailedError      [CONTEXT]        }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;      [BUGGY]  if(resolvedCols  >  0)  {  tmpVec  =  previousCost;  for(int  j  =  0;  j  <  resolvedCols;  ++j)  {  point[pj]  =  oldX[pj].doubleValue();  }  }  [BUGGY]      residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	432	432	2	replace	if(resolvedCols  >  0)  {  tmpVec  =  previousCost;  for(int  j  =  0;  j  <  resolvedCols;  ++j)  {  point[pj]  =  oldX[pj].doubleValue();  }  }	  tmpVec    =    previousCost;    for(int    j    =    0;    j    <    resolvedCols;    ++j)    {    point[pj]    =    oldX[pj].doubleValue();    }    	non-compiled	[CE]  cannot  find  symbol  resolvedCols	3	None	replace
521	[BUG]  [BUGGY]  if(resolvedCols  >  0)  {  tmpVec  =  previousCost;  for(int  j  =  0;  j  <  resolvedCols;  ++j)  {  point[pj]  =  oldX[pj].doubleValue();  }  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]        }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;      [BUGGY]  if(resolvedCols  >  0)  {  tmpVec  =  previousCost;  for(int  j  =  0;  j  <  resolvedCols;  ++j)  {  point[pj]  =  oldX[pj].doubleValue();  }  [BUGGY]      residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	432	432	2	replace	if(resolvedCols  >  0)  {  tmpVec  =  previousCost;  for(int  j  =  0;  j  <  resolvedCols;  ++j)  {  point[pj]  =  oldX[pj].doubleValue();  }	  tmpVec    =    previousCost;    for(int    j    =    0;    j    <    resolvedCols;    ++j)    {    point[pj]    =    oldX[pj].doubleValue();    }    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
522	[BUG]  [BUGGY]  tmpVec  =  tmpVec;  ifVec  =  tmpVec;  [CE]  cannot  find  symbol  ifVec  [FE]    AssertionFailedError    [CONTEXT]        }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;      [BUGGY]  tmpVec  =  tmpVec;  ifVec  =  tmpVec;  [BUGGY]      oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	432	432	2	replace	tmpVec    =    tmpVec;    ifVec  =  tmpVec;	  	non-compiled	[CE]  cannot  find  symbol  ifVec	67	None	add
523	[BUG]  [BUGGY]  tmpVec  -=  tmpVec;  [CE]  bad  operand  types  for  binary  operator  '-'  [FE]              AssertionFailedError      [CONTEXT]        }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;      [BUGGY]  tmpVec  -=  tmpVec;  [BUGGY]      oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	432	432	2	replace	tmpVec  -=  tmpVec;	  residuals    -=    tmpVec;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '-'	117	None	replace
524	[BUG]  [BUGGY]  tmpVec  =  cost;  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  permutation[j]  =  oldX[pj];  }  [CE]  incompatible  types  [FE]              AssertionFailedError      [CONTEXT]        }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;      [BUGGY]  tmpVec  =  cost;  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  permutation[j]  =  oldX[pj];  }  [BUGGY]      residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	432	432	2	replace	tmpVec  =  cost;  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  permutation[j]  =  oldX[pj];  }	  tmpVec    =    previousCost;    for(int    j    =    0;    j    <    solvedCols;    ++j)    {    permutation[j]    =    oldX[pj];    }    	non-compiled	[CE]  incompatible  types	6	None	replace
525	[BUG]  [BUGGY]  tmpVec  =  new  VectorialPointValuePair(new  VectorialPointValuePair(oldX,  oldRes));  [CE]  no  suitable  constructor  found  for  VectorialPointValuePair(VectorialPointValuePair)  [FE]              AssertionFailedError      [CONTEXT]        }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;      [BUGGY]  tmpVec  =  new  VectorialPointValuePair(new  VectorialPointValuePair(oldX,  oldRes));  [BUGGY]      residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	432	432	2	replace	tmpVec  =  new  VectorialPointValuePair(new  VectorialPointValuePair(oldX,  oldRes));	  tmpVec    =    new    VectorialPointValuePair(oldX);    	non-compiled	[CE]  no  suitable  constructor  found  for  VectorialPointValuePair(VectorialPointValuePair)	74	None	replace
526	[BUG]  [BUGGY]  tmpVec  =  new  VectorialPointValuePair(current,  oldX);  [CE]  no  suitable  constructor  found  for  VectorialPointValuePair(VectorialPointValuePair,double[])  [FE]                AssertionFailedError      [CONTEXT]        }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;      [BUGGY]  tmpVec  =  new  VectorialPointValuePair(current,  oldX);  [BUGGY]      residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	432	432	2	replace	tmpVec  =  new  VectorialPointValuePair(current,  oldX);	  tmpVec    =    new    VectorialPointValuePair(oldX);    	non-compiled	[CE]  no  suitable  constructor  found  for  VectorialPointValuePair(VectorialPointValuePair,double[])	74	None	replace
527	[BUG]  [BUGGY]  residuals    =    tmpVec;    tmpVec  =  tmpVec;  newRes  =  tmpVec;  tmpVec  =  tmpVec;  [CE]  cannot  find  symbol  newRes  [FE]    AssertionFailedError    [CONTEXT]        }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;      [BUGGY]  residuals    =    tmpVec;    tmpVec  =  tmpVec;  newRes  =  tmpVec;  tmpVec  =  tmpVec;  [BUGGY]      oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	432	432	2	replace	residuals        =        tmpVec;        tmpVec    =    tmpVec;    newRes  =  tmpVec;  tmpVec  =  tmpVec;	  	non-compiled	[CE]  cannot  find  symbol  newRes	18	None	add
528	[BUG]  [BUGGY]  oldRes  =  tmpVec;  new  VectorialPointValuePair(previousCost,  oldX,  oldRes,  tmpVec,  tmpVec);  [CE]  no  suitable  constructor  found  for  VectorialPointValuePair(double,double[],double[],double[],double[])  [FE]            AssertionFailedError      [CONTEXT]        }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;      [BUGGY]  oldRes  =  tmpVec;  new  VectorialPointValuePair(previousCost,  oldX,  oldRes,  tmpVec,  tmpVec);  [BUGGY]      residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	432	432	2	replace	oldRes  =  tmpVec;  new  VectorialPointValuePair(previousCost,  oldX,  oldRes,  tmpVec,  tmpVec);	          oldRes    =    tmpVec;    new    VectorialPointValuePair(previousCost,    oldX,    oldRes,    tmpVec);    	non-compiled	[CE]  no  suitable  constructor  found  for  VectorialPointValuePair(double,double[],double[],double[],double[])	41	None	replace
529	[BUG]  [BUGGY]  tmpVec  =  cost;  for(int  j  =  0;  j  <  solveCols;  ++j)  {  point[j]  =  oldX[pj];  }  [CE]  incompatible  types  [FE]                      AssertionFailedError      [CONTEXT]        }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;      [BUGGY]  tmpVec  =  cost;  for(int  j  =  0;  j  <  solveCols;  ++j)  {  point[j]  =  oldX[pj];  }  [BUGGY]      residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	432	432	2	replace	tmpVec  =  cost;  for(int  j  =  0;  j  <  solveCols;  ++j)  {  point[j]  =  oldX[pj];  }	  tmpVec    =    previousCost;    for(int    j    =    0;    j    <    solveCols;    ++j)    {    point[j]    =    oldX[pj];    }    	non-compiled	[CE]  incompatible  types	65	None	replace
530	[BUG]  [BUGGY]  tmpVec  =  prered;  for(int  j  =  0;  j  <  solveCols;  ++j)  {  point[j]  =  oldX[pj];  }  [CE]  cannot  find  symbol  prered  [FE]                        AssertionFailedError      [CONTEXT]        }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;      [BUGGY]  tmpVec  =  prered;  for(int  j  =  0;  j  <  solveCols;  ++j)  {  point[j]  =  oldX[pj];  }  [BUGGY]      residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	432	432	2	replace	tmpVec  =  prered;  for(int  j  =  0;  j  <  solveCols;  ++j)  {  point[j]  =  oldX[pj];  }	  tmpVec    =    previousCost;    for(int    j    =    0;    j    <    solveCols;    ++j)    {    point[j]    =    oldX[pj];    }    	non-compiled	[CE]  cannot  find  symbol  prered	65	None	replace
531	[BUG]  [BUGGY]  if(resolvedCols  >  0)  {  tmpVec  =  previousCost;  for(int  j  =  0;  j  <  resolvedCols;  ++j)  {  point[j]  =  oldX[pj];  }  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]        }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;      [BUGGY]  if(resolvedCols  >  0)  {  tmpVec  =  previousCost;  for(int  j  =  0;  j  <  resolvedCols;  ++j)  {  point[j]  =  oldX[pj];  }  [BUGGY]      residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	432	432	2	replace	if(resolvedCols  >  0)  {  tmpVec  =  previousCost;  for(int  j  =  0;  j  <  resolvedCols;  ++j)  {  point[j]  =  oldX[pj];  }	  tmpVec    =    previousCost;    for(int    j    =    0;    j    <    resolvedCols;    ++j)    {    point[j]    =    oldX[pj];    }    	non-compiled	[CE]  illegal  start  of  expression	64	None	replace
532	[BUG]  [BUGGY]  tmpVec  =  prered;  for(int  j  =  0;  j  <  resolvedCols;  ++j)  {  point[j]  =  oldX[pj];  }  [CE]  cannot  find  symbol  prered  [FE]                      AssertionFailedError      [CONTEXT]        }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;      [BUGGY]  tmpVec  =  prered;  for(int  j  =  0;  j  <  resolvedCols;  ++j)  {  point[j]  =  oldX[pj];  }  [BUGGY]      residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	432	432	2	replace	tmpVec  =  prered;  for(int  j  =  0;  j  <  resolvedCols;  ++j)  {  point[j]  =  oldX[pj];  }	  tmpVec    =    previousCost;    for(int    j    =    0;    j    <    resolvedCols;    ++j)    {    point[j]    =    oldX[pj];    }    	non-compiled	[CE]  cannot  find  symbol  prered	64	None	replace
533	[BUG]  [BUGGY]  tmpVec  =  new  VectorialPointValuePair(oldX,  oldRes,  tmpVec);  [CE]  no  suitable  constructor  found  for  VectorialPointValuePair(double[],double[],double[])  [FE]              AssertionFailedError      [CONTEXT]        }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;      [BUGGY]  tmpVec  =  new  VectorialPointValuePair(oldX,  oldRes,  tmpVec);  [BUGGY]      residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	432	432	2	replace	tmpVec  =  new  VectorialPointValuePair(oldX,  oldRes,  tmpVec);	  tmpVec    =    new    VectorialPointValuePair(oldX,    oldRes);    	non-compiled	[CE]  no  suitable  constructor  found  for  VectorialPointValuePair(double[],double[],double[])	118	None	replace
534	[BUG]  [BUGGY]  if(tmpVec!=  prevCost)  {  cost  =  prevCost;  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  permutation[j]  =  oldX[pj];  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]        }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;      [BUGGY]  if(tmpVec!=  prevCost)  {  cost  =  prevCost;  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  permutation[j]  =  oldX[pj];  }  [BUGGY]      residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	432	432	2	replace	if(tmpVec!=  prevCost)  {  cost  =  prevCost;  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  permutation[j]  =  oldX[pj];  }	  if(tmpVec!=    previousCost)    {    cost    =    prevCost;    for(int    j    =    0;    j    <    solvedCols;    ++j)    {    permutation[j]    =    oldX[pj];    }    	non-compiled	[CE]  illegal  start  of  expression	72	None	replace
535	[BUG]  [BUGGY]  tmpVec  =  cost;  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  points[pj]  =  oldX[pj];  }  [CE]  incompatible  types  [FE]                  AssertionFailedError      [CONTEXT]        }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;      [BUGGY]  tmpVec  =  cost;  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  points[pj]  =  oldX[pj];  }  [BUGGY]      residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	432	432	2	replace	tmpVec  =  cost;  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  points[pj]  =  oldX[pj];  }	  tmpVec    =    previousCost;    for(int    j    =    0;    j    <    solvedCols;    ++j)    {    points[pj]    =    oldX[pj];    }    	non-compiled	[CE]  incompatible  types	33	None	replace
536	[BUG]  [BUGGY]  tmpVec  =  points[j].previousCost;  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  points[pj]  =  oldX[pj];  }  [CE]  cannot  find  symbol  points  [FE]                    AssertionFailedError      [CONTEXT]        }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;      [BUGGY]  tmpVec  =  points[j].previousCost;  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  points[pj]  =  oldX[pj];  }  [BUGGY]      residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	432	432	2	replace	tmpVec  =  points[j].previousCost;  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  points[pj]  =  oldX[pj];  }	  tmpVec    =    previousCost;    for(int    j    =    0;    j    <    solvedCols;    ++j)    {    points[pj]    =    oldX[pj];    }    	non-compiled	[CE]  cannot  find  symbol  points	33	None	replace
537	[BUG]  [BUGGY]  tmpVec  =  cost;  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  point[pj]  =  oldX[pj].doubleValue();  }  [CE]  incompatible  types  [FE]                AssertionFailedError      [CONTEXT]        }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;      [BUGGY]  tmpVec  =  cost;  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  point[pj]  =  oldX[pj].doubleValue();  }  [BUGGY]      residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	432	432	2	replace	tmpVec  =  cost;  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  point[pj]  =  oldX[pj].doubleValue();  }	  tmpVec    =    previousCost;    for(int    j    =    0;    j    <    solvedCols;    ++j)    {    point[pj]    =    oldX[pj].doubleValue();    }    	non-compiled	[CE]  incompatible  types	2	None	replace
538	[BUG]  [BUGGY]  if(tmpVec!=  previousCost)  {  cost  =  preRed.doubleValue();  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  point[pj]  =  oldX[pj].doubleValue();  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]        }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;      [BUGGY]  if(tmpVec!=  previousCost)  {  cost  =  preRed.doubleValue();  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  point[pj]  =  oldX[pj].doubleValue();  }  [BUGGY]      residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	432	432	2	replace	if(tmpVec!=  previousCost)  {  cost  =  preRed.doubleValue();  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  point[pj]  =  oldX[pj].doubleValue();  }	  if(tmpVec!=    previousCost)    {    cost    =    permutation[j].doubleValue();    for(int    j    =    0;    j    <    solvedCols;    ++j)    {    point[pj]    =    oldX[pj].doubleValue();    }    	non-compiled	[CE]  illegal  start  of  expression	105	None	replace
539	[BUG]  [BUGGY]  residuals  -=  oldX,  tmpVec;  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]        }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;      [BUGGY]  residuals  -=  oldX,  tmpVec;  [BUGGY]      oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	432	432	2	replace	residuals  -=  oldX,  tmpVec;	  residuals    -=    oldX;    	non-compiled	[CE]  ';'  expected	43	None	replace
540	[BUG]  [BUGGY]  if(tmpVec!=  prevCost)  {  cost  =  prevCost;  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  int  oldRes  =  oldX[pj];  }  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]        }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;      [BUGGY]  if(tmpVec!=  prevCost)  {  cost  =  prevCost;  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  int  oldRes  =  oldX[pj];  }  [BUGGY]      residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	432	432	2	replace	if(tmpVec!=  prevCost)  {  cost  =  prevCost;  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  int  oldRes  =  oldX[pj];  }	  if(tmpVec!=    previousCost)    {    cost    =    prevCost;    for(int    j    =    0;    j    <    solvedCols;    ++j)    {    int    oldRes    =    oldX[pj];    }    	non-compiled	[CE]  illegal  start  of  expression	95	None	replace
541	[BUG]  [BUGGY]  tmpVec  =  cost;  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  point[pj]  =  oldX[pj];  }  [CE]  incompatible  types  [FE]            AssertionFailedError      [CONTEXT]        }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;      [BUGGY]  tmpVec  =  cost;  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  point[pj]  =  oldX[pj];  }  [BUGGY]      residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	432	432	2	replace	tmpVec  =  cost;  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  point[pj]  =  oldX[pj];  }	  tmpVec    =    previousCost;    for(int    j    =    0;    j    <    solvedCols;    ++j)    {    point[pj]    =    oldX[pj];    }    	non-compiled	[CE]  incompatible  types	30	None	replace
542	[BUG]  [BUGGY]  tmpVec  =  prered;  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  point[pj]  =  oldX[pj];  }  [CE]  cannot  find  symbol  prered  [FE]              AssertionFailedError      [CONTEXT]        }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;      [BUGGY]  tmpVec  =  prered;  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  point[pj]  =  oldX[pj];  }  [BUGGY]      residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	432	432	2	replace	tmpVec  =  prered;  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  point[pj]  =  oldX[pj];  }	  tmpVec    =    previousCost;    for(int    j    =    0;    j    <    solvedCols;    ++j)    {    point[pj]    =    oldX[pj];    }    	non-compiled	[CE]  cannot  find  symbol  prered	30	None	replace
543	[BUG]  [BUGGY]  tmpVec  =  cost;  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  points[pj]  =  oldX[pj].doubleValue();  }  [CE]  incompatible  types  [FE]                      AssertionFailedError      [CONTEXT]        }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;      [BUGGY]  tmpVec  =  cost;  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  points[pj]  =  oldX[pj].doubleValue();  }  [BUGGY]      residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	432	432	2	replace	tmpVec  =  cost;  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  points[pj]  =  oldX[pj].doubleValue();  }	  tmpVec    =    previousCost;    for(int    j    =    0;    j    <    solvedCols;    ++j)    {    points[pj]    =    oldX[pj].doubleValue();    }    	non-compiled	[CE]  incompatible  types	5	None	replace
544	[BUG]  [BUGGY]  tmpVec  =  point[point];  [CE]  incompatible  types  [FE]                  AssertionFailedError      [CONTEXT]        }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;      [BUGGY]  tmpVec  =  point[point];  [BUGGY]      residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	432	432	2	replace	tmpVec  =  point[point];	  tmpVec    =    permutation[point];    	non-compiled	[CE]  incompatible  types	71	None	replace
545	[BUG]  [BUGGY]  tmpVec  =  points[point];  [CE]  cannot  find  symbol  points  [FE]                    AssertionFailedError      [CONTEXT]        }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;      [BUGGY]  tmpVec  =  points[point];  [BUGGY]      residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	432	432	2	replace	tmpVec  =  points[point];	  tmpVec    =    permutation[point];    	non-compiled	[CE]  cannot  find  symbol  points	71	None	replace
546	[BUG]  [BUGGY]  tmpVec  =  cost;  for(int  j  =  0;  j  <  solveCols;  ++j)  {  point[pj]  =  oldX[pj].doubleValue();  }  [CE]  incompatible  types  [FE]                    AssertionFailedError      [CONTEXT]        }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;      [BUGGY]  tmpVec  =  cost;  for(int  j  =  0;  j  <  solveCols;  ++j)  {  point[pj]  =  oldX[pj].doubleValue();  }  [BUGGY]      residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	432	432	2	replace	tmpVec  =  cost;  for(int  j  =  0;  j  <  solveCols;  ++j)  {  point[pj]  =  oldX[pj].doubleValue();  }	  tmpVec    =    previousCost;    for(int    j    =    0;    j    <    solveCols;    ++j)    {    point[pj]    =    oldX[pj].doubleValue();    }    	non-compiled	[CE]  incompatible  types	4	None	replace
547	[BUG]  [BUGGY]  tmpVec  =  prevCost;  for(int  j  =  0;  j  <  solveCols;  ++j)  {  point[pj]  =  oldX[pj].doubleValue();  }  [CE]  cannot  find  symbol  prevCost  [FE]                      AssertionFailedError      [CONTEXT]        }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;      [BUGGY]  tmpVec  =  prevCost;  for(int  j  =  0;  j  <  solveCols;  ++j)  {  point[pj]  =  oldX[pj].doubleValue();  }  [BUGGY]      residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	432	432	2	replace	tmpVec  =  prevCost;  for(int  j  =  0;  j  <  solveCols;  ++j)  {  point[pj]  =  oldX[pj].doubleValue();  }	  tmpVec    =    previousCost;    for(int    j    =    0;    j    <    solveCols;    ++j)    {    point[pj]    =    oldX[pj].doubleValue();    }    	non-compiled	[CE]  cannot  find  symbol  prevCost	4	None	replace
548	[BUG]  [BUGGY]  tmpVec  =  new  VectorialPointValuePair(previousCost,  oldX,  oldRes,  cost);  [CE]  no  suitable  constructor  found  for  VectorialPointValuePair(double,double[],double[],double)  [FE]                AssertionFailedError      [CONTEXT]        }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;      [BUGGY]  tmpVec  =  new  VectorialPointValuePair(previousCost,  oldX,  oldRes,  cost);  [BUGGY]      residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	432	432	2	replace	tmpVec  =  new  VectorialPointValuePair(previousCost,  oldX,  oldRes,  cost);	  tmpVec    =    new    VectorialPointValuePair(previousCost,    oldX,    cost);    	non-compiled	[CE]  no  suitable  constructor  found  for  VectorialPointValuePair(double,double[],double[],double)	13	None	replace
549	[BUG]  [BUGGY]  if(remainings  ==  tmpVec)  {  cost  =  previousCost;  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  oldRes  =  tmpVec;  }  }  [CE]  cannot  find  symbol  remainings  [FE]        AssertionFailedError      [CONTEXT]        }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;      [BUGGY]  if(remainings  ==  tmpVec)  {  cost  =  previousCost;  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  oldRes  =  tmpVec;  }  }  [BUGGY]      oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	432	432	2	replace	if(remainings  ==  tmpVec)  {  cost  =  previousCost;  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  oldRes  =  tmpVec;  }  }	  residuals    =    tmpVec;    if(remainings    ==    tmpVec)    {    cost    =    previousCost;    for(int    j    =    0;    j    <    solvedCols;    ++j)    {    oldRes    =    tmpVec;    }    	non-compiled	[CE]  cannot  find  symbol  remainings	75	None	replace
550	[BUG]  [BUGGY]  if(remainings  ==  tmpVec)  {  previousCost;  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  oldRes  =  tmpVec;  }  [CE]  not  a  statement  [FE]          AssertionFailedError      [CONTEXT]        }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;      [BUGGY]  if(remainings  ==  tmpVec)  {  previousCost;  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  oldRes  =  tmpVec;  }  [BUGGY]      oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	432	432	2	replace	if(remainings  ==  tmpVec)  {  previousCost;  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  oldRes  =  tmpVec;  }	  residuals    =    tmpVec;    if(remainings    ==    tmpVec)    {    cost    =    previousCost;    for(int    j    =    0;    j    <    solvedCols;    ++j)    {    oldRes    =    tmpVec;    }    	non-compiled	[CE]  not  a  statement	75	None	replace
551	[BUG]  [BUGGY]  if(remainings  ==  tmpVec)  {  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  oldRes  =  tmpVec;  }  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]        }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;      [BUGGY]  if(remainings  ==  tmpVec)  {  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  oldRes  =  tmpVec;  }  [BUGGY]      oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	432	432	2	replace	if(remainings  ==  tmpVec)  {  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  oldRes  =  tmpVec;  }	  residuals    =    tmpVec;    if(remainings    ==    tmpVec)    {    cost    =    previousCost;    for(int    j    =    0;    j    <    solvedCols;    ++j)    {    oldRes    =    tmpVec;    }    	non-compiled	[CE]  illegal  start  of  expression	75	None	replace
552	[BUG]  [BUGGY]  tmpVec  =  new  VectorialPointValuePair(lastX,  lastIteration);  [CE]  cannot  find  symbol  lastX  [FE]            AssertionFailedError      [CONTEXT]        }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;      [BUGGY]  tmpVec  =  new  VectorialPointValuePair(lastX,  lastIteration);  [BUGGY]      residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	432	432	2	replace	tmpVec  =  new  VectorialPointValuePair(lastX,  lastIteration);	  tmpVec    =    new    VectorialPointValuePair(lastX,    previousCost);    	non-compiled	[CE]  cannot  find  symbol  lastX	102	None	replace
553	[BUG]  [BUGGY]  if(tmpVec  >  0)  {  oldRes  =  tmpVec;  }  else  {  cost  =  previousCost;  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  point[pj]  =  point[j];  }  }  [CE]  bad  operand  types  for  binary  operator  '>'  [FE]            AssertionFailedError      [CONTEXT]        }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;      [BUGGY]  if(tmpVec  >  0)  {  oldRes  =  tmpVec;  }  else  {  cost  =  previousCost;  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  point[pj]  =  point[j];  }  }  [BUGGY]      residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	432	432	2	replace	if(tmpVec  >  0)  {  oldRes  =  tmpVec;  }  else  {  cost  =  previousCost;  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  point[pj]  =  point[j];  }  }	          oldRes    =    tmpVec;    if(remainings    >    0)    {    oldRes    =    tmpVec;    }    else    {    cost    =    previousCost;    for(int    j    =    0;    j    <    solvedCols;    ++j)    {    point[pj]    =    point[j];    }    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>'	99	None	replace
554	[BUG]  [BUGGY]  tmpVec  =  new  VectorialPointValuePair(previousCost,  preRed,  previousCost);  [CE]  no  suitable  constructor  found  for  VectorialPointValuePair(double,double,double)  [FE]                    AssertionFailedError      [CONTEXT]        }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;      [BUGGY]  tmpVec  =  new  VectorialPointValuePair(previousCost,  preRed,  previousCost);  [BUGGY]      residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	432	432	2	replace	tmpVec  =  new  VectorialPointValuePair(previousCost,  preRed,  previousCost);	  tmpVec    =    new    VectorialPointValuePair(lastX,    previousCost,    preRed);    	non-compiled	[CE]  no  suitable  constructor  found  for  VectorialPointValuePair(double,double,double)	111	None	replace
555	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]        }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;      [BUGGY]  residuals    =    tmpVec;    oldRes  =  tmpVec;  residuals  =  tmpVec;  oldRes  =  tmpVec;  [BUGGY]      oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	432	432	2	add	residuals        =        tmpVec;        oldRes    =    tmpVec;    residuals  =  tmpVec;  oldRes  =  tmpVec;	  	compilable	  [FE]  AssertionFailedError  	16	10	add
556	[BUG]  [BUGGY]  residuals    =    tmpVec;    oldRes  =  tmpVec;  residuals  =  tmpVec;  oldRes  =  tmpVec;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]        }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;      [BUGGY]  residuals    =    tmpVec;    oldRes  =  tmpVec;  residuals  =  tmpVec;  oldRes  =  tmpVec;  [BUGGY]      oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	432	432	2	replace	residuals        =        tmpVec;        oldRes    =    tmpVec;    residuals  =  tmpVec;  oldRes  =  tmpVec;	  	compilable	  [FE]  AssertionFailedError  	16	10	add
557	[BUG]  [BUGGY]  if(tmpVec  >  0)  {  oldRes  =  tmpVec;  }  else  {  cost  =  previousCost;  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  point[pj]  =  point[pj];  }  }  [CE]  bad  operand  types  for  binary  operator  '>'  [FE]          AssertionFailedError      [CONTEXT]        }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;      [BUGGY]  if(tmpVec  >  0)  {  oldRes  =  tmpVec;  }  else  {  cost  =  previousCost;  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  point[pj]  =  point[pj];  }  }  [BUGGY]      residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	432	432	2	replace	if(tmpVec  >  0)  {  oldRes  =  tmpVec;  }  else  {  cost  =  previousCost;  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  point[pj]  =  point[pj];  }  }	          oldRes    =    tmpVec;    if(remainings    >    0)    {    oldRes    =    tmpVec;    }    else    {    cost    =    previousCost;    for(int    j    =    0;    j    <    solvedCols;    ++j)    {    point[pj]    =    point[pj];    }    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>'	98	None	replace
558	[BUG]  [BUGGY]  tmpVec  =  current;  [CE]  incompatible  types  [FE]              AssertionFailedError      [CONTEXT]        }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;      [BUGGY]  tmpVec  =  current;  [BUGGY]      oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	432	432	2	replace	tmpVec  =  current;	  tmpVec    =    result;    	non-compiled	[CE]  incompatible  types	69	None	replace
559	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]        }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;      [BUGGY]  residuals    =    tmpVec;    residuals  =  tmpVec;  tmpVec  =  tmpVec;  [BUGGY]      oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	432	432	2	add	residuals        =        tmpVec;        residuals    =    tmpVec;    tmpVec  =  tmpVec;	  	compilable	  [FE]  AssertionFailedError  	20	2	add
560	[BUG]  [BUGGY]  residuals    =    tmpVec;    residuals  =  tmpVec;  tmpVec  =  tmpVec;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]        }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;      [BUGGY]  residuals    =    tmpVec;    residuals  =  tmpVec;  tmpVec  =  tmpVec;  [BUGGY]      oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	432	432	2	replace	residuals        =        tmpVec;        residuals    =    tmpVec;    tmpVec  =  tmpVec;	  	compilable	  [FE]  AssertionFailedError  	20	2	add
561	[BUG]  [BUGGY]  tmpVec  =  oldRes;  ((  VectorialPointValuePair)previous).setVec(  tmpVec);  [CE]  cannot  find  symbol  [FE]    AssertionFailedError    [CONTEXT]        }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;      [BUGGY]  tmpVec  =  oldRes;  ((  VectorialPointValuePair)previous).setVec(  tmpVec);  [BUGGY]      oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	432	432	2	replace	tmpVec    =    oldRes;    ((  VectorialPointValuePair)previous).setVec(  tmpVec);	  	non-compiled	[CE]  cannot  find  symbol	47	None	add
562	[BUG]  [BUGGY]  if(tmpVec!=  preRed)  {  cost  =  permutation[j];  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  int  oldRes  =  oldX[pj];  }  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]        }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;      [BUGGY]  if(tmpVec!=  preRed)  {  cost  =  permutation[j];  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  int  oldRes  =  oldX[pj];  }  [BUGGY]      residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	432	432	2	replace	if(tmpVec!=  preRed)  {  cost  =  permutation[j];  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  int  oldRes  =  oldX[pj];  }	  if(tmpVec!=    previousCost)    {    cost    =    permutation[j];    for(int    j    =    0;    j    <    solvedCols;    ++j)    {    int    oldRes    =    oldX[pj];    }    	non-compiled	[CE]  illegal  start  of  expression	94	None	replace
563	[BUG]  [BUGGY]  if(tmpVec!=  previousCost)  {  cost  =  preRed[j];  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  int  oldRes  =  oldX[pj];  }  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]        }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;      [BUGGY]  if(tmpVec!=  previousCost)  {  cost  =  preRed[j];  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  int  oldRes  =  oldX[pj];  }  [BUGGY]      residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	432	432	2	replace	if(tmpVec!=  previousCost)  {  cost  =  preRed[j];  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  int  oldRes  =  oldX[pj];  }	  if(tmpVec!=    previousCost)    {    cost    =    permutation[j];    for(int    j    =    0;    j    <    solvedCols;    ++j)    {    int    oldRes    =    oldX[pj];    }    	non-compiled	[CE]  illegal  start  of  expression	94	None	replace
564	[BUG]  [BUGGY]  if(tmpVec!=  previousCost)  {  cost  =  oldX[j];  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  int  oldRes  =  oldX[pj];  }  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]        }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;      [BUGGY]  if(tmpVec!=  previousCost)  {  cost  =  oldX[j];  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  int  oldRes  =  oldX[pj];  }  [BUGGY]      residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	432	432	2	replace	if(tmpVec!=  previousCost)  {  cost  =  oldX[j];  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  int  oldRes  =  oldX[pj];  }	  if(tmpVec!=    previousCost)    {    cost    =    permutation[j];    for(int    j    =    0;    j    <    solvedCols;    ++j)    {    int    oldRes    =    oldX[pj];    }    	non-compiled	[CE]  illegal  start  of  expression	94	None	replace
565	[BUG]  [BUGGY]  if(tmpVec  >  oldRes)  {  oldRes  =  tmpVec;  }  else  {  cost  =  previousCost;  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  point[pj]  =  point[pj].doubleValu  [CE]  ';'  expected  [FE]          AssertionFailedError      [CONTEXT]        }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;      [BUGGY]  if(tmpVec  >  oldRes)  {  oldRes  =  tmpVec;  }  else  {  cost  =  previousCost;  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  point[pj]  =  point[pj].doubleValu  [BUGGY]      residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	432	432	2	replace	if(tmpVec  >  oldRes)  {  oldRes  =  tmpVec;  }  else  {  cost  =  previousCost;  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  point[pj]  =  point[pj].doubleValu	          oldRes    =    tmpVec;    if(remainings    >    oldRes)    {    oldRes    =    tmpVec;    }    else    {    cost    =    previousCost;    for(int    j    =    0;    j    <    solvedCols;    ++j)    {    point[pj]    =    point[pj].doubleValue();    }    	non-compiled	[CE]  ';'  expected	121	None	replace
566	[BUG]  [BUGGY]  if(remainings  >  oldRes)  {  oldRes  =  tmpVec;  }  else  {  cost  =  previousCost;  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  point[pj]  =  point[pj].doubleValu  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]        }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;      [BUGGY]  if(remainings  >  oldRes)  {  oldRes  =  tmpVec;  }  else  {  cost  =  previousCost;  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  point[pj]  =  point[pj].doubleValu  [BUGGY]      residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	432	432	2	replace	if(remainings  >  oldRes)  {  oldRes  =  tmpVec;  }  else  {  cost  =  previousCost;  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  point[pj]  =  point[pj].doubleValu	          oldRes    =    tmpVec;    if(remainings    >    oldRes)    {    oldRes    =    tmpVec;    }    else    {    cost    =    previousCost;    for(int    j    =    0;    j    <    solvedCols;    ++j)    {    point[pj]    =    point[pj].doubleValue();    }    	non-compiled	[CE]  ';'  expected	121	None	replace
567	[BUG]  [BUGGY]  if(resolvedCols  >  0)  {  tmpVec  =  previousCost;  for(int  j  =  0;  j  <  resolvedCols;  ++j)  {  permutation[j]  =  oldX[pj];  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]        }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;      [BUGGY]  if(resolvedCols  >  0)  {  tmpVec  =  previousCost;  for(int  j  =  0;  j  <  resolvedCols;  ++j)  {  permutation[j]  =  oldX[pj];  }  [BUGGY]      residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	432	432	2	replace	if(resolvedCols  >  0)  {  tmpVec  =  previousCost;  for(int  j  =  0;  j  <  resolvedCols;  ++j)  {  permutation[j]  =  oldX[pj];  }	  tmpVec    =    previousCost;    for(int    j    =    0;    j    <    resolvedCols;    ++j)    {    permutation[j]    =    oldX[pj];    }    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
568	[BUG]  [BUGGY]  tmpVec  =  prevCost;  for(int  j  =  0;  j  <  resolvedCols;  ++j)  {  permutation[j]  =  oldX[pj];  }  [CE]  cannot  find  symbol  prevCost  [FE]                  AssertionFailedError      [CONTEXT]        }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;      [BUGGY]  tmpVec  =  prevCost;  for(int  j  =  0;  j  <  resolvedCols;  ++j)  {  permutation[j]  =  oldX[pj];  }  [BUGGY]      residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	432	432	2	replace	tmpVec  =  prevCost;  for(int  j  =  0;  j  <  resolvedCols;  ++j)  {  permutation[j]  =  oldX[pj];  }	  tmpVec    =    previousCost;    for(int    j    =    0;    j    <    resolvedCols;    ++j)    {    permutation[j]    =    oldX[pj];    }    	non-compiled	[CE]  cannot  find  symbol  prevCost	7	None	replace
569	[BUG]  [BUGGY]  tmpVec  =  prered;  for(int  j  =  0;  j  <  resolvedCols;  ++j)  {  permutation[j]  =  oldX[pj];  }  [CE]  cannot  find  symbol  prered  [FE]                    AssertionFailedError      [CONTEXT]        }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;      [BUGGY]  tmpVec  =  prered;  for(int  j  =  0;  j  <  resolvedCols;  ++j)  {  permutation[j]  =  oldX[pj];  }  [BUGGY]      residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	432	432	2	replace	tmpVec  =  prered;  for(int  j  =  0;  j  <  resolvedCols;  ++j)  {  permutation[j]  =  oldX[pj];  }	  tmpVec    =    previousCost;    for(int    j    =    0;    j    <    resolvedCols;    ++j)    {    permutation[j]    =    oldX[pj];    }    	non-compiled	[CE]  cannot  find  symbol  prered	7	None	replace
570	[BUG]  [BUGGY]  tmpVec  =  tmpVec.remainder;  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  point[j]  =  oldX[pj];  }  [CE]  cannot  find  symbol  remainder  [FE]                  AssertionFailedError      [CONTEXT]        }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;      [BUGGY]  tmpVec  =  tmpVec.remainder;  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  point[j]  =  oldX[pj];  }  [BUGGY]      residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	432	432	2	replace	tmpVec  =  tmpVec.remainder;  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  point[j]  =  oldX[pj];  }	  if(tmpVec!=    previousCost)    {    cost    =    permutation[j].remainder;    for(int    j    =    0;    j    <    solvedCols;    ++j)    {    point[j]    =    oldX[pj];    }    	non-compiled	[CE]  cannot  find  symbol  remainder	115	None	replace
571	[BUG]  [BUGGY]  if(tmpVec!=  previousCost)  {  cost  =  oldX[j].remainder;  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  point[j]  =  oldX[pj];  }  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]        }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;      [BUGGY]  if(tmpVec!=  previousCost)  {  cost  =  oldX[j].remainder;  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  point[j]  =  oldX[pj];  }  [BUGGY]      residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	432	432	2	replace	if(tmpVec!=  previousCost)  {  cost  =  oldX[j].remainder;  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  point[j]  =  oldX[pj];  }	  if(tmpVec!=    previousCost)    {    cost    =    permutation[j].remainder;    for(int    j    =    0;    j    <    solvedCols;    ++j)    {    point[j]    =    oldX[pj];    }    	non-compiled	[CE]  illegal  start  of  expression	115	None	replace
572	[BUG]  [BUGGY]  int  oldRes  =  oldX[pj];  [CE]  variable  oldRes  is  already  defined  in  method  doOptimize()  [FE]                        AssertionFailedError      [CONTEXT]        }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;      [BUGGY]  int  oldRes  =  oldX[pj];  [BUGGY]      residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	432	432	2	replace	int  oldRes  =  oldX[pj];	  tmpVec    =    previousCost;    for(int    j    =    0;    j    <    solveCols;    ++j)    {    int    oldRes    =    oldX[pj];    }    	non-compiled	[CE]  variable  oldRes  is  already  defined  in  method  doOptimize()	27	None	replace
573	[BUG]  [BUGGY]  if(tmpVec!=  preRed)  {  cost  =  oldRes;  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  permutation[j]  =  oldX[pj];  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]        }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;      [BUGGY]  if(tmpVec!=  preRed)  {  cost  =  oldRes;  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  permutation[j]  =  oldX[pj];  }  [BUGGY]      residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	432	432	2	replace	if(tmpVec!=  preRed)  {  cost  =  oldRes;  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  permutation[j]  =  oldX[pj];  }	  if(tmpVec!=    previousCost)    {    cost    =    oldRes;    for(int    j    =    0;    j    <    solvedCols;    ++j)    {    permutation[j]    =    oldX[pj];    }    	non-compiled	[CE]  illegal  start  of  expression	73	None	replace
574	[BUG]  [BUGGY]  tmpVec  =  oldRes;  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  permutation[j]  =  oldX[pj];  }  [CE]  cannot  find  symbol  pj  [FE]                  AssertionFailedError      [CONTEXT]        }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;      [BUGGY]  tmpVec  =  oldRes;  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  permutation[j]  =  oldX[pj];  }  [BUGGY]      residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	432	432	2	replace	tmpVec  =  oldRes;  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  permutation[j]  =  oldX[pj];  }	  if(tmpVec!=    previousCost)    {    cost    =    oldRes;    for(int    j    =    0;    j    <    solvedCols;    ++j)    {    permutation[j]    =    oldX[pj];    }    	non-compiled	[CE]  cannot  find  symbol  pj	73	None	replace
575	[BUG]  [BUGGY]  tmpVec  =  new  VectorialPointValuePair(current,  previousCost,  cost);  [CE]  no  suitable  constructor  found  for  VectorialPointValuePair(VectorialPointValuePair,double,double)  [FE]                      AssertionFailedError      [CONTEXT]        }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;      [BUGGY]  tmpVec  =  new  VectorialPointValuePair(current,  previousCost,  cost);  [BUGGY]      residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	432	432	2	replace	tmpVec  =  new  VectorialPointValuePair(current,  previousCost,  cost);	  tmpVec    =    new    VectorialPointValuePair(last,    previousCost,    cost);    	non-compiled	[CE]  no  suitable  constructor  found  for  VectorialPointValuePair(VectorialPointValuePair,double,double)	91	None	replace
576	[BUG]  [BUGGY]  if(tmpVec!=  preRed)  {  cost  =  permutation[j];  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  point[j]  =  oldX[pj];  }  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]        }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;      [BUGGY]  if(tmpVec!=  preRed)  {  cost  =  permutation[j];  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  point[j]  =  oldX[pj];  }  [BUGGY]      residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	432	432	2	replace	if(tmpVec!=  preRed)  {  cost  =  permutation[j];  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  point[j]  =  oldX[pj];  }	  if(tmpVec!=    previousCost)    {    cost    =    permutation[j];    for(int    j    =    0;    j    <    solvedCols;    ++j)    {    point[j]    =    oldX[pj];    }    	non-compiled	[CE]  illegal  start  of  expression	93	None	replace
577	[BUG]  [BUGGY]  if(tmpVec!=  previousCost)  {  cost  =  preRed[j];  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  point[j]  =  oldX[pj];  }  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]        }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;      [BUGGY]  if(tmpVec!=  previousCost)  {  cost  =  preRed[j];  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  point[j]  =  oldX[pj];  }  [BUGGY]      residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	432	432	2	replace	if(tmpVec!=  previousCost)  {  cost  =  preRed[j];  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  point[j]  =  oldX[pj];  }	  if(tmpVec!=    previousCost)    {    cost    =    permutation[j];    for(int    j    =    0;    j    <    solvedCols;    ++j)    {    point[j]    =    oldX[pj];    }    	non-compiled	[CE]  illegal  start  of  expression	93	None	replace
578	[BUG]  [BUGGY]  rsults  =  newResults;  [CE]  cannot  find  symbol  rsults  [FE]            AssertionFailedError      [CONTEXT]        }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;      [BUGGY]  rsults  =  newResults;  [BUGGY]      oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	432	432	2	replace	rsults  =  newResults;	  rsults    =    result;    	non-compiled	[CE]  cannot  find  symbol  rsults	84	None	replace
579	[BUG]  [BUGGY]  tmpVec  =  tmpVec.remainder;  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  point[pj]  =  oldX[pj];  }  [CE]  cannot  find  symbol  remainder  [FE]            AssertionFailedError      [CONTEXT]        }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;      [BUGGY]  tmpVec  =  tmpVec.remainder;  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  point[pj]  =  oldX[pj];  }  [BUGGY]      residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	432	432	2	replace	tmpVec  =  tmpVec.remainder;  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  point[pj]  =  oldX[pj];  }	  if(tmpVec!=    previousCost)    {    cost    =    permutation[j].remainder;    for(int    j    =    0;    j    <    solvedCols;    ++j)    {    point[pj]    =    oldX[pj];    }    	non-compiled	[CE]  cannot  find  symbol  remainder	109	None	replace
580	[BUG]  [BUGGY]  if(tmpVec!=  previousCost)  {  cost  =  oldX[j].remainder;  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  point[pj]  =  oldX[pj];  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]        }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;      [BUGGY]  if(tmpVec!=  previousCost)  {  cost  =  oldX[j].remainder;  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  point[pj]  =  oldX[pj];  }  [BUGGY]      residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	432	432	2	replace	if(tmpVec!=  previousCost)  {  cost  =  oldX[j].remainder;  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  point[pj]  =  oldX[pj];  }	  if(tmpVec!=    previousCost)    {    cost    =    permutation[j].remainder;    for(int    j    =    0;    j    <    solvedCols;    ++j)    {    point[pj]    =    oldX[pj];    }    	non-compiled	[CE]  illegal  start  of  expression	109	None	replace
581	[BUG]  [BUGGY]  if(tmpVec!=  0)  {  residuals  =  tmpVec;  oldRes  =  tmpVec;  }  else  {  cost  =  previousCost;  }  [CE]  incomparable  types:  double[]  and  int  [FE]    AssertionFailedError    [CONTEXT]        }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;      [BUGGY]  if(tmpVec!=  0)  {  residuals  =  tmpVec;  oldRes  =  tmpVec;  }  else  {  cost  =  previousCost;  }  [BUGGY]      oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	432	432	2	replace	if(tmpVec!=  0)  {  residuals  =  tmpVec;  oldRes  =  tmpVec;  }  else  {  cost  =  previousCost;  }	  residuals    =    tmpVec;    oldRes    =    tmpVec;    	non-compiled	[CE]  incomparable  types:  double[]  and  int	17	None	replace
582	[BUG]  [BUGGY]  value  =  new  VectorialPointValuePair(oldX,  oldVec);  [CE]  cannot  find  symbol  value  [FE]                AssertionFailedError      [CONTEXT]        }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;      [BUGGY]  value  =  new  VectorialPointValuePair(oldX,  oldVec);  [BUGGY]      oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	432	432	2	replace	value  =  new  VectorialPointValuePair(oldX,  oldVec);	  value    =    tmpVec;    	non-compiled	[CE]  cannot  find  symbol  value	70	None	replace
583	[BUG]  [BUGGY]  tmpVec  =  cost;  for(int  j  =  0;  j  <  solveCols;  ++j)  {  point[pj]  =  oldX[pj];  }  [CE]  incompatible  types  [FE]                AssertionFailedError      [CONTEXT]        }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;      [BUGGY]  tmpVec  =  cost;  for(int  j  =  0;  j  <  solveCols;  ++j)  {  point[pj]  =  oldX[pj];  }  [BUGGY]      residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	432	432	2	replace	tmpVec  =  cost;  for(int  j  =  0;  j  <  solveCols;  ++j)  {  point[pj]  =  oldX[pj];  }	  tmpVec    =    previousCost;    for(int    j    =    0;    j    <    solveCols;    ++j)    {    point[pj]    =    oldX[pj];    }    	non-compiled	[CE]  incompatible  types	32	None	replace
584	[BUG]  [BUGGY]  tmpVec  =  prevCost;  for(int  j  =  0;  j  <  solveCols;  ++j)  {  point[pj]  =  oldX[pj];  }  [CE]  cannot  find  symbol  prevCost  [FE]                  AssertionFailedError      [CONTEXT]        }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;      [BUGGY]  tmpVec  =  prevCost;  for(int  j  =  0;  j  <  solveCols;  ++j)  {  point[pj]  =  oldX[pj];  }  [BUGGY]      residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	432	432	2	replace	tmpVec  =  prevCost;  for(int  j  =  0;  j  <  solveCols;  ++j)  {  point[pj]  =  oldX[pj];  }	  tmpVec    =    previousCost;    for(int    j    =    0;    j    <    solveCols;    ++j)    {    point[pj]    =    oldX[pj];    }    	non-compiled	[CE]  cannot  find  symbol  prevCost	32	None	replace
585	[BUG]  [BUGGY]  tmpVec  =  prered;  for(int  j  =  0;  j  <  solveCols;  ++j)  {  point[pj]  =  oldX[pj];  }  [CE]  cannot  find  symbol  prered  [FE]                    AssertionFailedError      [CONTEXT]        }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;      [BUGGY]  tmpVec  =  prered;  for(int  j  =  0;  j  <  solveCols;  ++j)  {  point[pj]  =  oldX[pj];  }  [BUGGY]      residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	432	432	2	replace	tmpVec  =  prered;  for(int  j  =  0;  j  <  solveCols;  ++j)  {  point[pj]  =  oldX[pj];  }	  tmpVec    =    previousCost;    for(int    j    =    0;    j    <    solveCols;    ++j)    {    point[pj]    =    oldX[pj];    }    	non-compiled	[CE]  cannot  find  symbol  prered	32	None	replace
586	[BUG]  [BUGGY]  tmpVec  =  oldX;  if(oldX!=  null)  {  tmpVec  =  oldX;  }  else  {  for(int  i  =  0;  j  <  solvedCols;  ++i)  {  point[pj]  =  point[pj];  }  [CE]  illegal  start  of  expression  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]        }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;      [BUGGY]  tmpVec  =  oldX;  if(oldX!=  null)  {  tmpVec  =  oldX;  }  else  {  for(int  i  =  0;  j  <  solvedCols;  ++i)  {  point[pj]  =  point[pj];  }  [BUGGY]      oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	432	432	2	replace	tmpVec    =    oldX;    if(oldX!=  null)  {  tmpVec  =  oldX;  }  else  {  for(int  i  =  0;  j  <  solvedCols;  ++i)  {  point[pj]  =  point[pj];  }	  	non-compiled	[CE]  illegal  start  of  expression	34	None	add
587	[BUG]  [BUGGY]  tmpVec  =  oldX;  if(oldX!=  null)  {  tmpVec  =  oldX;  }  else  {  for(int  i  =  0;  i  <  points.length;  ++i)  {  point[i]  =  point[i];  }  [CE]  illegal  start  of  expression  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]        }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;      [BUGGY]  tmpVec  =  oldX;  if(oldX!=  null)  {  tmpVec  =  oldX;  }  else  {  for(int  i  =  0;  i  <  points.length;  ++i)  {  point[i]  =  point[i];  }  [BUGGY]      oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	432	432	2	replace	tmpVec    =    oldX;    if(oldX!=  null)  {  tmpVec  =  oldX;  }  else  {  for(int  i  =  0;  i  <  points.length;  ++i)  {  point[i]  =  point[i];  }	  	non-compiled	[CE]  illegal  start  of  expression	34	None	add
588	[BUG]  [BUGGY]  tmpVec  =  oldX;  if(oldX!=  null)  {  tmpVec  =  oldX;  }  else  {  for(int  i  =  0;  i  <  solvedCols;  ++i)  {  point[i]  =  point[i];  }  [CE]  illegal  start  of  expression  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]        }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;      [BUGGY]  tmpVec  =  oldX;  if(oldX!=  null)  {  tmpVec  =  oldX;  }  else  {  for(int  i  =  0;  i  <  solvedCols;  ++i)  {  point[i]  =  point[i];  }  [BUGGY]      oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	432	432	2	replace	tmpVec    =    oldX;    if(oldX!=  null)  {  tmpVec  =  oldX;  }  else  {  for(int  i  =  0;  i  <  solvedCols;  ++i)  {  point[i]  =  point[i];  }	  	non-compiled	[CE]  illegal  start  of  expression	34	None	add
589	[BUG]  [BUGGY]  tmpVec  =  oldX;  if(oldX!=  null)  {  tmpVec  =  oldX;  }  else  {  for(int  i  =  0;  i  <  solvedCols;  ++i)  {  point[pj]  =  point[i];  }  [CE]  illegal  start  of  expression  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]        }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;      [BUGGY]  tmpVec  =  oldX;  if(oldX!=  null)  {  tmpVec  =  oldX;  }  else  {  for(int  i  =  0;  i  <  solvedCols;  ++i)  {  point[pj]  =  point[i];  }  [BUGGY]      oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	432	432	2	replace	tmpVec    =    oldX;    if(oldX!=  null)  {  tmpVec  =  oldX;  }  else  {  for(int  i  =  0;  i  <  solvedCols;  ++i)  {  point[pj]  =  point[i];  }	  	non-compiled	[CE]  illegal  start  of  expression	34	None	add
590	[BUG]  [BUGGY]  if(resolvedCols  >  0)  {  tmpVec  =  previousCost;  for(int  j  =  0;  j  <  resolvedCols;  ++j)  {  oldRes  =  oldX[pj];  }  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]        }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;      [BUGGY]  if(resolvedCols  >  0)  {  tmpVec  =  previousCost;  for(int  j  =  0;  j  <  resolvedCols;  ++j)  {  oldRes  =  oldX[pj];  }  [BUGGY]      residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	432	432	2	replace	if(resolvedCols  >  0)  {  tmpVec  =  previousCost;  for(int  j  =  0;  j  <  resolvedCols;  ++j)  {  oldRes  =  oldX[pj];  }	  tmpVec    =    previousCost;    for(int    j    =    0;    j    <    resolvedCols;    ++j)    {    int    oldRes    =    oldX[pj];    }    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
591	[BUG]  [BUGGY]  if(resolvedCols  >  0)  {  tmpVec  =  previousCost;  for(int  j  =  0;  j  <  resolvedCols;  ++j)  {  int  oldRes  =  oldX[pj];  }  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]        }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;      [BUGGY]  if(resolvedCols  >  0)  {  tmpVec  =  previousCost;  for(int  j  =  0;  j  <  resolvedCols;  ++j)  {  int  oldRes  =  oldX[pj];  }  [BUGGY]      residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	432	432	2	replace	if(resolvedCols  >  0)  {  tmpVec  =  previousCost;  for(int  j  =  0;  j  <  resolvedCols;  ++j)  {  int  oldRes  =  oldX[pj];  }	  tmpVec    =    previousCost;    for(int    j    =    0;    j    <    resolvedCols;    ++j)    {    int    oldRes    =    oldX[pj];    }    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
592	[BUG]  [BUGGY]  if(resolvedCols  >  0)  {  tmpVec  =  previousCost;  for(int  j  =  0;  j  <  resolvedCols;  ++j)  {  point[pj]  =  oldX[pj];  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]        }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;      [BUGGY]  if(resolvedCols  >  0)  {  tmpVec  =  previousCost;  for(int  j  =  0;  j  <  resolvedCols;  ++j)  {  point[pj]  =  oldX[pj];  }  [BUGGY]      residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	432	432	2	replace	if(resolvedCols  >  0)  {  tmpVec  =  previousCost;  for(int  j  =  0;  j  <  resolvedCols;  ++j)  {  point[pj]  =  oldX[pj];  }	  tmpVec    =    previousCost;    for(int    j    =    0;    j    <    resolvedCols;    ++j)    {    point[pj]    =    oldX[pj];    }    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
593	[BUG]  [BUGGY]  tmpVec  =  prered;  for(int  j  =  0;  j  <  resolvedCols;  ++j)  {  point[pj]  =  oldX[pj];  }  [CE]  cannot  find  symbol  prered  [FE]                AssertionFailedError      [CONTEXT]        }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;      [BUGGY]  tmpVec  =  prered;  for(int  j  =  0;  j  <  resolvedCols;  ++j)  {  point[pj]  =  oldX[pj];  }  [BUGGY]      residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	432	432	2	replace	tmpVec  =  prered;  for(int  j  =  0;  j  <  resolvedCols;  ++j)  {  point[pj]  =  oldX[pj];  }	  tmpVec    =    previousCost;    for(int    j    =    0;    j    <    resolvedCols;    ++j)    {    point[pj]    =    oldX[pj];    }    	non-compiled	[CE]  cannot  find  symbol  prered	31	None	replace
594	[BUG]  [BUGGY]  tmpVec  =  Math.max(relativeCost,  oldX);  [CE]  cannot  find  symbol  relativeCost  [FE]                        AssertionFailedError      [CONTEXT]        }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;      [BUGGY]  tmpVec  =  Math.max(relativeCost,  oldX);  [BUGGY]      residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	432	432	2	replace	tmpVec  =  Math.max(relativeCost,  oldX);	  tmpVec    =    Math.max(remainings,    oldX);    	non-compiled	[CE]  cannot  find  symbol  relativeCost	56	None	replace
595	[BUG]  [BUGGY]  tmpVec  =  Math.max(remainingCost,  cost);  [CE]  cannot  find  symbol  remainingCost  [FE]                    AssertionFailedError      [CONTEXT]        }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;      [BUGGY]  tmpVec  =  Math.max(remainingCost,  cost);  [BUGGY]      residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	432	432	2	replace	tmpVec  =  Math.max(remainingCost,  cost);	  tmpVec    =    Math.max(remainings,    cost);    	non-compiled	[CE]  cannot  find  symbol  remainingCost	114	None	replace
596	[BUG]  [BUGGY]  if(tmpVec!=  null)  {  residuals  =  tmpVec;  if(remainings  ==  tmpVec)  {  cost  =  previousCost;  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  oldX[j]  =  oldX[  [CE]  ']'  expected  [FE]          AssertionFailedError      [CONTEXT]        }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;      [BUGGY]  if(tmpVec!=  null)  {  residuals  =  tmpVec;  if(remainings  ==  tmpVec)  {  cost  =  previousCost;  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  oldX[j]  =  oldX[  [BUGGY]      oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	432	432	2	replace	if(tmpVec!=  null)  {  residuals  =  tmpVec;  if(remainings  ==  tmpVec)  {  cost  =  previousCost;  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  oldX[j]  =  oldX[	  residuals    =    tmpVec;    if(remainings    ==    tmpVec)    {    cost    =    previousCost;    for(int    j    =    0;    j    <    solvedCols;    ++j)    {    oldX[j]    =    oldX[j];    }    	non-compiled	[CE]  ']'  expected	76	None	replace
597	[BUG]  [BUGGY]  if(tmpVec!=  previousCost)  {  residuals  =  tmpVec;  if(remainings  ==  tmpVec)  {  cost  =  previousCost;  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  oldX[j]  =  old  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]        }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;      [BUGGY]  if(tmpVec!=  previousCost)  {  residuals  =  tmpVec;  if(remainings  ==  tmpVec)  {  cost  =  previousCost;  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  oldX[j]  =  old  [BUGGY]      oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	432	432	2	replace	if(tmpVec!=  previousCost)  {  residuals  =  tmpVec;  if(remainings  ==  tmpVec)  {  cost  =  previousCost;  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  oldX[j]  =  old	  residuals    =    tmpVec;    if(remainings    ==    tmpVec)    {    cost    =    previousCost;    for(int    j    =    0;    j    <    solvedCols;    ++j)    {    oldX[j]    =    oldX[j];    }    	non-compiled	[CE]  ';'  expected	76	None	replace
598	[BUG]  [BUGGY]  if(tmpVec!=  null)  {  residuals  =  tmpVec;  if(remainings  ==  tmpVec)  {  cost  =  previousCost;  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  oldX[j]  =  old  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]        }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;      [BUGGY]  if(tmpVec!=  null)  {  residuals  =  tmpVec;  if(remainings  ==  tmpVec)  {  cost  =  previousCost;  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  oldX[j]  =  old  [BUGGY]      oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	432	432	2	replace	if(tmpVec!=  null)  {  residuals  =  tmpVec;  if(remainings  ==  tmpVec)  {  cost  =  previousCost;  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  oldX[j]  =  old	  residuals    =    tmpVec;    if(remainings    ==    tmpVec)    {    cost    =    previousCost;    for(int    j    =    0;    j    <    solvedCols;    ++j)    {    oldX[j]    =    oldX[j];    }    	non-compiled	[CE]  ';'  expected	76	None	replace
599	[BUG]  [BUGGY]  tmpVec  =  point[point].doubleValue();  [CE]  incompatible  types  [FE]                AssertionFailedError      [CONTEXT]        }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;      [BUGGY]  tmpVec  =  point[point].doubleValue();  [BUGGY]      residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	432	432	2	replace	tmpVec  =  point[point].doubleValue();	  tmpVec    =    permutation[point].doubleValue();    	non-compiled	[CE]  incompatible  types	87	None	replace
600	[BUG]  [BUGGY]  tmpVec  =  points[point].doubleValue();  [CE]  cannot  find  symbol  points  [FE]                  AssertionFailedError      [CONTEXT]        }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;      [BUGGY]  tmpVec  =  points[point].doubleValue();  [BUGGY]      residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	432	432	2	replace	tmpVec  =  points[point].doubleValue();	  tmpVec    =    permutation[point].doubleValue();    	non-compiled	[CE]  cannot  find  symbol  points	87	None	replace
601	[BUG]  [BUGGY]  if(remainders  ==  0)  {  residuals  =  tmpVec;  residuals  =  tmpVec;  }  [CE]  cannot  find  symbol  remainders  [FE]    AssertionFailedError    [CONTEXT]        }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;      [BUGGY]  if(remainders  ==  0)  {  residuals  =  tmpVec;  residuals  =  tmpVec;  }  [BUGGY]      oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	432	432	2	replace	if(remainders  ==  0)  {  residuals  =  tmpVec;  residuals  =  tmpVec;  }	  residuals    =    tmpVec;    residuals    =    tmpVec;    	non-compiled	[CE]  cannot  find  symbol  remainders	21	None	replace
602	[BUG]  [BUGGY]  if(remainders  ==  0)  {  residuals  =  tmpVec;  residuals  =  tmpVec;  }  else  {  for(int  i  =  0;  i  <  solvedCols;  ++i)  {  oldX[i]  =  oldX[i];  }  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]        }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;      [BUGGY]  if(remainders  ==  0)  {  residuals  =  tmpVec;  residuals  =  tmpVec;  }  else  {  for(int  i  =  0;  i  <  solvedCols;  ++i)  {  oldX[i]  =  oldX[i];  }  [BUGGY]      oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	432	432	2	replace	if(remainders  ==  0)  {  residuals  =  tmpVec;  residuals  =  tmpVec;  }  else  {  for(int  i  =  0;  i  <  solvedCols;  ++i)  {  oldX[i]  =  oldX[i];  }	  residuals    =    tmpVec;    residuals    =    tmpVec;    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
603	[BUG]  [BUGGY]  tmpVec  =  point[i];  [CE]  cannot  find  symbol  i  [FE]                    AssertionFailedError      [CONTEXT]        }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;      [BUGGY]  tmpVec  =  point[i];  [BUGGY]      residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	432	432	2	replace	tmpVec  =  point[i];	  tmpVec    =    point[pj];    	non-compiled	[CE]  cannot  find  symbol  i	61	None	replace
604	[BUG]  [BUGGY]  if(tmpVec!=  previousCost)  {  cost  =  preRed.length;  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  point[pj]  =  oldX[pj].doubleValue();  }  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]        }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;      [BUGGY]  if(tmpVec!=  previousCost)  {  cost  =  preRed.length;  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  point[pj]  =  oldX[pj].doubleValue();  }  [BUGGY]      residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	432	432	2	replace	if(tmpVec!=  previousCost)  {  cost  =  preRed.length;  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  point[pj]  =  oldX[pj].doubleValue();  }	  if(tmpVec!=    previousCost)    {    cost    =    permutation.length;    for(int    j    =    0;    j    <    solvedCols;    ++j)    {    point[pj]    =    oldX[pj].doubleValue();    }    	non-compiled	[CE]  illegal  start  of  expression	106	None	replace
605	[BUG]  [BUGGY]  tmpVec  =  oldX[pj].doubleValue();  [CE]  cannot  find  symbol  pj  [FE]                      AssertionFailedError      [CONTEXT]        }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;      [BUGGY]  tmpVec  =  oldX[pj].doubleValue();  [BUGGY]      residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	432	432	2	replace	tmpVec  =  oldX[pj].doubleValue();	  if(tmpVec!=    previousCost)    {    cost    =    permutation.length;    for(int    j    =    0;    j    <    solvedCols;    ++j)    {    point[pj]    =    oldX[pj].doubleValue();    }    	non-compiled	[CE]  cannot  find  symbol  pj	106	None	replace
606	[BUG]  [BUGGY]  tmpVec  =  cost;  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  point[j]  =  oldX[pj];  }  [CE]  incompatible  types  [FE]                  AssertionFailedError      [CONTEXT]        }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;      [BUGGY]  tmpVec  =  cost;  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  point[j]  =  oldX[pj];  }  [BUGGY]      residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	432	432	2	replace	tmpVec  =  cost;  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  point[j]  =  oldX[pj];  }	  tmpVec    =    previousCost;    for(int    j    =    0;    j    <    solvedCols;    ++j)    {    point[j]    =    oldX[pj];    }    	non-compiled	[CE]  incompatible  types	63	None	replace
607	[BUG]  [BUGGY]  if(oldRes!=  null)  {  results  =  new  VectorialPointValuePair(oldX,  oldRes);  }  [CE]  cannot  find  symbol  results  [FE]                AssertionFailedError      [CONTEXT]        }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;      [BUGGY]  if(oldRes!=  null)  {  results  =  new  VectorialPointValuePair(oldX,  oldRes);  }  [BUGGY]      oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	432	432	2	replace	if(oldRes!=  null)  {  results  =  new  VectorialPointValuePair(oldX,  oldRes);  }	  results    =    new    VectorialPointValuePair(oldX,    oldRes);    	non-compiled	[CE]  cannot  find  symbol  results	79	None	replace
608	[BUG]  [BUGGY]  if(tmpVec  >  0)  {  oldRes  =  tmpVec;  }  else  {  cost  =  previousCost;  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  point[j]  =  point[j];  }  }  [CE]  bad  operand  types  for  binary  operator  '>'  [FE]        AssertionFailedError      [CONTEXT]        }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;      [BUGGY]  if(tmpVec  >  0)  {  oldRes  =  tmpVec;  }  else  {  cost  =  previousCost;  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  point[j]  =  point[j];  }  }  [BUGGY]      residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	432	432	2	replace	if(tmpVec  >  0)  {  oldRes  =  tmpVec;  }  else  {  cost  =  previousCost;  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  point[j]  =  point[j];  }  }	          oldRes    =    tmpVec;    if(remainings    >    0)    {    oldRes    =    tmpVec;    }    else    {    cost    =    previousCost;    for(int    j    =    0;    j    <    solvedCols;    ++j)    {    point[j]    =    point[j];    }    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>'	97	None	replace
609	[BUG]  [BUGGY]  if(tmpVec!=  preRed)  {  cost  =  preRed;  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  int  oldRes  =  oldX[pj];  }  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]        }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;      [BUGGY]  if(tmpVec!=  preRed)  {  cost  =  preRed;  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  int  oldRes  =  oldX[pj];  }  [BUGGY]      residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	432	432	2	replace	if(tmpVec!=  preRed)  {  cost  =  preRed;  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  int  oldRes  =  oldX[pj];  }	  if(tmpVec!=    previousCost)    {    cost    =    preRed;    for(int    j    =    0;    j    <    solvedCols;    ++j)    {    int    oldRes    =    oldX[pj];    }    	non-compiled	[CE]  illegal  start  of  expression	127	None	replace
610	[BUG]  [BUGGY]  tmpVec  =  new  VectorialPointValuePair(pj,  point,  cost);  [CE]  cannot  find  symbol  pj  [FE]                    AssertionFailedError      [CONTEXT]        }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;      [BUGGY]  tmpVec  =  new  VectorialPointValuePair(pj,  point,  cost);  [BUGGY]      residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	432	432	2	replace	tmpVec  =  new  VectorialPointValuePair(pj,  point,  cost);	  tmpVec    =    new    VectorialPointValuePair(pj,    previousCost,    cost);    	non-compiled	[CE]  cannot  find  symbol  pj	90	None	replace
