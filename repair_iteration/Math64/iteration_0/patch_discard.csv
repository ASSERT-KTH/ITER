increase failing tests,537,replace, [FE] AssertionFailedError testMinpackBrownDennis,double sum = 0; ,double sum =(work1[pj] - work2[pj])/ diagR[pj];
increase failing tests,537,replace, [FE] AssertionFailedError testMinpackBrownDennis,double sum = 0; ,double sum = 1;
increase failing tests,534,replace, [FE] AssertionFailedError testMinpackBrownDennis,sum2 = 0; ,sum2 = 1;
increase failing tests,541,replace, [FE] AssertionFailedError testMinpackBrownDennis,double s = (work1[pj] - sum) / diagR[pj]; ,double s =(work1[pj] - sum)/ diag[pj];
increase failing tests,541,replace, [FE] AssertionFailedError testMinpackBrownDennis,double s = (work1[pj] - sum) / diagR[pj]; ,double s =(work1[pj] - delta)/ diag[pj];
increase failing tests,538,add, [FE] AssertionFailedError testMinpackBrownDennis,,  work2[pj] *= diag[pj] / dxNorm; sum2 = 0;
increase failing tests,530,add, [FE] AssertionFailedError testMinpackBrownDennis,,  lmPar = Math.min(lmPar, parl);
increase failing tests,530,add, [FE] AssertionFailedError testMinpackBrownDennis,,  lmPar = Math.min(lmPar, rank);
increase failing tests,530,add, [FE] AssertionFailedError testMinpackBrownDennis,,  lmPar = Math.sqrt(parl);
increase failing tests,537,add, [FE] AssertionFailedError testMinpackBrownDennis,,  work1[pj] *= diag[pj] / dxNorm;
increase failing tests,536,add, [FE] AssertionFailedError testMinpackBrownDennis,,  sum2 += diag[j] / diagR[j];
increase failing tests,536,add, [FE] AssertionFailedError testMinpackBrownDennis,,  sum2 += diag[j] / dxNorm;
increase failing tests,532,replace, [FE] AssertionFailedError testMinpackBrownDennis,work1[pj] *= diag[pj] / dxNorm; ,work1[pj] *= diag[pj] / parl;
increase failing tests,532,replace, [FE] AssertionFailedError testMinpackBrownDennis,work1[pj] *= diag[pj] / dxNorm; ,work1[pj] *= diagR[pj] / dxNorm;
increase failing tests,532,replace, [FE] AssertionFailedError testMinpackBrownDennis,work1[pj] *= diag[pj] / dxNorm; , 
increase failing tests,530,replace, [FE] AssertionFailedError testMinpackBrownDennis,for (int j = 0; j < solvedCols; ++j) { ,for(int j = 0; j < parl; ++j) {
