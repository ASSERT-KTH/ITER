projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java538
projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java538for(intj=0;j<solvedCols;++j){work1[j]*=work2[j]/dxNorm;}
projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java538for(inti=0;i<j;++i){sum+=work1[i][pj]*work1[pj]/dxNorm;}
projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java538for(intj=0;j<solvedCols;++j){sum+=work1[j]*work2[j]/dxNorm;}
projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java538for(inti=0;i<j;++i){sum+=work1[i][pj]*work2[pj]/dxNorm;}
projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java538for(intj=0;j<solvedCols;++j){sum+=Math.abs(work1[j]*Math.abs(diag[j]));}
projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java538for(inti=0;i<j;++i){
projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java538for(inti=0;i<pj;++i){
projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java538for(inti=0;j<solvedCols;++i){
projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java538for(inti=0;i<Math.abs(j);++i){
projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java538doublediagR[pj]=Math.sqrt(solvedCols,sum);
projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java538doublediagR[pj]=Math.sqrt(solvedCols);
projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java538doublediagR[pj]=Math.sqrt(rank);
projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java538doublediagR[pj]=Math.sqrt(solvedCols,sum2);
projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java538doublediagR[pj]=Math.sqrt(solvedCols*sum);
projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java538for(inti=0;i<diagR.length;++i){
projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java538for(inti=0;i<qrRankingThreshold;++i){
projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java538for(inti=0;i<n;++i){
projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java538for(inti=0;i<ns;++i){
projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java538doubles=(work1[pj]-work1[pj])/diagR[pj];
projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java538doubles=(work1[pj]-work1[pj]*diagR[pj]);
projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java538doubles=(work1[pj]-work1[pj])/diagR[pj];sum2+=s*s;
projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java538doubles=Math.abs(work1[pj]*work2[pj]);
projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java538doubles=(work1[pj]-work1[pj])/diagR[pj];sum+=s*s;
