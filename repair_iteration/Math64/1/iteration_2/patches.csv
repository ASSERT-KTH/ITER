bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  int  solvedCols  =  Math.min(sum2,  parl);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      lmPar  =  0;  return;  }    double  sum2;  double  parl  =  0;  if  (rank  ==  solvedCols)  {      [BUGGY]  int  solvedCols  =  Math.min(sum2,  parl);  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  work1[pj]  *=  diag[pj]  /  dxNorm;  }  sum2  =  0;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  double  sum  =  0;  for  (int  i  =  0;  i  <  j;  ++i)  {  sum  +=  jacobian[i][pj]  *  work1[permutation[i]];  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  determineLMParameter  [RETURN_TYPE]  void  double[]  qy  double  delta  double[]  diag  double[]  work1  double[]  work2  double[]  work3  [VARIABLES]  int[]  permutation  boolean  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  qy  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  correction  costRelativeTolerance  delta  dirDer  dirJ  dk  dxNorm  fp  gNorm  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  parl  paru  pc2  preRed  previousCost  previousFP  qrRankingThreshold  r  ratio  s  sPar  sum  sum2  threshold  tmp  xK  xNorm  xk  ypk  int  countdown  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3922322702763681	530	530	2	replace	int  solvedCols  =  Math.min(sum2,  parl);	  int    solvedCols    =    Math.min(rank,    parl);    	non-compiled	[CE]  <identifier>  expected	29	None	replace
2	[BUG]  [BUGGY]  int  solvedCols  =  Math.min(sum2  -  1,  parl);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      lmPar  =  0;  return;  }    double  sum2;  double  parl  =  0;  if  (rank  ==  solvedCols)  {      [BUGGY]  int  solvedCols  =  Math.min(sum2  -  1,  parl);  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  work1[pj]  *=  diag[pj]  /  dxNorm;  }  sum2  =  0;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  double  sum  =  0;  for  (int  i  =  0;  i  <  j;  ++i)  {  sum  +=  jacobian[i][pj]  *  work1[permutation[i]];  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  determineLMParameter  [RETURN_TYPE]  void  double[]  qy  double  delta  double[]  diag  double[]  work1  double[]  work2  double[]  work3  [VARIABLES]  int[]  permutation  boolean  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  qy  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  correction  costRelativeTolerance  delta  dirDer  dirJ  dk  dxNorm  fp  gNorm  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  parl  paru  pc2  preRed  previousCost  previousFP  qrRankingThreshold  r  ratio  s  sPar  sum  sum2  threshold  tmp  xK  xNorm  xk  ypk  int  countdown  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3922322702763681	530	530	2	replace	int  solvedCols  =  Math.min(sum2  -  1,  parl);	  int    solvedCols    =    Math.min(rank,    parl);    	non-compiled	[CE]  <identifier>  expected	29	None	replace
3	[BUG]  [BUGGY]  double  dxNorm  =  Math.sqrt(sum2);  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      lmPar  =  0;  return;  }    double  sum2;  double  parl  =  0;  if  (rank  ==  solvedCols)  {      [BUGGY]  double  dxNorm  =  Math.sqrt(sum2);  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  work1[pj]  *=  diag[pj]  /  dxNorm;  }  sum2  =  0;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  double  sum  =  0;  for  (int  i  =  0;  i  <  j;  ++i)  {  sum  +=  jacobian[i][pj]  *  work1[permutation[i]];  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  determineLMParameter  [RETURN_TYPE]  void  double[]  qy  double  delta  double[]  diag  double[]  work1  double[]  work2  double[]  work3  [VARIABLES]  int[]  permutation  boolean  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  qy  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  correction  costRelativeTolerance  delta  dirDer  dirJ  dk  dxNorm  fp  gNorm  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  parl  paru  pc2  preRed  previousCost  previousFP  qrRankingThreshold  r  ratio  s  sPar  sum  sum2  threshold  tmp  xK  xNorm  xk  ypk  int  countdown  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3922322702763681	530	530	2	replace	double  dxNorm  =  Math.sqrt(sum2);	  double    dxNorm    =    Math.sqrt(solvedCols);    	non-compiled	[CE]  <identifier>  expected	7	None	replace
4	[BUG]  [BUGGY]  double  dxNorm  =  Math.sqrt(solvedCols,  sum2);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      lmPar  =  0;  return;  }    double  sum2;  double  parl  =  0;  if  (rank  ==  solvedCols)  {      [BUGGY]  double  dxNorm  =  Math.sqrt(solvedCols,  sum2);  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  work1[pj]  *=  diag[pj]  /  dxNorm;  }  sum2  =  0;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  double  sum  =  0;  for  (int  i  =  0;  i  <  j;  ++i)  {  sum  +=  jacobian[i][pj]  *  work1[permutation[i]];  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  determineLMParameter  [RETURN_TYPE]  void  double[]  qy  double  delta  double[]  diag  double[]  work1  double[]  work2  double[]  work3  [VARIABLES]  int[]  permutation  boolean  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  qy  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  correction  costRelativeTolerance  delta  dirDer  dirJ  dk  dxNorm  fp  gNorm  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  parl  paru  pc2  preRed  previousCost  previousFP  qrRankingThreshold  r  ratio  s  sPar  sum  sum2  threshold  tmp  xK  xNorm  xk  ypk  int  countdown  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3922322702763681	530	530	2	replace	double  dxNorm  =  Math.sqrt(solvedCols,  sum2);	  double    dxNorm    =    Math.sqrt(solvedCols);    	non-compiled	[CE]  <identifier>  expected	7	None	replace
5	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  solvedCols.length;  ++j)  {  with  diag.length  =  0;  j  <  diag.length;  ++j)  {  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      lmPar  =  0;  return;  }    double  sum2;  double  parl  =  0;  if  (rank  ==  solvedCols)  {      [BUGGY]  for(int  j  =  0;  j  <  solvedCols.length;  ++j)  {  with  diag.length  =  0;  j  <  diag.length;  ++j)  {  [BUGGY]      int  pj  =  permutation[j];  work1[pj]  *=  diag[pj]  /  dxNorm;  }  sum2  =  0;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  double  sum  =  0;  for  (int  i  =  0;  i  <  j;  ++i)  {  sum  +=  jacobian[i][pj]  *  work1[permutation[i]];  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  determineLMParameter  [RETURN_TYPE]  void  double[]  qy  double  delta  double[]  diag  double[]  work1  double[]  work2  double[]  work3  [VARIABLES]  int[]  permutation  boolean  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  qy  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  correction  costRelativeTolerance  delta  dirDer  dirJ  dk  dxNorm  fp  gNorm  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  parl  paru  pc2  preRed  previousCost  previousFP  qrRankingThreshold  r  ratio  s  sPar  sum  sum2  threshold  tmp  xK  xNorm  xk  ypk  int  countdown  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3922322702763681	530	530	2	replace	for(int  j  =  0;  j  <  solvedCols.length;  ++j)  {  with  diag.length  =  0;  j  <  diag.length;  ++j)  {	  for(int    j    =    0;    j    <    diag.length;    ++j)    {    with    diag.length    =    0;    j    <    diag.length;    ++j)    {    	non-compiled	[CE]  ';'  expected	5	None	replace
6	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  with  diag.length  =  0;  j  <  diag.length;  ++j)  {  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      lmPar  =  0;  return;  }    double  sum2;  double  parl  =  0;  if  (rank  ==  solvedCols)  {      [BUGGY]  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  with  diag.length  =  0;  j  <  diag.length;  ++j)  {  [BUGGY]      int  pj  =  permutation[j];  work1[pj]  *=  diag[pj]  /  dxNorm;  }  sum2  =  0;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  double  sum  =  0;  for  (int  i  =  0;  i  <  j;  ++i)  {  sum  +=  jacobian[i][pj]  *  work1[permutation[i]];  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  determineLMParameter  [RETURN_TYPE]  void  double[]  qy  double  delta  double[]  diag  double[]  work1  double[]  work2  double[]  work3  [VARIABLES]  int[]  permutation  boolean  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  qy  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  correction  costRelativeTolerance  delta  dirDer  dirJ  dk  dxNorm  fp  gNorm  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  parl  paru  pc2  preRed  previousCost  previousFP  qrRankingThreshold  r  ratio  s  sPar  sum  sum2  threshold  tmp  xK  xNorm  xk  ypk  int  countdown  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3922322702763681	530	530	2	replace	for(int  j  =  0;  j  <  solvedCols;  ++j)  {  with  diag.length  =  0;  j  <  diag.length;  ++j)  {	  for(int    j    =    0;    j    <    diag.length;    ++j)    {    with    diag.length    =    0;    j    <    diag.length;    ++j)    {    	non-compiled	[CE]  ';'  expected	5	None	replace
7	[BUG]  [BUGGY]  with  diag.length  =  0;  j  <  diag.length;  ++j)  {  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      lmPar  =  0;  return;  }    double  sum2;  double  parl  =  0;  if  (rank  ==  solvedCols)  {      [BUGGY]  with  diag.length  =  0;  j  <  diag.length;  ++j)  {  [BUGGY]      int  pj  =  permutation[j];  work1[pj]  *=  diag[pj]  /  dxNorm;  }  sum2  =  0;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  double  sum  =  0;  for  (int  i  =  0;  i  <  j;  ++i)  {  sum  +=  jacobian[i][pj]  *  work1[permutation[i]];  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  determineLMParameter  [RETURN_TYPE]  void  double[]  qy  double  delta  double[]  diag  double[]  work1  double[]  work2  double[]  work3  [VARIABLES]  int[]  permutation  boolean  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  qy  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  correction  costRelativeTolerance  delta  dirDer  dirJ  dk  dxNorm  fp  gNorm  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  parl  paru  pc2  preRed  previousCost  previousFP  qrRankingThreshold  r  ratio  s  sPar  sum  sum2  threshold  tmp  xK  xNorm  xk  ypk  int  countdown  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3922322702763681	530	530	2	replace	with  diag.length  =  0;  j  <  diag.length;  ++j)  {	  for(int    j    =    0;    j    <    diag.length;    ++j)    {    with    diag.length    =    0;    j    <    diag.length;    ++j)    {    	non-compiled	[CE]  ';'  expected	5	None	replace
8	[BUG]  [BUGGY]  double  dxNorm  =  Math.abs(diag.length  -  parl);  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      lmPar  =  0;  return;  }    double  sum2;  double  parl  =  0;  if  (rank  ==  solvedCols)  {      [BUGGY]  double  dxNorm  =  Math.abs(diag.length  -  parl);  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  work1[pj]  *=  diag[pj]  /  dxNorm;  }  sum2  =  0;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  double  sum  =  0;  for  (int  i  =  0;  i  <  j;  ++i)  {  sum  +=  jacobian[i][pj]  *  work1[permutation[i]];  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  determineLMParameter  [RETURN_TYPE]  void  double[]  qy  double  delta  double[]  diag  double[]  work1  double[]  work2  double[]  work3  [VARIABLES]  int[]  permutation  boolean  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  qy  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  correction  costRelativeTolerance  delta  dirDer  dirJ  dk  dxNorm  fp  gNorm  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  parl  paru  pc2  preRed  previousCost  previousFP  qrRankingThreshold  r  ratio  s  sPar  sum  sum2  threshold  tmp  xK  xNorm  xk  ypk  int  countdown  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3922322702763681	530	530	2	replace	double  dxNorm  =  Math.abs(diag.length  -  parl);	  double    dxNorm    =    Math.abs(diag.length    -    solvedCols);    	non-compiled	[CE]  <identifier>  expected	67	None	replace
9	[BUG]  [BUGGY]  double  dxNorm  =  Math.abs(diag.length  -  sum2);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      lmPar  =  0;  return;  }    double  sum2;  double  parl  =  0;  if  (rank  ==  solvedCols)  {      [BUGGY]  double  dxNorm  =  Math.abs(diag.length  -  sum2);  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  work1[pj]  *=  diag[pj]  /  dxNorm;  }  sum2  =  0;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  double  sum  =  0;  for  (int  i  =  0;  i  <  j;  ++i)  {  sum  +=  jacobian[i][pj]  *  work1[permutation[i]];  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  determineLMParameter  [RETURN_TYPE]  void  double[]  qy  double  delta  double[]  diag  double[]  work1  double[]  work2  double[]  work3  [VARIABLES]  int[]  permutation  boolean  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  qy  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  correction  costRelativeTolerance  delta  dirDer  dirJ  dk  dxNorm  fp  gNorm  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  parl  paru  pc2  preRed  previousCost  previousFP  qrRankingThreshold  r  ratio  s  sPar  sum  sum2  threshold  tmp  xK  xNorm  xk  ypk  int  countdown  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3922322702763681	530	530	2	replace	double  dxNorm  =  Math.abs(diag.length  -  sum2);	  double    dxNorm    =    Math.abs(diag.length    -    solvedCols);    	non-compiled	[CE]  <identifier>  expected	67	None	replace
10	[BUG]  [BUGGY]  double  dxNorm  =  Math.abs(solvedCols.length  -  1);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      lmPar  =  0;  return;  }    double  sum2;  double  parl  =  0;  if  (rank  ==  solvedCols)  {      [BUGGY]  double  dxNorm  =  Math.abs(solvedCols.length  -  1);  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  work1[pj]  *=  diag[pj]  /  dxNorm;  }  sum2  =  0;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  double  sum  =  0;  for  (int  i  =  0;  i  <  j;  ++i)  {  sum  +=  jacobian[i][pj]  *  work1[permutation[i]];  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  determineLMParameter  [RETURN_TYPE]  void  double[]  qy  double  delta  double[]  diag  double[]  work1  double[]  work2  double[]  work3  [VARIABLES]  int[]  permutation  boolean  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  qy  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  correction  costRelativeTolerance  delta  dirDer  dirJ  dk  dxNorm  fp  gNorm  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  parl  paru  pc2  preRed  previousCost  previousFP  qrRankingThreshold  r  ratio  s  sPar  sum  sum2  threshold  tmp  xK  xNorm  xk  ypk  int  countdown  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3922322702763681	530	530	2	replace	double  dxNorm  =  Math.abs(solvedCols.length  -  1);	  double    dxNorm    =    Math.abs(diag.length    -    solvedCols);    	non-compiled	[CE]  <identifier>  expected	67	None	replace
11	[BUG]  [BUGGY]  double  dxNorm  =  Math.abs(diag.length  /  solvedCols);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      lmPar  =  0;  return;  }    double  sum2;  double  parl  =  0;  if  (rank  ==  solvedCols)  {      [BUGGY]  double  dxNorm  =  Math.abs(diag.length  /  solvedCols);  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  work1[pj]  *=  diag[pj]  /  dxNorm;  }  sum2  =  0;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  double  sum  =  0;  for  (int  i  =  0;  i  <  j;  ++i)  {  sum  +=  jacobian[i][pj]  *  work1[permutation[i]];  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  determineLMParameter  [RETURN_TYPE]  void  double[]  qy  double  delta  double[]  diag  double[]  work1  double[]  work2  double[]  work3  [VARIABLES]  int[]  permutation  boolean  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  qy  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  correction  costRelativeTolerance  delta  dirDer  dirJ  dk  dxNorm  fp  gNorm  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  parl  paru  pc2  preRed  previousCost  previousFP  qrRankingThreshold  r  ratio  s  sPar  sum  sum2  threshold  tmp  xK  xNorm  xk  ypk  int  countdown  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3922322702763681	530	530	2	replace	double  dxNorm  =  Math.abs(diag.length  /  solvedCols);	  double    dxNorm    =    Math.abs(diag.length    -    solvedCols);    	non-compiled	[CE]  <identifier>  expected	67	None	replace
12	[BUG]  [BUGGY]  double  dxNorm  =  Math.sqrt(parl,  sum2);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      lmPar  =  0;  return;  }    double  sum2;  double  parl  =  0;  if  (rank  ==  solvedCols)  {      [BUGGY]  double  dxNorm  =  Math.sqrt(parl,  sum2);  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  work1[pj]  *=  diag[pj]  /  dxNorm;  }  sum2  =  0;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  double  sum  =  0;  for  (int  i  =  0;  i  <  j;  ++i)  {  sum  +=  jacobian[i][pj]  *  work1[permutation[i]];  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  determineLMParameter  [RETURN_TYPE]  void  double[]  qy  double  delta  double[]  diag  double[]  work1  double[]  work2  double[]  work3  [VARIABLES]  int[]  permutation  boolean  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  qy  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  correction  costRelativeTolerance  delta  dirDer  dirJ  dk  dxNorm  fp  gNorm  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  parl  paru  pc2  preRed  previousCost  previousFP  qrRankingThreshold  r  ratio  s  sPar  sum  sum2  threshold  tmp  xK  xNorm  xk  ypk  int  countdown  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3922322702763681	530	530	2	replace	double  dxNorm  =  Math.sqrt(parl,  sum2);	  double    dxNorm    =    Math.sqrt(parl,    solveCols);    	non-compiled	[CE]  <identifier>  expected	49	None	replace
13	[BUG]  [BUGGY]  double  dxNorm  =  Math.sqrt(sum2,  solveCols);  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      lmPar  =  0;  return;  }    double  sum2;  double  parl  =  0;  if  (rank  ==  solvedCols)  {      [BUGGY]  double  dxNorm  =  Math.sqrt(sum2,  solveCols);  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  work1[pj]  *=  diag[pj]  /  dxNorm;  }  sum2  =  0;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  double  sum  =  0;  for  (int  i  =  0;  i  <  j;  ++i)  {  sum  +=  jacobian[i][pj]  *  work1[permutation[i]];  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  determineLMParameter  [RETURN_TYPE]  void  double[]  qy  double  delta  double[]  diag  double[]  work1  double[]  work2  double[]  work3  [VARIABLES]  int[]  permutation  boolean  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  qy  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  correction  costRelativeTolerance  delta  dirDer  dirJ  dk  dxNorm  fp  gNorm  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  parl  paru  pc2  preRed  previousCost  previousFP  qrRankingThreshold  r  ratio  s  sPar  sum  sum2  threshold  tmp  xK  xNorm  xk  ypk  int  countdown  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3922322702763681	530	530	2	replace	double  dxNorm  =  Math.sqrt(sum2,  solveCols);	  double    dxNorm    =    Math.sqrt(parl,    solveCols);    	non-compiled	[CE]  <identifier>  expected	49	None	replace
14	[BUG]  [BUGGY]  int  solvedCols  =  Math.min(resolvedCols,  sum2  +  1);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      lmPar  =  0;  return;  }    double  sum2;  double  parl  =  0;  if  (rank  ==  solvedCols)  {      [BUGGY]  int  solvedCols  =  Math.min(resolvedCols,  sum2  +  1);  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  work1[pj]  *=  diag[pj]  /  dxNorm;  }  sum2  =  0;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  double  sum  =  0;  for  (int  i  =  0;  i  <  j;  ++i)  {  sum  +=  jacobian[i][pj]  *  work1[permutation[i]];  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  determineLMParameter  [RETURN_TYPE]  void  double[]  qy  double  delta  double[]  diag  double[]  work1  double[]  work2  double[]  work3  [VARIABLES]  int[]  permutation  boolean  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  qy  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  correction  costRelativeTolerance  delta  dirDer  dirJ  dk  dxNorm  fp  gNorm  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  parl  paru  pc2  preRed  previousCost  previousFP  qrRankingThreshold  r  ratio  s  sPar  sum  sum2  threshold  tmp  xK  xNorm  xk  ypk  int  countdown  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3922322702763681	530	530	2	replace	int  solvedCols  =  Math.min(resolvedCols,  sum2  +  1);	  int    solvedCols    =    Math.min(resolvedCols,    parl    +    1);    	non-compiled	[CE]  <identifier>  expected	79	None	replace
15	[BUG]  [BUGGY]  int  solvedCols  =  Math.max(resolvedCols,  parl  +  1);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      lmPar  =  0;  return;  }    double  sum2;  double  parl  =  0;  if  (rank  ==  solvedCols)  {      [BUGGY]  int  solvedCols  =  Math.max(resolvedCols,  parl  +  1);  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  work1[pj]  *=  diag[pj]  /  dxNorm;  }  sum2  =  0;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  double  sum  =  0;  for  (int  i  =  0;  i  <  j;  ++i)  {  sum  +=  jacobian[i][pj]  *  work1[permutation[i]];  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  determineLMParameter  [RETURN_TYPE]  void  double[]  qy  double  delta  double[]  diag  double[]  work1  double[]  work2  double[]  work3  [VARIABLES]  int[]  permutation  boolean  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  qy  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  correction  costRelativeTolerance  delta  dirDer  dirJ  dk  dxNorm  fp  gNorm  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  parl  paru  pc2  preRed  previousCost  previousFP  qrRankingThreshold  r  ratio  s  sPar  sum  sum2  threshold  tmp  xK  xNorm  xk  ypk  int  countdown  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3922322702763681	530	530	2	replace	int  solvedCols  =  Math.max(resolvedCols,  parl  +  1);	  int    solvedCols    =    Math.min(resolvedCols,    parl    +    1);    	non-compiled	[CE]  <identifier>  expected	79	None	replace
16	[BUG]  [BUGGY]  int  solvedCols  =  Math.min(resolvedCols,  lmPar  +  1);  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      lmPar  =  0;  return;  }    double  sum2;  double  parl  =  0;  if  (rank  ==  solvedCols)  {      [BUGGY]  int  solvedCols  =  Math.min(resolvedCols,  lmPar  +  1);  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  work1[pj]  *=  diag[pj]  /  dxNorm;  }  sum2  =  0;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  double  sum  =  0;  for  (int  i  =  0;  i  <  j;  ++i)  {  sum  +=  jacobian[i][pj]  *  work1[permutation[i]];  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  determineLMParameter  [RETURN_TYPE]  void  double[]  qy  double  delta  double[]  diag  double[]  work1  double[]  work2  double[]  work3  [VARIABLES]  int[]  permutation  boolean  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  qy  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  correction  costRelativeTolerance  delta  dirDer  dirJ  dk  dxNorm  fp  gNorm  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  parl  paru  pc2  preRed  previousCost  previousFP  qrRankingThreshold  r  ratio  s  sPar  sum  sum2  threshold  tmp  xK  xNorm  xk  ypk  int  countdown  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3922322702763681	530	530	2	replace	int  solvedCols  =  Math.min(resolvedCols,  lmPar  +  1);	  int    solvedCols    =    Math.min(resolvedCols,    parl    +    1);    	non-compiled	[CE]  <identifier>  expected	79	None	replace
17	[BUG]  [BUGGY]  double  dxNorm  =  Math.sqrt(solveCols,  sum2);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      lmPar  =  0;  return;  }    double  sum2;  double  parl  =  0;  if  (rank  ==  solvedCols)  {      [BUGGY]  double  dxNorm  =  Math.sqrt(solveCols,  sum2);  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  work1[pj]  *=  diag[pj]  /  dxNorm;  }  sum2  =  0;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  double  sum  =  0;  for  (int  i  =  0;  i  <  j;  ++i)  {  sum  +=  jacobian[i][pj]  *  work1[permutation[i]];  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  determineLMParameter  [RETURN_TYPE]  void  double[]  qy  double  delta  double[]  diag  double[]  work1  double[]  work2  double[]  work3  [VARIABLES]  int[]  permutation  boolean  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  qy  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  correction  costRelativeTolerance  delta  dirDer  dirJ  dk  dxNorm  fp  gNorm  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  parl  paru  pc2  preRed  previousCost  previousFP  qrRankingThreshold  r  ratio  s  sPar  sum  sum2  threshold  tmp  xK  xNorm  xk  ypk  int  countdown  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3922322702763681	530	530	2	replace	double  dxNorm  =  Math.sqrt(solveCols,  sum2);	  double    dxNorm    =    Math.sqrt(solveCols,rank);    	non-compiled	[CE]  <identifier>  expected	25	None	replace
18	[BUG]  [BUGGY]  double  dxNorm  =  Math.sqrt(solveCols,  parl);  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      lmPar  =  0;  return;  }    double  sum2;  double  parl  =  0;  if  (rank  ==  solvedCols)  {      [BUGGY]  double  dxNorm  =  Math.sqrt(solveCols,  parl);  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  work1[pj]  *=  diag[pj]  /  dxNorm;  }  sum2  =  0;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  double  sum  =  0;  for  (int  i  =  0;  i  <  j;  ++i)  {  sum  +=  jacobian[i][pj]  *  work1[permutation[i]];  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  determineLMParameter  [RETURN_TYPE]  void  double[]  qy  double  delta  double[]  diag  double[]  work1  double[]  work2  double[]  work3  [VARIABLES]  int[]  permutation  boolean  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  qy  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  correction  costRelativeTolerance  delta  dirDer  dirJ  dk  dxNorm  fp  gNorm  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  parl  paru  pc2  preRed  previousCost  previousFP  qrRankingThreshold  r  ratio  s  sPar  sum  sum2  threshold  tmp  xK  xNorm  xk  ypk  int  countdown  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3922322702763681	530	530	2	replace	double  dxNorm  =  Math.sqrt(solveCols,  parl);	  double    dxNorm    =    Math.sqrt(solveCols,rank);    	non-compiled	[CE]  <identifier>  expected	25	None	replace
19	[BUG]  [BUGGY]  double  dxNorm  =  Math.sqrt(solvedCols,rank);  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      lmPar  =  0;  return;  }    double  sum2;  double  parl  =  0;  if  (rank  ==  solvedCols)  {      [BUGGY]  double  dxNorm  =  Math.sqrt(solvedCols,rank);  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  work1[pj]  *=  diag[pj]  /  dxNorm;  }  sum2  =  0;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  double  sum  =  0;  for  (int  i  =  0;  i  <  j;  ++i)  {  sum  +=  jacobian[i][pj]  *  work1[permutation[i]];  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  determineLMParameter  [RETURN_TYPE]  void  double[]  qy  double  delta  double[]  diag  double[]  work1  double[]  work2  double[]  work3  [VARIABLES]  int[]  permutation  boolean  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  qy  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  correction  costRelativeTolerance  delta  dirDer  dirJ  dk  dxNorm  fp  gNorm  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  parl  paru  pc2  preRed  previousCost  previousFP  qrRankingThreshold  r  ratio  s  sPar  sum  sum2  threshold  tmp  xK  xNorm  xk  ypk  int  countdown  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3922322702763681	530	530	2	replace	double  dxNorm  =  Math.sqrt(solvedCols,rank);	  double    dxNorm    =    Math.sqrt(solveCols,rank);    	non-compiled	[CE]  <identifier>  expected	25	None	replace
20	[BUG]  [BUGGY]  double  dxNorm  =  Math.sqrt(diag,rank);  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      lmPar  =  0;  return;  }    double  sum2;  double  parl  =  0;  if  (rank  ==  solvedCols)  {      [BUGGY]  double  dxNorm  =  Math.sqrt(diag,rank);  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  work1[pj]  *=  diag[pj]  /  dxNorm;  }  sum2  =  0;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  double  sum  =  0;  for  (int  i  =  0;  i  <  j;  ++i)  {  sum  +=  jacobian[i][pj]  *  work1[permutation[i]];  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  determineLMParameter  [RETURN_TYPE]  void  double[]  qy  double  delta  double[]  diag  double[]  work1  double[]  work2  double[]  work3  [VARIABLES]  int[]  permutation  boolean  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  qy  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  correction  costRelativeTolerance  delta  dirDer  dirJ  dk  dxNorm  fp  gNorm  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  parl  paru  pc2  preRed  previousCost  previousFP  qrRankingThreshold  r  ratio  s  sPar  sum  sum2  threshold  tmp  xK  xNorm  xk  ypk  int  countdown  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3922322702763681	530	530	2	replace	double  dxNorm  =  Math.sqrt(diag,rank);	  double    dxNorm    =    Math.sqrt(solveCols,rank);    	non-compiled	[CE]  <identifier>  expected	25	None	replace
21	[BUG]  [BUGGY]  int  i  =  0,  parl  =  0;  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      lmPar  =  0;  return;  }    double  sum2;  double  parl  =  0;  if  (rank  ==  solvedCols)  {      [BUGGY]  int  i  =  0,  parl  =  0;  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  work1[pj]  *=  diag[pj]  /  dxNorm;  }  sum2  =  0;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  double  sum  =  0;  for  (int  i  =  0;  i  <  j;  ++i)  {  sum  +=  jacobian[i][pj]  *  work1[permutation[i]];  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  determineLMParameter  [RETURN_TYPE]  void  double[]  qy  double  delta  double[]  diag  double[]  work1  double[]  work2  double[]  work3  [VARIABLES]  int[]  permutation  boolean  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  qy  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  correction  costRelativeTolerance  delta  dirDer  dirJ  dk  dxNorm  fp  gNorm  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  parl  paru  pc2  preRed  previousCost  previousFP  qrRankingThreshold  r  ratio  s  sPar  sum  sum2  threshold  tmp  xK  xNorm  xk  ypk  int  countdown  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3922322702763681	530	530	2	replace	int  i  =  0,  parl  =  0;	  int    i    =    2;    	non-compiled	[CE]  <identifier>  expected	14	None	replace
22	[BUG]  [BUGGY]  Double  solvedCols  =  Math.max(solvedCols,  parl);  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      lmPar  =  0;  return;  }    double  sum2;  double  parl  =  0;  if  (rank  ==  solvedCols)  {      [BUGGY]  Double  solvedCols  =  Math.max(solvedCols,  parl);  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  work1[pj]  *=  diag[pj]  /  dxNorm;  }  sum2  =  0;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  double  sum  =  0;  for  (int  i  =  0;  i  <  j;  ++i)  {  sum  +=  jacobian[i][pj]  *  work1[permutation[i]];  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  determineLMParameter  [RETURN_TYPE]  void  double[]  qy  double  delta  double[]  diag  double[]  work1  double[]  work2  double[]  work3  [VARIABLES]  int[]  permutation  boolean  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  qy  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  correction  costRelativeTolerance  delta  dirDer  dirJ  dk  dxNorm  fp  gNorm  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  parl  paru  pc2  preRed  previousCost  previousFP  qrRankingThreshold  r  ratio  s  sPar  sum  sum2  threshold  tmp  xK  xNorm  xk  ypk  int  countdown  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3922322702763681	530	530	2	replace	Double  solvedCols  =  Math.max(solvedCols,  parl);	  Double    solvedCols    =    Math.min(solvedCols,    sum2);    	non-compiled	[CE]  <identifier>  expected	37	None	replace
23	[BUG]  [BUGGY]  Double  solvedCols  =  Math.min(solvedCols,  lmPar);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      lmPar  =  0;  return;  }    double  sum2;  double  parl  =  0;  if  (rank  ==  solvedCols)  {      [BUGGY]  Double  solvedCols  =  Math.min(solvedCols,  lmPar);  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  work1[pj]  *=  diag[pj]  /  dxNorm;  }  sum2  =  0;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  double  sum  =  0;  for  (int  i  =  0;  i  <  j;  ++i)  {  sum  +=  jacobian[i][pj]  *  work1[permutation[i]];  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  determineLMParameter  [RETURN_TYPE]  void  double[]  qy  double  delta  double[]  diag  double[]  work1  double[]  work2  double[]  work3  [VARIABLES]  int[]  permutation  boolean  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  qy  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  correction  costRelativeTolerance  delta  dirDer  dirJ  dk  dxNorm  fp  gNorm  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  parl  paru  pc2  preRed  previousCost  previousFP  qrRankingThreshold  r  ratio  s  sPar  sum  sum2  threshold  tmp  xK  xNorm  xk  ypk  int  countdown  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3922322702763681	530	530	2	replace	Double  solvedCols  =  Math.min(solvedCols,  lmPar);	  Double    solvedCols    =    Math.min(solvedCols,    sum2);    	non-compiled	[CE]  <identifier>  expected	37	None	replace
24	[BUG]  [BUGGY]  Double  solvedCols  =  Math.min(solvedCols,  parl  -  1);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      lmPar  =  0;  return;  }    double  sum2;  double  parl  =  0;  if  (rank  ==  solvedCols)  {      [BUGGY]  Double  solvedCols  =  Math.min(solvedCols,  parl  -  1);  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  work1[pj]  *=  diag[pj]  /  dxNorm;  }  sum2  =  0;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  double  sum  =  0;  for  (int  i  =  0;  i  <  j;  ++i)  {  sum  +=  jacobian[i][pj]  *  work1[permutation[i]];  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  determineLMParameter  [RETURN_TYPE]  void  double[]  qy  double  delta  double[]  diag  double[]  work1  double[]  work2  double[]  work3  [VARIABLES]  int[]  permutation  boolean  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  qy  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  correction  costRelativeTolerance  delta  dirDer  dirJ  dk  dxNorm  fp  gNorm  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  parl  paru  pc2  preRed  previousCost  previousFP  qrRankingThreshold  r  ratio  s  sPar  sum  sum2  threshold  tmp  xK  xNorm  xk  ypk  int  countdown  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3922322702763681	530	530	2	replace	Double  solvedCols  =  Math.min(solvedCols,  parl  -  1);	  Double    solvedCols    =    Math.min(solvedCols,    sum2    -    1);    	non-compiled	[CE]  <identifier>  expected	34	None	replace
25	[BUG]  [BUGGY]  Double  solvedCols  =  Math.max(solvedCols,  parl  -  1);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      lmPar  =  0;  return;  }    double  sum2;  double  parl  =  0;  if  (rank  ==  solvedCols)  {      [BUGGY]  Double  solvedCols  =  Math.max(solvedCols,  parl  -  1);  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  work1[pj]  *=  diag[pj]  /  dxNorm;  }  sum2  =  0;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  double  sum  =  0;  for  (int  i  =  0;  i  <  j;  ++i)  {  sum  +=  jacobian[i][pj]  *  work1[permutation[i]];  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  determineLMParameter  [RETURN_TYPE]  void  double[]  qy  double  delta  double[]  diag  double[]  work1  double[]  work2  double[]  work3  [VARIABLES]  int[]  permutation  boolean  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  qy  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  correction  costRelativeTolerance  delta  dirDer  dirJ  dk  dxNorm  fp  gNorm  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  parl  paru  pc2  preRed  previousCost  previousFP  qrRankingThreshold  r  ratio  s  sPar  sum  sum2  threshold  tmp  xK  xNorm  xk  ypk  int  countdown  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3922322702763681	530	530	2	replace	Double  solvedCols  =  Math.max(solvedCols,  parl  -  1);	  Double    solvedCols    =    Math.min(solvedCols,    sum2    -    1);    	non-compiled	[CE]  <identifier>  expected	34	None	replace
26	[BUG]  [BUGGY]  double  solvedCols  =  Math.min(solvedCols,  parl  -  1);  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      lmPar  =  0;  return;  }    double  sum2;  double  parl  =  0;  if  (rank  ==  solvedCols)  {      [BUGGY]  double  solvedCols  =  Math.min(solvedCols,  parl  -  1);  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  work1[pj]  *=  diag[pj]  /  dxNorm;  }  sum2  =  0;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  double  sum  =  0;  for  (int  i  =  0;  i  <  j;  ++i)  {  sum  +=  jacobian[i][pj]  *  work1[permutation[i]];  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  determineLMParameter  [RETURN_TYPE]  void  double[]  qy  double  delta  double[]  diag  double[]  work1  double[]  work2  double[]  work3  [VARIABLES]  int[]  permutation  boolean  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  qy  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  correction  costRelativeTolerance  delta  dirDer  dirJ  dk  dxNorm  fp  gNorm  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  parl  paru  pc2  preRed  previousCost  previousFP  qrRankingThreshold  r  ratio  s  sPar  sum  sum2  threshold  tmp  xK  xNorm  xk  ypk  int  countdown  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3922322702763681	530	530	2	replace	double  solvedCols  =  Math.min(solvedCols,  parl  -  1);	  Double    solvedCols    =    Math.min(solvedCols,    sum2    -    1);    	non-compiled	[CE]  <identifier>  expected	34	None	replace
27	[BUG]  [BUGGY]  For(int  j  =  0;  j  <  solvedCols.length  -  1;  ++j)  {  [CE]  '.class'  expected  [FE]            AssertionFailedError      [CONTEXT]      lmPar  =  0;  return;  }    double  sum2;  double  parl  =  0;  if  (rank  ==  solvedCols)  {      [BUGGY]  For(int  j  =  0;  j  <  solvedCols.length  -  1;  ++j)  {  [BUGGY]      int  pj  =  permutation[j];  work1[pj]  *=  diag[pj]  /  dxNorm;  }  sum2  =  0;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  double  sum  =  0;  for  (int  i  =  0;  i  <  j;  ++i)  {  sum  +=  jacobian[i][pj]  *  work1[permutation[i]];  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  determineLMParameter  [RETURN_TYPE]  void  double[]  qy  double  delta  double[]  diag  double[]  work1  double[]  work2  double[]  work3  [VARIABLES]  int[]  permutation  boolean  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  qy  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  correction  costRelativeTolerance  delta  dirDer  dirJ  dk  dxNorm  fp  gNorm  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  parl  paru  pc2  preRed  previousCost  previousFP  qrRankingThreshold  r  ratio  s  sPar  sum  sum2  threshold  tmp  xK  xNorm  xk  ypk  int  countdown  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3922322702763681	530	530	2	replace	For(int  j  =  0;  j  <  solvedCols.length  -  1;  ++j)  {	  For(int    j    =    0;    j    <    solvedCols.length;    ++j)    {    	non-compiled	[CE]  '.class'  expected	63	None	replace
28	[BUG]  [BUGGY]  For(int  j  =  0;  j  <  solvedCols.length  +  1;  ++j)  {  [CE]  '.class'  expected  [FE]              AssertionFailedError      [CONTEXT]      lmPar  =  0;  return;  }    double  sum2;  double  parl  =  0;  if  (rank  ==  solvedCols)  {      [BUGGY]  For(int  j  =  0;  j  <  solvedCols.length  +  1;  ++j)  {  [BUGGY]      int  pj  =  permutation[j];  work1[pj]  *=  diag[pj]  /  dxNorm;  }  sum2  =  0;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  double  sum  =  0;  for  (int  i  =  0;  i  <  j;  ++i)  {  sum  +=  jacobian[i][pj]  *  work1[permutation[i]];  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  determineLMParameter  [RETURN_TYPE]  void  double[]  qy  double  delta  double[]  diag  double[]  work1  double[]  work2  double[]  work3  [VARIABLES]  int[]  permutation  boolean  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  qy  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  correction  costRelativeTolerance  delta  dirDer  dirJ  dk  dxNorm  fp  gNorm  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  parl  paru  pc2  preRed  previousCost  previousFP  qrRankingThreshold  r  ratio  s  sPar  sum  sum2  threshold  tmp  xK  xNorm  xk  ypk  int  countdown  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3922322702763681	530	530	2	replace	For(int  j  =  0;  j  <  solvedCols.length  +  1;  ++j)  {	  For(int    j    =    0;    j    <    solvedCols.length;    ++j)    {    	non-compiled	[CE]  '.class'  expected	63	None	replace
29	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  work2.length;  ++j)  {  for(int  j  =  0;  j  <  work2.length;  ++j)  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      lmPar  =  0;  return;  }    double  sum2;  double  parl  =  0;  if  (rank  ==  solvedCols)  {      [BUGGY]  for(int  j  =  0;  j  <  work2.length;  ++j)  {  for(int  j  =  0;  j  <  work2.length;  ++j)  {  [BUGGY]      int  pj  =  permutation[j];  work1[pj]  *=  diag[pj]  /  dxNorm;  }  sum2  =  0;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  double  sum  =  0;  for  (int  i  =  0;  i  <  j;  ++i)  {  sum  +=  jacobian[i][pj]  *  work1[permutation[i]];  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  determineLMParameter  [RETURN_TYPE]  void  double[]  qy  double  delta  double[]  diag  double[]  work1  double[]  work2  double[]  work3  [VARIABLES]  int[]  permutation  boolean  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  qy  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  correction  costRelativeTolerance  delta  dirDer  dirJ  dk  dxNorm  fp  gNorm  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  parl  paru  pc2  preRed  previousCost  previousFP  qrRankingThreshold  r  ratio  s  sPar  sum  sum2  threshold  tmp  xK  xNorm  xk  ypk  int  countdown  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3922322702763681	530	530	2	replace	for(int    j    =    0;    j    <    work2.length;    ++j)    {    for(int  j  =  0;  j  <  work2.length;  ++j)  {	  	non-compiled	[CE]  illegal  start  of  expression	50	None	add
30	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  work2.length;  ++j)  {  int  j  =  0;  j  <  work2.length;  ++j)  {  [CE]  >  expected  [FE]      AssertionFailedError    [CONTEXT]      lmPar  =  0;  return;  }    double  sum2;  double  parl  =  0;  if  (rank  ==  solvedCols)  {      [BUGGY]  for(int  j  =  0;  j  <  work2.length;  ++j)  {  int  j  =  0;  j  <  work2.length;  ++j)  {  [BUGGY]      int  pj  =  permutation[j];  work1[pj]  *=  diag[pj]  /  dxNorm;  }  sum2  =  0;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  double  sum  =  0;  for  (int  i  =  0;  i  <  j;  ++i)  {  sum  +=  jacobian[i][pj]  *  work1[permutation[i]];  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  determineLMParameter  [RETURN_TYPE]  void  double[]  qy  double  delta  double[]  diag  double[]  work1  double[]  work2  double[]  work3  [VARIABLES]  int[]  permutation  boolean  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  qy  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  correction  costRelativeTolerance  delta  dirDer  dirJ  dk  dxNorm  fp  gNorm  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  parl  paru  pc2  preRed  previousCost  previousFP  qrRankingThreshold  r  ratio  s  sPar  sum  sum2  threshold  tmp  xK  xNorm  xk  ypk  int  countdown  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3922322702763681	530	530	2	replace	for(int    j    =    0;    j    <    work2.length;    ++j)    {    int  j  =  0;  j  <  work2.length;  ++j)  {	  	non-compiled	[CE]  >  expected	50	None	add
31	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  work2.length;  ++j)  {  For(int  j  =  0;  j  <  work2.length;  ++j)  {  [CE]  '.class'  expected  [FE]        AssertionFailedError    [CONTEXT]      lmPar  =  0;  return;  }    double  sum2;  double  parl  =  0;  if  (rank  ==  solvedCols)  {      [BUGGY]  for(int  j  =  0;  j  <  work2.length;  ++j)  {  For(int  j  =  0;  j  <  work2.length;  ++j)  {  [BUGGY]      int  pj  =  permutation[j];  work1[pj]  *=  diag[pj]  /  dxNorm;  }  sum2  =  0;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  double  sum  =  0;  for  (int  i  =  0;  i  <  j;  ++i)  {  sum  +=  jacobian[i][pj]  *  work1[permutation[i]];  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  determineLMParameter  [RETURN_TYPE]  void  double[]  qy  double  delta  double[]  diag  double[]  work1  double[]  work2  double[]  work3  [VARIABLES]  int[]  permutation  boolean  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  qy  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  correction  costRelativeTolerance  delta  dirDer  dirJ  dk  dxNorm  fp  gNorm  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  parl  paru  pc2  preRed  previousCost  previousFP  qrRankingThreshold  r  ratio  s  sPar  sum  sum2  threshold  tmp  xK  xNorm  xk  ypk  int  countdown  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3922322702763681	530	530	2	replace	for(int    j    =    0;    j    <    work2.length;    ++j)    {    For(int  j  =  0;  j  <  work2.length;  ++j)  {	  	non-compiled	[CE]  '.class'  expected	50	None	add
32	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  work2.length;  ++j)  {  Integer  j  =  0;  j  <  work2.length;  ++j)  {  [CE]  >  expected  [FE]          AssertionFailedError    [CONTEXT]      lmPar  =  0;  return;  }    double  sum2;  double  parl  =  0;  if  (rank  ==  solvedCols)  {      [BUGGY]  for(int  j  =  0;  j  <  work2.length;  ++j)  {  Integer  j  =  0;  j  <  work2.length;  ++j)  {  [BUGGY]      int  pj  =  permutation[j];  work1[pj]  *=  diag[pj]  /  dxNorm;  }  sum2  =  0;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  double  sum  =  0;  for  (int  i  =  0;  i  <  j;  ++i)  {  sum  +=  jacobian[i][pj]  *  work1[permutation[i]];  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  determineLMParameter  [RETURN_TYPE]  void  double[]  qy  double  delta  double[]  diag  double[]  work1  double[]  work2  double[]  work3  [VARIABLES]  int[]  permutation  boolean  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  qy  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  correction  costRelativeTolerance  delta  dirDer  dirJ  dk  dxNorm  fp  gNorm  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  parl  paru  pc2  preRed  previousCost  previousFP  qrRankingThreshold  r  ratio  s  sPar  sum  sum2  threshold  tmp  xK  xNorm  xk  ypk  int  countdown  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3922322702763681	530	530	2	replace	for(int    j    =    0;    j    <    work2.length;    ++j)    {    Integer  j  =  0;  j  <  work2.length;  ++j)  {	  	non-compiled	[CE]  >  expected	50	None	add
33	[BUG]  [BUGGY]  double  dxNorm  =  Math.sqrt(diag,  sum2);  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      lmPar  =  0;  return;  }    double  sum2;  double  parl  =  0;  if  (rank  ==  solvedCols)  {      [BUGGY]  double  dxNorm  =  Math.sqrt(diag,  sum2);  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  work1[pj]  *=  diag[pj]  /  dxNorm;  }  sum2  =  0;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  double  sum  =  0;  for  (int  i  =  0;  i  <  j;  ++i)  {  sum  +=  jacobian[i][pj]  *  work1[permutation[i]];  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  determineLMParameter  [RETURN_TYPE]  void  double[]  qy  double  delta  double[]  diag  double[]  work1  double[]  work2  double[]  work3  [VARIABLES]  int[]  permutation  boolean  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  qy  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  correction  costRelativeTolerance  delta  dirDer  dirJ  dk  dxNorm  fp  gNorm  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  parl  paru  pc2  preRed  previousCost  previousFP  qrRankingThreshold  r  ratio  s  sPar  sum  sum2  threshold  tmp  xK  xNorm  xk  ypk  int  countdown  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3922322702763681	530	530	2	replace	double  dxNorm  =  Math.sqrt(diag,  sum2);	  double    dxNorm    =    Math.sqrt(diag,    parl);    	non-compiled	[CE]  <identifier>  expected	73	None	replace
34	[BUG]  [BUGGY]  double  dxNorm  =  Math.sqrt(solvedCols,  parl);  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      lmPar  =  0;  return;  }    double  sum2;  double  parl  =  0;  if  (rank  ==  solvedCols)  {      [BUGGY]  double  dxNorm  =  Math.sqrt(solvedCols,  parl);  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  work1[pj]  *=  diag[pj]  /  dxNorm;  }  sum2  =  0;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  double  sum  =  0;  for  (int  i  =  0;  i  <  j;  ++i)  {  sum  +=  jacobian[i][pj]  *  work1[permutation[i]];  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  determineLMParameter  [RETURN_TYPE]  void  double[]  qy  double  delta  double[]  diag  double[]  work1  double[]  work2  double[]  work3  [VARIABLES]  int[]  permutation  boolean  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  qy  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  correction  costRelativeTolerance  delta  dirDer  dirJ  dk  dxNorm  fp  gNorm  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  parl  paru  pc2  preRed  previousCost  previousFP  qrRankingThreshold  r  ratio  s  sPar  sum  sum2  threshold  tmp  xK  xNorm  xk  ypk  int  countdown  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3922322702763681	530	530	2	replace	double  dxNorm  =  Math.sqrt(solvedCols,  parl);	  double    dxNorm    =    Math.sqrt(diag,    parl);    	non-compiled	[CE]  <identifier>  expected	73	None	replace
35	[BUG]  [BUGGY]  double  dxNorm  =  Math.sqrt(rank,  parl);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      lmPar  =  0;  return;  }    double  sum2;  double  parl  =  0;  if  (rank  ==  solvedCols)  {      [BUGGY]  double  dxNorm  =  Math.sqrt(rank,  parl);  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  work1[pj]  *=  diag[pj]  /  dxNorm;  }  sum2  =  0;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  double  sum  =  0;  for  (int  i  =  0;  i  <  j;  ++i)  {  sum  +=  jacobian[i][pj]  *  work1[permutation[i]];  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  determineLMParameter  [RETURN_TYPE]  void  double[]  qy  double  delta  double[]  diag  double[]  work1  double[]  work2  double[]  work3  [VARIABLES]  int[]  permutation  boolean  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  qy  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  correction  costRelativeTolerance  delta  dirDer  dirJ  dk  dxNorm  fp  gNorm  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  parl  paru  pc2  preRed  previousCost  previousFP  qrRankingThreshold  r  ratio  s  sPar  sum  sum2  threshold  tmp  xK  xNorm  xk  ypk  int  countdown  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3922322702763681	530	530	2	replace	double  dxNorm  =  Math.sqrt(rank,  parl);	  double    dxNorm    =    Math.sqrt(diag,    parl);    	non-compiled	[CE]  <identifier>  expected	73	None	replace
36	[BUG]  [BUGGY]  int  j  =  0;  j  <  parl;  ++j)  {  [CE]  >  expected  [FE]          AssertionFailedError      [CONTEXT]      lmPar  =  0;  return;  }    double  sum2;  double  parl  =  0;  if  (rank  ==  solvedCols)  {      [BUGGY]  int  j  =  0;  j  <  parl;  ++j)  {  [BUGGY]      int  pj  =  permutation[j];  work1[pj]  *=  diag[pj]  /  dxNorm;  }  sum2  =  0;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  double  sum  =  0;  for  (int  i  =  0;  i  <  j;  ++i)  {  sum  +=  jacobian[i][pj]  *  work1[permutation[i]];  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  determineLMParameter  [RETURN_TYPE]  void  double[]  qy  double  delta  double[]  diag  double[]  work1  double[]  work2  double[]  work3  [VARIABLES]  int[]  permutation  boolean  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  qy  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  correction  costRelativeTolerance  delta  dirDer  dirJ  dk  dxNorm  fp  gNorm  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  parl  paru  pc2  preRed  previousCost  previousFP  qrRankingThreshold  r  ratio  s  sPar  sum  sum2  threshold  tmp  xK  xNorm  xk  ypk  int  countdown  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3922322702763681	530	530	2	replace	int  j  =  0;  j  <  parl;  ++j)  {	  for(int    j    =    0;    j    <    parl;    ++j)    {    int    j    =    0;    j    <    parl;    ++j)    {    	non-compiled	[CE]  >  expected	16	None	replace
37	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  int  j  =  0;  j  <  parl;  ++j)  {  [CE]  >  expected  [FE]            AssertionFailedError      [CONTEXT]      lmPar  =  0;  return;  }    double  sum2;  double  parl  =  0;  if  (rank  ==  solvedCols)  {      [BUGGY]  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  int  j  =  0;  j  <  parl;  ++j)  {  [BUGGY]      int  pj  =  permutation[j];  work1[pj]  *=  diag[pj]  /  dxNorm;  }  sum2  =  0;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  double  sum  =  0;  for  (int  i  =  0;  i  <  j;  ++i)  {  sum  +=  jacobian[i][pj]  *  work1[permutation[i]];  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  determineLMParameter  [RETURN_TYPE]  void  double[]  qy  double  delta  double[]  diag  double[]  work1  double[]  work2  double[]  work3  [VARIABLES]  int[]  permutation  boolean  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  qy  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  correction  costRelativeTolerance  delta  dirDer  dirJ  dk  dxNorm  fp  gNorm  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  parl  paru  pc2  preRed  previousCost  previousFP  qrRankingThreshold  r  ratio  s  sPar  sum  sum2  threshold  tmp  xK  xNorm  xk  ypk  int  countdown  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3922322702763681	530	530	2	replace	for(int  j  =  0;  j  <  solvedCols;  ++j)  {  int  j  =  0;  j  <  parl;  ++j)  {	  for(int    j    =    0;    j    <    parl;    ++j)    {    int    j    =    0;    j    <    parl;    ++j)    {    	non-compiled	[CE]  >  expected	16	None	replace
38	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  solveCols;  ++j)  {  int  j  =  0;  j  <  parl;  ++j)  {  [CE]  >  expected  [FE]              AssertionFailedError      [CONTEXT]      lmPar  =  0;  return;  }    double  sum2;  double  parl  =  0;  if  (rank  ==  solvedCols)  {      [BUGGY]  for(int  j  =  0;  j  <  solveCols;  ++j)  {  int  j  =  0;  j  <  parl;  ++j)  {  [BUGGY]      int  pj  =  permutation[j];  work1[pj]  *=  diag[pj]  /  dxNorm;  }  sum2  =  0;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  double  sum  =  0;  for  (int  i  =  0;  i  <  j;  ++i)  {  sum  +=  jacobian[i][pj]  *  work1[permutation[i]];  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  determineLMParameter  [RETURN_TYPE]  void  double[]  qy  double  delta  double[]  diag  double[]  work1  double[]  work2  double[]  work3  [VARIABLES]  int[]  permutation  boolean  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  qy  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  correction  costRelativeTolerance  delta  dirDer  dirJ  dk  dxNorm  fp  gNorm  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  parl  paru  pc2  preRed  previousCost  previousFP  qrRankingThreshold  r  ratio  s  sPar  sum  sum2  threshold  tmp  xK  xNorm  xk  ypk  int  countdown  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3922322702763681	530	530	2	replace	for(int  j  =  0;  j  <  solveCols;  ++j)  {  int  j  =  0;  j  <  parl;  ++j)  {	  for(int    j    =    0;    j    <    parl;    ++j)    {    int    j    =    0;    j    <    parl;    ++j)    {    	non-compiled	[CE]  >  expected	16	None	replace
39	[BUG]  [BUGGY]  int  permutation[j]  =  diag[0];  [CE]  ']'  expected  [FE]                AssertionFailedError      [CONTEXT]      lmPar  =  0;  return;  }    double  sum2;  double  parl  =  0;  if  (rank  ==  solvedCols)  {      [BUGGY]  int  permutation[j]  =  diag[0];  [BUGGY]      int  pj  =  permutation[j];  work1[pj]  *=  diag[pj]  /  dxNorm;  }  sum2  =  0;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  double  sum  =  0;  for  (int  i  =  0;  i  <  j;  ++i)  {  sum  +=  jacobian[i][pj]  *  work1[permutation[i]];  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  determineLMParameter  [RETURN_TYPE]  void  double[]  qy  double  delta  double[]  diag  double[]  work1  double[]  work2  double[]  work3  [VARIABLES]  int[]  permutation  boolean  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  qy  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  correction  costRelativeTolerance  delta  dirDer  dirJ  dk  dxNorm  fp  gNorm  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  parl  paru  pc2  preRed  previousCost  previousFP  qrRankingThreshold  r  ratio  s  sPar  sum  sum2  threshold  tmp  xK  xNorm  xk  ypk  int  countdown  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3922322702763681	530	530	2	replace	int  permutation[j]  =  diag[0];	  int    permutation[j]    =    qy[0];    	non-compiled	[CE]  ']'  expected	62	None	replace
40	[BUG]  [BUGGY]  int  permutation[j]  =  work1[0];  [CE]  ']'  expected  [FE]                  AssertionFailedError      [CONTEXT]      lmPar  =  0;  return;  }    double  sum2;  double  parl  =  0;  if  (rank  ==  solvedCols)  {      [BUGGY]  int  permutation[j]  =  work1[0];  [BUGGY]      int  pj  =  permutation[j];  work1[pj]  *=  diag[pj]  /  dxNorm;  }  sum2  =  0;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  double  sum  =  0;  for  (int  i  =  0;  i  <  j;  ++i)  {  sum  +=  jacobian[i][pj]  *  work1[permutation[i]];  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  determineLMParameter  [RETURN_TYPE]  void  double[]  qy  double  delta  double[]  diag  double[]  work1  double[]  work2  double[]  work3  [VARIABLES]  int[]  permutation  boolean  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  qy  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  correction  costRelativeTolerance  delta  dirDer  dirJ  dk  dxNorm  fp  gNorm  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  parl  paru  pc2  preRed  previousCost  previousFP  qrRankingThreshold  r  ratio  s  sPar  sum  sum2  threshold  tmp  xK  xNorm  xk  ypk  int  countdown  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3922322702763681	530	530	2	replace	int  permutation[j]  =  work1[0];	  int    permutation[j]    =    qy[0];    	non-compiled	[CE]  ']'  expected	62	None	replace
41	[BUG]  [BUGGY]  int  permutation[j]  =  work2[0];  [CE]  ']'  expected  [FE]                    AssertionFailedError      [CONTEXT]      lmPar  =  0;  return;  }    double  sum2;  double  parl  =  0;  if  (rank  ==  solvedCols)  {      [BUGGY]  int  permutation[j]  =  work2[0];  [BUGGY]      int  pj  =  permutation[j];  work1[pj]  *=  diag[pj]  /  dxNorm;  }  sum2  =  0;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  double  sum  =  0;  for  (int  i  =  0;  i  <  j;  ++i)  {  sum  +=  jacobian[i][pj]  *  work1[permutation[i]];  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  determineLMParameter  [RETURN_TYPE]  void  double[]  qy  double  delta  double[]  diag  double[]  work1  double[]  work2  double[]  work3  [VARIABLES]  int[]  permutation  boolean  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  qy  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  correction  costRelativeTolerance  delta  dirDer  dirJ  dk  dxNorm  fp  gNorm  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  parl  paru  pc2  preRed  previousCost  previousFP  qrRankingThreshold  r  ratio  s  sPar  sum  sum2  threshold  tmp  xK  xNorm  xk  ypk  int  countdown  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3922322702763681	530	530	2	replace	int  permutation[j]  =  work2[0];	  int    permutation[j]    =    qy[0];    	non-compiled	[CE]  ']'  expected	62	None	replace
42	[BUG]  [BUGGY]  int  permutation[j]  =  dxNorm;  [CE]  ']'  expected  [FE]                      AssertionFailedError      [CONTEXT]      lmPar  =  0;  return;  }    double  sum2;  double  parl  =  0;  if  (rank  ==  solvedCols)  {      [BUGGY]  int  permutation[j]  =  dxNorm;  [BUGGY]      int  pj  =  permutation[j];  work1[pj]  *=  diag[pj]  /  dxNorm;  }  sum2  =  0;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  double  sum  =  0;  for  (int  i  =  0;  i  <  j;  ++i)  {  sum  +=  jacobian[i][pj]  *  work1[permutation[i]];  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  determineLMParameter  [RETURN_TYPE]  void  double[]  qy  double  delta  double[]  diag  double[]  work1  double[]  work2  double[]  work3  [VARIABLES]  int[]  permutation  boolean  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  qy  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  correction  costRelativeTolerance  delta  dirDer  dirJ  dk  dxNorm  fp  gNorm  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  parl  paru  pc2  preRed  previousCost  previousFP  qrRankingThreshold  r  ratio  s  sPar  sum  sum2  threshold  tmp  xK  xNorm  xk  ypk  int  countdown  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3922322702763681	530	530	2	replace	int  permutation[j]  =  dxNorm;	  int    permutation[j]    =    qy[0];    	non-compiled	[CE]  ']'  expected	62	None	replace
43	[BUG]  [BUGGY]  For(int  j  =  0;  j  <  solvedCols;  ++j)  {  [CE]  '.class'  expected  [FE]        AssertionFailedError      [CONTEXT]      lmPar  =  0;  return;  }    double  sum2;  double  parl  =  0;  if  (rank  ==  solvedCols)  {      [BUGGY]  For(int  j  =  0;  j  <  solvedCols;  ++j)  {  [BUGGY]      int  pj  =  permutation[j];  work1[pj]  *=  diag[pj]  /  dxNorm;  }  sum2  =  0;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  double  sum  =  0;  for  (int  i  =  0;  i  <  j;  ++i)  {  sum  +=  jacobian[i][pj]  *  work1[permutation[i]];  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  determineLMParameter  [RETURN_TYPE]  void  double[]  qy  double  delta  double[]  diag  double[]  work1  double[]  work2  double[]  work3  [VARIABLES]  int[]  permutation  boolean  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  qy  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  correction  costRelativeTolerance  delta  dirDer  dirJ  dk  dxNorm  fp  gNorm  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  parl  paru  pc2  preRed  previousCost  previousFP  qrRankingThreshold  r  ratio  s  sPar  sum  sum2  threshold  tmp  xK  xNorm  xk  ypk  int  countdown  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3922322702763681	530	530	2	replace	For(int  j  =  0;  j  <  solvedCols;  ++j)  {	  for(int    j    =    0;    j    <    parl;    ++j)    {    for(int    j    =    0;    j    <    parl);    ++j)    {    	non-compiled	[CE]  '.class'  expected	72	None	replace
44	[BUG]  [BUGGY]  int  j  =  solvedCols[1];  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      lmPar  =  0;  return;  }    double  sum2;  double  parl  =  0;  if  (rank  ==  solvedCols)  {      [BUGGY]  int  j  =  solvedCols[1];  [BUGGY]      int  pj  =  permutation[j];  work1[pj]  *=  diag[pj]  /  dxNorm;  }  sum2  =  0;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  double  sum  =  0;  for  (int  i  =  0;  i  <  j;  ++i)  {  sum  +=  jacobian[i][pj]  *  work1[permutation[i]];  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  determineLMParameter  [RETURN_TYPE]  void  double[]  qy  double  delta  double[]  diag  double[]  work1  double[]  work2  double[]  work3  [VARIABLES]  int[]  permutation  boolean  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  qy  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  correction  costRelativeTolerance  delta  dirDer  dirJ  dk  dxNorm  fp  gNorm  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  parl  paru  pc2  preRed  previousCost  previousFP  qrRankingThreshold  r  ratio  s  sPar  sum  sum2  threshold  tmp  xK  xNorm  xk  ypk  int  countdown  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3922322702763681	530	530	2	replace	int  j  =  solvedCols[1];	  int    j    =    solvedCols[0];    	non-compiled	[CE]  <identifier>  expected	61	None	replace
45	[BUG]  [BUGGY]  int  j  =  solvedCols[0]  -  1;  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      lmPar  =  0;  return;  }    double  sum2;  double  parl  =  0;  if  (rank  ==  solvedCols)  {      [BUGGY]  int  j  =  solvedCols[0]  -  1;  [BUGGY]      int  pj  =  permutation[j];  work1[pj]  *=  diag[pj]  /  dxNorm;  }  sum2  =  0;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  double  sum  =  0;  for  (int  i  =  0;  i  <  j;  ++i)  {  sum  +=  jacobian[i][pj]  *  work1[permutation[i]];  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  determineLMParameter  [RETURN_TYPE]  void  double[]  qy  double  delta  double[]  diag  double[]  work1  double[]  work2  double[]  work3  [VARIABLES]  int[]  permutation  boolean  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  qy  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  correction  costRelativeTolerance  delta  dirDer  dirJ  dk  dxNorm  fp  gNorm  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  parl  paru  pc2  preRed  previousCost  previousFP  qrRankingThreshold  r  ratio  s  sPar  sum  sum2  threshold  tmp  xK  xNorm  xk  ypk  int  countdown  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3922322702763681	530	530	2	replace	int  j  =  solvedCols[0]  -  1;	  int    j    =    solvedCols[0];    	non-compiled	[CE]  <identifier>  expected	61	None	replace
46	[BUG]  [BUGGY]  double  i  =  1;  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      lmPar  =  0;  return;  }    double  sum2;  double  parl  =  0;  if  (rank  ==  solvedCols)  {      [BUGGY]  double  i  =  1;  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  work1[pj]  *=  diag[pj]  /  dxNorm;  }  sum2  =  0;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  double  sum  =  0;  for  (int  i  =  0;  i  <  j;  ++i)  {  sum  +=  jacobian[i][pj]  *  work1[permutation[i]];  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  determineLMParameter  [RETURN_TYPE]  void  double[]  qy  double  delta  double[]  diag  double[]  work1  double[]  work2  double[]  work3  [VARIABLES]  int[]  permutation  boolean  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  qy  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  correction  costRelativeTolerance  delta  dirDer  dirJ  dk  dxNorm  fp  gNorm  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  parl  paru  pc2  preRed  previousCost  previousFP  qrRankingThreshold  r  ratio  s  sPar  sum  sum2  threshold  tmp  xK  xNorm  xk  ypk  int  countdown  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3922322702763681	530	530	2	replace	double  i  =  1;	  double    i    =    0;    	non-compiled	[CE]  <identifier>  expected	12	None	replace
47	[BUG]  [BUGGY]  double  i  =  2;  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      lmPar  =  0;  return;  }    double  sum2;  double  parl  =  0;  if  (rank  ==  solvedCols)  {      [BUGGY]  double  i  =  2;  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  work1[pj]  *=  diag[pj]  /  dxNorm;  }  sum2  =  0;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  double  sum  =  0;  for  (int  i  =  0;  i  <  j;  ++i)  {  sum  +=  jacobian[i][pj]  *  work1[permutation[i]];  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  determineLMParameter  [RETURN_TYPE]  void  double[]  qy  double  delta  double[]  diag  double[]  work1  double[]  work2  double[]  work3  [VARIABLES]  int[]  permutation  boolean  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  qy  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  correction  costRelativeTolerance  delta  dirDer  dirJ  dk  dxNorm  fp  gNorm  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  parl  paru  pc2  preRed  previousCost  previousFP  qrRankingThreshold  r  ratio  s  sPar  sum  sum2  threshold  tmp  xK  xNorm  xk  ypk  int  countdown  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3922322702763681	530	530	2	replace	double  i  =  2;	  double    i    =    0;    	non-compiled	[CE]  <identifier>  expected	12	None	replace
48	[BUG]  [BUGGY]  double  i  =  0L;  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      lmPar  =  0;  return;  }    double  sum2;  double  parl  =  0;  if  (rank  ==  solvedCols)  {      [BUGGY]  double  i  =  0L;  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  work1[pj]  *=  diag[pj]  /  dxNorm;  }  sum2  =  0;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  double  sum  =  0;  for  (int  i  =  0;  i  <  j;  ++i)  {  sum  +=  jacobian[i][pj]  *  work1[permutation[i]];  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  determineLMParameter  [RETURN_TYPE]  void  double[]  qy  double  delta  double[]  diag  double[]  work1  double[]  work2  double[]  work3  [VARIABLES]  int[]  permutation  boolean  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  qy  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  correction  costRelativeTolerance  delta  dirDer  dirJ  dk  dxNorm  fp  gNorm  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  parl  paru  pc2  preRed  previousCost  previousFP  qrRankingThreshold  r  ratio  s  sPar  sum  sum2  threshold  tmp  xK  xNorm  xk  ypk  int  countdown  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3922322702763681	530	530	2	replace	double  i  =  0L;	  double    i    =    0;    	non-compiled	[CE]  <identifier>  expected	12	None	replace
49	[BUG]  [BUGGY]  Integer  j  =  0;  j  <  diag.length;  ++j)  {  [CE]  >  expected  [FE]              AssertionFailedError      [CONTEXT]      lmPar  =  0;  return;  }    double  sum2;  double  parl  =  0;  if  (rank  ==  solvedCols)  {      [BUGGY]  Integer  j  =  0;  j  <  diag.length;  ++j)  {  [BUGGY]      int  pj  =  permutation[j];  work1[pj]  *=  diag[pj]  /  dxNorm;  }  sum2  =  0;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  double  sum  =  0;  for  (int  i  =  0;  i  <  j;  ++i)  {  sum  +=  jacobian[i][pj]  *  work1[permutation[i]];  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  determineLMParameter  [RETURN_TYPE]  void  double[]  qy  double  delta  double[]  diag  double[]  work1  double[]  work2  double[]  work3  [VARIABLES]  int[]  permutation  boolean  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  qy  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  correction  costRelativeTolerance  delta  dirDer  dirJ  dk  dxNorm  fp  gNorm  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  parl  paru  pc2  preRed  previousCost  previousFP  qrRankingThreshold  r  ratio  s  sPar  sum  sum2  threshold  tmp  xK  xNorm  xk  ypk  int  countdown  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3922322702763681	530	530	2	replace	Integer  j  =  0;  j  <  diag.length;  ++j)  {	  for(int    j    =    0;    j    <    diag.length;    ++j)    {    Integer    j    =    0;    j    <    diag.length;    ++j)    {    	non-compiled	[CE]  >  expected	4	None	replace
50	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  solvedCols.length;  ++j)  {  Integer  j  =  0;  j  <  diag.length;  ++j)  {  [CE]  >  expected  [FE]                AssertionFailedError      [CONTEXT]      lmPar  =  0;  return;  }    double  sum2;  double  parl  =  0;  if  (rank  ==  solvedCols)  {      [BUGGY]  for(int  j  =  0;  j  <  solvedCols.length;  ++j)  {  Integer  j  =  0;  j  <  diag.length;  ++j)  {  [BUGGY]      int  pj  =  permutation[j];  work1[pj]  *=  diag[pj]  /  dxNorm;  }  sum2  =  0;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  double  sum  =  0;  for  (int  i  =  0;  i  <  j;  ++i)  {  sum  +=  jacobian[i][pj]  *  work1[permutation[i]];  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  determineLMParameter  [RETURN_TYPE]  void  double[]  qy  double  delta  double[]  diag  double[]  work1  double[]  work2  double[]  work3  [VARIABLES]  int[]  permutation  boolean  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  qy  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  correction  costRelativeTolerance  delta  dirDer  dirJ  dk  dxNorm  fp  gNorm  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  parl  paru  pc2  preRed  previousCost  previousFP  qrRankingThreshold  r  ratio  s  sPar  sum  sum2  threshold  tmp  xK  xNorm  xk  ypk  int  countdown  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3922322702763681	530	530	2	replace	for(int  j  =  0;  j  <  solvedCols.length;  ++j)  {  Integer  j  =  0;  j  <  diag.length;  ++j)  {	  for(int    j    =    0;    j    <    diag.length;    ++j)    {    Integer    j    =    0;    j    <    diag.length;    ++j)    {    	non-compiled	[CE]  >  expected	4	None	replace
51	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  Integer  j  =  0;  j  <  diag.length;  ++j)  {  [CE]  >  expected  [FE]                  AssertionFailedError      [CONTEXT]      lmPar  =  0;  return;  }    double  sum2;  double  parl  =  0;  if  (rank  ==  solvedCols)  {      [BUGGY]  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  Integer  j  =  0;  j  <  diag.length;  ++j)  {  [BUGGY]      int  pj  =  permutation[j];  work1[pj]  *=  diag[pj]  /  dxNorm;  }  sum2  =  0;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  double  sum  =  0;  for  (int  i  =  0;  i  <  j;  ++i)  {  sum  +=  jacobian[i][pj]  *  work1[permutation[i]];  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  determineLMParameter  [RETURN_TYPE]  void  double[]  qy  double  delta  double[]  diag  double[]  work1  double[]  work2  double[]  work3  [VARIABLES]  int[]  permutation  boolean  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  qy  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  correction  costRelativeTolerance  delta  dirDer  dirJ  dk  dxNorm  fp  gNorm  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  parl  paru  pc2  preRed  previousCost  previousFP  qrRankingThreshold  r  ratio  s  sPar  sum  sum2  threshold  tmp  xK  xNorm  xk  ypk  int  countdown  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3922322702763681	530	530	2	replace	for(int  j  =  0;  j  <  solvedCols;  ++j)  {  Integer  j  =  0;  j  <  diag.length;  ++j)  {	  for(int    j    =    0;    j    <    diag.length;    ++j)    {    Integer    j    =    0;    j    <    diag.length;    ++j)    {    	non-compiled	[CE]  >  expected	4	None	replace
52	[BUG]  [BUGGY]  int  permutation[j]  =  work2[j];  [CE]  ']'  expected  [FE]                  AssertionFailedError      [CONTEXT]      lmPar  =  0;  return;  }    double  sum2;  double  parl  =  0;  if  (rank  ==  solvedCols)  {      [BUGGY]  int  permutation[j]  =  work2[j];  [BUGGY]      int  pj  =  permutation[j];  work1[pj]  *=  diag[pj]  /  dxNorm;  }  sum2  =  0;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  double  sum  =  0;  for  (int  i  =  0;  i  <  j;  ++i)  {  sum  +=  jacobian[i][pj]  *  work1[permutation[i]];  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  determineLMParameter  [RETURN_TYPE]  void  double[]  qy  double  delta  double[]  diag  double[]  work1  double[]  work2  double[]  work3  [VARIABLES]  int[]  permutation  boolean  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  qy  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  correction  costRelativeTolerance  delta  dirDer  dirJ  dk  dxNorm  fp  gNorm  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  parl  paru  pc2  preRed  previousCost  previousFP  qrRankingThreshold  r  ratio  s  sPar  sum  sum2  threshold  tmp  xK  xNorm  xk  ypk  int  countdown  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3922322702763681	530	530	2	replace	int  permutation[j]  =  work2[j];	  int    permutation[j]    =    work1[j];    	non-compiled	[CE]  ']'  expected	44	None	replace
53	[BUG]  [BUGGY]  int  permutation[j]  =  work3[j];  [CE]  ']'  expected  [FE]                    AssertionFailedError      [CONTEXT]      lmPar  =  0;  return;  }    double  sum2;  double  parl  =  0;  if  (rank  ==  solvedCols)  {      [BUGGY]  int  permutation[j]  =  work3[j];  [BUGGY]      int  pj  =  permutation[j];  work1[pj]  *=  diag[pj]  /  dxNorm;  }  sum2  =  0;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  double  sum  =  0;  for  (int  i  =  0;  i  <  j;  ++i)  {  sum  +=  jacobian[i][pj]  *  work1[permutation[i]];  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  determineLMParameter  [RETURN_TYPE]  void  double[]  qy  double  delta  double[]  diag  double[]  work1  double[]  work2  double[]  work3  [VARIABLES]  int[]  permutation  boolean  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  qy  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  correction  costRelativeTolerance  delta  dirDer  dirJ  dk  dxNorm  fp  gNorm  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  parl  paru  pc2  preRed  previousCost  previousFP  qrRankingThreshold  r  ratio  s  sPar  sum  sum2  threshold  tmp  xK  xNorm  xk  ypk  int  countdown  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3922322702763681	530	530	2	replace	int  permutation[j]  =  work3[j];	  int    permutation[j]    =    work1[j];    	non-compiled	[CE]  ']'  expected	44	None	replace
54	[BUG]  [BUGGY]  double  permutation[j]  =  work1[j];  [CE]  ']'  expected  [FE]                      AssertionFailedError      [CONTEXT]      lmPar  =  0;  return;  }    double  sum2;  double  parl  =  0;  if  (rank  ==  solvedCols)  {      [BUGGY]  double  permutation[j]  =  work1[j];  [BUGGY]      int  pj  =  permutation[j];  work1[pj]  *=  diag[pj]  /  dxNorm;  }  sum2  =  0;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  double  sum  =  0;  for  (int  i  =  0;  i  <  j;  ++i)  {  sum  +=  jacobian[i][pj]  *  work1[permutation[i]];  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  determineLMParameter  [RETURN_TYPE]  void  double[]  qy  double  delta  double[]  diag  double[]  work1  double[]  work2  double[]  work3  [VARIABLES]  int[]  permutation  boolean  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  qy  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  correction  costRelativeTolerance  delta  dirDer  dirJ  dk  dxNorm  fp  gNorm  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  parl  paru  pc2  preRed  previousCost  previousFP  qrRankingThreshold  r  ratio  s  sPar  sum  sum2  threshold  tmp  xK  xNorm  xk  ypk  int  countdown  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3922322702763681	530	530	2	replace	double  permutation[j]  =  work1[j];	  int    permutation[j]    =    work1[j];    	non-compiled	[CE]  ']'  expected	44	None	replace
55	[BUG]  [BUGGY]  double  dxNorm  =  Math.abs(solvedCols  -  diagR);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      lmPar  =  0;  return;  }    double  sum2;  double  parl  =  0;  if  (rank  ==  solvedCols)  {      [BUGGY]  double  dxNorm  =  Math.abs(solvedCols  -  diagR);  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  work1[pj]  *=  diag[pj]  /  dxNorm;  }  sum2  =  0;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  double  sum  =  0;  for  (int  i  =  0;  i  <  j;  ++i)  {  sum  +=  jacobian[i][pj]  *  work1[permutation[i]];  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  determineLMParameter  [RETURN_TYPE]  void  double[]  qy  double  delta  double[]  diag  double[]  work1  double[]  work2  double[]  work3  [VARIABLES]  int[]  permutation  boolean  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  qy  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  correction  costRelativeTolerance  delta  dirDer  dirJ  dk  dxNorm  fp  gNorm  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  parl  paru  pc2  preRed  previousCost  previousFP  qrRankingThreshold  r  ratio  s  sPar  sum  sum2  threshold  tmp  xK  xNorm  xk  ypk  int  countdown  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3922322702763681	530	530	2	replace	double  dxNorm  =  Math.abs(solvedCols  -  diagR);	  double    dxNorm    =    Math.abs(diagR    -    solvedCols);    	non-compiled	[CE]  <identifier>  expected	21	None	replace
56	[BUG]  [BUGGY]  double  dxNorm  =  Math.abs(diagR  /  solvedCols);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      lmPar  =  0;  return;  }    double  sum2;  double  parl  =  0;  if  (rank  ==  solvedCols)  {      [BUGGY]  double  dxNorm  =  Math.abs(diagR  /  solvedCols);  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  work1[pj]  *=  diag[pj]  /  dxNorm;  }  sum2  =  0;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  double  sum  =  0;  for  (int  i  =  0;  i  <  j;  ++i)  {  sum  +=  jacobian[i][pj]  *  work1[permutation[i]];  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  determineLMParameter  [RETURN_TYPE]  void  double[]  qy  double  delta  double[]  diag  double[]  work1  double[]  work2  double[]  work3  [VARIABLES]  int[]  permutation  boolean  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  qy  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  correction  costRelativeTolerance  delta  dirDer  dirJ  dk  dxNorm  fp  gNorm  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  parl  paru  pc2  preRed  previousCost  previousFP  qrRankingThreshold  r  ratio  s  sPar  sum  sum2  threshold  tmp  xK  xNorm  xk  ypk  int  countdown  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3922322702763681	530	530	2	replace	double  dxNorm  =  Math.abs(diagR  /  solvedCols);	  double    dxNorm    =    Math.abs(diagR    -    solvedCols);    	non-compiled	[CE]  <identifier>  expected	21	None	replace
57	[BUG]  [BUGGY]  double  dxNorm  =  Math.abs(diagR  -  parl);  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      lmPar  =  0;  return;  }    double  sum2;  double  parl  =  0;  if  (rank  ==  solvedCols)  {      [BUGGY]  double  dxNorm  =  Math.abs(diagR  -  parl);  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  work1[pj]  *=  diag[pj]  /  dxNorm;  }  sum2  =  0;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  double  sum  =  0;  for  (int  i  =  0;  i  <  j;  ++i)  {  sum  +=  jacobian[i][pj]  *  work1[permutation[i]];  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  determineLMParameter  [RETURN_TYPE]  void  double[]  qy  double  delta  double[]  diag  double[]  work1  double[]  work2  double[]  work3  [VARIABLES]  int[]  permutation  boolean  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  qy  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  correction  costRelativeTolerance  delta  dirDer  dirJ  dk  dxNorm  fp  gNorm  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  parl  paru  pc2  preRed  previousCost  previousFP  qrRankingThreshold  r  ratio  s  sPar  sum  sum2  threshold  tmp  xK  xNorm  xk  ypk  int  countdown  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3922322702763681	530	530	2	replace	double  dxNorm  =  Math.abs(diagR  -  parl);	  double    dxNorm    =    Math.abs(diagR    -    solvedCols);    	non-compiled	[CE]  <identifier>  expected	21	None	replace
58	[BUG]  [BUGGY]  double  solvedCols  =  Math.max(solvedCols,  sum2);  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      lmPar  =  0;  return;  }    double  sum2;  double  parl  =  0;  if  (rank  ==  solvedCols)  {      [BUGGY]  double  solvedCols  =  Math.max(solvedCols,  sum2);  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  work1[pj]  *=  diag[pj]  /  dxNorm;  }  sum2  =  0;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  double  sum  =  0;  for  (int  i  =  0;  i  <  j;  ++i)  {  sum  +=  jacobian[i][pj]  *  work1[permutation[i]];  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  determineLMParameter  [RETURN_TYPE]  void  double[]  qy  double  delta  double[]  diag  double[]  work1  double[]  work2  double[]  work3  [VARIABLES]  int[]  permutation  boolean  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  qy  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  correction  costRelativeTolerance  delta  dirDer  dirJ  dk  dxNorm  fp  gNorm  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  parl  paru  pc2  preRed  previousCost  previousFP  qrRankingThreshold  r  ratio  s  sPar  sum  sum2  threshold  tmp  xK  xNorm  xk  ypk  int  countdown  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3922322702763681	530	530	2	replace	double  solvedCols  =  Math.max(solvedCols,  sum2);	  double    solvedCols    =    Math.min(solvedCols,    parl);    	non-compiled	[CE]  <identifier>  expected	39	None	replace
59	[BUG]  [BUGGY]  double  solvedCols  =  Math.max(solvedCols,  parl);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      lmPar  =  0;  return;  }    double  sum2;  double  parl  =  0;  if  (rank  ==  solvedCols)  {      [BUGGY]  double  solvedCols  =  Math.max(solvedCols,  parl);  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  work1[pj]  *=  diag[pj]  /  dxNorm;  }  sum2  =  0;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  double  sum  =  0;  for  (int  i  =  0;  i  <  j;  ++i)  {  sum  +=  jacobian[i][pj]  *  work1[permutation[i]];  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  determineLMParameter  [RETURN_TYPE]  void  double[]  qy  double  delta  double[]  diag  double[]  work1  double[]  work2  double[]  work3  [VARIABLES]  int[]  permutation  boolean  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  qy  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  correction  costRelativeTolerance  delta  dirDer  dirJ  dk  dxNorm  fp  gNorm  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  parl  paru  pc2  preRed  previousCost  previousFP  qrRankingThreshold  r  ratio  s  sPar  sum  sum2  threshold  tmp  xK  xNorm  xk  ypk  int  countdown  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3922322702763681	530	530	2	replace	double  solvedCols  =  Math.max(solvedCols,  parl);	  double    solvedCols    =    Math.min(solvedCols,    parl);    	non-compiled	[CE]  <identifier>  expected	39	None	replace
60	[BUG]  [BUGGY]  double  dxNorm  =  Math.abs(diag[1]);  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      lmPar  =  0;  return;  }    double  sum2;  double  parl  =  0;  if  (rank  ==  solvedCols)  {      [BUGGY]  double  dxNorm  =  Math.abs(diag[1]);  [BUGGY]      int  pj  =  permutation[j];  work1[pj]  *=  diag[pj]  /  dxNorm;  }  sum2  =  0;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  double  sum  =  0;  for  (int  i  =  0;  i  <  j;  ++i)  {  sum  +=  jacobian[i][pj]  *  work1[permutation[i]];  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  determineLMParameter  [RETURN_TYPE]  void  double[]  qy  double  delta  double[]  diag  double[]  work1  double[]  work2  double[]  work3  [VARIABLES]  int[]  permutation  boolean  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  qy  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  correction  costRelativeTolerance  delta  dirDer  dirJ  dk  dxNorm  fp  gNorm  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  parl  paru  pc2  preRed  previousCost  previousFP  qrRankingThreshold  r  ratio  s  sPar  sum  sum2  threshold  tmp  xK  xNorm  xk  ypk  int  countdown  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3922322702763681	530	530	2	replace	double  dxNorm  =  Math.abs(diag[1]);	  double    dxNorm    =    Math.abs(diag[0]);    	non-compiled	[CE]  <identifier>  expected	75	None	replace
61	[BUG]  [BUGGY]  double  dxNorm  =  Math.abs(diag[0]  -  1);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      lmPar  =  0;  return;  }    double  sum2;  double  parl  =  0;  if  (rank  ==  solvedCols)  {      [BUGGY]  double  dxNorm  =  Math.abs(diag[0]  -  1);  [BUGGY]      int  pj  =  permutation[j];  work1[pj]  *=  diag[pj]  /  dxNorm;  }  sum2  =  0;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  double  sum  =  0;  for  (int  i  =  0;  i  <  j;  ++i)  {  sum  +=  jacobian[i][pj]  *  work1[permutation[i]];  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  determineLMParameter  [RETURN_TYPE]  void  double[]  qy  double  delta  double[]  diag  double[]  work1  double[]  work2  double[]  work3  [VARIABLES]  int[]  permutation  boolean  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  qy  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  correction  costRelativeTolerance  delta  dirDer  dirJ  dk  dxNorm  fp  gNorm  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  parl  paru  pc2  preRed  previousCost  previousFP  qrRankingThreshold  r  ratio  s  sPar  sum  sum2  threshold  tmp  xK  xNorm  xk  ypk  int  countdown  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3922322702763681	530	530	2	replace	double  dxNorm  =  Math.abs(diag[0]  -  1);	  double    dxNorm    =    Math.abs(diag[0]);    	non-compiled	[CE]  <identifier>  expected	75	None	replace
62	[BUG]  [BUGGY]  double  dxNorm  =  Math.abs(diag[0]  /  2);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      lmPar  =  0;  return;  }    double  sum2;  double  parl  =  0;  if  (rank  ==  solvedCols)  {      [BUGGY]  double  dxNorm  =  Math.abs(diag[0]  /  2);  [BUGGY]      int  pj  =  permutation[j];  work1[pj]  *=  diag[pj]  /  dxNorm;  }  sum2  =  0;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  double  sum  =  0;  for  (int  i  =  0;  i  <  j;  ++i)  {  sum  +=  jacobian[i][pj]  *  work1[permutation[i]];  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  determineLMParameter  [RETURN_TYPE]  void  double[]  qy  double  delta  double[]  diag  double[]  work1  double[]  work2  double[]  work3  [VARIABLES]  int[]  permutation  boolean  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  qy  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  correction  costRelativeTolerance  delta  dirDer  dirJ  dk  dxNorm  fp  gNorm  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  parl  paru  pc2  preRed  previousCost  previousFP  qrRankingThreshold  r  ratio  s  sPar  sum  sum2  threshold  tmp  xK  xNorm  xk  ypk  int  countdown  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3922322702763681	530	530	2	replace	double  dxNorm  =  Math.abs(diag[0]  /  2);	  double    dxNorm    =    Math.abs(diag[0]);    	non-compiled	[CE]  <identifier>  expected	75	None	replace
63	[BUG]  [BUGGY]  double  dxNorm  =  Math.abs(diag[0]  +  sum2);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      lmPar  =  0;  return;  }    double  sum2;  double  parl  =  0;  if  (rank  ==  solvedCols)  {      [BUGGY]  double  dxNorm  =  Math.abs(diag[0]  +  sum2);  [BUGGY]      int  pj  =  permutation[j];  work1[pj]  *=  diag[pj]  /  dxNorm;  }  sum2  =  0;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  double  sum  =  0;  for  (int  i  =  0;  i  <  j;  ++i)  {  sum  +=  jacobian[i][pj]  *  work1[permutation[i]];  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  determineLMParameter  [RETURN_TYPE]  void  double[]  qy  double  delta  double[]  diag  double[]  work1  double[]  work2  double[]  work3  [VARIABLES]  int[]  permutation  boolean  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  qy  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  correction  costRelativeTolerance  delta  dirDer  dirJ  dk  dxNorm  fp  gNorm  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  parl  paru  pc2  preRed  previousCost  previousFP  qrRankingThreshold  r  ratio  s  sPar  sum  sum2  threshold  tmp  xK  xNorm  xk  ypk  int  countdown  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3922322702763681	530	530	2	replace	double  dxNorm  =  Math.abs(diag[0]  +  sum2);	  double    dxNorm    =    Math.abs(diag[0]);    	non-compiled	[CE]  <identifier>  expected	75	None	replace
64	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  fixedCols.length;  ++j)  {  [CE]  cannot  find  symbol  fixedCols  [FE]        AssertionFailedError      [CONTEXT]      lmPar  =  0;  return;  }    double  sum2;  double  parl  =  0;  if  (rank  ==  solvedCols)  {      [BUGGY]  for(int  j  =  0;  j  <  fixedCols.length;  ++j)  {  [BUGGY]      int  pj  =  permutation[j];  work1[pj]  *=  diag[pj]  /  dxNorm;  }  sum2  =  0;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  double  sum  =  0;  for  (int  i  =  0;  i  <  j;  ++i)  {  sum  +=  jacobian[i][pj]  *  work1[permutation[i]];  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  determineLMParameter  [RETURN_TYPE]  void  double[]  qy  double  delta  double[]  diag  double[]  work1  double[]  work2  double[]  work3  [VARIABLES]  int[]  permutation  boolean  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  qy  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  correction  costRelativeTolerance  delta  dirDer  dirJ  dk  dxNorm  fp  gNorm  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  parl  paru  pc2  preRed  previousCost  previousFP  qrRankingThreshold  r  ratio  s  sPar  sum  sum2  threshold  tmp  xK  xNorm  xk  ypk  int  countdown  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3922322702763681	530	530	2	replace	for(int  j  =  0;  j  <  fixedCols.length;  ++j)  {	  for(int    j    =    0;    j    <    solveCols.length;    ++j)    {    	non-compiled	[CE]  cannot  find  symbol  fixedCols	22	None	replace
65	[BUG]  [BUGGY]  double  solvedCols  =  Math.max(solvedCols,  parl  -  1);  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      lmPar  =  0;  return;  }    double  sum2;  double  parl  =  0;  if  (rank  ==  solvedCols)  {      [BUGGY]  double  solvedCols  =  Math.max(solvedCols,  parl  -  1);  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  work1[pj]  *=  diag[pj]  /  dxNorm;  }  sum2  =  0;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  double  sum  =  0;  for  (int  i  =  0;  i  <  j;  ++i)  {  sum  +=  jacobian[i][pj]  *  work1[permutation[i]];  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  determineLMParameter  [RETURN_TYPE]  void  double[]  qy  double  delta  double[]  diag  double[]  work1  double[]  work2  double[]  work3  [VARIABLES]  int[]  permutation  boolean  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  qy  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  correction  costRelativeTolerance  delta  dirDer  dirJ  dk  dxNorm  fp  gNorm  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  parl  paru  pc2  preRed  previousCost  previousFP  qrRankingThreshold  r  ratio  s  sPar  sum  sum2  threshold  tmp  xK  xNorm  xk  ypk  int  countdown  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3922322702763681	530	530	2	replace	double  solvedCols  =  Math.max(solvedCols,  parl  -  1);	  double    solvedCols    =    Math.min(solvedCols,    sum2    -    1);    	non-compiled	[CE]  <identifier>  expected	32	None	replace
66	[BUG]  [BUGGY]  double  solvedCols  =  Math.max(solvedCols,  sum2  -  1);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      lmPar  =  0;  return;  }    double  sum2;  double  parl  =  0;  if  (rank  ==  solvedCols)  {      [BUGGY]  double  solvedCols  =  Math.max(solvedCols,  sum2  -  1);  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  work1[pj]  *=  diag[pj]  /  dxNorm;  }  sum2  =  0;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  double  sum  =  0;  for  (int  i  =  0;  i  <  j;  ++i)  {  sum  +=  jacobian[i][pj]  *  work1[permutation[i]];  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  determineLMParameter  [RETURN_TYPE]  void  double[]  qy  double  delta  double[]  diag  double[]  work1  double[]  work2  double[]  work3  [VARIABLES]  int[]  permutation  boolean  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  qy  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  correction  costRelativeTolerance  delta  dirDer  dirJ  dk  dxNorm  fp  gNorm  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  parl  paru  pc2  preRed  previousCost  previousFP  qrRankingThreshold  r  ratio  s  sPar  sum  sum2  threshold  tmp  xK  xNorm  xk  ypk  int  countdown  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3922322702763681	530	530	2	replace	double  solvedCols  =  Math.max(solvedCols,  sum2  -  1);	  double    solvedCols    =    Math.min(solvedCols,    sum2    -    1);    	non-compiled	[CE]  <identifier>  expected	32	None	replace
67	[BUG]  [BUGGY]  double  dxNorm  =  Math.sqrt(rank,  solvedCols);  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      lmPar  =  0;  return;  }    double  sum2;  double  parl  =  0;  if  (rank  ==  solvedCols)  {      [BUGGY]  double  dxNorm  =  Math.sqrt(rank,  solvedCols);  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  work1[pj]  *=  diag[pj]  /  dxNorm;  }  sum2  =  0;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  double  sum  =  0;  for  (int  i  =  0;  i  <  j;  ++i)  {  sum  +=  jacobian[i][pj]  *  work1[permutation[i]];  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  determineLMParameter  [RETURN_TYPE]  void  double[]  qy  double  delta  double[]  diag  double[]  work1  double[]  work2  double[]  work3  [VARIABLES]  int[]  permutation  boolean  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  qy  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  correction  costRelativeTolerance  delta  dirDer  dirJ  dk  dxNorm  fp  gNorm  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  parl  paru  pc2  preRed  previousCost  previousFP  qrRankingThreshold  r  ratio  s  sPar  sum  sum2  threshold  tmp  xK  xNorm  xk  ypk  int  countdown  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3922322702763681	530	530	2	replace	double  dxNorm  =  Math.sqrt(rank,  solvedCols);	  double    dxNorm    =    Math.sqrt(rank,    sum2);    	non-compiled	[CE]  <identifier>  expected	6	None	replace
68	[BUG]  [BUGGY]  double  dxNorm  =  Math.sqrt(sum1,  sum2);  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      lmPar  =  0;  return;  }    double  sum2;  double  parl  =  0;  if  (rank  ==  solvedCols)  {      [BUGGY]  double  dxNorm  =  Math.sqrt(sum1,  sum2);  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  work1[pj]  *=  diag[pj]  /  dxNorm;  }  sum2  =  0;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  double  sum  =  0;  for  (int  i  =  0;  i  <  j;  ++i)  {  sum  +=  jacobian[i][pj]  *  work1[permutation[i]];  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  determineLMParameter  [RETURN_TYPE]  void  double[]  qy  double  delta  double[]  diag  double[]  work1  double[]  work2  double[]  work3  [VARIABLES]  int[]  permutation  boolean  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  qy  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  correction  costRelativeTolerance  delta  dirDer  dirJ  dk  dxNorm  fp  gNorm  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  parl  paru  pc2  preRed  previousCost  previousFP  qrRankingThreshold  r  ratio  s  sPar  sum  sum2  threshold  tmp  xK  xNorm  xk  ypk  int  countdown  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3922322702763681	530	530	2	replace	double  dxNorm  =  Math.sqrt(sum1,  sum2);	  double    dxNorm    =    Math.sqrt(rank,    sum2);    	non-compiled	[CE]  <identifier>  expected	6	None	replace
69	[BUG]  [BUGGY]  int  solvedCols  =  Math.min(resolvedCols,  sum2  -  1);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      lmPar  =  0;  return;  }    double  sum2;  double  parl  =  0;  if  (rank  ==  solvedCols)  {      [BUGGY]  int  solvedCols  =  Math.min(resolvedCols,  sum2  -  1);  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  work1[pj]  *=  diag[pj]  /  dxNorm;  }  sum2  =  0;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  double  sum  =  0;  for  (int  i  =  0;  i  <  j;  ++i)  {  sum  +=  jacobian[i][pj]  *  work1[permutation[i]];  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  determineLMParameter  [RETURN_TYPE]  void  double[]  qy  double  delta  double[]  diag  double[]  work1  double[]  work2  double[]  work3  [VARIABLES]  int[]  permutation  boolean  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  qy  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  correction  costRelativeTolerance  delta  dirDer  dirJ  dk  dxNorm  fp  gNorm  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  parl  paru  pc2  preRed  previousCost  previousFP  qrRankingThreshold  r  ratio  s  sPar  sum  sum2  threshold  tmp  xK  xNorm  xk  ypk  int  countdown  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3922322702763681	530	530	2	replace	int  solvedCols  =  Math.min(resolvedCols,  sum2  -  1);	  int    solvedCols    =    Math.min(resolvedCols,    parl    -    1);    	non-compiled	[CE]  <identifier>  expected	78	None	replace
70	[BUG]  [BUGGY]  int  solvedCols  =  Math.max(resolvedCols,  parl  -  1);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      lmPar  =  0;  return;  }    double  sum2;  double  parl  =  0;  if  (rank  ==  solvedCols)  {      [BUGGY]  int  solvedCols  =  Math.max(resolvedCols,  parl  -  1);  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  work1[pj]  *=  diag[pj]  /  dxNorm;  }  sum2  =  0;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  double  sum  =  0;  for  (int  i  =  0;  i  <  j;  ++i)  {  sum  +=  jacobian[i][pj]  *  work1[permutation[i]];  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  determineLMParameter  [RETURN_TYPE]  void  double[]  qy  double  delta  double[]  diag  double[]  work1  double[]  work2  double[]  work3  [VARIABLES]  int[]  permutation  boolean  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  qy  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  correction  costRelativeTolerance  delta  dirDer  dirJ  dk  dxNorm  fp  gNorm  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  parl  paru  pc2  preRed  previousCost  previousFP  qrRankingThreshold  r  ratio  s  sPar  sum  sum2  threshold  tmp  xK  xNorm  xk  ypk  int  countdown  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3922322702763681	530	530	2	replace	int  solvedCols  =  Math.max(resolvedCols,  parl  -  1);	  int    solvedCols    =    Math.min(resolvedCols,    parl    -    1);    	non-compiled	[CE]  <identifier>  expected	78	None	replace
71	[BUG]  [BUGGY]  int  solvedCols  =  Math.min(resolvedCols,  lmPar  -  1);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      lmPar  =  0;  return;  }    double  sum2;  double  parl  =  0;  if  (rank  ==  solvedCols)  {      [BUGGY]  int  solvedCols  =  Math.min(resolvedCols,  lmPar  -  1);  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  work1[pj]  *=  diag[pj]  /  dxNorm;  }  sum2  =  0;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  double  sum  =  0;  for  (int  i  =  0;  i  <  j;  ++i)  {  sum  +=  jacobian[i][pj]  *  work1[permutation[i]];  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  determineLMParameter  [RETURN_TYPE]  void  double[]  qy  double  delta  double[]  diag  double[]  work1  double[]  work2  double[]  work3  [VARIABLES]  int[]  permutation  boolean  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  qy  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  correction  costRelativeTolerance  delta  dirDer  dirJ  dk  dxNorm  fp  gNorm  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  parl  paru  pc2  preRed  previousCost  previousFP  qrRankingThreshold  r  ratio  s  sPar  sum  sum2  threshold  tmp  xK  xNorm  xk  ypk  int  countdown  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3922322702763681	530	530	2	replace	int  solvedCols  =  Math.min(resolvedCols,  lmPar  -  1);	  int    solvedCols    =    Math.min(resolvedCols,    parl    -    1);    	non-compiled	[CE]  <identifier>  expected	78	None	replace
72	[BUG]  [BUGGY]  int  solvedCols  =  Math.max(resolvedCols,  parl);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      lmPar  =  0;  return;  }    double  sum2;  double  parl  =  0;  if  (rank  ==  solvedCols)  {      [BUGGY]  int  solvedCols  =  Math.max(resolvedCols,  parl);  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  work1[pj]  *=  diag[pj]  /  dxNorm;  }  sum2  =  0;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  double  sum  =  0;  for  (int  i  =  0;  i  <  j;  ++i)  {  sum  +=  jacobian[i][pj]  *  work1[permutation[i]];  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  determineLMParameter  [RETURN_TYPE]  void  double[]  qy  double  delta  double[]  diag  double[]  work1  double[]  work2  double[]  work3  [VARIABLES]  int[]  permutation  boolean  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  qy  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  correction  costRelativeTolerance  delta  dirDer  dirJ  dk  dxNorm  fp  gNorm  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  parl  paru  pc2  preRed  previousCost  previousFP  qrRankingThreshold  r  ratio  s  sPar  sum  sum2  threshold  tmp  xK  xNorm  xk  ypk  int  countdown  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3922322702763681	530	530	2	replace	int  solvedCols  =  Math.max(resolvedCols,  parl);	  int    solvedCols    =    Math.min(resolvedCols,    sum2);    	non-compiled	[CE]  <identifier>  expected	30	None	replace
73	[BUG]  [BUGGY]  double  solvedCols  =  Math.min(sum2,  parl  -  1);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      lmPar  =  0;  return;  }    double  sum2;  double  parl  =  0;  if  (rank  ==  solvedCols)  {      [BUGGY]  double  solvedCols  =  Math.min(sum2,  parl  -  1);  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  work1[pj]  *=  diag[pj]  /  dxNorm;  }  sum2  =  0;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  double  sum  =  0;  for  (int  i  =  0;  i  <  j;  ++i)  {  sum  +=  jacobian[i][pj]  *  work1[permutation[i]];  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  determineLMParameter  [RETURN_TYPE]  void  double[]  qy  double  delta  double[]  diag  double[]  work1  double[]  work2  double[]  work3  [VARIABLES]  int[]  permutation  boolean  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  qy  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  correction  costRelativeTolerance  delta  dirDer  dirJ  dk  dxNorm  fp  gNorm  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  parl  paru  pc2  preRed  previousCost  previousFP  qrRankingThreshold  r  ratio  s  sPar  sum  sum2  threshold  tmp  xK  xNorm  xk  ypk  int  countdown  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3922322702763681	530	530	2	replace	double  solvedCols  =  Math.min(sum2,  parl  -  1);	  double    solvedCols    =    Math.min(sum2,    sum2    -    1);    	non-compiled	[CE]  <identifier>  expected	33	None	replace
74	[BUG]  [BUGGY]  double  solvedCols  =  Math.min(sum2,  suml  -  1);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      lmPar  =  0;  return;  }    double  sum2;  double  parl  =  0;  if  (rank  ==  solvedCols)  {      [BUGGY]  double  solvedCols  =  Math.min(sum2,  suml  -  1);  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  work1[pj]  *=  diag[pj]  /  dxNorm;  }  sum2  =  0;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  double  sum  =  0;  for  (int  i  =  0;  i  <  j;  ++i)  {  sum  +=  jacobian[i][pj]  *  work1[permutation[i]];  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  determineLMParameter  [RETURN_TYPE]  void  double[]  qy  double  delta  double[]  diag  double[]  work1  double[]  work2  double[]  work3  [VARIABLES]  int[]  permutation  boolean  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  qy  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  correction  costRelativeTolerance  delta  dirDer  dirJ  dk  dxNorm  fp  gNorm  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  parl  paru  pc2  preRed  previousCost  previousFP  qrRankingThreshold  r  ratio  s  sPar  sum  sum2  threshold  tmp  xK  xNorm  xk  ypk  int  countdown  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3922322702763681	530	530	2	replace	double  solvedCols  =  Math.min(sum2,  suml  -  1);	  double    solvedCols    =    Math.min(sum2,    sum2    -    1);    	non-compiled	[CE]  <identifier>  expected	33	None	replace
75	[BUG]  [BUGGY]  double  solvedCols  =  Math.max(sum2,  sum2  -  1);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      lmPar  =  0;  return;  }    double  sum2;  double  parl  =  0;  if  (rank  ==  solvedCols)  {      [BUGGY]  double  solvedCols  =  Math.max(sum2,  sum2  -  1);  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  work1[pj]  *=  diag[pj]  /  dxNorm;  }  sum2  =  0;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  double  sum  =  0;  for  (int  i  =  0;  i  <  j;  ++i)  {  sum  +=  jacobian[i][pj]  *  work1[permutation[i]];  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  determineLMParameter  [RETURN_TYPE]  void  double[]  qy  double  delta  double[]  diag  double[]  work1  double[]  work2  double[]  work3  [VARIABLES]  int[]  permutation  boolean  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  qy  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  correction  costRelativeTolerance  delta  dirDer  dirJ  dk  dxNorm  fp  gNorm  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  parl  paru  pc2  preRed  previousCost  previousFP  qrRankingThreshold  r  ratio  s  sPar  sum  sum2  threshold  tmp  xK  xNorm  xk  ypk  int  countdown  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3922322702763681	530	530	2	replace	double  solvedCols  =  Math.max(sum2,  sum2  -  1);	  double    solvedCols    =    Math.min(sum2,    sum2    -    1);    	non-compiled	[CE]  <identifier>  expected	33	None	replace
76	[BUG]  [BUGGY]  int  solvedCols  =  Math.min(sum2  /  parl,  0);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      lmPar  =  0;  return;  }    double  sum2;  double  parl  =  0;  if  (rank  ==  solvedCols)  {      [BUGGY]  int  solvedCols  =  Math.min(sum2  /  parl,  0);  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  work1[pj]  *=  diag[pj]  /  dxNorm;  }  sum2  =  0;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  double  sum  =  0;  for  (int  i  =  0;  i  <  j;  ++i)  {  sum  +=  jacobian[i][pj]  *  work1[permutation[i]];  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  determineLMParameter  [RETURN_TYPE]  void  double[]  qy  double  delta  double[]  diag  double[]  work1  double[]  work2  double[]  work3  [VARIABLES]  int[]  permutation  boolean  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  qy  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  correction  costRelativeTolerance  delta  dirDer  dirJ  dk  dxNorm  fp  gNorm  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  parl  paru  pc2  preRed  previousCost  previousFP  qrRankingThreshold  r  ratio  s  sPar  sum  sum2  threshold  tmp  xK  xNorm  xk  ypk  int  countdown  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3922322702763681	530	530	2	replace	int  solvedCols  =  Math.min(sum2  /  parl,  0);	  int    solvedCols    =    Math.min(parl,    0);    	non-compiled	[CE]  <identifier>  expected	11	None	replace
77	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  permutation.length;  ++j)  {  for(int  j  =  0;  j  <  permutation.length;  ++j)  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      lmPar  =  0;  return;  }    double  sum2;  double  parl  =  0;  if  (rank  ==  solvedCols)  {      [BUGGY]  for(int  j  =  0;  j  <  permutation.length;  ++j)  {  for(int  j  =  0;  j  <  permutation.length;  ++j)  {  [BUGGY]      int  pj  =  permutation[j];  work1[pj]  *=  diag[pj]  /  dxNorm;  }  sum2  =  0;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  double  sum  =  0;  for  (int  i  =  0;  i  <  j;  ++i)  {  sum  +=  jacobian[i][pj]  *  work1[permutation[i]];  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  determineLMParameter  [RETURN_TYPE]  void  double[]  qy  double  delta  double[]  diag  double[]  work1  double[]  work2  double[]  work3  [VARIABLES]  int[]  permutation  boolean  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  qy  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  correction  costRelativeTolerance  delta  dirDer  dirJ  dk  dxNorm  fp  gNorm  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  parl  paru  pc2  preRed  previousCost  previousFP  qrRankingThreshold  r  ratio  s  sPar  sum  sum2  threshold  tmp  xK  xNorm  xk  ypk  int  countdown  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3922322702763681	530	530	2	replace	for(int    j    =    0;    j    <    permutation.length;    ++j)    {    for(int  j  =  0;  j  <  permutation.length;  ++j)  {	  	non-compiled	[CE]  illegal  start  of  expression	52	None	add
78	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  permutation.length;  ++j)  {  int  j  =  0;  j  <  permutation.length;  ++j)  {  [CE]  >  expected  [FE]      AssertionFailedError    [CONTEXT]      lmPar  =  0;  return;  }    double  sum2;  double  parl  =  0;  if  (rank  ==  solvedCols)  {      [BUGGY]  for(int  j  =  0;  j  <  permutation.length;  ++j)  {  int  j  =  0;  j  <  permutation.length;  ++j)  {  [BUGGY]      int  pj  =  permutation[j];  work1[pj]  *=  diag[pj]  /  dxNorm;  }  sum2  =  0;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  double  sum  =  0;  for  (int  i  =  0;  i  <  j;  ++i)  {  sum  +=  jacobian[i][pj]  *  work1[permutation[i]];  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  determineLMParameter  [RETURN_TYPE]  void  double[]  qy  double  delta  double[]  diag  double[]  work1  double[]  work2  double[]  work3  [VARIABLES]  int[]  permutation  boolean  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  qy  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  correction  costRelativeTolerance  delta  dirDer  dirJ  dk  dxNorm  fp  gNorm  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  parl  paru  pc2  preRed  previousCost  previousFP  qrRankingThreshold  r  ratio  s  sPar  sum  sum2  threshold  tmp  xK  xNorm  xk  ypk  int  countdown  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3922322702763681	530	530	2	replace	for(int    j    =    0;    j    <    permutation.length;    ++j)    {    int  j  =  0;  j  <  permutation.length;  ++j)  {	  	non-compiled	[CE]  >  expected	52	None	add
79	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  permutation.length;  ++j)  {  For(int  j  =  0;  j  <  permutation.length;  ++j)  {  [CE]  '.class'  expected  [FE]        AssertionFailedError    [CONTEXT]      lmPar  =  0;  return;  }    double  sum2;  double  parl  =  0;  if  (rank  ==  solvedCols)  {      [BUGGY]  for(int  j  =  0;  j  <  permutation.length;  ++j)  {  For(int  j  =  0;  j  <  permutation.length;  ++j)  {  [BUGGY]      int  pj  =  permutation[j];  work1[pj]  *=  diag[pj]  /  dxNorm;  }  sum2  =  0;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  double  sum  =  0;  for  (int  i  =  0;  i  <  j;  ++i)  {  sum  +=  jacobian[i][pj]  *  work1[permutation[i]];  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  determineLMParameter  [RETURN_TYPE]  void  double[]  qy  double  delta  double[]  diag  double[]  work1  double[]  work2  double[]  work3  [VARIABLES]  int[]  permutation  boolean  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  qy  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  correction  costRelativeTolerance  delta  dirDer  dirJ  dk  dxNorm  fp  gNorm  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  parl  paru  pc2  preRed  previousCost  previousFP  qrRankingThreshold  r  ratio  s  sPar  sum  sum2  threshold  tmp  xK  xNorm  xk  ypk  int  countdown  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3922322702763681	530	530	2	replace	for(int    j    =    0;    j    <    permutation.length;    ++j)    {    For(int  j  =  0;  j  <  permutation.length;  ++j)  {	  	non-compiled	[CE]  '.class'  expected	52	None	add
80	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  permutation.length;  ++j)  {  Integer  j  =  0;  j  <  permutation.length;  ++j)  {  [CE]  >  expected  [FE]          AssertionFailedError    [CONTEXT]      lmPar  =  0;  return;  }    double  sum2;  double  parl  =  0;  if  (rank  ==  solvedCols)  {      [BUGGY]  for(int  j  =  0;  j  <  permutation.length;  ++j)  {  Integer  j  =  0;  j  <  permutation.length;  ++j)  {  [BUGGY]      int  pj  =  permutation[j];  work1[pj]  *=  diag[pj]  /  dxNorm;  }  sum2  =  0;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  double  sum  =  0;  for  (int  i  =  0;  i  <  j;  ++i)  {  sum  +=  jacobian[i][pj]  *  work1[permutation[i]];  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  determineLMParameter  [RETURN_TYPE]  void  double[]  qy  double  delta  double[]  diag  double[]  work1  double[]  work2  double[]  work3  [VARIABLES]  int[]  permutation  boolean  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  qy  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  correction  costRelativeTolerance  delta  dirDer  dirJ  dk  dxNorm  fp  gNorm  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  parl  paru  pc2  preRed  previousCost  previousFP  qrRankingThreshold  r  ratio  s  sPar  sum  sum2  threshold  tmp  xK  xNorm  xk  ypk  int  countdown  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3922322702763681	530	530	2	replace	for(int    j    =    0;    j    <    permutation.length;    ++j)    {    Integer  j  =  0;  j  <  permutation.length;  ++j)  {	  	non-compiled	[CE]  >  expected	52	None	add
81	[BUG]  [BUGGY]  double  dxNorm  =  Math.abs(solvedCols  -  parl);  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      lmPar  =  0;  return;  }    double  sum2;  double  parl  =  0;  if  (rank  ==  solvedCols)  {      [BUGGY]  double  dxNorm  =  Math.abs(solvedCols  -  parl);  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  work1[pj]  *=  diag[pj]  /  dxNorm;  }  sum2  =  0;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  double  sum  =  0;  for  (int  i  =  0;  i  <  j;  ++i)  {  sum  +=  jacobian[i][pj]  *  work1[permutation[i]];  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  determineLMParameter  [RETURN_TYPE]  void  double[]  qy  double  delta  double[]  diag  double[]  work1  double[]  work2  double[]  work3  [VARIABLES]  int[]  permutation  boolean  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  qy  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  correction  costRelativeTolerance  delta  dirDer  dirJ  dk  dxNorm  fp  gNorm  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  parl  paru  pc2  preRed  previousCost  previousFP  qrRankingThreshold  r  ratio  s  sPar  sum  sum2  threshold  tmp  xK  xNorm  xk  ypk  int  countdown  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3922322702763681	530	530	2	replace	double  dxNorm  =  Math.abs(solvedCols  -  parl);	  double    dxNorm    =    Math.abs(solvedCols    -rank);    	non-compiled	[CE]  <identifier>  expected	19	None	replace
82	[BUG]  [BUGGY]  double  dxNorm  =  Math.abs(solvedCols  -  sum2);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      lmPar  =  0;  return;  }    double  sum2;  double  parl  =  0;  if  (rank  ==  solvedCols)  {      [BUGGY]  double  dxNorm  =  Math.abs(solvedCols  -  sum2);  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  work1[pj]  *=  diag[pj]  /  dxNorm;  }  sum2  =  0;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  double  sum  =  0;  for  (int  i  =  0;  i  <  j;  ++i)  {  sum  +=  jacobian[i][pj]  *  work1[permutation[i]];  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  determineLMParameter  [RETURN_TYPE]  void  double[]  qy  double  delta  double[]  diag  double[]  work1  double[]  work2  double[]  work3  [VARIABLES]  int[]  permutation  boolean  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  qy  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  correction  costRelativeTolerance  delta  dirDer  dirJ  dk  dxNorm  fp  gNorm  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  parl  paru  pc2  preRed  previousCost  previousFP  qrRankingThreshold  r  ratio  s  sPar  sum  sum2  threshold  tmp  xK  xNorm  xk  ypk  int  countdown  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3922322702763681	530	530	2	replace	double  dxNorm  =  Math.abs(solvedCols  -  sum2);	  double    dxNorm    =    Math.abs(solvedCols    -rank);    	non-compiled	[CE]  <identifier>  expected	19	None	replace
83	[BUG]  [BUGGY]  double  dxNorm  =  Math.abs(solvedCols  -  1);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      lmPar  =  0;  return;  }    double  sum2;  double  parl  =  0;  if  (rank  ==  solvedCols)  {      [BUGGY]  double  dxNorm  =  Math.abs(solvedCols  -  1);  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  work1[pj]  *=  diag[pj]  /  dxNorm;  }  sum2  =  0;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  double  sum  =  0;  for  (int  i  =  0;  i  <  j;  ++i)  {  sum  +=  jacobian[i][pj]  *  work1[permutation[i]];  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  determineLMParameter  [RETURN_TYPE]  void  double[]  qy  double  delta  double[]  diag  double[]  work1  double[]  work2  double[]  work3  [VARIABLES]  int[]  permutation  boolean  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  qy  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  correction  costRelativeTolerance  delta  dirDer  dirJ  dk  dxNorm  fp  gNorm  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  parl  paru  pc2  preRed  previousCost  previousFP  qrRankingThreshold  r  ratio  s  sPar  sum  sum2  threshold  tmp  xK  xNorm  xk  ypk  int  countdown  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3922322702763681	530	530	2	replace	double  dxNorm  =  Math.abs(solvedCols  -  1);	  double    dxNorm    =    Math.abs(solvedCols    -rank);    	non-compiled	[CE]  <identifier>  expected	19	None	replace
84	[BUG]  [BUGGY]  double  dxNorm  =  Math.abs(solvedCols  -  total);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      lmPar  =  0;  return;  }    double  sum2;  double  parl  =  0;  if  (rank  ==  solvedCols)  {      [BUGGY]  double  dxNorm  =  Math.abs(solvedCols  -  total);  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  work1[pj]  *=  diag[pj]  /  dxNorm;  }  sum2  =  0;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  double  sum  =  0;  for  (int  i  =  0;  i  <  j;  ++i)  {  sum  +=  jacobian[i][pj]  *  work1[permutation[i]];  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  determineLMParameter  [RETURN_TYPE]  void  double[]  qy  double  delta  double[]  diag  double[]  work1  double[]  work2  double[]  work3  [VARIABLES]  int[]  permutation  boolean  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  qy  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  correction  costRelativeTolerance  delta  dirDer  dirJ  dk  dxNorm  fp  gNorm  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  parl  paru  pc2  preRed  previousCost  previousFP  qrRankingThreshold  r  ratio  s  sPar  sum  sum2  threshold  tmp  xK  xNorm  xk  ypk  int  countdown  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3922322702763681	530	530	2	replace	double  dxNorm  =  Math.abs(solvedCols  -  total);	  double    dxNorm    =    Math.abs(solvedCols    -rank);    	non-compiled	[CE]  <identifier>  expected	19	None	replace
85	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  if(j  =  0;  j  <  parl;  ++j)  {  [CE]  ')'  expected  [FE]        AssertionFailedError      [CONTEXT]      lmPar  =  0;  return;  }    double  sum2;  double  parl  =  0;  if  (rank  ==  solvedCols)  {      [BUGGY]  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  if(j  =  0;  j  <  parl;  ++j)  {  [BUGGY]      int  pj  =  permutation[j];  work1[pj]  *=  diag[pj]  /  dxNorm;  }  sum2  =  0;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  double  sum  =  0;  for  (int  i  =  0;  i  <  j;  ++i)  {  sum  +=  jacobian[i][pj]  *  work1[permutation[i]];  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  determineLMParameter  [RETURN_TYPE]  void  double[]  qy  double  delta  double[]  diag  double[]  work1  double[]  work2  double[]  work3  [VARIABLES]  int[]  permutation  boolean  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  qy  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  correction  costRelativeTolerance  delta  dirDer  dirJ  dk  dxNorm  fp  gNorm  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  parl  paru  pc2  preRed  previousCost  previousFP  qrRankingThreshold  r  ratio  s  sPar  sum  sum2  threshold  tmp  xK  xNorm  xk  ypk  int  countdown  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3922322702763681	530	530	2	replace	for(int  j  =  0;  j  <  solvedCols;  ++j)  {  if(j  =  0;  j  <  parl;  ++j)  {	  for(int    j    =    0;    j    <    parl;    ++j)    {    if(j    =    0;    j    <    parl;    ++j)    {    	non-compiled	[CE]  ')'  expected	48	None	replace
86	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  if(j  >  0;  j  <  parl;  ++j)  {  [CE]  ')'  expected  [FE]          AssertionFailedError      [CONTEXT]      lmPar  =  0;  return;  }    double  sum2;  double  parl  =  0;  if  (rank  ==  solvedCols)  {      [BUGGY]  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  if(j  >  0;  j  <  parl;  ++j)  {  [BUGGY]      int  pj  =  permutation[j];  work1[pj]  *=  diag[pj]  /  dxNorm;  }  sum2  =  0;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  double  sum  =  0;  for  (int  i  =  0;  i  <  j;  ++i)  {  sum  +=  jacobian[i][pj]  *  work1[permutation[i]];  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  determineLMParameter  [RETURN_TYPE]  void  double[]  qy  double  delta  double[]  diag  double[]  work1  double[]  work2  double[]  work3  [VARIABLES]  int[]  permutation  boolean  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  qy  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  correction  costRelativeTolerance  delta  dirDer  dirJ  dk  dxNorm  fp  gNorm  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  parl  paru  pc2  preRed  previousCost  previousFP  qrRankingThreshold  r  ratio  s  sPar  sum  sum2  threshold  tmp  xK  xNorm  xk  ypk  int  countdown  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3922322702763681	530	530	2	replace	for(int  j  =  0;  j  <  solvedCols;  ++j)  {  if(j  >  0;  j  <  parl;  ++j)  {	  for(int    j    =    0;    j    <    parl;    ++j)    {    if(j    =    0;    j    <    parl;    ++j)    {    	non-compiled	[CE]  ')'  expected	48	None	replace
87	[BUG]  [BUGGY]  For(int  j  =  0;  j  <  solvedCols;  ++j)  {  if(j  =  0;  j  <  parl;  ++j)  {  [CE]  '.class'  expected  [FE]            AssertionFailedError      [CONTEXT]      lmPar  =  0;  return;  }    double  sum2;  double  parl  =  0;  if  (rank  ==  solvedCols)  {      [BUGGY]  For(int  j  =  0;  j  <  solvedCols;  ++j)  {  if(j  =  0;  j  <  parl;  ++j)  {  [BUGGY]      int  pj  =  permutation[j];  work1[pj]  *=  diag[pj]  /  dxNorm;  }  sum2  =  0;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  double  sum  =  0;  for  (int  i  =  0;  i  <  j;  ++i)  {  sum  +=  jacobian[i][pj]  *  work1[permutation[i]];  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  determineLMParameter  [RETURN_TYPE]  void  double[]  qy  double  delta  double[]  diag  double[]  work1  double[]  work2  double[]  work3  [VARIABLES]  int[]  permutation  boolean  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  qy  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  correction  costRelativeTolerance  delta  dirDer  dirJ  dk  dxNorm  fp  gNorm  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  parl  paru  pc2  preRed  previousCost  previousFP  qrRankingThreshold  r  ratio  s  sPar  sum  sum2  threshold  tmp  xK  xNorm  xk  ypk  int  countdown  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3922322702763681	530	530	2	replace	For(int  j  =  0;  j  <  solvedCols;  ++j)  {  if(j  =  0;  j  <  parl;  ++j)  {	  for(int    j    =    0;    j    <    parl;    ++j)    {    if(j    =    0;    j    <    parl;    ++j)    {    	non-compiled	[CE]  '.class'  expected	48	None	replace
88	[BUG]  [BUGGY]  for(int  i  =  0;  j  <  solvedCols;  ++i)  {  if(j  =  0;  j  <  parl;  ++j)  {  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]      lmPar  =  0;  return;  }    double  sum2;  double  parl  =  0;  if  (rank  ==  solvedCols)  {      [BUGGY]  for(int  i  =  0;  j  <  solvedCols;  ++i)  {  if(j  =  0;  j  <  parl;  ++j)  {  [BUGGY]      int  pj  =  permutation[j];  work1[pj]  *=  diag[pj]  /  dxNorm;  }  sum2  =  0;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  double  sum  =  0;  for  (int  i  =  0;  i  <  j;  ++i)  {  sum  +=  jacobian[i][pj]  *  work1[permutation[i]];  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  determineLMParameter  [RETURN_TYPE]  void  double[]  qy  double  delta  double[]  diag  double[]  work1  double[]  work2  double[]  work3  [VARIABLES]  int[]  permutation  boolean  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  qy  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  correction  costRelativeTolerance  delta  dirDer  dirJ  dk  dxNorm  fp  gNorm  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  parl  paru  pc2  preRed  previousCost  previousFP  qrRankingThreshold  r  ratio  s  sPar  sum  sum2  threshold  tmp  xK  xNorm  xk  ypk  int  countdown  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3922322702763681	530	530	2	replace	for(int  i  =  0;  j  <  solvedCols;  ++i)  {  if(j  =  0;  j  <  parl;  ++j)  {	  for(int    j    =    0;    j    <    parl;    ++j)    {    if(j    =    0;    j    <    parl;    ++j)    {    	non-compiled	[CE]  ')'  expected	48	None	replace
89	[BUG]  [BUGGY]  double  dxNorm  =  Math.abs(diag[0]  *  Math.abs(rank  -  1));  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      lmPar  =  0;  return;  }    double  sum2;  double  parl  =  0;  if  (rank  ==  solvedCols)  {      [BUGGY]  double  dxNorm  =  Math.abs(diag[0]  *  Math.abs(rank  -  1));  [BUGGY]      int  pj  =  permutation[j];  work1[pj]  *=  diag[pj]  /  dxNorm;  }  sum2  =  0;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  double  sum  =  0;  for  (int  i  =  0;  i  <  j;  ++i)  {  sum  +=  jacobian[i][pj]  *  work1[permutation[i]];  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  determineLMParameter  [RETURN_TYPE]  void  double[]  qy  double  delta  double[]  diag  double[]  work1  double[]  work2  double[]  work3  [VARIABLES]  int[]  permutation  boolean  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  qy  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  correction  costRelativeTolerance  delta  dirDer  dirJ  dk  dxNorm  fp  gNorm  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  parl  paru  pc2  preRed  previousCost  previousFP  qrRankingThreshold  r  ratio  s  sPar  sum  sum2  threshold  tmp  xK  xNorm  xk  ypk  int  countdown  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3922322702763681	530	530	2	replace	double  dxNorm  =  Math.abs(diag[0]  *  Math.abs(rank  -  1));	  double    dxNorm    =    Math.abs(diag[0]    *    Math.abs(rank));    	non-compiled	[CE]  <identifier>  expected	77	None	replace
90	[BUG]  [BUGGY]  double  dxNorm  =  Math.abs(diag[0]  *  Math.abs(sum2));  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      lmPar  =  0;  return;  }    double  sum2;  double  parl  =  0;  if  (rank  ==  solvedCols)  {      [BUGGY]  double  dxNorm  =  Math.abs(diag[0]  *  Math.abs(sum2));  [BUGGY]      int  pj  =  permutation[j];  work1[pj]  *=  diag[pj]  /  dxNorm;  }  sum2  =  0;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  double  sum  =  0;  for  (int  i  =  0;  i  <  j;  ++i)  {  sum  +=  jacobian[i][pj]  *  work1[permutation[i]];  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  determineLMParameter  [RETURN_TYPE]  void  double[]  qy  double  delta  double[]  diag  double[]  work1  double[]  work2  double[]  work3  [VARIABLES]  int[]  permutation  boolean  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  qy  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  correction  costRelativeTolerance  delta  dirDer  dirJ  dk  dxNorm  fp  gNorm  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  parl  paru  pc2  preRed  previousCost  previousFP  qrRankingThreshold  r  ratio  s  sPar  sum  sum2  threshold  tmp  xK  xNorm  xk  ypk  int  countdown  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3922322702763681	530	530	2	replace	double  dxNorm  =  Math.abs(diag[0]  *  Math.abs(sum2));	  double    dxNorm    =    Math.abs(diag[0]    *    Math.abs(rank));    	non-compiled	[CE]  <identifier>  expected	77	None	replace
91	[BUG]  [BUGGY]  double  dxNorm  =  Math.abs(diag[0]  *  Math.abs(rank  +  1));  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      lmPar  =  0;  return;  }    double  sum2;  double  parl  =  0;  if  (rank  ==  solvedCols)  {      [BUGGY]  double  dxNorm  =  Math.abs(diag[0]  *  Math.abs(rank  +  1));  [BUGGY]      int  pj  =  permutation[j];  work1[pj]  *=  diag[pj]  /  dxNorm;  }  sum2  =  0;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  double  sum  =  0;  for  (int  i  =  0;  i  <  j;  ++i)  {  sum  +=  jacobian[i][pj]  *  work1[permutation[i]];  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  determineLMParameter  [RETURN_TYPE]  void  double[]  qy  double  delta  double[]  diag  double[]  work1  double[]  work2  double[]  work3  [VARIABLES]  int[]  permutation  boolean  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  qy  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  correction  costRelativeTolerance  delta  dirDer  dirJ  dk  dxNorm  fp  gNorm  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  parl  paru  pc2  preRed  previousCost  previousFP  qrRankingThreshold  r  ratio  s  sPar  sum  sum2  threshold  tmp  xK  xNorm  xk  ypk  int  countdown  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3922322702763681	530	530	2	replace	double  dxNorm  =  Math.abs(diag[0]  *  Math.abs(rank  +  1));	  double    dxNorm    =    Math.abs(diag[0]    *    Math.abs(rank));    	non-compiled	[CE]  <identifier>  expected	77	None	replace
92	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  solvedCols.length;  ++j)  {  if(j  =  0;  j  <  diag.length;  ++j)  {  [CE]  ')'  expected  [FE]        AssertionFailedError      [CONTEXT]      lmPar  =  0;  return;  }    double  sum2;  double  parl  =  0;  if  (rank  ==  solvedCols)  {      [BUGGY]  for(int  j  =  0;  j  <  solvedCols.length;  ++j)  {  if(j  =  0;  j  <  diag.length;  ++j)  {  [BUGGY]      int  pj  =  permutation[j];  work1[pj]  *=  diag[pj]  /  dxNorm;  }  sum2  =  0;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  double  sum  =  0;  for  (int  i  =  0;  i  <  j;  ++i)  {  sum  +=  jacobian[i][pj]  *  work1[permutation[i]];  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  determineLMParameter  [RETURN_TYPE]  void  double[]  qy  double  delta  double[]  diag  double[]  work1  double[]  work2  double[]  work3  [VARIABLES]  int[]  permutation  boolean  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  qy  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  correction  costRelativeTolerance  delta  dirDer  dirJ  dk  dxNorm  fp  gNorm  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  parl  paru  pc2  preRed  previousCost  previousFP  qrRankingThreshold  r  ratio  s  sPar  sum  sum2  threshold  tmp  xK  xNorm  xk  ypk  int  countdown  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3922322702763681	530	530	2	replace	for(int  j  =  0;  j  <  solvedCols.length;  ++j)  {  if(j  =  0;  j  <  diag.length;  ++j)  {	  for(int    j    =    0;    j    <    diag.length;    ++j)    {    if(j    =    0;    j    <    diag.length;    ++j)    {    	non-compiled	[CE]  ')'  expected	57	None	replace
93	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  if(j  =  0;  j  <  diag.length;  ++j)  {  [CE]  ')'  expected  [FE]          AssertionFailedError      [CONTEXT]      lmPar  =  0;  return;  }    double  sum2;  double  parl  =  0;  if  (rank  ==  solvedCols)  {      [BUGGY]  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  if(j  =  0;  j  <  diag.length;  ++j)  {  [BUGGY]      int  pj  =  permutation[j];  work1[pj]  *=  diag[pj]  /  dxNorm;  }  sum2  =  0;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  double  sum  =  0;  for  (int  i  =  0;  i  <  j;  ++i)  {  sum  +=  jacobian[i][pj]  *  work1[permutation[i]];  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  determineLMParameter  [RETURN_TYPE]  void  double[]  qy  double  delta  double[]  diag  double[]  work1  double[]  work2  double[]  work3  [VARIABLES]  int[]  permutation  boolean  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  qy  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  correction  costRelativeTolerance  delta  dirDer  dirJ  dk  dxNorm  fp  gNorm  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  parl  paru  pc2  preRed  previousCost  previousFP  qrRankingThreshold  r  ratio  s  sPar  sum  sum2  threshold  tmp  xK  xNorm  xk  ypk  int  countdown  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3922322702763681	530	530	2	replace	for(int  j  =  0;  j  <  solvedCols;  ++j)  {  if(j  =  0;  j  <  diag.length;  ++j)  {	  for(int    j    =    0;    j    <    diag.length;    ++j)    {    if(j    =    0;    j    <    diag.length;    ++j)    {    	non-compiled	[CE]  ')'  expected	57	None	replace
94	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  solvedCols.length;  ++j)  {  if(j  >  0;  j  <  diag.length;  ++j)  {  [CE]  ')'  expected  [FE]            AssertionFailedError      [CONTEXT]      lmPar  =  0;  return;  }    double  sum2;  double  parl  =  0;  if  (rank  ==  solvedCols)  {      [BUGGY]  for(int  j  =  0;  j  <  solvedCols.length;  ++j)  {  if(j  >  0;  j  <  diag.length;  ++j)  {  [BUGGY]      int  pj  =  permutation[j];  work1[pj]  *=  diag[pj]  /  dxNorm;  }  sum2  =  0;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  double  sum  =  0;  for  (int  i  =  0;  i  <  j;  ++i)  {  sum  +=  jacobian[i][pj]  *  work1[permutation[i]];  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  determineLMParameter  [RETURN_TYPE]  void  double[]  qy  double  delta  double[]  diag  double[]  work1  double[]  work2  double[]  work3  [VARIABLES]  int[]  permutation  boolean  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  qy  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  correction  costRelativeTolerance  delta  dirDer  dirJ  dk  dxNorm  fp  gNorm  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  parl  paru  pc2  preRed  previousCost  previousFP  qrRankingThreshold  r  ratio  s  sPar  sum  sum2  threshold  tmp  xK  xNorm  xk  ypk  int  countdown  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3922322702763681	530	530	2	replace	for(int  j  =  0;  j  <  solvedCols.length;  ++j)  {  if(j  >  0;  j  <  diag.length;  ++j)  {	  for(int    j    =    0;    j    <    diag.length;    ++j)    {    if(j    =    0;    j    <    diag.length;    ++j)    {    	non-compiled	[CE]  ')'  expected	57	None	replace
95	[BUG]  [BUGGY]  int  solvedCols  =  Math.min(sum2  -  1,  0);  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      lmPar  =  0;  return;  }    double  sum2;  double  parl  =  0;  if  (rank  ==  solvedCols)  {      [BUGGY]  int  solvedCols  =  Math.min(sum2  -  1,  0);  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  work1[pj]  *=  diag[pj]  /  dxNorm;  }  sum2  =  0;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  double  sum  =  0;  for  (int  i  =  0;  i  <  j;  ++i)  {  sum  +=  jacobian[i][pj]  *  work1[permutation[i]];  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  determineLMParameter  [RETURN_TYPE]  void  double[]  qy  double  delta  double[]  diag  double[]  work1  double[]  work2  double[]  work3  [VARIABLES]  int[]  permutation  boolean  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  qy  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  correction  costRelativeTolerance  delta  dirDer  dirJ  dk  dxNorm  fp  gNorm  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  parl  paru  pc2  preRed  previousCost  previousFP  qrRankingThreshold  r  ratio  s  sPar  sum  sum2  threshold  tmp  xK  xNorm  xk  ypk  int  countdown  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3922322702763681	530	530	2	replace	int  solvedCols  =  Math.min(sum2  -  1,  0);	  int    solvedCols    =    Math.min(diag,    0);    	non-compiled	[CE]  <identifier>  expected	68	None	replace
96	[BUG]  [BUGGY]  double  j  =  0;  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      lmPar  =  0;  return;  }    double  sum2;  double  parl  =  0;  if  (rank  ==  solvedCols)  {      [BUGGY]  double  j  =  0;  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  work1[pj]  *=  diag[pj]  /  dxNorm;  }  sum2  =  0;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  double  sum  =  0;  for  (int  i  =  0;  i  <  j;  ++i)  {  sum  +=  jacobian[i][pj]  *  work1[permutation[i]];  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  determineLMParameter  [RETURN_TYPE]  void  double[]  qy  double  delta  double[]  diag  double[]  work1  double[]  work2  double[]  work3  [VARIABLES]  int[]  permutation  boolean  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  qy  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  correction  costRelativeTolerance  delta  dirDer  dirJ  dk  dxNorm  fp  gNorm  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  parl  paru  pc2  preRed  previousCost  previousFP  qrRankingThreshold  r  ratio  s  sPar  sum  sum2  threshold  tmp  xK  xNorm  xk  ypk  int  countdown  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3922322702763681	530	530	2	replace	double  j  =  0;	  int    j    =    0;    	non-compiled	[CE]  <identifier>  expected	69	None	replace
97	[BUG]  [BUGGY]  int  j  =  1;  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      lmPar  =  0;  return;  }    double  sum2;  double  parl  =  0;  if  (rank  ==  solvedCols)  {      [BUGGY]  int  j  =  1;  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  work1[pj]  *=  diag[pj]  /  dxNorm;  }  sum2  =  0;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  double  sum  =  0;  for  (int  i  =  0;  i  <  j;  ++i)  {  sum  +=  jacobian[i][pj]  *  work1[permutation[i]];  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  determineLMParameter  [RETURN_TYPE]  void  double[]  qy  double  delta  double[]  diag  double[]  work1  double[]  work2  double[]  work3  [VARIABLES]  int[]  permutation  boolean  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  qy  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  correction  costRelativeTolerance  delta  dirDer  dirJ  dk  dxNorm  fp  gNorm  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  parl  paru  pc2  preRed  previousCost  previousFP  qrRankingThreshold  r  ratio  s  sPar  sum  sum2  threshold  tmp  xK  xNorm  xk  ypk  int  countdown  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3922322702763681	530	530	2	replace	int  j  =  1;	  int    j    =    0;    	non-compiled	[CE]  <identifier>  expected	69	None	replace
98	[BUG]  [BUGGY]  float  j  =  0;  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      lmPar  =  0;  return;  }    double  sum2;  double  parl  =  0;  if  (rank  ==  solvedCols)  {      [BUGGY]  float  j  =  0;  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  work1[pj]  *=  diag[pj]  /  dxNorm;  }  sum2  =  0;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  double  sum  =  0;  for  (int  i  =  0;  i  <  j;  ++i)  {  sum  +=  jacobian[i][pj]  *  work1[permutation[i]];  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  determineLMParameter  [RETURN_TYPE]  void  double[]  qy  double  delta  double[]  diag  double[]  work1  double[]  work2  double[]  work3  [VARIABLES]  int[]  permutation  boolean  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  qy  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  correction  costRelativeTolerance  delta  dirDer  dirJ  dk  dxNorm  fp  gNorm  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  parl  paru  pc2  preRed  previousCost  previousFP  qrRankingThreshold  r  ratio  s  sPar  sum  sum2  threshold  tmp  xK  xNorm  xk  ypk  int  countdown  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3922322702763681	530	530	2	replace	float  j  =  0;	  int    j    =    0;    	non-compiled	[CE]  <identifier>  expected	69	None	replace
99	[BUG]  [BUGGY]  double  dxNorm  =  Math.rint(diag);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      lmPar  =  0;  return;  }    double  sum2;  double  parl  =  0;  if  (rank  ==  solvedCols)  {      [BUGGY]  double  dxNorm  =  Math.rint(diag);  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  work1[pj]  *=  diag[pj]  /  dxNorm;  }  sum2  =  0;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  double  sum  =  0;  for  (int  i  =  0;  i  <  j;  ++i)  {  sum  +=  jacobian[i][pj]  *  work1[permutation[i]];  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  determineLMParameter  [RETURN_TYPE]  void  double[]  qy  double  delta  double[]  diag  double[]  work1  double[]  work2  double[]  work3  [VARIABLES]  int[]  permutation  boolean  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  qy  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  correction  costRelativeTolerance  delta  dirDer  dirJ  dk  dxNorm  fp  gNorm  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  parl  paru  pc2  preRed  previousCost  previousFP  qrRankingThreshold  r  ratio  s  sPar  sum  sum2  threshold  tmp  xK  xNorm  xk  ypk  int  countdown  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3922322702763681	530	530	2	replace	double  dxNorm  =  Math.rint(diag);	  double    dxNorm    =    Math.rint(rank);    	non-compiled	[CE]  <identifier>  expected	24	None	replace
100	[BUG]  [BUGGY]  double  dxNorm  =  Math.rint(diagR);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      lmPar  =  0;  return;  }    double  sum2;  double  parl  =  0;  if  (rank  ==  solvedCols)  {      [BUGGY]  double  dxNorm  =  Math.rint(diagR);  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  work1[pj]  *=  diag[pj]  /  dxNorm;  }  sum2  =  0;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  double  sum  =  0;  for  (int  i  =  0;  i  <  j;  ++i)  {  sum  +=  jacobian[i][pj]  *  work1[permutation[i]];  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  determineLMParameter  [RETURN_TYPE]  void  double[]  qy  double  delta  double[]  diag  double[]  work1  double[]  work2  double[]  work3  [VARIABLES]  int[]  permutation  boolean  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  qy  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  correction  costRelativeTolerance  delta  dirDer  dirJ  dk  dxNorm  fp  gNorm  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  parl  paru  pc2  preRed  previousCost  previousFP  qrRankingThreshold  r  ratio  s  sPar  sum  sum2  threshold  tmp  xK  xNorm  xk  ypk  int  countdown  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3922322702763681	530	530	2	replace	double  dxNorm  =  Math.rint(diagR);	  double    dxNorm    =    Math.rint(rank);    	non-compiled	[CE]  <identifier>  expected	24	None	replace
101	[BUG]  [BUGGY]  double  dxNorm  =  Math.rint(parl);  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      lmPar  =  0;  return;  }    double  sum2;  double  parl  =  0;  if  (rank  ==  solvedCols)  {      [BUGGY]  double  dxNorm  =  Math.rint(parl);  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  work1[pj]  *=  diag[pj]  /  dxNorm;  }  sum2  =  0;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  double  sum  =  0;  for  (int  i  =  0;  i  <  j;  ++i)  {  sum  +=  jacobian[i][pj]  *  work1[permutation[i]];  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  determineLMParameter  [RETURN_TYPE]  void  double[]  qy  double  delta  double[]  diag  double[]  work1  double[]  work2  double[]  work3  [VARIABLES]  int[]  permutation  boolean  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  qy  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  correction  costRelativeTolerance  delta  dirDer  dirJ  dk  dxNorm  fp  gNorm  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  parl  paru  pc2  preRed  previousCost  previousFP  qrRankingThreshold  r  ratio  s  sPar  sum  sum2  threshold  tmp  xK  xNorm  xk  ypk  int  countdown  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3922322702763681	530	530	2	replace	double  dxNorm  =  Math.rint(parl);	  double    dxNorm    =    Math.rint(rank);    	non-compiled	[CE]  <identifier>  expected	24	None	replace
102	[BUG]  [BUGGY]  double  dxNorm  =  Math.rint(rank  +  1);  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      lmPar  =  0;  return;  }    double  sum2;  double  parl  =  0;  if  (rank  ==  solvedCols)  {      [BUGGY]  double  dxNorm  =  Math.rint(rank  +  1);  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  work1[pj]  *=  diag[pj]  /  dxNorm;  }  sum2  =  0;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  double  sum  =  0;  for  (int  i  =  0;  i  <  j;  ++i)  {  sum  +=  jacobian[i][pj]  *  work1[permutation[i]];  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  determineLMParameter  [RETURN_TYPE]  void  double[]  qy  double  delta  double[]  diag  double[]  work1  double[]  work2  double[]  work3  [VARIABLES]  int[]  permutation  boolean  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  qy  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  correction  costRelativeTolerance  delta  dirDer  dirJ  dk  dxNorm  fp  gNorm  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  parl  paru  pc2  preRed  previousCost  previousFP  qrRankingThreshold  r  ratio  s  sPar  sum  sum2  threshold  tmp  xK  xNorm  xk  ypk  int  countdown  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3922322702763681	530	530	2	replace	double  dxNorm  =  Math.rint(rank  +  1);	  double    dxNorm    =    Math.rint(rank);    	non-compiled	[CE]  <identifier>  expected	24	None	replace
103	[BUG]  [BUGGY]  float  solvedCols  =  Math.min(solvedCols,  parl  -  1);  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      lmPar  =  0;  return;  }    double  sum2;  double  parl  =  0;  if  (rank  ==  solvedCols)  {      [BUGGY]  float  solvedCols  =  Math.min(solvedCols,  parl  -  1);  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  work1[pj]  *=  diag[pj]  /  dxNorm;  }  sum2  =  0;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  double  sum  =  0;  for  (int  i  =  0;  i  <  j;  ++i)  {  sum  +=  jacobian[i][pj]  *  work1[permutation[i]];  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  determineLMParameter  [RETURN_TYPE]  void  double[]  qy  double  delta  double[]  diag  double[]  work1  double[]  work2  double[]  work3  [VARIABLES]  int[]  permutation  boolean  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  qy  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  correction  costRelativeTolerance  delta  dirDer  dirJ  dk  dxNorm  fp  gNorm  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  parl  paru  pc2  preRed  previousCost  previousFP  qrRankingThreshold  r  ratio  s  sPar  sum  sum2  threshold  tmp  xK  xNorm  xk  ypk  int  countdown  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3922322702763681	530	530	2	replace	float  solvedCols  =  Math.min(solvedCols,  parl  -  1);	  float    solvedCols    =    Math.min(solvedCols,    sum2    -    1);    	non-compiled	[CE]  <identifier>  expected	59	None	replace
104	[BUG]  [BUGGY]  float  solvedCols  =  Math.max(solvedCols,  sum2  -  1);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      lmPar  =  0;  return;  }    double  sum2;  double  parl  =  0;  if  (rank  ==  solvedCols)  {      [BUGGY]  float  solvedCols  =  Math.max(solvedCols,  sum2  -  1);  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  work1[pj]  *=  diag[pj]  /  dxNorm;  }  sum2  =  0;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  double  sum  =  0;  for  (int  i  =  0;  i  <  j;  ++i)  {  sum  +=  jacobian[i][pj]  *  work1[permutation[i]];  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  determineLMParameter  [RETURN_TYPE]  void  double[]  qy  double  delta  double[]  diag  double[]  work1  double[]  work2  double[]  work3  [VARIABLES]  int[]  permutation  boolean  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  qy  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  correction  costRelativeTolerance  delta  dirDer  dirJ  dk  dxNorm  fp  gNorm  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  parl  paru  pc2  preRed  previousCost  previousFP  qrRankingThreshold  r  ratio  s  sPar  sum  sum2  threshold  tmp  xK  xNorm  xk  ypk  int  countdown  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3922322702763681	530	530	2	replace	float  solvedCols  =  Math.max(solvedCols,  sum2  -  1);	  float    solvedCols    =    Math.min(solvedCols,    sum2    -    1);    	non-compiled	[CE]  <identifier>  expected	59	None	replace
105	[BUG]  [BUGGY]  int  j  =  0;  j  <  diag.length;  ++j)  {  [CE]  >  expected  [FE]          AssertionFailedError      [CONTEXT]      lmPar  =  0;  return;  }    double  sum2;  double  parl  =  0;  if  (rank  ==  solvedCols)  {      [BUGGY]  int  j  =  0;  j  <  diag.length;  ++j)  {  [BUGGY]      int  pj  =  permutation[j];  work1[pj]  *=  diag[pj]  /  dxNorm;  }  sum2  =  0;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  double  sum  =  0;  for  (int  i  =  0;  i  <  j;  ++i)  {  sum  +=  jacobian[i][pj]  *  work1[permutation[i]];  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  determineLMParameter  [RETURN_TYPE]  void  double[]  qy  double  delta  double[]  diag  double[]  work1  double[]  work2  double[]  work3  [VARIABLES]  int[]  permutation  boolean  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  qy  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  correction  costRelativeTolerance  delta  dirDer  dirJ  dk  dxNorm  fp  gNorm  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  parl  paru  pc2  preRed  previousCost  previousFP  qrRankingThreshold  r  ratio  s  sPar  sum  sum2  threshold  tmp  xK  xNorm  xk  ypk  int  countdown  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3922322702763681	530	530	2	replace	int  j  =  0;  j  <  diag.length;  ++j)  {	  for(int    j    =    0;    j    <    diag.length;    ++j)    {    int    j    =    0;    j    <    diag.length;    ++j)    {    	non-compiled	[CE]  >  expected	2	None	replace
106	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  solvedCols.length;  ++j)  {  int  j  =  0;  j  <  diag.length;  ++j)  {  [CE]  >  expected  [FE]            AssertionFailedError      [CONTEXT]      lmPar  =  0;  return;  }    double  sum2;  double  parl  =  0;  if  (rank  ==  solvedCols)  {      [BUGGY]  for(int  j  =  0;  j  <  solvedCols.length;  ++j)  {  int  j  =  0;  j  <  diag.length;  ++j)  {  [BUGGY]      int  pj  =  permutation[j];  work1[pj]  *=  diag[pj]  /  dxNorm;  }  sum2  =  0;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  double  sum  =  0;  for  (int  i  =  0;  i  <  j;  ++i)  {  sum  +=  jacobian[i][pj]  *  work1[permutation[i]];  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  determineLMParameter  [RETURN_TYPE]  void  double[]  qy  double  delta  double[]  diag  double[]  work1  double[]  work2  double[]  work3  [VARIABLES]  int[]  permutation  boolean  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  qy  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  correction  costRelativeTolerance  delta  dirDer  dirJ  dk  dxNorm  fp  gNorm  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  parl  paru  pc2  preRed  previousCost  previousFP  qrRankingThreshold  r  ratio  s  sPar  sum  sum2  threshold  tmp  xK  xNorm  xk  ypk  int  countdown  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3922322702763681	530	530	2	replace	for(int  j  =  0;  j  <  solvedCols.length;  ++j)  {  int  j  =  0;  j  <  diag.length;  ++j)  {	  for(int    j    =    0;    j    <    diag.length;    ++j)    {    int    j    =    0;    j    <    diag.length;    ++j)    {    	non-compiled	[CE]  >  expected	2	None	replace
107	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  int  j  =  0;  j  <  diag.length;  ++j)  {  [CE]  >  expected  [FE]              AssertionFailedError      [CONTEXT]      lmPar  =  0;  return;  }    double  sum2;  double  parl  =  0;  if  (rank  ==  solvedCols)  {      [BUGGY]  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  int  j  =  0;  j  <  diag.length;  ++j)  {  [BUGGY]      int  pj  =  permutation[j];  work1[pj]  *=  diag[pj]  /  dxNorm;  }  sum2  =  0;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  double  sum  =  0;  for  (int  i  =  0;  i  <  j;  ++i)  {  sum  +=  jacobian[i][pj]  *  work1[permutation[i]];  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  determineLMParameter  [RETURN_TYPE]  void  double[]  qy  double  delta  double[]  diag  double[]  work1  double[]  work2  double[]  work3  [VARIABLES]  int[]  permutation  boolean  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  qy  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  correction  costRelativeTolerance  delta  dirDer  dirJ  dk  dxNorm  fp  gNorm  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  parl  paru  pc2  preRed  previousCost  previousFP  qrRankingThreshold  r  ratio  s  sPar  sum  sum2  threshold  tmp  xK  xNorm  xk  ypk  int  countdown  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3922322702763681	530	530	2	replace	for(int  j  =  0;  j  <  solvedCols;  ++j)  {  int  j  =  0;  j  <  diag.length;  ++j)  {	  for(int    j    =    0;    j    <    diag.length;    ++j)    {    int    j    =    0;    j    <    diag.length;    ++j)    {    	non-compiled	[CE]  >  expected	2	None	replace
108	[BUG]  [BUGGY]  double  dxNorm  =  Math.abs(sum2  -  parl);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      lmPar  =  0;  return;  }    double  sum2;  double  parl  =  0;  if  (rank  ==  solvedCols)  {      [BUGGY]  double  dxNorm  =  Math.abs(sum2  -  parl);  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  work1[pj]  *=  diag[pj]  /  dxNorm;  }  sum2  =  0;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  double  sum  =  0;  for  (int  i  =  0;  i  <  j;  ++i)  {  sum  +=  jacobian[i][pj]  *  work1[permutation[i]];  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  determineLMParameter  [RETURN_TYPE]  void  double[]  qy  double  delta  double[]  diag  double[]  work1  double[]  work2  double[]  work3  [VARIABLES]  int[]  permutation  boolean  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  qy  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  correction  costRelativeTolerance  delta  dirDer  dirJ  dk  dxNorm  fp  gNorm  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  parl  paru  pc2  preRed  previousCost  previousFP  qrRankingThreshold  r  ratio  s  sPar  sum  sum2  threshold  tmp  xK  xNorm  xk  ypk  int  countdown  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3922322702763681	530	530	2	replace	double  dxNorm  =  Math.abs(sum2  -  parl);	  double    dxNorm    =    Math.abs(sum2    -    solvedCols);    	non-compiled	[CE]  <identifier>  expected	20	None	replace
109	[BUG]  [BUGGY]  double  dxNorm  =  Math.abs(sum2  /  solvedCols);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      lmPar  =  0;  return;  }    double  sum2;  double  parl  =  0;  if  (rank  ==  solvedCols)  {      [BUGGY]  double  dxNorm  =  Math.abs(sum2  /  solvedCols);  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  work1[pj]  *=  diag[pj]  /  dxNorm;  }  sum2  =  0;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  double  sum  =  0;  for  (int  i  =  0;  i  <  j;  ++i)  {  sum  +=  jacobian[i][pj]  *  work1[permutation[i]];  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  determineLMParameter  [RETURN_TYPE]  void  double[]  qy  double  delta  double[]  diag  double[]  work1  double[]  work2  double[]  work3  [VARIABLES]  int[]  permutation  boolean  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  qy  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  correction  costRelativeTolerance  delta  dirDer  dirJ  dk  dxNorm  fp  gNorm  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  parl  paru  pc2  preRed  previousCost  previousFP  qrRankingThreshold  r  ratio  s  sPar  sum  sum2  threshold  tmp  xK  xNorm  xk  ypk  int  countdown  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3922322702763681	530	530	2	replace	double  dxNorm  =  Math.abs(sum2  /  solvedCols);	  double    dxNorm    =    Math.abs(sum2    -    solvedCols);    	non-compiled	[CE]  <identifier>  expected	20	None	replace
110	[BUG]  [BUGGY]  double  dxNorm  =  Math.abs(diag[1]  *  Math.abs(parl));  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      lmPar  =  0;  return;  }    double  sum2;  double  parl  =  0;  if  (rank  ==  solvedCols)  {      [BUGGY]  double  dxNorm  =  Math.abs(diag[1]  *  Math.abs(parl));  [BUGGY]      int  pj  =  permutation[j];  work1[pj]  *=  diag[pj]  /  dxNorm;  }  sum2  =  0;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  double  sum  =  0;  for  (int  i  =  0;  i  <  j;  ++i)  {  sum  +=  jacobian[i][pj]  *  work1[permutation[i]];  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  determineLMParameter  [RETURN_TYPE]  void  double[]  qy  double  delta  double[]  diag  double[]  work1  double[]  work2  double[]  work3  [VARIABLES]  int[]  permutation  boolean  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  qy  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  correction  costRelativeTolerance  delta  dirDer  dirJ  dk  dxNorm  fp  gNorm  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  parl  paru  pc2  preRed  previousCost  previousFP  qrRankingThreshold  r  ratio  s  sPar  sum  sum2  threshold  tmp  xK  xNorm  xk  ypk  int  countdown  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3922322702763681	530	530	2	replace	double  dxNorm  =  Math.abs(diag[1]  *  Math.abs(parl));	  double    dxNorm    =    Math.abs(diag[0]    *    Math.abs(parl));    	non-compiled	[CE]  <identifier>  expected	76	None	replace
111	[BUG]  [BUGGY]  double  solvedCols  =  Math.min(solvedCols,  0);  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      lmPar  =  0;  return;  }    double  sum2;  double  parl  =  0;  if  (rank  ==  solvedCols)  {      [BUGGY]  double  solvedCols  =  Math.min(solvedCols,  0);  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  work1[pj]  *=  diag[pj]  /  dxNorm;  }  sum2  =  0;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  double  sum  =  0;  for  (int  i  =  0;  i  <  j;  ++i)  {  sum  +=  jacobian[i][pj]  *  work1[permutation[i]];  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  determineLMParameter  [RETURN_TYPE]  void  double[]  qy  double  delta  double[]  diag  double[]  work1  double[]  work2  double[]  work3  [VARIABLES]  int[]  permutation  boolean  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  qy  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  correction  costRelativeTolerance  delta  dirDer  dirJ  dk  dxNorm  fp  gNorm  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  parl  paru  pc2  preRed  previousCost  previousFP  qrRankingThreshold  r  ratio  s  sPar  sum  sum2  threshold  tmp  xK  xNorm  xk  ypk  int  countdown  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3922322702763681	530	530	2	replace	double  solvedCols  =  Math.min(solvedCols,  0);	  double    solvedCols    =    Math.min(solvedCols,    sum2);    	non-compiled	[CE]  <identifier>  expected	36	None	replace
112	[BUG]  [BUGGY]  long  solvedCols  =  Math.min(solvedCols,  parl);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      lmPar  =  0;  return;  }    double  sum2;  double  parl  =  0;  if  (rank  ==  solvedCols)  {      [BUGGY]  long  solvedCols  =  Math.min(solvedCols,  parl);  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  work1[pj]  *=  diag[pj]  /  dxNorm;  }  sum2  =  0;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  double  sum  =  0;  for  (int  i  =  0;  i  <  j;  ++i)  {  sum  +=  jacobian[i][pj]  *  work1[permutation[i]];  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  determineLMParameter  [RETURN_TYPE]  void  double[]  qy  double  delta  double[]  diag  double[]  work1  double[]  work2  double[]  work3  [VARIABLES]  int[]  permutation  boolean  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  qy  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  correction  costRelativeTolerance  delta  dirDer  dirJ  dk  dxNorm  fp  gNorm  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  parl  paru  pc2  preRed  previousCost  previousFP  qrRankingThreshold  r  ratio  s  sPar  sum  sum2  threshold  tmp  xK  xNorm  xk  ypk  int  countdown  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3922322702763681	530	530	2	replace	long  solvedCols  =  Math.min(solvedCols,  parl);	  long    solvedCols    =    Math.min(solvedCols,    sum2);    	non-compiled	[CE]  <identifier>  expected	38	None	replace
113	[BUG]  [BUGGY]  long  solvedCols  =  Math.max(solvedCols,  parl);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      lmPar  =  0;  return;  }    double  sum2;  double  parl  =  0;  if  (rank  ==  solvedCols)  {      [BUGGY]  long  solvedCols  =  Math.max(solvedCols,  parl);  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  work1[pj]  *=  diag[pj]  /  dxNorm;  }  sum2  =  0;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  double  sum  =  0;  for  (int  i  =  0;  i  <  j;  ++i)  {  sum  +=  jacobian[i][pj]  *  work1[permutation[i]];  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  determineLMParameter  [RETURN_TYPE]  void  double[]  qy  double  delta  double[]  diag  double[]  work1  double[]  work2  double[]  work3  [VARIABLES]  int[]  permutation  boolean  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  qy  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  correction  costRelativeTolerance  delta  dirDer  dirJ  dk  dxNorm  fp  gNorm  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  parl  paru  pc2  preRed  previousCost  previousFP  qrRankingThreshold  r  ratio  s  sPar  sum  sum2  threshold  tmp  xK  xNorm  xk  ypk  int  countdown  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3922322702763681	530	530	2	replace	long  solvedCols  =  Math.max(solvedCols,  parl);	  long    solvedCols    =    Math.min(solvedCols,    sum2);    	non-compiled	[CE]  <identifier>  expected	38	None	replace
114	[BUG]  [BUGGY]  Double  solvedCols  =  Math.max(solvedCols,  sum2);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      lmPar  =  0;  return;  }    double  sum2;  double  parl  =  0;  if  (rank  ==  solvedCols)  {      [BUGGY]  Double  solvedCols  =  Math.max(solvedCols,  sum2);  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  work1[pj]  *=  diag[pj]  /  dxNorm;  }  sum2  =  0;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  double  sum  =  0;  for  (int  i  =  0;  i  <  j;  ++i)  {  sum  +=  jacobian[i][pj]  *  work1[permutation[i]];  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  determineLMParameter  [RETURN_TYPE]  void  double[]  qy  double  delta  double[]  diag  double[]  work1  double[]  work2  double[]  work3  [VARIABLES]  int[]  permutation  boolean  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  qy  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  correction  costRelativeTolerance  delta  dirDer  dirJ  dk  dxNorm  fp  gNorm  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  parl  paru  pc2  preRed  previousCost  previousFP  qrRankingThreshold  r  ratio  s  sPar  sum  sum2  threshold  tmp  xK  xNorm  xk  ypk  int  countdown  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3922322702763681	530	530	2	replace	Double  solvedCols  =  Math.max(solvedCols,  sum2);	  Double    solvedCols    =    Math.min(solvedCols,    parl);    	non-compiled	[CE]  <identifier>  expected	40	None	replace
115	[BUG]  [BUGGY]  Integer  j  =  0;  j  <  parl;  ++j)  {  [CE]  >  expected  [FE]              AssertionFailedError      [CONTEXT]      lmPar  =  0;  return;  }    double  sum2;  double  parl  =  0;  if  (rank  ==  solvedCols)  {      [BUGGY]  Integer  j  =  0;  j  <  parl;  ++j)  {  [BUGGY]      int  pj  =  permutation[j];  work1[pj]  *=  diag[pj]  /  dxNorm;  }  sum2  =  0;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  double  sum  =  0;  for  (int  i  =  0;  i  <  j;  ++i)  {  sum  +=  jacobian[i][pj]  *  work1[permutation[i]];  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  determineLMParameter  [RETURN_TYPE]  void  double[]  qy  double  delta  double[]  diag  double[]  work1  double[]  work2  double[]  work3  [VARIABLES]  int[]  permutation  boolean  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  qy  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  correction  costRelativeTolerance  delta  dirDer  dirJ  dk  dxNorm  fp  gNorm  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  parl  paru  pc2  preRed  previousCost  previousFP  qrRankingThreshold  r  ratio  s  sPar  sum  sum2  threshold  tmp  xK  xNorm  xk  ypk  int  countdown  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3922322702763681	530	530	2	replace	Integer  j  =  0;  j  <  parl;  ++j)  {	  for(int    j    =    0;    j    <    parl;    ++j)    {    Integer    j    =    0;    j    <    parl;    ++j)    {    	non-compiled	[CE]  >  expected	18	None	replace
116	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  Integer  j  =  0;  j  <  parl;  ++j)  {  [CE]  >  expected  [FE]                AssertionFailedError      [CONTEXT]      lmPar  =  0;  return;  }    double  sum2;  double  parl  =  0;  if  (rank  ==  solvedCols)  {      [BUGGY]  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  Integer  j  =  0;  j  <  parl;  ++j)  {  [BUGGY]      int  pj  =  permutation[j];  work1[pj]  *=  diag[pj]  /  dxNorm;  }  sum2  =  0;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  double  sum  =  0;  for  (int  i  =  0;  i  <  j;  ++i)  {  sum  +=  jacobian[i][pj]  *  work1[permutation[i]];  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  determineLMParameter  [RETURN_TYPE]  void  double[]  qy  double  delta  double[]  diag  double[]  work1  double[]  work2  double[]  work3  [VARIABLES]  int[]  permutation  boolean  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  qy  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  correction  costRelativeTolerance  delta  dirDer  dirJ  dk  dxNorm  fp  gNorm  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  parl  paru  pc2  preRed  previousCost  previousFP  qrRankingThreshold  r  ratio  s  sPar  sum  sum2  threshold  tmp  xK  xNorm  xk  ypk  int  countdown  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3922322702763681	530	530	2	replace	for(int  j  =  0;  j  <  solvedCols;  ++j)  {  Integer  j  =  0;  j  <  parl;  ++j)  {	  for(int    j    =    0;    j    <    parl;    ++j)    {    Integer    j    =    0;    j    <    parl;    ++j)    {    	non-compiled	[CE]  >  expected	18	None	replace
117	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  Integer  pj  =  0;  j  <  parl;  ++j)  {  [CE]  >  expected  [FE]                  AssertionFailedError      [CONTEXT]      lmPar  =  0;  return;  }    double  sum2;  double  parl  =  0;  if  (rank  ==  solvedCols)  {      [BUGGY]  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  Integer  pj  =  0;  j  <  parl;  ++j)  {  [BUGGY]      int  pj  =  permutation[j];  work1[pj]  *=  diag[pj]  /  dxNorm;  }  sum2  =  0;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  double  sum  =  0;  for  (int  i  =  0;  i  <  j;  ++i)  {  sum  +=  jacobian[i][pj]  *  work1[permutation[i]];  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  determineLMParameter  [RETURN_TYPE]  void  double[]  qy  double  delta  double[]  diag  double[]  work1  double[]  work2  double[]  work3  [VARIABLES]  int[]  permutation  boolean  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  qy  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  correction  costRelativeTolerance  delta  dirDer  dirJ  dk  dxNorm  fp  gNorm  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  parl  paru  pc2  preRed  previousCost  previousFP  qrRankingThreshold  r  ratio  s  sPar  sum  sum2  threshold  tmp  xK  xNorm  xk  ypk  int  countdown  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3922322702763681	530	530	2	replace	for(int  j  =  0;  j  <  solvedCols;  ++j)  {  Integer  pj  =  0;  j  <  parl;  ++j)  {	  for(int    j    =    0;    j    <    parl;    ++j)    {    Integer    j    =    0;    j    <    parl;    ++j)    {    	non-compiled	[CE]  >  expected	18	None	replace
118	[BUG]  [BUGGY]  For(int  j  =  0;  j  <  parl;  ++j)  {  [CE]  '.class'  expected  [FE]            AssertionFailedError      [CONTEXT]      lmPar  =  0;  return;  }    double  sum2;  double  parl  =  0;  if  (rank  ==  solvedCols)  {      [BUGGY]  For(int  j  =  0;  j  <  parl;  ++j)  {  [BUGGY]      int  pj  =  permutation[j];  work1[pj]  *=  diag[pj]  /  dxNorm;  }  sum2  =  0;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  double  sum  =  0;  for  (int  i  =  0;  i  <  j;  ++i)  {  sum  +=  jacobian[i][pj]  *  work1[permutation[i]];  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  determineLMParameter  [RETURN_TYPE]  void  double[]  qy  double  delta  double[]  diag  double[]  work1  double[]  work2  double[]  work3  [VARIABLES]  int[]  permutation  boolean  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  qy  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  correction  costRelativeTolerance  delta  dirDer  dirJ  dk  dxNorm  fp  gNorm  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  parl  paru  pc2  preRed  previousCost  previousFP  qrRankingThreshold  r  ratio  s  sPar  sum  sum2  threshold  tmp  xK  xNorm  xk  ypk  int  countdown  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3922322702763681	530	530	2	replace	For(int  j  =  0;  j  <  parl;  ++j)  {	  for(int    j    =    0;    j    <    parl;    ++j)    {    For(int    j    =    0;    j    <    parl;    ++j)    {    	non-compiled	[CE]  '.class'  expected	17	None	replace
119	[BUG]  [BUGGY]  double  dxNorm  =  Math.sqrt(diag[1]);  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      lmPar  =  0;  return;  }    double  sum2;  double  parl  =  0;  if  (rank  ==  solvedCols)  {      [BUGGY]  double  dxNorm  =  Math.sqrt(diag[1]);  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  work1[pj]  *=  diag[pj]  /  dxNorm;  }  sum2  =  0;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  double  sum  =  0;  for  (int  i  =  0;  i  <  j;  ++i)  {  sum  +=  jacobian[i][pj]  *  work1[permutation[i]];  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  determineLMParameter  [RETURN_TYPE]  void  double[]  qy  double  delta  double[]  diag  double[]  work1  double[]  work2  double[]  work3  [VARIABLES]  int[]  permutation  boolean  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  qy  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  correction  costRelativeTolerance  delta  dirDer  dirJ  dk  dxNorm  fp  gNorm  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  parl  paru  pc2  preRed  previousCost  previousFP  qrRankingThreshold  r  ratio  s  sPar  sum  sum2  threshold  tmp  xK  xNorm  xk  ypk  int  countdown  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3922322702763681	530	530	2	replace	double  dxNorm  =  Math.sqrt(diag[1]);	  double    dxNorm    =    Math.sqrt(diag[0]);    	non-compiled	[CE]  <identifier>  expected	74	None	replace
120	[BUG]  [BUGGY]  double  dxNorm  =  Math.sqrt(diag[0],  sum2);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      lmPar  =  0;  return;  }    double  sum2;  double  parl  =  0;  if  (rank  ==  solvedCols)  {      [BUGGY]  double  dxNorm  =  Math.sqrt(diag[0],  sum2);  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  work1[pj]  *=  diag[pj]  /  dxNorm;  }  sum2  =  0;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  double  sum  =  0;  for  (int  i  =  0;  i  <  j;  ++i)  {  sum  +=  jacobian[i][pj]  *  work1[permutation[i]];  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  determineLMParameter  [RETURN_TYPE]  void  double[]  qy  double  delta  double[]  diag  double[]  work1  double[]  work2  double[]  work3  [VARIABLES]  int[]  permutation  boolean  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  qy  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  correction  costRelativeTolerance  delta  dirDer  dirJ  dk  dxNorm  fp  gNorm  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  parl  paru  pc2  preRed  previousCost  previousFP  qrRankingThreshold  r  ratio  s  sPar  sum  sum2  threshold  tmp  xK  xNorm  xk  ypk  int  countdown  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3922322702763681	530	530	2	replace	double  dxNorm  =  Math.sqrt(diag[0],  sum2);	  double    dxNorm    =    Math.sqrt(diag[0]);    	non-compiled	[CE]  <identifier>  expected	74	None	replace
121	[BUG]  [BUGGY]  double  dxNorm  =  Math.sqrt(diag[0]  *  sum2);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      lmPar  =  0;  return;  }    double  sum2;  double  parl  =  0;  if  (rank  ==  solvedCols)  {      [BUGGY]  double  dxNorm  =  Math.sqrt(diag[0]  *  sum2);  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  work1[pj]  *=  diag[pj]  /  dxNorm;  }  sum2  =  0;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  double  sum  =  0;  for  (int  i  =  0;  i  <  j;  ++i)  {  sum  +=  jacobian[i][pj]  *  work1[permutation[i]];  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  determineLMParameter  [RETURN_TYPE]  void  double[]  qy  double  delta  double[]  diag  double[]  work1  double[]  work2  double[]  work3  [VARIABLES]  int[]  permutation  boolean  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  qy  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  correction  costRelativeTolerance  delta  dirDer  dirJ  dk  dxNorm  fp  gNorm  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  parl  paru  pc2  preRed  previousCost  previousFP  qrRankingThreshold  r  ratio  s  sPar  sum  sum2  threshold  tmp  xK  xNorm  xk  ypk  int  countdown  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3922322702763681	530	530	2	replace	double  dxNorm  =  Math.sqrt(diag[0]  *  sum2);	  double    dxNorm    =    Math.sqrt(diag[0]);    	non-compiled	[CE]  <identifier>  expected	74	None	replace
122	[BUG]  [BUGGY]  double  dxNorm  =  Math.sqrt(diag[0]  +  sum2);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      lmPar  =  0;  return;  }    double  sum2;  double  parl  =  0;  if  (rank  ==  solvedCols)  {      [BUGGY]  double  dxNorm  =  Math.sqrt(diag[0]  +  sum2);  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  work1[pj]  *=  diag[pj]  /  dxNorm;  }  sum2  =  0;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  double  sum  =  0;  for  (int  i  =  0;  i  <  j;  ++i)  {  sum  +=  jacobian[i][pj]  *  work1[permutation[i]];  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  determineLMParameter  [RETURN_TYPE]  void  double[]  qy  double  delta  double[]  diag  double[]  work1  double[]  work2  double[]  work3  [VARIABLES]  int[]  permutation  boolean  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  qy  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  correction  costRelativeTolerance  delta  dirDer  dirJ  dk  dxNorm  fp  gNorm  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  parl  paru  pc2  preRed  previousCost  previousFP  qrRankingThreshold  r  ratio  s  sPar  sum  sum2  threshold  tmp  xK  xNorm  xk  ypk  int  countdown  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3922322702763681	530	530	2	replace	double  dxNorm  =  Math.sqrt(diag[0]  +  sum2);	  double    dxNorm    =    Math.sqrt(diag[0]);    	non-compiled	[CE]  <identifier>  expected	74	None	replace
123	[BUG]  [BUGGY]  double  dxNorm  =  Math.sqrt(diag,  solvedCols);  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      lmPar  =  0;  return;  }    double  sum2;  double  parl  =  0;  if  (rank  ==  solvedCols)  {      [BUGGY]  double  dxNorm  =  Math.sqrt(diag,  solvedCols);  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  work1[pj]  *=  diag[pj]  /  dxNorm;  }  sum2  =  0;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  double  sum  =  0;  for  (int  i  =  0;  i  <  j;  ++i)  {  sum  +=  jacobian[i][pj]  *  work1[permutation[i]];  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  determineLMParameter  [RETURN_TYPE]  void  double[]  qy  double  delta  double[]  diag  double[]  work1  double[]  work2  double[]  work3  [VARIABLES]  int[]  permutation  boolean  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  qy  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  correction  costRelativeTolerance  delta  dirDer  dirJ  dk  dxNorm  fp  gNorm  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  parl  paru  pc2  preRed  previousCost  previousFP  qrRankingThreshold  r  ratio  s  sPar  sum  sum2  threshold  tmp  xK  xNorm  xk  ypk  int  countdown  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3922322702763681	530	530	2	replace	double  dxNorm  =  Math.sqrt(diag,  solvedCols);	  double    dxNorm    =    Math.sqrt(diag,    solveCols);    	non-compiled	[CE]  <identifier>  expected	26	None	replace
124	[BUG]  [BUGGY]  For(int  j  =  0;  j  <  diag.length;  ++j)  {  [CE]  '.class'  expected  [FE]            AssertionFailedError      [CONTEXT]      lmPar  =  0;  return;  }    double  sum2;  double  parl  =  0;  if  (rank  ==  solvedCols)  {      [BUGGY]  For(int  j  =  0;  j  <  diag.length;  ++j)  {  [BUGGY]      int  pj  =  permutation[j];  work1[pj]  *=  diag[pj]  /  dxNorm;  }  sum2  =  0;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  double  sum  =  0;  for  (int  i  =  0;  i  <  j;  ++i)  {  sum  +=  jacobian[i][pj]  *  work1[permutation[i]];  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  determineLMParameter  [RETURN_TYPE]  void  double[]  qy  double  delta  double[]  diag  double[]  work1  double[]  work2  double[]  work3  [VARIABLES]  int[]  permutation  boolean  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  qy  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  correction  costRelativeTolerance  delta  dirDer  dirJ  dk  dxNorm  fp  gNorm  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  parl  paru  pc2  preRed  previousCost  previousFP  qrRankingThreshold  r  ratio  s  sPar  sum  sum2  threshold  tmp  xK  xNorm  xk  ypk  int  countdown  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3922322702763681	530	530	2	replace	For(int  j  =  0;  j  <  diag.length;  ++j)  {	  for(int    j    =    0;    j    <    diag.length;    ++j)    {    For(int    j    =    0;    j    <    diag.length;    ++j)    {    	non-compiled	[CE]  '.class'  expected	3	None	replace
125	[BUG]  [BUGGY]  int  permutation[j]  =  Math.abs(work1[j]  *  dxNorm);  [CE]  ']'  expected  [FE]                    AssertionFailedError      [CONTEXT]      lmPar  =  0;  return;  }    double  sum2;  double  parl  =  0;  if  (rank  ==  solvedCols)  {      [BUGGY]  int  permutation[j]  =  Math.abs(work1[j]  *  dxNorm);  [BUGGY]      int  pj  =  permutation[j];  work1[pj]  *=  diag[pj]  /  dxNorm;  }  sum2  =  0;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  double  sum  =  0;  for  (int  i  =  0;  i  <  j;  ++i)  {  sum  +=  jacobian[i][pj]  *  work1[permutation[i]];  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  determineLMParameter  [RETURN_TYPE]  void  double[]  qy  double  delta  double[]  diag  double[]  work1  double[]  work2  double[]  work3  [VARIABLES]  int[]  permutation  boolean  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  qy  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  correction  costRelativeTolerance  delta  dirDer  dirJ  dk  dxNorm  fp  gNorm  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  parl  paru  pc2  preRed  previousCost  previousFP  qrRankingThreshold  r  ratio  s  sPar  sum  sum2  threshold  tmp  xK  xNorm  xk  ypk  int  countdown  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3922322702763681	530	530	2	replace	int  permutation[j]  =  Math.abs(work1[j]  *  dxNorm);	  int    permutation[j]    =    Math.abs(work1[j]    /    dxNorm);    	non-compiled	[CE]  ']'  expected	45	None	replace
126	[BUG]  [BUGGY]  int  permutation[j]  =  Math.abs(diag[j]  /  dxNorm);  [CE]  ']'  expected  [FE]                      AssertionFailedError      [CONTEXT]      lmPar  =  0;  return;  }    double  sum2;  double  parl  =  0;  if  (rank  ==  solvedCols)  {      [BUGGY]  int  permutation[j]  =  Math.abs(diag[j]  /  dxNorm);  [BUGGY]      int  pj  =  permutation[j];  work1[pj]  *=  diag[pj]  /  dxNorm;  }  sum2  =  0;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  double  sum  =  0;  for  (int  i  =  0;  i  <  j;  ++i)  {  sum  +=  jacobian[i][pj]  *  work1[permutation[i]];  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  determineLMParameter  [RETURN_TYPE]  void  double[]  qy  double  delta  double[]  diag  double[]  work1  double[]  work2  double[]  work3  [VARIABLES]  int[]  permutation  boolean  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  qy  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  correction  costRelativeTolerance  delta  dirDer  dirJ  dk  dxNorm  fp  gNorm  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  parl  paru  pc2  preRed  previousCost  previousFP  qrRankingThreshold  r  ratio  s  sPar  sum  sum2  threshold  tmp  xK  xNorm  xk  ypk  int  countdown  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3922322702763681	530	530	2	replace	int  permutation[j]  =  Math.abs(diag[j]  /  dxNorm);	  int    permutation[j]    =    Math.abs(work1[j]    /    dxNorm);    	non-compiled	[CE]  ']'  expected	45	None	replace
127	[BUG]  [BUGGY]  int  permutation[j]  =  Math.abs(work1[pj]  /  dxNorm);  [CE]  ']'  expected  [FE]                        AssertionFailedError      [CONTEXT]      lmPar  =  0;  return;  }    double  sum2;  double  parl  =  0;  if  (rank  ==  solvedCols)  {      [BUGGY]  int  permutation[j]  =  Math.abs(work1[pj]  /  dxNorm);  [BUGGY]      int  pj  =  permutation[j];  work1[pj]  *=  diag[pj]  /  dxNorm;  }  sum2  =  0;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  double  sum  =  0;  for  (int  i  =  0;  i  <  j;  ++i)  {  sum  +=  jacobian[i][pj]  *  work1[permutation[i]];  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  determineLMParameter  [RETURN_TYPE]  void  double[]  qy  double  delta  double[]  diag  double[]  work1  double[]  work2  double[]  work3  [VARIABLES]  int[]  permutation  boolean  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  qy  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  correction  costRelativeTolerance  delta  dirDer  dirJ  dk  dxNorm  fp  gNorm  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  parl  paru  pc2  preRed  previousCost  previousFP  qrRankingThreshold  r  ratio  s  sPar  sum  sum2  threshold  tmp  xK  xNorm  xk  ypk  int  countdown  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3922322702763681	530	530	2	replace	int  permutation[j]  =  Math.abs(work1[pj]  /  dxNorm);	  int    permutation[j]    =    Math.abs(work1[j]    /    dxNorm);    	non-compiled	[CE]  ']'  expected	45	None	replace
128	[BUG]  [BUGGY]  int  permutation[j]  =  Math.abs(work1[0]  /  dxNorm);  [CE]  ']'  expected  [FE]                          AssertionFailedError      [CONTEXT]      lmPar  =  0;  return;  }    double  sum2;  double  parl  =  0;  if  (rank  ==  solvedCols)  {      [BUGGY]  int  permutation[j]  =  Math.abs(work1[0]  /  dxNorm);  [BUGGY]      int  pj  =  permutation[j];  work1[pj]  *=  diag[pj]  /  dxNorm;  }  sum2  =  0;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  double  sum  =  0;  for  (int  i  =  0;  i  <  j;  ++i)  {  sum  +=  jacobian[i][pj]  *  work1[permutation[i]];  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  determineLMParameter  [RETURN_TYPE]  void  double[]  qy  double  delta  double[]  diag  double[]  work1  double[]  work2  double[]  work3  [VARIABLES]  int[]  permutation  boolean  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  qy  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  correction  costRelativeTolerance  delta  dirDer  dirJ  dk  dxNorm  fp  gNorm  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  parl  paru  pc2  preRed  previousCost  previousFP  qrRankingThreshold  r  ratio  s  sPar  sum  sum2  threshold  tmp  xK  xNorm  xk  ypk  int  countdown  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3922322702763681	530	530	2	replace	int  permutation[j]  =  Math.abs(work1[0]  /  dxNorm);	  int    permutation[j]    =    Math.abs(work1[j]    /    dxNorm);    	non-compiled	[CE]  ']'  expected	45	None	replace
129	[BUG]  [BUGGY]  double  dxNorm  =  Math.sqrt(random,  sum2);  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      lmPar  =  0;  return;  }    double  sum2;  double  parl  =  0;  if  (rank  ==  solvedCols)  {      [BUGGY]  double  dxNorm  =  Math.sqrt(random,  sum2);  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  work1[pj]  *=  diag[pj]  /  dxNorm;  }  sum2  =  0;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  double  sum  =  0;  for  (int  i  =  0;  i  <  j;  ++i)  {  sum  +=  jacobian[i][pj]  *  work1[permutation[i]];  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  determineLMParameter  [RETURN_TYPE]  void  double[]  qy  double  delta  double[]  diag  double[]  work1  double[]  work2  double[]  work3  [VARIABLES]  int[]  permutation  boolean  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  qy  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  correction  costRelativeTolerance  delta  dirDer  dirJ  dk  dxNorm  fp  gNorm  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  parl  paru  pc2  preRed  previousCost  previousFP  qrRankingThreshold  r  ratio  s  sPar  sum  sum2  threshold  tmp  xK  xNorm  xk  ypk  int  countdown  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3922322702763681	530	530	2	replace	double  dxNorm  =  Math.sqrt(random,  sum2);	  double    dxNorm    =    Math.sqrt(random,    solveCols);    	non-compiled	[CE]  <identifier>  expected	27	None	replace
130	[BUG]  [BUGGY]  double  dxNorm  =  Math.sqrt(random,  solvedCols);  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      lmPar  =  0;  return;  }    double  sum2;  double  parl  =  0;  if  (rank  ==  solvedCols)  {      [BUGGY]  double  dxNorm  =  Math.sqrt(random,  solvedCols);  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  work1[pj]  *=  diag[pj]  /  dxNorm;  }  sum2  =  0;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  double  sum  =  0;  for  (int  i  =  0;  i  <  j;  ++i)  {  sum  +=  jacobian[i][pj]  *  work1[permutation[i]];  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  determineLMParameter  [RETURN_TYPE]  void  double[]  qy  double  delta  double[]  diag  double[]  work1  double[]  work2  double[]  work3  [VARIABLES]  int[]  permutation  boolean  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  qy  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  correction  costRelativeTolerance  delta  dirDer  dirJ  dk  dxNorm  fp  gNorm  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  parl  paru  pc2  preRed  previousCost  previousFP  qrRankingThreshold  r  ratio  s  sPar  sum  sum2  threshold  tmp  xK  xNorm  xk  ypk  int  countdown  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3922322702763681	530	530	2	replace	double  dxNorm  =  Math.sqrt(random,  solvedCols);	  double    dxNorm    =    Math.sqrt(random,    solveCols);    	non-compiled	[CE]  <identifier>  expected	27	None	replace
131	[BUG]  [BUGGY]  double  dxNorm  =  Math.sqrt(random,  parl);  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      lmPar  =  0;  return;  }    double  sum2;  double  parl  =  0;  if  (rank  ==  solvedCols)  {      [BUGGY]  double  dxNorm  =  Math.sqrt(random,  parl);  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  work1[pj]  *=  diag[pj]  /  dxNorm;  }  sum2  =  0;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  double  sum  =  0;  for  (int  i  =  0;  i  <  j;  ++i)  {  sum  +=  jacobian[i][pj]  *  work1[permutation[i]];  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  determineLMParameter  [RETURN_TYPE]  void  double[]  qy  double  delta  double[]  diag  double[]  work1  double[]  work2  double[]  work3  [VARIABLES]  int[]  permutation  boolean  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  qy  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  correction  costRelativeTolerance  delta  dirDer  dirJ  dk  dxNorm  fp  gNorm  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  parl  paru  pc2  preRed  previousCost  previousFP  qrRankingThreshold  r  ratio  s  sPar  sum  sum2  threshold  tmp  xK  xNorm  xk  ypk  int  countdown  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3922322702763681	530	530	2	replace	double  dxNorm  =  Math.sqrt(random,  parl);	  double    dxNorm    =    Math.sqrt(random,    solveCols);    	non-compiled	[CE]  <identifier>  expected	27	None	replace
132	[BUG]  [BUGGY]  double  dxNorm  =  Math.sqrt(random,  solveCols,  sum2);  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      lmPar  =  0;  return;  }    double  sum2;  double  parl  =  0;  if  (rank  ==  solvedCols)  {      [BUGGY]  double  dxNorm  =  Math.sqrt(random,  solveCols,  sum2);  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  work1[pj]  *=  diag[pj]  /  dxNorm;  }  sum2  =  0;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  double  sum  =  0;  for  (int  i  =  0;  i  <  j;  ++i)  {  sum  +=  jacobian[i][pj]  *  work1[permutation[i]];  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  determineLMParameter  [RETURN_TYPE]  void  double[]  qy  double  delta  double[]  diag  double[]  work1  double[]  work2  double[]  work3  [VARIABLES]  int[]  permutation  boolean  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  qy  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  correction  costRelativeTolerance  delta  dirDer  dirJ  dk  dxNorm  fp  gNorm  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  parl  paru  pc2  preRed  previousCost  previousFP  qrRankingThreshold  r  ratio  s  sPar  sum  sum2  threshold  tmp  xK  xNorm  xk  ypk  int  countdown  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3922322702763681	530	530	2	replace	double  dxNorm  =  Math.sqrt(random,  solveCols,  sum2);	  double    dxNorm    =    Math.sqrt(random,    solveCols);    	non-compiled	[CE]  <identifier>  expected	27	None	replace
133	[BUG]  [BUGGY]  int  permutation[j]  =  work1[j]  *  dxNorm;  [CE]  ']'  expected  [FE]                AssertionFailedError      [CONTEXT]      lmPar  =  0;  return;  }    double  sum2;  double  parl  =  0;  if  (rank  ==  solvedCols)  {      [BUGGY]  int  permutation[j]  =  work1[j]  *  dxNorm;  [BUGGY]      int  pj  =  permutation[j];  work1[pj]  *=  diag[pj]  /  dxNorm;  }  sum2  =  0;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  double  sum  =  0;  for  (int  i  =  0;  i  <  j;  ++i)  {  sum  +=  jacobian[i][pj]  *  work1[permutation[i]];  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  determineLMParameter  [RETURN_TYPE]  void  double[]  qy  double  delta  double[]  diag  double[]  work1  double[]  work2  double[]  work3  [VARIABLES]  int[]  permutation  boolean  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  qy  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  correction  costRelativeTolerance  delta  dirDer  dirJ  dk  dxNorm  fp  gNorm  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  parl  paru  pc2  preRed  previousCost  previousFP  qrRankingThreshold  r  ratio  s  sPar  sum  sum2  threshold  tmp  xK  xNorm  xk  ypk  int  countdown  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3922322702763681	530	530	2	replace	int  permutation[j]  =  work1[j]  *  dxNorm;	  int    permutation[j]    =    work1[j]    /    dxNorm;    	non-compiled	[CE]  ']'  expected	43	None	replace
134	[BUG]  [BUGGY]  int  permutation[j]  =  work2[j]  /  dxNorm;  [CE]  ']'  expected  [FE]                  AssertionFailedError      [CONTEXT]      lmPar  =  0;  return;  }    double  sum2;  double  parl  =  0;  if  (rank  ==  solvedCols)  {      [BUGGY]  int  permutation[j]  =  work2[j]  /  dxNorm;  [BUGGY]      int  pj  =  permutation[j];  work1[pj]  *=  diag[pj]  /  dxNorm;  }  sum2  =  0;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  double  sum  =  0;  for  (int  i  =  0;  i  <  j;  ++i)  {  sum  +=  jacobian[i][pj]  *  work1[permutation[i]];  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  determineLMParameter  [RETURN_TYPE]  void  double[]  qy  double  delta  double[]  diag  double[]  work1  double[]  work2  double[]  work3  [VARIABLES]  int[]  permutation  boolean  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  qy  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  correction  costRelativeTolerance  delta  dirDer  dirJ  dk  dxNorm  fp  gNorm  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  parl  paru  pc2  preRed  previousCost  previousFP  qrRankingThreshold  r  ratio  s  sPar  sum  sum2  threshold  tmp  xK  xNorm  xk  ypk  int  countdown  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3922322702763681	530	530	2	replace	int  permutation[j]  =  work2[j]  /  dxNorm;	  int    permutation[j]    =    work1[j]    /    dxNorm;    	non-compiled	[CE]  ']'  expected	43	None	replace
135	[BUG]  [BUGGY]  int  permutation[j]  =  work1[j]  /  dxNorm  +  1;  [CE]  ']'  expected  [FE]                    AssertionFailedError      [CONTEXT]      lmPar  =  0;  return;  }    double  sum2;  double  parl  =  0;  if  (rank  ==  solvedCols)  {      [BUGGY]  int  permutation[j]  =  work1[j]  /  dxNorm  +  1;  [BUGGY]      int  pj  =  permutation[j];  work1[pj]  *=  diag[pj]  /  dxNorm;  }  sum2  =  0;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  double  sum  =  0;  for  (int  i  =  0;  i  <  j;  ++i)  {  sum  +=  jacobian[i][pj]  *  work1[permutation[i]];  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  determineLMParameter  [RETURN_TYPE]  void  double[]  qy  double  delta  double[]  diag  double[]  work1  double[]  work2  double[]  work3  [VARIABLES]  int[]  permutation  boolean  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  qy  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  correction  costRelativeTolerance  delta  dirDer  dirJ  dk  dxNorm  fp  gNorm  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  parl  paru  pc2  preRed  previousCost  previousFP  qrRankingThreshold  r  ratio  s  sPar  sum  sum2  threshold  tmp  xK  xNorm  xk  ypk  int  countdown  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3922322702763681	530	530	2	replace	int  permutation[j]  =  work1[j]  /  dxNorm  +  1;	  int    permutation[j]    =    work1[j]    /    dxNorm;    	non-compiled	[CE]  ']'  expected	43	None	replace
136	[BUG]  [BUGGY]  int  permutation[j]  =  work1.length  /  dxNorm;  [CE]  ']'  expected  [FE]                      AssertionFailedError      [CONTEXT]      lmPar  =  0;  return;  }    double  sum2;  double  parl  =  0;  if  (rank  ==  solvedCols)  {      [BUGGY]  int  permutation[j]  =  work1.length  /  dxNorm;  [BUGGY]      int  pj  =  permutation[j];  work1[pj]  *=  diag[pj]  /  dxNorm;  }  sum2  =  0;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  double  sum  =  0;  for  (int  i  =  0;  i  <  j;  ++i)  {  sum  +=  jacobian[i][pj]  *  work1[permutation[i]];  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  determineLMParameter  [RETURN_TYPE]  void  double[]  qy  double  delta  double[]  diag  double[]  work1  double[]  work2  double[]  work3  [VARIABLES]  int[]  permutation  boolean  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  qy  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  correction  costRelativeTolerance  delta  dirDer  dirJ  dk  dxNorm  fp  gNorm  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  parl  paru  pc2  preRed  previousCost  previousFP  qrRankingThreshold  r  ratio  s  sPar  sum  sum2  threshold  tmp  xK  xNorm  xk  ypk  int  countdown  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3922322702763681	530	530	2	replace	int  permutation[j]  =  work1.length  /  dxNorm;	  int    permutation[j]    =    work1[j]    /    dxNorm;    	non-compiled	[CE]  ']'  expected	43	None	replace
137	[BUG]  [BUGGY]  int  solvedCols  =  Math.min(rank,  lmPar);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      lmPar  =  0;  return;  }    double  sum2;  double  parl  =  0;  if  (rank  ==  solvedCols)  {      [BUGGY]  int  solvedCols  =  Math.min(rank,  lmPar);  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  work1[pj]  *=  diag[pj]  /  dxNorm;  }  sum2  =  0;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  double  sum  =  0;  for  (int  i  =  0;  i  <  j;  ++i)  {  sum  +=  jacobian[i][pj]  *  work1[permutation[i]];  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  determineLMParameter  [RETURN_TYPE]  void  double[]  qy  double  delta  double[]  diag  double[]  work1  double[]  work2  double[]  work3  [VARIABLES]  int[]  permutation  boolean  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  qy  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  correction  costRelativeTolerance  delta  dirDer  dirJ  dk  dxNorm  fp  gNorm  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  parl  paru  pc2  preRed  previousCost  previousFP  qrRankingThreshold  r  ratio  s  sPar  sum  sum2  threshold  tmp  xK  xNorm  xk  ypk  int  countdown  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3922322702763681	530	530	2	replace	int  solvedCols  =  Math.min(rank,  lmPar);	  int    solvedCols    =    Math.min(resolvedCols,    lmPar);    	non-compiled	[CE]  <identifier>  expected	31	None	replace
138	[BUG]  [BUGGY]  int  solvedCols  =  Math.min(parl,  lmPar);  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      lmPar  =  0;  return;  }    double  sum2;  double  parl  =  0;  if  (rank  ==  solvedCols)  {      [BUGGY]  int  solvedCols  =  Math.min(parl,  lmPar);  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  work1[pj]  *=  diag[pj]  /  dxNorm;  }  sum2  =  0;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  double  sum  =  0;  for  (int  i  =  0;  i  <  j;  ++i)  {  sum  +=  jacobian[i][pj]  *  work1[permutation[i]];  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  determineLMParameter  [RETURN_TYPE]  void  double[]  qy  double  delta  double[]  diag  double[]  work1  double[]  work2  double[]  work3  [VARIABLES]  int[]  permutation  boolean  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  qy  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  correction  costRelativeTolerance  delta  dirDer  dirJ  dk  dxNorm  fp  gNorm  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  parl  paru  pc2  preRed  previousCost  previousFP  qrRankingThreshold  r  ratio  s  sPar  sum  sum2  threshold  tmp  xK  xNorm  xk  ypk  int  countdown  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3922322702763681	530	530	2	replace	int  solvedCols  =  Math.min(parl,  lmPar);	  int    solvedCols    =    Math.min(resolvedCols,    lmPar);    	non-compiled	[CE]  <identifier>  expected	31	None	replace
139	[BUG]  [BUGGY]  double  dxNorm  =  Math.abs(solvedCols);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      lmPar  =  0;  return;  }    double  sum2;  double  parl  =  0;  if  (rank  ==  solvedCols)  {      [BUGGY]  double  dxNorm  =  Math.abs(solvedCols);  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  work1[pj]  *=  diag[pj]  /  dxNorm;  }  sum2  =  0;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  double  sum  =  0;  for  (int  i  =  0;  i  <  j;  ++i)  {  sum  +=  jacobian[i][pj]  *  work1[permutation[i]];  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  determineLMParameter  [RETURN_TYPE]  void  double[]  qy  double  delta  double[]  diag  double[]  work1  double[]  work2  double[]  work3  [VARIABLES]  int[]  permutation  boolean  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  qy  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  correction  costRelativeTolerance  delta  dirDer  dirJ  dk  dxNorm  fp  gNorm  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  parl  paru  pc2  preRed  previousCost  previousFP  qrRankingThreshold  r  ratio  s  sPar  sum  sum2  threshold  tmp  xK  xNorm  xk  ypk  int  countdown  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3922322702763681	530	530	2	replace	double  dxNorm  =  Math.abs(solvedCols);	  double    dxNorm    =    Math.abs(rank);    	non-compiled	[CE]  <identifier>  expected	65	None	replace
140	[BUG]  [BUGGY]  double  dxNorm  =  Math.abs(parl);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      lmPar  =  0;  return;  }    double  sum2;  double  parl  =  0;  if  (rank  ==  solvedCols)  {      [BUGGY]  double  dxNorm  =  Math.abs(parl);  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  work1[pj]  *=  diag[pj]  /  dxNorm;  }  sum2  =  0;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  double  sum  =  0;  for  (int  i  =  0;  i  <  j;  ++i)  {  sum  +=  jacobian[i][pj]  *  work1[permutation[i]];  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  determineLMParameter  [RETURN_TYPE]  void  double[]  qy  double  delta  double[]  diag  double[]  work1  double[]  work2  double[]  work3  [VARIABLES]  int[]  permutation  boolean  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  qy  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  correction  costRelativeTolerance  delta  dirDer  dirJ  dk  dxNorm  fp  gNorm  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  parl  paru  pc2  preRed  previousCost  previousFP  qrRankingThreshold  r  ratio  s  sPar  sum  sum2  threshold  tmp  xK  xNorm  xk  ypk  int  countdown  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3922322702763681	530	530	2	replace	double  dxNorm  =  Math.abs(parl);	  double    dxNorm    =    Math.abs(rank);    	non-compiled	[CE]  <identifier>  expected	65	None	replace
141	[BUG]  [BUGGY]  double  dxNorm  =  Math.abs(sum2);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      lmPar  =  0;  return;  }    double  sum2;  double  parl  =  0;  if  (rank  ==  solvedCols)  {      [BUGGY]  double  dxNorm  =  Math.abs(sum2);  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  work1[pj]  *=  diag[pj]  /  dxNorm;  }  sum2  =  0;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  double  sum  =  0;  for  (int  i  =  0;  i  <  j;  ++i)  {  sum  +=  jacobian[i][pj]  *  work1[permutation[i]];  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  determineLMParameter  [RETURN_TYPE]  void  double[]  qy  double  delta  double[]  diag  double[]  work1  double[]  work2  double[]  work3  [VARIABLES]  int[]  permutation  boolean  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  qy  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  correction  costRelativeTolerance  delta  dirDer  dirJ  dk  dxNorm  fp  gNorm  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  parl  paru  pc2  preRed  previousCost  previousFP  qrRankingThreshold  r  ratio  s  sPar  sum  sum2  threshold  tmp  xK  xNorm  xk  ypk  int  countdown  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3922322702763681	530	530	2	replace	double  dxNorm  =  Math.abs(sum2);	  double    dxNorm    =    Math.abs(rank);    	non-compiled	[CE]  <identifier>  expected	65	None	replace
142	[BUG]  [BUGGY]  double  dxNorm  =  Math.abs(diagNorm);  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      lmPar  =  0;  return;  }    double  sum2;  double  parl  =  0;  if  (rank  ==  solvedCols)  {      [BUGGY]  double  dxNorm  =  Math.abs(diagNorm);  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  work1[pj]  *=  diag[pj]  /  dxNorm;  }  sum2  =  0;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  double  sum  =  0;  for  (int  i  =  0;  i  <  j;  ++i)  {  sum  +=  jacobian[i][pj]  *  work1[permutation[i]];  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  determineLMParameter  [RETURN_TYPE]  void  double[]  qy  double  delta  double[]  diag  double[]  work1  double[]  work2  double[]  work3  [VARIABLES]  int[]  permutation  boolean  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  qy  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  correction  costRelativeTolerance  delta  dirDer  dirJ  dk  dxNorm  fp  gNorm  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  parl  paru  pc2  preRed  previousCost  previousFP  qrRankingThreshold  r  ratio  s  sPar  sum  sum2  threshold  tmp  xK  xNorm  xk  ypk  int  countdown  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3922322702763681	530	530	2	replace	double  dxNorm  =  Math.abs(diagNorm);	  double    dxNorm    =    Math.abs(rank);    	non-compiled	[CE]  <identifier>  expected	65	None	replace
143	[BUG]  [BUGGY]  double  dxNorm  =  Math.abs(solvedCols  /  ratio);  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      lmPar  =  0;  return;  }    double  sum2;  double  parl  =  0;  if  (rank  ==  solvedCols)  {      [BUGGY]  double  dxNorm  =  Math.abs(solvedCols  /  ratio);  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  work1[pj]  *=  diag[pj]  /  dxNorm;  }  sum2  =  0;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  double  sum  =  0;  for  (int  i  =  0;  i  <  j;  ++i)  {  sum  +=  jacobian[i][pj]  *  work1[permutation[i]];  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  determineLMParameter  [RETURN_TYPE]  void  double[]  qy  double  delta  double[]  diag  double[]  work1  double[]  work2  double[]  work3  [VARIABLES]  int[]  permutation  boolean  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  qy  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  correction  costRelativeTolerance  delta  dirDer  dirJ  dk  dxNorm  fp  gNorm  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  parl  paru  pc2  preRed  previousCost  previousFP  qrRankingThreshold  r  ratio  s  sPar  sum  sum2  threshold  tmp  xK  xNorm  xk  ypk  int  countdown  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3922322702763681	530	530	2	replace	double  dxNorm  =  Math.abs(solvedCols  /  ratio);	  double    dxNorm    =    Math.abs(solvedCols    -    ratio);    	non-compiled	[CE]  <identifier>  expected	56	None	replace
144	[BUG]  [BUGGY]  float  solvedCols  =  Math.max(solvedCols,  parl);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      lmPar  =  0;  return;  }    double  sum2;  double  parl  =  0;  if  (rank  ==  solvedCols)  {      [BUGGY]  float  solvedCols  =  Math.max(solvedCols,  parl);  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  work1[pj]  *=  diag[pj]  /  dxNorm;  }  sum2  =  0;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  double  sum  =  0;  for  (int  i  =  0;  i  <  j;  ++i)  {  sum  +=  jacobian[i][pj]  *  work1[permutation[i]];  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  determineLMParameter  [RETURN_TYPE]  void  double[]  qy  double  delta  double[]  diag  double[]  work1  double[]  work2  double[]  work3  [VARIABLES]  int[]  permutation  boolean  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  qy  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  correction  costRelativeTolerance  delta  dirDer  dirJ  dk  dxNorm  fp  gNorm  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  parl  paru  pc2  preRed  previousCost  previousFP  qrRankingThreshold  r  ratio  s  sPar  sum  sum2  threshold  tmp  xK  xNorm  xk  ypk  int  countdown  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3922322702763681	530	530	2	replace	float  solvedCols  =  Math.max(solvedCols,  parl);	  float    solvedCols    =    Math.min(solvedCols,    parl);    	non-compiled	[CE]  <identifier>  expected	41	None	replace
145	[BUG]  [BUGGY]  int  solvedCols  =  Math.min(solvedCols,  sum2  +  1);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      lmPar  =  0;  return;  }    double  sum2;  double  parl  =  0;  if  (rank  ==  solvedCols)  {      [BUGGY]  int  solvedCols  =  Math.min(solvedCols,  sum2  +  1);  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  work1[pj]  *=  diag[pj]  /  dxNorm;  }  sum2  =  0;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  double  sum  =  0;  for  (int  i  =  0;  i  <  j;  ++i)  {  sum  +=  jacobian[i][pj]  *  work1[permutation[i]];  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  determineLMParameter  [RETURN_TYPE]  void  double[]  qy  double  delta  double[]  diag  double[]  work1  double[]  work2  double[]  work3  [VARIABLES]  int[]  permutation  boolean  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  qy  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  correction  costRelativeTolerance  delta  dirDer  dirJ  dk  dxNorm  fp  gNorm  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  parl  paru  pc2  preRed  previousCost  previousFP  qrRankingThreshold  r  ratio  s  sPar  sum  sum2  threshold  tmp  xK  xNorm  xk  ypk  int  countdown  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3922322702763681	530	530	2	replace	int  solvedCols  =  Math.min(solvedCols,  sum2  +  1);	  int    solvedCols    =    Math.min(solvedCols,    parl    +    1);    	non-compiled	[CE]  <identifier>  expected	71	None	replace
146	[BUG]  [BUGGY]  int  solvedCols  =  Math.min(solvedCols,  lmPar  +  1);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      lmPar  =  0;  return;  }    double  sum2;  double  parl  =  0;  if  (rank  ==  solvedCols)  {      [BUGGY]  int  solvedCols  =  Math.min(solvedCols,  lmPar  +  1);  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  work1[pj]  *=  diag[pj]  /  dxNorm;  }  sum2  =  0;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  double  sum  =  0;  for  (int  i  =  0;  i  <  j;  ++i)  {  sum  +=  jacobian[i][pj]  *  work1[permutation[i]];  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  determineLMParameter  [RETURN_TYPE]  void  double[]  qy  double  delta  double[]  diag  double[]  work1  double[]  work2  double[]  work3  [VARIABLES]  int[]  permutation  boolean  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  qy  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  correction  costRelativeTolerance  delta  dirDer  dirJ  dk  dxNorm  fp  gNorm  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  parl  paru  pc2  preRed  previousCost  previousFP  qrRankingThreshold  r  ratio  s  sPar  sum  sum2  threshold  tmp  xK  xNorm  xk  ypk  int  countdown  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3922322702763681	530	530	2	replace	int  solvedCols  =  Math.min(solvedCols,  lmPar  +  1);	  int    solvedCols    =    Math.min(solvedCols,    parl    +    1);    	non-compiled	[CE]  <identifier>  expected	71	None	replace
147	[BUG]  [BUGGY]  int  solvedCols  =  Math.max(solvedCols,  parl  +  1);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      lmPar  =  0;  return;  }    double  sum2;  double  parl  =  0;  if  (rank  ==  solvedCols)  {      [BUGGY]  int  solvedCols  =  Math.max(solvedCols,  parl  +  1);  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  work1[pj]  *=  diag[pj]  /  dxNorm;  }  sum2  =  0;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  double  sum  =  0;  for  (int  i  =  0;  i  <  j;  ++i)  {  sum  +=  jacobian[i][pj]  *  work1[permutation[i]];  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  determineLMParameter  [RETURN_TYPE]  void  double[]  qy  double  delta  double[]  diag  double[]  work1  double[]  work2  double[]  work3  [VARIABLES]  int[]  permutation  boolean  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  qy  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  correction  costRelativeTolerance  delta  dirDer  dirJ  dk  dxNorm  fp  gNorm  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  parl  paru  pc2  preRed  previousCost  previousFP  qrRankingThreshold  r  ratio  s  sPar  sum  sum2  threshold  tmp  xK  xNorm  xk  ypk  int  countdown  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3922322702763681	530	530	2	replace	int  solvedCols  =  Math.max(solvedCols,  parl  +  1);	  int    solvedCols    =    Math.min(solvedCols,    parl    +    1);    	non-compiled	[CE]  <identifier>  expected	71	None	replace
148	[BUG]  [BUGGY]  int  solvedCols  =  Math.min(solvedCols,  lmPar  -  1);  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      lmPar  =  0;  return;  }    double  sum2;  double  parl  =  0;  if  (rank  ==  solvedCols)  {      [BUGGY]  int  solvedCols  =  Math.min(solvedCols,  lmPar  -  1);  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  work1[pj]  *=  diag[pj]  /  dxNorm;  }  sum2  =  0;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  double  sum  =  0;  for  (int  i  =  0;  i  <  j;  ++i)  {  sum  +=  jacobian[i][pj]  *  work1[permutation[i]];  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  determineLMParameter  [RETURN_TYPE]  void  double[]  qy  double  delta  double[]  diag  double[]  work1  double[]  work2  double[]  work3  [VARIABLES]  int[]  permutation  boolean  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  qy  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  correction  costRelativeTolerance  delta  dirDer  dirJ  dk  dxNorm  fp  gNorm  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  parl  paru  pc2  preRed  previousCost  previousFP  qrRankingThreshold  r  ratio  s  sPar  sum  sum2  threshold  tmp  xK  xNorm  xk  ypk  int  countdown  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3922322702763681	530	530	2	replace	int  solvedCols  =  Math.min(solvedCols,  lmPar  -  1);	  int    solvedCols    =    Math.min(solvedCols,    parl    -    1);    	non-compiled	[CE]  <identifier>  expected	70	None	replace
149	[BUG]  [BUGGY]  double  dxNorm  =  Math.log(parl);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      lmPar  =  0;  return;  }    double  sum2;  double  parl  =  0;  if  (rank  ==  solvedCols)  {      [BUGGY]  double  dxNorm  =  Math.log(parl);  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  work1[pj]  *=  diag[pj]  /  dxNorm;  }  sum2  =  0;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  double  sum  =  0;  for  (int  i  =  0;  i  <  j;  ++i)  {  sum  +=  jacobian[i][pj]  *  work1[permutation[i]];  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  determineLMParameter  [RETURN_TYPE]  void  double[]  qy  double  delta  double[]  diag  double[]  work1  double[]  work2  double[]  work3  [VARIABLES]  int[]  permutation  boolean  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  qy  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  correction  costRelativeTolerance  delta  dirDer  dirJ  dk  dxNorm  fp  gNorm  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  parl  paru  pc2  preRed  previousCost  previousFP  qrRankingThreshold  r  ratio  s  sPar  sum  sum2  threshold  tmp  xK  xNorm  xk  ypk  int  countdown  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3922322702763681	530	530	2	replace	double  dxNorm  =  Math.log(parl);	  double    dxNorm    =    Math.log(rank);    	non-compiled	[CE]  <identifier>  expected	23	None	replace
150	[BUG]  [BUGGY]  double  dxNorm  =  Math.log(diag);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      lmPar  =  0;  return;  }    double  sum2;  double  parl  =  0;  if  (rank  ==  solvedCols)  {      [BUGGY]  double  dxNorm  =  Math.log(diag);  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  work1[pj]  *=  diag[pj]  /  dxNorm;  }  sum2  =  0;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  double  sum  =  0;  for  (int  i  =  0;  i  <  j;  ++i)  {  sum  +=  jacobian[i][pj]  *  work1[permutation[i]];  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  determineLMParameter  [RETURN_TYPE]  void  double[]  qy  double  delta  double[]  diag  double[]  work1  double[]  work2  double[]  work3  [VARIABLES]  int[]  permutation  boolean  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  qy  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  correction  costRelativeTolerance  delta  dirDer  dirJ  dk  dxNorm  fp  gNorm  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  parl  paru  pc2  preRed  previousCost  previousFP  qrRankingThreshold  r  ratio  s  sPar  sum  sum2  threshold  tmp  xK  xNorm  xk  ypk  int  countdown  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3922322702763681	530	530	2	replace	double  dxNorm  =  Math.log(diag);	  double    dxNorm    =    Math.log(rank);    	non-compiled	[CE]  <identifier>  expected	23	None	replace
151	[BUG]  [BUGGY]  double  dxNorm  =  Math.log(sum2);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      lmPar  =  0;  return;  }    double  sum2;  double  parl  =  0;  if  (rank  ==  solvedCols)  {      [BUGGY]  double  dxNorm  =  Math.log(sum2);  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  work1[pj]  *=  diag[pj]  /  dxNorm;  }  sum2  =  0;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  double  sum  =  0;  for  (int  i  =  0;  i  <  j;  ++i)  {  sum  +=  jacobian[i][pj]  *  work1[permutation[i]];  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  determineLMParameter  [RETURN_TYPE]  void  double[]  qy  double  delta  double[]  diag  double[]  work1  double[]  work2  double[]  work3  [VARIABLES]  int[]  permutation  boolean  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  qy  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  correction  costRelativeTolerance  delta  dirDer  dirJ  dk  dxNorm  fp  gNorm  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  parl  paru  pc2  preRed  previousCost  previousFP  qrRankingThreshold  r  ratio  s  sPar  sum  sum2  threshold  tmp  xK  xNorm  xk  ypk  int  countdown  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3922322702763681	530	530	2	replace	double  dxNorm  =  Math.log(sum2);	  double    dxNorm    =    Math.log(rank);    	non-compiled	[CE]  <identifier>  expected	23	None	replace
152	[BUG]  [BUGGY]  double  permutation[]  =  lmPar.doubleValue();  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      lmPar  =  0;  return;  }    double  sum2;  double  parl  =  0;  if  (rank  ==  solvedCols)  {      [BUGGY]  double  permutation[]  =  lmPar.doubleValue();  [BUGGY]      int  pj  =  permutation[j];  work1[pj]  *=  diag[pj]  /  dxNorm;  }  sum2  =  0;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  double  sum  =  0;  for  (int  i  =  0;  i  <  j;  ++i)  {  sum  +=  jacobian[i][pj]  *  work1[permutation[i]];  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  determineLMParameter  [RETURN_TYPE]  void  double[]  qy  double  delta  double[]  diag  double[]  work1  double[]  work2  double[]  work3  [VARIABLES]  int[]  permutation  boolean  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  qy  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  correction  costRelativeTolerance  delta  dirDer  dirJ  dk  dxNorm  fp  gNorm  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  parl  paru  pc2  preRed  previousCost  previousFP  qrRankingThreshold  r  ratio  s  sPar  sum  sum2  threshold  tmp  xK  xNorm  xk  ypk  int  countdown  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3922322702763681	530	530	2	replace	double  permutation[]  =  lmPar.doubleValue();	  double    permutation[]    =    dxNorm.doubleValue();    	non-compiled	[CE]  <identifier>  expected	42	None	replace
153	[BUG]  [BUGGY]  double  permutation[]  =  parl.doubleValue();  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      lmPar  =  0;  return;  }    double  sum2;  double  parl  =  0;  if  (rank  ==  solvedCols)  {      [BUGGY]  double  permutation[]  =  parl.doubleValue();  [BUGGY]      int  pj  =  permutation[j];  work1[pj]  *=  diag[pj]  /  dxNorm;  }  sum2  =  0;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  double  sum  =  0;  for  (int  i  =  0;  i  <  j;  ++i)  {  sum  +=  jacobian[i][pj]  *  work1[permutation[i]];  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  determineLMParameter  [RETURN_TYPE]  void  double[]  qy  double  delta  double[]  diag  double[]  work1  double[]  work2  double[]  work3  [VARIABLES]  int[]  permutation  boolean  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  qy  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  correction  costRelativeTolerance  delta  dirDer  dirJ  dk  dxNorm  fp  gNorm  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  parl  paru  pc2  preRed  previousCost  previousFP  qrRankingThreshold  r  ratio  s  sPar  sum  sum2  threshold  tmp  xK  xNorm  xk  ypk  int  countdown  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3922322702763681	530	530	2	replace	double  permutation[]  =  parl.doubleValue();	  double    permutation[]    =    dxNorm.doubleValue();    	non-compiled	[CE]  <identifier>  expected	42	None	replace
154	[BUG]  [BUGGY]  double  permutation[]  =  dxNorm.doubleValue()  +  1;  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      lmPar  =  0;  return;  }    double  sum2;  double  parl  =  0;  if  (rank  ==  solvedCols)  {      [BUGGY]  double  permutation[]  =  dxNorm.doubleValue()  +  1;  [BUGGY]      int  pj  =  permutation[j];  work1[pj]  *=  diag[pj]  /  dxNorm;  }  sum2  =  0;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  double  sum  =  0;  for  (int  i  =  0;  i  <  j;  ++i)  {  sum  +=  jacobian[i][pj]  *  work1[permutation[i]];  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  determineLMParameter  [RETURN_TYPE]  void  double[]  qy  double  delta  double[]  diag  double[]  work1  double[]  work2  double[]  work3  [VARIABLES]  int[]  permutation  boolean  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  qy  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  correction  costRelativeTolerance  delta  dirDer  dirJ  dk  dxNorm  fp  gNorm  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  parl  paru  pc2  preRed  previousCost  previousFP  qrRankingThreshold  r  ratio  s  sPar  sum  sum2  threshold  tmp  xK  xNorm  xk  ypk  int  countdown  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3922322702763681	530	530	2	replace	double  permutation[]  =  dxNorm.doubleValue()  +  1;	  double    permutation[]    =    dxNorm.doubleValue();    	non-compiled	[CE]  <identifier>  expected	42	None	replace
155	[BUG]  [BUGGY]  float  solvedCols  =  Math.max(solvedCols,  sum2);  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      lmPar  =  0;  return;  }    double  sum2;  double  parl  =  0;  if  (rank  ==  solvedCols)  {      [BUGGY]  float  solvedCols  =  Math.max(solvedCols,  sum2);  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  work1[pj]  *=  diag[pj]  /  dxNorm;  }  sum2  =  0;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  double  sum  =  0;  for  (int  i  =  0;  i  <  j;  ++i)  {  sum  +=  jacobian[i][pj]  *  work1[permutation[i]];  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  determineLMParameter  [RETURN_TYPE]  void  double[]  qy  double  delta  double[]  diag  double[]  work1  double[]  work2  double[]  work3  [VARIABLES]  int[]  permutation  boolean  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  qy  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  correction  costRelativeTolerance  delta  dirDer  dirJ  dk  dxNorm  fp  gNorm  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  parl  paru  pc2  preRed  previousCost  previousFP  qrRankingThreshold  r  ratio  s  sPar  sum  sum2  threshold  tmp  xK  xNorm  xk  ypk  int  countdown  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3922322702763681	530	530	2	replace	float  solvedCols  =  Math.max(solvedCols,  sum2);	  float    solvedCols    =    Math.min(solvedCols,    sum2);    	non-compiled	[CE]  <identifier>  expected	64	None	replace
156	[BUG]  [BUGGY]  int  solvedCols  =  Math.min(sum2,  parl,  0);  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      lmPar  =  0;  return;  }    double  sum2;  double  parl  =  0;  if  (rank  ==  solvedCols)  {      [BUGGY]  int  solvedCols  =  Math.min(sum2,  parl,  0);  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  work1[pj]  *=  diag[pj]  /  dxNorm;  }  sum2  =  0;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  double  sum  =  0;  for  (int  i  =  0;  i  <  j;  ++i)  {  sum  +=  jacobian[i][pj]  *  work1[permutation[i]];  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  determineLMParameter  [RETURN_TYPE]  void  double[]  qy  double  delta  double[]  diag  double[]  work1  double[]  work2  double[]  work3  [VARIABLES]  int[]  permutation  boolean  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  qy  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  correction  costRelativeTolerance  delta  dirDer  dirJ  dk  dxNorm  fp  gNorm  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  parl  paru  pc2  preRed  previousCost  previousFP  qrRankingThreshold  r  ratio  s  sPar  sum  sum2  threshold  tmp  xK  xNorm  xk  ypk  int  countdown  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3922322702763681	530	530	2	replace	int  solvedCols  =  Math.min(sum2,  parl,  0);	  int    solvedCols    =    Math.min(sum2,    0);    	non-compiled	[CE]  <identifier>  expected	58	None	replace
157	[BUG]  [BUGGY]  double  solvedCols  =  Math.max(sum2,  solvedCols  -  1);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      lmPar  =  0;  return;  }    double  sum2;  double  parl  =  0;  if  (rank  ==  solvedCols)  {      [BUGGY]  double  solvedCols  =  Math.max(sum2,  solvedCols  -  1);  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  work1[pj]  *=  diag[pj]  /  dxNorm;  }  sum2  =  0;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  double  sum  =  0;  for  (int  i  =  0;  i  <  j;  ++i)  {  sum  +=  jacobian[i][pj]  *  work1[permutation[i]];  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  determineLMParameter  [RETURN_TYPE]  void  double[]  qy  double  delta  double[]  diag  double[]  work1  double[]  work2  double[]  work3  [VARIABLES]  int[]  permutation  boolean  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  qy  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  correction  costRelativeTolerance  delta  dirDer  dirJ  dk  dxNorm  fp  gNorm  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  parl  paru  pc2  preRed  previousCost  previousFP  qrRankingThreshold  r  ratio  s  sPar  sum  sum2  threshold  tmp  xK  xNorm  xk  ypk  int  countdown  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3922322702763681	530	530	2	replace	double  solvedCols  =  Math.max(sum2,  solvedCols  -  1);	  double    solvedCols    =    Math.min(sum2,    solvedCols    -    1);    	non-compiled	[CE]  <identifier>  expected	35	None	replace
158	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  work1.length;  ++j)  {  for(int  j  =  0;  j  <  work1.length;  ++j)  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      lmPar  =  0;  return;  }    double  sum2;  double  parl  =  0;  if  (rank  ==  solvedCols)  {      [BUGGY]  for(int  j  =  0;  j  <  work1.length;  ++j)  {  for(int  j  =  0;  j  <  work1.length;  ++j)  {  [BUGGY]      int  pj  =  permutation[j];  work1[pj]  *=  diag[pj]  /  dxNorm;  }  sum2  =  0;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  double  sum  =  0;  for  (int  i  =  0;  i  <  j;  ++i)  {  sum  +=  jacobian[i][pj]  *  work1[permutation[i]];  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  determineLMParameter  [RETURN_TYPE]  void  double[]  qy  double  delta  double[]  diag  double[]  work1  double[]  work2  double[]  work3  [VARIABLES]  int[]  permutation  boolean  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  qy  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  correction  costRelativeTolerance  delta  dirDer  dirJ  dk  dxNorm  fp  gNorm  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  parl  paru  pc2  preRed  previousCost  previousFP  qrRankingThreshold  r  ratio  s  sPar  sum  sum2  threshold  tmp  xK  xNorm  xk  ypk  int  countdown  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3922322702763681	530	530	2	replace	for(int    j    =    0;    j    <    work1.length;    ++j)    {    for(int  j  =  0;  j  <  work1.length;  ++j)  {	  	non-compiled	[CE]  illegal  start  of  expression	54	None	add
159	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  work1.length;  ++j)  {  int  j  =  0;  j  <  work1.length;  ++j)  {  [CE]  >  expected  [FE]      AssertionFailedError    [CONTEXT]      lmPar  =  0;  return;  }    double  sum2;  double  parl  =  0;  if  (rank  ==  solvedCols)  {      [BUGGY]  for(int  j  =  0;  j  <  work1.length;  ++j)  {  int  j  =  0;  j  <  work1.length;  ++j)  {  [BUGGY]      int  pj  =  permutation[j];  work1[pj]  *=  diag[pj]  /  dxNorm;  }  sum2  =  0;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  double  sum  =  0;  for  (int  i  =  0;  i  <  j;  ++i)  {  sum  +=  jacobian[i][pj]  *  work1[permutation[i]];  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  determineLMParameter  [RETURN_TYPE]  void  double[]  qy  double  delta  double[]  diag  double[]  work1  double[]  work2  double[]  work3  [VARIABLES]  int[]  permutation  boolean  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  qy  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  correction  costRelativeTolerance  delta  dirDer  dirJ  dk  dxNorm  fp  gNorm  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  parl  paru  pc2  preRed  previousCost  previousFP  qrRankingThreshold  r  ratio  s  sPar  sum  sum2  threshold  tmp  xK  xNorm  xk  ypk  int  countdown  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3922322702763681	530	530	2	replace	for(int    j    =    0;    j    <    work1.length;    ++j)    {    int  j  =  0;  j  <  work1.length;  ++j)  {	  	non-compiled	[CE]  >  expected	54	None	add
160	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  work1.length;  ++j)  {  For(int  j  =  0;  j  <  work1.length;  ++j)  {  [CE]  '.class'  expected  [FE]        AssertionFailedError    [CONTEXT]      lmPar  =  0;  return;  }    double  sum2;  double  parl  =  0;  if  (rank  ==  solvedCols)  {      [BUGGY]  for(int  j  =  0;  j  <  work1.length;  ++j)  {  For(int  j  =  0;  j  <  work1.length;  ++j)  {  [BUGGY]      int  pj  =  permutation[j];  work1[pj]  *=  diag[pj]  /  dxNorm;  }  sum2  =  0;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  double  sum  =  0;  for  (int  i  =  0;  i  <  j;  ++i)  {  sum  +=  jacobian[i][pj]  *  work1[permutation[i]];  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  determineLMParameter  [RETURN_TYPE]  void  double[]  qy  double  delta  double[]  diag  double[]  work1  double[]  work2  double[]  work3  [VARIABLES]  int[]  permutation  boolean  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  qy  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  correction  costRelativeTolerance  delta  dirDer  dirJ  dk  dxNorm  fp  gNorm  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  parl  paru  pc2  preRed  previousCost  previousFP  qrRankingThreshold  r  ratio  s  sPar  sum  sum2  threshold  tmp  xK  xNorm  xk  ypk  int  countdown  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3922322702763681	530	530	2	replace	for(int    j    =    0;    j    <    work1.length;    ++j)    {    For(int  j  =  0;  j  <  work1.length;  ++j)  {	  	non-compiled	[CE]  '.class'  expected	54	None	add
161	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  work1.length;  ++j)  {  Integer  j  =  0;  j  <  work1.length;  ++j)  {  [CE]  >  expected  [FE]          AssertionFailedError    [CONTEXT]      lmPar  =  0;  return;  }    double  sum2;  double  parl  =  0;  if  (rank  ==  solvedCols)  {      [BUGGY]  for(int  j  =  0;  j  <  work1.length;  ++j)  {  Integer  j  =  0;  j  <  work1.length;  ++j)  {  [BUGGY]      int  pj  =  permutation[j];  work1[pj]  *=  diag[pj]  /  dxNorm;  }  sum2  =  0;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  double  sum  =  0;  for  (int  i  =  0;  i  <  j;  ++i)  {  sum  +=  jacobian[i][pj]  *  work1[permutation[i]];  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  determineLMParameter  [RETURN_TYPE]  void  double[]  qy  double  delta  double[]  diag  double[]  work1  double[]  work2  double[]  work3  [VARIABLES]  int[]  permutation  boolean  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  qy  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  correction  costRelativeTolerance  delta  dirDer  dirJ  dk  dxNorm  fp  gNorm  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  parl  paru  pc2  preRed  previousCost  previousFP  qrRankingThreshold  r  ratio  s  sPar  sum  sum2  threshold  tmp  xK  xNorm  xk  ypk  int  countdown  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3922322702763681	530	530	2	replace	for(int    j    =    0;    j    <    work1.length;    ++j)    {    Integer  j  =  0;  j  <  work1.length;  ++j)  {	  	non-compiled	[CE]  >  expected	54	None	add
162	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  work1.length;  ++j)  {  for(int  j  =  0;  j  <  work1[j];  ++j)  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]      lmPar  =  0;  return;  }    double  sum2;  double  parl  =  0;  if  (rank  ==  solvedCols)  {      [BUGGY]  for(int  j  =  0;  j  <  work1.length;  ++j)  {  for(int  j  =  0;  j  <  work1[j];  ++j)  {  [BUGGY]      int  pj  =  permutation[j];  work1[pj]  *=  diag[pj]  /  dxNorm;  }  sum2  =  0;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  double  sum  =  0;  for  (int  i  =  0;  i  <  j;  ++i)  {  sum  +=  jacobian[i][pj]  *  work1[permutation[i]];  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  determineLMParameter  [RETURN_TYPE]  void  double[]  qy  double  delta  double[]  diag  double[]  work1  double[]  work2  double[]  work3  [VARIABLES]  int[]  permutation  boolean  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  qy  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  correction  costRelativeTolerance  delta  dirDer  dirJ  dk  dxNorm  fp  gNorm  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  parl  paru  pc2  preRed  previousCost  previousFP  qrRankingThreshold  r  ratio  s  sPar  sum  sum2  threshold  tmp  xK  xNorm  xk  ypk  int  countdown  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3922322702763681	530	530	2	replace	for(int    j    =    0;    j    <    work1.length;    ++j)    {    for(int  j  =  0;  j  <  work1[j];  ++j)  {	  	non-compiled	[CE]  illegal  start  of  expression	54	None	add
163	[BUG]  [BUGGY]  double  dxNorm  =  Math.sqrt(solveCols,  solvedCols);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      lmPar  =  0;  return;  }    double  sum2;  double  parl  =  0;  if  (rank  ==  solvedCols)  {      [BUGGY]  double  dxNorm  =  Math.sqrt(solveCols,  solvedCols);  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  work1[pj]  *=  diag[pj]  /  dxNorm;  }  sum2  =  0;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  double  sum  =  0;  for  (int  i  =  0;  i  <  j;  ++i)  {  sum  +=  jacobian[i][pj]  *  work1[permutation[i]];  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  determineLMParameter  [RETURN_TYPE]  void  double[]  qy  double  delta  double[]  diag  double[]  work1  double[]  work2  double[]  work3  [VARIABLES]  int[]  permutation  boolean  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  qy  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  correction  costRelativeTolerance  delta  dirDer  dirJ  dk  dxNorm  fp  gNorm  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  parl  paru  pc2  preRed  previousCost  previousFP  qrRankingThreshold  r  ratio  s  sPar  sum  sum2  threshold  tmp  xK  xNorm  xk  ypk  int  countdown  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3922322702763681	530	530	2	replace	double  dxNorm  =  Math.sqrt(solveCols,  solvedCols);	  double    dxNorm    =    Math.sqrt(solveCols,rank);    	non-compiled	[CE]  <identifier>  expected	25	None	replace
164	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  work1.length;  ++j)  {  int  j  =  0;  j  <  diag.length;  ++j)  {  [CE]  >  expected  [FE]          AssertionFailedError      [CONTEXT]      lmPar  =  0;  return;  }    double  sum2;  double  parl  =  0;  if  (rank  ==  solvedCols)  {      [BUGGY]  for(int  j  =  0;  j  <  work1.length;  ++j)  {  int  j  =  0;  j  <  diag.length;  ++j)  {  [BUGGY]      int  pj  =  permutation[j];  work1[pj]  *=  diag[pj]  /  dxNorm;  }  sum2  =  0;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  double  sum  =  0;  for  (int  i  =  0;  i  <  j;  ++i)  {  sum  +=  jacobian[i][pj]  *  work1[permutation[i]];  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  determineLMParameter  [RETURN_TYPE]  void  double[]  qy  double  delta  double[]  diag  double[]  work1  double[]  work2  double[]  work3  [VARIABLES]  int[]  permutation  boolean  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  qy  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  correction  costRelativeTolerance  delta  dirDer  dirJ  dk  dxNorm  fp  gNorm  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  parl  paru  pc2  preRed  previousCost  previousFP  qrRankingThreshold  r  ratio  s  sPar  sum  sum2  threshold  tmp  xK  xNorm  xk  ypk  int  countdown  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3922322702763681	530	530	2	replace	for(int  j  =  0;  j  <  work1.length;  ++j)  {  int  j  =  0;  j  <  diag.length;  ++j)  {	  for(int    j    =    0;    j    <    diag.length;    ++j)    {    int    j    =    0;    j    <    diag.length;    ++j)    {    	non-compiled	[CE]  >  expected	2	None	replace
165	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  work2.length;  ++j)  {  int  j  =  0;  j  <  diag.length;  ++j)  {  [CE]  >  expected  [FE]            AssertionFailedError      [CONTEXT]      lmPar  =  0;  return;  }    double  sum2;  double  parl  =  0;  if  (rank  ==  solvedCols)  {      [BUGGY]  for(int  j  =  0;  j  <  work2.length;  ++j)  {  int  j  =  0;  j  <  diag.length;  ++j)  {  [BUGGY]      int  pj  =  permutation[j];  work1[pj]  *=  diag[pj]  /  dxNorm;  }  sum2  =  0;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  double  sum  =  0;  for  (int  i  =  0;  i  <  j;  ++i)  {  sum  +=  jacobian[i][pj]  *  work1[permutation[i]];  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  determineLMParameter  [RETURN_TYPE]  void  double[]  qy  double  delta  double[]  diag  double[]  work1  double[]  work2  double[]  work3  [VARIABLES]  int[]  permutation  boolean  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  qy  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  correction  costRelativeTolerance  delta  dirDer  dirJ  dk  dxNorm  fp  gNorm  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  parl  paru  pc2  preRed  previousCost  previousFP  qrRankingThreshold  r  ratio  s  sPar  sum  sum2  threshold  tmp  xK  xNorm  xk  ypk  int  countdown  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3922322702763681	530	530	2	replace	for(int  j  =  0;  j  <  work2.length;  ++j)  {  int  j  =  0;  j  <  diag.length;  ++j)  {	  for(int    j    =    0;    j    <    diag.length;    ++j)    {    int    j    =    0;    j    <    diag.length;    ++j)    {    	non-compiled	[CE]  >  expected	2	None	replace
166	[BUG]  [BUGGY]  For(int  j  =  0;  j  <  dxNorm;  ++j)  {  [CE]  '.class'  expected  [FE]            AssertionFailedError      [CONTEXT]      lmPar  =  0;  return;  }    double  sum2;  double  parl  =  0;  if  (rank  ==  solvedCols)  {      [BUGGY]  For(int  j  =  0;  j  <  dxNorm;  ++j)  {  [BUGGY]      int  pj  =  permutation[j];  work1[pj]  *=  diag[pj]  /  dxNorm;  }  sum2  =  0;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  double  sum  =  0;  for  (int  i  =  0;  i  <  j;  ++i)  {  sum  +=  jacobian[i][pj]  *  work1[permutation[i]];  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  determineLMParameter  [RETURN_TYPE]  void  double[]  qy  double  delta  double[]  diag  double[]  work1  double[]  work2  double[]  work3  [VARIABLES]  int[]  permutation  boolean  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  qy  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  correction  costRelativeTolerance  delta  dirDer  dirJ  dk  dxNorm  fp  gNorm  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  parl  paru  pc2  preRed  previousCost  previousFP  qrRankingThreshold  r  ratio  s  sPar  sum  sum2  threshold  tmp  xK  xNorm  xk  ypk  int  countdown  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3922322702763681	530	530	2	replace	For(int  j  =  0;  j  <  dxNorm;  ++j)  {	  for(int    j    =    0;    j    <    parl;    ++j)    {    For(int    j    =    0;    j    <    parl;    ++j)    {    	non-compiled	[CE]  '.class'  expected	17	None	replace
167	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  work1.length;  ++j)  {  with  diag.length  =  0;  j  <  diag.length;  ++j)  {  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      lmPar  =  0;  return;  }    double  sum2;  double  parl  =  0;  if  (rank  ==  solvedCols)  {      [BUGGY]  for(int  j  =  0;  j  <  work1.length;  ++j)  {  with  diag.length  =  0;  j  <  diag.length;  ++j)  {  [BUGGY]      int  pj  =  permutation[j];  work1[pj]  *=  diag[pj]  /  dxNorm;  }  sum2  =  0;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  double  sum  =  0;  for  (int  i  =  0;  i  <  j;  ++i)  {  sum  +=  jacobian[i][pj]  *  work1[permutation[i]];  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  determineLMParameter  [RETURN_TYPE]  void  double[]  qy  double  delta  double[]  diag  double[]  work1  double[]  work2  double[]  work3  [VARIABLES]  int[]  permutation  boolean  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  qy  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  correction  costRelativeTolerance  delta  dirDer  dirJ  dk  dxNorm  fp  gNorm  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  parl  paru  pc2  preRed  previousCost  previousFP  qrRankingThreshold  r  ratio  s  sPar  sum  sum2  threshold  tmp  xK  xNorm  xk  ypk  int  countdown  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3922322702763681	530	530	2	replace	for(int  j  =  0;  j  <  work1.length;  ++j)  {  with  diag.length  =  0;  j  <  diag.length;  ++j)  {	  for(int    j    =    0;    j    <    diag.length;    ++j)    {    with    diag.length    =    0;    j    <    diag.length;    ++j)    {    	non-compiled	[CE]  ';'  expected	5	None	replace
168	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  work2.length;  ++j)  {  with  diag.length  =  0;  j  <  diag.length;  ++j)  {  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      lmPar  =  0;  return;  }    double  sum2;  double  parl  =  0;  if  (rank  ==  solvedCols)  {      [BUGGY]  for(int  j  =  0;  j  <  work2.length;  ++j)  {  with  diag.length  =  0;  j  <  diag.length;  ++j)  {  [BUGGY]      int  pj  =  permutation[j];  work1[pj]  *=  diag[pj]  /  dxNorm;  }  sum2  =  0;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  double  sum  =  0;  for  (int  i  =  0;  i  <  j;  ++i)  {  sum  +=  jacobian[i][pj]  *  work1[permutation[i]];  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  determineLMParameter  [RETURN_TYPE]  void  double[]  qy  double  delta  double[]  diag  double[]  work1  double[]  work2  double[]  work3  [VARIABLES]  int[]  permutation  boolean  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  qy  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  correction  costRelativeTolerance  delta  dirDer  dirJ  dk  dxNorm  fp  gNorm  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  parl  paru  pc2  preRed  previousCost  previousFP  qrRankingThreshold  r  ratio  s  sPar  sum  sum2  threshold  tmp  xK  xNorm  xk  ypk  int  countdown  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3922322702763681	530	530	2	replace	for(int  j  =  0;  j  <  work2.length;  ++j)  {  with  diag.length  =  0;  j  <  diag.length;  ++j)  {	  for(int    j    =    0;    j    <    diag.length;    ++j)    {    with    diag.length    =    0;    j    <    diag.length;    ++j)    {    	non-compiled	[CE]  ';'  expected	5	None	replace
169	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  diag.length;  ++j)  {  with  diag[j]  =  0;  j  <  diag.length;  ++j)  {  [CE]  ']'  expected  [FE]                    AssertionFailedError      [CONTEXT]      lmPar  =  0;  return;  }    double  sum2;  double  parl  =  0;  if  (rank  ==  solvedCols)  {      [BUGGY]  for(int  j  =  0;  j  <  diag.length;  ++j)  {  with  diag[j]  =  0;  j  <  diag.length;  ++j)  {  [BUGGY]      int  pj  =  permutation[j];  work1[pj]  *=  diag[pj]  /  dxNorm;  }  sum2  =  0;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  double  sum  =  0;  for  (int  i  =  0;  i  <  j;  ++i)  {  sum  +=  jacobian[i][pj]  *  work1[permutation[i]];  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  determineLMParameter  [RETURN_TYPE]  void  double[]  qy  double  delta  double[]  diag  double[]  work1  double[]  work2  double[]  work3  [VARIABLES]  int[]  permutation  boolean  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  qy  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  correction  costRelativeTolerance  delta  dirDer  dirJ  dk  dxNorm  fp  gNorm  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  parl  paru  pc2  preRed  previousCost  previousFP  qrRankingThreshold  r  ratio  s  sPar  sum  sum2  threshold  tmp  xK  xNorm  xk  ypk  int  countdown  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3922322702763681	530	530	2	replace	for(int  j  =  0;  j  <  diag.length;  ++j)  {  with  diag[j]  =  0;  j  <  diag.length;  ++j)  {	  for(int    j    =    0;    j    <    diag.length;    ++j)    {    with    diag.length    =    0;    j    <    diag.length;    ++j)    {    	non-compiled	[CE]  ']'  expected	5	None	replace
170	[BUG]  [BUGGY]  double  solvedCols  =  Math.min(solvedCols,  total  -  1);  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      lmPar  =  0;  return;  }    double  sum2;  double  parl  =  0;  if  (rank  ==  solvedCols)  {      [BUGGY]  double  solvedCols  =  Math.min(solvedCols,  total  -  1);  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  work1[pj]  *=  diag[pj]  /  dxNorm;  }  sum2  =  0;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  double  sum  =  0;  for  (int  i  =  0;  i  <  j;  ++i)  {  sum  +=  jacobian[i][pj]  *  work1[permutation[i]];  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  determineLMParameter  [RETURN_TYPE]  void  double[]  qy  double  delta  double[]  diag  double[]  work1  double[]  work2  double[]  work3  [VARIABLES]  int[]  permutation  boolean  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  qy  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  correction  costRelativeTolerance  delta  dirDer  dirJ  dk  dxNorm  fp  gNorm  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  parl  paru  pc2  preRed  previousCost  previousFP  qrRankingThreshold  r  ratio  s  sPar  sum  sum2  threshold  tmp  xK  xNorm  xk  ypk  int  countdown  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3922322702763681	530	530	2	replace	double  solvedCols  =  Math.min(solvedCols,  total  -  1);	  double    solvedCols    =    Math.min(solvedCols,    sum2    -    1);    	non-compiled	[CE]  <identifier>  expected	32	None	replace
171	[BUG]  [BUGGY]  double  dxNorm  =  Math.sqrt(level);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      lmPar  =  0;  return;  }    double  sum2;  double  parl  =  0;  if  (rank  ==  solvedCols)  {      [BUGGY]  double  dxNorm  =  Math.sqrt(level);  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  work1[pj]  *=  diag[pj]  /  dxNorm;  }  sum2  =  0;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  double  sum  =  0;  for  (int  i  =  0;  i  <  j;  ++i)  {  sum  +=  jacobian[i][pj]  *  work1[permutation[i]];  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  determineLMParameter  [RETURN_TYPE]  void  double[]  qy  double  delta  double[]  diag  double[]  work1  double[]  work2  double[]  work3  [VARIABLES]  int[]  permutation  boolean  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  qy  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  correction  costRelativeTolerance  delta  dirDer  dirJ  dk  dxNorm  fp  gNorm  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  parl  paru  pc2  preRed  previousCost  previousFP  qrRankingThreshold  r  ratio  s  sPar  sum  sum2  threshold  tmp  xK  xNorm  xk  ypk  int  countdown  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3922322702763681	530	530	2	replace	double  dxNorm  =  Math.sqrt(level);	  double    dxNorm    =    Math.sqrt(diag);    	non-compiled	[CE]  <identifier>  expected	8	None	replace
172	[BUG]  [BUGGY]  For(int  j  =  0;  j  <  resolvedCols.length;  ++j)  {  [CE]  '.class'  expected  [FE]            AssertionFailedError      [CONTEXT]      lmPar  =  0;  return;  }    double  sum2;  double  parl  =  0;  if  (rank  ==  solvedCols)  {      [BUGGY]  For(int  j  =  0;  j  <  resolvedCols.length;  ++j)  {  [BUGGY]      int  pj  =  permutation[j];  work1[pj]  *=  diag[pj]  /  dxNorm;  }  sum2  =  0;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  double  sum  =  0;  for  (int  i  =  0;  i  <  j;  ++i)  {  sum  +=  jacobian[i][pj]  *  work1[permutation[i]];  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  determineLMParameter  [RETURN_TYPE]  void  double[]  qy  double  delta  double[]  diag  double[]  work1  double[]  work2  double[]  work3  [VARIABLES]  int[]  permutation  boolean  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  qy  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  correction  costRelativeTolerance  delta  dirDer  dirJ  dk  dxNorm  fp  gNorm  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  parl  paru  pc2  preRed  previousCost  previousFP  qrRankingThreshold  r  ratio  s  sPar  sum  sum2  threshold  tmp  xK  xNorm  xk  ypk  int  countdown  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3922322702763681	530	530	2	replace	For(int  j  =  0;  j  <  resolvedCols.length;  ++j)  {	  For(int    j    =    0;    j    <    solvedCols.length;    ++j)    {    	non-compiled	[CE]  '.class'  expected	63	None	replace
173	[BUG]  [BUGGY]  For(int  j  =  0;  j  <  foundCols.length;  ++j)  {  [CE]  '.class'  expected  [FE]              AssertionFailedError      [CONTEXT]      lmPar  =  0;  return;  }    double  sum2;  double  parl  =  0;  if  (rank  ==  solvedCols)  {      [BUGGY]  For(int  j  =  0;  j  <  foundCols.length;  ++j)  {  [BUGGY]      int  pj  =  permutation[j];  work1[pj]  *=  diag[pj]  /  dxNorm;  }  sum2  =  0;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  double  sum  =  0;  for  (int  i  =  0;  i  <  j;  ++i)  {  sum  +=  jacobian[i][pj]  *  work1[permutation[i]];  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  determineLMParameter  [RETURN_TYPE]  void  double[]  qy  double  delta  double[]  diag  double[]  work1  double[]  work2  double[]  work3  [VARIABLES]  int[]  permutation  boolean  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  qy  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  correction  costRelativeTolerance  delta  dirDer  dirJ  dk  dxNorm  fp  gNorm  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  parl  paru  pc2  preRed  previousCost  previousFP  qrRankingThreshold  r  ratio  s  sPar  sum  sum2  threshold  tmp  xK  xNorm  xk  ypk  int  countdown  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3922322702763681	530	530	2	replace	For(int  j  =  0;  j  <  foundCols.length;  ++j)  {	  For(int    j    =    0;    j    <    solvedCols.length;    ++j)    {    	non-compiled	[CE]  '.class'  expected	63	None	replace
174	[BUG]  [BUGGY]  int  solvedCols  =  Math.min(rank,  parl  -  1);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      lmPar  =  0;  return;  }    double  sum2;  double  parl  =  0;  if  (rank  ==  solvedCols)  {      [BUGGY]  int  solvedCols  =  Math.min(rank,  parl  -  1);  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  work1[pj]  *=  diag[pj]  /  dxNorm;  }  sum2  =  0;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  double  sum  =  0;  for  (int  i  =  0;  i  <  j;  ++i)  {  sum  +=  jacobian[i][pj]  *  work1[permutation[i]];  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  determineLMParameter  [RETURN_TYPE]  void  double[]  qy  double  delta  double[]  diag  double[]  work1  double[]  work2  double[]  work3  [VARIABLES]  int[]  permutation  boolean  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  qy  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  correction  costRelativeTolerance  delta  dirDer  dirJ  dk  dxNorm  fp  gNorm  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  parl  paru  pc2  preRed  previousCost  previousFP  qrRankingThreshold  r  ratio  s  sPar  sum  sum2  threshold  tmp  xK  xNorm  xk  ypk  int  countdown  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3922322702763681	530	530	2	replace	int  solvedCols  =  Math.min(rank,  parl  -  1);	  int    solvedCols    =    Math.min(resolvedCols,    parl    -    1);    	non-compiled	[CE]  <identifier>  expected	78	None	replace
175	[BUG]  [BUGGY]  double  dxNorm  =  Math.abs(diag[0]  *  Math.abs(solvedCols));  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      lmPar  =  0;  return;  }    double  sum2;  double  parl  =  0;  if  (rank  ==  solvedCols)  {      [BUGGY]  double  dxNorm  =  Math.abs(diag[0]  *  Math.abs(solvedCols));  [BUGGY]      int  pj  =  permutation[j];  work1[pj]  *=  diag[pj]  /  dxNorm;  }  sum2  =  0;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  double  sum  =  0;  for  (int  i  =  0;  i  <  j;  ++i)  {  sum  +=  jacobian[i][pj]  *  work1[permutation[i]];  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  determineLMParameter  [RETURN_TYPE]  void  double[]  qy  double  delta  double[]  diag  double[]  work1  double[]  work2  double[]  work3  [VARIABLES]  int[]  permutation  boolean  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  qy  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  correction  costRelativeTolerance  delta  dirDer  dirJ  dk  dxNorm  fp  gNorm  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  parl  paru  pc2  preRed  previousCost  previousFP  qrRankingThreshold  r  ratio  s  sPar  sum  sum2  threshold  tmp  xK  xNorm  xk  ypk  int  countdown  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3922322702763681	530	530	2	replace	double  dxNorm  =  Math.abs(diag[0]  *  Math.abs(solvedCols));	  double    dxNorm    =    Math.abs(diag[0]    *    Math.abs(parl));    	non-compiled	[CE]  <identifier>  expected	76	None	replace
176	[BUG]  [BUGGY]  double  solvedCols  =  Math.min(resolvedCols,  parl);  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      lmPar  =  0;  return;  }    double  sum2;  double  parl  =  0;  if  (rank  ==  solvedCols)  {      [BUGGY]  double  solvedCols  =  Math.min(resolvedCols,  parl);  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  work1[pj]  *=  diag[pj]  /  dxNorm;  }  sum2  =  0;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  double  sum  =  0;  for  (int  i  =  0;  i  <  j;  ++i)  {  sum  +=  jacobian[i][pj]  *  work1[permutation[i]];  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  determineLMParameter  [RETURN_TYPE]  void  double[]  qy  double  delta  double[]  diag  double[]  work1  double[]  work2  double[]  work3  [VARIABLES]  int[]  permutation  boolean  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  qy  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  correction  costRelativeTolerance  delta  dirDer  dirJ  dk  dxNorm  fp  gNorm  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  parl  paru  pc2  preRed  previousCost  previousFP  qrRankingThreshold  r  ratio  s  sPar  sum  sum2  threshold  tmp  xK  xNorm  xk  ypk  int  countdown  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3922322702763681	530	530	2	replace	double  solvedCols  =  Math.min(resolvedCols,  parl);	  double    solvedCols    =    Math.min(solvedCols,    parl);    	non-compiled	[CE]  <identifier>  expected	39	None	replace
177	[BUG]  [BUGGY]  double  solvedCols  =  Math.min(solvedCols,  total);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      lmPar  =  0;  return;  }    double  sum2;  double  parl  =  0;  if  (rank  ==  solvedCols)  {      [BUGGY]  double  solvedCols  =  Math.min(solvedCols,  total);  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  work1[pj]  *=  diag[pj]  /  dxNorm;  }  sum2  =  0;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  double  sum  =  0;  for  (int  i  =  0;  i  <  j;  ++i)  {  sum  +=  jacobian[i][pj]  *  work1[permutation[i]];  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  determineLMParameter  [RETURN_TYPE]  void  double[]  qy  double  delta  double[]  diag  double[]  work1  double[]  work2  double[]  work3  [VARIABLES]  int[]  permutation  boolean  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  qy  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  correction  costRelativeTolerance  delta  dirDer  dirJ  dk  dxNorm  fp  gNorm  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  parl  paru  pc2  preRed  previousCost  previousFP  qrRankingThreshold  r  ratio  s  sPar  sum  sum2  threshold  tmp  xK  xNorm  xk  ypk  int  countdown  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3922322702763681	530	530	2	replace	double  solvedCols  =  Math.min(solvedCols,  total);	  double    solvedCols    =    Math.min(solvedCols,    parl);    	non-compiled	[CE]  <identifier>  expected	39	None	replace
178	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      lmPar  =  0;  return;  }    double  sum2;  double  parl  =  0;  if  (rank  ==  solvedCols)  {      [BUGGY]  for(int  j  =  0;  j  <  work3.length;  ++j)  {  [BUGGY]      int  pj  =  permutation[j];  work1[pj]  *=  diag[pj]  /  dxNorm;  }  sum2  =  0;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  double  sum  =  0;  for  (int  i  =  0;  i  <  j;  ++i)  {  sum  +=  jacobian[i][pj]  *  work1[permutation[i]];  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  determineLMParameter  [RETURN_TYPE]  void  double[]  qy  double  delta  double[]  diag  double[]  work1  double[]  work2  double[]  work3  [VARIABLES]  int[]  permutation  boolean  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  qy  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  correction  costRelativeTolerance  delta  dirDer  dirJ  dk  dxNorm  fp  gNorm  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  parl  paru  pc2  preRed  previousCost  previousFP  qrRankingThreshold  r  ratio  s  sPar  sum  sum2  threshold  tmp  xK  xNorm  xk  ypk  int  countdown  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3922322702763681	530	530	2	add	for(int  j  =  0;  j  <  work3.length;  ++j)  {	  for(int    j    =    0;    j    <    work1.length;    ++j)    {    	compilable	  [FE]  AssertionFailedError  	55	2	replace
179	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  work3.length;  ++j)  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      lmPar  =  0;  return;  }    double  sum2;  double  parl  =  0;  if  (rank  ==  solvedCols)  {      [BUGGY]  for(int  j  =  0;  j  <  work3.length;  ++j)  {  [BUGGY]      int  pj  =  permutation[j];  work1[pj]  *=  diag[pj]  /  dxNorm;  }  sum2  =  0;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  double  sum  =  0;  for  (int  i  =  0;  i  <  j;  ++i)  {  sum  +=  jacobian[i][pj]  *  work1[permutation[i]];  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  determineLMParameter  [RETURN_TYPE]  void  double[]  qy  double  delta  double[]  diag  double[]  work1  double[]  work2  double[]  work3  [VARIABLES]  int[]  permutation  boolean  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  qy  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  correction  costRelativeTolerance  delta  dirDer  dirJ  dk  dxNorm  fp  gNorm  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  parl  paru  pc2  preRed  previousCost  previousFP  qrRankingThreshold  r  ratio  s  sPar  sum  sum2  threshold  tmp  xK  xNorm  xk  ypk  int  countdown  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3922322702763681	530	530	2	replace	for(int  j  =  0;  j  <  work3.length;  ++j)  {	  for(int    j    =    0;    j    <    work1.length;    ++j)    {    	compilable	  [FE]  AssertionFailedError  	55	2	replace
180	[BUG]  [BUGGY]  int  solvedCols  =  Math.min(rank,  sum2);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      lmPar  =  0;  return;  }    double  sum2;  double  parl  =  0;  if  (rank  ==  solvedCols)  {      [BUGGY]  int  solvedCols  =  Math.min(rank,  sum2);  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  work1[pj]  *=  diag[pj]  /  dxNorm;  }  sum2  =  0;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  double  sum  =  0;  for  (int  i  =  0;  i  <  j;  ++i)  {  sum  +=  jacobian[i][pj]  *  work1[permutation[i]];  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  determineLMParameter  [RETURN_TYPE]  void  double[]  qy  double  delta  double[]  diag  double[]  work1  double[]  work2  double[]  work3  [VARIABLES]  int[]  permutation  boolean  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  qy  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  correction  costRelativeTolerance  delta  dirDer  dirJ  dk  dxNorm  fp  gNorm  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  parl  paru  pc2  preRed  previousCost  previousFP  qrRankingThreshold  r  ratio  s  sPar  sum  sum2  threshold  tmp  xK  xNorm  xk  ypk  int  countdown  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3922322702763681	530	530	2	replace	int  solvedCols  =  Math.min(rank,  sum2);	  int    solvedCols    =    Math.min(resolvedCols,    sum2);    	non-compiled	[CE]  <identifier>  expected	30	None	replace
181	[BUG]  [BUGGY]  double  solvedCols  =  Math.min(solvedCols,  ratio  -  1);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      lmPar  =  0;  return;  }    double  sum2;  double  parl  =  0;  if  (rank  ==  solvedCols)  {      [BUGGY]  double  solvedCols  =  Math.min(solvedCols,  ratio  -  1);  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  work1[pj]  *=  diag[pj]  /  dxNorm;  }  sum2  =  0;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  double  sum  =  0;  for  (int  i  =  0;  i  <  j;  ++i)  {  sum  +=  jacobian[i][pj]  *  work1[permutation[i]];  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  determineLMParameter  [RETURN_TYPE]  void  double[]  qy  double  delta  double[]  diag  double[]  work1  double[]  work2  double[]  work3  [VARIABLES]  int[]  permutation  boolean  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  qy  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  correction  costRelativeTolerance  delta  dirDer  dirJ  dk  dxNorm  fp  gNorm  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  parl  paru  pc2  preRed  previousCost  previousFP  qrRankingThreshold  r  ratio  s  sPar  sum  sum2  threshold  tmp  xK  xNorm  xk  ypk  int  countdown  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3922322702763681	530	530	2	replace	double  solvedCols  =  Math.min(solvedCols,  ratio  -  1);	  double    solvedCols    =    Math.min(sum2,    solvedCols    -    1);    	non-compiled	[CE]  <identifier>  expected	35	None	replace
182	[BUG]  [BUGGY]  double  dxNorm  =  Math.sqrt(diag,  total);  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      lmPar  =  0;  return;  }    double  sum2;  double  parl  =  0;  if  (rank  ==  solvedCols)  {      [BUGGY]  double  dxNorm  =  Math.sqrt(diag,  total);  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  work1[pj]  *=  diag[pj]  /  dxNorm;  }  sum2  =  0;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  double  sum  =  0;  for  (int  i  =  0;  i  <  j;  ++i)  {  sum  +=  jacobian[i][pj]  *  work1[permutation[i]];  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  determineLMParameter  [RETURN_TYPE]  void  double[]  qy  double  delta  double[]  diag  double[]  work1  double[]  work2  double[]  work3  [VARIABLES]  int[]  permutation  boolean  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  qy  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  correction  costRelativeTolerance  delta  dirDer  dirJ  dk  dxNorm  fp  gNorm  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  parl  paru  pc2  preRed  previousCost  previousFP  qrRankingThreshold  r  ratio  s  sPar  sum  sum2  threshold  tmp  xK  xNorm  xk  ypk  int  countdown  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3922322702763681	530	530	2	replace	double  dxNorm  =  Math.sqrt(diag,  total);	  double    dxNorm    =    Math.sqrt(diag,    solveCols);    	non-compiled	[CE]  <identifier>  expected	26	None	replace
183	[BUG]  [BUGGY]  double  solvedCols  =  Math.min(sum2,  total  -  1);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      lmPar  =  0;  return;  }    double  sum2;  double  parl  =  0;  if  (rank  ==  solvedCols)  {      [BUGGY]  double  solvedCols  =  Math.min(sum2,  total  -  1);  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  work1[pj]  *=  diag[pj]  /  dxNorm;  }  sum2  =  0;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  double  sum  =  0;  for  (int  i  =  0;  i  <  j;  ++i)  {  sum  +=  jacobian[i][pj]  *  work1[permutation[i]];  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  determineLMParameter  [RETURN_TYPE]  void  double[]  qy  double  delta  double[]  diag  double[]  work1  double[]  work2  double[]  work3  [VARIABLES]  int[]  permutation  boolean  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  qy  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  correction  costRelativeTolerance  delta  dirDer  dirJ  dk  dxNorm  fp  gNorm  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  parl  paru  pc2  preRed  previousCost  previousFP  qrRankingThreshold  r  ratio  s  sPar  sum  sum2  threshold  tmp  xK  xNorm  xk  ypk  int  countdown  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3922322702763681	530	530	2	replace	double  solvedCols  =  Math.min(sum2,  total  -  1);	  double    solvedCols    =    Math.min(sum2,    sum2    -    1);    	non-compiled	[CE]  <identifier>  expected	33	None	replace
184	[BUG]  [BUGGY]  double  solvedCols  =  Math.min(sum2,  sum2);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      lmPar  =  0;  return;  }    double  sum2;  double  parl  =  0;  if  (rank  ==  solvedCols)  {      [BUGGY]  double  solvedCols  =  Math.min(sum2,  sum2);  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  work1[pj]  *=  diag[pj]  /  dxNorm;  }  sum2  =  0;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  double  sum  =  0;  for  (int  i  =  0;  i  <  j;  ++i)  {  sum  +=  jacobian[i][pj]  *  work1[permutation[i]];  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  determineLMParameter  [RETURN_TYPE]  void  double[]  qy  double  delta  double[]  diag  double[]  work1  double[]  work2  double[]  work3  [VARIABLES]  int[]  permutation  boolean  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  qy  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  correction  costRelativeTolerance  delta  dirDer  dirJ  dk  dxNorm  fp  gNorm  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  parl  paru  pc2  preRed  previousCost  previousFP  qrRankingThreshold  r  ratio  s  sPar  sum  sum2  threshold  tmp  xK  xNorm  xk  ypk  int  countdown  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3922322702763681	530	530	2	replace	double  solvedCols  =  Math.min(sum2,  sum2);	  double    solvedCols    =    Math.min(sum2,    sum2    -    1);    	non-compiled	[CE]  <identifier>  expected	33	None	replace
185	[BUG]  [BUGGY]  int  i  =  0,  solveCols  =  0;  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      lmPar  =  0;  return;  }    double  sum2;  double  parl  =  0;  if  (rank  ==  solvedCols)  {      [BUGGY]  int  i  =  0,  solveCols  =  0;  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  work1[pj]  *=  diag[pj]  /  dxNorm;  }  sum2  =  0;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  double  sum  =  0;  for  (int  i  =  0;  i  <  j;  ++i)  {  sum  +=  jacobian[i][pj]  *  work1[permutation[i]];  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  determineLMParameter  [RETURN_TYPE]  void  double[]  qy  double  delta  double[]  diag  double[]  work1  double[]  work2  double[]  work3  [VARIABLES]  int[]  permutation  boolean  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  qy  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  correction  costRelativeTolerance  delta  dirDer  dirJ  dk  dxNorm  fp  gNorm  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  parl  paru  pc2  preRed  previousCost  previousFP  qrRankingThreshold  r  ratio  s  sPar  sum  sum2  threshold  tmp  xK  xNorm  xk  ypk  int  countdown  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3922322702763681	530	530	2	replace	int  i  =  0,  solveCols  =  0;	  int    i    =    1;    	non-compiled	[CE]  <identifier>  expected	13	None	replace
186	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  parl.length;  ++j)  {  [CE]  double  cannot  be  dereferenced  [FE]            AssertionFailedError      [CONTEXT]      lmPar  =  0;  return;  }    double  sum2;  double  parl  =  0;  if  (rank  ==  solvedCols)  {      [BUGGY]  for(int  j  =  0;  j  <  parl.length;  ++j)  {  [BUGGY]      int  pj  =  permutation[j];  work1[pj]  *=  diag[pj]  /  dxNorm;  }  sum2  =  0;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  double  sum  =  0;  for  (int  i  =  0;  i  <  j;  ++i)  {  sum  +=  jacobian[i][pj]  *  work1[permutation[i]];  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  determineLMParameter  [RETURN_TYPE]  void  double[]  qy  double  delta  double[]  diag  double[]  work1  double[]  work2  double[]  work3  [VARIABLES]  int[]  permutation  boolean  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  qy  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  correction  costRelativeTolerance  delta  dirDer  dirJ  dk  dxNorm  fp  gNorm  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  parl  paru  pc2  preRed  previousCost  previousFP  qrRankingThreshold  r  ratio  s  sPar  sum  sum2  threshold  tmp  xK  xNorm  xk  ypk  int  countdown  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3922322702763681	530	530	2	replace	for(int  j  =  0;  j  <  parl.length;  ++j)  {	  for(int    j    =    0;    j    <    resolvedCols.length;    ++j)    {    	non-compiled	[CE]  double  cannot  be  dereferenced	28	None	replace
187	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  foundCols.length;  ++j)  {  [CE]  cannot  find  symbol  foundCols  [FE]              AssertionFailedError      [CONTEXT]      lmPar  =  0;  return;  }    double  sum2;  double  parl  =  0;  if  (rank  ==  solvedCols)  {      [BUGGY]  for(int  j  =  0;  j  <  foundCols.length;  ++j)  {  [BUGGY]      int  pj  =  permutation[j];  work1[pj]  *=  diag[pj]  /  dxNorm;  }  sum2  =  0;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  double  sum  =  0;  for  (int  i  =  0;  i  <  j;  ++i)  {  sum  +=  jacobian[i][pj]  *  work1[permutation[i]];  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  determineLMParameter  [RETURN_TYPE]  void  double[]  qy  double  delta  double[]  diag  double[]  work1  double[]  work2  double[]  work3  [VARIABLES]  int[]  permutation  boolean  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  qy  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  correction  costRelativeTolerance  delta  dirDer  dirJ  dk  dxNorm  fp  gNorm  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  parl  paru  pc2  preRed  previousCost  previousFP  qrRankingThreshold  r  ratio  s  sPar  sum  sum2  threshold  tmp  xK  xNorm  xk  ypk  int  countdown  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3922322702763681	530	530	2	replace	for(int  j  =  0;  j  <  foundCols.length;  ++j)  {	  for(int    j    =    0;    j    <    resolvedCols.length;    ++j)    {    	non-compiled	[CE]  cannot  find  symbol  foundCols	28	None	replace
188	[BUG]  [BUGGY]  double  dxNorm  =  Math.abs(diag[1]  *  Math.abs(rank));  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      lmPar  =  0;  return;  }    double  sum2;  double  parl  =  0;  if  (rank  ==  solvedCols)  {      [BUGGY]  double  dxNorm  =  Math.abs(diag[1]  *  Math.abs(rank));  [BUGGY]      int  pj  =  permutation[j];  work1[pj]  *=  diag[pj]  /  dxNorm;  }  sum2  =  0;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  double  sum  =  0;  for  (int  i  =  0;  i  <  j;  ++i)  {  sum  +=  jacobian[i][pj]  *  work1[permutation[i]];  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  determineLMParameter  [RETURN_TYPE]  void  double[]  qy  double  delta  double[]  diag  double[]  work1  double[]  work2  double[]  work3  [VARIABLES]  int[]  permutation  boolean  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  qy  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  correction  costRelativeTolerance  delta  dirDer  dirJ  dk  dxNorm  fp  gNorm  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  parl  paru  pc2  preRed  previousCost  previousFP  qrRankingThreshold  r  ratio  s  sPar  sum  sum2  threshold  tmp  xK  xNorm  xk  ypk  int  countdown  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3922322702763681	530	530	2	replace	double  dxNorm  =  Math.abs(diag[1]  *  Math.abs(rank));	  double    dxNorm    =    Math.abs(diag[0]    *    Math.abs(rank));    	non-compiled	[CE]  <identifier>  expected	77	None	replace
189	[BUG]  [BUGGY]  double  dxNorm  =  Math.log(level);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      lmPar  =  0;  return;  }    double  sum2;  double  parl  =  0;  if  (rank  ==  solvedCols)  {      [BUGGY]  double  dxNorm  =  Math.log(level);  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  work1[pj]  *=  diag[pj]  /  dxNorm;  }  sum2  =  0;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  double  sum  =  0;  for  (int  i  =  0;  i  <  j;  ++i)  {  sum  +=  jacobian[i][pj]  *  work1[permutation[i]];  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  determineLMParameter  [RETURN_TYPE]  void  double[]  qy  double  delta  double[]  diag  double[]  work1  double[]  work2  double[]  work3  [VARIABLES]  int[]  permutation  boolean  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  qy  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  correction  costRelativeTolerance  delta  dirDer  dirJ  dk  dxNorm  fp  gNorm  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  parl  paru  pc2  preRed  previousCost  previousFP  qrRankingThreshold  r  ratio  s  sPar  sum  sum2  threshold  tmp  xK  xNorm  xk  ypk  int  countdown  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3922322702763681	530	530	2	replace	double  dxNorm  =  Math.log(level);	  double    dxNorm    =    Math.log(rank);    	non-compiled	[CE]  <identifier>  expected	23	None	replace
190	[BUG]  [BUGGY]  double  dxNorm  =  Math.log(rank  +  1);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      lmPar  =  0;  return;  }    double  sum2;  double  parl  =  0;  if  (rank  ==  solvedCols)  {      [BUGGY]  double  dxNorm  =  Math.log(rank  +  1);  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  work1[pj]  *=  diag[pj]  /  dxNorm;  }  sum2  =  0;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  double  sum  =  0;  for  (int  i  =  0;  i  <  j;  ++i)  {  sum  +=  jacobian[i][pj]  *  work1[permutation[i]];  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  determineLMParameter  [RETURN_TYPE]  void  double[]  qy  double  delta  double[]  diag  double[]  work1  double[]  work2  double[]  work3  [VARIABLES]  int[]  permutation  boolean  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  qy  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  correction  costRelativeTolerance  delta  dirDer  dirJ  dk  dxNorm  fp  gNorm  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  parl  paru  pc2  preRed  previousCost  previousFP  qrRankingThreshold  r  ratio  s  sPar  sum  sum2  threshold  tmp  xK  xNorm  xk  ypk  int  countdown  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3922322702763681	530	530	2	replace	double  dxNorm  =  Math.log(rank  +  1);	  double    dxNorm    =    Math.log(rank);    	non-compiled	[CE]  <identifier>  expected	23	None	replace
191	[BUG]  [BUGGY]  int  solvedCols  =  Math.min(rank,  parl  +  1);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      lmPar  =  0;  return;  }    double  sum2;  double  parl  =  0;  if  (rank  ==  solvedCols)  {      [BUGGY]  int  solvedCols  =  Math.min(rank,  parl  +  1);  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  work1[pj]  *=  diag[pj]  /  dxNorm;  }  sum2  =  0;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  double  sum  =  0;  for  (int  i  =  0;  i  <  j;  ++i)  {  sum  +=  jacobian[i][pj]  *  work1[permutation[i]];  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  determineLMParameter  [RETURN_TYPE]  void  double[]  qy  double  delta  double[]  diag  double[]  work1  double[]  work2  double[]  work3  [VARIABLES]  int[]  permutation  boolean  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  qy  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  correction  costRelativeTolerance  delta  dirDer  dirJ  dk  dxNorm  fp  gNorm  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  parl  paru  pc2  preRed  previousCost  previousFP  qrRankingThreshold  r  ratio  s  sPar  sum  sum2  threshold  tmp  xK  xNorm  xk  ypk  int  countdown  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3922322702763681	530	530	2	replace	int  solvedCols  =  Math.min(rank,  parl  +  1);	  int    solvedCols    =    Math.min(resolvedCols,    parl    +    1);    	non-compiled	[CE]  <identifier>  expected	79	None	replace
192	[BUG]  [BUGGY]  double  dxNorm  =  Math.abs(rank  -  resolvedCols);  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      lmPar  =  0;  return;  }    double  sum2;  double  parl  =  0;  if  (rank  ==  solvedCols)  {      [BUGGY]  double  dxNorm  =  Math.abs(rank  -  resolvedCols);  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  work1[pj]  *=  diag[pj]  /  dxNorm;  }  sum2  =  0;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  double  sum  =  0;  for  (int  i  =  0;  i  <  j;  ++i)  {  sum  +=  jacobian[i][pj]  *  work1[permutation[i]];  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  determineLMParameter  [RETURN_TYPE]  void  double[]  qy  double  delta  double[]  diag  double[]  work1  double[]  work2  double[]  work3  [VARIABLES]  int[]  permutation  boolean  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  qy  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  correction  costRelativeTolerance  delta  dirDer  dirJ  dk  dxNorm  fp  gNorm  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  parl  paru  pc2  preRed  previousCost  previousFP  qrRankingThreshold  r  ratio  s  sPar  sum  sum2  threshold  tmp  xK  xNorm  xk  ypk  int  countdown  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3922322702763681	530	530	2	replace	double  dxNorm  =  Math.abs(rank  -  resolvedCols);	  double    dxNorm    =    Math.abs(solvedCols    -    ratio);    	non-compiled	[CE]  <identifier>  expected	56	None	replace
193	[BUG]  [BUGGY]  int  permutation[j]  =  work3[0];  [CE]  ']'  expected  [FE]                AssertionFailedError      [CONTEXT]      lmPar  =  0;  return;  }    double  sum2;  double  parl  =  0;  if  (rank  ==  solvedCols)  {      [BUGGY]  int  permutation[j]  =  work3[0];  [BUGGY]      int  pj  =  permutation[j];  work1[pj]  *=  diag[pj]  /  dxNorm;  }  sum2  =  0;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  double  sum  =  0;  for  (int  i  =  0;  i  <  j;  ++i)  {  sum  +=  jacobian[i][pj]  *  work1[permutation[i]];  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  determineLMParameter  [RETURN_TYPE]  void  double[]  qy  double  delta  double[]  diag  double[]  work1  double[]  work2  double[]  work3  [VARIABLES]  int[]  permutation  boolean  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  qy  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  correction  costRelativeTolerance  delta  dirDer  dirJ  dk  dxNorm  fp  gNorm  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  parl  paru  pc2  preRed  previousCost  previousFP  qrRankingThreshold  r  ratio  s  sPar  sum  sum2  threshold  tmp  xK  xNorm  xk  ypk  int  countdown  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3922322702763681	530	530	2	replace	int  permutation[j]  =  work3[0];	  int    permutation[j]    =    qy[0];    	non-compiled	[CE]  ']'  expected	62	None	replace
194	[BUG]  [BUGGY]  double  dxNorm  =  Math.abs(diag.length  -  1);  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      lmPar  =  0;  return;  }    double  sum2;  double  parl  =  0;  if  (rank  ==  solvedCols)  {      [BUGGY]  double  dxNorm  =  Math.abs(diag.length  -  1);  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  work1[pj]  *=  diag[pj]  /  dxNorm;  }  sum2  =  0;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  double  sum  =  0;  for  (int  i  =  0;  i  <  j;  ++i)  {  sum  +=  jacobian[i][pj]  *  work1[permutation[i]];  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  determineLMParameter  [RETURN_TYPE]  void  double[]  qy  double  delta  double[]  diag  double[]  work1  double[]  work2  double[]  work3  [VARIABLES]  int[]  permutation  boolean  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  qy  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  correction  costRelativeTolerance  delta  dirDer  dirJ  dk  dxNorm  fp  gNorm  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  parl  paru  pc2  preRed  previousCost  previousFP  qrRankingThreshold  r  ratio  s  sPar  sum  sum2  threshold  tmp  xK  xNorm  xk  ypk  int  countdown  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3922322702763681	530	530	2	replace	double  dxNorm  =  Math.abs(diag.length  -  1);	  double    dxNorm    =    Math.abs(diag.length    -    solvedCols);    	non-compiled	[CE]  <identifier>  expected	67	None	replace
195	[BUG]  [BUGGY]  int  permutation[j]  =  work2.length;  [CE]  ']'  expected  [FE]                  AssertionFailedError      [CONTEXT]      lmPar  =  0;  return;  }    double  sum2;  double  parl  =  0;  if  (rank  ==  solvedCols)  {      [BUGGY]  int  permutation[j]  =  work2.length;  [BUGGY]      int  pj  =  permutation[j];  work1[pj]  *=  diag[pj]  /  dxNorm;  }  sum2  =  0;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  double  sum  =  0;  for  (int  i  =  0;  i  <  j;  ++i)  {  sum  +=  jacobian[i][pj]  *  work1[permutation[i]];  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  determineLMParameter  [RETURN_TYPE]  void  double[]  qy  double  delta  double[]  diag  double[]  work1  double[]  work2  double[]  work3  [VARIABLES]  int[]  permutation  boolean  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  qy  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  correction  costRelativeTolerance  delta  dirDer  dirJ  dk  dxNorm  fp  gNorm  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  parl  paru  pc2  preRed  previousCost  previousFP  qrRankingThreshold  r  ratio  s  sPar  sum  sum2  threshold  tmp  xK  xNorm  xk  ypk  int  countdown  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3922322702763681	530	530	2	replace	int  permutation[j]  =  work2.length;	  int    permutation[j]    =    work1[j];    	non-compiled	[CE]  ']'  expected	44	None	replace
196	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  work1.length;  ++j)  {  Integer  j  =  0;  j  <  diag.length;  ++j)  {  [CE]  >  expected  [FE]              AssertionFailedError      [CONTEXT]      lmPar  =  0;  return;  }    double  sum2;  double  parl  =  0;  if  (rank  ==  solvedCols)  {      [BUGGY]  for(int  j  =  0;  j  <  work1.length;  ++j)  {  Integer  j  =  0;  j  <  diag.length;  ++j)  {  [BUGGY]      int  pj  =  permutation[j];  work1[pj]  *=  diag[pj]  /  dxNorm;  }  sum2  =  0;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  double  sum  =  0;  for  (int  i  =  0;  i  <  j;  ++i)  {  sum  +=  jacobian[i][pj]  *  work1[permutation[i]];  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  determineLMParameter  [RETURN_TYPE]  void  double[]  qy  double  delta  double[]  diag  double[]  work1  double[]  work2  double[]  work3  [VARIABLES]  int[]  permutation  boolean  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  qy  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  correction  costRelativeTolerance  delta  dirDer  dirJ  dk  dxNorm  fp  gNorm  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  parl  paru  pc2  preRed  previousCost  previousFP  qrRankingThreshold  r  ratio  s  sPar  sum  sum2  threshold  tmp  xK  xNorm  xk  ypk  int  countdown  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3922322702763681	530	530	2	replace	for(int  j  =  0;  j  <  work1.length;  ++j)  {  Integer  j  =  0;  j  <  diag.length;  ++j)  {	  for(int    j    =    0;    j    <    diag.length;    ++j)    {    Integer    j    =    0;    j    <    diag.length;    ++j)    {    	non-compiled	[CE]  >  expected	4	None	replace
197	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  work2.length;  ++j)  {  Integer  j  =  0;  j  <  diag.length;  ++j)  {  [CE]  >  expected  [FE]                AssertionFailedError      [CONTEXT]      lmPar  =  0;  return;  }    double  sum2;  double  parl  =  0;  if  (rank  ==  solvedCols)  {      [BUGGY]  for(int  j  =  0;  j  <  work2.length;  ++j)  {  Integer  j  =  0;  j  <  diag.length;  ++j)  {  [BUGGY]      int  pj  =  permutation[j];  work1[pj]  *=  diag[pj]  /  dxNorm;  }  sum2  =  0;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  double  sum  =  0;  for  (int  i  =  0;  i  <  j;  ++i)  {  sum  +=  jacobian[i][pj]  *  work1[permutation[i]];  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  determineLMParameter  [RETURN_TYPE]  void  double[]  qy  double  delta  double[]  diag  double[]  work1  double[]  work2  double[]  work3  [VARIABLES]  int[]  permutation  boolean  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  qy  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  correction  costRelativeTolerance  delta  dirDer  dirJ  dk  dxNorm  fp  gNorm  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  parl  paru  pc2  preRed  previousCost  previousFP  qrRankingThreshold  r  ratio  s  sPar  sum  sum2  threshold  tmp  xK  xNorm  xk  ypk  int  countdown  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3922322702763681	530	530	2	replace	for(int  j  =  0;  j  <  work2.length;  ++j)  {  Integer  j  =  0;  j  <  diag.length;  ++j)  {	  for(int    j    =    0;    j    <    diag.length;    ++j)    {    Integer    j    =    0;    j    <    diag.length;    ++j)    {    	non-compiled	[CE]  >  expected	4	None	replace
198	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  diag.length;  ++j)  {  if(j  =  0;  j  <  parl;  ++j)  {  [CE]  ')'  expected  [FE]        AssertionFailedError      [CONTEXT]      lmPar  =  0;  return;  }    double  sum2;  double  parl  =  0;  if  (rank  ==  solvedCols)  {      [BUGGY]  for(int  j  =  0;  j  <  diag.length;  ++j)  {  if(j  =  0;  j  <  parl;  ++j)  {  [BUGGY]      int  pj  =  permutation[j];  work1[pj]  *=  diag[pj]  /  dxNorm;  }  sum2  =  0;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  double  sum  =  0;  for  (int  i  =  0;  i  <  j;  ++i)  {  sum  +=  jacobian[i][pj]  *  work1[permutation[i]];  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  determineLMParameter  [RETURN_TYPE]  void  double[]  qy  double  delta  double[]  diag  double[]  work1  double[]  work2  double[]  work3  [VARIABLES]  int[]  permutation  boolean  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  qy  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  correction  costRelativeTolerance  delta  dirDer  dirJ  dk  dxNorm  fp  gNorm  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  parl  paru  pc2  preRed  previousCost  previousFP  qrRankingThreshold  r  ratio  s  sPar  sum  sum2  threshold  tmp  xK  xNorm  xk  ypk  int  countdown  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3922322702763681	530	530	2	replace	for(int  j  =  0;  j  <  diag.length;  ++j)  {  if(j  =  0;  j  <  parl;  ++j)  {	  for(int    j    =    0;    j    <    parl;    ++j)    {    if(j    =    0;    j    <    parl;    ++j)    {    	non-compiled	[CE]  ')'  expected	48	None	replace
199	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  solveCols;  ++j)  {  if(j  =  0;  j  <  parl;  ++j)  {  [CE]  ')'  expected  [FE]          AssertionFailedError      [CONTEXT]      lmPar  =  0;  return;  }    double  sum2;  double  parl  =  0;  if  (rank  ==  solvedCols)  {      [BUGGY]  for(int  j  =  0;  j  <  solveCols;  ++j)  {  if(j  =  0;  j  <  parl;  ++j)  {  [BUGGY]      int  pj  =  permutation[j];  work1[pj]  *=  diag[pj]  /  dxNorm;  }  sum2  =  0;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  double  sum  =  0;  for  (int  i  =  0;  i  <  j;  ++i)  {  sum  +=  jacobian[i][pj]  *  work1[permutation[i]];  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  determineLMParameter  [RETURN_TYPE]  void  double[]  qy  double  delta  double[]  diag  double[]  work1  double[]  work2  double[]  work3  [VARIABLES]  int[]  permutation  boolean  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  qy  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  correction  costRelativeTolerance  delta  dirDer  dirJ  dk  dxNorm  fp  gNorm  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  parl  paru  pc2  preRed  previousCost  previousFP  qrRankingThreshold  r  ratio  s  sPar  sum  sum2  threshold  tmp  xK  xNorm  xk  ypk  int  countdown  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3922322702763681	530	530	2	replace	for(int  j  =  0;  j  <  solveCols;  ++j)  {  if(j  =  0;  j  <  parl;  ++j)  {	  for(int    j    =    0;    j    <    parl;    ++j)    {    if(j    =    0;    j    <    parl;    ++j)    {    	non-compiled	[CE]  ')'  expected	48	None	replace
200	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  sum2;  ++j)  {  if(j  =  0;  j  <  parl;  ++j)  {  [CE]  ')'  expected  [FE]            AssertionFailedError      [CONTEXT]      lmPar  =  0;  return;  }    double  sum2;  double  parl  =  0;  if  (rank  ==  solvedCols)  {      [BUGGY]  for(int  j  =  0;  j  <  sum2;  ++j)  {  if(j  =  0;  j  <  parl;  ++j)  {  [BUGGY]      int  pj  =  permutation[j];  work1[pj]  *=  diag[pj]  /  dxNorm;  }  sum2  =  0;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  double  sum  =  0;  for  (int  i  =  0;  i  <  j;  ++i)  {  sum  +=  jacobian[i][pj]  *  work1[permutation[i]];  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  determineLMParameter  [RETURN_TYPE]  void  double[]  qy  double  delta  double[]  diag  double[]  work1  double[]  work2  double[]  work3  [VARIABLES]  int[]  permutation  boolean  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  qy  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  correction  costRelativeTolerance  delta  dirDer  dirJ  dk  dxNorm  fp  gNorm  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  parl  paru  pc2  preRed  previousCost  previousFP  qrRankingThreshold  r  ratio  s  sPar  sum  sum2  threshold  tmp  xK  xNorm  xk  ypk  int  countdown  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3922322702763681	530	530	2	replace	for(int  j  =  0;  j  <  sum2;  ++j)  {  if(j  =  0;  j  <  parl;  ++j)  {	  for(int    j    =    0;    j    <    parl;    ++j)    {    if(j    =    0;    j    <    parl;    ++j)    {    	non-compiled	[CE]  ')'  expected	48	None	replace
201	[BUG]  [BUGGY]  double  permutation[]  =  qy.doubleValue();  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      lmPar  =  0;  return;  }    double  sum2;  double  parl  =  0;  if  (rank  ==  solvedCols)  {      [BUGGY]  double  permutation[]  =  qy.doubleValue();  [BUGGY]      int  pj  =  permutation[j];  work1[pj]  *=  diag[pj]  /  dxNorm;  }  sum2  =  0;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  double  sum  =  0;  for  (int  i  =  0;  i  <  j;  ++i)  {  sum  +=  jacobian[i][pj]  *  work1[permutation[i]];  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  determineLMParameter  [RETURN_TYPE]  void  double[]  qy  double  delta  double[]  diag  double[]  work1  double[]  work2  double[]  work3  [VARIABLES]  int[]  permutation  boolean  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  qy  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  correction  costRelativeTolerance  delta  dirDer  dirJ  dk  dxNorm  fp  gNorm  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  parl  paru  pc2  preRed  previousCost  previousFP  qrRankingThreshold  r  ratio  s  sPar  sum  sum2  threshold  tmp  xK  xNorm  xk  ypk  int  countdown  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3922322702763681	530	530	2	replace	double  permutation[]  =  qy.doubleValue();	  double    permutation[]    =    dxNorm.doubleValue();    	non-compiled	[CE]  <identifier>  expected	42	None	replace
202	[BUG]  [BUGGY]  double  permutation[]  =  diag.doubleValue();  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      lmPar  =  0;  return;  }    double  sum2;  double  parl  =  0;  if  (rank  ==  solvedCols)  {      [BUGGY]  double  permutation[]  =  diag.doubleValue();  [BUGGY]      int  pj  =  permutation[j];  work1[pj]  *=  diag[pj]  /  dxNorm;  }  sum2  =  0;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  double  sum  =  0;  for  (int  i  =  0;  i  <  j;  ++i)  {  sum  +=  jacobian[i][pj]  *  work1[permutation[i]];  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  determineLMParameter  [RETURN_TYPE]  void  double[]  qy  double  delta  double[]  diag  double[]  work1  double[]  work2  double[]  work3  [VARIABLES]  int[]  permutation  boolean  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  qy  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  correction  costRelativeTolerance  delta  dirDer  dirJ  dk  dxNorm  fp  gNorm  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  parl  paru  pc2  preRed  previousCost  previousFP  qrRankingThreshold  r  ratio  s  sPar  sum  sum2  threshold  tmp  xK  xNorm  xk  ypk  int  countdown  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3922322702763681	530	530	2	replace	double  permutation[]  =  diag.doubleValue();	  double    permutation[]    =    dxNorm.doubleValue();    	non-compiled	[CE]  <identifier>  expected	42	None	replace
203	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  work2.length;  ++j)  {  Integer  j  =  0;  j  <  parl;  ++j)  {  [CE]  >  expected  [FE]              AssertionFailedError      [CONTEXT]      lmPar  =  0;  return;  }    double  sum2;  double  parl  =  0;  if  (rank  ==  solvedCols)  {      [BUGGY]  for(int  j  =  0;  j  <  work2.length;  ++j)  {  Integer  j  =  0;  j  <  parl;  ++j)  {  [BUGGY]      int  pj  =  permutation[j];  work1[pj]  *=  diag[pj]  /  dxNorm;  }  sum2  =  0;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  double  sum  =  0;  for  (int  i  =  0;  i  <  j;  ++i)  {  sum  +=  jacobian[i][pj]  *  work1[permutation[i]];  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  determineLMParameter  [RETURN_TYPE]  void  double[]  qy  double  delta  double[]  diag  double[]  work1  double[]  work2  double[]  work3  [VARIABLES]  int[]  permutation  boolean  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  qy  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  correction  costRelativeTolerance  delta  dirDer  dirJ  dk  dxNorm  fp  gNorm  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  parl  paru  pc2  preRed  previousCost  previousFP  qrRankingThreshold  r  ratio  s  sPar  sum  sum2  threshold  tmp  xK  xNorm  xk  ypk  int  countdown  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3922322702763681	530	530	2	replace	for(int  j  =  0;  j  <  work2.length;  ++j)  {  Integer  j  =  0;  j  <  parl;  ++j)  {	  for(int    j    =    0;    j    <    parl;    ++j)    {    Integer    j    =    0;    j    <    parl;    ++j)    {    	non-compiled	[CE]  >  expected	18	None	replace
204	[BUG]  [BUGGY]  double  dxNorm  =  Math.sqrt(diag[0]  +  1);  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      lmPar  =  0;  return;  }    double  sum2;  double  parl  =  0;  if  (rank  ==  solvedCols)  {      [BUGGY]  double  dxNorm  =  Math.sqrt(diag[0]  +  1);  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  work1[pj]  *=  diag[pj]  /  dxNorm;  }  sum2  =  0;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  double  sum  =  0;  for  (int  i  =  0;  i  <  j;  ++i)  {  sum  +=  jacobian[i][pj]  *  work1[permutation[i]];  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  determineLMParameter  [RETURN_TYPE]  void  double[]  qy  double  delta  double[]  diag  double[]  work1  double[]  work2  double[]  work3  [VARIABLES]  int[]  permutation  boolean  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  qy  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  correction  costRelativeTolerance  delta  dirDer  dirJ  dk  dxNorm  fp  gNorm  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  parl  paru  pc2  preRed  previousCost  previousFP  qrRankingThreshold  r  ratio  s  sPar  sum  sum2  threshold  tmp  xK  xNorm  xk  ypk  int  countdown  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3922322702763681	530	530	2	replace	double  dxNorm  =  Math.sqrt(diag[0]  +  1);	  double    dxNorm    =    Math.sqrt(diag[0]);    	non-compiled	[CE]  <identifier>  expected	74	None	replace
205	[BUG]  [BUGGY]  double  dxNorm  =  Math.abs(diag[0]  +  1);  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      lmPar  =  0;  return;  }    double  sum2;  double  parl  =  0;  if  (rank  ==  solvedCols)  {      [BUGGY]  double  dxNorm  =  Math.abs(diag[0]  +  1);  [BUGGY]      int  pj  =  permutation[j];  work1[pj]  *=  diag[pj]  /  dxNorm;  }  sum2  =  0;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  double  sum  =  0;  for  (int  i  =  0;  i  <  j;  ++i)  {  sum  +=  jacobian[i][pj]  *  work1[permutation[i]];  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  determineLMParameter  [RETURN_TYPE]  void  double[]  qy  double  delta  double[]  diag  double[]  work1  double[]  work2  double[]  work3  [VARIABLES]  int[]  permutation  boolean  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  qy  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  correction  costRelativeTolerance  delta  dirDer  dirJ  dk  dxNorm  fp  gNorm  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  parl  paru  pc2  preRed  previousCost  previousFP  qrRankingThreshold  r  ratio  s  sPar  sum  sum2  threshold  tmp  xK  xNorm  xk  ypk  int  countdown  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3922322702763681	530	530	2	replace	double  dxNorm  =  Math.abs(diag[0]  +  1);	  double    dxNorm    =    Math.abs(diag[0]);    	non-compiled	[CE]  <identifier>  expected	75	None	replace
206	[BUG]  [BUGGY]  int  solvedCols  =  Math.min(parl,  rank);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      lmPar  =  0;  return;  }    double  sum2;  double  parl  =  0;  if  (rank  ==  solvedCols)  {      [BUGGY]  int  solvedCols  =  Math.min(parl,  rank);  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  work1[pj]  *=  diag[pj]  /  dxNorm;  }  sum2  =  0;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  double  sum  =  0;  for  (int  i  =  0;  i  <  j;  ++i)  {  sum  +=  jacobian[i][pj]  *  work1[permutation[i]];  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  determineLMParameter  [RETURN_TYPE]  void  double[]  qy  double  delta  double[]  diag  double[]  work1  double[]  work2  double[]  work3  [VARIABLES]  int[]  permutation  boolean  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  qy  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  correction  costRelativeTolerance  delta  dirDer  dirJ  dk  dxNorm  fp  gNorm  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  parl  paru  pc2  preRed  previousCost  previousFP  qrRankingThreshold  r  ratio  s  sPar  sum  sum2  threshold  tmp  xK  xNorm  xk  ypk  int  countdown  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3922322702763681	530	530	2	replace	int  solvedCols  =  Math.min(parl,  rank);	  int    solvedCols    =    Math.min(rank,    parl);    	non-compiled	[CE]  <identifier>  expected	29	None	replace
207	[BUG]  [BUGGY]  float  solvedCols  =  Math.min(solvedCols,  total);  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      lmPar  =  0;  return;  }    double  sum2;  double  parl  =  0;  if  (rank  ==  solvedCols)  {      [BUGGY]  float  solvedCols  =  Math.min(solvedCols,  total);  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  work1[pj]  *=  diag[pj]  /  dxNorm;  }  sum2  =  0;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  double  sum  =  0;  for  (int  i  =  0;  i  <  j;  ++i)  {  sum  +=  jacobian[i][pj]  *  work1[permutation[i]];  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  determineLMParameter  [RETURN_TYPE]  void  double[]  qy  double  delta  double[]  diag  double[]  work1  double[]  work2  double[]  work3  [VARIABLES]  int[]  permutation  boolean  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  qy  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  correction  costRelativeTolerance  delta  dirDer  dirJ  dk  dxNorm  fp  gNorm  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  parl  paru  pc2  preRed  previousCost  previousFP  qrRankingThreshold  r  ratio  s  sPar  sum  sum2  threshold  tmp  xK  xNorm  xk  ypk  int  countdown  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3922322702763681	530	530	2	replace	float  solvedCols  =  Math.min(solvedCols,  total);	  float    solvedCols    =    Math.min(solvedCols,    sum2);    	non-compiled	[CE]  <identifier>  expected	64	None	replace
208	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  work2.length;  ++j)  {  for(int  j  =  0;  j  <  work2).length;  ++j)  {  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]      lmPar  =  0;  return;  }    double  sum2;  double  parl  =  0;  if  (rank  ==  solvedCols)  {      [BUGGY]  for(int  j  =  0;  j  <  work2.length;  ++j)  {  for(int  j  =  0;  j  <  work2).length;  ++j)  {  [BUGGY]      int  pj  =  permutation[j];  work1[pj]  *=  diag[pj]  /  dxNorm;  }  sum2  =  0;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  double  sum  =  0;  for  (int  i  =  0;  i  <  j;  ++i)  {  sum  +=  jacobian[i][pj]  *  work1[permutation[i]];  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  determineLMParameter  [RETURN_TYPE]  void  double[]  qy  double  delta  double[]  diag  double[]  work1  double[]  work2  double[]  work3  [VARIABLES]  int[]  permutation  boolean  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  qy  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  correction  costRelativeTolerance  delta  dirDer  dirJ  dk  dxNorm  fp  gNorm  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  parl  paru  pc2  preRed  previousCost  previousFP  qrRankingThreshold  r  ratio  s  sPar  sum  sum2  threshold  tmp  xK  xNorm  xk  ypk  int  countdown  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3922322702763681	530	530	2	replace	for(int    j    =    0;    j    <    work2.length;    ++j)    {    for(int  j  =  0;  j  <  work2).length;  ++j)  {	  	non-compiled	[CE]  ';'  expected	50	None	add
209	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  work1.length;  ++j)  {  for(int  j  =  0;  j  <  work2.length;  ++j)  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      lmPar  =  0;  return;  }    double  sum2;  double  parl  =  0;  if  (rank  ==  solvedCols)  {      [BUGGY]  for(int  j  =  0;  j  <  work1.length;  ++j)  {  for(int  j  =  0;  j  <  work2.length;  ++j)  {  [BUGGY]      int  pj  =  permutation[j];  work1[pj]  *=  diag[pj]  /  dxNorm;  }  sum2  =  0;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  double  sum  =  0;  for  (int  i  =  0;  i  <  j;  ++i)  {  sum  +=  jacobian[i][pj]  *  work1[permutation[i]];  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  determineLMParameter  [RETURN_TYPE]  void  double[]  qy  double  delta  double[]  diag  double[]  work1  double[]  work2  double[]  work3  [VARIABLES]  int[]  permutation  boolean  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  qy  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  correction  costRelativeTolerance  delta  dirDer  dirJ  dk  dxNorm  fp  gNorm  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  parl  paru  pc2  preRed  previousCost  previousFP  qrRankingThreshold  r  ratio  s  sPar  sum  sum2  threshold  tmp  xK  xNorm  xk  ypk  int  countdown  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3922322702763681	530	530	2	replace	for(int    j    =    0;    j    <    work1.length;    ++j)    {    for(int  j  =  0;  j  <  work2.length;  ++j)  {	  	non-compiled	[CE]  illegal  start  of  expression	54	None	add
210	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  checkedCols;  ++j)  {  [CE]  cannot  find  symbol  checkedCols  [FE]          AssertionFailedError      [CONTEXT]      lmPar  =  0;  return;  }    double  sum2;  double  parl  =  0;  if  (rank  ==  solvedCols)  {      [BUGGY]  for(int  j  =  0;  j  <  checkedCols;  ++j)  {  [BUGGY]      int  pj  =  permutation[j];  work1[pj]  *=  diag[pj]  /  dxNorm;  }  sum2  =  0;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  double  sum  =  0;  for  (int  i  =  0;  i  <  j;  ++i)  {  sum  +=  jacobian[i][pj]  *  work1[permutation[i]];  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  determineLMParameter  [RETURN_TYPE]  void  double[]  qy  double  delta  double[]  diag  double[]  work1  double[]  work2  double[]  work3  [VARIABLES]  int[]  permutation  boolean  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  qy  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  correction  costRelativeTolerance  delta  dirDer  dirJ  dk  dxNorm  fp  gNorm  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  parl  paru  pc2  preRed  previousCost  previousFP  qrRankingThreshold  r  ratio  s  sPar  sum  sum2  threshold  tmp  xK  xNorm  xk  ypk  int  countdown  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3922322702763681	530	530	2	replace	for(int  j  =  0;  j  <  checkedCols;  ++j)  {	  for(int    j    =    0;    j    <    resolvedCols;    ++j)    {    	non-compiled	[CE]  cannot  find  symbol  checkedCols	47	None	replace
211	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  permutation.length;  ++j)  {  if(j  =  0;  j  <  permutation.length;  ++j)  {  [CE]  ')'  expected  [FE]    AssertionFailedError    [CONTEXT]      lmPar  =  0;  return;  }    double  sum2;  double  parl  =  0;  if  (rank  ==  solvedCols)  {      [BUGGY]  for(int  j  =  0;  j  <  permutation.length;  ++j)  {  if(j  =  0;  j  <  permutation.length;  ++j)  {  [BUGGY]      int  pj  =  permutation[j];  work1[pj]  *=  diag[pj]  /  dxNorm;  }  sum2  =  0;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  double  sum  =  0;  for  (int  i  =  0;  i  <  j;  ++i)  {  sum  +=  jacobian[i][pj]  *  work1[permutation[i]];  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  determineLMParameter  [RETURN_TYPE]  void  double[]  qy  double  delta  double[]  diag  double[]  work1  double[]  work2  double[]  work3  [VARIABLES]  int[]  permutation  boolean  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  qy  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  correction  costRelativeTolerance  delta  dirDer  dirJ  dk  dxNorm  fp  gNorm  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  parl  paru  pc2  preRed  previousCost  previousFP  qrRankingThreshold  r  ratio  s  sPar  sum  sum2  threshold  tmp  xK  xNorm  xk  ypk  int  countdown  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3922322702763681	530	530	2	replace	for(int    j    =    0;    j    <    permutation.length;    ++j)    {    if(j  =  0;  j  <  permutation.length;  ++j)  {	  	non-compiled	[CE]  ')'  expected	52	None	add
212	[BUG]  [BUGGY]  Double  solvedCols  =  Math.min(solvedCols,  0);  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      lmPar  =  0;  return;  }    double  sum2;  double  parl  =  0;  if  (rank  ==  solvedCols)  {      [BUGGY]  Double  solvedCols  =  Math.min(solvedCols,  0);  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  work1[pj]  *=  diag[pj]  /  dxNorm;  }  sum2  =  0;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  double  sum  =  0;  for  (int  i  =  0;  i  <  j;  ++i)  {  sum  +=  jacobian[i][pj]  *  work1[permutation[i]];  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  determineLMParameter  [RETURN_TYPE]  void  double[]  qy  double  delta  double[]  diag  double[]  work1  double[]  work2  double[]  work3  [VARIABLES]  int[]  permutation  boolean  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  qy  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  correction  costRelativeTolerance  delta  dirDer  dirJ  dk  dxNorm  fp  gNorm  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  parl  paru  pc2  preRed  previousCost  previousFP  qrRankingThreshold  r  ratio  s  sPar  sum  sum2  threshold  tmp  xK  xNorm  xk  ypk  int  countdown  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3922322702763681	530	530	2	replace	Double  solvedCols  =  Math.min(solvedCols,  0);	  Double    solvedCols    =    Math.min(solvedCols,    sum2);    	non-compiled	[CE]  <identifier>  expected	37	None	replace
213	[BUG]  [BUGGY]  int  permutation[j]  =  work1[j]  /  diag;  [CE]  ']'  expected  [FE]                AssertionFailedError      [CONTEXT]      lmPar  =  0;  return;  }    double  sum2;  double  parl  =  0;  if  (rank  ==  solvedCols)  {      [BUGGY]  int  permutation[j]  =  work1[j]  /  diag;  [BUGGY]      int  pj  =  permutation[j];  work1[pj]  *=  diag[pj]  /  dxNorm;  }  sum2  =  0;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  double  sum  =  0;  for  (int  i  =  0;  i  <  j;  ++i)  {  sum  +=  jacobian[i][pj]  *  work1[permutation[i]];  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  determineLMParameter  [RETURN_TYPE]  void  double[]  qy  double  delta  double[]  diag  double[]  work1  double[]  work2  double[]  work3  [VARIABLES]  int[]  permutation  boolean  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  qy  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  correction  costRelativeTolerance  delta  dirDer  dirJ  dk  dxNorm  fp  gNorm  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  parl  paru  pc2  preRed  previousCost  previousFP  qrRankingThreshold  r  ratio  s  sPar  sum  sum2  threshold  tmp  xK  xNorm  xk  ypk  int  countdown  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3922322702763681	530	530	2	replace	int  permutation[j]  =  work1[j]  /  diag;	  int    permutation[j]    =    work1[j]    /    dxNorm;    	non-compiled	[CE]  ']'  expected	43	None	replace
214	[BUG]  [BUGGY]  int  permutation[j]  =  work1[0]  /  dxNorm;  [CE]  ']'  expected  [FE]                  AssertionFailedError      [CONTEXT]      lmPar  =  0;  return;  }    double  sum2;  double  parl  =  0;  if  (rank  ==  solvedCols)  {      [BUGGY]  int  permutation[j]  =  work1[0]  /  dxNorm;  [BUGGY]      int  pj  =  permutation[j];  work1[pj]  *=  diag[pj]  /  dxNorm;  }  sum2  =  0;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  double  sum  =  0;  for  (int  i  =  0;  i  <  j;  ++i)  {  sum  +=  jacobian[i][pj]  *  work1[permutation[i]];  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  determineLMParameter  [RETURN_TYPE]  void  double[]  qy  double  delta  double[]  diag  double[]  work1  double[]  work2  double[]  work3  [VARIABLES]  int[]  permutation  boolean  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  qy  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  correction  costRelativeTolerance  delta  dirDer  dirJ  dk  dxNorm  fp  gNorm  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  parl  paru  pc2  preRed  previousCost  previousFP  qrRankingThreshold  r  ratio  s  sPar  sum  sum2  threshold  tmp  xK  xNorm  xk  ypk  int  countdown  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3922322702763681	530	530	2	replace	int  permutation[j]  =  work1[0]  /  dxNorm;	  int    permutation[j]    =    work1[j]    /    dxNorm;    	non-compiled	[CE]  ']'  expected	43	None	replace
215	[BUG]  [BUGGY]  double  dxNorm  =  Math.sqrt(solvesCols,  parl);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      lmPar  =  0;  return;  }    double  sum2;  double  parl  =  0;  if  (rank  ==  solvedCols)  {      [BUGGY]  double  dxNorm  =  Math.sqrt(solvesCols,  parl);  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  work1[pj]  *=  diag[pj]  /  dxNorm;  }  sum2  =  0;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  double  sum  =  0;  for  (int  i  =  0;  i  <  j;  ++i)  {  sum  +=  jacobian[i][pj]  *  work1[permutation[i]];  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  determineLMParameter  [RETURN_TYPE]  void  double[]  qy  double  delta  double[]  diag  double[]  work1  double[]  work2  double[]  work3  [VARIABLES]  int[]  permutation  boolean  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  qy  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  correction  costRelativeTolerance  delta  dirDer  dirJ  dk  dxNorm  fp  gNorm  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  parl  paru  pc2  preRed  previousCost  previousFP  qrRankingThreshold  r  ratio  s  sPar  sum  sum2  threshold  tmp  xK  xNorm  xk  ypk  int  countdown  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3922322702763681	530	530	2	replace	double  dxNorm  =  Math.sqrt(solvesCols,  parl);	  double    dxNorm    =    Math.sqrt(parl,    solveCols);    	non-compiled	[CE]  <identifier>  expected	49	None	replace
216	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  work2.length;  ++j)  {  int  j  =  0;  j  <  parl;  ++j)  {  [CE]  >  expected  [FE]          AssertionFailedError      [CONTEXT]      lmPar  =  0;  return;  }    double  sum2;  double  parl  =  0;  if  (rank  ==  solvedCols)  {      [BUGGY]  for(int  j  =  0;  j  <  work2.length;  ++j)  {  int  j  =  0;  j  <  parl;  ++j)  {  [BUGGY]      int  pj  =  permutation[j];  work1[pj]  *=  diag[pj]  /  dxNorm;  }  sum2  =  0;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  double  sum  =  0;  for  (int  i  =  0;  i  <  j;  ++i)  {  sum  +=  jacobian[i][pj]  *  work1[permutation[i]];  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  determineLMParameter  [RETURN_TYPE]  void  double[]  qy  double  delta  double[]  diag  double[]  work1  double[]  work2  double[]  work3  [VARIABLES]  int[]  permutation  boolean  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  qy  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  correction  costRelativeTolerance  delta  dirDer  dirJ  dk  dxNorm  fp  gNorm  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  parl  paru  pc2  preRed  previousCost  previousFP  qrRankingThreshold  r  ratio  s  sPar  sum  sum2  threshold  tmp  xK  xNorm  xk  ypk  int  countdown  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3922322702763681	530	530	2	replace	for(int  j  =  0;  j  <  work2.length;  ++j)  {  int  j  =  0;  j  <  parl;  ++j)  {	  for(int    j    =    0;    j    <    parl;    ++j)    {    int    j    =    0;    j    <    parl;    ++j)    {    	non-compiled	[CE]  >  expected	16	None	replace
217	[BUG]  [BUGGY]  double  dxNorm  =  Math.rint(rank  -  1);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      lmPar  =  0;  return;  }    double  sum2;  double  parl  =  0;  if  (rank  ==  solvedCols)  {      [BUGGY]  double  dxNorm  =  Math.rint(rank  -  1);  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  work1[pj]  *=  diag[pj]  /  dxNorm;  }  sum2  =  0;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  double  sum  =  0;  for  (int  i  =  0;  i  <  j;  ++i)  {  sum  +=  jacobian[i][pj]  *  work1[permutation[i]];  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  determineLMParameter  [RETURN_TYPE]  void  double[]  qy  double  delta  double[]  diag  double[]  work1  double[]  work2  double[]  work3  [VARIABLES]  int[]  permutation  boolean  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  qy  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  correction  costRelativeTolerance  delta  dirDer  dirJ  dk  dxNorm  fp  gNorm  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  parl  paru  pc2  preRed  previousCost  previousFP  qrRankingThreshold  r  ratio  s  sPar  sum  sum2  threshold  tmp  xK  xNorm  xk  ypk  int  countdown  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3922322702763681	530	530	2	replace	double  dxNorm  =  Math.rint(rank  -  1);	  double    dxNorm    =    Math.rint(rank);    	non-compiled	[CE]  <identifier>  expected	24	None	replace
218	[BUG]  [BUGGY]  double  dxNorm  =  Math.abs(diag);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      lmPar  =  0;  return;  }    double  sum2;  double  parl  =  0;  if  (rank  ==  solvedCols)  {      [BUGGY]  double  dxNorm  =  Math.abs(diag);  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  work1[pj]  *=  diag[pj]  /  dxNorm;  }  sum2  =  0;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  double  sum  =  0;  for  (int  i  =  0;  i  <  j;  ++i)  {  sum  +=  jacobian[i][pj]  *  work1[permutation[i]];  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  determineLMParameter  [RETURN_TYPE]  void  double[]  qy  double  delta  double[]  diag  double[]  work1  double[]  work2  double[]  work3  [VARIABLES]  int[]  permutation  boolean  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  qy  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  correction  costRelativeTolerance  delta  dirDer  dirJ  dk  dxNorm  fp  gNorm  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  parl  paru  pc2  preRed  previousCost  previousFP  qrRankingThreshold  r  ratio  s  sPar  sum  sum2  threshold  tmp  xK  xNorm  xk  ypk  int  countdown  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3922322702763681	530	530	2	replace	double  dxNorm  =  Math.abs(diag);	  double    dxNorm    =    Math.abs(rank);    	non-compiled	[CE]  <identifier>  expected	65	None	replace
219	[BUG]  [BUGGY]  Double  solvedCols  =  Math.min(solvedCols,  total  -  1);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      lmPar  =  0;  return;  }    double  sum2;  double  parl  =  0;  if  (rank  ==  solvedCols)  {      [BUGGY]  Double  solvedCols  =  Math.min(solvedCols,  total  -  1);  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  work1[pj]  *=  diag[pj]  /  dxNorm;  }  sum2  =  0;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  double  sum  =  0;  for  (int  i  =  0;  i  <  j;  ++i)  {  sum  +=  jacobian[i][pj]  *  work1[permutation[i]];  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  determineLMParameter  [RETURN_TYPE]  void  double[]  qy  double  delta  double[]  diag  double[]  work1  double[]  work2  double[]  work3  [VARIABLES]  int[]  permutation  boolean  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  qy  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  correction  costRelativeTolerance  delta  dirDer  dirJ  dk  dxNorm  fp  gNorm  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  parl  paru  pc2  preRed  previousCost  previousFP  qrRankingThreshold  r  ratio  s  sPar  sum  sum2  threshold  tmp  xK  xNorm  xk  ypk  int  countdown  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3922322702763681	530	530	2	replace	Double  solvedCols  =  Math.min(solvedCols,  total  -  1);	  Double    solvedCols    =    Math.min(solvedCols,    sum2    -    1);    	non-compiled	[CE]  <identifier>  expected	34	None	replace
220	[BUG]  [BUGGY]  Double  solvedCols  =  Math.min(sum2,  solvedCols  -  1);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      lmPar  =  0;  return;  }    double  sum2;  double  parl  =  0;  if  (rank  ==  solvedCols)  {      [BUGGY]  Double  solvedCols  =  Math.min(sum2,  solvedCols  -  1);  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  work1[pj]  *=  diag[pj]  /  dxNorm;  }  sum2  =  0;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  double  sum  =  0;  for  (int  i  =  0;  i  <  j;  ++i)  {  sum  +=  jacobian[i][pj]  *  work1[permutation[i]];  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  determineLMParameter  [RETURN_TYPE]  void  double[]  qy  double  delta  double[]  diag  double[]  work1  double[]  work2  double[]  work3  [VARIABLES]  int[]  permutation  boolean  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  qy  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  correction  costRelativeTolerance  delta  dirDer  dirJ  dk  dxNorm  fp  gNorm  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  parl  paru  pc2  preRed  previousCost  previousFP  qrRankingThreshold  r  ratio  s  sPar  sum  sum2  threshold  tmp  xK  xNorm  xk  ypk  int  countdown  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3922322702763681	530	530	2	replace	Double  solvedCols  =  Math.min(sum2,  solvedCols  -  1);	  Double    solvedCols    =    Math.min(solvedCols,    sum2    -    1);    	non-compiled	[CE]  <identifier>  expected	34	None	replace
221	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  diag.length;  ++j)  {  if(j  >  0;  j  <  diag.length)  {  [CE]  ')'  expected  [FE]        AssertionFailedError      [CONTEXT]      lmPar  =  0;  return;  }    double  sum2;  double  parl  =  0;  if  (rank  ==  solvedCols)  {      [BUGGY]  for(int  j  =  0;  j  <  diag.length;  ++j)  {  if(j  >  0;  j  <  diag.length)  {  [BUGGY]      int  pj  =  permutation[j];  work1[pj]  *=  diag[pj]  /  dxNorm;  }  sum2  =  0;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  double  sum  =  0;  for  (int  i  =  0;  i  <  j;  ++i)  {  sum  +=  jacobian[i][pj]  *  work1[permutation[i]];  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  determineLMParameter  [RETURN_TYPE]  void  double[]  qy  double  delta  double[]  diag  double[]  work1  double[]  work2  double[]  work3  [VARIABLES]  int[]  permutation  boolean  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  qy  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  correction  costRelativeTolerance  delta  dirDer  dirJ  dk  dxNorm  fp  gNorm  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  parl  paru  pc2  preRed  previousCost  previousFP  qrRankingThreshold  r  ratio  s  sPar  sum  sum2  threshold  tmp  xK  xNorm  xk  ypk  int  countdown  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3922322702763681	530	530	2	replace	for(int  j  =  0;  j  <  diag.length;  ++j)  {  if(j  >  0;  j  <  diag.length)  {	  for(int    j    =    0;    j    <    diag.length;    ++j)    {    if(j    =    0;    j    <    diag.length;    ++j)    {    	non-compiled	[CE]  ')'  expected	57	None	replace
222	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  work2.length;  ++j)  {  if(j  =  0;  j  <  diag.length;  ++j)  {  [CE]  ')'  expected  [FE]          AssertionFailedError      [CONTEXT]      lmPar  =  0;  return;  }    double  sum2;  double  parl  =  0;  if  (rank  ==  solvedCols)  {      [BUGGY]  for(int  j  =  0;  j  <  work2.length;  ++j)  {  if(j  =  0;  j  <  diag.length;  ++j)  {  [BUGGY]      int  pj  =  permutation[j];  work1[pj]  *=  diag[pj]  /  dxNorm;  }  sum2  =  0;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  double  sum  =  0;  for  (int  i  =  0;  i  <  j;  ++i)  {  sum  +=  jacobian[i][pj]  *  work1[permutation[i]];  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  determineLMParameter  [RETURN_TYPE]  void  double[]  qy  double  delta  double[]  diag  double[]  work1  double[]  work2  double[]  work3  [VARIABLES]  int[]  permutation  boolean  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  qy  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  correction  costRelativeTolerance  delta  dirDer  dirJ  dk  dxNorm  fp  gNorm  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  parl  paru  pc2  preRed  previousCost  previousFP  qrRankingThreshold  r  ratio  s  sPar  sum  sum2  threshold  tmp  xK  xNorm  xk  ypk  int  countdown  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3922322702763681	530	530	2	replace	for(int  j  =  0;  j  <  work2.length;  ++j)  {  if(j  =  0;  j  <  diag.length;  ++j)  {	  for(int    j    =    0;    j    <    diag.length;    ++j)    {    if(j    =    0;    j    <    diag.length;    ++j)    {    	non-compiled	[CE]  ')'  expected	57	None	replace
223	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  diag.length;  ++j)  {  if(j  <  0  ||  j  >  0)  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      lmPar  =  0;  return;  }    double  sum2;  double  parl  =  0;  if  (rank  ==  solvedCols)  {      [BUGGY]  for(int  j  =  0;  j  <  diag.length;  ++j)  {  if(j  <  0  ||  j  >  0)  {  [BUGGY]      int  pj  =  permutation[j];  work1[pj]  *=  diag[pj]  /  dxNorm;  }  sum2  =  0;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  double  sum  =  0;  for  (int  i  =  0;  i  <  j;  ++i)  {  sum  +=  jacobian[i][pj]  *  work1[permutation[i]];  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  determineLMParameter  [RETURN_TYPE]  void  double[]  qy  double  delta  double[]  diag  double[]  work1  double[]  work2  double[]  work3  [VARIABLES]  int[]  permutation  boolean  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  qy  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  correction  costRelativeTolerance  delta  dirDer  dirJ  dk  dxNorm  fp  gNorm  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  parl  paru  pc2  preRed  previousCost  previousFP  qrRankingThreshold  r  ratio  s  sPar  sum  sum2  threshold  tmp  xK  xNorm  xk  ypk  int  countdown  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3922322702763681	530	530	2	replace	for(int  j  =  0;  j  <  diag.length;  ++j)  {  if(j  <  0  ||  j  >  0)  {	  for(int    j    =    0;    j    <    diag.length;    ++j)    {    if(j    =    0;    j    <    diag.length;    ++j)    {    	non-compiled	[CE]  illegal  start  of  expression	57	None	replace
224	[BUG]  [BUGGY]  int  permutation[j]  =  Math.abs(work1[j]  /  diag[0]);  [CE]  ']'  expected  [FE]                    AssertionFailedError      [CONTEXT]      lmPar  =  0;  return;  }    double  sum2;  double  parl  =  0;  if  (rank  ==  solvedCols)  {      [BUGGY]  int  permutation[j]  =  Math.abs(work1[j]  /  diag[0]);  [BUGGY]      int  pj  =  permutation[j];  work1[pj]  *=  diag[pj]  /  dxNorm;  }  sum2  =  0;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  double  sum  =  0;  for  (int  i  =  0;  i  <  j;  ++i)  {  sum  +=  jacobian[i][pj]  *  work1[permutation[i]];  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  determineLMParameter  [RETURN_TYPE]  void  double[]  qy  double  delta  double[]  diag  double[]  work1  double[]  work2  double[]  work3  [VARIABLES]  int[]  permutation  boolean  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  qy  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  correction  costRelativeTolerance  delta  dirDer  dirJ  dk  dxNorm  fp  gNorm  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  parl  paru  pc2  preRed  previousCost  previousFP  qrRankingThreshold  r  ratio  s  sPar  sum  sum2  threshold  tmp  xK  xNorm  xk  ypk  int  countdown  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3922322702763681	530	530	2	replace	int  permutation[j]  =  Math.abs(work1[j]  /  diag[0]);	  int    permutation[j]    =    Math.abs(work1[j]    /    dxNorm);    	non-compiled	[CE]  ']'  expected	45	None	replace
225	[BUG]  [BUGGY]  int  permutation[j]  =  Math.abs(work2[j]  /  dxNorm);  [CE]  ']'  expected  [FE]                      AssertionFailedError      [CONTEXT]      lmPar  =  0;  return;  }    double  sum2;  double  parl  =  0;  if  (rank  ==  solvedCols)  {      [BUGGY]  int  permutation[j]  =  Math.abs(work2[j]  /  dxNorm);  [BUGGY]      int  pj  =  permutation[j];  work1[pj]  *=  diag[pj]  /  dxNorm;  }  sum2  =  0;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  double  sum  =  0;  for  (int  i  =  0;  i  <  j;  ++i)  {  sum  +=  jacobian[i][pj]  *  work1[permutation[i]];  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  determineLMParameter  [RETURN_TYPE]  void  double[]  qy  double  delta  double[]  diag  double[]  work1  double[]  work2  double[]  work3  [VARIABLES]  int[]  permutation  boolean  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  qy  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  correction  costRelativeTolerance  delta  dirDer  dirJ  dk  dxNorm  fp  gNorm  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  parl  paru  pc2  preRed  previousCost  previousFP  qrRankingThreshold  r  ratio  s  sPar  sum  sum2  threshold  tmp  xK  xNorm  xk  ypk  int  countdown  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3922322702763681	530	530	2	replace	int  permutation[j]  =  Math.abs(work2[j]  /  dxNorm);	  int    permutation[j]    =    Math.abs(work1[j]    /    dxNorm);    	non-compiled	[CE]  ']'  expected	45	None	replace
226	[BUG]  [BUGGY]  Double  solvedCols  =  Math.min(resolvedCols,  parl);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      lmPar  =  0;  return;  }    double  sum2;  double  parl  =  0;  if  (rank  ==  solvedCols)  {      [BUGGY]  Double  solvedCols  =  Math.min(resolvedCols,  parl);  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  work1[pj]  *=  diag[pj]  /  dxNorm;  }  sum2  =  0;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  double  sum  =  0;  for  (int  i  =  0;  i  <  j;  ++i)  {  sum  +=  jacobian[i][pj]  *  work1[permutation[i]];  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  determineLMParameter  [RETURN_TYPE]  void  double[]  qy  double  delta  double[]  diag  double[]  work1  double[]  work2  double[]  work3  [VARIABLES]  int[]  permutation  boolean  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  qy  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  correction  costRelativeTolerance  delta  dirDer  dirJ  dk  dxNorm  fp  gNorm  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  parl  paru  pc2  preRed  previousCost  previousFP  qrRankingThreshold  r  ratio  s  sPar  sum  sum2  threshold  tmp  xK  xNorm  xk  ypk  int  countdown  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3922322702763681	530	530	2	replace	Double  solvedCols  =  Math.min(resolvedCols,  parl);	  Double    solvedCols    =    Math.min(solvedCols,    parl);    	non-compiled	[CE]  <identifier>  expected	40	None	replace
227	[BUG]  [BUGGY]  Double  solvedCols  =  Math.min(solvedCols,  total);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      lmPar  =  0;  return;  }    double  sum2;  double  parl  =  0;  if  (rank  ==  solvedCols)  {      [BUGGY]  Double  solvedCols  =  Math.min(solvedCols,  total);  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  work1[pj]  *=  diag[pj]  /  dxNorm;  }  sum2  =  0;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  double  sum  =  0;  for  (int  i  =  0;  i  <  j;  ++i)  {  sum  +=  jacobian[i][pj]  *  work1[permutation[i]];  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  determineLMParameter  [RETURN_TYPE]  void  double[]  qy  double  delta  double[]  diag  double[]  work1  double[]  work2  double[]  work3  [VARIABLES]  int[]  permutation  boolean  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  qy  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  correction  costRelativeTolerance  delta  dirDer  dirJ  dk  dxNorm  fp  gNorm  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  parl  paru  pc2  preRed  previousCost  previousFP  qrRankingThreshold  r  ratio  s  sPar  sum  sum2  threshold  tmp  xK  xNorm  xk  ypk  int  countdown  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3922322702763681	530	530	2	replace	Double  solvedCols  =  Math.min(solvedCols,  total);	  Double    solvedCols    =    Math.min(solvedCols,    parl);    	non-compiled	[CE]  <identifier>  expected	40	None	replace
228	[BUG]  [BUGGY]  Integer  solvedCols  =  Math.min(solvedCols,  sum2);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      lmPar  =  0;  return;  }    double  sum2;  double  parl  =  0;  if  (rank  ==  solvedCols)  {      [BUGGY]  Integer  solvedCols  =  Math.min(solvedCols,  sum2);  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  work1[pj]  *=  diag[pj]  /  dxNorm;  }  sum2  =  0;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  double  sum  =  0;  for  (int  i  =  0;  i  <  j;  ++i)  {  sum  +=  jacobian[i][pj]  *  work1[permutation[i]];  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  determineLMParameter  [RETURN_TYPE]  void  double[]  qy  double  delta  double[]  diag  double[]  work1  double[]  work2  double[]  work3  [VARIABLES]  int[]  permutation  boolean  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  qy  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  correction  costRelativeTolerance  delta  dirDer  dirJ  dk  dxNorm  fp  gNorm  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  parl  paru  pc2  preRed  previousCost  previousFP  qrRankingThreshold  r  ratio  s  sPar  sum  sum2  threshold  tmp  xK  xNorm  xk  ypk  int  countdown  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3922322702763681	530	530	2	replace	Integer  solvedCols  =  Math.min(solvedCols,  sum2);	  long    solvedCols    =    Math.min(solvedCols,    sum2);    	non-compiled	[CE]  <identifier>  expected	38	None	replace
229	[BUG]  [BUGGY]  float  solvedCols  =  Math.min(solvedCols,  total  -  1);  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      lmPar  =  0;  return;  }    double  sum2;  double  parl  =  0;  if  (rank  ==  solvedCols)  {      [BUGGY]  float  solvedCols  =  Math.min(solvedCols,  total  -  1);  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  work1[pj]  *=  diag[pj]  /  dxNorm;  }  sum2  =  0;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  double  sum  =  0;  for  (int  i  =  0;  i  <  j;  ++i)  {  sum  +=  jacobian[i][pj]  *  work1[permutation[i]];  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  determineLMParameter  [RETURN_TYPE]  void  double[]  qy  double  delta  double[]  diag  double[]  work1  double[]  work2  double[]  work3  [VARIABLES]  int[]  permutation  boolean  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  qy  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  correction  costRelativeTolerance  delta  dirDer  dirJ  dk  dxNorm  fp  gNorm  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  parl  paru  pc2  preRed  previousCost  previousFP  qrRankingThreshold  r  ratio  s  sPar  sum  sum2  threshold  tmp  xK  xNorm  xk  ypk  int  countdown  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3922322702763681	530	530	2	replace	float  solvedCols  =  Math.min(solvedCols,  total  -  1);	  float    solvedCols    =    Math.min(solvedCols,    sum2    -    1);    	non-compiled	[CE]  <identifier>  expected	59	None	replace
230	[BUG]  [BUGGY]  For(int  j  =  0;  j  <  dxNorm.length;  ++j)  {  [CE]  '.class'  expected  [FE]            AssertionFailedError      [CONTEXT]      lmPar  =  0;  return;  }    double  sum2;  double  parl  =  0;  if  (rank  ==  solvedCols)  {      [BUGGY]  For(int  j  =  0;  j  <  dxNorm.length;  ++j)  {  [BUGGY]      int  pj  =  permutation[j];  work1[pj]  *=  diag[pj]  /  dxNorm;  }  sum2  =  0;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  double  sum  =  0;  for  (int  i  =  0;  i  <  j;  ++i)  {  sum  +=  jacobian[i][pj]  *  work1[permutation[i]];  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  determineLMParameter  [RETURN_TYPE]  void  double[]  qy  double  delta  double[]  diag  double[]  work1  double[]  work2  double[]  work3  [VARIABLES]  int[]  permutation  boolean  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  qy  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  correction  costRelativeTolerance  delta  dirDer  dirJ  dk  dxNorm  fp  gNorm  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  parl  paru  pc2  preRed  previousCost  previousFP  qrRankingThreshold  r  ratio  s  sPar  sum  sum2  threshold  tmp  xK  xNorm  xk  ypk  int  countdown  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3922322702763681	530	530	2	replace	For(int  j  =  0;  j  <  dxNorm.length;  ++j)  {	  for(int    j    =    0;    j    <    diag.length;    ++j)    {    For(int    j    =    0;    j    <    diag.length;    ++j)    {    	non-compiled	[CE]  '.class'  expected	3	None	replace
231	[BUG]  [BUGGY]  double  solvedCols  =  Math.min(solvedCols,  qy);  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      lmPar  =  0;  return;  }    double  sum2;  double  parl  =  0;  if  (rank  ==  solvedCols)  {      [BUGGY]  double  solvedCols  =  Math.min(solvedCols,  qy);  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  work1[pj]  *=  diag[pj]  /  dxNorm;  }  sum2  =  0;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  double  sum  =  0;  for  (int  i  =  0;  i  <  j;  ++i)  {  sum  +=  jacobian[i][pj]  *  work1[permutation[i]];  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  determineLMParameter  [RETURN_TYPE]  void  double[]  qy  double  delta  double[]  diag  double[]  work1  double[]  work2  double[]  work3  [VARIABLES]  int[]  permutation  boolean  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  qy  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  correction  costRelativeTolerance  delta  dirDer  dirJ  dk  dxNorm  fp  gNorm  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  parl  paru  pc2  preRed  previousCost  previousFP  qrRankingThreshold  r  ratio  s  sPar  sum  sum2  threshold  tmp  xK  xNorm  xk  ypk  int  countdown  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3922322702763681	530	530	2	replace	double  solvedCols  =  Math.min(solvedCols,  qy);	  double    solvedCols    =    Math.min(solvedCols,    sum2);    	non-compiled	[CE]  <identifier>  expected	36	None	replace
232	[BUG]  [BUGGY]  Double  solvedCols  =  Math.min(sum2,  solvedCols);  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      lmPar  =  0;  return;  }    double  sum2;  double  parl  =  0;  if  (rank  ==  solvedCols)  {      [BUGGY]  Double  solvedCols  =  Math.min(sum2,  solvedCols);  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  work1[pj]  *=  diag[pj]  /  dxNorm;  }  sum2  =  0;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  double  sum  =  0;  for  (int  i  =  0;  i  <  j;  ++i)  {  sum  +=  jacobian[i][pj]  *  work1[permutation[i]];  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  determineLMParameter  [RETURN_TYPE]  void  double[]  qy  double  delta  double[]  diag  double[]  work1  double[]  work2  double[]  work3  [VARIABLES]  int[]  permutation  boolean  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  qy  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  correction  costRelativeTolerance  delta  dirDer  dirJ  dk  dxNorm  fp  gNorm  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  parl  paru  pc2  preRed  previousCost  previousFP  qrRankingThreshold  r  ratio  s  sPar  sum  sum2  threshold  tmp  xK  xNorm  xk  ypk  int  countdown  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3922322702763681	530	530	2	replace	Double  solvedCols  =  Math.min(sum2,  solvedCols);	  Double    solvedCols    =    Math.min(solvedCols,    sum2);    	non-compiled	[CE]  <identifier>  expected	37	None	replace
233	[BUG]  [BUGGY]  int  solvedCols  =  Math.min(solvedCols,  parl  *  1);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      lmPar  =  0;  return;  }    double  sum2;  double  parl  =  0;  if  (rank  ==  solvedCols)  {      [BUGGY]  int  solvedCols  =  Math.min(solvedCols,  parl  *  1);  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  work1[pj]  *=  diag[pj]  /  dxNorm;  }  sum2  =  0;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  double  sum  =  0;  for  (int  i  =  0;  i  <  j;  ++i)  {  sum  +=  jacobian[i][pj]  *  work1[permutation[i]];  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  determineLMParameter  [RETURN_TYPE]  void  double[]  qy  double  delta  double[]  diag  double[]  work1  double[]  work2  double[]  work3  [VARIABLES]  int[]  permutation  boolean  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  qy  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  correction  costRelativeTolerance  delta  dirDer  dirJ  dk  dxNorm  fp  gNorm  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  parl  paru  pc2  preRed  previousCost  previousFP  qrRankingThreshold  r  ratio  s  sPar  sum  sum2  threshold  tmp  xK  xNorm  xk  ypk  int  countdown  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3922322702763681	530	530	2	replace	int  solvedCols  =  Math.min(solvedCols,  parl  *  1);	  int    solvedCols    =    Math.min(solvedCols,    parl    +    1);    	non-compiled	[CE]  <identifier>  expected	71	None	replace
234	[BUG]  [BUGGY]  int  solvedCols  =  Math.min(parl,  solvedCols  -  1);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      lmPar  =  0;  return;  }    double  sum2;  double  parl  =  0;  if  (rank  ==  solvedCols)  {      [BUGGY]  int  solvedCols  =  Math.min(parl,  solvedCols  -  1);  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  work1[pj]  *=  diag[pj]  /  dxNorm;  }  sum2  =  0;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  double  sum  =  0;  for  (int  i  =  0;  i  <  j;  ++i)  {  sum  +=  jacobian[i][pj]  *  work1[permutation[i]];  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  determineLMParameter  [RETURN_TYPE]  void  double[]  qy  double  delta  double[]  diag  double[]  work1  double[]  work2  double[]  work3  [VARIABLES]  int[]  permutation  boolean  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  qy  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  correction  costRelativeTolerance  delta  dirDer  dirJ  dk  dxNorm  fp  gNorm  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  parl  paru  pc2  preRed  previousCost  previousFP  qrRankingThreshold  r  ratio  s  sPar  sum  sum2  threshold  tmp  xK  xNorm  xk  ypk  int  countdown  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3922322702763681	530	530	2	replace	int  solvedCols  =  Math.min(parl,  solvedCols  -  1);	  int    solvedCols    =    Math.min(resolvedCols,    parl    -    1);    	non-compiled	[CE]  <identifier>  expected	78	None	replace
235	[BUG]  [BUGGY]  double  solvedCols  =  Math.min(solvedCols,  parl  +  1);  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      lmPar  =  0;  return;  }    double  sum2;  double  parl  =  0;  if  (rank  ==  solvedCols)  {      [BUGGY]  double  solvedCols  =  Math.min(solvedCols,  parl  +  1);  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  work1[pj]  *=  diag[pj]  /  dxNorm;  }  sum2  =  0;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  double  sum  =  0;  for  (int  i  =  0;  i  <  j;  ++i)  {  sum  +=  jacobian[i][pj]  *  work1[permutation[i]];  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  determineLMParameter  [RETURN_TYPE]  void  double[]  qy  double  delta  double[]  diag  double[]  work1  double[]  work2  double[]  work3  [VARIABLES]  int[]  permutation  boolean  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  qy  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  correction  costRelativeTolerance  delta  dirDer  dirJ  dk  dxNorm  fp  gNorm  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  parl  paru  pc2  preRed  previousCost  previousFP  qrRankingThreshold  r  ratio  s  sPar  sum  sum2  threshold  tmp  xK  xNorm  xk  ypk  int  countdown  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3922322702763681	530	530	2	replace	double  solvedCols  =  Math.min(solvedCols,  parl  +  1);	  double    solvedCols    =    Math.min(solvedCols,    parl);    	non-compiled	[CE]  <identifier>  expected	39	None	replace
236	[BUG]  [BUGGY]  int  solvedCols  =  Math.min(diag,  parl);  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      lmPar  =  0;  return;  }    double  sum2;  double  parl  =  0;  if  (rank  ==  solvedCols)  {      [BUGGY]  int  solvedCols  =  Math.min(diag,  parl);  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  work1[pj]  *=  diag[pj]  /  dxNorm;  }  sum2  =  0;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  double  sum  =  0;  for  (int  i  =  0;  i  <  j;  ++i)  {  sum  +=  jacobian[i][pj]  *  work1[permutation[i]];  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  determineLMParameter  [RETURN_TYPE]  void  double[]  qy  double  delta  double[]  diag  double[]  work1  double[]  work2  double[]  work3  [VARIABLES]  int[]  permutation  boolean  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  qy  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  correction  costRelativeTolerance  delta  dirDer  dirJ  dk  dxNorm  fp  gNorm  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  parl  paru  pc2  preRed  previousCost  previousFP  qrRankingThreshold  r  ratio  s  sPar  sum  sum2  threshold  tmp  xK  xNorm  xk  ypk  int  countdown  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3922322702763681	530	530	2	replace	int  solvedCols  =  Math.min(diag,  parl);	  int    solvedCols    =    Math.min(diag,    0);    	non-compiled	[CE]  <identifier>  expected	68	None	replace
237	[BUG]  [BUGGY]  double  dxNorm  =  Math.rint(diagNorm);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      lmPar  =  0;  return;  }    double  sum2;  double  parl  =  0;  if  (rank  ==  solvedCols)  {      [BUGGY]  double  dxNorm  =  Math.rint(diagNorm);  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  work1[pj]  *=  diag[pj]  /  dxNorm;  }  sum2  =  0;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  double  sum  =  0;  for  (int  i  =  0;  i  <  j;  ++i)  {  sum  +=  jacobian[i][pj]  *  work1[permutation[i]];  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  determineLMParameter  [RETURN_TYPE]  void  double[]  qy  double  delta  double[]  diag  double[]  work1  double[]  work2  double[]  work3  [VARIABLES]  int[]  permutation  boolean  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  qy  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  correction  costRelativeTolerance  delta  dirDer  dirJ  dk  dxNorm  fp  gNorm  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  parl  paru  pc2  preRed  previousCost  previousFP  qrRankingThreshold  r  ratio  s  sPar  sum  sum2  threshold  tmp  xK  xNorm  xk  ypk  int  countdown  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3922322702763681	530	530	2	replace	double  dxNorm  =  Math.rint(diagNorm);	  double    dxNorm    =    Math.rint(rank);    	non-compiled	[CE]  <identifier>  expected	24	None	replace
238	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  with  diag.length  =  0;  j  <  diag.length;  ++j)  {  }  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      lmPar  =  0;  return;  }    double  sum2;  double  parl  =  0;  if  (rank  ==  solvedCols)  {      [BUGGY]  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  with  diag.length  =  0;  j  <  diag.length;  ++j)  {  }  [BUGGY]      int  pj  =  permutation[j];  work1[pj]  *=  diag[pj]  /  dxNorm;  }  sum2  =  0;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  double  sum  =  0;  for  (int  i  =  0;  i  <  j;  ++i)  {  sum  +=  jacobian[i][pj]  *  work1[permutation[i]];  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  determineLMParameter  [RETURN_TYPE]  void  double[]  qy  double  delta  double[]  diag  double[]  work1  double[]  work2  double[]  work3  [VARIABLES]  int[]  permutation  boolean  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  qy  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  correction  costRelativeTolerance  delta  dirDer  dirJ  dk  dxNorm  fp  gNorm  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  parl  paru  pc2  preRed  previousCost  previousFP  qrRankingThreshold  r  ratio  s  sPar  sum  sum2  threshold  tmp  xK  xNorm  xk  ypk  int  countdown  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3922322702763681	530	530	2	replace	for(int  j  =  0;  j  <  solvedCols;  ++j)  {  with  diag.length  =  0;  j  <  diag.length;  ++j)  {  }	  for(int    j    =    0;    j    <    diag.length;    ++j)    {    with    diag.length    =    0;    j    <    diag.length;    ++j)    {    	non-compiled	[CE]  ';'  expected	5	None	replace
239	[BUG]  [BUGGY]  double  dxNorm  =  Math.abs(level  -  solvedCols);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      lmPar  =  0;  return;  }    double  sum2;  double  parl  =  0;  if  (rank  ==  solvedCols)  {      [BUGGY]  double  dxNorm  =  Math.abs(level  -  solvedCols);  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  work1[pj]  *=  diag[pj]  /  dxNorm;  }  sum2  =  0;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  double  sum  =  0;  for  (int  i  =  0;  i  <  j;  ++i)  {  sum  +=  jacobian[i][pj]  *  work1[permutation[i]];  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  determineLMParameter  [RETURN_TYPE]  void  double[]  qy  double  delta  double[]  diag  double[]  work1  double[]  work2  double[]  work3  [VARIABLES]  int[]  permutation  boolean  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  qy  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  correction  costRelativeTolerance  delta  dirDer  dirJ  dk  dxNorm  fp  gNorm  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  parl  paru  pc2  preRed  previousCost  previousFP  qrRankingThreshold  r  ratio  s  sPar  sum  sum2  threshold  tmp  xK  xNorm  xk  ypk  int  countdown  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3922322702763681	530	530	2	replace	double  dxNorm  =  Math.abs(level  -  solvedCols);	  double    dxNorm    =    Math.abs(diagR    -    solvedCols);    	non-compiled	[CE]  <identifier>  expected	21	None	replace
240	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  Integer  j  =  0;  j  <  parl;  ++j)  {  }  [CE]  >  expected  [FE]              AssertionFailedError      [CONTEXT]      lmPar  =  0;  return;  }    double  sum2;  double  parl  =  0;  if  (rank  ==  solvedCols)  {      [BUGGY]  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  Integer  j  =  0;  j  <  parl;  ++j)  {  }  [BUGGY]      int  pj  =  permutation[j];  work1[pj]  *=  diag[pj]  /  dxNorm;  }  sum2  =  0;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  double  sum  =  0;  for  (int  i  =  0;  i  <  j;  ++i)  {  sum  +=  jacobian[i][pj]  *  work1[permutation[i]];  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  determineLMParameter  [RETURN_TYPE]  void  double[]  qy  double  delta  double[]  diag  double[]  work1  double[]  work2  double[]  work3  [VARIABLES]  int[]  permutation  boolean  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  qy  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  correction  costRelativeTolerance  delta  dirDer  dirJ  dk  dxNorm  fp  gNorm  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  parl  paru  pc2  preRed  previousCost  previousFP  qrRankingThreshold  r  ratio  s  sPar  sum  sum2  threshold  tmp  xK  xNorm  xk  ypk  int  countdown  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3922322702763681	530	530	2	replace	for(int  j  =  0;  j  <  solvedCols;  ++j)  {  Integer  j  =  0;  j  <  parl;  ++j)  {  }	  for(int    j    =    0;    j    <    parl;    ++j)    {    Integer    j    =    0;    j    <    parl;    ++j)    {    	non-compiled	[CE]  >  expected	18	None	replace
241	[BUG]  [BUGGY]  double  dxNorm  =  Math.abs(diag[0]  +  parl);  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      lmPar  =  0;  return;  }    double  sum2;  double  parl  =  0;  if  (rank  ==  solvedCols)  {      [BUGGY]  double  dxNorm  =  Math.abs(diag[0]  +  parl);  [BUGGY]      int  pj  =  permutation[j];  work1[pj]  *=  diag[pj]  /  dxNorm;  }  sum2  =  0;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  double  sum  =  0;  for  (int  i  =  0;  i  <  j;  ++i)  {  sum  +=  jacobian[i][pj]  *  work1[permutation[i]];  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  determineLMParameter  [RETURN_TYPE]  void  double[]  qy  double  delta  double[]  diag  double[]  work1  double[]  work2  double[]  work3  [VARIABLES]  int[]  permutation  boolean  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  qy  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  correction  costRelativeTolerance  delta  dirDer  dirJ  dk  dxNorm  fp  gNorm  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  parl  paru  pc2  preRed  previousCost  previousFP  qrRankingThreshold  r  ratio  s  sPar  sum  sum2  threshold  tmp  xK  xNorm  xk  ypk  int  countdown  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3922322702763681	530	530	2	replace	double  dxNorm  =  Math.abs(diag[0]  +  parl);	  double    dxNorm    =    Math.abs(diag[0]);    	non-compiled	[CE]  <identifier>  expected	75	None	replace
242	[BUG]  [BUGGY]  double  dxNorm  =  Math.sqrt(diag,  parl  +  1);  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      lmPar  =  0;  return;  }    double  sum2;  double  parl  =  0;  if  (rank  ==  solvedCols)  {      [BUGGY]  double  dxNorm  =  Math.sqrt(diag,  parl  +  1);  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  work1[pj]  *=  diag[pj]  /  dxNorm;  }  sum2  =  0;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  double  sum  =  0;  for  (int  i  =  0;  i  <  j;  ++i)  {  sum  +=  jacobian[i][pj]  *  work1[permutation[i]];  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  determineLMParameter  [RETURN_TYPE]  void  double[]  qy  double  delta  double[]  diag  double[]  work1  double[]  work2  double[]  work3  [VARIABLES]  int[]  permutation  boolean  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  qy  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  correction  costRelativeTolerance  delta  dirDer  dirJ  dk  dxNorm  fp  gNorm  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  parl  paru  pc2  preRed  previousCost  previousFP  qrRankingThreshold  r  ratio  s  sPar  sum  sum2  threshold  tmp  xK  xNorm  xk  ypk  int  countdown  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3922322702763681	530	530	2	replace	double  dxNorm  =  Math.sqrt(diag,  parl  +  1);	  double    dxNorm    =    Math.sqrt(diag,    parl);    	non-compiled	[CE]  <identifier>  expected	73	None	replace
243	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  if(j  <  0;  j  <  diag.length)  {  [CE]  ')'  expected  [FE]        AssertionFailedError      [CONTEXT]      lmPar  =  0;  return;  }    double  sum2;  double  parl  =  0;  if  (rank  ==  solvedCols)  {      [BUGGY]  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  if(j  <  0;  j  <  diag.length)  {  [BUGGY]      int  pj  =  permutation[j];  work1[pj]  *=  diag[pj]  /  dxNorm;  }  sum2  =  0;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  double  sum  =  0;  for  (int  i  =  0;  i  <  j;  ++i)  {  sum  +=  jacobian[i][pj]  *  work1[permutation[i]];  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  determineLMParameter  [RETURN_TYPE]  void  double[]  qy  double  delta  double[]  diag  double[]  work1  double[]  work2  double[]  work3  [VARIABLES]  int[]  permutation  boolean  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  qy  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  correction  costRelativeTolerance  delta  dirDer  dirJ  dk  dxNorm  fp  gNorm  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  parl  paru  pc2  preRed  previousCost  previousFP  qrRankingThreshold  r  ratio  s  sPar  sum  sum2  threshold  tmp  xK  xNorm  xk  ypk  int  countdown  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3922322702763681	530	530	2	replace	for(int  j  =  0;  j  <  solvedCols;  ++j)  {  if(j  <  0;  j  <  diag.length)  {	  for(int    j    =    0;    j    <    diag.length;    ++j)    {    if(j    =    0;    j    <    diag.length;    ++j)    {    	non-compiled	[CE]  ')'  expected	57	None	replace
244	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  if(j  >  0;  j  <  diag.length)  {  [CE]  ')'  expected  [FE]          AssertionFailedError      [CONTEXT]      lmPar  =  0;  return;  }    double  sum2;  double  parl  =  0;  if  (rank  ==  solvedCols)  {      [BUGGY]  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  if(j  >  0;  j  <  diag.length)  {  [BUGGY]      int  pj  =  permutation[j];  work1[pj]  *=  diag[pj]  /  dxNorm;  }  sum2  =  0;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  double  sum  =  0;  for  (int  i  =  0;  i  <  j;  ++i)  {  sum  +=  jacobian[i][pj]  *  work1[permutation[i]];  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  determineLMParameter  [RETURN_TYPE]  void  double[]  qy  double  delta  double[]  diag  double[]  work1  double[]  work2  double[]  work3  [VARIABLES]  int[]  permutation  boolean  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  qy  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  correction  costRelativeTolerance  delta  dirDer  dirJ  dk  dxNorm  fp  gNorm  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  parl  paru  pc2  preRed  previousCost  previousFP  qrRankingThreshold  r  ratio  s  sPar  sum  sum2  threshold  tmp  xK  xNorm  xk  ypk  int  countdown  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3922322702763681	530	530	2	replace	for(int  j  =  0;  j  <  solvedCols;  ++j)  {  if(j  >  0;  j  <  diag.length)  {	  for(int    j    =    0;    j    <    diag.length;    ++j)    {    if(j    =    0;    j    <    diag.length;    ++j)    {    	non-compiled	[CE]  ')'  expected	57	None	replace
245	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  solvedCols.length;  ++j)  {  if(j  <  0;  j  <  diag.length)  {  [CE]  ')'  expected  [FE]            AssertionFailedError      [CONTEXT]      lmPar  =  0;  return;  }    double  sum2;  double  parl  =  0;  if  (rank  ==  solvedCols)  {      [BUGGY]  for(int  j  =  0;  j  <  solvedCols.length;  ++j)  {  if(j  <  0;  j  <  diag.length)  {  [BUGGY]      int  pj  =  permutation[j];  work1[pj]  *=  diag[pj]  /  dxNorm;  }  sum2  =  0;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  double  sum  =  0;  for  (int  i  =  0;  i  <  j;  ++i)  {  sum  +=  jacobian[i][pj]  *  work1[permutation[i]];  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  determineLMParameter  [RETURN_TYPE]  void  double[]  qy  double  delta  double[]  diag  double[]  work1  double[]  work2  double[]  work3  [VARIABLES]  int[]  permutation  boolean  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  qy  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  correction  costRelativeTolerance  delta  dirDer  dirJ  dk  dxNorm  fp  gNorm  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  parl  paru  pc2  preRed  previousCost  previousFP  qrRankingThreshold  r  ratio  s  sPar  sum  sum2  threshold  tmp  xK  xNorm  xk  ypk  int  countdown  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3922322702763681	530	530	2	replace	for(int  j  =  0;  j  <  solvedCols.length;  ++j)  {  if(j  <  0;  j  <  diag.length)  {	  for(int    j    =    0;    j    <    diag.length;    ++j)    {    if(j    =    0;    j    <    diag.length;    ++j)    {    	non-compiled	[CE]  ')'  expected	57	None	replace
246	[BUG]  [BUGGY]  float  solvedCols  =  Math.min(sum2,  solvedCols  -  1);  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      lmPar  =  0;  return;  }    double  sum2;  double  parl  =  0;  if  (rank  ==  solvedCols)  {      [BUGGY]  float  solvedCols  =  Math.min(sum2,  solvedCols  -  1);  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  work1[pj]  *=  diag[pj]  /  dxNorm;  }  sum2  =  0;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  double  sum  =  0;  for  (int  i  =  0;  i  <  j;  ++i)  {  sum  +=  jacobian[i][pj]  *  work1[permutation[i]];  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  determineLMParameter  [RETURN_TYPE]  void  double[]  qy  double  delta  double[]  diag  double[]  work1  double[]  work2  double[]  work3  [VARIABLES]  int[]  permutation  boolean  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  qy  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  correction  costRelativeTolerance  delta  dirDer  dirJ  dk  dxNorm  fp  gNorm  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  parl  paru  pc2  preRed  previousCost  previousFP  qrRankingThreshold  r  ratio  s  sPar  sum  sum2  threshold  tmp  xK  xNorm  xk  ypk  int  countdown  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3922322702763681	530	530	2	replace	float  solvedCols  =  Math.min(sum2,  solvedCols  -  1);	  float    solvedCols    =    Math.min(solvedCols,    sum2    -    1);    	non-compiled	[CE]  <identifier>  expected	59	None	replace
247	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  if(j  <  0;  j  <  parl;  ++j)  {  [CE]  ')'  expected  [FE]        AssertionFailedError      [CONTEXT]      lmPar  =  0;  return;  }    double  sum2;  double  parl  =  0;  if  (rank  ==  solvedCols)  {      [BUGGY]  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  if(j  <  0;  j  <  parl;  ++j)  {  [BUGGY]      int  pj  =  permutation[j];  work1[pj]  *=  diag[pj]  /  dxNorm;  }  sum2  =  0;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  double  sum  =  0;  for  (int  i  =  0;  i  <  j;  ++i)  {  sum  +=  jacobian[i][pj]  *  work1[permutation[i]];  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  determineLMParameter  [RETURN_TYPE]  void  double[]  qy  double  delta  double[]  diag  double[]  work1  double[]  work2  double[]  work3  [VARIABLES]  int[]  permutation  boolean  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  qy  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  correction  costRelativeTolerance  delta  dirDer  dirJ  dk  dxNorm  fp  gNorm  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  parl  paru  pc2  preRed  previousCost  previousFP  qrRankingThreshold  r  ratio  s  sPar  sum  sum2  threshold  tmp  xK  xNorm  xk  ypk  int  countdown  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3922322702763681	530	530	2	replace	for(int  j  =  0;  j  <  solvedCols;  ++j)  {  if(j  <  0;  j  <  parl;  ++j)  {	  for(int    j    =    0;    j    <    parl;    ++j)    {    if(j    =    0;    j    <    parl;    ++j)    {    	non-compiled	[CE]  ')'  expected	48	None	replace
248	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  doneCols.length;  ++j)  {  [CE]  cannot  find  symbol  doneCols  [FE]        AssertionFailedError      [CONTEXT]      lmPar  =  0;  return;  }    double  sum2;  double  parl  =  0;  if  (rank  ==  solvedCols)  {      [BUGGY]  for(int  j  =  0;  j  <  doneCols.length;  ++j)  {  [BUGGY]      int  pj  =  permutation[j];  work1[pj]  *=  diag[pj]  /  dxNorm;  }  sum2  =  0;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  double  sum  =  0;  for  (int  i  =  0;  i  <  j;  ++i)  {  sum  +=  jacobian[i][pj]  *  work1[permutation[i]];  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  determineLMParameter  [RETURN_TYPE]  void  double[]  qy  double  delta  double[]  diag  double[]  work1  double[]  work2  double[]  work3  [VARIABLES]  int[]  permutation  boolean  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  qy  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  correction  costRelativeTolerance  delta  dirDer  dirJ  dk  dxNorm  fp  gNorm  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  parl  paru  pc2  preRed  previousCost  previousFP  qrRankingThreshold  r  ratio  s  sPar  sum  sum2  threshold  tmp  xK  xNorm  xk  ypk  int  countdown  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3922322702763681	530	530	2	replace	for(int  j  =  0;  j  <  doneCols.length;  ++j)  {	  for(int    j    =    0;    j    <    solveCols.length;    ++j)    {    	non-compiled	[CE]  cannot  find  symbol  doneCols	22	None	replace
249	[BUG]  [BUGGY]  int  solvedCols  =  Math.min(sum2,  solvedCols);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      lmPar  =  0;  return;  }    double  sum2;  double  parl  =  0;  if  (rank  ==  solvedCols)  {      [BUGGY]  int  solvedCols  =  Math.min(sum2,  solvedCols);  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  work1[pj]  *=  diag[pj]  /  dxNorm;  }  sum2  =  0;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  double  sum  =  0;  for  (int  i  =  0;  i  <  j;  ++i)  {  sum  +=  jacobian[i][pj]  *  work1[permutation[i]];  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  determineLMParameter  [RETURN_TYPE]  void  double[]  qy  double  delta  double[]  diag  double[]  work1  double[]  work2  double[]  work3  [VARIABLES]  int[]  permutation  boolean  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  qy  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  correction  costRelativeTolerance  delta  dirDer  dirJ  dk  dxNorm  fp  gNorm  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  parl  paru  pc2  preRed  previousCost  previousFP  qrRankingThreshold  r  ratio  s  sPar  sum  sum2  threshold  tmp  xK  xNorm  xk  ypk  int  countdown  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3922322702763681	530	530	2	replace	int  solvedCols  =  Math.min(sum2,  solvedCols);	  int    solvedCols    =    Math.min(resolvedCols,    sum2);    	non-compiled	[CE]  <identifier>  expected	30	None	replace
250	[BUG]  [BUGGY]  int  solvedCols  =  Math.min(sum2,  resolvedCols);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      lmPar  =  0;  return;  }    double  sum2;  double  parl  =  0;  if  (rank  ==  solvedCols)  {      [BUGGY]  int  solvedCols  =  Math.min(sum2,  resolvedCols);  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  work1[pj]  *=  diag[pj]  /  dxNorm;  }  sum2  =  0;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  double  sum  =  0;  for  (int  i  =  0;  i  <  j;  ++i)  {  sum  +=  jacobian[i][pj]  *  work1[permutation[i]];  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  determineLMParameter  [RETURN_TYPE]  void  double[]  qy  double  delta  double[]  diag  double[]  work1  double[]  work2  double[]  work3  [VARIABLES]  int[]  permutation  boolean  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  qy  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  correction  costRelativeTolerance  delta  dirDer  dirJ  dk  dxNorm  fp  gNorm  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  parl  paru  pc2  preRed  previousCost  previousFP  qrRankingThreshold  r  ratio  s  sPar  sum  sum2  threshold  tmp  xK  xNorm  xk  ypk  int  countdown  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3922322702763681	530	530	2	replace	int  solvedCols  =  Math.min(sum2,  resolvedCols);	  int    solvedCols    =    Math.min(resolvedCols,    sum2);    	non-compiled	[CE]  <identifier>  expected	30	None	replace
251	[BUG]  [BUGGY]  int  permutation[j]  =  Math.abs(work1[j]  /  diag[j]);  [CE]  ']'  expected  [FE]                    AssertionFailedError      [CONTEXT]      lmPar  =  0;  return;  }    double  sum2;  double  parl  =  0;  if  (rank  ==  solvedCols)  {      [BUGGY]  int  permutation[j]  =  Math.abs(work1[j]  /  diag[j]);  [BUGGY]      int  pj  =  permutation[j];  work1[pj]  *=  diag[pj]  /  dxNorm;  }  sum2  =  0;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  double  sum  =  0;  for  (int  i  =  0;  i  <  j;  ++i)  {  sum  +=  jacobian[i][pj]  *  work1[permutation[i]];  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  determineLMParameter  [RETURN_TYPE]  void  double[]  qy  double  delta  double[]  diag  double[]  work1  double[]  work2  double[]  work3  [VARIABLES]  int[]  permutation  boolean  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  qy  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  correction  costRelativeTolerance  delta  dirDer  dirJ  dk  dxNorm  fp  gNorm  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  parl  paru  pc2  preRed  previousCost  previousFP  qrRankingThreshold  r  ratio  s  sPar  sum  sum2  threshold  tmp  xK  xNorm  xk  ypk  int  countdown  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3922322702763681	530	530	2	replace	int  permutation[j]  =  Math.abs(work1[j]  /  diag[j]);	  int    permutation[j]    =    Math.abs(work1[j]    /    dxNorm);    	non-compiled	[CE]  ']'  expected	45	None	replace
252	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError      [CONTEXT]      lmPar  =  0;  return;  }    double  sum2;  double  parl  =  0;  if  (rank  ==  solvedCols)  {      [BUGGY]  for(int  j  =  0;  j  <  rank;  ++j)  {  [BUGGY]      int  pj  =  permutation[j];  work1[pj]  *=  diag[pj]  /  dxNorm;  }  sum2  =  0;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  double  sum  =  0;  for  (int  i  =  0;  i  <  j;  ++i)  {  sum  +=  jacobian[i][pj]  *  work1[permutation[i]];  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  determineLMParameter  [RETURN_TYPE]  void  double[]  qy  double  delta  double[]  diag  double[]  work1  double[]  work2  double[]  work3  [VARIABLES]  int[]  permutation  boolean  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  qy  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  correction  costRelativeTolerance  delta  dirDer  dirJ  dk  dxNorm  fp  gNorm  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  parl  paru  pc2  preRed  previousCost  previousFP  qrRankingThreshold  r  ratio  s  sPar  sum  sum2  threshold  tmp  xK  xNorm  xk  ypk  int  countdown  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3922322702763681	530	530	2	add	for(int  j  =  0;  j  <  rank;  ++j)  {	  for(int    j    =    0;    j    <    solveCols;    ++j)    {    	compilable	  [FE]  AssertionFailedError  	46	2	replace
253	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  rank;  ++j)  {  [FE]  AssertionFailedError  [FE]        AssertionFailedError      [CONTEXT]      lmPar  =  0;  return;  }    double  sum2;  double  parl  =  0;  if  (rank  ==  solvedCols)  {      [BUGGY]  for(int  j  =  0;  j  <  rank;  ++j)  {  [BUGGY]      int  pj  =  permutation[j];  work1[pj]  *=  diag[pj]  /  dxNorm;  }  sum2  =  0;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  double  sum  =  0;  for  (int  i  =  0;  i  <  j;  ++i)  {  sum  +=  jacobian[i][pj]  *  work1[permutation[i]];  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  determineLMParameter  [RETURN_TYPE]  void  double[]  qy  double  delta  double[]  diag  double[]  work1  double[]  work2  double[]  work3  [VARIABLES]  int[]  permutation  boolean  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  qy  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  correction  costRelativeTolerance  delta  dirDer  dirJ  dk  dxNorm  fp  gNorm  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  parl  paru  pc2  preRed  previousCost  previousFP  qrRankingThreshold  r  ratio  s  sPar  sum  sum2  threshold  tmp  xK  xNorm  xk  ypk  int  countdown  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3922322702763681	530	530	2	replace	for(int  j  =  0;  j  <  rank;  ++j)  {	  for(int    j    =    0;    j    <    solveCols;    ++j)    {    	compilable	  [FE]  AssertionFailedError  	46	2	replace
254	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  doneCols;  ++j)  {  [CE]  cannot  find  symbol  doneCols  [FE]          AssertionFailedError      [CONTEXT]      lmPar  =  0;  return;  }    double  sum2;  double  parl  =  0;  if  (rank  ==  solvedCols)  {      [BUGGY]  for(int  j  =  0;  j  <  doneCols;  ++j)  {  [BUGGY]      int  pj  =  permutation[j];  work1[pj]  *=  diag[pj]  /  dxNorm;  }  sum2  =  0;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  double  sum  =  0;  for  (int  i  =  0;  i  <  j;  ++i)  {  sum  +=  jacobian[i][pj]  *  work1[permutation[i]];  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  determineLMParameter  [RETURN_TYPE]  void  double[]  qy  double  delta  double[]  diag  double[]  work1  double[]  work2  double[]  work3  [VARIABLES]  int[]  permutation  boolean  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  qy  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  correction  costRelativeTolerance  delta  dirDer  dirJ  dk  dxNorm  fp  gNorm  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  parl  paru  pc2  preRed  previousCost  previousFP  qrRankingThreshold  r  ratio  s  sPar  sum  sum2  threshold  tmp  xK  xNorm  xk  ypk  int  countdown  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3922322702763681	530	530	2	replace	for(int  j  =  0;  j  <  doneCols;  ++j)  {	  for(int    j    =    0;    j    <    solveCols;    ++j)    {    	non-compiled	[CE]  cannot  find  symbol  doneCols	46	None	replace
255	[BUG]  [BUGGY]  double  solvedCols  =  Math.min(sum2  -  1,  sum2  -  1);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      lmPar  =  0;  return;  }    double  sum2;  double  parl  =  0;  if  (rank  ==  solvedCols)  {      [BUGGY]  double  solvedCols  =  Math.min(sum2  -  1,  sum2  -  1);  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  work1[pj]  *=  diag[pj]  /  dxNorm;  }  sum2  =  0;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  double  sum  =  0;  for  (int  i  =  0;  i  <  j;  ++i)  {  sum  +=  jacobian[i][pj]  *  work1[permutation[i]];  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  determineLMParameter  [RETURN_TYPE]  void  double[]  qy  double  delta  double[]  diag  double[]  work1  double[]  work2  double[]  work3  [VARIABLES]  int[]  permutation  boolean  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  qy  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  correction  costRelativeTolerance  delta  dirDer  dirJ  dk  dxNorm  fp  gNorm  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  parl  paru  pc2  preRed  previousCost  previousFP  qrRankingThreshold  r  ratio  s  sPar  sum  sum2  threshold  tmp  xK  xNorm  xk  ypk  int  countdown  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3922322702763681	530	530	2	replace	double  solvedCols  =  Math.min(sum2  -  1,  sum2  -  1);	  double    solvedCols    =    Math.min(sum2,    sum2    -    1);    	non-compiled	[CE]  <identifier>  expected	33	None	replace
256	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  work2.length;  ++j)  {  FOR(int  j  =  0;  j  <  work2.length;  ++j)  {  [CE]  '.class'  expected  [FE]    AssertionFailedError    [CONTEXT]      lmPar  =  0;  return;  }    double  sum2;  double  parl  =  0;  if  (rank  ==  solvedCols)  {      [BUGGY]  for(int  j  =  0;  j  <  work2.length;  ++j)  {  FOR(int  j  =  0;  j  <  work2.length;  ++j)  {  [BUGGY]      int  pj  =  permutation[j];  work1[pj]  *=  diag[pj]  /  dxNorm;  }  sum2  =  0;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  double  sum  =  0;  for  (int  i  =  0;  i  <  j;  ++i)  {  sum  +=  jacobian[i][pj]  *  work1[permutation[i]];  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  determineLMParameter  [RETURN_TYPE]  void  double[]  qy  double  delta  double[]  diag  double[]  work1  double[]  work2  double[]  work3  [VARIABLES]  int[]  permutation  boolean  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  qy  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  correction  costRelativeTolerance  delta  dirDer  dirJ  dk  dxNorm  fp  gNorm  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  parl  paru  pc2  preRed  previousCost  previousFP  qrRankingThreshold  r  ratio  s  sPar  sum  sum2  threshold  tmp  xK  xNorm  xk  ypk  int  countdown  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3922322702763681	530	530	2	replace	for(int    j    =    0;    j    <    work2.length;    ++j)    {    FOR(int  j  =  0;  j  <  work2.length;  ++j)  {	  	non-compiled	[CE]  '.class'  expected	50	None	add
257	[BUG]  [BUGGY]  int  solvedCols  =  Math.min(parl,  solvedCols  +  1);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      lmPar  =  0;  return;  }    double  sum2;  double  parl  =  0;  if  (rank  ==  solvedCols)  {      [BUGGY]  int  solvedCols  =  Math.min(parl,  solvedCols  +  1);  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  work1[pj]  *=  diag[pj]  /  dxNorm;  }  sum2  =  0;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  double  sum  =  0;  for  (int  i  =  0;  i  <  j;  ++i)  {  sum  +=  jacobian[i][pj]  *  work1[permutation[i]];  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  determineLMParameter  [RETURN_TYPE]  void  double[]  qy  double  delta  double[]  diag  double[]  work1  double[]  work2  double[]  work3  [VARIABLES]  int[]  permutation  boolean  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  qy  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  correction  costRelativeTolerance  delta  dirDer  dirJ  dk  dxNorm  fp  gNorm  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  parl  paru  pc2  preRed  previousCost  previousFP  qrRankingThreshold  r  ratio  s  sPar  sum  sum2  threshold  tmp  xK  xNorm  xk  ypk  int  countdown  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3922322702763681	530	530	2	replace	int  solvedCols  =  Math.min(parl,  solvedCols  +  1);	  int    solvedCols    =    Math.min(resolvedCols,    parl    +    1);    	non-compiled	[CE]  <identifier>  expected	79	None	replace
258	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  permutation.length;  ++j)  {  if(j  <  permutation.length)  {  for(int  j  =  0;  j  <  permutation.length;  ++j)  {  }  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      lmPar  =  0;  return;  }    double  sum2;  double  parl  =  0;  if  (rank  ==  solvedCols)  {      [BUGGY]  for(int  j  =  0;  j  <  permutation.length;  ++j)  {  if(j  <  permutation.length)  {  for(int  j  =  0;  j  <  permutation.length;  ++j)  {  }  [BUGGY]      int  pj  =  permutation[j];  work1[pj]  *=  diag[pj]  /  dxNorm;  }  sum2  =  0;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  double  sum  =  0;  for  (int  i  =  0;  i  <  j;  ++i)  {  sum  +=  jacobian[i][pj]  *  work1[permutation[i]];  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  determineLMParameter  [RETURN_TYPE]  void  double[]  qy  double  delta  double[]  diag  double[]  work1  double[]  work2  double[]  work3  [VARIABLES]  int[]  permutation  boolean  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  qy  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  correction  costRelativeTolerance  delta  dirDer  dirJ  dk  dxNorm  fp  gNorm  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  parl  paru  pc2  preRed  previousCost  previousFP  qrRankingThreshold  r  ratio  s  sPar  sum  sum2  threshold  tmp  xK  xNorm  xk  ypk  int  countdown  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3922322702763681	530	530	2	replace	for(int    j    =    0;    j    <    permutation.length;    ++j)    {    if(j  <  permutation.length)  {  for(int  j  =  0;  j  <  permutation.length;  ++j)  {  }	  	non-compiled	[CE]  illegal  start  of  expression	52	None	add
259	[BUG]  [BUGGY]  float  solvedCols  =  Math.min(sum2,  solvedCols);  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      lmPar  =  0;  return;  }    double  sum2;  double  parl  =  0;  if  (rank  ==  solvedCols)  {      [BUGGY]  float  solvedCols  =  Math.min(sum2,  solvedCols);  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  work1[pj]  *=  diag[pj]  /  dxNorm;  }  sum2  =  0;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  double  sum  =  0;  for  (int  i  =  0;  i  <  j;  ++i)  {  sum  +=  jacobian[i][pj]  *  work1[permutation[i]];  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  determineLMParameter  [RETURN_TYPE]  void  double[]  qy  double  delta  double[]  diag  double[]  work1  double[]  work2  double[]  work3  [VARIABLES]  int[]  permutation  boolean  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  qy  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  correction  costRelativeTolerance  delta  dirDer  dirJ  dk  dxNorm  fp  gNorm  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  parl  paru  pc2  preRed  previousCost  previousFP  qrRankingThreshold  r  ratio  s  sPar  sum  sum2  threshold  tmp  xK  xNorm  xk  ypk  int  countdown  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3922322702763681	530	530	2	replace	float  solvedCols  =  Math.min(sum2,  solvedCols);	  float    solvedCols    =    Math.min(solvedCols,    sum2);    	non-compiled	[CE]  <identifier>  expected	64	None	replace
260	[BUG]  [BUGGY]  double  dxNorm  =  Math.sqrt(solveCols,diag);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      lmPar  =  0;  return;  }    double  sum2;  double  parl  =  0;  if  (rank  ==  solvedCols)  {      [BUGGY]  double  dxNorm  =  Math.sqrt(solveCols,diag);  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  work1[pj]  *=  diag[pj]  /  dxNorm;  }  sum2  =  0;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  double  sum  =  0;  for  (int  i  =  0;  i  <  j;  ++i)  {  sum  +=  jacobian[i][pj]  *  work1[permutation[i]];  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  determineLMParameter  [RETURN_TYPE]  void  double[]  qy  double  delta  double[]  diag  double[]  work1  double[]  work2  double[]  work3  [VARIABLES]  int[]  permutation  boolean  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  qy  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  correction  costRelativeTolerance  delta  dirDer  dirJ  dk  dxNorm  fp  gNorm  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  parl  paru  pc2  preRed  previousCost  previousFP  qrRankingThreshold  r  ratio  s  sPar  sum  sum2  threshold  tmp  xK  xNorm  xk  ypk  int  countdown  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3922322702763681	530	530	2	replace	double  dxNorm  =  Math.sqrt(solveCols,diag);	  double    dxNorm    =    Math.sqrt(solveCols,rank);    	non-compiled	[CE]  <identifier>  expected	25	None	replace
261	[BUG]  [BUGGY]  double  dxNorm  =  Math.sqrt(diag[0],  parl);  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      lmPar  =  0;  return;  }    double  sum2;  double  parl  =  0;  if  (rank  ==  solvedCols)  {      [BUGGY]  double  dxNorm  =  Math.sqrt(diag[0],  parl);  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  work1[pj]  *=  diag[pj]  /  dxNorm;  }  sum2  =  0;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  double  sum  =  0;  for  (int  i  =  0;  i  <  j;  ++i)  {  sum  +=  jacobian[i][pj]  *  work1[permutation[i]];  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  determineLMParameter  [RETURN_TYPE]  void  double[]  qy  double  delta  double[]  diag  double[]  work1  double[]  work2  double[]  work3  [VARIABLES]  int[]  permutation  boolean  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  qy  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  correction  costRelativeTolerance  delta  dirDer  dirJ  dk  dxNorm  fp  gNorm  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  parl  paru  pc2  preRed  previousCost  previousFP  qrRankingThreshold  r  ratio  s  sPar  sum  sum2  threshold  tmp  xK  xNorm  xk  ypk  int  countdown  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3922322702763681	530	530	2	replace	double  dxNorm  =  Math.sqrt(diag[0],  parl);	  double    dxNorm    =    Math.sqrt(diag[0]);    	non-compiled	[CE]  <identifier>  expected	74	None	replace
262	[BUG]  [BUGGY]  double  solvedCols  =  Math.min(sum2,  solvedCols);  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      lmPar  =  0;  return;  }    double  sum2;  double  parl  =  0;  if  (rank  ==  solvedCols)  {      [BUGGY]  double  solvedCols  =  Math.min(sum2,  solvedCols);  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  work1[pj]  *=  diag[pj]  /  dxNorm;  }  sum2  =  0;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  double  sum  =  0;  for  (int  i  =  0;  i  <  j;  ++i)  {  sum  +=  jacobian[i][pj]  *  work1[permutation[i]];  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  determineLMParameter  [RETURN_TYPE]  void  double[]  qy  double  delta  double[]  diag  double[]  work1  double[]  work2  double[]  work3  [VARIABLES]  int[]  permutation  boolean  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  qy  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  correction  costRelativeTolerance  delta  dirDer  dirJ  dk  dxNorm  fp  gNorm  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  parl  paru  pc2  preRed  previousCost  previousFP  qrRankingThreshold  r  ratio  s  sPar  sum  sum2  threshold  tmp  xK  xNorm  xk  ypk  int  countdown  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3922322702763681	530	530	2	replace	double  solvedCols  =  Math.min(sum2,  solvedCols);	  double    solvedCols    =    Math.min(solvedCols,    sum2);    	non-compiled	[CE]  <identifier>  expected	36	None	replace
263	[BUG]  [BUGGY]  int  solvedCols  =  Math.min(solvedCols,  parl  -  2);  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      lmPar  =  0;  return;  }    double  sum2;  double  parl  =  0;  if  (rank  ==  solvedCols)  {      [BUGGY]  int  solvedCols  =  Math.min(solvedCols,  parl  -  2);  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  work1[pj]  *=  diag[pj]  /  dxNorm;  }  sum2  =  0;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  double  sum  =  0;  for  (int  i  =  0;  i  <  j;  ++i)  {  sum  +=  jacobian[i][pj]  *  work1[permutation[i]];  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  determineLMParameter  [RETURN_TYPE]  void  double[]  qy  double  delta  double[]  diag  double[]  work1  double[]  work2  double[]  work3  [VARIABLES]  int[]  permutation  boolean  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  qy  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  correction  costRelativeTolerance  delta  dirDer  dirJ  dk  dxNorm  fp  gNorm  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  parl  paru  pc2  preRed  previousCost  previousFP  qrRankingThreshold  r  ratio  s  sPar  sum  sum2  threshold  tmp  xK  xNorm  xk  ypk  int  countdown  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3922322702763681	530	530	2	replace	int  solvedCols  =  Math.min(solvedCols,  parl  -  2);	  int    solvedCols    =    Math.min(solvedCols,    parl    -    1);    	non-compiled	[CE]  <identifier>  expected	70	None	replace
264	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  fixedCols;  ++j)  {  [CE]  cannot  find  symbol  fixedCols  [FE]        AssertionFailedError      [CONTEXT]      lmPar  =  0;  return;  }    double  sum2;  double  parl  =  0;  if  (rank  ==  solvedCols)  {      [BUGGY]  for(int  j  =  0;  j  <  fixedCols;  ++j)  {  [BUGGY]      int  pj  =  permutation[j];  work1[pj]  *=  diag[pj]  /  dxNorm;  }  sum2  =  0;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  double  sum  =  0;  for  (int  i  =  0;  i  <  j;  ++i)  {  sum  +=  jacobian[i][pj]  *  work1[permutation[i]];  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  determineLMParameter  [RETURN_TYPE]  void  double[]  qy  double  delta  double[]  diag  double[]  work1  double[]  work2  double[]  work3  [VARIABLES]  int[]  permutation  boolean  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  qy  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  correction  costRelativeTolerance  delta  dirDer  dirJ  dk  dxNorm  fp  gNorm  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  parl  paru  pc2  preRed  previousCost  previousFP  qrRankingThreshold  r  ratio  s  sPar  sum  sum2  threshold  tmp  xK  xNorm  xk  ypk  int  countdown  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3922322702763681	530	530	2	replace	for(int  j  =  0;  j  <  fixedCols;  ++j)  {	  for(int    j    =    0;    j    <    sum2;    ++j)    {    	non-compiled	[CE]  cannot  find  symbol  fixedCols	60	None	replace
265	[BUG]  [BUGGY]  double  i  =(rank  <  1)?  0  :  Math.PI;  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      lmPar  =  0;  return;  }    double  sum2;  double  parl  =  0;  if  (rank  ==  solvedCols)  {      [BUGGY]  double  i  =(rank  <  1)?  0  :  Math.PI;  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  work1[pj]  *=  diag[pj]  /  dxNorm;  }  sum2  =  0;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  double  sum  =  0;  for  (int  i  =  0;  i  <  j;  ++i)  {  sum  +=  jacobian[i][pj]  *  work1[permutation[i]];  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  determineLMParameter  [RETURN_TYPE]  void  double[]  qy  double  delta  double[]  diag  double[]  work1  double[]  work2  double[]  work3  [VARIABLES]  int[]  permutation  boolean  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  qy  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  correction  costRelativeTolerance  delta  dirDer  dirJ  dk  dxNorm  fp  gNorm  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  parl  paru  pc2  preRed  previousCost  previousFP  qrRankingThreshold  r  ratio  s  sPar  sum  sum2  threshold  tmp  xK  xNorm  xk  ypk  int  countdown  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3922322702763681	530	530	2	replace	double  i  =(rank  <  1)?  0  :  Math.PI;	  double    i    =    0;    	non-compiled	[CE]  <identifier>  expected	12	None	replace
266	[BUG]  [BUGGY]  float  solvedCols  =  Math.min(solvedCols,  parl  +  1);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      lmPar  =  0;  return;  }    double  sum2;  double  parl  =  0;  if  (rank  ==  solvedCols)  {      [BUGGY]  float  solvedCols  =  Math.min(solvedCols,  parl  +  1);  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  work1[pj]  *=  diag[pj]  /  dxNorm;  }  sum2  =  0;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  double  sum  =  0;  for  (int  i  =  0;  i  <  j;  ++i)  {  sum  +=  jacobian[i][pj]  *  work1[permutation[i]];  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  determineLMParameter  [RETURN_TYPE]  void  double[]  qy  double  delta  double[]  diag  double[]  work1  double[]  work2  double[]  work3  [VARIABLES]  int[]  permutation  boolean  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  qy  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  correction  costRelativeTolerance  delta  dirDer  dirJ  dk  dxNorm  fp  gNorm  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  parl  paru  pc2  preRed  previousCost  previousFP  qrRankingThreshold  r  ratio  s  sPar  sum  sum2  threshold  tmp  xK  xNorm  xk  ypk  int  countdown  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3922322702763681	530	530	2	replace	float  solvedCols  =  Math.min(solvedCols,  parl  +  1);	  float    solvedCols    =    Math.min(solvedCols,    parl);    	non-compiled	[CE]  <identifier>  expected	41	None	replace
267	[BUG]  [BUGGY]  Double  solvedCols  =  Math.min(solvedCols,  parl  +  1);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      lmPar  =  0;  return;  }    double  sum2;  double  parl  =  0;  if  (rank  ==  solvedCols)  {      [BUGGY]  Double  solvedCols  =  Math.min(solvedCols,  parl  +  1);  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  work1[pj]  *=  diag[pj]  /  dxNorm;  }  sum2  =  0;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  double  sum  =  0;  for  (int  i  =  0;  i  <  j;  ++i)  {  sum  +=  jacobian[i][pj]  *  work1[permutation[i]];  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  determineLMParameter  [RETURN_TYPE]  void  double[]  qy  double  delta  double[]  diag  double[]  work1  double[]  work2  double[]  work3  [VARIABLES]  int[]  permutation  boolean  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  qy  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  correction  costRelativeTolerance  delta  dirDer  dirJ  dk  dxNorm  fp  gNorm  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  parl  paru  pc2  preRed  previousCost  previousFP  qrRankingThreshold  r  ratio  s  sPar  sum  sum2  threshold  tmp  xK  xNorm  xk  ypk  int  countdown  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3922322702763681	530	530	2	replace	Double  solvedCols  =  Math.min(solvedCols,  parl  +  1);	  Double    solvedCols    =    Math.min(solvedCols,    parl);    	non-compiled	[CE]  <identifier>  expected	40	None	replace
268	[BUG]  [BUGGY]  double  dxNorm  =  Math.sqrt(diag,  0);  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      lmPar  =  0;  return;  }    double  sum2;  double  parl  =  0;  if  (rank  ==  solvedCols)  {      [BUGGY]  double  dxNorm  =  Math.sqrt(diag,  0);  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  work1[pj]  *=  diag[pj]  /  dxNorm;  }  sum2  =  0;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  double  sum  =  0;  for  (int  i  =  0;  i  <  j;  ++i)  {  sum  +=  jacobian[i][pj]  *  work1[permutation[i]];  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  determineLMParameter  [RETURN_TYPE]  void  double[]  qy  double  delta  double[]  diag  double[]  work1  double[]  work2  double[]  work3  [VARIABLES]  int[]  permutation  boolean  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  qy  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  correction  costRelativeTolerance  delta  dirDer  dirJ  dk  dxNorm  fp  gNorm  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  parl  paru  pc2  preRed  previousCost  previousFP  qrRankingThreshold  r  ratio  s  sPar  sum  sum2  threshold  tmp  xK  xNorm  xk  ypk  int  countdown  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3922322702763681	530	530	2	replace	double  dxNorm  =  Math.sqrt(diag,  0);	  double    dxNorm    =    Math.sqrt(diag,    solveCols);    	non-compiled	[CE]  <identifier>  expected	26	None	replace
269	[BUG]  [BUGGY]  int  solvedCols  =  Math.min(parl,  parl);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      lmPar  =  0;  return;  }    double  sum2;  double  parl  =  0;  if  (rank  ==  solvedCols)  {      [BUGGY]  int  solvedCols  =  Math.min(parl,  parl);  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  work1[pj]  *=  diag[pj]  /  dxNorm;  }  sum2  =  0;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  double  sum  =  0;  for  (int  i  =  0;  i  <  j;  ++i)  {  sum  +=  jacobian[i][pj]  *  work1[permutation[i]];  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  determineLMParameter  [RETURN_TYPE]  void  double[]  qy  double  delta  double[]  diag  double[]  work1  double[]  work2  double[]  work3  [VARIABLES]  int[]  permutation  boolean  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  qy  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  correction  costRelativeTolerance  delta  dirDer  dirJ  dk  dxNorm  fp  gNorm  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  parl  paru  pc2  preRed  previousCost  previousFP  qrRankingThreshold  r  ratio  s  sPar  sum  sum2  threshold  tmp  xK  xNorm  xk  ypk  int  countdown  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3922322702763681	530	530	2	replace	int  solvedCols  =  Math.min(parl,  parl);	  int    solvedCols    =    Math.min(rank,    parl);    	non-compiled	[CE]  <identifier>  expected	29	None	replace
270	[BUG]  [BUGGY]  int  solvedCols  =  Math.min(parl,  dxNorm);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      lmPar  =  0;  return;  }    double  sum2;  double  parl  =  0;  if  (rank  ==  solvedCols)  {      [BUGGY]  int  solvedCols  =  Math.min(parl,  dxNorm);  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  work1[pj]  *=  diag[pj]  /  dxNorm;  }  sum2  =  0;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  double  sum  =  0;  for  (int  i  =  0;  i  <  j;  ++i)  {  sum  +=  jacobian[i][pj]  *  work1[permutation[i]];  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  determineLMParameter  [RETURN_TYPE]  void  double[]  qy  double  delta  double[]  diag  double[]  work1  double[]  work2  double[]  work3  [VARIABLES]  int[]  permutation  boolean  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  qy  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  correction  costRelativeTolerance  delta  dirDer  dirJ  dk  dxNorm  fp  gNorm  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  parl  paru  pc2  preRed  previousCost  previousFP  qrRankingThreshold  r  ratio  s  sPar  sum  sum2  threshold  tmp  xK  xNorm  xk  ypk  int  countdown  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3922322702763681	530	530	2	replace	int  solvedCols  =  Math.min(parl,  dxNorm);	  int    solvedCols    =    Math.min(rank,    parl);    	non-compiled	[CE]  <identifier>  expected	29	None	replace
271	[BUG]  [BUGGY]  double  dxNorm  =  Math.ceil(rank);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      lmPar  =  0;  return;  }    double  sum2;  double  parl  =  0;  if  (rank  ==  solvedCols)  {      [BUGGY]  double  dxNorm  =  Math.ceil(rank);  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  work1[pj]  *=  diag[pj]  /  dxNorm;  }  sum2  =  0;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  double  sum  =  0;  for  (int  i  =  0;  i  <  j;  ++i)  {  sum  +=  jacobian[i][pj]  *  work1[permutation[i]];  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  determineLMParameter  [RETURN_TYPE]  void  double[]  qy  double  delta  double[]  diag  double[]  work1  double[]  work2  double[]  work3  [VARIABLES]  int[]  permutation  boolean  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  qy  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  correction  costRelativeTolerance  delta  dirDer  dirJ  dk  dxNorm  fp  gNorm  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  parl  paru  pc2  preRed  previousCost  previousFP  qrRankingThreshold  r  ratio  s  sPar  sum  sum2  threshold  tmp  xK  xNorm  xk  ypk  int  countdown  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3922322702763681	530	530	2	replace	double  dxNorm  =  Math.ceil(rank);	  double    dxNorm    =    Math.log(rank);    	non-compiled	[CE]  <identifier>  expected	23	None	replace
272	[BUG]  [BUGGY]  double  dxNorm  =  Math.log(log0);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      lmPar  =  0;  return;  }    double  sum2;  double  parl  =  0;  if  (rank  ==  solvedCols)  {      [BUGGY]  double  dxNorm  =  Math.log(log0);  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  work1[pj]  *=  diag[pj]  /  dxNorm;  }  sum2  =  0;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  double  sum  =  0;  for  (int  i  =  0;  i  <  j;  ++i)  {  sum  +=  jacobian[i][pj]  *  work1[permutation[i]];  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  determineLMParameter  [RETURN_TYPE]  void  double[]  qy  double  delta  double[]  diag  double[]  work1  double[]  work2  double[]  work3  [VARIABLES]  int[]  permutation  boolean  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  qy  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  correction  costRelativeTolerance  delta  dirDer  dirJ  dk  dxNorm  fp  gNorm  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  parl  paru  pc2  preRed  previousCost  previousFP  qrRankingThreshold  r  ratio  s  sPar  sum  sum2  threshold  tmp  xK  xNorm  xk  ypk  int  countdown  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3922322702763681	530	530	2	replace	double  dxNorm  =  Math.log(log0);	  double    dxNorm    =    Math.log(rank);    	non-compiled	[CE]  <identifier>  expected	23	None	replace
273	[BUG]  [BUGGY]  int  permutation[j]  =  work1[j]  /  diag[0];  [CE]  ']'  expected  [FE]                AssertionFailedError      [CONTEXT]      lmPar  =  0;  return;  }    double  sum2;  double  parl  =  0;  if  (rank  ==  solvedCols)  {      [BUGGY]  int  permutation[j]  =  work1[j]  /  diag[0];  [BUGGY]      int  pj  =  permutation[j];  work1[pj]  *=  diag[pj]  /  dxNorm;  }  sum2  =  0;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  double  sum  =  0;  for  (int  i  =  0;  i  <  j;  ++i)  {  sum  +=  jacobian[i][pj]  *  work1[permutation[i]];  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  determineLMParameter  [RETURN_TYPE]  void  double[]  qy  double  delta  double[]  diag  double[]  work1  double[]  work2  double[]  work3  [VARIABLES]  int[]  permutation  boolean  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  qy  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  correction  costRelativeTolerance  delta  dirDer  dirJ  dk  dxNorm  fp  gNorm  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  parl  paru  pc2  preRed  previousCost  previousFP  qrRankingThreshold  r  ratio  s  sPar  sum  sum2  threshold  tmp  xK  xNorm  xk  ypk  int  countdown  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3922322702763681	530	530	2	replace	int  permutation[j]  =  work1[j]  /  diag[0];	  int    permutation[j]    =    work1[j]    /    dxNorm;    	non-compiled	[CE]  ']'  expected	43	None	replace
274	[BUG]  [BUGGY]  int  j  =  solvedCols[0]  &  1;  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      lmPar  =  0;  return;  }    double  sum2;  double  parl  =  0;  if  (rank  ==  solvedCols)  {      [BUGGY]  int  j  =  solvedCols[0]  &  1;  [BUGGY]      int  pj  =  permutation[j];  work1[pj]  *=  diag[pj]  /  dxNorm;  }  sum2  =  0;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  double  sum  =  0;  for  (int  i  =  0;  i  <  j;  ++i)  {  sum  +=  jacobian[i][pj]  *  work1[permutation[i]];  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  determineLMParameter  [RETURN_TYPE]  void  double[]  qy  double  delta  double[]  diag  double[]  work1  double[]  work2  double[]  work3  [VARIABLES]  int[]  permutation  boolean  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  qy  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  correction  costRelativeTolerance  delta  dirDer  dirJ  dk  dxNorm  fp  gNorm  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  parl  paru  pc2  preRed  previousCost  previousFP  qrRankingThreshold  r  ratio  s  sPar  sum  sum2  threshold  tmp  xK  xNorm  xk  ypk  int  countdown  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3922322702763681	530	530	2	replace	int  j  =  solvedCols[0]  &  1;	  int    j    =    solvedCols[0];    	non-compiled	[CE]  <identifier>  expected	61	None	replace
