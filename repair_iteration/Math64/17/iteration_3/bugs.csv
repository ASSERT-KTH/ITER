bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {      [BUGGY]  int  pj  =  permutation[j]  /  2;  [BUGGY]      point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	428	428	2	add	int  pj  =  permutation[j]  /  2;	  int    pj    =    permutation[j]    /    1;    	compilable	  [FE]  AssertionFailedError  	57	12	replace
2	[BUG]  [BUGGY]  int  pj  =  permutation[j]  /  2;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {      [BUGGY]  int  pj  =  permutation[j]  /  2;  [BUGGY]      point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	428	428	2	replace	int  pj  =  permutation[j]  /  2;	  int    pj    =    permutation[j]    /    1;    	compilable	  [FE]  AssertionFailedError  	57	12	replace
3	[BUG]  [BUGGY]  int  pj  =  oldX[j];  point[pj]  =  cost;  [CE]  possible  loss  of  precision  [FE]              AssertionFailedError      [CONTEXT]      xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {      [BUGGY]  int  pj  =  oldX[j];  point[pj]  =  cost;  [BUGGY]      int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	428	428	2	replace	int  pj  =  oldX[j];  point[pj]  =  cost;	  int    pj    =    cost[j];    point[pj]    =    oldX[pj];    	non-compiled	[CE]  possible  loss  of  precision	1	None	replace
4	[BUG]  [BUGGY]  double  pj  =  cost[j];  point[pj]  =  oldX[pj];  [CE]  array  required,  but  double  found  [FE]                AssertionFailedError      [CONTEXT]      xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {      [BUGGY]  double  pj  =  cost[j];  point[pj]  =  oldX[pj];  [BUGGY]      int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	428	428	2	replace	double  pj  =  cost[j];  point[pj]  =  oldX[pj];	  int    pj    =    cost[j];    point[pj]    =    oldX[pj];    	non-compiled	[CE]  array  required,  but  double  found	1	None	replace
5	[BUG]  [BUGGY]  int  oldX  =  permutation[j]  +  2;  [CE]  variable  oldX  is  already  defined  in  method  doOptimize()  [FE]              AssertionFailedError      [CONTEXT]      xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {      [BUGGY]  int  oldX  =  permutation[j]  +  2;  [BUGGY]      int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	428	428	2	replace	int  oldX  =  permutation[j]  +  2;	  int    oldX    =    permutation[j]    +    1;    	non-compiled	[CE]  variable  oldX  is  already  defined  in  method  doOptimize()	36	None	replace
6	[BUG]  [BUGGY]  int  oldX  =  permutation[j]  *  1;  [CE]  variable  oldX  is  already  defined  in  method  doOptimize()  [FE]                AssertionFailedError      [CONTEXT]      xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {      [BUGGY]  int  oldX  =  permutation[j]  *  1;  [BUGGY]      int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	428	428	2	replace	int  oldX  =  permutation[j]  *  1;	  int    oldX    =    permutation[j]    +    1;    	non-compiled	[CE]  variable  oldX  is  already  defined  in  method  doOptimize()	36	None	replace
7	[BUG]  [BUGGY]  double  pj  =  oldX[j];  point[pj]  =  permutation[j];  [CE]  possible  loss  of  precision  [FE]              AssertionFailedError      [CONTEXT]      xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {      [BUGGY]  double  pj  =  oldX[j];  point[pj]  =  permutation[j];  [BUGGY]      int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	428	428	2	replace	double  pj  =  oldX[j];  point[pj]  =  permutation[j];	  int    pj    =    oldX[j];    point[pj]    =    permutation[j];    	non-compiled	[CE]  possible  loss  of  precision	72	None	replace
8	[BUG]  [BUGGY]  float  pj  =  oldX[j];  point[pj]  =  permutation[j];  [CE]  possible  loss  of  precision  [FE]                AssertionFailedError      [CONTEXT]      xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {      [BUGGY]  float  pj  =  oldX[j];  point[pj]  =  permutation[j];  [BUGGY]      int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	428	428	2	replace	float  pj  =  oldX[j];  point[pj]  =  permutation[j];	  int    pj    =    oldX[j];    point[pj]    =    permutation[j];    	non-compiled	[CE]  possible  loss  of  precision	72	None	replace
9	[BUG]  [BUGGY]  long  pj  =  oldX[j];  point[pj]  =  permutation[j];  [CE]  possible  loss  of  precision  [FE]                  AssertionFailedError      [CONTEXT]      xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {      [BUGGY]  long  pj  =  oldX[j];  point[pj]  =  permutation[j];  [BUGGY]      int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	428	428	2	replace	long  pj  =  oldX[j];  point[pj]  =  permutation[j];	  int    pj    =    oldX[j];    point[pj]    =    permutation[j];    	non-compiled	[CE]  possible  loss  of  precision	72	None	replace
10	[BUG]  [BUGGY]  double  pj  =  Math.sqrt(coeff2);  [CE]  possible  loss  of  precision  [FE]                    AssertionFailedError      [CONTEXT]      xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {      [BUGGY]  double  pj  =  Math.sqrt(coeff2);  [BUGGY]      point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	428	428	2	replace	double  pj  =  Math.sqrt(coeff2);	  double    pj    =    Math.sqrt(coeff1);    	non-compiled	[CE]  possible  loss  of  precision	92	None	replace
11	[BUG]  [BUGGY]  int  pj  =  Math.sqrt(coeff1);  [CE]  possible  loss  of  precision  [FE]                      AssertionFailedError      [CONTEXT]      xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {      [BUGGY]  int  pj  =  Math.sqrt(coeff1);  [BUGGY]      point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	428	428	2	replace	int  pj  =  Math.sqrt(coeff1);	  double    pj    =    Math.sqrt(coeff1);    	non-compiled	[CE]  possible  loss  of  precision	92	None	replace
12	[BUG]  [BUGGY]  double  pj  =  Math.sqrt(coeff3);  [CE]  cannot  find  symbol  coeff3  [FE]                        AssertionFailedError      [CONTEXT]      xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {      [BUGGY]  double  pj  =  Math.sqrt(coeff3);  [BUGGY]      point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	428	428	2	replace	double  pj  =  Math.sqrt(coeff3);	  double    pj    =    Math.sqrt(coeff1);    	non-compiled	[CE]  cannot  find  symbol  coeff3	92	None	replace
13	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    AssertionFailedError    [CONTEXT]      xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {      [BUGGY]  int  pj  =  permutation[j]  /  1  +  1;  [BUGGY]      point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	428	428	2	add	int  pj  =  permutation[j]  /  1  +  1;	  int    pj    =    permutation[j]    -    1    +    1;    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	59	15	replace
14	[BUG]  [BUGGY]  int  pj  =  permutation[j]  /  1  +  1;  [FE]  ArrayIndexOutOfBoundsException  [FE]    AssertionFailedError    [CONTEXT]      xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {      [BUGGY]  int  pj  =  permutation[j]  /  1  +  1;  [BUGGY]      point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	428	428	2	replace	int  pj  =  permutation[j]  /  1  +  1;	  int    pj    =    permutation[j]    -    1    +    1;    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	59	15	replace
15	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]      AssertionFailedError    [CONTEXT]      xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {      [BUGGY]  int  pj  =  permutation[j]  -  2  +  1;  [BUGGY]      point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	428	428	2	add	int  pj  =  permutation[j]  -  2  +  1;	  int    pj    =    permutation[j]    -    1    +    1;    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	59	15	replace
16	[BUG]  [BUGGY]  int  pj  =  permutation[j]  -  2  +  1;  [FE]  ArrayIndexOutOfBoundsException  [FE]      AssertionFailedError    [CONTEXT]      xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {      [BUGGY]  int  pj  =  permutation[j]  -  2  +  1;  [BUGGY]      point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	428	428	2	replace	int  pj  =  permutation[j]  -  2  +  1;	  int    pj    =    permutation[j]    -    1    +    1;    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	59	15	replace
17	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]        AssertionFailedError    [CONTEXT]      xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {      [BUGGY]  int  pj  =  permutation[j]  -  3  +  1;  [BUGGY]      point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	428	428	2	add	int  pj  =  permutation[j]  -  3  +  1;	  int    pj    =    permutation[j]    -    1    +    1;    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	59	15	replace
18	[BUG]  [BUGGY]  int  pj  =  permutation[j]  -  3  +  1;  [FE]  ArrayIndexOutOfBoundsException  [FE]        AssertionFailedError    [CONTEXT]      xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {      [BUGGY]  int  pj  =  permutation[j]  -  3  +  1;  [BUGGY]      point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	428	428	2	replace	int  pj  =  permutation[j]  -  3  +  1;	  int    pj    =    permutation[j]    -    1    +    1;    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	59	15	replace
19	[BUG]  [BUGGY]  int  point  =  permutation[j]  -  0xff;  [CE]  cannot  find  symbol  pj  [FE]                AssertionFailedError      [CONTEXT]      xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {      [BUGGY]  int  point  =  permutation[j]  -  0xff;  [BUGGY]      int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	428	428	2	replace	int  point  =  permutation[j]  -  0xff;	  int    point    =    permutation[j]    &    0xff;    	non-compiled	[CE]  cannot  find  symbol  pj	44	None	replace
20	[BUG]  [BUGGY]  int  point  =  permutation[j]  &  1;  [CE]  cannot  find  symbol  pj  [FE]                  AssertionFailedError      [CONTEXT]      xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {      [BUGGY]  int  point  =  permutation[j]  &  1;  [BUGGY]      int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	428	428	2	replace	int  point  =  permutation[j]  &  1;	  int    point    =    permutation[j]    &    0xff;    	non-compiled	[CE]  cannot  find  symbol  pj	44	None	replace
21	[BUG]  [BUGGY]  int  point  =  permutation[j]  /  0xff;  [CE]  cannot  find  symbol  pj  [FE]                    AssertionFailedError      [CONTEXT]      xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {      [BUGGY]  int  point  =  permutation[j]  /  0xff;  [BUGGY]      int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	428	428	2	replace	int  point  =  permutation[j]  /  0xff;	  int    point    =    permutation[j]    &    0xff;    	non-compiled	[CE]  cannot  find  symbol  pj	44	None	replace
22	[BUG]  [BUGGY]  Double  pj  =  point[j];  [CE]  incompatible  types  [FE]              AssertionFailedError      [CONTEXT]      xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {      [BUGGY]  Double  pj  =  point[j];  [BUGGY]      point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	428	428	2	replace	Double  pj  =  point[j];	  float    pj    =    point[j];    	non-compiled	[CE]  incompatible  types	49	None	replace
23	[BUG]  [BUGGY]  int  point  =  permutation[j]  -  2;  [CE]  cannot  find  symbol  pj  [FE]            AssertionFailedError      [CONTEXT]      xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {      [BUGGY]  int  point  =  permutation[j]  -  2;  [BUGGY]      int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	428	428	2	replace	int  point  =  permutation[j]  -  2;	  int    point    =    permutation[j]    -    1;    	non-compiled	[CE]  cannot  find  symbol  pj	42	None	replace
24	[BUG]  [BUGGY]  int  point  =  permutation[j]  /  1;  [CE]  cannot  find  symbol  pj  [FE]              AssertionFailedError      [CONTEXT]      xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {      [BUGGY]  int  point  =  permutation[j]  /  1;  [BUGGY]      int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	428	428	2	replace	int  point  =  permutation[j]  /  1;	  int    point    =    permutation[j]    -    1;    	non-compiled	[CE]  cannot  find  symbol  pj	42	None	replace
25	[BUG]  [BUGGY]  int  point  =  permutation[j]  -  3;  [CE]  cannot  find  symbol  pj  [FE]                AssertionFailedError      [CONTEXT]      xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {      [BUGGY]  int  point  =  permutation[j]  -  3;  [BUGGY]      int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	428	428	2	replace	int  point  =  permutation[j]  -  3;	  int    point    =    permutation[j]    -    1;    	non-compiled	[CE]  cannot  find  symbol  pj	42	None	replace
26	[BUG]  [BUGGY]  int  pj  =  oldX.length;  int  pj  =  oldX.length;  [CE]  variable  pj  is  already  defined  in  method  doOptimize()  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {      [BUGGY]  int  pj  =  oldX.length;  int  pj  =  oldX.length;  [BUGGY]      point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	428	428	2	replace	int    pj    =    oldX.length;    int  pj  =  oldX.length;	  	non-compiled	[CE]  variable  pj  is  already  defined  in  method  doOptimize()	75	None	add
27	[BUG]  [BUGGY]  int  pj  =  oldX.length;  Int  pj  =  oldX.length;  [CE]  cannot  find  symbol  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {      [BUGGY]  int  pj  =  oldX.length;  Int  pj  =  oldX.length;  [BUGGY]      point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	428	428	2	replace	int    pj    =    oldX.length;    Int  pj  =  oldX.length;	  	non-compiled	[CE]  cannot  find  symbol	75	None	add
28	[BUG]  [BUGGY]  int  point[j]  =  oldX[j]  -  cost;  [CE]  ']'  expected  [FE]                AssertionFailedError      [CONTEXT]      xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {      [BUGGY]  int  point[j]  =  oldX[j]  -  cost;  [BUGGY]      int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	428	428	2	replace	int  point[j]  =  oldX[j]  -  cost;	  int    point[j]    =    oldX[j]    +    cost;    	non-compiled	[CE]  ']'  expected	91	None	replace
29	[BUG]  [BUGGY]  int  point[j]  =  oldX[j]  +  xNorm;  [CE]  ']'  expected  [FE]                  AssertionFailedError      [CONTEXT]      xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {      [BUGGY]  int  point[j]  =  oldX[j]  +  xNorm;  [BUGGY]      int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	428	428	2	replace	int  point[j]  =  oldX[j]  +  xNorm;	  int    point[j]    =    oldX[j]    +    cost;    	non-compiled	[CE]  ']'  expected	91	None	replace
30	[BUG]  [BUGGY]  int  point[j]  =  permutation[j]  +  cost;  [CE]  ']'  expected  [FE]                    AssertionFailedError      [CONTEXT]      xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {      [BUGGY]  int  point[j]  =  permutation[j]  +  cost;  [BUGGY]      int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	428	428	2	replace	int  point[j]  =  permutation[j]  +  cost;	  int    point[j]    =    oldX[j]    +    cost;    	non-compiled	[CE]  ']'  expected	91	None	replace
31	[BUG]  [BUGGY]  double  pj  =  permutation[j  -  1]  +  cost;  [CE]  possible  loss  of  precision  [FE]        ArrayIndexOutOfBoundsException      [CONTEXT]      xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {      [BUGGY]  double  pj  =  permutation[j  -  1]  +  cost;  [BUGGY]      point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	428	428	2	replace	double  pj  =  permutation[j  -  1]  +  cost;	  int    pj    =    permutation[j    -    1]    +    cost;    	non-compiled	[CE]  possible  loss  of  precision	13	None	replace
32	[BUG]  [BUGGY]  long  pj  =  permutation[j  -  1]  +  cost;  [CE]  possible  loss  of  precision  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {      [BUGGY]  long  pj  =  permutation[j  -  1]  +  cost;  [BUGGY]      point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	428	428	2	replace	long  pj  =  permutation[j  -  1]  +  cost;	  int    pj    =    permutation[j    -    1]    +    cost;    	non-compiled	[CE]  possible  loss  of  precision	13	None	replace
33	[BUG]  [BUGGY]  float  pj  =  permutation[j  -  1]  +  cost;  [CE]  possible  loss  of  precision  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {      [BUGGY]  float  pj  =  permutation[j  -  1]  +  cost;  [BUGGY]      point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	428	428	2	replace	float  pj  =  permutation[j  -  1]  +  cost;	  int    pj    =    permutation[j    -    1]    +    cost;    	non-compiled	[CE]  possible  loss  of  precision	13	None	replace
34	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {      [BUGGY]  int  pj  =  permutation[j  *  1]  &  0xff;  [BUGGY]      point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	428	428	2	add	int  pj  =  permutation[j  *  1]  &  0xff;	  int    pj    =    permutation[j    +    1]    &    0xff;    	compilable	  [FE]  AssertionFailedError  	94	2	replace
35	[BUG]  [BUGGY]  int  pj  =  permutation[j  *  1]  &  0xff;  [FE]  AssertionFailedError  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {      [BUGGY]  int  pj  =  permutation[j  *  1]  &  0xff;  [BUGGY]      point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	428	428	2	replace	int  pj  =  permutation[j  *  1]  &  0xff;	  int    pj    =    permutation[j    +    1]    &    0xff;    	compilable	  [FE]  AssertionFailedError  	94	2	replace
36	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {      [BUGGY]  int  pj  =  permutation[j  +  2]  &  0xff;  [BUGGY]      point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	428	428	2	add	int  pj  =  permutation[j  +  2]  &  0xff;	  int    pj    =    permutation[j    +    1]    &    0xff;    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	94	15	replace
37	[BUG]  [BUGGY]  int  pj  =  permutation[j  +  2]  &  0xff;  [FE]  ArrayIndexOutOfBoundsException  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {      [BUGGY]  int  pj  =  permutation[j  +  2]  &  0xff;  [BUGGY]      point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	428	428	2	replace	int  pj  =  permutation[j  +  2]  &  0xff;	  int    pj    =    permutation[j    +    1]    &    0xff;    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	94	15	replace
38	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {      [BUGGY]  int  pj  =  permutation[j  +  1]  *  0xff;  [BUGGY]      point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	428	428	2	add	int  pj  =  permutation[j  +  1]  *  0xff;	  int    pj    =    permutation[j    +    1]    &    0xff;    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	94	15	replace
39	[BUG]  [BUGGY]  int  pj  =  permutation[j  +  1]  *  0xff;  [FE]  ArrayIndexOutOfBoundsException  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {      [BUGGY]  int  pj  =  permutation[j  +  1]  *  0xff;  [BUGGY]      point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	428	428	2	replace	int  pj  =  permutation[j  +  1]  *  0xff;	  int    pj    =    permutation[j    +    1]    &    0xff;    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	94	15	replace
40	[BUG]  [BUGGY]  int  point[j]  =  oldX[j].doubleValue()  +  1;  [CE]  ']'  expected  [FE]                  AssertionFailedError      [CONTEXT]      xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {      [BUGGY]  int  point[j]  =  oldX[j].doubleValue()  +  1;  [BUGGY]      int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	428	428	2	replace	int  point[j]  =  oldX[j].doubleValue()  +  1;	  int    point[j]    =    oldX[j].doubleValue();    	non-compiled	[CE]  ']'  expected	67	None	replace
41	[BUG]  [BUGGY]  int  point[j]  =  oldRes[j].doubleValue();  [CE]  ']'  expected  [FE]                    AssertionFailedError      [CONTEXT]      xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {      [BUGGY]  int  point[j]  =  oldRes[j].doubleValue();  [BUGGY]      int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	428	428	2	replace	int  point[j]  =  oldRes[j].doubleValue();	  int    point[j]    =    oldX[j].doubleValue();    	non-compiled	[CE]  ']'  expected	67	None	replace
42	[BUG]  [BUGGY]  long  pj  =  permutation[j];  point[pj]  =  oldX[pj];  [CE]  possible  loss  of  precision  [FE]                AssertionFailedError      [CONTEXT]      xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {      [BUGGY]  long  pj  =  permutation[j];  point[pj]  =  oldX[pj];  [BUGGY]      int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	428	428	2	replace	long  pj  =  permutation[j];  point[pj]  =  oldX[pj];	  float    pj    =    permutation[j];    point[pj]    =    oldX[pj];    	non-compiled	[CE]  possible  loss  of  precision	73	None	replace
43	[BUG]  [BUGGY]  int  oldX  =  permutation[j]  +  point;  [CE]  variable  oldX  is  already  defined  in  method  doOptimize()  [FE]                AssertionFailedError      [CONTEXT]      xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {      [BUGGY]  int  oldX  =  permutation[j]  +  point;  [BUGGY]      int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	428	428	2	replace	int  oldX  =  permutation[j]  +  point;	  int    oldX    =    permutation[j]    +    cost;    	non-compiled	[CE]  variable  oldX  is  already  defined  in  method  doOptimize()	37	None	replace
44	[BUG]  [BUGGY]  int  oldX  =  permutation[j]  +  xNorm;  [CE]  variable  oldX  is  already  defined  in  method  doOptimize()  [FE]                  AssertionFailedError      [CONTEXT]      xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {      [BUGGY]  int  oldX  =  permutation[j]  +  xNorm;  [BUGGY]      int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	428	428	2	replace	int  oldX  =  permutation[j]  +  xNorm;	  int    oldX    =    permutation[j]    +    cost;    	non-compiled	[CE]  variable  oldX  is  already  defined  in  method  doOptimize()	37	None	replace
45	[BUG]  [BUGGY]  int  oldX  =  permutation[j]  -  cost;  [CE]  variable  oldX  is  already  defined  in  method  doOptimize()  [FE]                    AssertionFailedError      [CONTEXT]      xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {      [BUGGY]  int  oldX  =  permutation[j]  -  cost;  [BUGGY]      int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	428	428	2	replace	int  oldX  =  permutation[j]  -  cost;	  int    oldX    =    permutation[j]    +    cost;    	non-compiled	[CE]  variable  oldX  is  already  defined  in  method  doOptimize()	37	None	replace
46	[BUG]  [BUGGY]  int  pj  =  permutation[j  +  1]  -  1;  int  pj  =  permutation[j  +  1]  -  1;  [CE]  variable  pj  is  already  defined  in  method  doOptimize()  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {      [BUGGY]  int  pj  =  permutation[j  +  1]  -  1;  int  pj  =  permutation[j  +  1]  -  1;  [BUGGY]      point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	428	428	2	replace	int    pj    =    permutation[j    +    1]    -    1;    int  pj  =  permutation[j  +  1]  -  1;	  	non-compiled	[CE]  variable  pj  is  already  defined  in  method  doOptimize()	78	None	add
47	[BUG]  [BUGGY]  int  pj  =  permutation[j  +  1]  -  1;  Int  pj  =  permutation[j  +  1]  -  1;  [CE]  cannot  find  symbol  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {      [BUGGY]  int  pj  =  permutation[j  +  1]  -  1;  Int  pj  =  permutation[j  +  1]  -  1;  [BUGGY]      point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	428	428	2	replace	int    pj    =    permutation[j    +    1]    -    1;    Int  pj  =  permutation[j  +  1]  -  1;	  	non-compiled	[CE]  cannot  find  symbol	78	None	add
48	[BUG]  [BUGGY]  int  pj  =  permutation[j  +  1]  -  1;  int  pj  =  permutation[j  +  1)]  -  1;  [CE]  ']'  expected  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {      [BUGGY]  int  pj  =  permutation[j  +  1]  -  1;  int  pj  =  permutation[j  +  1)]  -  1;  [BUGGY]      point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	428	428	2	replace	int    pj    =    permutation[j    +    1]    -    1;    int  pj  =  permutation[j  +  1)]  -  1;	  	non-compiled	[CE]  ']'  expected	78	None	add
49	[BUG]  [BUGGY]  int  pj  =  permutation[j]  *  1;  int  pj  =  permutation[j]  *  1;  [CE]  variable  pj  is  already  defined  in  method  doOptimize()  [FE]    AssertionFailedError    [CONTEXT]      xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {      [BUGGY]  int  pj  =  permutation[j]  *  1;  int  pj  =  permutation[j]  *  1;  [BUGGY]      point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	428	428	2	replace	int    pj    =    permutation[j]    *    1;    int  pj  =  permutation[j]  *  1;	  	non-compiled	[CE]  variable  pj  is  already  defined  in  method  doOptimize()	60	None	add
50	[BUG]  [BUGGY]  int  pj  =  permutation[j]  *  1;  Int  pj  =  permutation[j]  *  1;  [CE]  cannot  find  symbol  [FE]      AssertionFailedError    [CONTEXT]      xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {      [BUGGY]  int  pj  =  permutation[j]  *  1;  Int  pj  =  permutation[j]  *  1;  [BUGGY]      point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	428	428	2	replace	int    pj    =    permutation[j]    *    1;    Int  pj  =  permutation[j]  *  1;	  	non-compiled	[CE]  cannot  find  symbol	60	None	add
51	[BUG]  [BUGGY]  int  pj  =  permutation[j]  *  1;  int  pj  =  permutation[j]  *  2;  [CE]  variable  pj  is  already  defined  in  method  doOptimize()  [FE]        AssertionFailedError    [CONTEXT]      xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {      [BUGGY]  int  pj  =  permutation[j]  *  1;  int  pj  =  permutation[j]  *  2;  [BUGGY]      point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	428	428	2	replace	int    pj    =    permutation[j]    *    1;    int  pj  =  permutation[j]  *  2;	  	non-compiled	[CE]  variable  pj  is  already  defined  in  method  doOptimize()	60	None	add
52	[BUG]  [BUGGY]  Integer  pj  =  point[j];  [CE]  incompatible  types  [FE]                AssertionFailedError      [CONTEXT]      xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {      [BUGGY]  Integer  pj  =  point[j];  [BUGGY]      point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	428	428	2	replace	Integer  pj  =  point[j];	  long    pj    =    point[j];    	non-compiled	[CE]  incompatible  types	50	None	replace
53	[BUG]  [BUGGY]  Int  pj  =  point[j];  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {      [BUGGY]  Int  pj  =  point[j];  [BUGGY]      point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	428	428	2	replace	Int  pj  =  point[j];	  long    pj    =    point[j];    	non-compiled	[CE]  cannot  find  symbol	50	None	replace
54	[BUG]  [BUGGY]  int  pj  =  permutation[j  -  1]  +  1;  int  pj  =  permutation[j  -  1]  +  1;  [CE]  variable  pj  is  already  defined  in  method  doOptimize()  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {      [BUGGY]  int  pj  =  permutation[j  -  1]  +  1;  int  pj  =  permutation[j  -  1]  +  1;  [BUGGY]      point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	428	428	2	replace	int    pj    =    permutation[j    -    1]    +    1;    int  pj  =  permutation[j  -  1]  +  1;	  	non-compiled	[CE]  variable  pj  is  already  defined  in  method  doOptimize()	16	None	add
55	[BUG]  [BUGGY]  int  pj  =  permutation[j  -  1]  +  1;  Int  pj  =  permutation[j  -  1]  +  1;  [CE]  cannot  find  symbol  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {      [BUGGY]  int  pj  =  permutation[j  -  1]  +  1;  Int  pj  =  permutation[j  -  1]  +  1;  [BUGGY]      point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	428	428	2	replace	int    pj    =    permutation[j    -    1]    +    1;    Int  pj  =  permutation[j  -  1]  +  1;	  	non-compiled	[CE]  cannot  find  symbol	16	None	add
56	[BUG]  [BUGGY]  int  pj  =  permutation[j  -  1]  +  1;  Integer  pj  =  permutation[j  -  1]  +  1;  [CE]  variable  pj  is  already  defined  in  method  doOptimize()  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {      [BUGGY]  int  pj  =  permutation[j  -  1]  +  1;  Integer  pj  =  permutation[j  -  1]  +  1;  [BUGGY]      point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	428	428	2	replace	int    pj    =    permutation[j    -    1]    +    1;    Integer  pj  =  permutation[j  -  1]  +  1;	  	non-compiled	[CE]  variable  pj  is  already  defined  in  method  doOptimize()	16	None	add
57	[BUG]  [BUGGY]  int  pj  =  permutation[j  -  1]  +  1;  int  pj  =  permutation[j  +  1]  +  1;  [CE]  variable  pj  is  already  defined  in  method  doOptimize()  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]      xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {      [BUGGY]  int  pj  =  permutation[j  -  1]  +  1;  int  pj  =  permutation[j  +  1]  +  1;  [BUGGY]      point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	428	428	2	replace	int    pj    =    permutation[j    -    1]    +    1;    int  pj  =  permutation[j  +  1]  +  1;	  	non-compiled	[CE]  variable  pj  is  already  defined  in  method  doOptimize()	16	None	add
58	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {      [BUGGY]  int  pj  =  permutation[j  -  1]  *  1;  [BUGGY]      point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	428	428	2	add	int  pj  =  permutation[j  -  1]  *  1;	  int    pj    =    permutation[j    -    1]    +    1;    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	17	15	replace
59	[BUG]  [BUGGY]  int  pj  =  permutation[j  -  1]  *  1;  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {      [BUGGY]  int  pj  =  permutation[j  -  1]  *  1;  [BUGGY]      point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	428	428	2	replace	int  pj  =  permutation[j  -  1]  *  1;	  int    pj    =    permutation[j    -    1]    +    1;    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	17	15	replace
60	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {      [BUGGY]  int  pj  =  permutation[j  -  1]  +  2;  [BUGGY]      point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	428	428	2	add	int  pj  =  permutation[j  -  1]  +  2;	  int    pj    =    permutation[j    -    1]    +    1;    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	17	15	replace
61	[BUG]  [BUGGY]  int  pj  =  permutation[j  -  1]  +  2;  [FE]  ArrayIndexOutOfBoundsException  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {      [BUGGY]  int  pj  =  permutation[j  -  1]  +  2;  [BUGGY]      point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	428	428	2	replace	int  pj  =  permutation[j  -  1]  +  2;	  int    pj    =    permutation[j    -    1]    +    1;    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	17	15	replace
62	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {      [BUGGY]  int  pj  =  permutation[j  -  1]  /  1;  [BUGGY]      point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	428	428	2	add	int  pj  =  permutation[j  -  1]  /  1;	  int    pj    =    permutation[j    -    1]    +    1;    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	17	15	replace
63	[BUG]  [BUGGY]  int  pj  =  permutation[j  -  1]  /  1;  [FE]  ArrayIndexOutOfBoundsException  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {      [BUGGY]  int  pj  =  permutation[j  -  1]  /  1;  [BUGGY]      point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	428	428	2	replace	int  pj  =  permutation[j  -  1]  /  1;	  int    pj    =    permutation[j    -    1]    +    1;    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	17	15	replace
64	[BUG]  [BUGGY]  int  permutation[j]  =  1;  [CE]  ']'  expected  [FE]              AssertionFailedError      [CONTEXT]      xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {      [BUGGY]  int  permutation[j]  =  1;  [BUGGY]      int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	428	428	2	replace	int  permutation[j]  =  1;	  int    permutation[j]    =    0;    	non-compiled	[CE]  ']'  expected	81	None	replace
65	[BUG]  [BUGGY]  int  permutation[j]  =  -1;  [CE]  ']'  expected  [FE]                AssertionFailedError      [CONTEXT]      xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {      [BUGGY]  int  permutation[j]  =  -1;  [BUGGY]      int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	428	428	2	replace	int  permutation[j]  =  -1;	  int    permutation[j]    =    0;    	non-compiled	[CE]  ']'  expected	81	None	replace
66	[BUG]  [BUGGY]  int  point  =  permutation[j]  +  2;  [CE]  cannot  find  symbol  pj  [FE]              AssertionFailedError      [CONTEXT]      xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {      [BUGGY]  int  point  =  permutation[j]  +  2;  [BUGGY]      int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	428	428	2	replace	int  point  =  permutation[j]  +  2;	  int    point    =    permutation[j]    +    1;    	non-compiled	[CE]  cannot  find  symbol  pj	43	None	replace
67	[BUG]  [BUGGY]  int  point  =  permutation[j]  +  0;  [CE]  cannot  find  symbol  pj  [FE]                AssertionFailedError      [CONTEXT]      xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {      [BUGGY]  int  point  =  permutation[j]  +  0;  [BUGGY]      int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	428	428	2	replace	int  point  =  permutation[j]  +  0;	  int    point    =    permutation[j]    +    1;    	non-compiled	[CE]  cannot  find  symbol  pj	43	None	replace
68	[BUG]  [BUGGY]  int  point[j]  =  oldX.doubleValue();  [CE]  ']'  expected  [FE]                  AssertionFailedError      [CONTEXT]      xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {      [BUGGY]  int  point[j]  =  oldX.doubleValue();  [BUGGY]      int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	428	428	2	replace	int  point[j]  =  oldX.doubleValue();	  int    point[j]    =    cost.doubleValue();    	non-compiled	[CE]  ']'  expected	86	None	replace
69	[BUG]  [BUGGY]  int  point[j]  =  xNorm.doubleValue();  [CE]  ']'  expected  [FE]                    AssertionFailedError      [CONTEXT]      xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {      [BUGGY]  int  point[j]  =  xNorm.doubleValue();  [BUGGY]      int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	428	428	2	replace	int  point[j]  =  xNorm.doubleValue();	  int    point[j]    =    cost.doubleValue();    	non-compiled	[CE]  ']'  expected	86	None	replace
70	[BUG]  [BUGGY]  int  point[j]  =  cost.doubleValue()  +  1;  [CE]  ']'  expected  [FE]                      AssertionFailedError      [CONTEXT]      xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {      [BUGGY]  int  point[j]  =  cost.doubleValue()  +  1;  [BUGGY]      int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	428	428	2	replace	int  point[j]  =  cost.doubleValue()  +  1;	  int    point[j]    =    cost.doubleValue();    	non-compiled	[CE]  ']'  expected	86	None	replace
71	[BUG]  [BUGGY]  double  pj  =  oldRes[j];  [CE]  possible  loss  of  precision  [FE]            AssertionFailedError      [CONTEXT]      xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {      [BUGGY]  double  pj  =  oldRes[j];  [BUGGY]      point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	428	428	2	replace	double  pj  =  oldRes[j];	  double    pj    =    oldX[j];    	non-compiled	[CE]  possible  loss  of  precision	32	None	replace
72	[BUG]  [BUGGY]  double  pj  =  oldX[j]  +  cost;  [CE]  possible  loss  of  precision  [FE]              AssertionFailedError      [CONTEXT]      xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {      [BUGGY]  double  pj  =  oldX[j]  +  cost;  [BUGGY]      point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	428	428	2	replace	double  pj  =  oldX[j]  +  cost;	  double    pj    =    oldX[j];    	non-compiled	[CE]  possible  loss  of  precision	32	None	replace
73	[BUG]  [BUGGY]  double  pj  =  oldX[j]  +  1;  [CE]  possible  loss  of  precision  [FE]                AssertionFailedError      [CONTEXT]      xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {      [BUGGY]  double  pj  =  oldX[j]  +  1;  [BUGGY]      point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	428	428	2	replace	double  pj  =  oldX[j]  +  1;	  double    pj    =    oldX[j];    	non-compiled	[CE]  possible  loss  of  precision	32	None	replace
74	[BUG]  [BUGGY]  int  pj  =  permutation[j  +  1];  Integer  pj  =  permutation[j  +  1];  [CE]  variable  pj  is  already  defined  in  method  doOptimize()  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {      [BUGGY]  int  pj  =  permutation[j  +  1];  Integer  pj  =  permutation[j  +  1];  [BUGGY]      point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	428	428	2	replace	int  pj  =  permutation[j  +  1];  Integer  pj  =  permutation[j  +  1];	  int    pj    =    permutation[j    +    1];    Int    pj    =    permutation[j    +    1];    	non-compiled	[CE]  variable  pj  is  already  defined  in  method  doOptimize()	5	None	replace
75	[BUG]  [BUGGY]  int  permutation[j]  =  permutation[1];  [CE]  ']'  expected  [FE]                    AssertionFailedError      [CONTEXT]      xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {      [BUGGY]  int  permutation[j]  =  permutation[1];  [BUGGY]      int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	428	428	2	replace	int  permutation[j]  =  permutation[1];	  int    permutation[j]    =    permutation[0];    	non-compiled	[CE]  ']'  expected	24	None	replace
76	[BUG]  [BUGGY]  int  permutation[j]  =  permutation[0]  +  1;  [CE]  ']'  expected  [FE]                      AssertionFailedError      [CONTEXT]      xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {      [BUGGY]  int  permutation[j]  =  permutation[0]  +  1;  [BUGGY]      int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	428	428	2	replace	int  permutation[j]  =  permutation[0]  +  1;	  int    permutation[j]    =    permutation[0];    	non-compiled	[CE]  ']'  expected	24	None	replace
77	[BUG]  [BUGGY]  int  permutation[j]  =  permutation[0]  -  1;  [CE]  ']'  expected  [FE]                        AssertionFailedError      [CONTEXT]      xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {      [BUGGY]  int  permutation[j]  =  permutation[0]  -  1;  [BUGGY]      int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	428	428	2	replace	int  permutation[j]  =  permutation[0]  -  1;	  int    permutation[j]    =    permutation[0];    	non-compiled	[CE]  ']'  expected	24	None	replace
78	[BUG]  [BUGGY]  double  pj  =  cost.doubleValue();  [CE]  double  cannot  be  dereferenced  [FE]                    AssertionFailedError      [CONTEXT]      xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {      [BUGGY]  double  pj  =  cost.doubleValue();  [BUGGY]      point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	428	428	2	replace	double  pj  =  cost.doubleValue();	  double    pj    =    previousCost.doubleValue();    	non-compiled	[CE]  double  cannot  be  dereferenced	38	None	replace
79	[BUG]  [BUGGY]  double  pj  =  prevCost.doubleValue();  [CE]  cannot  find  symbol  prevCost  [FE]                      AssertionFailedError      [CONTEXT]      xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {      [BUGGY]  double  pj  =  prevCost.doubleValue();  [BUGGY]      point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	428	428	2	replace	double  pj  =  prevCost.doubleValue();	  double    pj    =    previousCost.doubleValue();    	non-compiled	[CE]  cannot  find  symbol  prevCost	38	None	replace
80	[BUG]  [BUGGY]  int  point[j]  =  permutation[j].doubleValue()  /  1;  [CE]  ']'  expected  [FE]                  AssertionFailedError      [CONTEXT]      xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {      [BUGGY]  int  point[j]  =  permutation[j].doubleValue()  /  1;  [BUGGY]      int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	428	428	2	replace	int  point[j]  =  permutation[j].doubleValue()  /  1;	  int    point[j]    =    permutation[j].doubleValue()    +    1;    	non-compiled	[CE]  ']'  expected	45	None	replace
81	[BUG]  [BUGGY]  int  point[j]  =  permutation[j].doubleValue()  *  1;  [CE]  ']'  expected  [FE]                    AssertionFailedError      [CONTEXT]      xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {      [BUGGY]  int  point[j]  =  permutation[j].doubleValue()  *  1;  [BUGGY]      int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	428	428	2	replace	int  point[j]  =  permutation[j].doubleValue()  *  1;	  int    point[j]    =    permutation[j].doubleValue()    +    1;    	non-compiled	[CE]  ']'  expected	45	None	replace
82	[BUG]  [BUGGY]  int  pj  =  cost[j]  -  1;  pj  =  permutation[j]  -  1;  [CE]  array  required,  but  double  found  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {      [BUGGY]  int  pj  =  cost[j]  -  1;  pj  =  permutation[j]  -  1;  [BUGGY]      point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	428	428	2	replace	int  pj  =  cost[j]  -  1;  pj  =  permutation[j]  -  1;	  int    pj    =    permutation[j]    -    1;    pj    =    permutation[j]    -    1;    	non-compiled	[CE]  array  required,  but  double  found	12	None	replace
83	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {      [BUGGY]  int  pj  =  permutation[j]  -  2;  pj  =  permutation[j]  -  2;  [BUGGY]      point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	428	428	2	add	int  pj  =  permutation[j]  -  2;  pj  =  permutation[j]  -  2;	  int    pj    =    permutation[j]    -    1;    pj    =    permutation[j]    -    1;    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	12	15	replace
84	[BUG]  [BUGGY]  int  pj  =  permutation[j]  -  2;  pj  =  permutation[j]  -  2;  [FE]  ArrayIndexOutOfBoundsException  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {      [BUGGY]  int  pj  =  permutation[j]  -  2;  pj  =  permutation[j]  -  2;  [BUGGY]      point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	428	428	2	replace	int  pj  =  permutation[j]  -  2;  pj  =  permutation[j]  -  2;	  int    pj    =    permutation[j]    -    1;    pj    =    permutation[j]    -    1;    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	12	15	replace
85	[BUG]  [BUGGY]  int  point[j]  =  permutation[j]  /  1;  [CE]  ']'  expected  [FE]            AssertionFailedError      [CONTEXT]      xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {      [BUGGY]  int  point[j]  =  permutation[j]  /  1;  [BUGGY]      int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	428	428	2	replace	int  point[j]  =  permutation[j]  /  1;	  int    point[j]    =    permutation[j]    +    1;    	non-compiled	[CE]  ']'  expected	25	None	replace
86	[BUG]  [BUGGY]  int  point[j]  =  permutation[j]  *  1;  [CE]  ']'  expected  [FE]              AssertionFailedError      [CONTEXT]      xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {      [BUGGY]  int  point[j]  =  permutation[j]  *  1;  [BUGGY]      int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	428	428	2	replace	int  point[j]  =  permutation[j]  *  1;	  int    point[j]    =    permutation[j]    +    1;    	non-compiled	[CE]  ']'  expected	25	None	replace
87	[BUG]  [BUGGY]  int  pj  =  permutation[j  -  1]  &  0xFFFF;  int  pj  =  permutation[j  -  1]  &  0xFFFF;  [CE]  variable  pj  is  already  defined  in  method  doOptimize()  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {      [BUGGY]  int  pj  =  permutation[j  -  1]  &  0xFFFF;  int  pj  =  permutation[j  -  1]  &  0xFFFF;  [BUGGY]      point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	428	428	2	replace	int    pj    =    permutation[j    -    1]    &    0xFFFF;    int  pj  =  permutation[j  -  1]  &  0xFFFF;	  	non-compiled	[CE]  variable  pj  is  already  defined  in  method  doOptimize()	84	None	add
88	[BUG]  [BUGGY]  int  pj  =  permutation[j  -  1]  &  0xFFFF;  Int  pj  =  permutation[j  -  1]  &  0xFFFF;  [CE]  cannot  find  symbol  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {      [BUGGY]  int  pj  =  permutation[j  -  1]  &  0xFFFF;  Int  pj  =  permutation[j  -  1]  &  0xFFFF;  [BUGGY]      point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	428	428	2	replace	int    pj    =    permutation[j    -    1]    &    0xFFFF;    Int  pj  =  permutation[j  -  1]  &  0xFFFF;	  	non-compiled	[CE]  cannot  find  symbol	84	None	add
89	[BUG]  [BUGGY]  int  pj  =  permutation[j  -  1]  &  0xFFFF;  int  pj  =  permutation[j  -  1]  &  0xFFFF);  [CE]  ';'  expected  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {      [BUGGY]  int  pj  =  permutation[j  -  1]  &  0xFFFF;  int  pj  =  permutation[j  -  1]  &  0xFFFF);  [BUGGY]      point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	428	428	2	replace	int    pj    =    permutation[j    -    1]    &    0xFFFF;    int  pj  =  permutation[j  -  1]  &  0xFFFF);	  	non-compiled	[CE]  ';'  expected	84	None	add
90	[BUG]  [BUGGY]  int  pj  =  permutation[j  -  1]  &  0xFFFF;  Integer  pj  =  permutation[j  -  1]  &  0xFFFF;  [CE]  variable  pj  is  already  defined  in  method  doOptimize()  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]      xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {      [BUGGY]  int  pj  =  permutation[j  -  1]  &  0xFFFF;  Integer  pj  =  permutation[j  -  1]  &  0xFFFF;  [BUGGY]      point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	428	428	2	replace	int    pj    =    permutation[j    -    1]    &    0xFFFF;    Integer  pj  =  permutation[j  -  1]  &  0xFFFF;	  	non-compiled	[CE]  variable  pj  is  already  defined  in  method  doOptimize()	84	None	add
91	[BUG]  [BUGGY]  Double  pj  =  oldX[j]  +  cost;  [CE]  incompatible  types  [FE]            AssertionFailedError      [CONTEXT]      xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {      [BUGGY]  Double  pj  =  oldX[j]  +  cost;  [BUGGY]      point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	428	428	2	replace	Double  pj  =  oldX[j]  +  cost;	  Double    pj    =    oldX[j];    	non-compiled	[CE]  incompatible  types	89	None	replace
92	[BUG]  [BUGGY]  Double  pj  =  oldX[0];  [CE]  incompatible  types  [FE]              AssertionFailedError      [CONTEXT]      xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {      [BUGGY]  Double  pj  =  oldX[0];  [BUGGY]      point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	428	428	2	replace	Double  pj  =  oldX[0];	  Double    pj    =    oldX[j];    	non-compiled	[CE]  incompatible  types	89	None	replace
93	[BUG]  [BUGGY]  int  pj  =  permutation[j  -  1]  &  0x7F;  int  pj  =  permutation[j  -  1]  &  0x7F;  [CE]  variable  pj  is  already  defined  in  method  doOptimize()  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {      [BUGGY]  int  pj  =  permutation[j  -  1]  &  0x7F;  int  pj  =  permutation[j  -  1]  &  0x7F;  [BUGGY]      point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	428	428	2	replace	int    pj    =    permutation[j    -    1]    &    0x7F;    int  pj  =  permutation[j  -  1]  &  0x7F;	  	non-compiled	[CE]  variable  pj  is  already  defined  in  method  doOptimize()	70	None	add
94	[BUG]  [BUGGY]  int  pj  =  permutation[j  -  1]  &  0x7F;  Int  pj  =  permutation[j  -  1]  &  0x7F;  [CE]  cannot  find  symbol  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {      [BUGGY]  int  pj  =  permutation[j  -  1]  &  0x7F;  Int  pj  =  permutation[j  -  1]  &  0x7F;  [BUGGY]      point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	428	428	2	replace	int    pj    =    permutation[j    -    1]    &    0x7F;    Int  pj  =  permutation[j  -  1]  &  0x7F;	  	non-compiled	[CE]  cannot  find  symbol	70	None	add
95	[BUG]  [BUGGY]  int  pj  =  permutation[j  -  1]  &  0x7F;  Integer  pj  =  permutation[j  -  1]  &  0x7F;  [CE]  variable  pj  is  already  defined  in  method  doOptimize()  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {      [BUGGY]  int  pj  =  permutation[j  -  1]  &  0x7F;  Integer  pj  =  permutation[j  -  1]  &  0x7F;  [BUGGY]      point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	428	428	2	replace	int    pj    =    permutation[j    -    1]    &    0x7F;    Integer  pj  =  permutation[j  -  1]  &  0x7F;	  	non-compiled	[CE]  variable  pj  is  already  defined  in  method  doOptimize()	70	None	add
96	[BUG]  [BUGGY]  int  pj  =  permutation[j  -  1]  &  0x7F;  pj  =  permutation[j  -  1]  &  0x7F;  [CE]  variable  pj  is  already  defined  in  method  doOptimize()  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]      xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {      [BUGGY]  int  pj  =  permutation[j  -  1]  &  0x7F;  pj  =  permutation[j  -  1]  &  0x7F;  [BUGGY]      point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	428	428	2	replace	int    pj    =    permutation[j    -    1]    &    0x7F;    pj  =  permutation[j  -  1]  &  0x7F;	  	non-compiled	[CE]  variable  pj  is  already  defined  in  method  doOptimize()	70	None	add
97	[BUG]  [BUGGY]  int  pj  =  permutation[j]  -  2;  int  pj  =  permutation[j]  -  2;  [CE]  variable  pj  is  already  defined  in  method  doOptimize()  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {      [BUGGY]  int  pj  =  permutation[j]  -  2;  int  pj  =  permutation[j]  -  2;  [BUGGY]      point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	428	428	2	replace	int    pj    =    permutation[j]    -    2;    int  pj  =  permutation[j]  -  2;	  	non-compiled	[CE]  variable  pj  is  already  defined  in  method  doOptimize()	54	None	add
98	[BUG]  [BUGGY]  int  pj  =  permutation[j]  -  2;  Int  pj  =  permutation[j]  -  2;  [CE]  cannot  find  symbol  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {      [BUGGY]  int  pj  =  permutation[j]  -  2;  Int  pj  =  permutation[j]  -  2;  [BUGGY]      point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	428	428	2	replace	int    pj    =    permutation[j]    -    2;    Int  pj  =  permutation[j]  -  2;	  	non-compiled	[CE]  cannot  find  symbol	54	None	add
99	[BUG]  [BUGGY]  int  pj  =  permutation[j]  -  2;  tmpVec  =  permutation[j]  -  2;  [CE]  incompatible  types  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {      [BUGGY]  int  pj  =  permutation[j]  -  2;  tmpVec  =  permutation[j]  -  2;  [BUGGY]      point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	428	428	2	replace	int    pj    =    permutation[j]    -    2;    tmpVec  =  permutation[j]  -  2;	  	non-compiled	[CE]  incompatible  types	54	None	add
100	[BUG]  [BUGGY]  Integer  point  =  oldX[j];  [CE]  incompatible  types  [FE]                    AssertionFailedError      [CONTEXT]      xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {      [BUGGY]  Integer  point  =  oldX[j];  [BUGGY]      int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	428	428	2	replace	Integer  point  =  oldX[j];	  long    point    =    oldX[j];    	non-compiled	[CE]  incompatible  types	53	None	replace
101	[BUG]  [BUGGY]  int  point  =  oldY[j];  [CE]  cannot  find  symbol  oldY  [FE]                      AssertionFailedError      [CONTEXT]      xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {      [BUGGY]  int  point  =  oldY[j];  [BUGGY]      int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	428	428	2	replace	int  point  =  oldY[j];	  long    point    =    oldX[j];    	non-compiled	[CE]  cannot  find  symbol  oldY	53	None	replace
102	[BUG]  [BUGGY]  Integer  pj  =  oldX[j];  [CE]  incompatible  types  [FE]                AssertionFailedError      [CONTEXT]      xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {      [BUGGY]  Integer  pj  =  oldX[j];  [BUGGY]      point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	428	428	2	replace	Integer  pj  =  oldX[j];	  long    pj    =    oldX[j];    	non-compiled	[CE]  incompatible  types	34	None	replace
103	[BUG]  [BUGGY]  Int  pj  =  oldX[j];  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {      [BUGGY]  Int  pj  =  oldX[j];  [BUGGY]      point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	428	428	2	replace	Int  pj  =  oldX[j];	  long    pj    =    oldX[j];    	non-compiled	[CE]  cannot  find  symbol	34	None	replace
104	[BUG]  [BUGGY]  int  oldX  =  permutation[j]  -  2;  [CE]  variable  oldX  is  already  defined  in  method  doOptimize()  [FE]            AssertionFailedError      [CONTEXT]      xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {      [BUGGY]  int  oldX  =  permutation[j]  -  2;  [BUGGY]      int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	428	428	2	replace	int  oldX  =  permutation[j]  -  2;	  int    oldX    =    permutation[j]    -    1;    	non-compiled	[CE]  variable  oldX  is  already  defined  in  method  doOptimize()	35	None	replace
105	[BUG]  [BUGGY]  int  oldX  =  permutation[j]  /  1;  [CE]  variable  oldX  is  already  defined  in  method  doOptimize()  [FE]              AssertionFailedError      [CONTEXT]      xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {      [BUGGY]  int  oldX  =  permutation[j]  /  1;  [BUGGY]      int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	428	428	2	replace	int  oldX  =  permutation[j]  /  1;	  int    oldX    =    permutation[j]    -    1;    	non-compiled	[CE]  variable  oldX  is  already  defined  in  method  doOptimize()	35	None	replace
106	[BUG]  [BUGGY]  double  point  =  permutation[j];  [CE]  cannot  find  symbol  pj  [FE]                AssertionFailedError      [CONTEXT]      xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {      [BUGGY]  double  point  =  permutation[j];  [BUGGY]      int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	428	428	2	replace	double  point  =  permutation[j];	  double    point    =    oldX[j];    	non-compiled	[CE]  cannot  find  symbol  pj	51	None	replace
107	[BUG]  [BUGGY]  double  pj  =  permutation[j];  [CE]  possible  loss  of  precision  [FE]                  AssertionFailedError      [CONTEXT]      xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {      [BUGGY]  double  pj  =  permutation[j];  [BUGGY]      int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	428	428	2	replace	double  pj  =  permutation[j];	  double    point    =    oldX[j];    	non-compiled	[CE]  possible  loss  of  precision	51	None	replace
108	[BUG]  [BUGGY]  int  point[j]  =  oldX[j]  -  1;  [CE]  ']'  expected  [FE]                  AssertionFailedError      [CONTEXT]      xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {      [BUGGY]  int  point[j]  =  oldX[j]  -  1;  [BUGGY]      int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	428	428	2	replace	int  point[j]  =  oldX[j]  -  1;	  int    point[j]    =    oldX[j]    +    1;    	non-compiled	[CE]  ']'  expected	69	None	replace
109	[BUG]  [BUGGY]  int  point[j]  =  oldX[j]  *  1;  [CE]  ']'  expected  [FE]                    AssertionFailedError      [CONTEXT]      xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {      [BUGGY]  int  point[j]  =  oldX[j]  *  1;  [BUGGY]      int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	428	428	2	replace	int  point[j]  =  oldX[j]  *  1;	  int    point[j]    =    oldX[j]    +    1;    	non-compiled	[CE]  ']'  expected	69	None	replace
110	[BUG]  [BUGGY]  int  point[j]  =  permutation[j]  -  2;  [CE]  ']'  expected  [FE]              AssertionFailedError      [CONTEXT]      xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {      [BUGGY]  int  point[j]  =  permutation[j]  -  2;  [BUGGY]      int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	428	428	2	replace	int  point[j]  =  permutation[j]  -  2;	  int    point[j]    =    permutation[j]    -    1;    	non-compiled	[CE]  ']'  expected	26	None	replace
111	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]        ArrayIndexOutOfBoundsException      [CONTEXT]      xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {      [BUGGY]  int  pj  =  permutation[j]  +  2;  [BUGGY]      point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	428	428	2	add	int  pj  =  permutation[j]  +  2;	  int    pj    =    permutation[j]    +    1;    int    pj    =    permutation[j]    +    1;    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	27	15	replace
112	[BUG]  [BUGGY]  int  pj  =  permutation[j]  +  2;  [FE]  ArrayIndexOutOfBoundsException  [FE]        ArrayIndexOutOfBoundsException      [CONTEXT]      xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {      [BUGGY]  int  pj  =  permutation[j]  +  2;  [BUGGY]      point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	428	428	2	replace	int  pj  =  permutation[j]  +  2;	  int    pj    =    permutation[j]    +    1;    int    pj    =    permutation[j]    +    1;    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	27	15	replace
113	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {      [BUGGY]  int  pj  =  permutation[j]  +  3;  [BUGGY]      point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	428	428	2	add	int  pj  =  permutation[j]  +  3;	  int    pj    =    permutation[j]    +    1;    int    pj    =    permutation[j]    +    1;    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	27	15	replace
114	[BUG]  [BUGGY]  int  pj  =  permutation[j]  +  3;  [FE]  ArrayIndexOutOfBoundsException  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {      [BUGGY]  int  pj  =  permutation[j]  +  3;  [BUGGY]      point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	428	428	2	replace	int  pj  =  permutation[j]  +  3;	  int    pj    =    permutation[j]    +    1;    int    pj    =    permutation[j]    +    1;    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	27	15	replace
115	[BUG]  [BUGGY]  int  permutation[j]  =  previousCost;  [CE]  ']'  expected  [FE]                AssertionFailedError      [CONTEXT]      xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {      [BUGGY]  int  permutation[j]  =  previousCost;  [BUGGY]      int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	428	428	2	replace	int  permutation[j]  =  previousCost;	  int    permutation[j]    =    cost;    	non-compiled	[CE]  ']'  expected	22	None	replace
116	[BUG]  [BUGGY]  int  permutation[j]  =  cost  +  1;  [CE]  ']'  expected  [FE]                  AssertionFailedError      [CONTEXT]      xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {      [BUGGY]  int  permutation[j]  =  cost  +  1;  [BUGGY]      int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	428	428	2	replace	int  permutation[j]  =  cost  +  1;	  int    permutation[j]    =    cost;    	non-compiled	[CE]  ']'  expected	22	None	replace
117	[BUG]  [BUGGY]  double  pj  =  Math.sqrt(previousCost,  solvedCols);  [CE]  method  sqrt  in  class  Math  cannot  be  applied  to  given  types;  [FE]                    AssertionFailedError      [CONTEXT]      xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {      [BUGGY]  double  pj  =  Math.sqrt(previousCost,  solvedCols);  [BUGGY]      point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	428	428	2	replace	double  pj  =  Math.sqrt(previousCost,  solvedCols);	  double    pj    =    Math.sqrt(previousCost);    	non-compiled	[CE]  method  sqrt  in  class  Math  cannot  be  applied  to  given  types;	74	None	replace
118	[BUG]  [BUGGY]  int  pj  =  Math.sqrt(previousCost);  [CE]  possible  loss  of  precision  [FE]                      AssertionFailedError      [CONTEXT]      xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {      [BUGGY]  int  pj  =  Math.sqrt(previousCost);  [BUGGY]      point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	428	428	2	replace	int  pj  =  Math.sqrt(previousCost);	  double    pj    =    Math.sqrt(previousCost);    	non-compiled	[CE]  possible  loss  of  precision	74	None	replace
119	[BUG]  [BUGGY]  double  pj  =  Math.sqrt(previousCost,  solveCols);  [CE]  cannot  find  symbol  solveCols  [FE]                        AssertionFailedError      [CONTEXT]      xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {      [BUGGY]  double  pj  =  Math.sqrt(previousCost,  solveCols);  [BUGGY]      point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	428	428	2	replace	double  pj  =  Math.sqrt(previousCost,  solveCols);	  double    pj    =    Math.sqrt(previousCost);    	non-compiled	[CE]  cannot  find  symbol  solveCols	74	None	replace
120	[BUG]  [BUGGY]  int  point[j]  =  xNorm  +  1;  [CE]  ']'  expected  [FE]                  AssertionFailedError      [CONTEXT]      xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {      [BUGGY]  int  point[j]  =  xNorm  +  1;  [BUGGY]      int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	428	428	2	replace	int  point[j]  =  xNorm  +  1;	  int    point[j]    =    xNorm;    	non-compiled	[CE]  ']'  expected	8	None	replace
121	[BUG]  [BUGGY]  int  point[j]  =  0;  [CE]  ']'  expected  [FE]                    AssertionFailedError      [CONTEXT]      xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {      [BUGGY]  int  point[j]  =  0;  [BUGGY]      int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	428	428	2	replace	int  point[j]  =  0;	  int    point[j]    =    xNorm;    	non-compiled	[CE]  ']'  expected	8	None	replace
122	[BUG]  [BUGGY]  int  permutation[j]  =  oldX[0];  [CE]  ']'  expected  [FE]                  AssertionFailedError      [CONTEXT]      xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {      [BUGGY]  int  permutation[j]  =  oldX[0];  [BUGGY]      int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	428	428	2	replace	int  permutation[j]  =  oldX[0];	  int    permutation[j]    =    oldX[j];    	non-compiled	[CE]  ']'  expected	23	None	replace
123	[BUG]  [BUGGY]  int  oldX  =  permutation[j]  -  0xF;  [CE]  variable  oldX  is  already  defined  in  method  doOptimize()  [FE]            AssertionFailedError      [CONTEXT]      xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {      [BUGGY]  int  oldX  =  permutation[j]  -  0xF;  [BUGGY]      int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	428	428	2	replace	int  oldX  =  permutation[j]  -  0xF;	  int    oldX    =    permutation[j]    &    0xF;    	non-compiled	[CE]  variable  oldX  is  already  defined  in  method  doOptimize()	82	None	replace
124	[BUG]  [BUGGY]  int  oldX  =  permutation[j]  &  1;  [CE]  variable  oldX  is  already  defined  in  method  doOptimize()  [FE]              AssertionFailedError      [CONTEXT]      xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {      [BUGGY]  int  oldX  =  permutation[j]  &  1;  [BUGGY]      int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	428	428	2	replace	int  oldX  =  permutation[j]  &  1;	  int    oldX    =    permutation[j]    &    0xF;    	non-compiled	[CE]  variable  oldX  is  already  defined  in  method  doOptimize()	82	None	replace
125	[BUG]  [BUGGY]  int  oldX  =  permutation[j]  &  0xf;  [CE]  variable  oldX  is  already  defined  in  method  doOptimize()  [FE]                AssertionFailedError      [CONTEXT]      xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {      [BUGGY]  int  oldX  =  permutation[j]  &  0xf;  [BUGGY]      int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	428	428	2	replace	int  oldX  =  permutation[j]  &  0xf;	  int    oldX    =    permutation[j]    &    0xF;    	non-compiled	[CE]  variable  oldX  is  already  defined  in  method  doOptimize()	82	None	replace
126	[BUG]  [BUGGY]  int  pj  =  permutation[j  -  2];  int  pj  =  permutation[j  -  2];  [CE]  variable  pj  is  already  defined  in  method  doOptimize()  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {      [BUGGY]  int  pj  =  permutation[j  -  2];  int  pj  =  permutation[j  -  2];  [BUGGY]      point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	428	428	2	replace	int    pj    =    permutation[j    -    2];    int  pj  =  permutation[j  -  2];	  	non-compiled	[CE]  variable  pj  is  already  defined  in  method  doOptimize()	14	None	add
127	[BUG]  [BUGGY]  int  pj  =  permutation[j  -  2];  Int  pj  =  permutation[j  -  2];  [CE]  cannot  find  symbol  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {      [BUGGY]  int  pj  =  permutation[j  -  2];  Int  pj  =  permutation[j  -  2];  [BUGGY]      point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	428	428	2	replace	int    pj    =    permutation[j    -    2];    Int  pj  =  permutation[j  -  2];	  	non-compiled	[CE]  cannot  find  symbol	14	None	add
128	[BUG]  [BUGGY]  int  pj  =  permutation[j  -  2];  pj  =  permutation[j  -  2];  [CE]  variable  pj  is  already  defined  in  method  doOptimize()  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {      [BUGGY]  int  pj  =  permutation[j  -  2];  pj  =  permutation[j  -  2];  [BUGGY]      point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	428	428	2	replace	int    pj    =    permutation[j    -    2];    pj  =  permutation[j  -  2];	  	non-compiled	[CE]  variable  pj  is  already  defined  in  method  doOptimize()	14	None	add
129	[BUG]  [BUGGY]  int  pj  =  permutation[j  -  1];  Integer  pj  =  permutation[j  -  1];  [CE]  variable  pj  is  already  defined  in  method  doOptimize()  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {      [BUGGY]  int  pj  =  permutation[j  -  1];  Integer  pj  =  permutation[j  -  1];  [BUGGY]      point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	428	428	2	replace	int  pj  =  permutation[j  -  1];  Integer  pj  =  permutation[j  -  1];	  int    pj    =    permutation[j    -    1];    Int    pj    =    permutation[j    -    1];    	non-compiled	[CE]  variable  pj  is  already  defined  in  method  doOptimize()	19	None	replace
130	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {      [BUGGY]  int  pj  =  permutation[j]  *  2;  [BUGGY]      point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	428	428	2	add	int  pj  =  permutation[j]  *  2;	  int    pj    =    permutation[j]    +    1;    int    pj    =    permutation[j]    +    2;    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	30	15	replace
131	[BUG]  [BUGGY]  int  pj  =  permutation[j]  *  2;  [FE]  ArrayIndexOutOfBoundsException  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {      [BUGGY]  int  pj  =  permutation[j]  *  2;  [BUGGY]      point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	428	428	2	replace	int  pj  =  permutation[j]  *  2;	  int    pj    =    permutation[j]    +    1;    int    pj    =    permutation[j]    +    2;    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	30	15	replace
132	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {      [BUGGY]  int  pj  =  permutation[j]  %  1;  [BUGGY]      point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	428	428	2	add	int  pj  =  permutation[j]  %  1;	  int    pj    =    permutation[j]    *    1;    	compilable	  [FE]  AssertionFailedError  	61	12	replace
133	[BUG]  [BUGGY]  int  pj  =  permutation[j]  %  1;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {      [BUGGY]  int  pj  =  permutation[j]  %  1;  [BUGGY]      point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	428	428	2	replace	int  pj  =  permutation[j]  %  1;	  int    pj    =    permutation[j]    *    1;    	compilable	  [FE]  AssertionFailedError  	61	12	replace
134	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {      [BUGGY]  int  pj  =  permutation[j  +  1]  -  2;  [BUGGY]      point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	428	428	2	add	int  pj  =  permutation[j  +  1]  -  2;	  int    pj    =    permutation[j    +    1]    -    1;    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	79	15	replace
135	[BUG]  [BUGGY]  int  pj  =  permutation[j  +  1]  -  2;  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {      [BUGGY]  int  pj  =  permutation[j  +  1]  -  2;  [BUGGY]      point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	428	428	2	replace	int  pj  =  permutation[j  +  1]  -  2;	  int    pj    =    permutation[j    +    1]    -    1;    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	79	15	replace
136	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {      [BUGGY]  int  pj  =  permutation[j  +  1]  /  1;  [BUGGY]      point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	428	428	2	add	int  pj  =  permutation[j  +  1]  /  1;	  int    pj    =    permutation[j    +    1]    -    1;    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	79	15	replace
137	[BUG]  [BUGGY]  int  pj  =  permutation[j  +  1]  /  1;  [FE]  ArrayIndexOutOfBoundsException  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {      [BUGGY]  int  pj  =  permutation[j  +  1]  /  1;  [BUGGY]      point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	428	428	2	replace	int  pj  =  permutation[j  +  1]  /  1;	  int    pj    =    permutation[j    +    1]    -    1;    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	79	15	replace
138	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {      [BUGGY]  int  pj  =  permutation[j  *  1]  -  1;  [BUGGY]      point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	428	428	2	add	int  pj  =  permutation[j  *  1]  -  1;	  int    pj    =    permutation[j    +    1]    -    1;    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	79	15	replace
139	[BUG]  [BUGGY]  int  pj  =  permutation[j  *  1]  -  1;  [FE]  ArrayIndexOutOfBoundsException  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {      [BUGGY]  int  pj  =  permutation[j  *  1]  -  1;  [BUGGY]      point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	428	428	2	replace	int  pj  =  permutation[j  *  1]  -  1;	  int    pj    =    permutation[j    +    1]    -    1;    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	79	15	replace
140	[BUG]  [BUGGY]  tmpVec  =  oldX;  [CE]  cannot  find  symbol  pj  [FE]                          AssertionFailedError      [CONTEXT]      xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {      [BUGGY]  tmpVec  =  oldX;  [BUGGY]      point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	428	428	2	replace	tmpVec  =  oldX;	  tmpVec    =    cost;    	non-compiled	[CE]  cannot  find  symbol  pj	41	None	replace
141	[BUG]  [BUGGY]  tmpVec  =  previousCost;  [CE]  incompatible  types  [FE]                            AssertionFailedError      [CONTEXT]      xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {      [BUGGY]  tmpVec  =  previousCost;  [BUGGY]      point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	428	428	2	replace	tmpVec  =  previousCost;	  tmpVec    =    cost;    	non-compiled	[CE]  incompatible  types	41	None	replace
142	[BUG]  [BUGGY]  tmpVec  =  cost  +  1;  [CE]  incompatible  types  [FE]                              AssertionFailedError      [CONTEXT]      xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {      [BUGGY]  tmpVec  =  cost  +  1;  [BUGGY]      point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	428	428	2	replace	tmpVec  =  cost  +  1;	  tmpVec    =    cost;    	non-compiled	[CE]  incompatible  types	41	None	replace
143	[BUG]  [BUGGY]  double  pj  =  oldY[j];  [CE]  cannot  find  symbol  oldY  [FE]            AssertionFailedError      [CONTEXT]      xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {      [BUGGY]  double  pj  =  oldY[j];  [BUGGY]      point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	428	428	2	replace	double  pj  =  oldY[j];	  double    pj    =    point[j];    	non-compiled	[CE]  cannot  find  symbol  oldY	48	None	replace
144	[BUG]  [BUGGY]  double  pj  =  point[j]  +  1;  [CE]  possible  loss  of  precision  [FE]              AssertionFailedError      [CONTEXT]      xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {      [BUGGY]  double  pj  =  point[j]  +  1;  [BUGGY]      point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	428	428	2	replace	double  pj  =  point[j]  +  1;	  double    pj    =    point[j];    	non-compiled	[CE]  possible  loss  of  precision	48	None	replace
145	[BUG]  [BUGGY]  int  pj  =  permutation[j  +  1]  &  0xff;  int  pj  =  permutation[j  +  1]  &  0xff;  [CE]  variable  pj  is  already  defined  in  method  doOptimize()  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {      [BUGGY]  int  pj  =  permutation[j  +  1]  &  0xff;  int  pj  =  permutation[j  +  1]  &  0xff;  [BUGGY]      point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	428	428	2	replace	int    pj    =    permutation[j    +    1]    &    0xff;    int  pj  =  permutation[j  +  1]  &  0xff;	  	non-compiled	[CE]  variable  pj  is  already  defined  in  method  doOptimize()	93	None	add
146	[BUG]  [BUGGY]  int  pj  =  permutation[j  +  1]  &  0xff;  Int  pj  =  permutation[j  +  1]  &  0xff;  [CE]  cannot  find  symbol  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {      [BUGGY]  int  pj  =  permutation[j  +  1]  &  0xff;  Int  pj  =  permutation[j  +  1]  &  0xff;  [BUGGY]      point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	428	428	2	replace	int    pj    =    permutation[j    +    1]    &    0xff;    Int  pj  =  permutation[j  +  1]  &  0xff;	  	non-compiled	[CE]  cannot  find  symbol	93	None	add
147	[BUG]  [BUGGY]  int  pj  =  permutation[j  +  1]  &  0xff;  int  pj  =  permutation[j  +  1]  &  0xff);  [CE]  ';'  expected  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {      [BUGGY]  int  pj  =  permutation[j  +  1]  &  0xff;  int  pj  =  permutation[j  +  1]  &  0xff);  [BUGGY]      point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	428	428	2	replace	int    pj    =    permutation[j    +    1]    &    0xff;    int  pj  =  permutation[j  +  1]  &  0xff);	  	non-compiled	[CE]  ';'  expected	93	None	add
148	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {      [BUGGY]  int  pj  =  permutation[j  *  2];  [BUGGY]      point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	428	428	2	add	int  pj  =  permutation[j  *  2];	  int    pj    =    permutation[j    +    2];    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	65	15	replace
149	[BUG]  [BUGGY]  int  pj  =  permutation[j  *  2];  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {      [BUGGY]  int  pj  =  permutation[j  *  2];  [BUGGY]      point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	428	428	2	replace	int  pj  =  permutation[j  *  2];	  int    pj    =    permutation[j    +    2];    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	65	15	replace
150	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {      [BUGGY]  int  pj  =  permutation[j  +  3];  [BUGGY]      point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	428	428	2	add	int  pj  =  permutation[j  +  3];	  int    pj    =    permutation[j    +    2];    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	65	15	replace
151	[BUG]  [BUGGY]  int  pj  =  permutation[j  +  3];  [FE]  ArrayIndexOutOfBoundsException  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {      [BUGGY]  int  pj  =  permutation[j  +  3];  [BUGGY]      point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	428	428	2	replace	int  pj  =  permutation[j  +  3];	  int    pj    =    permutation[j    +    2];    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	65	15	replace
152	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    AssertionFailedError    [CONTEXT]      xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {      [BUGGY]  int  pj  =  permutation[j  *  3];  [BUGGY]      point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	428	428	2	add	int  pj  =  permutation[j  *  3];	  int    pj    =    permutation[j    *    1];    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	63	15	replace
153	[BUG]  [BUGGY]  int  pj  =  permutation[j  *  3];  [FE]  ArrayIndexOutOfBoundsException  [FE]    AssertionFailedError    [CONTEXT]      xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {      [BUGGY]  int  pj  =  permutation[j  *  3];  [BUGGY]      point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	428	428	2	replace	int  pj  =  permutation[j  *  3];	  int    pj    =    permutation[j    *    1];    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	63	15	replace
154	[BUG]  [BUGGY]  tmpVec  =  Math.sqrt(previousCost,  cost);  [CE]  method  sqrt  in  class  Math  cannot  be  applied  to  given  types;  [FE]                      AssertionFailedError      [CONTEXT]      xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {      [BUGGY]  tmpVec  =  Math.sqrt(previousCost,  cost);  [BUGGY]      point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	428	428	2	replace	tmpVec  =  Math.sqrt(previousCost,  cost);	  tmpVec    =    Math.sqrt(previousCost);    	non-compiled	[CE]  method  sqrt  in  class  Math  cannot  be  applied  to  given  types;	39	None	replace
155	[BUG]  [BUGGY]  tmpVec  =  Math.sqrt(previousCost,  solvedCols);  [CE]  method  sqrt  in  class  Math  cannot  be  applied  to  given  types;  [FE]                        AssertionFailedError      [CONTEXT]      xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {      [BUGGY]  tmpVec  =  Math.sqrt(previousCost,  solvedCols);  [BUGGY]      point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	428	428	2	replace	tmpVec  =  Math.sqrt(previousCost,  solvedCols);	  tmpVec    =    Math.sqrt(previousCost);    	non-compiled	[CE]  method  sqrt  in  class  Math  cannot  be  applied  to  given  types;	39	None	replace
156	[BUG]  [BUGGY]  tmpVec  =  Math.sqrt(previousCost,  solveCols);  [CE]  cannot  find  symbol  solveCols  [FE]                          AssertionFailedError      [CONTEXT]      xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {      [BUGGY]  tmpVec  =  Math.sqrt(previousCost,  solveCols);  [BUGGY]      point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	428	428	2	replace	tmpVec  =  Math.sqrt(previousCost,  solveCols);	  tmpVec    =    Math.sqrt(previousCost);    	non-compiled	[CE]  cannot  find  symbol  solveCols	39	None	replace
157	[BUG]  [BUGGY]  tmpVec  =  Math.sqrt(j);  [CE]  incompatible  types  [FE]                            AssertionFailedError      [CONTEXT]      xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {      [BUGGY]  tmpVec  =  Math.sqrt(j);  [BUGGY]      point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	428	428	2	replace	tmpVec  =  Math.sqrt(j);	  tmpVec    =    Math.sqrt(previousCost);    	non-compiled	[CE]  incompatible  types	39	None	replace
158	[BUG]  [BUGGY]  int  point[j]  =  permutation[j].doubleValue().doubleValue();  [CE]  ']'  expected  [FE]                    AssertionFailedError      [CONTEXT]      xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {      [BUGGY]  int  point[j]  =  permutation[j].doubleValue().doubleValue();  [BUGGY]      int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	428	428	2	replace	int  point[j]  =  permutation[j].doubleValue().doubleValue();	  int    point[j]    =    permutation[j].doubleValue()    -    1;    	non-compiled	[CE]  ']'  expected	46	None	replace
159	[BUG]  [BUGGY]  int  pj  =  permutation[j  *  1];  int  pj  =  permutation[j  *  1];  [CE]  variable  pj  is  already  defined  in  method  doOptimize()  [FE]    AssertionFailedError    [CONTEXT]      xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {      [BUGGY]  int  pj  =  permutation[j  *  1];  int  pj  =  permutation[j  *  1];  [BUGGY]      point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	428	428	2	replace	int    pj    =    permutation[j    *    1];    int  pj  =  permutation[j  *  1];	  	non-compiled	[CE]  variable  pj  is  already  defined  in  method  doOptimize()	62	None	add
160	[BUG]  [BUGGY]  int  pj  =  permutation[j  *  1];  Int  pj  =  permutation[j  *  1];  [CE]  cannot  find  symbol  [FE]      AssertionFailedError    [CONTEXT]      xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {      [BUGGY]  int  pj  =  permutation[j  *  1];  Int  pj  =  permutation[j  *  1];  [BUGGY]      point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	428	428	2	replace	int    pj    =    permutation[j    *    1];    Int  pj  =  permutation[j  *  1];	  	non-compiled	[CE]  cannot  find  symbol	62	None	add
161	[BUG]  [BUGGY]  int  pj  =  permutation[j  *  1];  int  pj  =  permutation[j  *  2];  [CE]  variable  pj  is  already  defined  in  method  doOptimize()  [FE]        AssertionFailedError    [CONTEXT]      xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {      [BUGGY]  int  pj  =  permutation[j  *  1];  int  pj  =  permutation[j  *  2];  [BUGGY]      point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	428	428	2	replace	int    pj    =    permutation[j    *    1];    int  pj  =  permutation[j  *  2];	  	non-compiled	[CE]  variable  pj  is  already  defined  in  method  doOptimize()	62	None	add
162	[BUG]  [BUGGY]  tmpVec  =  permutation[j]  +  1;  [CE]  incompatible  types  [FE]        ArrayIndexOutOfBoundsException      [CONTEXT]      xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {      [BUGGY]  tmpVec  =  permutation[j]  +  1;  [BUGGY]      point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	428	428	2	replace	tmpVec  =  permutation[j]  +  1;	  int    pj    =    permutation[j]    +    1;    tmpVec    =    permutation[j]    +    1;    	non-compiled	[CE]  incompatible  types	77	None	replace
163	[BUG]  [BUGGY]  int  pj  =  permutation[j]  +  1;  tmpVec  =  permutation[j]  +  2;  [CE]  incompatible  types  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {      [BUGGY]  int  pj  =  permutation[j]  +  1;  tmpVec  =  permutation[j]  +  2;  [BUGGY]      point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	428	428	2	replace	int  pj  =  permutation[j]  +  1;  tmpVec  =  permutation[j]  +  2;	  int    pj    =    permutation[j]    +    1;    tmpVec    =    permutation[j]    +    1;    	non-compiled	[CE]  incompatible  types	77	None	replace
164	[BUG]  [BUGGY]  int  pj  =  cost.getPosition();  [CE]  double  cannot  be  dereferenced  [FE]                        AssertionFailedError      [CONTEXT]      xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {      [BUGGY]  int  pj  =  cost.getPosition();  [BUGGY]      point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	428	428	2	replace	int  pj  =  cost.getPosition();	  int    pj    =    previousCost.getPosition();    	non-compiled	[CE]  double  cannot  be  dereferenced	40	None	replace
165	[BUG]  [BUGGY]  int  pj  =  previousCost.getPosition()  +  1;  [CE]  double  cannot  be  dereferenced  [FE]                          AssertionFailedError      [CONTEXT]      xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {      [BUGGY]  int  pj  =  previousCost.getPosition()  +  1;  [BUGGY]      point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	428	428	2	replace	int  pj  =  previousCost.getPosition()  +  1;	  int    pj    =    previousCost.getPosition();    	non-compiled	[CE]  double  cannot  be  dereferenced	40	None	replace
166	[BUG]  [BUGGY]  int  pj  =  permutation[j]  /  1;  int  pj  =  permutation[j]  /  1;  [CE]  variable  pj  is  already  defined  in  method  doOptimize()  [FE]    AssertionFailedError    [CONTEXT]      xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {      [BUGGY]  int  pj  =  permutation[j]  /  1;  int  pj  =  permutation[j]  /  1;  [BUGGY]      point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	428	428	2	replace	int    pj    =    permutation[j]    /    1;    int  pj  =  permutation[j]  /  1;	  	non-compiled	[CE]  variable  pj  is  already  defined  in  method  doOptimize()	56	None	add
167	[BUG]  [BUGGY]  int  pj  =  permutation[j]  /  1;  Int  pj  =  permutation[j]  /  1;  [CE]  cannot  find  symbol  [FE]      AssertionFailedError    [CONTEXT]      xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {      [BUGGY]  int  pj  =  permutation[j]  /  1;  Int  pj  =  permutation[j]  /  1;  [BUGGY]      point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	428	428	2	replace	int    pj    =    permutation[j]    /    1;    Int  pj  =  permutation[j]  /  1;	  	non-compiled	[CE]  cannot  find  symbol	56	None	add
168	[BUG]  [BUGGY]  int  pj  =  permutation[j]  /  1;  int  pj  =  permutation[j]  /  2;  [CE]  variable  pj  is  already  defined  in  method  doOptimize()  [FE]        AssertionFailedError    [CONTEXT]      xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {      [BUGGY]  int  pj  =  permutation[j]  /  1;  int  pj  =  permutation[j]  /  2;  [BUGGY]      point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	428	428	2	replace	int    pj    =    permutation[j]    /    1;    int  pj  =  permutation[j]  /  2;	  	non-compiled	[CE]  variable  pj  is  already  defined  in  method  doOptimize()	56	None	add
169	[BUG]  [BUGGY]  int  pj  =  permutation[j]  /  1;  int  j  =  permutation[j]  /  1;  [CE]  variable  j  is  already  defined  in  method  doOptimize()  [FE]          AssertionFailedError    [CONTEXT]      xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {      [BUGGY]  int  pj  =  permutation[j]  /  1;  int  j  =  permutation[j]  /  1;  [BUGGY]      point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	428	428	2	replace	int    pj    =    permutation[j]    /    1;    int  j  =  permutation[j]  /  1;	  	non-compiled	[CE]  variable  j  is  already  defined  in  method  doOptimize()	56	None	add
170	[BUG]  [BUGGY]  tmpVec  =  permutation[j]  -  1;  [CE]  incompatible  types  [FE]        ArrayIndexOutOfBoundsException      [CONTEXT]      xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {      [BUGGY]  tmpVec  =  permutation[j]  -  1;  [BUGGY]      point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	428	428	2	replace	tmpVec  =  permutation[j]  -  1;	  int    pj    =    permutation[j]    -    1;    tmpVec    =    permutation[j]    -    1;    	non-compiled	[CE]  incompatible  types	88	None	replace
171	[BUG]  [BUGGY]  Int  pj  =  permutation[j]  +  1;  [CE]  cannot  find  symbol  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {      [BUGGY]  Int  pj  =  permutation[j]  +  1;  [BUGGY]      point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	428	428	2	replace	Int  pj  =  permutation[j]  +  1;	  int    pj    =    permutation[j]    +    1;    Int    pj    =    permutation[j]    +    1;    	non-compiled	[CE]  cannot  find  symbol	28	None	replace
172	[BUG]  [BUGGY]  int  permutation[j]  =  xNorm  +  1;  [CE]  ']'  expected  [FE]              AssertionFailedError      [CONTEXT]      xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {      [BUGGY]  int  permutation[j]  =  xNorm  +  1;  [BUGGY]      int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	428	428	2	replace	int  permutation[j]  =  xNorm  +  1;	  int    permutation[j]    =    xNorm;    	non-compiled	[CE]  ']'  expected	21	None	replace
173	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {      [BUGGY]  int  pj  =  permutation[j  -  1]  &  0x7;  [BUGGY]      point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	428	428	2	add	int  pj  =  permutation[j  -  1]  &  0x7;	  int    pj    =    permutation[j    -    1]    &    0x7F;    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	71	15	replace
174	[BUG]  [BUGGY]  int  pj  =  permutation[j  -  1]  &  0x7;  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {      [BUGGY]  int  pj  =  permutation[j  -  1]  &  0x7;  [BUGGY]      point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	428	428	2	replace	int  pj  =  permutation[j  -  1]  &  0x7;	  int    pj    =    permutation[j    -    1]    &    0x7F;    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	71	15	replace
175	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {      [BUGGY]  int  pj  =  permutation[j  -  1]  &  0x3f;  [BUGGY]      point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	428	428	2	add	int  pj  =  permutation[j  -  1]  &  0x3f;	  int    pj    =    permutation[j    -    1]    &    0x7F;    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	71	15	replace
176	[BUG]  [BUGGY]  int  pj  =  permutation[j  -  1]  &  0x3f;  [FE]  ArrayIndexOutOfBoundsException  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {      [BUGGY]  int  pj  =  permutation[j  -  1]  &  0x3f;  [BUGGY]      point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	428	428	2	replace	int  pj  =  permutation[j  -  1]  &  0x3f;	  int    pj    =    permutation[j    -    1]    &    0x7F;    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	71	15	replace
177	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {      [BUGGY]  int  pj  =  permutation[j  -  1]  &  0x7f;  [BUGGY]      point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	428	428	2	add	int  pj  =  permutation[j  -  1]  &  0x7f;	  int    pj    =    permutation[j    -    1]    &    0x7F;    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	71	15	replace
178	[BUG]  [BUGGY]  int  pj  =  permutation[j  -  1]  &  0x7f;  [FE]  ArrayIndexOutOfBoundsException  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {      [BUGGY]  int  pj  =  permutation[j  -  1]  &  0x7f;  [BUGGY]      point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	428	428	2	replace	int  pj  =  permutation[j  -  1]  &  0x7f;	  int    pj    =    permutation[j    -    1]    &    0x7F;    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	71	15	replace
179	[BUG]  [BUGGY]  Int  pj  =  permutation[j]  -  1;  [CE]  cannot  find  symbol  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {      [BUGGY]  Int  pj  =  permutation[j]  -  1;  [BUGGY]      point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	428	428	2	replace	Int  pj  =  permutation[j]  -  1;	  int    pj    =    permutation[j]    -    1;    Int    pj    =    permutation[j]    -    1;    	non-compiled	[CE]  cannot  find  symbol	10	None	replace
180	[BUG]  [BUGGY]  int  pj  =  permutation[j]  -  1;  Integer  pj  =  permutation[j]  -  1;  [CE]  variable  pj  is  already  defined  in  method  doOptimize()  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {      [BUGGY]  int  pj  =  permutation[j]  -  1;  Integer  pj  =  permutation[j]  -  1;  [BUGGY]      point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	428	428	2	replace	int  pj  =  permutation[j]  -  1;  Integer  pj  =  permutation[j]  -  1;	  int    pj    =    permutation[j]    -    1;    Int    pj    =    permutation[j]    -    1;    	non-compiled	[CE]  variable  pj  is  already  defined  in  method  doOptimize()	10	None	replace
181	[BUG]  [BUGGY]  int  pj  =  permutation[j  +  2];  int  pj  =  permutation[j  +  2];  [CE]  variable  pj  is  already  defined  in  method  doOptimize()  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {      [BUGGY]  int  pj  =  permutation[j  +  2];  int  pj  =  permutation[j  +  2];  [BUGGY]      point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	428	428	2	replace	int    pj    =    permutation[j    +    2];    int  pj  =  permutation[j  +  2];	  	non-compiled	[CE]  variable  pj  is  already  defined  in  method  doOptimize()	64	None	add
182	[BUG]  [BUGGY]  int  pj  =  permutation[j  +  2];  Int  pj  =  permutation[j  +  2];  [CE]  cannot  find  symbol  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {      [BUGGY]  int  pj  =  permutation[j  +  2];  Int  pj  =  permutation[j  +  2];  [BUGGY]      point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	428	428	2	replace	int    pj    =    permutation[j    +    2];    Int  pj  =  permutation[j  +  2];	  	non-compiled	[CE]  cannot  find  symbol	64	None	add
183	[BUG]  [BUGGY]  int  pj  =  permutation[j  +  2];  int  pj  =  permutation[j  +  3];  [CE]  variable  pj  is  already  defined  in  method  doOptimize()  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {      [BUGGY]  int  pj  =  permutation[j  +  2];  int  pj  =  permutation[j  +  3];  [BUGGY]      point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	428	428	2	replace	int    pj    =    permutation[j    +    2];    int  pj  =  permutation[j  +  3];	  	non-compiled	[CE]  variable  pj  is  already  defined  in  method  doOptimize()	64	None	add
184	[BUG]  [BUGGY]  int  point[j]  =  permutation[j].doubleValue()  /  2;  [CE]  ']'  expected  [FE]                      AssertionFailedError      [CONTEXT]      xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {      [BUGGY]  int  point[j]  =  permutation[j].doubleValue()  /  2;  [BUGGY]      int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	428	428	2	replace	int  point[j]  =  permutation[j].doubleValue()  /  2;	  int    point[j]    =    permutation[j].doubleValue()    +    2;    	non-compiled	[CE]  ']'  expected	47	None	replace
185	[BUG]  [BUGGY]  int  pj  =  permutation[j]  -  1  +  1;  int  pj  =  permutation[j]  -  1  +  1;  [CE]  variable  pj  is  already  defined  in  method  doOptimize()  [FE]    AssertionFailedError    [CONTEXT]      xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {      [BUGGY]  int  pj  =  permutation[j]  -  1  +  1;  int  pj  =  permutation[j]  -  1  +  1;  [BUGGY]      point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	428	428	2	replace	int    pj    =    permutation[j]    -    1    +    1;    int  pj  =  permutation[j]  -  1  +  1;	  	non-compiled	[CE]  variable  pj  is  already  defined  in  method  doOptimize()	58	None	add
186	[BUG]  [BUGGY]  int  pj  =  permutation[j]  -  1  +  1;  Int  pj  =  permutation[j]  -  1  +  1;  [CE]  cannot  find  symbol  [FE]      AssertionFailedError    [CONTEXT]      xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {      [BUGGY]  int  pj  =  permutation[j]  -  1  +  1;  Int  pj  =  permutation[j]  -  1  +  1;  [BUGGY]      point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	428	428	2	replace	int    pj    =    permutation[j]    -    1    +    1;    Int  pj  =  permutation[j]  -  1  +  1;	  	non-compiled	[CE]  cannot  find  symbol	58	None	add
187	[BUG]  [BUGGY]  int  pj  =  permutation[j]  -  1  +  1;  int  j  =  permutation[j]  -  1  +  1;  [CE]  variable  j  is  already  defined  in  method  doOptimize()  [FE]        AssertionFailedError    [CONTEXT]      xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {      [BUGGY]  int  pj  =  permutation[j]  -  1  +  1;  int  j  =  permutation[j]  -  1  +  1;  [BUGGY]      point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	428	428	2	replace	int    pj    =    permutation[j]    -    1    +    1;    int  j  =  permutation[j]  -  1  +  1;	  	non-compiled	[CE]  variable  j  is  already  defined  in  method  doOptimize()	58	None	add
188	[BUG]  [BUGGY]  int  pj  =  permutation[j]  -  1  +  1;  int  pj  =  permutation[j]  +  1  +  1;  [CE]  variable  pj  is  already  defined  in  method  doOptimize()  [FE]          AssertionFailedError    [CONTEXT]      xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {      [BUGGY]  int  pj  =  permutation[j]  -  1  +  1;  int  pj  =  permutation[j]  +  1  +  1;  [BUGGY]      point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	428	428	2	replace	int    pj    =    permutation[j]    -    1    +    1;    int  pj  =  permutation[j]  +  1  +  1;	  	non-compiled	[CE]  variable  pj  is  already  defined  in  method  doOptimize()	58	None	add
189	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {      [BUGGY]  int  pj  =  permutation[j  /  2];  [BUGGY]      point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	428	428	2	add	int  pj  =  permutation[j  /  2];	  int    pj    =    permutation[j    -    2];    	compilable	  [FE]  AssertionFailedError  	15	12	replace
190	[BUG]  [BUGGY]  int  pj  =  permutation[j  /  2];  [FE]  AssertionFailedError  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {      [BUGGY]  int  pj  =  permutation[j  /  2];  [BUGGY]      point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	428	428	2	replace	int  pj  =  permutation[j  /  2];	  int    pj    =    permutation[j    -    2];    	compilable	  [FE]  AssertionFailedError  	15	12	replace
191	[BUG]  [BUGGY]  int  pj  =  permutation[j  -  1].doubleValue();  [CE]  int  cannot  be  dereferenced  [FE]        ArrayIndexOutOfBoundsException      [CONTEXT]      xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {      [BUGGY]  int  pj  =  permutation[j  -  1].doubleValue();  [BUGGY]      point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	428	428	2	replace	int  pj  =  permutation[j  -  1].doubleValue();	  int    pj    =    permutation[j    -    1];    int    pj    =    permutation[j    -    1];    	non-compiled	[CE]  int  cannot  be  dereferenced	18	None	replace
192	[BUG]  [BUGGY]  double  pj  =  permutation[j];  point[pj]  =  oldY[pj];  [CE]  possible  loss  of  precision  [FE]                AssertionFailedError      [CONTEXT]      xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {      [BUGGY]  double  pj  =  permutation[j];  point[pj]  =  oldY[pj];  [BUGGY]      int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	428	428	2	replace	double  pj  =  permutation[j];  point[pj]  =  oldY[pj];	  double    pj    =    permutation[j];    point[pj]    =    oldX[pj];    	non-compiled	[CE]  possible  loss  of  precision	2	None	replace
193	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {      [BUGGY]  int  pj  =  permutation[j  -  1]  &  0xFFF;  [BUGGY]      point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	428	428	2	add	int  pj  =  permutation[j  -  1]  &  0xFFF;	  int    pj    =    permutation[j    -    1]    &    0xFFFF;    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	85	15	replace
194	[BUG]  [BUGGY]  int  pj  =  permutation[j  -  1]  &  0xFFF;  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {      [BUGGY]  int  pj  =  permutation[j  -  1]  &  0xFFF;  [BUGGY]      point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	428	428	2	replace	int  pj  =  permutation[j  -  1]  &  0xFFF;	  int    pj    =    permutation[j    -    1]    &    0xFFFF;    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	85	15	replace
195	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {      [BUGGY]  int  pj  =  permutation[j  -  1]  &  0xFFFF  +  1;  [BUGGY]      point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	428	428	2	add	int  pj  =  permutation[j  -  1]  &  0xFFFF  +  1;	  int    pj    =    permutation[j    -    1]    &    0xFFFF;    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	85	15	replace
196	[BUG]  [BUGGY]  int  pj  =  permutation[j  -  1]  &  0xFFFF  +  1;  [FE]  ArrayIndexOutOfBoundsException  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {      [BUGGY]  int  pj  =  permutation[j  -  1]  &  0xFFFF  +  1;  [BUGGY]      point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	428	428	2	replace	int  pj  =  permutation[j  -  1]  &  0xFFFF  +  1;	  int    pj    =    permutation[j    -    1]    &    0xFFFF;    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	85	15	replace
197	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {      [BUGGY]  int  pj  =  permutation[j  -  1]  +  0xFFFF;  [BUGGY]      point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	428	428	2	add	int  pj  =  permutation[j  -  1]  +  0xFFFF;	  int    pj    =    permutation[j    -    1]    &    0xFFFF;    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	85	15	replace
198	[BUG]  [BUGGY]  int  pj  =  permutation[j  -  1]  +  0xFFFF;  [FE]  ArrayIndexOutOfBoundsException  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {      [BUGGY]  int  pj  =  permutation[j  -  1]  +  0xFFFF;  [BUGGY]      point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	428	428	2	replace	int  pj  =  permutation[j  -  1]  +  0xFFFF;	  int    pj    =    permutation[j    -    1]    &    0xFFFF;    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	85	15	replace
199	[BUG]  [BUGGY]  int  pj  =  permutation[j];  point[pj]  =  oldWord[pj];  [CE]  cannot  find  symbol  oldWord  [FE]                  AssertionFailedError      [CONTEXT]      xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {      [BUGGY]  int  pj  =  permutation[j];  point[pj]  =  oldWord[pj];  [BUGGY]      int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	428	428	2	replace	int  pj  =  permutation[j];  point[pj]  =  oldWord[pj];	  int    pj    =    permutation[j];    point[pj]    =    oldY[pj];    	non-compiled	[CE]  cannot  find  symbol  oldWord	3	None	replace
200	[BUG]  [BUGGY]  Double  point  =  oldX[j];  [CE]  cannot  find  symbol  pj  [FE]                  AssertionFailedError      [CONTEXT]      xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {      [BUGGY]  Double  point  =  oldX[j];  [BUGGY]      int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	428	428	2	replace	Double  point  =  oldX[j];	  float    point    =    oldX[j];    	non-compiled	[CE]  cannot  find  symbol  pj	52	None	replace
201	[BUG]  [BUGGY]  int  oldX  =  cost[j];  [CE]  variable  oldX  is  already  defined  in  method  doOptimize()  [FE]            AssertionFailedError      [CONTEXT]      xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {      [BUGGY]  int  oldX  =  cost[j];  [BUGGY]      int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	428	428	2	replace	int  oldX  =  cost[j];	  int    oldX    =    xK[j];    	non-compiled	[CE]  variable  oldX  is  already  defined  in  method  doOptimize()	87	None	replace
202	[BUG]  [BUGGY]  int  oldX  =  xK[j]  +  cost;  [CE]  variable  oldX  is  already  defined  in  method  doOptimize()  [FE]              AssertionFailedError      [CONTEXT]      xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {      [BUGGY]  int  oldX  =  xK[j]  +  cost;  [BUGGY]      int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	428	428	2	replace	int  oldX  =  xK[j]  +  cost;	  int    oldX    =    xK[j];    	non-compiled	[CE]  variable  oldX  is  already  defined  in  method  doOptimize()	87	None	replace
203	[BUG]  [BUGGY]  int  oldX  =  xNorm[j];  [CE]  variable  oldX  is  already  defined  in  method  doOptimize()  [FE]                AssertionFailedError      [CONTEXT]      xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {      [BUGGY]  int  oldX  =  xNorm[j];  [BUGGY]      int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	428	428	2	replace	int  oldX  =  xNorm[j];	  int    oldX    =    xK[j];    	non-compiled	[CE]  variable  oldX  is  already  defined  in  method  doOptimize()	87	None	replace
204	[BUG]  [BUGGY]  int  point[j]  =  oldY[j];  [CE]  ']'  expected  [FE]                AssertionFailedError      [CONTEXT]      xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {      [BUGGY]  int  point[j]  =  oldY[j];  [BUGGY]      int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	428	428	2	replace	int  point[j]  =  oldY[j];	  int    point[j]    =    oldRes[j];    	non-compiled	[CE]  ']'  expected	68	None	replace
205	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {      [BUGGY]  int  pj  =  oldX.length  -  1;  [BUGGY]      point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	428	428	2	add	int  pj  =  oldX.length  -  1;	  int    pj    =    oldX.length;    	compilable	  [FE]  AssertionFailedError  	76	12	replace
206	[BUG]  [BUGGY]  int  pj  =  oldX.length  -  1;  [FE]  AssertionFailedError  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {      [BUGGY]  int  pj  =  oldX.length  -  1;  [BUGGY]      point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	428	428	2	replace	int  pj  =  oldX.length  -  1;	  int    pj    =    oldX.length;    	compilable	  [FE]  AssertionFailedError  	76	12	replace
207	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {      [BUGGY]  int  pj  =  oldX.length  +  1;  [BUGGY]      point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	428	428	2	add	int  pj  =  oldX.length  +  1;	  int    pj    =    oldX.length;    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	76	15	replace
208	[BUG]  [BUGGY]  int  pj  =  oldX.length  +  1;  [FE]  ArrayIndexOutOfBoundsException  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {      [BUGGY]  int  pj  =  oldX.length  +  1;  [BUGGY]      point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	428	428	2	replace	int  pj  =  oldX.length  +  1;	  int    pj    =    oldX.length;    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	76	15	replace
209	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {      [BUGGY]  int  pj  =  oldX.length  -  2;  [BUGGY]      point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	428	428	2	add	int  pj  =  oldX.length  -  2;	  int    pj    =    oldX.length;    	compilable	  [FE]  AssertionFailedError  	76	12	replace
210	[BUG]  [BUGGY]  int  pj  =  oldX.length  -  2;  [FE]  AssertionFailedError  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {      [BUGGY]  int  pj  =  oldX.length  -  2;  [BUGGY]      point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	428	428	2	replace	int  pj  =  oldX.length  -  2;	  int    pj    =    oldX.length;    	compilable	  [FE]  AssertionFailedError  	76	12	replace
211	[BUG]  [BUGGY]  int  pj  =  previousCost.length;  [CE]  double  cannot  be  dereferenced  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]      xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {      [BUGGY]  int  pj  =  previousCost.length;  [BUGGY]      point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	428	428	2	replace	int  pj  =  previousCost.length;	  int    pj    =    oldX.length;    	non-compiled	[CE]  double  cannot  be  dereferenced	76	None	replace
212	[BUG]  [BUGGY]  int  point  =  permutation[j]  &  0xff  +  1;  [CE]  cannot  find  symbol  pj  [FE]                AssertionFailedError      [CONTEXT]      xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {      [BUGGY]  int  point  =  permutation[j]  &  0xff  +  1;  [BUGGY]      int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	428	428	2	replace	int  point  =  permutation[j]  &  0xff  +  1;	  int    point    =    permutation[j]    &    0xff;    	non-compiled	[CE]  cannot  find  symbol  pj	44	None	replace
213	[BUG]  [BUGGY]  int  point  =  permutation[j]  &  0xf;  [CE]  cannot  find  symbol  pj  [FE]                  AssertionFailedError      [CONTEXT]      xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {      [BUGGY]  int  point  =  permutation[j]  &  0xf;  [BUGGY]      int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	428	428	2	replace	int  point  =  permutation[j]  &  0xf;	  int    point    =    permutation[j]    &    0xff;    	non-compiled	[CE]  cannot  find  symbol  pj	44	None	replace
214	[BUG]  [BUGGY]  double  point  =  oldRes[j];  [CE]  cannot  find  symbol  pj  [FE]                AssertionFailedError      [CONTEXT]      xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {      [BUGGY]  double  point  =  oldRes[j];  [BUGGY]      int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	428	428	2	replace	double  point  =  oldRes[j];	  double    point    =    oldX[j];    	non-compiled	[CE]  cannot  find  symbol  pj	51	None	replace
215	[BUG]  [BUGGY]  int  pj  =  oldX[j];  point[pj]  =  oldY[pj];  [CE]  possible  loss  of  precision  [FE]                  AssertionFailedError      [CONTEXT]      xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {      [BUGGY]  int  pj  =  oldX[j];  point[pj]  =  oldY[pj];  [BUGGY]      int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	428	428	2	replace	int  pj  =  oldX[j];  point[pj]  =  oldY[pj];	  int    pj    =    permutation[j];    point[pj]    =    oldY[pj];    	non-compiled	[CE]  possible  loss  of  precision	3	None	replace
216	[BUG]  [BUGGY]  int  pj  =  cost[j];  point[pj]  =  oldY[pj];  [CE]  array  required,  but  double  found  [FE]                    AssertionFailedError      [CONTEXT]      xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {      [BUGGY]  int  pj  =  cost[j];  point[pj]  =  oldY[pj];  [BUGGY]      int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	428	428	2	replace	int  pj  =  cost[j];  point[pj]  =  oldY[pj];	  int    pj    =    permutation[j];    point[pj]    =    oldY[pj];    	non-compiled	[CE]  array  required,  but  double  found	3	None	replace
217	[BUG]  [BUGGY]  int  oldX  =  permutation[j]  &  0xCost;  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {      [BUGGY]  int  oldX  =  permutation[j]  &  0xCost;  [BUGGY]      int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	428	428	2	replace	int  oldX  =  permutation[j]  &  0xCost;	  int    oldX    =    permutation[j]    &    0xF;    	non-compiled	[CE]  ';'  expected	82	None	replace
218	[BUG]  [BUGGY]  int  pj  =  permutation[j  -  1]  &  0xFFFF;  float  pj  =  permutation[j  -  1]  &  0xFFFF;  [CE]  variable  pj  is  already  defined  in  method  doOptimize()  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {      [BUGGY]  int  pj  =  permutation[j  -  1]  &  0xFFFF;  float  pj  =  permutation[j  -  1]  &  0xFFFF;  [BUGGY]      point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	428	428	2	replace	int    pj    =    permutation[j    -    1]    &    0xFFFF;    float  pj  =  permutation[j  -  1]  &  0xFFFF;	  	non-compiled	[CE]  variable  pj  is  already  defined  in  method  doOptimize()	84	None	add
219	[BUG]  [BUGGY]  int  pj  =  permutation[j]  -  1;  int  j  =  permutation[j]  +  1;  [CE]  variable  j  is  already  defined  in  method  doOptimize()  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {      [BUGGY]  int  pj  =  permutation[j]  -  1;  int  j  =  permutation[j]  +  1;  [BUGGY]      point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	428	428	2	replace	int  pj  =  permutation[j]  -  1;  int  j  =  permutation[j]  +  1;	  int    pj    =    permutation[j]    +    1;    int    j    =    permutation[j]    +    1;    	non-compiled	[CE]  variable  j  is  already  defined  in  method  doOptimize()	29	None	replace
220	[BUG]  [BUGGY]  int  pj  =  permutation[j]  *  1;  int  j  =  permutation[j]  +  1;  [CE]  variable  j  is  already  defined  in  method  doOptimize()  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {      [BUGGY]  int  pj  =  permutation[j]  *  1;  int  j  =  permutation[j]  +  1;  [BUGGY]      point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	428	428	2	replace	int  pj  =  permutation[j]  *  1;  int  j  =  permutation[j]  +  1;	  int    pj    =    permutation[j]    +    1;    int    j    =    permutation[j]    +    1;    	non-compiled	[CE]  variable  j  is  already  defined  in  method  doOptimize()	29	None	replace
221	[BUG]  [BUGGY]  double  point  =  oldY[j];  [CE]  cannot  find  symbol  oldY  [FE]                  AssertionFailedError      [CONTEXT]      xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {      [BUGGY]  double  point  =  oldY[j];  [BUGGY]      int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	428	428	2	replace	double  point  =  oldY[j];	  float    point    =    oldX[j];    	non-compiled	[CE]  cannot  find  symbol  oldY	52	None	replace
222	[BUG]  [BUGGY]  int  pj  =  oldRes[j];  point[pj]  =  cost[oldX];  [CE]  possible  loss  of  precision  [FE]              AssertionFailedError      [CONTEXT]      xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {      [BUGGY]  int  pj  =  oldRes[j];  point[pj]  =  cost[oldX];  [BUGGY]      int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	428	428	2	replace	int  pj  =  oldRes[j];  point[pj]  =  cost[oldX];	  int    pj    =    cost[j];    point[pj]    =    oldX[pj];    	non-compiled	[CE]  possible  loss  of  precision	1	None	replace
223	[BUG]  [BUGGY]  int  pj  =  oldX[j];  point[pj]  =  costRelativeTolerance[oldCost];  [CE]  possible  loss  of  precision  [FE]                AssertionFailedError      [CONTEXT]      xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {      [BUGGY]  int  pj  =  oldX[j];  point[pj]  =  costRelativeTolerance[oldCost];  [BUGGY]      int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	428	428	2	replace	int  pj  =  oldX[j];  point[pj]  =  costRelativeTolerance[oldCost];	  int    pj    =    cost[j];    point[pj]    =    oldX[pj];    	non-compiled	[CE]  possible  loss  of  precision	1	None	replace
224	[BUG]  [BUGGY]  int  point  =  permutation[j]  -  1  +  1;  [CE]  cannot  find  symbol  pj  [FE]            AssertionFailedError      [CONTEXT]      xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {      [BUGGY]  int  point  =  permutation[j]  -  1  +  1;  [BUGGY]      int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	428	428	2	replace	int  point  =  permutation[j]  -  1  +  1;	  int    point    =    permutation[j]    -    1;    	non-compiled	[CE]  cannot  find  symbol  pj	42	None	replace
225	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {      [BUGGY]  int  pj  =  permutation[j]  %  2;  [BUGGY]      point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	428	428	2	add	int  pj  =  permutation[j]  %  2;	  int    pj    =    permutation[j]    -    2;    	compilable	  [FE]  AssertionFailedError  	55	11	replace
226	[BUG]  [BUGGY]  int  pj  =  permutation[j]  %  2;  [FE]  AssertionFailedError  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {      [BUGGY]  int  pj  =  permutation[j]  %  2;  [BUGGY]      point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	428	428	2	replace	int  pj  =  permutation[j]  %  2;	  int    pj    =    permutation[j]    -    2;    	compilable	  [FE]  AssertionFailedError  	55	11	replace
227	[BUG]  [BUGGY]  int  point[j]  =  permutation[j]  -  1  +  1;  [CE]  ']'  expected  [FE]              AssertionFailedError      [CONTEXT]      xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {      [BUGGY]  int  point[j]  =  permutation[j]  -  1  +  1;  [BUGGY]      int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	428	428	2	replace	int  point[j]  =  permutation[j]  -  1  +  1;	  int    point[j]    =    permutation[j]    -    1;    	non-compiled	[CE]  ']'  expected	26	None	replace
228	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {      [BUGGY]  int  pj  =  permutation[j  -  1]  &  0x3F;  [BUGGY]      point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	428	428	2	add	int  pj  =  permutation[j  -  1]  &  0x3F;	  int    pj    =    permutation[j    -    1]    &    0x7F;    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	71	15	replace
229	[BUG]  [BUGGY]  int  pj  =  permutation[j  -  1]  &  0x3F;  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {      [BUGGY]  int  pj  =  permutation[j  -  1]  &  0x3F;  [BUGGY]      point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	428	428	2	replace	int  pj  =  permutation[j  -  1]  &  0x3F;	  int    pj    =    permutation[j    -    1]    &    0x7F;    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	71	15	replace
230	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {      [BUGGY]  int  pj  =  permutation[j  -  1]  &  0x7F  +  1;  [BUGGY]      point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	428	428	2	add	int  pj  =  permutation[j  -  1]  &  0x7F  +  1;	  int    pj    =    permutation[j    -    1]    &    0x7F;    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	71	15	replace
231	[BUG]  [BUGGY]  int  pj  =  permutation[j  -  1]  &  0x7F  +  1;  [FE]  ArrayIndexOutOfBoundsException  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {      [BUGGY]  int  pj  =  permutation[j  -  1]  &  0x7F  +  1;  [BUGGY]      point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	428	428	2	replace	int  pj  =  permutation[j  -  1]  &  0x7F  +  1;	  int    pj    =    permutation[j    -    1]    &    0x7F;    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	71	15	replace
232	[BUG]  [BUGGY]  int  point[j]  =  oldX[j]  +  2;  [CE]  ']'  expected  [FE]                  AssertionFailedError      [CONTEXT]      xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {      [BUGGY]  int  point[j]  =  oldX[j]  +  2;  [BUGGY]      int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	428	428	2	replace	int  point[j]  =  oldX[j]  +  2;	  int    point[j]    =    oldX[j]    +    1;    	non-compiled	[CE]  ']'  expected	69	None	replace
233	[BUG]  [BUGGY]  short  pj  =  oldX[j];  point[pj]  =  permutation[j];  [CE]  possible  loss  of  precision  [FE]              AssertionFailedError      [CONTEXT]      xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {      [BUGGY]  short  pj  =  oldX[j];  point[pj]  =  permutation[j];  [BUGGY]      int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	428	428	2	replace	short  pj  =  oldX[j];  point[pj]  =  permutation[j];	  int    pj    =    oldX[j];    point[pj]    =    permutation[j];    	non-compiled	[CE]  possible  loss  of  precision	72	None	replace
234	[BUG]  [BUGGY]  float  pj  =  permutation[j]  -  1;  pj  =  permutation[j]  -  1;  [CE]  possible  loss  of  precision  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {      [BUGGY]  float  pj  =  permutation[j]  -  1;  pj  =  permutation[j]  -  1;  [BUGGY]      point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	428	428	2	replace	float  pj  =  permutation[j]  -  1;  pj  =  permutation[j]  -  1;	  int    pj    =    permutation[j]    -    1;    pj    =    permutation[j]    -    1;    	non-compiled	[CE]  possible  loss  of  precision	12	None	replace
235	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {      [BUGGY]  int  pj  =  permutation[j]  -  1;  pj  =  permutation[j]  -  2;  [BUGGY]      point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	428	428	2	add	int  pj  =  permutation[j]  -  1;  pj  =  permutation[j]  -  2;	  int    pj    =    permutation[j]    -    1;    pj    =    permutation[j]    -    1;    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	12	15	replace
236	[BUG]  [BUGGY]  int  pj  =  permutation[j]  -  1;  pj  =  permutation[j]  -  2;  [FE]  ArrayIndexOutOfBoundsException  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {      [BUGGY]  int  pj  =  permutation[j]  -  1;  pj  =  permutation[j]  -  2;  [BUGGY]      point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	428	428	2	replace	int  pj  =  permutation[j]  -  1;  pj  =  permutation[j]  -  2;	  int    pj    =    permutation[j]    -    1;    pj    =    permutation[j]    -    1;    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	12	15	replace
237	[BUG]  [BUGGY]  int  pj  =  permutation[j  +  1];  Int  pj  =  permutation[j  +  2];  [CE]  cannot  find  symbol  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {      [BUGGY]  int  pj  =  permutation[j  +  1];  Int  pj  =  permutation[j  +  2];  [BUGGY]      point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	428	428	2	replace	int  pj  =  permutation[j  +  1];  Int  pj  =  permutation[j  +  2];	  int    pj    =    permutation[j    +    1];    Int    pj    =    permutation[j    +    1];    	non-compiled	[CE]  cannot  find  symbol	5	None	replace
238	[BUG]  [BUGGY]  double  pj  =  Math.sqrt(coeff0);  [CE]  cannot  find  symbol  coeff0  [FE]                    AssertionFailedError      [CONTEXT]      xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {      [BUGGY]  double  pj  =  Math.sqrt(coeff0);  [BUGGY]      point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	428	428	2	replace	double  pj  =  Math.sqrt(coeff0);	  double    pj    =    Math.sqrt(coeff1);    	non-compiled	[CE]  cannot  find  symbol  coeff0	92	None	replace
239	[BUG]  [BUGGY]  int  point[j]  =  oldX  +  j;  [CE]  ']'  expected  [FE]                    AssertionFailedError      [CONTEXT]      xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {      [BUGGY]  int  point[j]  =  oldX  +  j;  [BUGGY]      int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	428	428	2	replace	int  point[j]  =  oldX  +  j;	  int    point[j]    =    oldX;    	non-compiled	[CE]  ']'  expected	31	None	replace
240	[BUG]  [BUGGY]  int  pj  =  prevCost.getPosition();  [CE]  cannot  find  symbol  prevCost  [FE]                        AssertionFailedError      [CONTEXT]      xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {      [BUGGY]  int  pj  =  prevCost.getPosition();  [BUGGY]      point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	428	428	2	replace	int  pj  =  prevCost.getPosition();	  int    pj    =    previousCost.getPosition();    	non-compiled	[CE]  cannot  find  symbol  prevCost	40	None	replace
241	[BUG]  [BUGGY]  int  pj  =  permutation[j  +  1]  &  0xff;  float  pj  =  permutation[j  +  1]  &  0xff;  [CE]  variable  pj  is  already  defined  in  method  doOptimize()  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {      [BUGGY]  int  pj  =  permutation[j  +  1]  &  0xff;  float  pj  =  permutation[j  +  1]  &  0xff;  [BUGGY]      point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	428	428	2	replace	int    pj    =    permutation[j    +    1]    &    0xff;    float  pj  =  permutation[j  +  1]  &  0xff;	  	non-compiled	[CE]  variable  pj  is  already  defined  in  method  doOptimize()	93	None	add
242	[BUG]  [BUGGY]  int  pj  =  permutation[j  +  1]  &  0xff;  int  pj  =  permutation[j  +  1)]  &  0xff;  [CE]  ']'  expected  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {      [BUGGY]  int  pj  =  permutation[j  +  1]  &  0xff;  int  pj  =  permutation[j  +  1)]  &  0xff;  [BUGGY]      point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	428	428	2	replace	int    pj    =    permutation[j    +    1]    &    0xff;    int  pj  =  permutation[j  +  1)]  &  0xff;	  	non-compiled	[CE]  ']'  expected	93	None	add
243	[BUG]  [BUGGY]  double  pj  =  Math.sqrt(value);  [CE]  cannot  find  symbol  value  [FE]                    AssertionFailedError      [CONTEXT]      xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {      [BUGGY]  double  pj  =  Math.sqrt(value);  [BUGGY]      point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	428	428	2	replace	double  pj  =  Math.sqrt(value);	  double    pj    =    Math.sqrt(previousCost);    	non-compiled	[CE]  cannot  find  symbol  value	74	None	replace
244	[BUG]  [BUGGY]  double  pj  =  Math.sqrt(previousCost  +  1);  [CE]  possible  loss  of  precision  [FE]                      AssertionFailedError      [CONTEXT]      xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {      [BUGGY]  double  pj  =  Math.sqrt(previousCost  +  1);  [BUGGY]      point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	428	428	2	replace	double  pj  =  Math.sqrt(previousCost  +  1);	  double    pj    =    Math.sqrt(previousCost);    	non-compiled	[CE]  possible  loss  of  precision	74	None	replace
245	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {      [BUGGY]  int  pj  =  permutation[j  +  1]  *  1;  [BUGGY]      point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	428	428	2	add	int  pj  =  permutation[j  +  1]  *  1;	  int    pj    =    permutation[j    +    1]    -    1;    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	79	15	replace
246	[BUG]  [BUGGY]  int  pj  =  permutation[j  +  1]  *  1;  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {      [BUGGY]  int  pj  =  permutation[j  +  1]  *  1;  [BUGGY]      point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	428	428	2	replace	int  pj  =  permutation[j  +  1]  *  1;	  int    pj    =    permutation[j    +    1]    -    1;    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	79	15	replace
247	[BUG]  [BUGGY]  int  pj  =  permutation[j]  -  2;  float  pj  =  permutation[j]  -  2;  [CE]  variable  pj  is  already  defined  in  method  doOptimize()  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {      [BUGGY]  int  pj  =  permutation[j]  -  2;  float  pj  =  permutation[j]  -  2;  [BUGGY]      point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	428	428	2	replace	int    pj    =    permutation[j]    -    2;    float  pj  =  permutation[j]  -  2;	  	non-compiled	[CE]  variable  pj  is  already  defined  in  method  doOptimize()	54	None	add
248	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {      [BUGGY]  int  pj  =  permutation[j  -  1]  &  0xFFFF  +  2;  [BUGGY]      point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	428	428	2	add	int  pj  =  permutation[j  -  1]  &  0xFFFF  +  2;	  int    pj    =    permutation[j    -    1]    &    0xFFFF;    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	85	15	replace
249	[BUG]  [BUGGY]  int  pj  =  permutation[j  -  1]  &  0xFFFF  +  2;  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {      [BUGGY]  int  pj  =  permutation[j  -  1]  &  0xFFFF  +  2;  [BUGGY]      point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	428	428	2	replace	int  pj  =  permutation[j  -  1]  &  0xFFFF  +  2;	  int    pj    =    permutation[j    -    1]    &    0xFFFF;    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	85	15	replace
250	[BUG]  [BUGGY]  double  pj  =  value.doubleValue();  [CE]  cannot  find  symbol  value  [FE]                    AssertionFailedError      [CONTEXT]      xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {      [BUGGY]  double  pj  =  value.doubleValue();  [BUGGY]      point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	428	428	2	replace	double  pj  =  value.doubleValue();	  double    pj    =    previousCost.doubleValue();    	non-compiled	[CE]  cannot  find  symbol  value	38	None	replace
251	[BUG]  [BUGGY]  int  pj  =  oldX[j];  point[pj]  =  oldCost[pj];  [CE]  possible  loss  of  precision  [FE]              AssertionFailedError      [CONTEXT]      xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {      [BUGGY]  int  pj  =  oldX[j];  point[pj]  =  oldCost[pj];  [BUGGY]      int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	428	428	2	replace	int  pj  =  oldX[j];  point[pj]  =  oldCost[pj];	  int    pj    =    previousCost[j];    point[pj]    =    oldX[pj];    	non-compiled	[CE]  possible  loss  of  precision	90	None	replace
252	[BUG]  [BUGGY]  int  pj  =  oldX[j];  point[pj]  =  preRed[pj];  [CE]  possible  loss  of  precision  [FE]                AssertionFailedError      [CONTEXT]      xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {      [BUGGY]  int  pj  =  oldX[j];  point[pj]  =  preRed[pj];  [BUGGY]      int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	428	428	2	replace	int  pj  =  oldX[j];  point[pj]  =  preRed[pj];	  int    pj    =    previousCost[j];    point[pj]    =    oldX[pj];    	non-compiled	[CE]  possible  loss  of  precision	90	None	replace
253	[BUG]  [BUGGY]  int  pj  =  oldX[j];  point[pj]  =  previousCost[pj];  [CE]  possible  loss  of  precision  [FE]                  AssertionFailedError      [CONTEXT]      xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {      [BUGGY]  int  pj  =  oldX[j];  point[pj]  =  previousCost[pj];  [BUGGY]      int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	428	428	2	replace	int  pj  =  oldX[j];  point[pj]  =  previousCost[pj];	  int    pj    =    previousCost[j];    point[pj]    =    oldX[pj];    	non-compiled	[CE]  possible  loss  of  precision	90	None	replace
254	[BUG]  [BUGGY]  int  pj  =  oldX.length;  pj  =  oldX.length;  [CE]  variable  pj  is  already  defined  in  method  doOptimize()  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {      [BUGGY]  int  pj  =  oldX.length;  pj  =  oldX.length;  [BUGGY]      point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	428	428	2	replace	int    pj    =    oldX.length;    pj  =  oldX.length;	  	non-compiled	[CE]  variable  pj  is  already  defined  in  method  doOptimize()	75	None	add
255	[BUG]  [BUGGY]  int  oldX  =  permutation[j]  -  1  +  1;  [CE]  variable  oldX  is  already  defined  in  method  doOptimize()  [FE]            AssertionFailedError      [CONTEXT]      xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {      [BUGGY]  int  oldX  =  permutation[j]  -  1  +  1;  [BUGGY]      int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	428	428	2	replace	int  oldX  =  permutation[j]  -  1  +  1;	  int    oldX    =    permutation[j]    -    1;    	non-compiled	[CE]  variable  oldX  is  already  defined  in  method  doOptimize()	35	None	replace
256	[BUG]  [BUGGY]  int  point[j]  =  xK;  [CE]  ']'  expected  [FE]                  AssertionFailedError      [CONTEXT]      xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {      [BUGGY]  int  point[j]  =  xK;  [BUGGY]      int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	428	428	2	replace	int  point[j]  =  xK;	  int    point[j]    =    xNorm;    	non-compiled	[CE]  ']'  expected	8	None	replace
257	[BUG]  [BUGGY]  int  pj  =  permutation[j]  -  1  +  1;  int  pj  =  permutation[j]  -  1  +  1);  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]      xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {      [BUGGY]  int  pj  =  permutation[j]  -  1  +  1;  int  pj  =  permutation[j]  -  1  +  1);  [BUGGY]      point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	428	428	2	replace	int    pj    =    permutation[j]    -    1    +    1;    int  pj  =  permutation[j]  -  1  +  1);	  	non-compiled	[CE]  ';'  expected	58	None	add
258	[BUG]  [BUGGY]  int  pj  =  permutation[j  -  1]  &  0x7F;  float  pj  =  permutation[j  -  1]  &  0x7F;  [CE]  variable  pj  is  already  defined  in  method  doOptimize()  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {      [BUGGY]  int  pj  =  permutation[j  -  1]  &  0x7F;  float  pj  =  permutation[j  -  1]  &  0x7F;  [BUGGY]      point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	428	428	2	replace	int    pj    =    permutation[j    -    1]    &    0x7F;    float  pj  =  permutation[j  -  1]  &  0x7F;	  	non-compiled	[CE]  variable  pj  is  already  defined  in  method  doOptimize()	70	None	add
259	[BUG]  [BUGGY]  int  pj  =  permutation[j  -  1]  &  0x7F;  int  pj  =  permutation[j  +  1]  &  0x7F;  [CE]  variable  pj  is  already  defined  in  method  doOptimize()  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {      [BUGGY]  int  pj  =  permutation[j  -  1]  &  0x7F;  int  pj  =  permutation[j  +  1]  &  0x7F;  [BUGGY]      point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	428	428	2	replace	int    pj    =    permutation[j    -    1]    &    0x7F;    int  pj  =  permutation[j  +  1]  &  0x7F;	  	non-compiled	[CE]  variable  pj  is  already  defined  in  method  doOptimize()	70	None	add
260	[BUG]  [BUGGY]  Int  pj  =  permutation[j  -  1];  Int  pj  =  permutation[j  -  1];  [CE]  cannot  find  symbol  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {      [BUGGY]  Int  pj  =  permutation[j  -  1];  Int  pj  =  permutation[j  -  1];  [BUGGY]      point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	428	428	2	replace	Int  pj  =  permutation[j  -  1];  Int  pj  =  permutation[j  -  1];	  int    pj    =    permutation[j    -    1];    Int    pj    =    permutation[j    -    1];    	non-compiled	[CE]  cannot  find  symbol	19	None	replace
261	[BUG]  [BUGGY]  Int  pj  =  permutation[j  -  1];  [CE]  cannot  find  symbol  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {      [BUGGY]  Int  pj  =  permutation[j  -  1];  [BUGGY]      point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	428	428	2	replace	Int  pj  =  permutation[j  -  1];	  int    pj    =    permutation[j    -    1];    Int    pj    =    permutation[j    -    1];    	non-compiled	[CE]  cannot  find  symbol	19	None	replace
262	[BUG]  [BUGGY]  int  oldX  =  xK[j]  +  1;  [CE]  variable  oldX  is  already  defined  in  method  doOptimize()  [FE]            AssertionFailedError      [CONTEXT]      xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {      [BUGGY]  int  oldX  =  xK[j]  +  1;  [BUGGY]      int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	428	428	2	replace	int  oldX  =  xK[j]  +  1;	  int    oldX    =    xK[j];    	non-compiled	[CE]  variable  oldX  is  already  defined  in  method  doOptimize()	87	None	replace
263	[BUG]  [BUGGY]  int  point[j]  =  permutation.doubleValue();  [CE]  ']'  expected  [FE]                  AssertionFailedError      [CONTEXT]      xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {      [BUGGY]  int  point[j]  =  permutation.doubleValue();  [BUGGY]      int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	428	428	2	replace	int  point[j]  =  permutation.doubleValue();	  int    point[j]    =    cost.doubleValue();    	non-compiled	[CE]  ']'  expected	86	None	replace
264	[BUG]  [BUGGY]  int  point[j]  =  previousCost.doubleValue();  [CE]  ']'  expected  [FE]                    AssertionFailedError      [CONTEXT]      xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {      [BUGGY]  int  point[j]  =  previousCost.doubleValue();  [BUGGY]      int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	428	428	2	replace	int  point[j]  =  previousCost.doubleValue();	  int    point[j]    =    cost.doubleValue();    	non-compiled	[CE]  ']'  expected	86	None	replace
265	[BUG]  [BUGGY]  int  pj  =  permutation[j]  *  1;  int  pj  =  permutation[j]  *  1);  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]      xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {      [BUGGY]  int  pj  =  permutation[j]  *  1;  int  pj  =  permutation[j]  *  1);  [BUGGY]      point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	428	428	2	replace	int    pj    =    permutation[j]    *    1;    int  pj  =  permutation[j]  *  1);	  	non-compiled	[CE]  ';'  expected	60	None	add
266	[BUG]  [BUGGY]  int  pj  =  permutation[j  +  1]  -  1;  float  pj  =  permutation[j  +  1]  -  1;  [CE]  variable  pj  is  already  defined  in  method  doOptimize()  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {      [BUGGY]  int  pj  =  permutation[j  +  1]  -  1;  float  pj  =  permutation[j  +  1]  -  1;  [BUGGY]      point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	428	428	2	replace	int    pj    =    permutation[j    +    1]    -    1;    float  pj  =  permutation[j  +  1]  -  1;	  	non-compiled	[CE]  variable  pj  is  already  defined  in  method  doOptimize()	78	None	add
267	[BUG]  [BUGGY]  int  pj  =  permutation[j  -  1];  int  pj  =  permutation[j  -  1]  +  cost;  [CE]  variable  pj  is  already  defined  in  method  doOptimize()  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {      [BUGGY]  int  pj  =  permutation[j  -  1];  int  pj  =  permutation[j  -  1]  +  cost;  [BUGGY]      point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	428	428	2	replace	int  pj  =  permutation[j  -  1];  int  pj  =  permutation[j  -  1]  +  cost;	  int    pj    =    permutation[j    -    1];    int    pj    =    permutation[j    -    1]);    	non-compiled	[CE]  variable  pj  is  already  defined  in  method  doOptimize()	20	None	replace
268	[BUG]  [BUGGY]  int  pj  =  permutation[j  -  1];  int  pj  =  permutation[j  -  1]  +  1;  [CE]  variable  pj  is  already  defined  in  method  doOptimize()  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {      [BUGGY]  int  pj  =  permutation[j  -  1];  int  pj  =  permutation[j  -  1]  +  1;  [BUGGY]      point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	428	428	2	replace	int  pj  =  permutation[j  -  1];  int  pj  =  permutation[j  -  1]  +  1;	  int    pj    =    permutation[j    -    1];    int    pj    =    permutation[j    -    1]);    	non-compiled	[CE]  variable  pj  is  already  defined  in  method  doOptimize()	20	None	replace
269	[BUG]  [BUGGY]  Double  pj  =  oldX[j]  +  value;  [CE]  cannot  find  symbol  value  [FE]            AssertionFailedError      [CONTEXT]      xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {      [BUGGY]  Double  pj  =  oldX[j]  +  value;  [BUGGY]      point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	428	428	2	replace	Double  pj  =  oldX[j]  +  value;	  Double    pj    =    oldX[j];    	non-compiled	[CE]  cannot  find  symbol  value	89	None	replace
270	[BUG]  [BUGGY]  int  pj  =  permutation[j  +  1];  int  pj  =  permutation[j  +  2];  [CE]  variable  pj  is  already  defined  in  method  doOptimize()  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {      [BUGGY]  int  pj  =  permutation[j  +  1];  int  pj  =  permutation[j  +  2];  [BUGGY]      point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	428	428	2	replace	int  pj  =  permutation[j  +  1];  int  pj  =  permutation[j  +  2];	  int    pj    =    permutation[j    +    1];    int    pj    =    permutation[j    +    1)];    	non-compiled	[CE]  variable  pj  is  already  defined  in  method  doOptimize()	6	None	replace
271	[BUG]  [BUGGY]  int  pj  =  permutation[j  +  1];  int  pj  =  permutation[j  +  2)];  [CE]  ']'  expected  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {      [BUGGY]  int  pj  =  permutation[j  +  1];  int  pj  =  permutation[j  +  2)];  [BUGGY]      point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	428	428	2	replace	int  pj  =  permutation[j  +  1];  int  pj  =  permutation[j  +  2)];	  int    pj    =    permutation[j    +    1];    int    pj    =    permutation[j    +    1)];    	non-compiled	[CE]  ']'  expected	6	None	replace
272	[BUG]  [BUGGY]  int  pj  =  permutation[j  -  2];  float  pj  =  permutation[j  -  2];  [CE]  variable  pj  is  already  defined  in  method  doOptimize()  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {      [BUGGY]  int  pj  =  permutation[j  -  2];  float  pj  =  permutation[j  -  2];  [BUGGY]      point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	428	428	2	replace	int    pj    =    permutation[j    -    2];    float  pj  =  permutation[j  -  2];	  	non-compiled	[CE]  variable  pj  is  already  defined  in  method  doOptimize()	14	None	add
273	[BUG]  [BUGGY]  int  pj  =  permutation[j  -  2];  int  pj  =  permutation[j  +  2];  [CE]  variable  pj  is  already  defined  in  method  doOptimize()  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {      [BUGGY]  int  pj  =  permutation[j  -  2];  int  pj  =  permutation[j  +  2];  [BUGGY]      point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	428	428	2	replace	int    pj    =    permutation[j    -    2];    int  pj  =  permutation[j  +  2];	  	non-compiled	[CE]  variable  pj  is  already  defined  in  method  doOptimize()	14	None	add
274	[BUG]  [BUGGY]  int  pj  =  permutation[j  *  1];  int  pj  =  permutation[j  *  1)];  [CE]  ']'  expected  [FE]    AssertionFailedError    [CONTEXT]      xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {      [BUGGY]  int  pj  =  permutation[j  *  1];  int  pj  =  permutation[j  *  1)];  [BUGGY]      point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	428	428	2	replace	int    pj    =    permutation[j    *    1];    int  pj  =  permutation[j  *  1)];	  	non-compiled	[CE]  ']'  expected	62	None	add
275	[BUG]  [BUGGY]  int  point[j]  =  oldRes[j]  -  1;  [CE]  ']'  expected  [FE]                AssertionFailedError      [CONTEXT]      xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {      [BUGGY]  int  point[j]  =  oldRes[j]  -  1;  [BUGGY]      int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	428	428	2	replace	int  point[j]  =  oldRes[j]  -  1;	  int    point[j]    =    oldRes[j];    	non-compiled	[CE]  ']'  expected	68	None	replace
276	[BUG]  [BUGGY]  int  pj  =  permutation[j  +  1]  <  <  0xff;  [CE]  illegal  start  of  type  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {      [BUGGY]  int  pj  =  permutation[j  +  1]  <  <  0xff;  [BUGGY]      point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	428	428	2	replace	int  pj  =  permutation[j  +  1]  <  <  0xff;	  int    pj    =    permutation[j    +    1]    &    0xff;    	non-compiled	[CE]  illegal  start  of  type	94	None	replace
277	[BUG]  [BUGGY]  int  point[j]  =  oldY[j].doubleValue();  [CE]  ']'  expected  [FE]                  AssertionFailedError      [CONTEXT]      xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {      [BUGGY]  int  point[j]  =  oldY[j].doubleValue();  [BUGGY]      int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	428	428	2	replace	int  point[j]  =  oldY[j].doubleValue();	  int    point[j]    =    oldX[j].doubleValue();    	non-compiled	[CE]  ']'  expected	67	None	replace
278	[BUG]  [BUGGY]  int  pj  =  permutation[j]  +  2;  Int  pj  =  permutation[j]  +  2;  [CE]  cannot  find  symbol  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {      [BUGGY]  int  pj  =  permutation[j]  +  2;  Int  pj  =  permutation[j]  +  2;  [BUGGY]      point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	428	428	2	replace	int  pj  =  permutation[j]  +  2;  Int  pj  =  permutation[j]  +  2;	  int    pj    =    permutation[j]    +    1;    Int    pj    =    permutation[j]    +    1;    	non-compiled	[CE]  cannot  find  symbol	28	None	replace
279	[BUG]  [BUGGY]  double  pj  =  oldX[0];  [CE]  possible  loss  of  precision  [FE]            AssertionFailedError      [CONTEXT]      xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {      [BUGGY]  double  pj  =  oldX[0];  [BUGGY]      point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	428	428	2	replace	double  pj  =  oldX[0];	  double    pj    =    oldX[j];    	non-compiled	[CE]  possible  loss  of  precision	32	None	replace
280	[BUG]  [BUGGY]  int  permutation[j]  =  0L;  [CE]  ']'  expected  [FE]              AssertionFailedError      [CONTEXT]      xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {      [BUGGY]  int  permutation[j]  =  0L;  [BUGGY]      int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	428	428	2	replace	int  permutation[j]  =  0L;	  int    permutation[j]    =    0;    	non-compiled	[CE]  ']'  expected	81	None	replace
281	[BUG]  [BUGGY]  float  pj  =  permutation[j  -  1];  int  pj  =  permutation[j  -  1];  [CE]  variable  pj  is  already  defined  in  method  doOptimize()  [FE]        ArrayIndexOutOfBoundsException      [CONTEXT]      xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {      [BUGGY]  float  pj  =  permutation[j  -  1];  int  pj  =  permutation[j  -  1];  [BUGGY]      point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	428	428	2	replace	float  pj  =  permutation[j  -  1];  int  pj  =  permutation[j  -  1];	  int    pj    =    permutation[j    -    1];    int    pj    =    permutation[j    -    1];    	non-compiled	[CE]  variable  pj  is  already  defined  in  method  doOptimize()	18	None	replace
282	[BUG]  [BUGGY]  float  pj  =  permutation[j  +  1];  int  pj  =  permutation[j  +  1];  [CE]  variable  pj  is  already  defined  in  method  doOptimize()  [FE]        ArrayIndexOutOfBoundsException      [CONTEXT]      xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {      [BUGGY]  float  pj  =  permutation[j  +  1];  int  pj  =  permutation[j  +  1];  [BUGGY]      point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	428	428	2	replace	float  pj  =  permutation[j  +  1];  int  pj  =  permutation[j  +  1];	  int    pj    =    permutation[j    +    1];    int    pj    =    permutation[j    +    1];    	non-compiled	[CE]  variable  pj  is  already  defined  in  method  doOptimize()	4	None	replace
283	[BUG]  [BUGGY]  int  pj  =  permutation[j  -  1]  +  1;  float  pj  =  permutation[j  -  1]  +  1;  [CE]  variable  pj  is  already  defined  in  method  doOptimize()  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {      [BUGGY]  int  pj  =  permutation[j  -  1]  +  1;  float  pj  =  permutation[j  -  1]  +  1;  [BUGGY]      point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	428	428	2	replace	int    pj    =    permutation[j    -    1]    +    1;    float  pj  =  permutation[j  -  1]  +  1;	  	non-compiled	[CE]  variable  pj  is  already  defined  in  method  doOptimize()	16	None	add
284	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {      [BUGGY]  int  pj  =  oldRes.length;  [BUGGY]      point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	428	428	2	add	int  pj  =  oldRes.length;	  int    pj    =    oldX.length;    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	76	15	replace
285	[BUG]  [BUGGY]  int  pj  =  oldRes.length;  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {      [BUGGY]  int  pj  =  oldRes.length;  [BUGGY]      point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	428	428	2	replace	int  pj  =  oldRes.length;	  int    pj    =    oldX.length;    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	76	15	replace
286	[BUG]  [BUGGY]  int  pj  =  oldY.length;  [CE]  cannot  find  symbol  oldY  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {      [BUGGY]  int  pj  =  oldY.length;  [BUGGY]      point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	428	428	2	replace	int  pj  =  oldY.length;	  int    pj    =    oldX.length;    	non-compiled	[CE]  cannot  find  symbol  oldY	76	None	replace
287	[BUG]  [BUGGY]  int  oldX  =  permutation[j]  /  cost;  [CE]  variable  oldX  is  already  defined  in  method  doOptimize()  [FE]                AssertionFailedError      [CONTEXT]      xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {      [BUGGY]  int  oldX  =  permutation[j]  /  cost;  [BUGGY]      int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	428	428	2	replace	int  oldX  =  permutation[j]  /  cost;	  int    oldX    =    permutation[j]    +    cost;    	non-compiled	[CE]  variable  oldX  is  already  defined  in  method  doOptimize()	37	None	replace
288	[BUG]  [BUGGY]  int  oldX  =  permutation[j]  *  cost;  [CE]  variable  oldX  is  already  defined  in  method  doOptimize()  [FE]                  AssertionFailedError      [CONTEXT]      xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {      [BUGGY]  int  oldX  =  permutation[j]  *  cost;  [BUGGY]      int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	428	428	2	replace	int  oldX  =  permutation[j]  *  cost;	  int    oldX    =    permutation[j]    +    cost;    	non-compiled	[CE]  variable  oldX  is  already  defined  in  method  doOptimize()	37	None	replace
289	[BUG]  [BUGGY]  int  pj  =  permutation[j]  -  1;  int  j  =  permutation[j]  -  2;  [CE]  variable  j  is  already  defined  in  method  doOptimize()  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {      [BUGGY]  int  pj  =  permutation[j]  -  1;  int  j  =  permutation[j]  -  2;  [BUGGY]      point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	428	428	2	replace	int  pj  =  permutation[j]  -  1;  int  j  =  permutation[j]  -  2;	  int    pj    =    permutation[j]    -    1;    int    j    =    permutation[j]    -    1;    	non-compiled	[CE]  variable  j  is  already  defined  in  method  doOptimize()	11	None	replace
290	[BUG]  [BUGGY]  int  pj  =  permutation[j]  -  2;  int  j  =  permutation[j]  -  2;  [CE]  variable  j  is  already  defined  in  method  doOptimize()  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {      [BUGGY]  int  pj  =  permutation[j]  -  2;  int  j  =  permutation[j]  -  2;  [BUGGY]      point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	428	428	2	replace	int  pj  =  permutation[j]  -  2;  int  j  =  permutation[j]  -  2;	  int    pj    =    permutation[j]    -    1;    int    j    =    permutation[j]    -    1;    	non-compiled	[CE]  variable  j  is  already  defined  in  method  doOptimize()	11	None	replace
291	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {      [BUGGY]  int  pj  =  permutation[j  /  1];  [BUGGY]      point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	428	428	2	add	int  pj  =  permutation[j  /  1];	  int    pj    =    permutation[j    *    1];    	compilable	  [FE]  AssertionFailedError  	63	2	replace
292	[BUG]  [BUGGY]  int  pj  =  permutation[j  /  1];  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {      [BUGGY]  int  pj  =  permutation[j  /  1];  [BUGGY]      point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	428	428	2	replace	int  pj  =  permutation[j  /  1];	  int    pj    =    permutation[j    *    1];    	compilable	  [FE]  AssertionFailedError  	63	2	replace
293	[BUG]  [BUGGY]  double  pj  =  point[0];  [CE]  possible  loss  of  precision  [FE]            AssertionFailedError      [CONTEXT]      xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {      [BUGGY]  double  pj  =  point[0];  [BUGGY]      point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	428	428	2	replace	double  pj  =  point[0];	  double    pj    =    point[j];    	non-compiled	[CE]  possible  loss  of  precision	48	None	replace
294	[BUG]  [BUGGY]  int  permutation[j]  =  cost  -  1;  [CE]  ']'  expected  [FE]                AssertionFailedError      [CONTEXT]      xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {      [BUGGY]  int  permutation[j]  =  cost  -  1;  [BUGGY]      int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	428	428	2	replace	int  permutation[j]  =  cost  -  1;	  int    permutation[j]    =    cost;    	non-compiled	[CE]  ']'  expected	22	None	replace
295	[BUG]  [BUGGY]  int  permutation[j]  =  oldX[j]  +  1;  [CE]  ']'  expected  [FE]                  AssertionFailedError      [CONTEXT]      xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {      [BUGGY]  int  permutation[j]  =  oldX[j]  +  1;  [BUGGY]      int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	428	428	2	replace	int  permutation[j]  =  oldX[j]  +  1;	  int    permutation[j]    =    oldX[j];    	non-compiled	[CE]  ']'  expected	23	None	replace
296	[BUG]  [BUGGY]  int  point[j]  =  oldX[j]  /  cost;  [CE]  ']'  expected  [FE]                AssertionFailedError      [CONTEXT]      xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {      [BUGGY]  int  point[j]  =  oldX[j]  /  cost;  [BUGGY]      int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	428	428	2	replace	int  point[j]  =  oldX[j]  /  cost;	  int    point[j]    =    oldX[j]    +    cost;    	non-compiled	[CE]  ']'  expected	91	None	replace
297	[BUG]  [BUGGY]  int  pj  =  permutation[j  -  1];  int  pj  =  permutation[j  +  2];  [CE]  variable  pj  is  already  defined  in  method  doOptimize()  [FE]        ArrayIndexOutOfBoundsException      [CONTEXT]      xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {      [BUGGY]  int  pj  =  permutation[j  -  1];  int  pj  =  permutation[j  +  2];  [BUGGY]      point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	428	428	2	replace	int  pj  =  permutation[j  -  1];  int  pj  =  permutation[j  +  2];	  int    pj    =    permutation[j    -    1];    int    pj    =    permutation[j    +    1];    	non-compiled	[CE]  variable  pj  is  already  defined  in  method  doOptimize()	66	None	replace
298	[BUG]  [BUGGY]  int  pj  =  permutation[j  -  1];  int  pj  =  permutation[j  *  1];  [CE]  variable  pj  is  already  defined  in  method  doOptimize()  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {      [BUGGY]  int  pj  =  permutation[j  -  1];  int  pj  =  permutation[j  *  1];  [BUGGY]      point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	428	428	2	replace	int  pj  =  permutation[j  -  1];  int  pj  =  permutation[j  *  1];	  int    pj    =    permutation[j    -    1];    int    pj    =    permutation[j    +    1];    	non-compiled	[CE]  variable  pj  is  already  defined  in  method  doOptimize()	66	None	replace
299	[BUG]  [BUGGY]  int  point[j]  =  cost.doubleValue()  -  1;  [CE]  ']'  expected  [FE]                    AssertionFailedError      [CONTEXT]      xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {      [BUGGY]  int  point[j]  =  cost.doubleValue()  -  1;  [BUGGY]      int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	428	428	2	replace	int  point[j]  =  cost.doubleValue()  -  1;	  int    point[j]    =    permutation[j].doubleValue()    -    1;    	non-compiled	[CE]  ']'  expected	46	None	replace
300	[BUG]  [BUGGY]  int  pj  =  permutation[j  -  1];  int  pj  =  permutation[j  -  1]  +  2;  [CE]  variable  pj  is  already  defined  in  method  doOptimize()  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {      [BUGGY]  int  pj  =  permutation[j  -  1];  int  pj  =  permutation[j  -  1]  +  2;  [BUGGY]      point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	428	428	2	replace	int  pj  =  permutation[j  -  1];  int  pj  =  permutation[j  -  1]  +  2;	  int    pj    =    permutation[j    -    1];    int    pj    =    permutation[j    -    1]);    	non-compiled	[CE]  variable  pj  is  already  defined  in  method  doOptimize()	20	None	replace
301	[BUG]  [BUGGY]  tmpVec  =  Math.sqrt(xNorm);  [CE]  incompatible  types  [FE]                      AssertionFailedError      [CONTEXT]      xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {      [BUGGY]  tmpVec  =  Math.sqrt(xNorm);  [BUGGY]      point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	428	428	2	replace	tmpVec  =  Math.sqrt(xNorm);	  tmpVec    =    Math.sqrt(previousCost);    	non-compiled	[CE]  incompatible  types	39	None	replace
302	[BUG]  [BUGGY]  tmpVec  =  Math.sqrt(xNorm,  previousCost);  [CE]  method  sqrt  in  class  Math  cannot  be  applied  to  given  types;  [FE]                        AssertionFailedError      [CONTEXT]      xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {      [BUGGY]  tmpVec  =  Math.sqrt(xNorm,  previousCost);  [BUGGY]      point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	428	428	2	replace	tmpVec  =  Math.sqrt(xNorm,  previousCost);	  tmpVec    =    Math.sqrt(previousCost);    	non-compiled	[CE]  method  sqrt  in  class  Math  cannot  be  applied  to  given  types;	39	None	replace
303	[BUG]  [BUGGY]  tmpVec  =  Math.sqrt(last);  [CE]  cannot  find  symbol  last  [FE]                          AssertionFailedError      [CONTEXT]      xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {      [BUGGY]  tmpVec  =  Math.sqrt(last);  [BUGGY]      point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	428	428	2	replace	tmpVec  =  Math.sqrt(last);	  tmpVec    =    Math.sqrt(previousCost);    	non-compiled	[CE]  cannot  find  symbol  last	39	None	replace
304	[BUG]  [BUGGY]  double  point  =  oldX[j]  +  cost;  [CE]  cannot  find  symbol  pj  [FE]                AssertionFailedError      [CONTEXT]      xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {      [BUGGY]  double  point  =  oldX[j]  +  cost;  [BUGGY]      int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	428	428	2	replace	double  point  =  oldX[j]  +  cost;	  double    point    =    oldX[j];    	non-compiled	[CE]  cannot  find  symbol  pj	51	None	replace
305	[BUG]  [BUGGY]  int  pj  =  oldX.length;  t  pj  =  oldX.length;  [CE]  cannot  find  symbol  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {      [BUGGY]  int  pj  =  oldX.length;  t  pj  =  oldX.length;  [BUGGY]      point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	428	428	2	replace	int    pj    =    oldX.length;    t  pj  =  oldX.length;	  	non-compiled	[CE]  cannot  find  symbol	75	None	add
306	[BUG]  [BUGGY]  float  pj  =  permutation[j]  +  1;  tmpVec  =  permutation[j]  +  1;  [CE]  incompatible  types  [FE]        ArrayIndexOutOfBoundsException      [CONTEXT]      xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {      [BUGGY]  float  pj  =  permutation[j]  +  1;  tmpVec  =  permutation[j]  +  1;  [BUGGY]      point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	428	428	2	replace	float  pj  =  permutation[j]  +  1;  tmpVec  =  permutation[j]  +  1;	  int    pj    =    permutation[j]    +    1;    tmpVec    =    permutation[j]    +    1;    	non-compiled	[CE]  incompatible  types	77	None	replace
307	[BUG]  [BUGGY]  int  oldX  =  xK  *  xK[j];  [CE]  variable  oldX  is  already  defined  in  method  doOptimize()  [FE]            AssertionFailedError      [CONTEXT]      xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {      [BUGGY]  int  oldX  =  xK  *  xK[j];  [BUGGY]      int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	428	428	2	replace	int  oldX  =  xK  *  xK[j];	  int    oldX    =    xK[j];    	non-compiled	[CE]  variable  oldX  is  already  defined  in  method  doOptimize()	87	None	replace
308	[BUG]  [BUGGY]  int  oldX  =  xK  *  xK;  [CE]  variable  oldX  is  already  defined  in  method  doOptimize()  [FE]              AssertionFailedError      [CONTEXT]      xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {      [BUGGY]  int  oldX  =  xK  *  xK;  [BUGGY]      int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	428	428	2	replace	int  oldX  =  xK  *  xK;	  int    oldX    =    xK[j];    	non-compiled	[CE]  variable  oldX  is  already  defined  in  method  doOptimize()	87	None	replace
309	[BUG]  [BUGGY]  int  pj  =  oldX[j];  point[pj]  =  cost[j];  [CE]  possible  loss  of  precision  [FE]              AssertionFailedError      [CONTEXT]      xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {      [BUGGY]  int  pj  =  oldX[j];  point[pj]  =  cost[j];  [BUGGY]      int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	428	428	2	replace	int  pj  =  oldX[j];  point[pj]  =  cost[j];	  int    pj    =    cost[j];    point[pj]    =    oldX[pj];    	non-compiled	[CE]  possible  loss  of  precision	1	None	replace
310	[BUG]  [BUGGY]  int  pj  =  oldX[j];  point[pj]  =  cost[oldCost];  [CE]  possible  loss  of  precision  [FE]                AssertionFailedError      [CONTEXT]      xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {      [BUGGY]  int  pj  =  oldX[j];  point[pj]  =  cost[oldCost];  [BUGGY]      int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	428	428	2	replace	int  pj  =  oldX[j];  point[pj]  =  cost[oldCost];	  int    pj    =    cost[j];    point[pj]    =    oldX[pj];    	non-compiled	[CE]  possible  loss  of  precision	1	None	replace
311	[BUG]  [BUGGY]  int  pj  =  cost[j  -  1];  int  pj  =  permutation[j  -  1];  [CE]  array  required,  but  double  found  [FE]        ArrayIndexOutOfBoundsException      [CONTEXT]      xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {      [BUGGY]  int  pj  =  cost[j  -  1];  int  pj  =  permutation[j  -  1];  [BUGGY]      point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	428	428	2	replace	int  pj  =  cost[j  -  1];  int  pj  =  permutation[j  -  1];	  int    pj    =    permutation[j    -    1];    int    pj    =    permutation[j    -    1];    	non-compiled	[CE]  array  required,  but  double  found	18	None	replace
312	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    AssertionFailedError    [CONTEXT]      xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {      [BUGGY]  int  pj  =  permutation[j]  -  point.length  +  1;  [BUGGY]      point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	428	428	2	add	int  pj  =  permutation[j]  -  point.length  +  1;	  int    pj    =    permutation[j]    -    1    +    1;    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	59	15	replace
313	[BUG]  [BUGGY]  int  pj  =  permutation[j]  -  point.length  +  1;  [FE]  ArrayIndexOutOfBoundsException  [FE]    AssertionFailedError    [CONTEXT]      xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {      [BUGGY]  int  pj  =  permutation[j]  -  point.length  +  1;  [BUGGY]      point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	428	428	2	replace	int  pj  =  permutation[j]  -  point.length  +  1;	  int    pj    =    permutation[j]    -    1    +    1;    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	59	15	replace
314	[BUG]  [BUGGY]  int  point  =  permutation[j]  &  1xff;  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {      [BUGGY]  int  point  =  permutation[j]  &  1xff;  [BUGGY]      int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	428	428	2	replace	int  point  =  permutation[j]  &  1xff;	  int    point    =    permutation[j]    &    0xff;    	non-compiled	[CE]  ';'  expected	44	None	replace
315	[BUG]  [BUGGY]  int  pj  =  cost[j  +  1]  &  0xff;  [CE]  array  required,  but  double  found  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {      [BUGGY]  int  pj  =  cost[j  +  1]  &  0xff;  [BUGGY]      point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	428	428	2	replace	int  pj  =  cost[j  +  1]  &  0xff;	  int    pj    =    permutation[j    +    1]    &    0xff;    	non-compiled	[CE]  array  required,  but  double  found	94	None	replace
316	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {      [BUGGY]  int  pj  =  permutation[j  +  1]  &  2;  [BUGGY]      point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	428	428	2	add	int  pj  =  permutation[j  +  1]  &  2;	  int    pj    =    permutation[j    +    1]    &    0xff;    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	94	15	replace
317	[BUG]  [BUGGY]  int  pj  =  permutation[j  +  1]  &  2;  [FE]  ArrayIndexOutOfBoundsException  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {      [BUGGY]  int  pj  =  permutation[j  +  1]  &  2;  [BUGGY]      point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	428	428	2	replace	int  pj  =  permutation[j  +  1]  &  2;	  int    pj    =    permutation[j    +    1]    &    0xff;    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	94	15	replace
318	[BUG]  [BUGGY]  int  pj  =  cost[j]  -  1;  Int  pj  =  permutation[j]  -  1;  [CE]  array  required,  but  double  found  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {      [BUGGY]  int  pj  =  cost[j]  -  1;  Int  pj  =  permutation[j]  -  1;  [BUGGY]      point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	428	428	2	replace	int  pj  =  cost[j]  -  1;  Int  pj  =  permutation[j]  -  1;	  int    pj    =    permutation[j]    -    1;    Int    pj    =    permutation[j]    -    1;    	non-compiled	[CE]  array  required,  but  double  found	10	None	replace
319	[BUG]  [BUGGY]  double  pj  =  point[j]  -  1;  [CE]  possible  loss  of  precision  [FE]            AssertionFailedError      [CONTEXT]      xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {      [BUGGY]  double  pj  =  point[j]  -  1;  [BUGGY]      point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	428	428	2	replace	double  pj  =  point[j]  -  1;	  double    pj    =    point[j];    	non-compiled	[CE]  possible  loss  of  precision	48	None	replace
320	[BUG]  [BUGGY]  int  pj  =  oldX[j]  /  1;  [CE]  possible  loss  of  precision  [FE]    AssertionFailedError    [CONTEXT]      xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {      [BUGGY]  int  pj  =  oldX[j]  /  1;  [BUGGY]      point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	428	428	2	replace	int  pj  =  oldX[j]  /  1;	  int    pj    =    permutation[j]    /    1;    	non-compiled	[CE]  possible  loss  of  precision	57	None	replace
321	[BUG]  [BUGGY]  int  point[j]  =  preRed  +  1;  [CE]  ']'  expected  [FE]                    AssertionFailedError      [CONTEXT]      xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {      [BUGGY]  int  point[j]  =  preRed  +  1;  [BUGGY]      int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	428	428	2	replace	int  point[j]  =  preRed  +  1;	  int    point[j]    =    preRed;    	non-compiled	[CE]  ']'  expected	80	None	replace
322	[BUG]  [BUGGY]  int  pj  =  cost[j  -  1]  +  1;  [CE]  array  required,  but  double  found  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {      [BUGGY]  int  pj  =  cost[j  -  1]  +  1;  [BUGGY]      point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	428	428	2	replace	int  pj  =  cost[j  -  1]  +  1;	  int    pj    =    permutation[j    -    1]    +    1;    	non-compiled	[CE]  array  required,  but  double  found	17	None	replace
323	[BUG]  [BUGGY]  int  pj  =  permutation[j]  -  1  +  1;  int  pj  =  permutation[j],  -  1  +  1;  [CE]  <identifier>  expected  [FE]    AssertionFailedError    [CONTEXT]      xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {      [BUGGY]  int  pj  =  permutation[j]  -  1  +  1;  int  pj  =  permutation[j],  -  1  +  1;  [BUGGY]      point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	428	428	2	replace	int    pj    =    permutation[j]    -    1    +    1;    int  pj  =  permutation[j],  -  1  +  1;	  	non-compiled	[CE]  <identifier>  expected	58	None	add
324	[BUG]  [BUGGY]  int  pj  =  cost[j  -  1];  int  pj  =  permutation[j  +  1];  [CE]  array  required,  but  double  found  [FE]        ArrayIndexOutOfBoundsException      [CONTEXT]      xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {      [BUGGY]  int  pj  =  cost[j  -  1];  int  pj  =  permutation[j  +  1];  [BUGGY]      point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	428	428	2	replace	int  pj  =  cost[j  -  1];  int  pj  =  permutation[j  +  1];	  int    pj    =    permutation[j    -    1];    int    pj    =    permutation[j    +    1];    	non-compiled	[CE]  array  required,  but  double  found	66	None	replace
325	[BUG]  [BUGGY]  int  pj  =  oldX[j]  *  1;  [CE]  possible  loss  of  precision  [FE]    AssertionFailedError    [CONTEXT]      xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {      [BUGGY]  int  pj  =  oldX[j]  *  1;  [BUGGY]      point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	428	428	2	replace	int  pj  =  oldX[j]  *  1;	  int    pj    =    permutation[j]    *    1;    	non-compiled	[CE]  possible  loss  of  precision	61	None	replace
326	[BUG]  [BUGGY]  Int  pj  =  permutation[j  +  1];  [CE]  cannot  find  symbol  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {      [BUGGY]  Int  pj  =  permutation[j  +  1];  [BUGGY]      point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	428	428	2	replace	Int  pj  =  permutation[j  +  1];	  int    pj    =    permutation[j    +    1];    Int    pj    =    permutation[j    +    1];    	non-compiled	[CE]  cannot  find  symbol	5	None	replace
327	[BUG]  [BUGGY]  int  pj  =  permutation[j]  /  1;  int  j  =  permutation[j]  -  1;  [CE]  variable  j  is  already  defined  in  method  doOptimize()  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {      [BUGGY]  int  pj  =  permutation[j]  /  1;  int  j  =  permutation[j]  -  1;  [BUGGY]      point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	428	428	2	replace	int  pj  =  permutation[j]  /  1;  int  j  =  permutation[j]  -  1;	  int    pj    =    permutation[j]    -    1;    int    j    =    permutation[j]    -    1;    	non-compiled	[CE]  variable  j  is  already  defined  in  method  doOptimize()	11	None	replace
328	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    AssertionFailedError    [CONTEXT]      xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {      [BUGGY]  int  pj  =  permutation[j  *  4];  [BUGGY]      point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	428	428	2	add	int  pj  =  permutation[j  *  4];	  int    pj    =    permutation[j    *    1];    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	63	15	replace
329	[BUG]  [BUGGY]  int  pj  =  permutation[j  *  4];  [FE]  ArrayIndexOutOfBoundsException  [FE]    AssertionFailedError    [CONTEXT]      xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {      [BUGGY]  int  pj  =  permutation[j  *  4];  [BUGGY]      point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	428	428	2	replace	int  pj  =  permutation[j  *  4];	  int    pj    =    permutation[j    *    1];    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	63	15	replace
330	[BUG]  [BUGGY]  int  pj  =  cost[j  -  1];  Int  pj  =  permutation[j  -  1];  [CE]  array  required,  but  double  found  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {      [BUGGY]  int  pj  =  cost[j  -  1];  Int  pj  =  permutation[j  -  1];  [BUGGY]      point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	428	428	2	replace	int  pj  =  cost[j  -  1];  Int  pj  =  permutation[j  -  1];	  int    pj    =    permutation[j    -    1];    Int    pj    =    permutation[j    -    1];    	non-compiled	[CE]  array  required,  but  double  found	19	None	replace
331	[BUG]  [BUGGY]  int  pj  =  cost[j]  -  1;  [CE]  array  required,  but  double  found  [FE]        ArrayIndexOutOfBoundsException      [CONTEXT]      xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {      [BUGGY]  int  pj  =  cost[j]  -  1;  [BUGGY]      point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	428	428	2	replace	int  pj  =  cost[j]  -  1;	  int    pj    =    permutation[j]    -    1;    int    pj    =    permutation[j]    -    1;    	non-compiled	[CE]  array  required,  but  double  found	9	None	replace
332	[BUG]  [BUGGY]  int  oldX  =  permutation[j]  &  1xF;  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {      [BUGGY]  int  oldX  =  permutation[j]  &  1xF;  [BUGGY]      int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	428	428	2	replace	int  oldX  =  permutation[j]  &  1xF;	  int    oldX    =    permutation[j]    &    0xF;    	non-compiled	[CE]  ';'  expected	82	None	replace
333	[BUG]  [BUGGY]  int  pj  =  cost[j  +  1]  -  1;  [CE]  array  required,  but  double  found  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {      [BUGGY]  int  pj  =  cost[j  +  1]  -  1;  [BUGGY]      point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	428	428	2	replace	int  pj  =  cost[j  +  1]  -  1;	  int    pj    =    permutation[j    +    1]    -    1;    	non-compiled	[CE]  array  required,  but  double  found	79	None	replace
334	[BUG]  [BUGGY]  int  point[j]  =  cost  -  1;  [CE]  ']'  expected  [FE]              AssertionFailedError      [CONTEXT]      xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {      [BUGGY]  int  point[j]  =  cost  -  1;  [BUGGY]      int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	428	428	2	replace	int  point[j]  =  cost  -  1;	  int    point[j]    =    permutation[j]    -    1;    	non-compiled	[CE]  ']'  expected	26	None	replace
335	[BUG]  [BUGGY]  double  pj  =  point.doubleValue();  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {      [BUGGY]  double  pj  =  point.doubleValue();  [BUGGY]      point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	428	428	2	replace	double  pj  =  point.doubleValue();	  double    pj    =    previousCost.doubleValue();    	non-compiled	[CE]  cannot  find  symbol	38	None	replace
336	[BUG]  [BUGGY]  Double  pj  =  oldX[j].doubleValue();  [CE]  double  cannot  be  dereferenced  [FE]            AssertionFailedError      [CONTEXT]      xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {      [BUGGY]  Double  pj  =  oldX[j].doubleValue();  [BUGGY]      point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	428	428	2	replace	Double  pj  =  oldX[j].doubleValue();	  Double    pj    =    oldX[j];    	non-compiled	[CE]  double  cannot  be  dereferenced	89	None	replace
337	[BUG]  [BUGGY]  double  pj  =  Math.sqrt(cost);  [CE]  possible  loss  of  precision  [FE]                    AssertionFailedError      [CONTEXT]      xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {      [BUGGY]  double  pj  =  Math.sqrt(cost);  [BUGGY]      point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	428	428	2	replace	double  pj  =  Math.sqrt(cost);	  double    pj    =    Math.sqrt(coeff1);    	non-compiled	[CE]  possible  loss  of  precision	92	None	replace
338	[BUG]  [BUGGY]  int  pj  =  permutation[j  -  1]  &  0xFFFF;  int  pj  =  permutation[j  +  1]  &  0xFFFF;  [CE]  variable  pj  is  already  defined  in  method  doOptimize()  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {      [BUGGY]  int  pj  =  permutation[j  -  1]  &  0xFFFF;  int  pj  =  permutation[j  +  1]  &  0xFFFF;  [BUGGY]      point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	428	428	2	replace	int    pj    =    permutation[j    -    1]    &    0xFFFF;    int  pj  =  permutation[j  +  1]  &  0xFFFF;	  	non-compiled	[CE]  variable  pj  is  already  defined  in  method  doOptimize()	84	None	add
339	[BUG]  [BUGGY]  int  pj  =  permutation[j  -  1]  +  1;  int  pj  =  permutation[j  -  1)]  +  1;  [CE]  ']'  expected  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {      [BUGGY]  int  pj  =  permutation[j  -  1]  +  1;  int  pj  =  permutation[j  -  1)]  +  1;  [BUGGY]      point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	428	428	2	replace	int    pj    =    permutation[j    -    1]    +    1;    int  pj  =  permutation[j  -  1)]  +  1;	  	non-compiled	[CE]  ']'  expected	16	None	add
340	[BUG]  [BUGGY]  int  point[j]  =  oldX[j].doubleValue()  -  1;  [CE]  ']'  expected  [FE]                  AssertionFailedError      [CONTEXT]      xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {      [BUGGY]  int  point[j]  =  oldX[j].doubleValue()  -  1;  [BUGGY]      int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	428	428	2	replace	int  point[j]  =  oldX[j].doubleValue()  -  1;	  int    point[j]    =    oldX[j].doubleValue();    	non-compiled	[CE]  ']'  expected	67	None	replace
341	[BUG]  [BUGGY]  int  pj  =  cost[j  -  1]  &  0x7F;  [CE]  array  required,  but  double  found  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {      [BUGGY]  int  pj  =  cost[j  -  1]  &  0x7F;  [BUGGY]      point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	428	428	2	replace	int  pj  =  cost[j  -  1]  &  0x7F;	  int    pj    =    permutation[j    -    1]    &    0x7F;    	non-compiled	[CE]  array  required,  but  double  found	71	None	replace
342	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {      [BUGGY]  int  pj  =  permutation[j  -  1]  &  0x1F;  [BUGGY]      point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	428	428	2	add	int  pj  =  permutation[j  -  1]  &  0x1F;	  int    pj    =    permutation[j    -    1]    &    0x7F;    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	71	15	replace
343	[BUG]  [BUGGY]  int  pj  =  permutation[j  -  1]  &  0x1F;  [FE]  ArrayIndexOutOfBoundsException  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {      [BUGGY]  int  pj  =  permutation[j  -  1]  &  0x1F;  [BUGGY]      point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	428	428	2	replace	int  pj  =  permutation[j  -  1]  &  0x1F;	  int    pj    =    permutation[j    -    1]    &    0x7F;    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	71	15	replace
344	[BUG]  [BUGGY]  double  pj  =  permutation[j];  point[pj]  =  oldX[pj].doubleValue();  [CE]  possible  loss  of  precision  [FE]                AssertionFailedError      [CONTEXT]      xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {      [BUGGY]  double  pj  =  permutation[j];  point[pj]  =  oldX[pj].doubleValue();  [BUGGY]      int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	428	428	2	replace	double  pj  =  permutation[j];  point[pj]  =  oldX[pj].doubleValue();	  double    pj    =    permutation[j];    point[pj]    =    oldX[pj];    	non-compiled	[CE]  possible  loss  of  precision	2	None	replace
345	[BUG]  [BUGGY]  int  pj  =  permutation[j  +  1]  -  1;  int  pj  =  permutation[j  +  1]  -  1);  [CE]  ';'  expected  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {      [BUGGY]  int  pj  =  permutation[j  +  1]  -  1;  int  pj  =  permutation[j  +  1]  -  1);  [BUGGY]      point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	428	428	2	replace	int    pj    =    permutation[j    +    1]    -    1;    int  pj  =  permutation[j  +  1]  -  1);	  	non-compiled	[CE]  ';'  expected	78	None	add
346	[BUG]  [BUGGY]  int  pj  =  permutation[j  +  1]  -  1;  int  pj  =  permutation[j  +  1)  -  1;  [CE]  ']'  expected  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {      [BUGGY]  int  pj  =  permutation[j  +  1]  -  1;  int  pj  =  permutation[j  +  1)  -  1;  [BUGGY]      point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	428	428	2	replace	int    pj    =    permutation[j    +    1]    -    1;    int  pj  =  permutation[j  +  1)  -  1;	  	non-compiled	[CE]  ']'  expected	78	None	add
347	[BUG]  [BUGGY]  int  pj  =  permutation[j  +  1];  int  pj  =  permutation[j  +  3];  [CE]  variable  pj  is  already  defined  in  method  doOptimize()  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {      [BUGGY]  int  pj  =  permutation[j  +  1];  int  pj  =  permutation[j  +  3];  [BUGGY]      point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	428	428	2	replace	int  pj  =  permutation[j  +  1];  int  pj  =  permutation[j  +  3];	  int    pj    =    permutation[j    +    1];    int    pj    =    permutation[j    +    1)];    	non-compiled	[CE]  variable  pj  is  already  defined  in  method  doOptimize()	6	None	replace
348	[BUG]  [BUGGY]  double  pj  =  Math.sqrt(xNorm);  [CE]  possible  loss  of  precision  [FE]                    AssertionFailedError      [CONTEXT]      xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {      [BUGGY]  double  pj  =  Math.sqrt(xNorm);  [BUGGY]      point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	428	428	2	replace	double  pj  =  Math.sqrt(xNorm);	  double    pj    =    Math.sqrt(previousCost);    	non-compiled	[CE]  possible  loss  of  precision	74	None	replace
349	[BUG]  [BUGGY]  float  pj  =  permutation[j]  -  1;  tmpVec  =  permutation[j]  -  1;  [CE]  incompatible  types  [FE]        ArrayIndexOutOfBoundsException      [CONTEXT]      xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {      [BUGGY]  float  pj  =  permutation[j]  -  1;  tmpVec  =  permutation[j]  -  1;  [BUGGY]      point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	428	428	2	replace	float  pj  =  permutation[j]  -  1;  tmpVec  =  permutation[j]  -  1;	  int    pj    =    permutation[j]    -    1;    tmpVec    =    permutation[j]    -    1;    	non-compiled	[CE]  incompatible  types	88	None	replace
350	[BUG]  [BUGGY]  char  pj  =  permutation[j]  -  1;  tmpVec  =  permutation[j]  -  1;  [CE]  possible  loss  of  precision  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {      [BUGGY]  char  pj  =  permutation[j]  -  1;  tmpVec  =  permutation[j]  -  1;  [BUGGY]      point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	428	428	2	replace	char  pj  =  permutation[j]  -  1;  tmpVec  =  permutation[j]  -  1;	  int    pj    =    permutation[j]    -    1;    tmpVec    =    permutation[j]    -    1;    	non-compiled	[CE]  possible  loss  of  precision	88	None	replace
351	[BUG]  [BUGGY]  int  pj  =  oldX[j];  point[pj]  =  oldX[pj];  [CE]  possible  loss  of  precision  [FE]              AssertionFailedError      [CONTEXT]      xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {      [BUGGY]  int  pj  =  oldX[j];  point[pj]  =  oldX[pj];  [BUGGY]      int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	428	428	2	replace	int  pj  =  oldX[j];  point[pj]  =  oldX[pj];	  int    pj    =    previousCost[j];    point[pj]    =    oldX[pj];    	non-compiled	[CE]  possible  loss  of  precision	90	None	replace
352	[BUG]  [BUGGY]  int  point[j]  =  oldX[j]  /  1;  [CE]  ']'  expected  [FE]                  AssertionFailedError      [CONTEXT]      xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {      [BUGGY]  int  point[j]  =  oldX[j]  /  1;  [BUGGY]      int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	428	428	2	replace	int  point[j]  =  oldX[j]  /  1;	  int    point[j]    =    oldX[j]    +    1;    	non-compiled	[CE]  ']'  expected	69	None	replace
353	[BUG]  [BUGGY]  int  pj  =  cost[j  -  1]  &  0xFFFF;  [CE]  array  required,  but  double  found  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {      [BUGGY]  int  pj  =  cost[j  -  1]  &  0xFFFF;  [BUGGY]      point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	428	428	2	replace	int  pj  =  cost[j  -  1]  &  0xFFFF;	  int    pj    =    permutation[j    -    1]    &    0xFFFF;    	non-compiled	[CE]  array  required,  but  double  found	85	None	replace
