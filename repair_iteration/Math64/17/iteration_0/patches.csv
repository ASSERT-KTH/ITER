bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  int  pj  =  oldX[j];  [CE]  possible  loss  of  precision  [FE]    AssertionFailedError  [CONTEXT]  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  [BUGGY]  int  pj  =  oldX[j];  [BUGGY]  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	428	428	2	replace	int  pj  =  oldX[j];	int  pj  =  permutation[j];  	non-compiled	[CE]  possible  loss  of  precision	33	None	replace
2	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]      AssertionFailedError  [CONTEXT]  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  [BUGGY]  int  pj  =  permutation[j]  +  1;  [BUGGY]  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	428	428	2	add	int  pj  =  permutation[j]  +  1;	int  pj  =  permutation[j];  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	33	15	replace
3	[BUG]  [BUGGY]  int  pj  =  permutation[j]  +  1;  [FE]  ArrayIndexOutOfBoundsException  [FE]      AssertionFailedError  [CONTEXT]  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  [BUGGY]  int  pj  =  permutation[j]  +  1;  [BUGGY]  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	428	428	2	replace	int  pj  =  permutation[j]  +  1;	int  pj  =  permutation[j];  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	33	15	replace
4	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]        AssertionFailedError  [CONTEXT]  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  [BUGGY]  int  pj  =  permutation[j]  -  1;  [BUGGY]  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	428	428	2	add	int  pj  =  permutation[j]  -  1;	int  pj  =  permutation[j];  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	33	15	replace
5	[BUG]  [BUGGY]  int  pj  =  permutation[j]  -  1;  [FE]  ArrayIndexOutOfBoundsException  [FE]        AssertionFailedError  [CONTEXT]  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  [BUGGY]  int  pj  =  permutation[j]  -  1;  [BUGGY]  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	428	428	2	replace	int  pj  =  permutation[j]  -  1;	int  pj  =  permutation[j];  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	33	15	replace
6	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]          AssertionFailedError  [CONTEXT]  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  [BUGGY]  int  pj  =  permutation[j  +  1];  [BUGGY]  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	428	428	2	add	int  pj  =  permutation[j  +  1];	int  pj  =  permutation[j];  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	33	15	replace
7	[BUG]  [BUGGY]  int  pj  =  permutation[j  +  1];  [FE]  ArrayIndexOutOfBoundsException  [FE]          AssertionFailedError  [CONTEXT]  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  [BUGGY]  int  pj  =  permutation[j  +  1];  [BUGGY]  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	428	428	2	replace	int  pj  =  permutation[j  +  1];	int  pj  =  permutation[j];  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	33	15	replace
8	[BUG]  [BUGGY]    [CE]  cannot  find  symbol  pj  [FE]            AssertionFailedError  [CONTEXT]  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  [BUGGY]    [BUGGY]  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	428	428	2	replace	  	int  pj  =  permutation[j];  	non-compiled	[CE]  cannot  find  symbol  pj	33	None	replace
9	[BUG]  [BUGGY]    int  point[j]  =  permutation[j];  [CE]  ']'  expected  [FE]    AssertionFailedError  [CONTEXT]  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  [BUGGY]    int  point[j]  =  permutation[j];  [BUGGY]  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	428	428	2	replace	    int  point[j]  =  permutation[j];		non-compiled	[CE]  ']'  expected	34	None	add
10	[BUG]  [BUGGY]    int  permutation[j]  =  permutation[j];  [CE]  ']'  expected  [FE]      AssertionFailedError  [CONTEXT]  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  [BUGGY]    int  permutation[j]  =  permutation[j];  [BUGGY]  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	428	428	2	replace	    int  permutation[j]  =  permutation[j];		non-compiled	[CE]  ']'  expected	34	None	add
11	[BUG]  [BUGGY]    int  point[j]  =  oldX[j];  [CE]  ']'  expected  [FE]        AssertionFailedError  [CONTEXT]  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  [BUGGY]    int  point[j]  =  oldX[j];  [BUGGY]  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	428	428	2	replace	    int  point[j]  =  oldX[j];		non-compiled	[CE]  ']'  expected	34	None	add
12	[BUG]  [BUGGY]    int  point[j]  =  permutation[j].doubleValue();  [CE]  ']'  expected  [FE]          AssertionFailedError  [CONTEXT]  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  [BUGGY]    int  point[j]  =  permutation[j].doubleValue();  [BUGGY]  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	428	428	2	replace	    int  point[j]  =  permutation[j].doubleValue();		non-compiled	[CE]  ']'  expected	34	None	add
13	[BUG]  [BUGGY]    int  point[j]  =  previousCost;  [CE]  ']'  expected  [FE]            AssertionFailedError  [CONTEXT]  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  [BUGGY]    int  point[j]  =  previousCost;  [BUGGY]  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	428	428	2	replace	    int  point[j]  =  previousCost;		non-compiled	[CE]  ']'  expected	34	None	add
14	[BUG]  [BUGGY]    int  point  =  permutation[j];  [CE]  array  required,  but  int  found  [FE]    AssertionFailedError  [CONTEXT]  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  [BUGGY]    int  point  =  permutation[j];  [BUGGY]  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	428	428	2	replace	    int  point  =  permutation[j];		non-compiled	[CE]  array  required,  but  int  found	34	None	add
15	[BUG]  [BUGGY]    int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  [CE]  variable  pj  is  already  defined  in  method  doOptimize()  [FE]      AssertionFailedError  [CONTEXT]  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  [BUGGY]    int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  [BUGGY]  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	428	428	2	replace	    int  pj  =  permutation[j];  point[pj]  =  oldX[pj];		non-compiled	[CE]  variable  pj  is  already  defined  in  method  doOptimize()	34	None	add
16	[BUG]  [BUGGY]    int  point  =  oldX[j];  [CE]  possible  loss  of  precision  [FE]        AssertionFailedError  [CONTEXT]  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  [BUGGY]    int  point  =  oldX[j];  [BUGGY]  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	428	428	2	replace	    int  point  =  oldX[j];		non-compiled	[CE]  possible  loss  of  precision	34	None	add
17	[BUG]  [BUGGY]  int  pj  =  point[j];  [CE]  possible  loss  of  precision  [FE]    AssertionFailedError  [CONTEXT]  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  [BUGGY]  int  pj  =  point[j];  [BUGGY]  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	428	428	2	replace	int  pj  =  point[j];	int  pj  =  permutation[j];  	non-compiled	[CE]  possible  loss  of  precision	33	None	replace
18	[BUG]  [BUGGY]    int  oldX  =  permutation[j];  [CE]  variable  oldX  is  already  defined  in  method  doOptimize()  [FE]    AssertionFailedError  [CONTEXT]  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  [BUGGY]    int  oldX  =  permutation[j];  [BUGGY]  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	428	428	2	replace	    int  oldX  =  permutation[j];		non-compiled	[CE]  variable  oldX  is  already  defined  in  method  doOptimize()	34	None	add
19	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    AssertionFailedError  [CONTEXT]  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  [BUGGY]  int  pj  =  permutation[j  -  1];  [BUGGY]  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	428	428	2	add	int  pj  =  permutation[j  -  1];	int  pj  =  permutation[j];  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	33	15	replace
20	[BUG]  [BUGGY]  int  pj  =  permutation[j  -  1];  [FE]  ArrayIndexOutOfBoundsException  [FE]    AssertionFailedError  [CONTEXT]  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  [BUGGY]  int  pj  =  permutation[j  -  1];  [BUGGY]  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	428	428	2	replace	int  pj  =  permutation[j  -  1];	int  pj  =  permutation[j];  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	33	15	replace
