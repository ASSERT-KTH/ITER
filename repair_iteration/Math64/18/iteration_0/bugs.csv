bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	failing_test_number	action	patch
35	[BUG] [BUGGY] point[pj] = oldX[pj]; [FE] AssertionFailedError [CONTEXT] } xNorm = Math.sqrt(xNorm);   } else {  cost = previousCost; for (int j = 0; j < solvedCols; ++j) { int pj = permutation[j]; [BUGGY] point[pj] = oldX[pj]; [BUGGY] } tmpVec= residuals; residuals = oldRes; oldRes= tmpVec; } [CLASS] LevenbergMarquardtOptimizer [METHOD] doOptimize [RETURN_TYPE] VectorialPointValuePair  [VARIABLES] VectorialPointValuePair current previous int[] permutation boolean firstIteration double[] beta diag diagR jacNorm lmDir oldRes oldX tmpVec work1 work2 work3 double actRed coeff1 coeff2 costRelativeTolerance delta dirDer dirJ dk initialStepBoundFactor lmNorm lmPar maxCosine orthoTolerance parRelativeTolerance pc2 preRed previousCost qrRankingThreshold r ratio s sum threshold tmp xK xNorm xk int i j k pj pk rank solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	
36	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] } xNorm = Math.sqrt(xNorm);   } else {  cost = previousCost; for (int j = 0; j < solvedCols; ++j) { int pj = permutation[j]; [BUGGY] [BUGGY] point[pj] = oldX[pj]; } tmpVec= residuals; residuals = oldRes; oldRes= tmpVec; } [CLASS] LevenbergMarquardtOptimizer [METHOD] doOptimize [RETURN_TYPE] VectorialPointValuePair  [VARIABLES] VectorialPointValuePair current previous int[] permutation boolean firstIteration double[] beta diag diagR jacNorm lmDir oldRes oldX tmpVec work1 work2 work3 double actRed coeff1 coeff2 costRelativeTolerance delta dirDer dirJ dk initialStepBoundFactor lmNorm lmPar maxCosine orthoTolerance parRelativeTolerance pc2 preRed previousCost qrRankingThreshold r ratio s sum threshold tmp xK xNorm xk int i j k pj pk rank solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	add	
