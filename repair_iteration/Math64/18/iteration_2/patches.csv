bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  point[pj]  =  1;  [BUGGY]      }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	add	point[pj]  =  1;	  point[pj]    =    0;    	compilable	  [FE]  AssertionFailedError  	6	10	replace
2	[BUG]  [BUGGY]  point[pj]  =  1;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  point[pj]  =  1;  [BUGGY]      }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	point[pj]  =  1;	  point[pj]    =    0;    	compilable	  [FE]  AssertionFailedError  	6	10	replace
3	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  point[pj]  =  Math.max(point[j],  pj);  [BUGGY]      }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	add	point[pj]  =  Math.max(point[j],  pj);	  point[pj]    =    0;    	compilable	  [FE]  AssertionFailedError  	6	12	replace
4	[BUG]  [BUGGY]  point[pj]  =  Math.max(point[j],  pj);  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  point[pj]  =  Math.max(point[j],  pj);  [BUGGY]      }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	point[pj]  =  Math.max(point[j],  pj);	  point[pj]    =    0;    	compilable	  [FE]  AssertionFailedError  	6	12	replace
5	[BUG]  [BUGGY]  point[j]  =  permutation[j];  Point[pj]  =  permutation[j];  [CE]  cannot  find  symbol  Point  [FE]              AssertionFailedError      [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  point[j]  =  permutation[j];  Point[pj]  =  permutation[j];  [BUGGY]      }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	point[j]  =  permutation[j];  Point[pj]  =  permutation[j];	  point[pj]    =    permutation[pj];    Point[pj]    =    permutation[pj];    	non-compiled	[CE]  cannot  find  symbol  Point	18	None	replace
6	[BUG]  [BUGGY]  point[pj]  =  cost[pj];  [CE]  array  required,  but  double  found  [FE]                AssertionFailedError      [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  point[pj]  =  cost[pj];  [BUGGY]      }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	point[pj]  =  cost[pj];	  point[pj]    =    permutation[pj];    Point[pj]    =    permutation[pj];    	non-compiled	[CE]  array  required,  but  double  found	18	None	replace
7	[BUG]  [BUGGY]  Point[pj]  =  permutation[pj];  [CE]  cannot  find  symbol  Point  [FE]                  AssertionFailedError      [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  Point[pj]  =  permutation[pj];  [BUGGY]      }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	Point[pj]  =  permutation[pj];	  point[pj]    =    permutation[pj];    Point[pj]    =    permutation[pj];    	non-compiled	[CE]  cannot  find  symbol  Point	18	None	replace
8	[BUG]  [BUGGY]  ((  VectorialPointValuePair)previousCost).setIndex(point,  pj);  [CE]  inconvertible  types  [FE]                      AssertionFailedError      [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  ((  VectorialPointValuePair)previousCost).setIndex(point,  pj);  [BUGGY]      point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	((  VectorialPointValuePair)previousCost).setIndex(point,  pj);	  ((    VectorialPointValuePair)previousCost).setIndex(point);    	non-compiled	[CE]  inconvertible  types	76	None	replace
9	[BUG]  [BUGGY]  ((  VectorialPointValuePair)previousCost).setIndex(pj,  point);  [CE]  inconvertible  types  [FE]                        AssertionFailedError      [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  ((  VectorialPointValuePair)previousCost).setIndex(pj,  point);  [BUGGY]      point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	((  VectorialPointValuePair)previousCost).setIndex(pj,  point);	  ((    VectorialPointValuePair)previousCost).setIndex(point);    	non-compiled	[CE]  inconvertible  types	76	None	replace
10	[BUG]  [BUGGY]  ((  VectorialPointValuePair)previousCost).setIndex(point,  cost);  [CE]  inconvertible  types  [FE]                          AssertionFailedError      [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  ((  VectorialPointValuePair)previousCost).setIndex(point,  cost);  [BUGGY]      point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	((  VectorialPointValuePair)previousCost).setIndex(point,  cost);	  ((    VectorialPointValuePair)previousCost).setIndex(point);    	non-compiled	[CE]  inconvertible  types	76	None	replace
11	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  tmpVec  =  oldRes;  [BUGGY]      point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	add	tmpVec  =  oldRes;	  tmpVec    =    oldX;    	compilable	  [FE]  AssertionFailedError  	89	12	replace
12	[BUG]  [BUGGY]  tmpVec  =  oldRes;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  tmpVec  =  oldRes;  [BUGGY]      point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	tmpVec  =  oldRes;	  tmpVec    =    oldX;    	compilable	  [FE]  AssertionFailedError  	89	12	replace
13	[BUG]  [BUGGY]  point[pj]  =  Cost.parseInt(pj);  [CE]  cannot  find  symbol  Cost  [FE]          AssertionFailedError      [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  point[pj]  =  Cost.parseInt(pj);  [BUGGY]      }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	point[pj]  =  Cost.parseInt(pj);	  point[pj]    =    Cost.parseInt(xNorm);    	non-compiled	[CE]  cannot  find  symbol  Cost	172	None	replace
14	[BUG]  [BUGGY]  point[pj]  =  cost.parseInt(xNorm);  [CE]  double  cannot  be  dereferenced  [FE]            AssertionFailedError      [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  point[pj]  =  cost.parseInt(xNorm);  [BUGGY]      }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	point[pj]  =  cost.parseInt(xNorm);	  point[pj]    =    Cost.parseInt(xNorm);    	non-compiled	[CE]  double  cannot  be  dereferenced	172	None	replace
15	[BUG]  [BUGGY]  point[pj]  =  Cost.parseInt(xNorm,  pj);  [CE]  cannot  find  symbol  Cost  [FE]              AssertionFailedError      [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  point[pj]  =  Cost.parseInt(xNorm,  pj);  [BUGGY]      }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	point[pj]  =  Cost.parseInt(xNorm,  pj);	  point[pj]    =    Cost.parseInt(xNorm);    	non-compiled	[CE]  cannot  find  symbol  Cost	172	None	replace
16	[BUG]  [BUGGY]  point[j]  =  Cost.parseInt(xNorm);  [CE]  cannot  find  symbol  Cost  [FE]                AssertionFailedError      [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  point[j]  =  Cost.parseInt(xNorm);  [BUGGY]      }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	point[j]  =  Cost.parseInt(xNorm);	  point[pj]    =    Cost.parseInt(xNorm);    	non-compiled	[CE]  cannot  find  symbol  Cost	172	None	replace
17	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  fixedCols.length;  ++i)  {  int  oldX  =  oldX[i];  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  for(int  i  =  0;  i  <  fixedCols.length;  ++i)  {  int  oldX  =  oldX[i];  [BUGGY]      point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	for(int  i  =  0;  i  <  fixedCols.length;  ++i)  {  int  oldX  =  oldX[i];	  for(int    i    =    0;    i    <    fixedCols;    ++i)    {    int    oldX    =    oldX[i];    	non-compiled	[CE]  illegal  start  of  expression	57	None	replace
18	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]          for(int    i    =    0;    i    <    solvedCols;    ++i)    {    point[pj]    =    cost;    }    for(int  i  =  0;  i  <  solvedCols;  ++i)  {  point[pj]  =  cost;  }  for(int  i  =  0;  i  <  solvedCols;  ++i)  {  point[pj]  =  cost;  }  [BUGGY]      point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	add	                for(int        i        =        0;        i        <        solvedCols;        ++i)        {        point[pj]        =        cost;        }        for(int    i    =    0;    i    <    solvedCols;    ++i)    {    point[pj]    =    cost;    }    for(int  i  =  0;  i  <  solvedCols;  ++i)  {  point[pj]  =  cost;  }	  	compilable	  [FE]  AssertionFailedError  	66	2	add
19	[BUG]  [BUGGY]          for(int    i    =    0;    i    <    solvedCols;    ++i)    {    point[pj]    =    cost;    }    for(int  i  =  0;  i  <  solvedCols;  ++i)  {  point[pj]  =  cost;  }  for(int  i  =  0;  i  <  solvedCols;  ++i)  {  point[pj]  =  cost;  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]          for(int    i    =    0;    i    <    solvedCols;    ++i)    {    point[pj]    =    cost;    }    for(int  i  =  0;  i  <  solvedCols;  ++i)  {  point[pj]  =  cost;  }  for(int  i  =  0;  i  <  solvedCols;  ++i)  {  point[pj]  =  cost;  }  [BUGGY]      point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	                for(int        i        =        0;        i        <        solvedCols;        ++i)        {        point[pj]        =        cost;        }        for(int    i    =    0;    i    <    solvedCols;    ++i)    {    point[pj]    =    cost;    }    for(int  i  =  0;  i  <  solvedCols;  ++i)  {  point[pj]  =  cost;  }	  	compilable	  [FE]  AssertionFailedError  	66	2	add
20	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]          for(int    i    =    0;    i    <    solvedCols;    ++i)    {    point[pj]    =    cost;    }    for(int  i  =  0;  i  <  solvedCols;  ++i)  {  point[pj]  =  cost;  }  for(int  i  =  0;  i  <  solvedCols;  ++i)  {  point[pj]  =  cost;  }  for(int  i  =  0;  i  <  solvedCols;  ++i)  {  point[pj]  =  cost;  }  [BUGGY]      point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	add	                for(int        i        =        0;        i        <        solvedCols;        ++i)        {        point[pj]        =        cost;        }        for(int    i    =    0;    i    <    solvedCols;    ++i)    {    point[pj]    =    cost;    }    for(int  i  =  0;  i  <  solvedCols;  ++i)  {  point[pj]  =  cost;  }  for(int  i  =  0;  i  <  solvedCols;  ++i)  {  point[pj]  =  cost;  }	  	compilable	  [FE]  AssertionFailedError  	66	2	add
21	[BUG]  [BUGGY]          for(int    i    =    0;    i    <    solvedCols;    ++i)    {    point[pj]    =    cost;    }    for(int  i  =  0;  i  <  solvedCols;  ++i)  {  point[pj]  =  cost;  }  for(int  i  =  0;  i  <  solvedCols;  ++i)  {  point[pj]  =  cost;  }  for(int  i  =  0;  i  <  solvedCols;  ++i)  {  point[pj]  =  cost;  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]          for(int    i    =    0;    i    <    solvedCols;    ++i)    {    point[pj]    =    cost;    }    for(int  i  =  0;  i  <  solvedCols;  ++i)  {  point[pj]  =  cost;  }  for(int  i  =  0;  i  <  solvedCols;  ++i)  {  point[pj]  =  cost;  }  for(int  i  =  0;  i  <  solvedCols;  ++i)  {  point[pj]  =  cost;  }  [BUGGY]      point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	                for(int        i        =        0;        i        <        solvedCols;        ++i)        {        point[pj]        =        cost;        }        for(int    i    =    0;    i    <    solvedCols;    ++i)    {    point[pj]    =    cost;    }    for(int  i  =  0;  i  <  solvedCols;  ++i)  {  point[pj]  =  cost;  }  for(int  i  =  0;  i  <  solvedCols;  ++i)  {  point[pj]  =  cost;  }	  	compilable	  [FE]  AssertionFailedError  	66	2	add
22	[BUG]  [BUGGY]          for(int    i    =    0;    i    <    solvedCols;    ++i)    {    point[pj]    =    cost;    }    for(int  i  =  0;  i  <  solvedCols;  ++i)  {  point[pj]  =  cost;  }  For(int  i  =  0;  i  <  solvedCols;  ++i)  {  point[pj]  =  cost;  }  for(int  i  =  0;  i  <  solvedCols;  ++i)  {  point[pj]  =  cost;  }  [CE]  '.class'  expected  [FE]        AssertionFailedError    [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]          for(int    i    =    0;    i    <    solvedCols;    ++i)    {    point[pj]    =    cost;    }    for(int  i  =  0;  i  <  solvedCols;  ++i)  {  point[pj]  =  cost;  }  For(int  i  =  0;  i  <  solvedCols;  ++i)  {  point[pj]  =  cost;  }  for(int  i  =  0;  i  <  solvedCols;  ++i)  {  point[pj]  =  cost;  }  [BUGGY]      point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	                for(int        i        =        0;        i        <        solvedCols;        ++i)        {        point[pj]        =        cost;        }        for(int    i    =    0;    i    <    solvedCols;    ++i)    {    point[pj]    =    cost;    }    For(int  i  =  0;  i  <  solvedCols;  ++i)  {  point[pj]  =  cost;  }  for(int  i  =  0;  i  <  solvedCols;  ++i)  {  point[pj]  =  cost;  }	  	non-compiled	[CE]  '.class'  expected	66	None	add
23	[BUG]  [BUGGY]          for(int    i    =    0;    i    <    solvedCols;    ++i)    {    point[pj]    =    cost;    }    for(int  i  =  0;  i  <  solvedCols;  ++i)  {  point[pj]  =  cost;  }  For(int  i  =  0;  i  <  solvedCols;  ++i)  {  point[pj]  =  cost;  }  [CE]  '.class'  expected  [FE]          AssertionFailedError    [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]          for(int    i    =    0;    i    <    solvedCols;    ++i)    {    point[pj]    =    cost;    }    for(int  i  =  0;  i  <  solvedCols;  ++i)  {  point[pj]  =  cost;  }  For(int  i  =  0;  i  <  solvedCols;  ++i)  {  point[pj]  =  cost;  }  [BUGGY]      point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	                for(int        i        =        0;        i        <        solvedCols;        ++i)        {        point[pj]        =        cost;        }        for(int    i    =    0;    i    <    solvedCols;    ++i)    {    point[pj]    =    cost;    }    For(int  i  =  0;  i  <  solvedCols;  ++i)  {  point[pj]  =  cost;  }	  	non-compiled	[CE]  '.class'  expected	66	None	add
24	[BUG]  [BUGGY]          for(int    i    =    0;    i    <    solvedCols;    ++i)    {    point[pj]    =    cost;    }    for(int  i  =  0;  i  <  solvedCols;  ++i)  {  point[pj]  =  cost;  }  int  i  =  0;  i  <  solvedCols;  ++i)  {  point[pj]  =  cost;  }  [CE]  >  expected  [FE]            AssertionFailedError    [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]          for(int    i    =    0;    i    <    solvedCols;    ++i)    {    point[pj]    =    cost;    }    for(int  i  =  0;  i  <  solvedCols;  ++i)  {  point[pj]  =  cost;  }  int  i  =  0;  i  <  solvedCols;  ++i)  {  point[pj]  =  cost;  }  [BUGGY]      point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	                for(int        i        =        0;        i        <        solvedCols;        ++i)        {        point[pj]        =        cost;        }        for(int    i    =    0;    i    <    solvedCols;    ++i)    {    point[pj]    =    cost;    }    int  i  =  0;  i  <  solvedCols;  ++i)  {  point[pj]  =  cost;  }	  	non-compiled	[CE]  >  expected	66	None	add
25	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  point[j]  =  permutation[j];  point[j]  =  permutation[j];  [BUGGY]      }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	add	point[j]    =    permutation[j];    point[j]  =  permutation[j];	  	compilable	  [FE]  AssertionFailedError  	98	11	add
26	[BUG]  [BUGGY]  point[j]  =  permutation[j];  point[j]  =  permutation[j];  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  point[j]  =  permutation[j];  point[j]  =  permutation[j];  [BUGGY]      }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	point[j]    =    permutation[j];    point[j]  =  permutation[j];	  	compilable	  [FE]  AssertionFailedError  	98	11	add
27	[BUG]  [BUGGY]  point[j]  =  permutation[j];  points[j]  =  permutation[j];  [CE]  cannot  find  symbol  points  [FE]      AssertionFailedError    [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  point[j]  =  permutation[j];  points[j]  =  permutation[j];  [BUGGY]      }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	point[j]    =    permutation[j];    points[j]  =  permutation[j];	  	non-compiled	[CE]  cannot  find  symbol  points	98	None	add
28	[BUG]  [BUGGY]  point[j]  =  permutation[j];  int  point[j]  =  permutation[j];  [CE]  ']'  expected  [FE]        AssertionFailedError    [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  point[j]  =  permutation[j];  int  point[j]  =  permutation[j];  [BUGGY]      }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	point[j]    =    permutation[j];    int  point[j]  =  permutation[j];	  	non-compiled	[CE]  ']'  expected	98	None	add
29	[BUG]  [BUGGY]  point[j]  =  permutation[j];  Point[j]  =  permutation[j];  [CE]  cannot  find  symbol  Point  [FE]          AssertionFailedError    [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  point[j]  =  permutation[j];  Point[j]  =  permutation[j];  [BUGGY]      }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	point[j]    =    permutation[j];    Point[j]  =  permutation[j];	  	non-compiled	[CE]  cannot  find  symbol  Point	98	None	add
30	[BUG]  [BUGGY]  point[j]  =  permutation[j];  Point[j]  =  point[j];  [CE]  cannot  find  symbol  Point  [FE]            AssertionFailedError    [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  point[j]  =  permutation[j];  Point[j]  =  point[j];  [BUGGY]      }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	point[j]    =    permutation[j];    Point[j]  =  point[j];	  	non-compiled	[CE]  cannot  find  symbol  Point	98	None	add
31	[BUG]  [BUGGY]  ((  VectorialPointValuePair)pj).remove(cost,  oldX);  [CE]  inconvertible  types  [FE]              AssertionFailedError      [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  ((  VectorialPointValuePair)pj).remove(cost,  oldX);  [BUGGY]      point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	((  VectorialPointValuePair)pj).remove(cost,  oldX);	  ((    VectorialPointValuePair)pj).remove(oldX);    	non-compiled	[CE]  inconvertible  types	160	None	replace
32	[BUG]  [BUGGY]  ((  VectorialPointValuePair)pj).remove(xNorm);  [CE]  inconvertible  types  [FE]                AssertionFailedError      [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  ((  VectorialPointValuePair)pj).remove(xNorm);  [BUGGY]      point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	((  VectorialPointValuePair)pj).remove(xNorm);	  ((    VectorialPointValuePair)pj).remove(oldX);    	non-compiled	[CE]  inconvertible  types	160	None	replace
33	[BUG]  [BUGGY]  point[pj]  =  permutation[pj]?  cost  :  xNorm;  [CE]  incompatible  types  [FE]          AssertionFailedError      [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  point[pj]  =  permutation[pj]?  cost  :  xNorm;  [BUGGY]      }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	point[pj]  =  permutation[pj]?  cost  :  xNorm;	  point[pj]    =    cost?    permutation[pj]    :    xNorm;    	non-compiled	[CE]  incompatible  types	151	None	replace
34	[BUG]  [BUGGY]  point[pj]  =  cost?  permutation[j]  :  xNorm;  [CE]  incompatible  types  [FE]            AssertionFailedError      [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  point[pj]  =  cost?  permutation[j]  :  xNorm;  [BUGGY]      }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	point[pj]  =  cost?  permutation[j]  :  xNorm;	  point[pj]    =    cost?    permutation[pj]    :    xNorm;    	non-compiled	[CE]  incompatible  types	151	None	replace
35	[BUG]  [BUGGY]  ((  VectorialPointValuePair)previous).setIndex(pj  -  2);  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  ((  VectorialPointValuePair)previous).setIndex(pj  -  2);  [BUGGY]      point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	((  VectorialPointValuePair)previous).setIndex(pj  -  2);	  ((    VectorialPointValuePair)previous).setIndex(pj    -    1);    	non-compiled	[CE]  cannot  find  symbol	11	None	replace
36	[BUG]  [BUGGY]  ((  VectorialPointValuePair)previous).setIndex(pj  *  1);  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  ((  VectorialPointValuePair)previous).setIndex(pj  *  1);  [BUGGY]      point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	((  VectorialPointValuePair)previous).setIndex(pj  *  1);	  ((    VectorialPointValuePair)previous).setIndex(pj    -    1);    	non-compiled	[CE]  cannot  find  symbol	11	None	replace
37	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  point[j]  =  xNorm;  point[j]  =  xNorm;  [BUGGY]      }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	add	point[j]    =    xNorm;    point[j]  =  xNorm;	  	compilable	  [FE]  AssertionFailedError  	96	12	add
38	[BUG]  [BUGGY]  point[j]  =  xNorm;  point[j]  =  xNorm;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  point[j]  =  xNorm;  point[j]  =  xNorm;  [BUGGY]      }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	point[j]    =    xNorm;    point[j]  =  xNorm;	  	compilable	  [FE]  AssertionFailedError  	96	12	add
39	[BUG]  [BUGGY]  point[j]  =  xNorm;  ((  VectorialPointValuePair)permutation[j]).doubleValue();  [CE]  inconvertible  types  [FE]      AssertionFailedError    [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  point[j]  =  xNorm;  ((  VectorialPointValuePair)permutation[j]).doubleValue();  [BUGGY]      }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	point[j]    =    xNorm;    ((  VectorialPointValuePair)permutation[j]).doubleValue();	  	non-compiled	[CE]  inconvertible  types	96	None	add
40	[BUG]  [BUGGY]  point[j]  =  xNorm;  points[j]  =  xNorm;  [CE]  cannot  find  symbol  points  [FE]        AssertionFailedError    [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  point[j]  =  xNorm;  points[j]  =  xNorm;  [BUGGY]      }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	point[j]    =    xNorm;    points[j]  =  xNorm;	  	non-compiled	[CE]  cannot  find  symbol  points	96	None	add
41	[BUG]  [BUGGY]  point[j]  =  xNorm;  ((  VectorialPointValuePair)point[j]).doubleValue();  [CE]  inconvertible  types  [FE]          AssertionFailedError    [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  point[j]  =  xNorm;  ((  VectorialPointValuePair)point[j]).doubleValue();  [BUGGY]      }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	point[j]    =    xNorm;    ((  VectorialPointValuePair)point[j]).doubleValue();	  	non-compiled	[CE]  inconvertible  types	96	None	add
42	[BUG]  [BUGGY]  point[j]  =  xNorm;  ((  VectorialPointValuePair)permutation[j]).doubleValue());  [CE]  ';'  expected  [FE]            AssertionFailedError    [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  point[j]  =  xNorm;  ((  VectorialPointValuePair)permutation[j]).doubleValue());  [BUGGY]      }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	point[j]    =    xNorm;    ((  VectorialPointValuePair)permutation[j]).doubleValue());	  	non-compiled	[CE]  ';'  expected	96	None	add
43	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  solvedCols;  ++i)  {  point[pj]  =  value;  }  [CE]  cannot  find  symbol  value  [FE]    AssertionFailedError    [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  for(int  i  =  0;  i  <  solvedCols;  ++i)  {  point[pj]  =  value;  }  [BUGGY]      point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	for(int  i  =  0;  i  <  solvedCols;  ++i)  {  point[pj]  =  value;  }	          for(int    i    =    0;    i    <    solvedCols;    ++i)    {    point[pj]    =    cost;    }    for(int    i    =    0;    i    <    solvedCols;    ++i)    {    point[pj]    =    cost;    }    	non-compiled	[CE]  cannot  find  symbol  value	67	None	replace
44	[BUG]  [BUGGY]  Point  tmpVec  =  permutation[j];  [CE]  cannot  find  symbol  [FE]        ArrayIndexOutOfBoundsException      [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  Point  tmpVec  =  permutation[j];  [BUGGY]      point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	Point  tmpVec  =  permutation[j];	          for(int    i    =    0;    j    <    solvedCols;    ++i)    {    point[pj]    =    oldX[i];    }    (int    i    =    0;    j    <    solvedCols;    ++i)    {    point[pj]    =    oldX[i];    }    	non-compiled	[CE]  cannot  find  symbol	127	None	replace
45	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  point[j]  =  oldX[pj  -  1];  point[j]  =  oldX[pj  -  1];  [BUGGY]      }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	add	point[j]    =    oldX[pj    -    1];    point[j]  =  oldX[pj  -  1];	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	169	15	add
46	[BUG]  [BUGGY]  point[j]  =  oldX[pj  -  1];  point[j]  =  oldX[pj  -  1];  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  point[j]  =  oldX[pj  -  1];  point[j]  =  oldX[pj  -  1];  [BUGGY]      }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	point[j]    =    oldX[pj    -    1];    point[j]  =  oldX[pj  -  1];	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	169	15	add
47	[BUG]  [BUGGY]  point[j]  =  oldX[pj  -  1];  points[j]  =  oldX[pj  -  1];  [CE]  cannot  find  symbol  points  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  point[j]  =  oldX[pj  -  1];  points[j]  =  oldX[pj  -  1];  [BUGGY]      }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	point[j]    =    oldX[pj    -    1];    points[j]  =  oldX[pj  -  1];	  	non-compiled	[CE]  cannot  find  symbol  points	169	None	add
48	[BUG]  [BUGGY]  point[j]  =  oldX[pj  -  1];  int  point[j]  =  oldX[pj  -  1];  [CE]  ']'  expected  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  point[j]  =  oldX[pj  -  1];  int  point[j]  =  oldX[pj  -  1];  [BUGGY]      }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	point[j]    =    oldX[pj    -    1];    int  point[j]  =  oldX[pj  -  1];	  	non-compiled	[CE]  ']'  expected	169	None	add
49	[BUG]  [BUGGY]  point[j]  =  oldX[pj  -  1];  tmpVec  =  oldX[pj  -  1];  [CE]  incompatible  types  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  point[j]  =  oldX[pj  -  1];  tmpVec  =  oldX[pj  -  1];  [BUGGY]      }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	point[j]    =    oldX[pj    -    1];    tmpVec  =  oldX[pj  -  1];	  	non-compiled	[CE]  incompatible  types	169	None	add
50	[BUG]  [BUGGY]  point[j]  =  oldX[pj  -  1];  Point  pj  =  oldX[pj  -  1];  [CE]  cannot  find  symbol  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  point[j]  =  oldX[pj  -  1];  Point  pj  =  oldX[pj  -  1];  [BUGGY]      }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	point[j]    =    oldX[pj    -    1];    Point  pj  =  oldX[pj  -  1];	  	non-compiled	[CE]  cannot  find  symbol	169	None	add
51	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  point[pj]  =  xNorm  +  1;  point[pj]  =  xNorm  +  1;  [BUGGY]      }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	add	point[pj]    =    xNorm    +    1;    point[pj]  =  xNorm  +  1;	  	compilable	  [FE]  AssertionFailedError  	86	2	add
52	[BUG]  [BUGGY]  point[pj]  =  xNorm  +  1;  point[pj]  =  xNorm  +  1;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  point[pj]  =  xNorm  +  1;  point[pj]  =  xNorm  +  1;  [BUGGY]      }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	point[pj]    =    xNorm    +    1;    point[pj]  =  xNorm  +  1;	  	compilable	  [FE]  AssertionFailedError  	86	2	add
53	[BUG]  [BUGGY]  point[pj]  =  xNorm  +  1;  points[pj]  =  xNorm  +  1;  [CE]  cannot  find  symbol  points  [FE]      AssertionFailedError    [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  point[pj]  =  xNorm  +  1;  points[pj]  =  xNorm  +  1;  [BUGGY]      }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	point[pj]    =    xNorm    +    1;    points[pj]  =  xNorm  +  1;	  	non-compiled	[CE]  cannot  find  symbol  points	86	None	add
54	[BUG]  [BUGGY]  point[pj]  =  xNorm  +  1;  int  point[pj]  =  xNorm  +  1;  [CE]  ']'  expected  [FE]        AssertionFailedError    [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  point[pj]  =  xNorm  +  1;  int  point[pj]  =  xNorm  +  1;  [BUGGY]      }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	point[pj]    =    xNorm    +    1;    int  point[pj]  =  xNorm  +  1;	  	non-compiled	[CE]  ']'  expected	86	None	add
55	[BUG]  [BUGGY]  point[pj]  =  xNorm  +  1;  Point[pj]  =  xNorm  +  1;  [CE]  cannot  find  symbol  Point  [FE]          AssertionFailedError    [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  point[pj]  =  xNorm  +  1;  Point[pj]  =  xNorm  +  1;  [BUGGY]      }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	point[pj]    =    xNorm    +    1;    Point[pj]  =  xNorm  +  1;	  	non-compiled	[CE]  cannot  find  symbol  Point	86	None	add
56	[BUG]  [BUGGY]  point[pj]  =  xNorm  +  1;  pj]  =  xNorm  +  1;  [CE]  not  a  statement  [FE]            AssertionFailedError    [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  point[pj]  =  xNorm  +  1;  pj]  =  xNorm  +  1;  [BUGGY]      }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	point[pj]    =    xNorm    +    1;    pj]  =  xNorm  +  1;	  	non-compiled	[CE]  not  a  statement	86	None	add
57	[BUG]  [BUGGY]  point[j]  =  cost[xNorm];  [CE]  possible  loss  of  precision  [FE]        AssertionFailedError      [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  point[j]  =  cost[xNorm];  [BUGGY]      }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	point[j]  =  cost[xNorm];	  point[j]    =    xNorm[pj];    	non-compiled	[CE]  possible  loss  of  precision	168	None	replace
58	[BUG]  [BUGGY]  ((  VectorialPointValuePair)point[j]).setValue(xNorm);  [CE]  inconvertible  types  [FE]          AssertionFailedError      [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  ((  VectorialPointValuePair)point[j]).setValue(xNorm);  [BUGGY]      }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	((  VectorialPointValuePair)point[j]).setValue(xNorm);	  point[pj]    =    xNorm;    ((    VectorialPointValuePair)point[pj]).setValue(xNorm);    	non-compiled	[CE]  inconvertible  types	159	None	replace
59	[BUG]  [BUGGY]  ((  VectorialPointValuePair)point[j]).setValue(pj);  [CE]  inconvertible  types  [FE]            AssertionFailedError      [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  ((  VectorialPointValuePair)point[j]).setValue(pj);  [BUGGY]      }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	((  VectorialPointValuePair)point[j]).setValue(pj);	  point[pj]    =    xNorm;    ((    VectorialPointValuePair)point[pj]).setValue(xNorm);    	non-compiled	[CE]  inconvertible  types	159	None	replace
60	[BUG]  [BUGGY]  ((  VectorialPointValuePair)point[j]).setValue(cost);  [CE]  inconvertible  types  [FE]              AssertionFailedError      [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  ((  VectorialPointValuePair)point[j]).setValue(cost);  [BUGGY]      }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	((  VectorialPointValuePair)point[j]).setValue(cost);	  point[pj]    =    xNorm;    ((    VectorialPointValuePair)point[pj]).setValue(xNorm);    	non-compiled	[CE]  inconvertible  types	159	None	replace
61	[BUG]  [BUGGY]  ((  VectorialPointValuePair)point[j]).setValue(value);  [CE]  cannot  find  symbol  value  [FE]                AssertionFailedError      [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  ((  VectorialPointValuePair)point[j]).setValue(value);  [BUGGY]      }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	((  VectorialPointValuePair)point[j]).setValue(value);	  point[pj]    =    xNorm;    ((    VectorialPointValuePair)point[pj]).setValue(xNorm);    	non-compiled	[CE]  cannot  find  symbol  value	159	None	replace
62	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]        ArrayIndexOutOfBoundsException      [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  for(int  i  =  0;  j  <  solvedCols;  ++i)  {  point[i]  =  oldX[i];  }  [BUGGY]      point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	add	for(int  i  =  0;  j  <  solvedCols;  ++i)  {  point[i]  =  oldX[i];  }	          for(int    i    =    0;    j    <    solvedCols;    ++i)    {    point[pj]    =    oldX[i];    }    if(i    >    0)    {    for(int    i    =    0;    j    <    solvedCols;    ++i)    {    point[pj]    =    oldX[i];    }    }    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	163	15	replace
63	[BUG]  [BUGGY]  for(int  i  =  0;  j  <  solvedCols;  ++i)  {  point[i]  =  oldX[i];  }  [FE]  ArrayIndexOutOfBoundsException  [FE]        ArrayIndexOutOfBoundsException      [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  for(int  i  =  0;  j  <  solvedCols;  ++i)  {  point[i]  =  oldX[i];  }  [BUGGY]      point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	for(int  i  =  0;  j  <  solvedCols;  ++i)  {  point[i]  =  oldX[i];  }	          for(int    i    =    0;    j    <    solvedCols;    ++i)    {    point[pj]    =    oldX[i];    }    if(i    >    0)    {    for(int    i    =    0;    j    <    solvedCols;    ++i)    {    point[pj]    =    oldX[i];    }    }    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	163	15	replace
64	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  point[j]  =  oldX[i];  }  [CE]  variable  j  is  already  defined  in  method  doOptimize()  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  point[j]  =  oldX[i];  }  [BUGGY]      point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	for(int  j  =  0;  j  <  solvedCols;  ++j)  {  point[j]  =  oldX[i];  }	          for(int    i    =    0;    j    <    solvedCols;    ++i)    {    point[pj]    =    oldX[i];    }    if(i    >    0)    {    for(int    i    =    0;    j    <    solvedCols;    ++i)    {    point[pj]    =    oldX[i];    }    }    	non-compiled	[CE]  variable  j  is  already  defined  in  method  doOptimize()	163	None	replace
65	[BUG]  [BUGGY]  ((  VectorialPointValuePair)point[j]).setValue(null);  [CE]  inconvertible  types  [FE]        AssertionFailedError      [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  ((  VectorialPointValuePair)point[j]).setValue(null);  [BUGGY]      }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	((  VectorialPointValuePair)point[j]).setValue(null);	  point[pj]    =    xNorm;    ((    VectorialPointValuePair)point[pj]).setValue(null);    	non-compiled	[CE]  inconvertible  types	132	None	replace
66	[BUG]  [BUGGY]  ((  VectorialPointValuePair)point[pj]).setValue(null);  [CE]  inconvertible  types  [FE]          AssertionFailedError      [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  ((  VectorialPointValuePair)point[pj]).setValue(null);  [BUGGY]      }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	((  VectorialPointValuePair)point[pj]).setValue(null);	  point[pj]    =    xNorm;    ((    VectorialPointValuePair)point[pj]).setValue(null);    	non-compiled	[CE]  inconvertible  types	132	None	replace
67	[BUG]  [BUGGY]  ((  VectorialPointValuePair)point[pj]).setValue(null,  cost);  [CE]  inconvertible  types  [FE]            AssertionFailedError      [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  ((  VectorialPointValuePair)point[pj]).setValue(null,  cost);  [BUGGY]      }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	((  VectorialPointValuePair)point[pj]).setValue(null,  cost);	  point[pj]    =    xNorm;    ((    VectorialPointValuePair)point[pj]).setValue(null);    	non-compiled	[CE]  inconvertible  types	132	None	replace
68	[BUG]  [BUGGY]  ((  VectorialPointValuePair)point[j]).setValue(false);  [CE]  inconvertible  types  [FE]              AssertionFailedError      [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  ((  VectorialPointValuePair)point[j]).setValue(false);  [BUGGY]      }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	((  VectorialPointValuePair)point[j]).setValue(false);	  point[pj]    =    xNorm;    ((    VectorialPointValuePair)point[pj]).setValue(null);    	non-compiled	[CE]  inconvertible  types	132	None	replace
69	[BUG]  [BUGGY]  point[pj]  =  cost.parseValue(xNorm,  pj);  [CE]  double  cannot  be  dereferenced  [FE]            AssertionFailedError      [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  point[pj]  =  cost.parseValue(xNorm,  pj);  [BUGGY]      }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	point[pj]  =  cost.parseValue(xNorm,  pj);	  point[pj]    =    Cost.parseValue(xNorm,    pj);    	non-compiled	[CE]  double  cannot  be  dereferenced	147	None	replace
70	[BUG]  [BUGGY]  point[j]  =  Cost.parseValue(xNorm,  pj);  [CE]  cannot  find  symbol  Cost  [FE]              AssertionFailedError      [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  point[j]  =  Cost.parseValue(xNorm,  pj);  [BUGGY]      }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	point[j]  =  Cost.parseValue(xNorm,  pj);	  point[pj]    =    Cost.parseValue(xNorm,    pj);    	non-compiled	[CE]  cannot  find  symbol  Cost	147	None	replace
71	[BUG]  [BUGGY]  point[pj]  =  Cost.parseValue(xNorm,  pj,  permutation);  [CE]  cannot  find  symbol  Cost  [FE]                AssertionFailedError      [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  point[pj]  =  Cost.parseValue(xNorm,  pj,  permutation);  [BUGGY]      }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	point[pj]  =  Cost.parseValue(xNorm,  pj,  permutation);	  point[pj]    =    Cost.parseValue(xNorm,    pj);    	non-compiled	[CE]  cannot  find  symbol  Cost	147	None	replace
72	[BUG]  [BUGGY]  point[pj]  =  cost.parse(xNorm);  [CE]  double  cannot  be  dereferenced  [FE]        AssertionFailedError      [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  point[pj]  =  cost.parse(xNorm);  [BUGGY]      }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	point[pj]  =  cost.parse(xNorm);	  point[pj]    =    Cost.parse(xNorm);    	non-compiled	[CE]  double  cannot  be  dereferenced	171	None	replace
73	[BUG]  [BUGGY]  point[pj]  =  Cost.parse(xNorm,  pj);  [CE]  cannot  find  symbol  Cost  [FE]          AssertionFailedError      [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  point[pj]  =  Cost.parse(xNorm,  pj);  [BUGGY]      }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	point[pj]  =  Cost.parse(xNorm,  pj);	  point[pj]    =    Cost.parse(xNorm);    	non-compiled	[CE]  cannot  find  symbol  Cost	171	None	replace
74	[BUG]  [BUGGY]  point[pj]  =  Cost.parse(cost);  [CE]  cannot  find  symbol  Cost  [FE]            AssertionFailedError      [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  point[pj]  =  Cost.parse(cost);  [BUGGY]      }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	point[pj]  =  Cost.parse(cost);	  point[pj]    =    Cost.parse(xNorm);    	non-compiled	[CE]  cannot  find  symbol  Cost	171	None	replace
75	[BUG]  [BUGGY]  for(int  i  =  0;  j  <  resolvedCols;  ++i)  {  point[pj]  =  oldX[i];  }  [CE]  cannot  find  symbol  resolvedCols  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  for(int  i  =  0;  j  <  resolvedCols;  ++i)  {  point[pj]  =  oldX[i];  }  [BUGGY]      point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	for(int  i  =  0;  j  <  resolvedCols;  ++i)  {  point[pj]  =  oldX[i];  }	          for(int    i    =    0;    j    <    solvedCols;    ++i)    {    point[pj]    =    oldX[i];    }    for(int    i    =    0;    j    <    resolvedCols;    ++i)    {    point[pj]    =    oldX[i];    }    	non-compiled	[CE]  cannot  find  symbol  resolvedCols	48	None	replace
76	[BUG]  [BUGGY]  for(int  i  =  0;  j  <  fixedCols;  ++i)  {  point[pj]  =  oldX[i];  }  [CE]  cannot  find  symbol  fixedCols  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  for(int  i  =  0;  j  <  fixedCols;  ++i)  {  point[pj]  =  oldX[i];  }  [BUGGY]      point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	for(int  i  =  0;  j  <  fixedCols;  ++i)  {  point[pj]  =  oldX[i];  }	          for(int    i    =    0;    j    <    solvedCols;    ++i)    {    point[pj]    =    oldX[i];    }    for(int    i    =    0;    j    <    resolvedCols;    ++i)    {    point[pj]    =    oldX[i];    }    	non-compiled	[CE]  cannot  find  symbol  fixedCols	48	None	replace
77	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  point[pj]  =  cost  +  1;  point[pj]  =  cost  +  1;  [BUGGY]      }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	add	point[pj]    =    cost    +    1;    point[pj]  =  cost  +  1;	  	compilable	  [FE]  AssertionFailedError  	7	2	add
78	[BUG]  [BUGGY]  point[pj]  =  cost  +  1;  point[pj]  =  cost  +  1;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  point[pj]  =  cost  +  1;  point[pj]  =  cost  +  1;  [BUGGY]      }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	point[pj]    =    cost    +    1;    point[pj]  =  cost  +  1;	  	compilable	  [FE]  AssertionFailedError  	7	2	add
79	[BUG]  [BUGGY]  point[pj]  =  cost  +  1;  int  point[pj]  =  cost  +  1;  [CE]  ']'  expected  [FE]      AssertionFailedError    [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  point[pj]  =  cost  +  1;  int  point[pj]  =  cost  +  1;  [BUGGY]      }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	point[pj]    =    cost    +    1;    int  point[pj]  =  cost  +  1;	  	non-compiled	[CE]  ']'  expected	7	None	add
80	[BUG]  [BUGGY]  point[pj]  =  cost  +  1;  points[pj]  =  cost  +  1;  [CE]  cannot  find  symbol  points  [FE]        AssertionFailedError    [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  point[pj]  =  cost  +  1;  points[pj]  =  cost  +  1;  [BUGGY]      }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	point[pj]    =    cost    +    1;    points[pj]  =  cost  +  1;	  	non-compiled	[CE]  cannot  find  symbol  points	7	None	add
81	[BUG]  [BUGGY]  point[pj]  =  cost  +  1;  Point  pj]  =  cost  +  1;  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  point[pj]  =  cost  +  1;  Point  pj]  =  cost  +  1;  [BUGGY]      }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	point[pj]    =    cost    +    1;    Point  pj]  =  cost  +  1;	  	non-compiled	[CE]  ';'  expected	7	None	add
82	[BUG]  [BUGGY]  point[pj]  =  cost  +  1;  point[pj]  =  value  +  1;  [CE]  cannot  find  symbol  value  [FE]            AssertionFailedError    [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  point[pj]  =  cost  +  1;  point[pj]  =  value  +  1;  [BUGGY]      }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	point[pj]    =    cost    +    1;    point[pj]  =  value  +  1;	  	non-compiled	[CE]  cannot  find  symbol  value	7	None	add
83	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  oldX;  ++i)  {  point[pj]  =  cost;  }  [CE]  bad  operand  types  for  binary  operator  '<'  [FE]            AssertionFailedError      [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  for(int  i  =  0;  i  <  oldX;  ++i)  {  point[pj]  =  cost;  }  [BUGGY]      point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	for(int  i  =  0;  i  <  oldX;  ++i)  {  point[pj]  =  cost;  }	  for(int    i    =    0;    i    <    fixedCols;    ++i)    {    point[pj]    =    cost;    }    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '<'	65	None	replace
84	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]              AssertionFailedError      [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  for(int  i  =  0;  i  <  permutation.length;  ++i)  {  point[pj]  =  cost;  }  [BUGGY]      point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	add	for(int  i  =  0;  i  <  permutation.length;  ++i)  {  point[pj]  =  cost;  }	  for(int    i    =    0;    i    <    fixedCols;    ++i)    {    point[pj]    =    cost;    }    	compilable	  [FE]  AssertionFailedError  	65	12	replace
85	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  permutation.length;  ++i)  {  point[pj]  =  cost;  }  [FE]  AssertionFailedError  [FE]              AssertionFailedError      [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  for(int  i  =  0;  i  <  permutation.length;  ++i)  {  point[pj]  =  cost;  }  [BUGGY]      point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	for(int  i  =  0;  i  <  permutation.length;  ++i)  {  point[pj]  =  cost;  }	  for(int    i    =    0;    i    <    fixedCols;    ++i)    {    point[pj]    =    cost;    }    	compilable	  [FE]  AssertionFailedError  	65	12	replace
86	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  fixedCost;  ++i)  {  point[pj]  =  cost;  }  [CE]  cannot  find  symbol  fixedCost  [FE]                AssertionFailedError      [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  for(int  i  =  0;  i  <  fixedCost;  ++i)  {  point[pj]  =  cost;  }  [BUGGY]      point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	for(int  i  =  0;  i  <  fixedCost;  ++i)  {  point[pj]  =  cost;  }	  for(int    i    =    0;    i    <    fixedCols;    ++i)    {    point[pj]    =    cost;    }    	non-compiled	[CE]  cannot  find  symbol  fixedCost	65	None	replace
87	[BUG]  [BUGGY]  ((  VectorialPointValuePair)point[j]).setIndex(pj);  [CE]  inconvertible  types  [FE]          AssertionFailedError      [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  ((  VectorialPointValuePair)point[j]).setIndex(pj);  [BUGGY]      }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	((  VectorialPointValuePair)point[j]).setIndex(pj);	  point[j]    =    oldX[pj];    ((    VectorialPointValuePair)point[j]).setIndex(pj);    	non-compiled	[CE]  inconvertible  types	143	None	replace
88	[BUG]  [BUGGY]  ((  VectorialPointValuePair)point[j]).setIndex(pj  +  1);  [CE]  inconvertible  types  [FE]            AssertionFailedError      [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  ((  VectorialPointValuePair)point[j]).setIndex(pj  +  1);  [BUGGY]      }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	((  VectorialPointValuePair)point[j]).setIndex(pj  +  1);	  point[j]    =    oldX[pj];    ((    VectorialPointValuePair)point[j]).setIndex(pj);    	non-compiled	[CE]  inconvertible  types	143	None	replace
89	[BUG]  [BUGGY]  ((  VectorialPointValuePair)point[j]).setIndex(pj  -  1);  [CE]  inconvertible  types  [FE]              AssertionFailedError      [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  ((  VectorialPointValuePair)point[j]).setIndex(pj  -  1);  [BUGGY]      }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	((  VectorialPointValuePair)point[j]).setIndex(pj  -  1);	  point[j]    =    oldX[pj];    ((    VectorialPointValuePair)point[j]).setIndex(pj);    	non-compiled	[CE]  inconvertible  types	143	None	replace
90	[BUG]  [BUGGY]  int  oldX  =  xNorm[i];  [CE]  variable  oldX  is  already  defined  in  method  doOptimize()  [FE]              AssertionFailedError      [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  int  oldX  =  xNorm[i];  [BUGGY]      point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	int  oldX  =  xNorm[i];	  int    oldX    =    oldX[i];    	non-compiled	[CE]  variable  oldX  is  already  defined  in  method  doOptimize()	56	None	replace
91	[BUG]  [BUGGY]  int  oldX  =  permutation[i];  [CE]  variable  oldX  is  already  defined  in  method  doOptimize()  [FE]                AssertionFailedError      [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  int  oldX  =  permutation[i];  [BUGGY]      point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	int  oldX  =  permutation[i];	  int    oldX    =    oldX[i];    	non-compiled	[CE]  variable  oldX  is  already  defined  in  method  doOptimize()	56	None	replace
92	[BUG]  [BUGGY]  int  oldX  =  cost[i];  [CE]  variable  oldX  is  already  defined  in  method  doOptimize()  [FE]                  AssertionFailedError      [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  int  oldX  =  cost[i];  [BUGGY]      point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	int  oldX  =  cost[i];	  int    oldX    =    oldX[i];    	non-compiled	[CE]  variable  oldX  is  already  defined  in  method  doOptimize()	56	None	replace
93	[BUG]  [BUGGY]  ((  VectorialPointValuePair)previous).add(point);  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  ((  VectorialPointValuePair)previous).add(point);  [BUGGY]      point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	((  VectorialPointValuePair)previous).add(point);	  ((    VectorialPointValuePair)previous).remove(point);    	non-compiled	[CE]  cannot  find  symbol	131	None	replace
94	[BUG]  [BUGGY]  ((  VectorialPointValuePair)previous).remove(permutation);  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  ((  VectorialPointValuePair)previous).remove(permutation);  [BUGGY]      point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	((  VectorialPointValuePair)previous).remove(permutation);	  ((    VectorialPointValuePair)previous).remove(point);    	non-compiled	[CE]  cannot  find  symbol	131	None	replace
95	[BUG]  [BUGGY]  ((  VectorialPointValuePair)previous).get(pj);  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  ((  VectorialPointValuePair)previous).get(pj);  [BUGGY]      point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	((  VectorialPointValuePair)previous).get(pj);	  ((    VectorialPointValuePair)previous).remove(point);    	non-compiled	[CE]  cannot  find  symbol	131	None	replace
96	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  point[pj]    =    permutation[pj];    point[pj]  =  permutation[pj];  point[pj]  =  permutation[pj];  point[pj]  =  permutation[pj];  [BUGGY]      }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	add	point[pj]        =        permutation[pj];        point[pj]    =    permutation[pj];    point[pj]  =  permutation[pj];  point[pj]  =  permutation[pj];	  	compilable	  [FE]  AssertionFailedError  	14	2	add
97	[BUG]  [BUGGY]  point[pj]    =    permutation[pj];    point[pj]  =  permutation[pj];  point[pj]  =  permutation[pj];  point[pj]  =  permutation[pj];  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  point[pj]    =    permutation[pj];    point[pj]  =  permutation[pj];  point[pj]  =  permutation[pj];  point[pj]  =  permutation[pj];  [BUGGY]      }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	point[pj]        =        permutation[pj];        point[pj]    =    permutation[pj];    point[pj]  =  permutation[pj];  point[pj]  =  permutation[pj];	  	compilable	  [FE]  AssertionFailedError  	14	2	add
98	[BUG]  [BUGGY]  point[pj]    =    permutation[pj];    point[pj]  =  permutation[pj];  points[pj]  =  permutation[pj];  point[pj]  =  permutation[pj];  [CE]  cannot  find  symbol  points  [FE]      AssertionFailedError    [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  point[pj]    =    permutation[pj];    point[pj]  =  permutation[pj];  points[pj]  =  permutation[pj];  point[pj]  =  permutation[pj];  [BUGGY]      }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	point[pj]        =        permutation[pj];        point[pj]    =    permutation[pj];    points[pj]  =  permutation[pj];  point[pj]  =  permutation[pj];	  	non-compiled	[CE]  cannot  find  symbol  points	14	None	add
99	[BUG]  [BUGGY]  point[pj]    =    permutation[pj];    point[pj]  =  permutation[pj];  point[pj]  =  parmutation[pj];  point[pj]  =  permutation[pj];  [CE]  cannot  find  symbol  parmutation  [FE]        AssertionFailedError    [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  point[pj]    =    permutation[pj];    point[pj]  =  permutation[pj];  point[pj]  =  parmutation[pj];  point[pj]  =  permutation[pj];  [BUGGY]      }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	point[pj]        =        permutation[pj];        point[pj]    =    permutation[pj];    point[pj]  =  parmutation[pj];  point[pj]  =  permutation[pj];	  	non-compiled	[CE]  cannot  find  symbol  parmutation	14	None	add
100	[BUG]  [BUGGY]  point[pj]    =    permutation[pj];    point[pj]  =  permutation[pj];  point[pj]  =  permutation[pj];  point[pj]  =  permutation[pj];  }  [CE]  class,  interface,  or  enum  expected  [FE]          AssertionFailedError    [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  point[pj]    =    permutation[pj];    point[pj]  =  permutation[pj];  point[pj]  =  permutation[pj];  point[pj]  =  permutation[pj];  }  [BUGGY]      }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	point[pj]        =        permutation[pj];        point[pj]    =    permutation[pj];    point[pj]  =  permutation[pj];  point[pj]  =  permutation[pj];  }	  	non-compiled	[CE]  class,  interface,  or  enum  expected	14	None	add
101	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]          for(int    i    =    0;    j    <    solvedCols;    ++i)    {    point[pj]    =    oldX[i];    }    for(int  i  =  0;  j  <  solvedCols;  ++i)  {  point[pj]  =  oldX[i];  }  for(int  i  =  0;  j  <  solvedCols;  ++i)  {  point[pj]  =  oldX[i];  }  [BUGGY]      point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	add	                for(int        i        =        0;        j        <        solvedCols;        ++i)        {        point[pj]        =        oldX[i];        }        for(int    i    =    0;    j    <    solvedCols;    ++i)    {    point[pj]    =    oldX[i];    }    for(int  i  =  0;  j  <  solvedCols;  ++i)  {  point[pj]  =  oldX[i];  }	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	44	15	add
102	[BUG]  [BUGGY]          for(int    i    =    0;    j    <    solvedCols;    ++i)    {    point[pj]    =    oldX[i];    }    for(int  i  =  0;  j  <  solvedCols;  ++i)  {  point[pj]  =  oldX[i];  }  for(int  i  =  0;  j  <  solvedCols;  ++i)  {  point[pj]  =  oldX[i];  }  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]          for(int    i    =    0;    j    <    solvedCols;    ++i)    {    point[pj]    =    oldX[i];    }    for(int  i  =  0;  j  <  solvedCols;  ++i)  {  point[pj]  =  oldX[i];  }  for(int  i  =  0;  j  <  solvedCols;  ++i)  {  point[pj]  =  oldX[i];  }  [BUGGY]      point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	                for(int        i        =        0;        j        <        solvedCols;        ++i)        {        point[pj]        =        oldX[i];        }        for(int    i    =    0;    j    <    solvedCols;    ++i)    {    point[pj]    =    oldX[i];    }    for(int  i  =  0;  j  <  solvedCols;  ++i)  {  point[pj]  =  oldX[i];  }	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	44	15	add
103	[BUG]  [BUGGY]          for(int    i    =    0;    j    <    solvedCols;    ++i)    {    point[pj]    =    oldX[i];    }    for(int  i  =  0;  j  <  solvedCols;  ++i)  {  point[pj]  =  oldX[i];  }  int  i  =  0;  j  <  solvedCols;  ++i)  {  point[pj]  =  oldX[i];  }  [CE]  >  expected  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]          for(int    i    =    0;    j    <    solvedCols;    ++i)    {    point[pj]    =    oldX[i];    }    for(int  i  =  0;  j  <  solvedCols;  ++i)  {  point[pj]  =  oldX[i];  }  int  i  =  0;  j  <  solvedCols;  ++i)  {  point[pj]  =  oldX[i];  }  [BUGGY]      point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	                for(int        i        =        0;        j        <        solvedCols;        ++i)        {        point[pj]        =        oldX[i];        }        for(int    i    =    0;    j    <    solvedCols;    ++i)    {    point[pj]    =    oldX[i];    }    int  i  =  0;  j  <  solvedCols;  ++i)  {  point[pj]  =  oldX[i];  }	  	non-compiled	[CE]  >  expected	44	None	add
104	[BUG]  [BUGGY]          for(int    i    =    0;    j    <    solvedCols;    ++i)    {    point[pj]    =    oldX[i];    }    for(int  i  =  0;  j  <  solvedCols;  ++i)  {  point[pj]  =  oldX[i];  }  for(int  j  =  0;  j  <  solvedCols;  ++i)  {  point[pj]  =  oldX[i];  }  [CE]  variable  j  is  already  defined  in  method  doOptimize()  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]          for(int    i    =    0;    j    <    solvedCols;    ++i)    {    point[pj]    =    oldX[i];    }    for(int  i  =  0;  j  <  solvedCols;  ++i)  {  point[pj]  =  oldX[i];  }  for(int  j  =  0;  j  <  solvedCols;  ++i)  {  point[pj]  =  oldX[i];  }  [BUGGY]      point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	                for(int        i        =        0;        j        <        solvedCols;        ++i)        {        point[pj]        =        oldX[i];        }        for(int    i    =    0;    j    <    solvedCols;    ++i)    {    point[pj]    =    oldX[i];    }    for(int  j  =  0;  j  <  solvedCols;  ++i)  {  point[pj]  =  oldX[i];  }	  	non-compiled	[CE]  variable  j  is  already  defined  in  method  doOptimize()	44	None	add
105	[BUG]  [BUGGY]          for(int    i    =    0;    j    <    solvedCols;    ++i)    {    point[pj]    =    oldX[i];    }    for(int  i  =  0;  j  <  solvedCols;  ++i)  {  point[pj]  =  oldX[i];  }  for(int  i  =  0;  j  <  resolvedCols;  ++i)  {  point[pj]  =  oldX[i];  }  [CE]  cannot  find  symbol  resolvedCols  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]          for(int    i    =    0;    j    <    solvedCols;    ++i)    {    point[pj]    =    oldX[i];    }    for(int  i  =  0;  j  <  solvedCols;  ++i)  {  point[pj]  =  oldX[i];  }  for(int  i  =  0;  j  <  resolvedCols;  ++i)  {  point[pj]  =  oldX[i];  }  [BUGGY]      point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	                for(int        i        =        0;        j        <        solvedCols;        ++i)        {        point[pj]        =        oldX[i];        }        for(int    i    =    0;    j    <    solvedCols;    ++i)    {    point[pj]    =    oldX[i];    }    for(int  i  =  0;  j  <  resolvedCols;  ++i)  {  point[pj]  =  oldX[i];  }	  	non-compiled	[CE]  cannot  find  symbol  resolvedCols	44	None	add
106	[BUG]  [BUGGY]          for(int    i    =    0;    j    <    solvedCols;    ++i)    {    point[pj]    =    oldX[i];    }    for(int  i  =  0;  j  <  solvedCols;  ++i)  {  point[pj]  =  oldX[i];  }  for(int  i  =  0;  j  <  solveCols;  ++i)  {  point[pj]  =  oldX[i];  }  [CE]  cannot  find  symbol  solveCols  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]          for(int    i    =    0;    j    <    solvedCols;    ++i)    {    point[pj]    =    oldX[i];    }    for(int  i  =  0;  j  <  solvedCols;  ++i)  {  point[pj]  =  oldX[i];  }  for(int  i  =  0;  j  <  solveCols;  ++i)  {  point[pj]  =  oldX[i];  }  [BUGGY]      point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	                for(int        i        =        0;        j        <        solvedCols;        ++i)        {        point[pj]        =        oldX[i];        }        for(int    i    =    0;    j    <    solvedCols;    ++i)    {    point[pj]    =    oldX[i];    }    for(int  i  =  0;  j  <  solveCols;  ++i)  {  point[pj]  =  oldX[i];  }	  	non-compiled	[CE]  cannot  find  symbol  solveCols	44	None	add
107	[BUG]  [BUGGY]  ((  VectorialPointValuePair)previousCost).setIndex(pj  +  2);  [CE]  inconvertible  types  [FE]                  AssertionFailedError      [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  ((  VectorialPointValuePair)previousCost).setIndex(pj  +  2);  [BUGGY]      point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	((  VectorialPointValuePair)previousCost).setIndex(pj  +  2);	  ((    VectorialPointValuePair)previousCost).setIndex(pj    -    2);    	non-compiled	[CE]  inconvertible  types	144	None	replace
108	[BUG]  [BUGGY]  ((  VectorialPointValuePair)previousCost).setIndex(pj  *  2);  [CE]  inconvertible  types  [FE]                    AssertionFailedError      [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  ((  VectorialPointValuePair)previousCost).setIndex(pj  *  2);  [BUGGY]      point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	((  VectorialPointValuePair)previousCost).setIndex(pj  *  2);	  ((    VectorialPointValuePair)previousCost).setIndex(pj    -    2);    	non-compiled	[CE]  inconvertible  types	144	None	replace
109	[BUG]  [BUGGY]  ((  VectorialPointValuePair)previousCost).setIndex(pj,  cost  -  2);  [CE]  inconvertible  types  [FE]                      AssertionFailedError      [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  ((  VectorialPointValuePair)previousCost).setIndex(pj,  cost  -  2);  [BUGGY]      point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	((  VectorialPointValuePair)previousCost).setIndex(pj,  cost  -  2);	  ((    VectorialPointValuePair)previousCost).setIndex(pj    -    2);    	non-compiled	[CE]  inconvertible  types	144	None	replace
110	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  k;  ++i)  {  point[pj]  =  oldX[pj];  }  [CE]  cannot  find  symbol  k  [FE]    AssertionFailedError    [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  for(int  i  =  0;  i  <  k;  ++i)  {  point[pj]  =  oldX[pj];  }  [BUGGY]      point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	for(int  i  =  0;  i  <  k;  ++i)  {  point[pj]  =  oldX[pj];  }	  for(int    i    =    0;    i    <    pj;    ++i)    {    point[pj]    =    oldX[pj];    }    	non-compiled	[CE]  cannot  find  symbol  k	178	None	replace
111	[BUG]  [BUGGY]  tmpVec  =  Math.sqrt(lastIteration,  xNorm);  [CE]  cannot  find  symbol  lastIteration  [FE]              AssertionFailedError      [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  tmpVec  =  Math.sqrt(lastIteration,  xNorm);  [BUGGY]      point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	tmpVec  =  Math.sqrt(lastIteration,  xNorm);	  tmpVec    =    Math.sqrt(xNorm);    	non-compiled	[CE]  cannot  find  symbol  lastIteration	149	None	replace
112	[BUG]  [BUGGY]  tmpVec  =  Math.sqrt(lastIteration,  pj);  [CE]  cannot  find  symbol  lastIteration  [FE]                AssertionFailedError      [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  tmpVec  =  Math.sqrt(lastIteration,  pj);  [BUGGY]      point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	tmpVec  =  Math.sqrt(lastIteration,  pj);	  tmpVec    =    Math.sqrt(xNorm);    	non-compiled	[CE]  cannot  find  symbol  lastIteration	149	None	replace
113	[BUG]  [BUGGY]  point[pj]  =  permutation[pj].;  [CE]  <identifier>  expected  [FE]          AssertionFailedError      [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  point[pj]  =  permutation[pj].;  [BUGGY]      }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	point[pj]  =  permutation[pj].;	  point[pj]    =    permutation[pj];    point[pj]    =    permutation[pj].;    	non-compiled	[CE]  <identifier>  expected	146	None	replace
114	[BUG]  [BUGGY]  point[0]  =  permutation[pj].;  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  point[0]  =  permutation[pj].;  [BUGGY]      }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	point[0]  =  permutation[pj].;	  point[pj]    =    permutation[pj];    point[pj]    =    permutation[pj].;    	non-compiled	[CE]  <identifier>  expected	146	None	replace
115	[BUG]  [BUGGY]  point[j]  =  permutation[j].;  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  point[j]  =  permutation[j].;  [BUGGY]      }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	point[j]  =  permutation[j].;	  point[pj]    =    permutation[pj];    point[pj]    =    permutation[pj].;    	non-compiled	[CE]  <identifier>  expected	146	None	replace
116	[BUG]  [BUGGY]  ((  VectorialPointValuePair)point[j]).remainder();  [CE]  inconvertible  types  [FE]          AssertionFailedError      [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  ((  VectorialPointValuePair)point[j]).remainder();  [BUGGY]      }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	((  VectorialPointValuePair)point[j]).remainder();	  point[pj]    =    cost;    ((    VectorialPointValuePair)point[pj]).remainder();    	non-compiled	[CE]  inconvertible  types	154	None	replace
117	[BUG]  [BUGGY]  ((  VectorialPointValuePair)point[0]).remainder();  [CE]  inconvertible  types  [FE]            AssertionFailedError      [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  ((  VectorialPointValuePair)point[0]).remainder();  [BUGGY]      }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	((  VectorialPointValuePair)point[0]).remainder();	  point[pj]    =    cost;    ((    VectorialPointValuePair)point[pj]).remainder();    	non-compiled	[CE]  inconvertible  types	154	None	replace
118	[BUG]  [BUGGY]  ((  VectorialPointValuePair)point[pj]).remainder();  [CE]  inconvertible  types  [FE]              AssertionFailedError      [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  ((  VectorialPointValuePair)point[pj]).remainder();  [BUGGY]      }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	((  VectorialPointValuePair)point[pj]).remainder();	  point[pj]    =    cost;    ((    VectorialPointValuePair)point[pj]).remainder();    	non-compiled	[CE]  inconvertible  types	154	None	replace
119	[BUG]  [BUGGY]  ((  VectorialPointValuePair)point[j]).multiply();  [CE]  inconvertible  types  [FE]                AssertionFailedError      [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  ((  VectorialPointValuePair)point[j]).multiply();  [BUGGY]      }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	((  VectorialPointValuePair)point[j]).multiply();	  point[pj]    =    cost;    ((    VectorialPointValuePair)point[pj]).remainder();    	non-compiled	[CE]  inconvertible  types	154	None	replace
120	[BUG]  [BUGGY]  ((  VectorialPointValuePair)previous).setIndex(pj  +  2);  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  ((  VectorialPointValuePair)previous).setIndex(pj  +  2);  [BUGGY]      point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	((  VectorialPointValuePair)previous).setIndex(pj  +  2);	  ((    VectorialPointValuePair)previous).setIndex(pj    +    1);    	non-compiled	[CE]  cannot  find  symbol	10	None	replace
121	[BUG]  [BUGGY]  ((  VectorialPointValuePair)previous).setIndex(pj,  cost  +  1);  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  ((  VectorialPointValuePair)previous).setIndex(pj,  cost  +  1);  [BUGGY]      point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	((  VectorialPointValuePair)previous).setIndex(pj,  cost  +  1);	  ((    VectorialPointValuePair)previous).setIndex(pj    +    1);    	non-compiled	[CE]  cannot  find  symbol	10	None	replace
122	[BUG]  [BUGGY]  ((  VectorialPointValuePair)previous).setIndex(point,  pj  +  1);  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  ((  VectorialPointValuePair)previous).setIndex(point,  pj  +  1);  [BUGGY]      point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	((  VectorialPointValuePair)previous).setIndex(point,  pj  +  1);	  ((    VectorialPointValuePair)previous).setIndex(pj    +    1);    	non-compiled	[CE]  cannot  find  symbol	10	None	replace
123	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  resolvedCols;  ++i)  {  point[pj]  =  oldX[pj];  }  [CE]  cannot  find  symbol  resolvedCols  [FE]          AssertionFailedError      [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  for(int  i  =  0;  i  <  resolvedCols;  ++i)  {  point[pj]  =  oldX[pj];  }  [BUGGY]      point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	for(int  i  =  0;  i  <  resolvedCols;  ++i)  {  point[pj]  =  oldX[pj];  }	          for(int    i    =    0;    i    <    solvedCols;    ++i)    {    point[pj]    =    cost;    }    if(i    =    0;    i    <    solvedCols;    ++i)    {    point[pj]    =    cost;    }    	non-compiled	[CE]  cannot  find  symbol  resolvedCols	137	None	replace
124	[BUG]  [BUGGY]  point[pj]  =  permutation[k];  [CE]  cannot  find  symbol  k  [FE]            AssertionFailedError      [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  point[pj]  =  permutation[k];  [BUGGY]      }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	point[pj]  =  permutation[k];	  point[pj]    =    permutation[c];    	non-compiled	[CE]  cannot  find  symbol  k	173	None	replace
125	[BUG]  [BUGGY]  point[pj]  =  permutation[i];  [CE]  cannot  find  symbol  i  [FE]              AssertionFailedError      [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  point[pj]  =  permutation[i];  [BUGGY]      }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	point[pj]  =  permutation[i];	  point[pj]    =    permutation[c];    	non-compiled	[CE]  cannot  find  symbol  i	173	None	replace
126	[BUG]  [BUGGY]  ((  VectorialPointValuePair)previousCost).remove(pj  /  1);  [CE]  inconvertible  types  [FE]                          AssertionFailedError      [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  ((  VectorialPointValuePair)previousCost).remove(pj  /  1);  [BUGGY]      point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	((  VectorialPointValuePair)previousCost).remove(pj  /  1);	  ((    VectorialPointValuePair)previousCost).remove(pj    +    1);    	non-compiled	[CE]  inconvertible  types	109	None	replace
127	[BUG]  [BUGGY]  ((  VectorialPointValuePair)previousCost).remove(pj,  cost  +  1);  [CE]  inconvertible  types  [FE]                            AssertionFailedError      [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  ((  VectorialPointValuePair)previousCost).remove(pj,  cost  +  1);  [BUGGY]      point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	((  VectorialPointValuePair)previousCost).remove(pj,  cost  +  1);	  ((    VectorialPointValuePair)previousCost).remove(pj    +    1);    	non-compiled	[CE]  inconvertible  types	109	None	replace
128	[BUG]  [BUGGY]  ((  VectorialPointValuePair)previousCost).setIndex(pj  *  1);  [CE]  inconvertible  types  [FE]                  AssertionFailedError      [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  ((  VectorialPointValuePair)previousCost).setIndex(pj  *  1);  [BUGGY]      point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	((  VectorialPointValuePair)previousCost).setIndex(pj  *  1);	  ((    VectorialPointValuePair)previousCost).setIndex(pj    +    1);    	non-compiled	[CE]  inconvertible  types	74	None	replace
129	[BUG]  [BUGGY]  ((  VectorialPointValuePair)previousCost).setIndex(pj  +  3);  [CE]  inconvertible  types  [FE]                    AssertionFailedError      [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  ((  VectorialPointValuePair)previousCost).setIndex(pj  +  3);  [BUGGY]      point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	((  VectorialPointValuePair)previousCost).setIndex(pj  +  3);	  ((    VectorialPointValuePair)previousCost).setIndex(pj    +    1);    	non-compiled	[CE]  inconvertible  types	74	None	replace
130	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  resolvedCols;  ++j)  {  point[j]  =  oldX[j];  }  [CE]  variable  j  is  already  defined  in  method  doOptimize()  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  for(int  j  =  0;  j  <  resolvedCols;  ++j)  {  point[j]  =  oldX[j];  }  [BUGGY]      point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	for(int  j  =  0;  j  <  resolvedCols;  ++j)  {  point[j]  =  oldX[j];  }	  for(int    j    =    0;    j    <    solvedCols;    ++j)    {    point[j]    =    oldX[j];    }    	non-compiled	[CE]  variable  j  is  already  defined  in  method  doOptimize()	121	None	replace
131	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  point[j]  =  permutation[j];  }  [CE]  variable  j  is  already  defined  in  method  doOptimize()  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  point[j]  =  permutation[j];  }  [BUGGY]      point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	for(int  j  =  0;  j  <  solvedCols;  ++j)  {  point[j]  =  permutation[j];  }	  for(int    j    =    0;    j    <    solvedCols;    ++j)    {    point[j]    =    oldX[j];    }    	non-compiled	[CE]  variable  j  is  already  defined  in  method  doOptimize()	121	None	replace
132	[BUG]  [BUGGY]  timeout  [FE]                AssertionFailedError      [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]          for(int    i    =    0;    j    <    solvedCols;    ++i)    {    point[pj]    =    cost;    }    for(int  i  =  0;  j  <  solvedCols;  ++i)  {  point[pj]  =  cost;  }  for(int  i  =  0;  j  <  solvedCols;  ++i)  {  point[pj]  =  cost;  }  for(int  i  =  0;  j  <  solvedCols;  ++i)  {  point[pj]  =  cost;  }  [BUGGY]      point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	add	                for(int        i        =        0;        j        <        solvedCols;        ++i)        {        point[pj]        =        cost;        }        for(int    i    =    0;    j    <    solvedCols;    ++i)    {    point[pj]    =    cost;    }    for(int  i  =  0;  j  <  solvedCols;  ++i)  {  point[pj]  =  cost;  }  for(int  i  =  0;  j  <  solvedCols;  ++i)  {  point[pj]  =  cost;  }	  timeout    	compilable	timeout	20	1	add
133	[BUG]  [BUGGY]          for(int    i    =    0;    j    <    solvedCols;    ++i)    {    point[pj]    =    cost;    }    for(int  i  =  0;  j  <  solvedCols;  ++i)  {  point[pj]  =  cost;  }  for(int  i  =  0;  j  <  solvedCols;  ++i)  {  point[pj]  =  cost;  }  for(int  i  =  0;  j  <  solvedCols;  ++i)  {  point[pj]  =  cost;  }  timeout  [FE]                AssertionFailedError      [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]          for(int    i    =    0;    j    <    solvedCols;    ++i)    {    point[pj]    =    cost;    }    for(int  i  =  0;  j  <  solvedCols;  ++i)  {  point[pj]  =  cost;  }  for(int  i  =  0;  j  <  solvedCols;  ++i)  {  point[pj]  =  cost;  }  for(int  i  =  0;  j  <  solvedCols;  ++i)  {  point[pj]  =  cost;  }  [BUGGY]      point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	                for(int        i        =        0;        j        <        solvedCols;        ++i)        {        point[pj]        =        cost;        }        for(int    i    =    0;    j    <    solvedCols;    ++i)    {    point[pj]    =    cost;    }    for(int  i  =  0;  j  <  solvedCols;  ++i)  {  point[pj]  =  cost;  }  for(int  i  =  0;  j  <  solvedCols;  ++i)  {  point[pj]  =  cost;  }	  timeout    	compilable	timeout	20	1	add
134	[BUG]  [BUGGY]          for(int    i    =    0;    j    <    solvedCols;    ++i)    {    point[pj]    =    cost;    }    for(int  i  =  0;  j  <  solvedCols;  ++i)  {  point[pj]  =  cost;  }  for(int  i  =  0;  j  <  solvedCols;  ++i)  {  point[pj]  =  cost;  }  for(int  j  =  0;  j  <  solvedCols;  ++i)  {  point[pj]  =  cost;  }  [CE]  variable  j  is  already  defined  in  method  doOptimize()  [FE]                  AssertionFailedError      [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]          for(int    i    =    0;    j    <    solvedCols;    ++i)    {    point[pj]    =    cost;    }    for(int  i  =  0;  j  <  solvedCols;  ++i)  {  point[pj]  =  cost;  }  for(int  i  =  0;  j  <  solvedCols;  ++i)  {  point[pj]  =  cost;  }  for(int  j  =  0;  j  <  solvedCols;  ++i)  {  point[pj]  =  cost;  }  [BUGGY]      point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	                for(int        i        =        0;        j        <        solvedCols;        ++i)        {        point[pj]        =        cost;        }        for(int    i    =    0;    j    <    solvedCols;    ++i)    {    point[pj]    =    cost;    }    for(int  i  =  0;  j  <  solvedCols;  ++i)  {  point[pj]  =  cost;  }  for(int  j  =  0;  j  <  solvedCols;  ++i)  {  point[pj]  =  cost;  }	  timeout    	non-compiled	[CE]  variable  j  is  already  defined  in  method  doOptimize()	20	None	add
135	[BUG]  [BUGGY]  timeout  [FE]                    AssertionFailedError      [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]          for(int    i    =    0;    j    <    solvedCols;    ++i)    {    point[pj]    =    cost;    }    for(int  i  =  0;  j  <  solvedCols;  ++i)  {  point[pj]  =  cost;  }  for(int  i  =  0;  j  <  solvedCols;  ++i)  {  point[pj]  =  cost;  }  [BUGGY]      point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	add	                for(int        i        =        0;        j        <        solvedCols;        ++i)        {        point[pj]        =        cost;        }        for(int    i    =    0;    j    <    solvedCols;    ++i)    {    point[pj]    =    cost;    }    for(int  i  =  0;  j  <  solvedCols;  ++i)  {  point[pj]  =  cost;  }	  timeout    	compilable	timeout	20	1	add
136	[BUG]  [BUGGY]          for(int    i    =    0;    j    <    solvedCols;    ++i)    {    point[pj]    =    cost;    }    for(int  i  =  0;  j  <  solvedCols;  ++i)  {  point[pj]  =  cost;  }  for(int  i  =  0;  j  <  solvedCols;  ++i)  {  point[pj]  =  cost;  }  timeout  [FE]                    AssertionFailedError      [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]          for(int    i    =    0;    j    <    solvedCols;    ++i)    {    point[pj]    =    cost;    }    for(int  i  =  0;  j  <  solvedCols;  ++i)  {  point[pj]  =  cost;  }  for(int  i  =  0;  j  <  solvedCols;  ++i)  {  point[pj]  =  cost;  }  [BUGGY]      point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	                for(int        i        =        0;        j        <        solvedCols;        ++i)        {        point[pj]        =        cost;        }        for(int    i    =    0;    j    <    solvedCols;    ++i)    {    point[pj]    =    cost;    }    for(int  i  =  0;  j  <  solvedCols;  ++i)  {  point[pj]  =  cost;  }	  timeout    	compilable	timeout	20	1	add
137	[BUG]  [BUGGY]          for(int    i    =    0;    j    <    solvedCols;    ++i)    {    point[pj]    =    cost;    }    for(int  i  =  0;  j  <  solvedCols;  ++i)  {  point[pj]  =  cost;  }  for(int  i  =  0;  j  <  solvedCols;  ++i)  {  point[pj]  =  cost;  }  for(int  i  =  0;  j  <  resolvedCols;  ++i)  {  point[pj]  =  cost;  }  [CE]  cannot  find  symbol  resolvedCols  [FE]                      AssertionFailedError      [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]          for(int    i    =    0;    j    <    solvedCols;    ++i)    {    point[pj]    =    cost;    }    for(int  i  =  0;  j  <  solvedCols;  ++i)  {  point[pj]  =  cost;  }  for(int  i  =  0;  j  <  solvedCols;  ++i)  {  point[pj]  =  cost;  }  for(int  i  =  0;  j  <  resolvedCols;  ++i)  {  point[pj]  =  cost;  }  [BUGGY]      point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	                for(int        i        =        0;        j        <        solvedCols;        ++i)        {        point[pj]        =        cost;        }        for(int    i    =    0;    j    <    solvedCols;    ++i)    {    point[pj]    =    cost;    }    for(int  i  =  0;  j  <  solvedCols;  ++i)  {  point[pj]  =  cost;  }  for(int  i  =  0;  j  <  resolvedCols;  ++i)  {  point[pj]  =  cost;  }	  timeout    	non-compiled	[CE]  cannot  find  symbol  resolvedCols	20	None	add
138	[BUG]  [BUGGY]          for(int    i    =    0;    j    <    solvedCols;    ++i)    {    point[pj]    =    cost;    }    for(int  i  =  0;  j  <  solvedCols;  ++i)  {  point[pj]  =  cost;  }  for(int  j  =  0;  j  <  solvedCols;  ++i)  {  point[pj]  =  cost;  }  for(int  i  =  0;  j  <  solvedCols;  ++i)  {  point[pj]  =  cost;  }  [CE]  variable  j  is  already  defined  in  method  doOptimize()  [FE]                        AssertionFailedError      [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]          for(int    i    =    0;    j    <    solvedCols;    ++i)    {    point[pj]    =    cost;    }    for(int  i  =  0;  j  <  solvedCols;  ++i)  {  point[pj]  =  cost;  }  for(int  j  =  0;  j  <  solvedCols;  ++i)  {  point[pj]  =  cost;  }  for(int  i  =  0;  j  <  solvedCols;  ++i)  {  point[pj]  =  cost;  }  [BUGGY]      point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	                for(int        i        =        0;        j        <        solvedCols;        ++i)        {        point[pj]        =        cost;        }        for(int    i    =    0;    j    <    solvedCols;    ++i)    {    point[pj]    =    cost;    }    for(int  j  =  0;  j  <  solvedCols;  ++i)  {  point[pj]  =  cost;  }  for(int  i  =  0;  j  <  solvedCols;  ++i)  {  point[pj]  =  cost;  }	  timeout    	non-compiled	[CE]  variable  j  is  already  defined  in  method  doOptimize()	20	None	add
139	[BUG]  [BUGGY]  for(int  i  =  0;  j  <  resolvedCols;  ++i)  {  point[pj]  =  cost;  }  [CE]  cannot  find  symbol  resolvedCols  [FE]                      AssertionFailedError      [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  for(int  i  =  0;  j  <  resolvedCols;  ++i)  {  point[pj]  =  cost;  }  [BUGGY]      point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	for(int  i  =  0;  j  <  resolvedCols;  ++i)  {  point[pj]  =  cost;  }	          for(int    i    =    0;    j    <    solvedCols;    ++i)    {    point[pj]    =    cost;    }    for(int    i    =    0;    j    <    resolvedCols;    ++i)    {    point[pj]    =    cost;    }    	non-compiled	[CE]  cannot  find  symbol  resolvedCols	24	None	replace
140	[BUG]  [BUGGY]  point[pj]  =  Cost;  [CE]  cannot  find  symbol  Cost  [FE]                AssertionFailedError      [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  point[pj]  =  Cost;  [BUGGY]      }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	point[pj]  =  Cost;	  point[pj]    =    cost;    point[pj]    =    Cost;    	non-compiled	[CE]  cannot  find  symbol  Cost	43	None	replace
141	[BUG]  [BUGGY]  point[j]  =  Cost;  [CE]  cannot  find  symbol  Cost  [FE]                  AssertionFailedError      [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  point[j]  =  Cost;  [BUGGY]      }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	point[j]  =  Cost;	  point[pj]    =    cost;    point[pj]    =    Cost;    	non-compiled	[CE]  cannot  find  symbol  Cost	43	None	replace
142	[BUG]  [BUGGY]  int  pj  =  permutation[j]  -  2;  [CE]  variable  pj  is  already  defined  in  method  doOptimize()  [FE]                AssertionFailedError      [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  int  pj  =  permutation[j]  -  2;  [BUGGY]      point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	int  pj  =  permutation[j]  -  2;	  int    pj    =    permutation[j]    -    1;    	non-compiled	[CE]  variable  pj  is  already  defined  in  method  doOptimize()	28	None	replace
143	[BUG]  [BUGGY]  int  pj  =  permutation[j]  /  1;  [CE]  variable  pj  is  already  defined  in  method  doOptimize()  [FE]                  AssertionFailedError      [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  int  pj  =  permutation[j]  /  1;  [BUGGY]      point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	int  pj  =  permutation[j]  /  1;	  int    pj    =    permutation[j]    -    1;    	non-compiled	[CE]  variable  pj  is  already  defined  in  method  doOptimize()	28	None	replace
144	[BUG]  [BUGGY]  int  pj  =  permutation[j]  -  1  +  1;  [CE]  variable  pj  is  already  defined  in  method  doOptimize()  [FE]                    AssertionFailedError      [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  int  pj  =  permutation[j]  -  1  +  1;  [BUGGY]      point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	int  pj  =  permutation[j]  -  1  +  1;	  int    pj    =    permutation[j]    -    1;    	non-compiled	[CE]  variable  pj  is  already  defined  in  method  doOptimize()	28	None	replace
145	[BUG]  [BUGGY]  tmpVec  =  Math.sqrt(previousCost,  preRed,  pj);  [CE]  method  sqrt  in  class  Math  cannot  be  applied  to  given  types;  [FE]                  AssertionFailedError      [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  tmpVec  =  Math.sqrt(previousCost,  preRed,  pj);  [BUGGY]      point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	tmpVec  =  Math.sqrt(previousCost,  preRed,  pj);	  tmpVec    =    Math.sqrt(previousCost,    preRed);    	non-compiled	[CE]  method  sqrt  in  class  Math  cannot  be  applied  to  given  types;	73	None	replace
146	[BUG]  [BUGGY]  tmpVec  =  Math.sqrt(previousCost,  preRed,  cost);  [CE]  method  sqrt  in  class  Math  cannot  be  applied  to  given  types;  [FE]                    AssertionFailedError      [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  tmpVec  =  Math.sqrt(previousCost,  preRed,  cost);  [BUGGY]      point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	tmpVec  =  Math.sqrt(previousCost,  preRed,  cost);	  tmpVec    =    Math.sqrt(previousCost,    preRed);    	non-compiled	[CE]  method  sqrt  in  class  Math  cannot  be  applied  to  given  types;	73	None	replace
147	[BUG]  [BUGGY]  tmpVec  =  Math.sqrt(previousCost,  pj);  [CE]  method  sqrt  in  class  Math  cannot  be  applied  to  given  types;  [FE]                      AssertionFailedError      [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  tmpVec  =  Math.sqrt(previousCost,  pj);  [BUGGY]      point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	tmpVec  =  Math.sqrt(previousCost,  pj);	  tmpVec    =    Math.sqrt(previousCost,    preRed);    	non-compiled	[CE]  method  sqrt  in  class  Math  cannot  be  applied  to  given  types;	73	None	replace
148	[BUG]  [BUGGY]  point[pj]  =  cost;  Point[pj]  =  xNorm;  [CE]  cannot  find  symbol  Point  [FE]            AssertionFailedError      [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  point[pj]  =  cost;  Point[pj]  =  xNorm;  [BUGGY]      }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	point[pj]  =  cost;  Point[pj]  =  xNorm;	  point[pj]    =    xNorm;    Point[pj]    =    xNorm;    	non-compiled	[CE]  cannot  find  symbol  Point	32	None	replace
149	[BUG]  [BUGGY]  point[pj]  =  i;  Point[pj]  =  xNorm;  [CE]  cannot  find  symbol  i  [FE]              AssertionFailedError      [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  point[pj]  =  i;  Point[pj]  =  xNorm;  [BUGGY]      }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	point[pj]  =  i;  Point[pj]  =  xNorm;	  point[pj]    =    xNorm;    Point[pj]    =    xNorm;    	non-compiled	[CE]  cannot  find  symbol  i	32	None	replace
150	[BUG]  [BUGGY]  ((  VectorialPointValuePair)point[j]).evaluate(xNorm);  [CE]  inconvertible  types  [FE]        AssertionFailedError      [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  ((  VectorialPointValuePair)point[j]).evaluate(xNorm);  [BUGGY]      }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	((  VectorialPointValuePair)point[j]).evaluate(xNorm);	  point[pj]    =    xNorm;    ((    VectorialPointValuePair)point[pj]).evaluate(xNorm);    	non-compiled	[CE]  inconvertible  types	158	None	replace
151	[BUG]  [BUGGY]  ((  VectorialPointValuePair)point[j]).evaluate(tmp);  [CE]  cannot  find  symbol  tmp  [FE]          AssertionFailedError      [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  ((  VectorialPointValuePair)point[j]).evaluate(tmp);  [BUGGY]      }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	((  VectorialPointValuePair)point[j]).evaluate(tmp);	  point[pj]    =    xNorm;    ((    VectorialPointValuePair)point[pj]).evaluate(xNorm);    	non-compiled	[CE]  cannot  find  symbol  tmp	158	None	replace
152	[BUG]  [BUGGY]  ((  VectorialPointValuePair)point[j]).evaluate(xNorm,  cost);  [CE]  inconvertible  types  [FE]            AssertionFailedError      [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  ((  VectorialPointValuePair)point[j]).evaluate(xNorm,  cost);  [BUGGY]      }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	((  VectorialPointValuePair)point[j]).evaluate(xNorm,  cost);	  point[pj]    =    xNorm;    ((    VectorialPointValuePair)point[pj]).evaluate(xNorm);    	non-compiled	[CE]  inconvertible  types	158	None	replace
153	[BUG]  [BUGGY]  ((  VectorialPointValuePair)point[j]).evaluate(xNorm,  pj);  [CE]  inconvertible  types  [FE]              AssertionFailedError      [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  ((  VectorialPointValuePair)point[j]).evaluate(xNorm,  pj);  [BUGGY]      }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	((  VectorialPointValuePair)point[j]).evaluate(xNorm,  pj);	  point[pj]    =    xNorm;    ((    VectorialPointValuePair)point[pj]).evaluate(xNorm);    	non-compiled	[CE]  inconvertible  types	158	None	replace
154	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  solvedCols;  ++i)  {  point[pj]  =  oldX[i];  }  [CE]  variable  j  is  already  defined  in  method  doOptimize()  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  for(int  j  =  0;  j  <  solvedCols;  ++i)  {  point[pj]  =  oldX[i];  }  [BUGGY]      point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	for(int  j  =  0;  j  <  solvedCols;  ++i)  {  point[pj]  =  oldX[i];  }	          for(int    i    =    0;    j    <    solvedCols;    ++i)    {    point[pj]    =    oldX[i];    }    int    i    =    0;    j    <    solvedCols;    ++i)    {    point[pj]    =    oldX[i];    }    	non-compiled	[CE]  variable  j  is  already  defined  in  method  doOptimize()	47	None	replace
155	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  fixedCols;  ++i)  {  point[pj]  =  oldX[pj];  }  [CE]  cannot  find  symbol  fixedCols  [FE]    AssertionFailedError    [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  for(int  i  =  0;  i  <  fixedCols;  ++i)  {  point[pj]  =  oldX[pj];  }  [BUGGY]      point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	for(int  i  =  0;  i  <  fixedCols;  ++i)  {  point[pj]  =  oldX[pj];  }	  for(int    i    =    0;    i    <    solvedCols;    ++i)    {    point[pj]    =    oldX[pj];    }    	non-compiled	[CE]  cannot  find  symbol  fixedCols	62	None	replace
156	[BUG]  [BUGGY]  ((  VectorialPointValuePair)oldX).setIndex(pj);  [CE]  inconvertible  types  [FE]            AssertionFailedError      [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  ((  VectorialPointValuePair)oldX).setIndex(pj);  [BUGGY]      point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	((  VectorialPointValuePair)oldX).setIndex(pj);	  ((    VectorialPointValuePair)pj).setIndex(oldX);    	non-compiled	[CE]  inconvertible  types	126	None	replace
157	[BUG]  [BUGGY]  ((  VectorialPointValuePair)pj).setIndex(point,  oldX);  [CE]  inconvertible  types  [FE]              AssertionFailedError      [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  ((  VectorialPointValuePair)pj).setIndex(point,  oldX);  [BUGGY]      point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	((  VectorialPointValuePair)pj).setIndex(point,  oldX);	  ((    VectorialPointValuePair)pj).setIndex(oldX);    	non-compiled	[CE]  inconvertible  types	126	None	replace
158	[BUG]  [BUGGY]  ((  VectorialPointValuePair)pj).setIndex(oldX,  pj);  [CE]  inconvertible  types  [FE]                AssertionFailedError      [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  ((  VectorialPointValuePair)pj).setIndex(oldX,  pj);  [BUGGY]      point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	((  VectorialPointValuePair)pj).setIndex(oldX,  pj);	  ((    VectorialPointValuePair)pj).setIndex(oldX);    	non-compiled	[CE]  inconvertible  types	126	None	replace
159	[BUG]  [BUGGY]  ((  VectorialPointValuePair)pj).setIndex(point);  [CE]  inconvertible  types  [FE]                  AssertionFailedError      [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  ((  VectorialPointValuePair)pj).setIndex(point);  [BUGGY]      point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	((  VectorialPointValuePair)pj).setIndex(point);	  ((    VectorialPointValuePair)pj).setIndex(oldX);    	non-compiled	[CE]  inconvertible  types	126	None	replace
160	[BUG]  [BUGGY]  tmpVec  =  Math.sqrt(previousCost,  xNorm,  cost);  [CE]  method  sqrt  in  class  Math  cannot  be  applied  to  given  types;  [FE]              AssertionFailedError      [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  tmpVec  =  Math.sqrt(previousCost,  xNorm,  cost);  [BUGGY]      point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	tmpVec  =  Math.sqrt(previousCost,  xNorm,  cost);	  tmpVec    =    Math.sqrt(previousCost,    cost);    	non-compiled	[CE]  method  sqrt  in  class  Math  cannot  be  applied  to  given  types;	71	None	replace
161	[BUG]  [BUGGY]  tmpVec  =  Math.sqrt(previousCost,  pj,  cost);  [CE]  method  sqrt  in  class  Math  cannot  be  applied  to  given  types;  [FE]                AssertionFailedError      [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  tmpVec  =  Math.sqrt(previousCost,  pj,  cost);  [BUGGY]      point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	tmpVec  =  Math.sqrt(previousCost,  pj,  cost);	  tmpVec    =    Math.sqrt(previousCost,    cost);    	non-compiled	[CE]  method  sqrt  in  class  Math  cannot  be  applied  to  given  types;	71	None	replace
162	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  point[0]  =  permutation[j];  [BUGGY]      }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	add	point[0]  =  permutation[j];	  point[pj]    =    permutation[j];    	compilable	  [FE]  AssertionFailedError  	2	12	replace
163	[BUG]  [BUGGY]  point[0]  =  permutation[j];  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  point[0]  =  permutation[j];  [BUGGY]      }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	point[0]  =  permutation[j];	  point[pj]    =    permutation[j];    	compilable	  [FE]  AssertionFailedError  	2	12	replace
164	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  resolvedCols;  ++i)  {  point[pj]  =  cost;  }  [CE]  cannot  find  symbol  resolvedCols  [FE]        AssertionFailedError      [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  for(int  i  =  0;  i  <  resolvedCols;  ++i)  {  point[pj]  =  cost;  }  [BUGGY]      point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	for(int  i  =  0;  i  <  resolvedCols;  ++i)  {  point[pj]  =  cost;  }	          for(int    i    =    0;    i    <    solvedCols;    ++i)    {    point[pj]    =    cost;    }    for(int    i    =    0;    i    <    resolvedCols;    ++i)    {    point[pj]    =    cost;    }    	non-compiled	[CE]  cannot  find  symbol  resolvedCols	165	None	replace
165	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  point[pj]  =  0;  point[pj]  =  0;  [BUGGY]      }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	add	point[pj]    =    0;    point[pj]  =  0;	  	compilable	  [FE]  AssertionFailedError  	5	2	add
166	[BUG]  [BUGGY]  point[pj]  =  0;  point[pj]  =  0;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  point[pj]  =  0;  point[pj]  =  0;  [BUGGY]      }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	point[pj]    =    0;    point[pj]  =  0;	  	compilable	  [FE]  AssertionFailedError  	5	2	add
167	[BUG]  [BUGGY]  point[pj]  =  0;  points[pj]  =  0;  [CE]  cannot  find  symbol  points  [FE]      AssertionFailedError    [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  point[pj]  =  0;  points[pj]  =  0;  [BUGGY]      }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	point[pj]    =    0;    points[pj]  =  0;	  	non-compiled	[CE]  cannot  find  symbol  points	5	None	add
168	[BUG]  [BUGGY]  point[pj]  =  0;  int  point[pj]  =  0;  [CE]  ']'  expected  [FE]        AssertionFailedError    [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  point[pj]  =  0;  int  point[pj]  =  0;  [BUGGY]      }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	point[pj]    =    0;    int  point[pj]  =  0;	  	non-compiled	[CE]  ']'  expected	5	None	add
169	[BUG]  [BUGGY]  point[pj]  =  0;  Point[pj]  =  0;  [CE]  cannot  find  symbol  Point  [FE]          AssertionFailedError    [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  point[pj]  =  0;  Point[pj]  =  0;  [BUGGY]      }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	point[pj]    =    0;    Point[pj]  =  0;	  	non-compiled	[CE]  cannot  find  symbol  Point	5	None	add
170	[BUG]  [BUGGY]  point[pj]  =  0;  pj]  =  0;  [CE]  not  a  statement  [FE]            AssertionFailedError    [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  point[pj]  =  0;  pj]  =  0;  [BUGGY]      }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	point[pj]    =    0;    pj]  =  0;	  	non-compiled	[CE]  not  a  statement	5	None	add
171	[BUG]  [BUGGY]  ((  VectorialPointValuePair)pj).remove(previousCost,  cost);  [CE]  inconvertible  types  [FE]                  AssertionFailedError      [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  ((  VectorialPointValuePair)pj).remove(previousCost,  cost);  [BUGGY]      point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	((  VectorialPointValuePair)pj).remove(previousCost,  cost);	  ((    VectorialPointValuePair)pj).remove(previousCost);    	non-compiled	[CE]  inconvertible  types	34	None	replace
172	[BUG]  [BUGGY]  ((  VectorialPointValuePair)pj).remove(cost);  [CE]  inconvertible  types  [FE]                    AssertionFailedError      [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  ((  VectorialPointValuePair)pj).remove(cost);  [BUGGY]      point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	((  VectorialPointValuePair)pj).remove(cost);	  ((    VectorialPointValuePair)pj).remove(previousCost);    	non-compiled	[CE]  inconvertible  types	34	None	replace
173	[BUG]  [BUGGY]  ((  VectorialPointValuePair)pj).remove(permutation[j]);  [CE]  inconvertible  types  [FE]                      AssertionFailedError      [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  ((  VectorialPointValuePair)pj).remove(permutation[j]);  [BUGGY]      point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	((  VectorialPointValuePair)pj).remove(permutation[j]);	  ((    VectorialPointValuePair)pj).remove(previousCost);    	non-compiled	[CE]  inconvertible  types	34	None	replace
174	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  point[j]  =  permutation[pj];  point[j]  =  permutation[pj];  [BUGGY]      }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	add	point[j]    =    permutation[pj];    point[j]  =  permutation[pj];	  	compilable	  [FE]  AssertionFailedError  	92	12	add
175	[BUG]  [BUGGY]  point[j]  =  permutation[pj];  point[j]  =  permutation[pj];  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  point[j]  =  permutation[pj];  point[j]  =  permutation[pj];  [BUGGY]      }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	point[j]    =    permutation[pj];    point[j]  =  permutation[pj];	  	compilable	  [FE]  AssertionFailedError  	92	12	add
176	[BUG]  [BUGGY]  point[j]  =  permutation[pj];  points[j]  =  permutation[pj];  [CE]  cannot  find  symbol  points  [FE]      AssertionFailedError    [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  point[j]  =  permutation[pj];  points[j]  =  permutation[pj];  [BUGGY]      }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	point[j]    =    permutation[pj];    points[j]  =  permutation[pj];	  	non-compiled	[CE]  cannot  find  symbol  points	92	None	add
177	[BUG]  [BUGGY]  point[j]  =  permutation[pj];  int  point[j]  =  permutation[pj];  [CE]  ']'  expected  [FE]        AssertionFailedError    [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  point[j]  =  permutation[pj];  int  point[j]  =  permutation[pj];  [BUGGY]      }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	point[j]    =    permutation[pj];    int  point[j]  =  permutation[pj];	  	non-compiled	[CE]  ']'  expected	92	None	add
178	[BUG]  [BUGGY]  point[j]  =  permutation[pj];  Point[j]  =  permutation[pj];  [CE]  cannot  find  symbol  Point  [FE]          AssertionFailedError    [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  point[j]  =  permutation[pj];  Point[j]  =  permutation[pj];  [BUGGY]      }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	point[j]    =    permutation[pj];    Point[j]  =  permutation[pj];	  	non-compiled	[CE]  cannot  find  symbol  Point	92	None	add
179	[BUG]  [BUGGY]  point[j]  =  permutation[pj];  Point[j]  =  point[pj];  [CE]  cannot  find  symbol  Point  [FE]            AssertionFailedError    [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  point[j]  =  permutation[pj];  Point[j]  =  point[pj];  [BUGGY]      }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	point[j]    =    permutation[pj];    Point[j]  =  point[pj];	  	non-compiled	[CE]  cannot  find  symbol  Point	92	None	add
180	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  resolvedCols;  ++j)  {  point[pj]  =  permutation[j];  }  [CE]  variable  j  is  already  defined  in  method  doOptimize()  [FE]                      AssertionFailedError      [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  for(int  j  =  0;  j  <  resolvedCols;  ++j)  {  point[pj]  =  permutation[j];  }  [BUGGY]      point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	for(int  j  =  0;  j  <  resolvedCols;  ++j)  {  point[pj]  =  permutation[j];  }	  for(int    j    =    0;    j    <    solvedCols;    ++j)    {    point[pj]    =    cost;    }    	non-compiled	[CE]  variable  j  is  already  defined  in  method  doOptimize()	85	None	replace
181	[BUG]  [BUGGY]  int  point[j]  =  oldX[pj];  [CE]  ']'  expected  [FE]            AssertionFailedError      [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  int  point[j]  =  oldX[pj];  [BUGGY]      }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	int  point[j]  =  oldX[pj];	  point[j]    =    oldX[pj];    int    point[j]    =    oldX[pj];    	non-compiled	[CE]  ']'  expected	52	None	replace
182	[BUG]  [BUGGY]  int  point[j]  =  permutation[j];  [CE]  ']'  expected  [FE]              AssertionFailedError      [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  int  point[j]  =  permutation[j];  [BUGGY]      }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	int  point[j]  =  permutation[j];	  point[j]    =    oldX[pj];    int    point[j]    =    oldX[pj];    	non-compiled	[CE]  ']'  expected	52	None	replace
183	[BUG]  [BUGGY]  int  point[j]  =  oldRes[pj];  [CE]  ']'  expected  [FE]                AssertionFailedError      [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  int  point[j]  =  oldRes[pj];  [BUGGY]      }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	int  point[j]  =  oldRes[pj];	  point[j]    =    oldX[pj];    int    point[j]    =    oldX[pj];    	non-compiled	[CE]  ']'  expected	52	None	replace
184	[BUG]  [BUGGY]  int  pj  =  permutation[j  -  1]  +  cost;  [CE]  variable  pj  is  already  defined  in  method  doOptimize()  [FE]            AssertionFailedError      [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  int  pj  =  permutation[j  -  1]  +  cost;  [BUGGY]      point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	int  pj  =  permutation[j  -  1]  +  cost;	  int    pj    =    permutation[j    -    1];    	non-compiled	[CE]  variable  pj  is  already  defined  in  method  doOptimize()	155	None	replace
185	[BUG]  [BUGGY]  int  pj  =  cost[j  -  1];  [CE]  variable  pj  is  already  defined  in  method  doOptimize()  [FE]              AssertionFailedError      [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  int  pj  =  cost[j  -  1];  [BUGGY]      point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	int  pj  =  cost[j  -  1];	  int    pj    =    permutation[j    -    1];    	non-compiled	[CE]  variable  pj  is  already  defined  in  method  doOptimize()	155	None	replace
186	[BUG]  [BUGGY]  int  pj  =  permutation[j  -  2];  [CE]  variable  pj  is  already  defined  in  method  doOptimize()  [FE]                AssertionFailedError      [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  int  pj  =  permutation[j  -  2];  [BUGGY]      point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	int  pj  =  permutation[j  -  2];	  int    pj    =    permutation[j    -    1];    	non-compiled	[CE]  variable  pj  is  already  defined  in  method  doOptimize()	155	None	replace
187	[BUG]  [BUGGY]  ((  VectorialPointValuePair)point[j]).sqrt(xNorm);  [CE]  inconvertible  types  [FE]          AssertionFailedError      [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  ((  VectorialPointValuePair)point[j]).sqrt(xNorm);  [BUGGY]      }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	((  VectorialPointValuePair)point[j]).sqrt(xNorm);	  point[j]    =    oldX[pj];    ((    VectorialPointValuePair)point[j]).sqrt(value);    	non-compiled	[CE]  inconvertible  types	115	None	replace
188	[BUG]  [BUGGY]  ((  VectorialPointValuePair)point[j]).sqrt(pj);  [CE]  inconvertible  types  [FE]            AssertionFailedError      [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  ((  VectorialPointValuePair)point[j]).sqrt(pj);  [BUGGY]      }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	((  VectorialPointValuePair)point[j]).sqrt(pj);	  point[j]    =    oldX[pj];    ((    VectorialPointValuePair)point[j]).sqrt(value);    	non-compiled	[CE]  inconvertible  types	115	None	replace
189	[BUG]  [BUGGY]  ((  VectorialPointValuePair)point[j]).sqrt(value);  [CE]  cannot  find  symbol  value  [FE]              AssertionFailedError      [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  ((  VectorialPointValuePair)point[j]).sqrt(value);  [BUGGY]      }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	((  VectorialPointValuePair)point[j]).sqrt(value);	  point[j]    =    oldX[pj];    ((    VectorialPointValuePair)point[j]).sqrt(value);    	non-compiled	[CE]  cannot  find  symbol  value	115	None	replace
190	[BUG]  [BUGGY]  ((  VectorialPointValuePair)point[j]).sqrt(cost);  [CE]  inconvertible  types  [FE]                AssertionFailedError      [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  ((  VectorialPointValuePair)point[j]).sqrt(cost);  [BUGGY]      }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	((  VectorialPointValuePair)point[j]).sqrt(cost);	  point[j]    =    oldX[pj];    ((    VectorialPointValuePair)point[j]).sqrt(value);    	non-compiled	[CE]  inconvertible  types	115	None	replace
191	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  solvedCols;  ++i)  {  point[pj]  =  permutation[j];  }  [CE]  variable  j  is  already  defined  in  method  doOptimize()  [FE]                AssertionFailedError      [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  for(int  j  =  0;  j  <  solvedCols;  ++i)  {  point[pj]  =  permutation[j];  }  [BUGGY]      point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	for(int  j  =  0;  j  <  solvedCols;  ++i)  {  point[pj]  =  permutation[j];  }	          for(int    i    =    0;    j    <    solvedCols;    ++i)    {    point[pj]    =    cost;    }    if(i    =    0;    j    <    solvedCols;    ++i)    {    point[pj]    =    cost;    }    	non-compiled	[CE]  variable  j  is  already  defined  in  method  doOptimize()	125	None	replace
192	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  resolvedCols;  ++j)  {  point[pj]  =  oldX[pj];  }  [CE]  variable  j  is  already  defined  in  method  doOptimize()  [FE]                AssertionFailedError      [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  for(int  j  =  0;  j  <  resolvedCols;  ++j)  {  point[pj]  =  oldX[pj];  }  [BUGGY]      point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	for(int  j  =  0;  j  <  resolvedCols;  ++j)  {  point[pj]  =  oldX[pj];  }	  for(int    j    =    0;    j    <    solvedCols;    ++j)    {    point[pj]    =    oldX[pj];    }    	non-compiled	[CE]  variable  j  is  already  defined  in  method  doOptimize()	161	None	replace
193	[BUG]  [BUGGY]  point[pj]  =  cost[permutation[j];  [CE]  ']'  expected  [FE]              AssertionFailedError      [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  point[pj]  =  cost[permutation[j];  [BUGGY]      }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	point[pj]  =  cost[permutation[j];	  point[pj]    =    permutation[cost];    	non-compiled	[CE]  ']'  expected	3	None	replace
194	[BUG]  [BUGGY]  point[j]  =  permutation[cost];  [CE]  possible  loss  of  precision  [FE]                AssertionFailedError      [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  point[j]  =  permutation[cost];  [BUGGY]      }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	point[j]  =  permutation[cost];	  point[pj]    =    permutation[cost];    	non-compiled	[CE]  possible  loss  of  precision	3	None	replace
195	[BUG]  [BUGGY]  point[pj]  =  xNorm[cost];  [CE]  possible  loss  of  precision  [FE]                  AssertionFailedError      [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  point[pj]  =  xNorm[cost];  [BUGGY]      }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	point[pj]  =  xNorm[cost];	  point[pj]    =    permutation[cost];    	non-compiled	[CE]  possible  loss  of  precision	3	None	replace
196	[BUG]  [BUGGY]  ((  VectorialPointValuePair)previous).remove(pj,  permutation[j]);  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  ((  VectorialPointValuePair)previous).remove(pj,  permutation[j]);  [BUGGY]      point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	((  VectorialPointValuePair)previous).remove(pj,  permutation[j]);	  ((    VectorialPointValuePair)previous).remove(pj,    cost);    	non-compiled	[CE]  cannot  find  symbol	37	None	replace
197	[BUG]  [BUGGY]  ((  VectorialPointValuePair)pj).remove(permutation,  cost);  [CE]  inconvertible  types  [FE]                          AssertionFailedError      [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  ((  VectorialPointValuePair)pj).remove(permutation,  cost);  [BUGGY]      point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	((  VectorialPointValuePair)pj).remove(permutation,  cost);	  ((    VectorialPointValuePair)previous).remove(pj,    cost);    	non-compiled	[CE]  inconvertible  types	37	None	replace
198	[BUG]  [BUGGY]  int  point[pj]  =  cost;  [CE]  ']'  expected  [FE]            AssertionFailedError      [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  int  point[pj]  =  cost;  [BUGGY]      }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	int  point[pj]  =  cost;	  point[pj]    =    permutation[pj];    int    point[pj]    =    permutation[pj];    	non-compiled	[CE]  ']'  expected	17	None	replace
199	[BUG]  [BUGGY]  int  point[pj]  =  permutation[j];  [CE]  ']'  expected  [FE]              AssertionFailedError      [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  int  point[pj]  =  permutation[j];  [BUGGY]      }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	int  point[pj]  =  permutation[j];	  point[pj]    =    permutation[pj];    int    point[pj]    =    permutation[pj];    	non-compiled	[CE]  ']'  expected	17	None	replace
200	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                AssertionFailedError      [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  point[0]  =  permutation[0];  [BUGGY]      }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	add	point[0]  =  permutation[0];	  point[pj]    =    permutation[pj];    int    point[pj]    =    permutation[pj];    	compilable	  [FE]  AssertionFailedError  	17	12	replace
201	[BUG]  [BUGGY]  point[0]  =  permutation[0];  [FE]  AssertionFailedError  [FE]                AssertionFailedError      [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  point[0]  =  permutation[0];  [BUGGY]      }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	point[0]  =  permutation[0];	  point[pj]    =    permutation[pj];    int    point[pj]    =    permutation[pj];    	compilable	  [FE]  AssertionFailedError  	17	12	replace
202	[BUG]  [BUGGY]  timeout  [FE]                    AssertionFailedError      [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  for(int  i  =  0;  j  <  solvedCols;  ++i)  {  point[pj]  =  oldX[pj];  }  for(int  i  =  0;  j  <  solvedCols;  ++i)  {  point[pj]  =  oldX[pj];  }  [BUGGY]      point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	add	for(int    i    =    0;    j    <    solvedCols;    ++i)    {    point[pj]    =    oldX[pj];    }    for(int  i  =  0;  j  <  solvedCols;  ++i)  {  point[pj]  =  oldX[pj];  }	  timeout    	compilable	timeout	83	1	add
203	[BUG]  [BUGGY]  for(int  i  =  0;  j  <  solvedCols;  ++i)  {  point[pj]  =  oldX[pj];  }  for(int  i  =  0;  j  <  solvedCols;  ++i)  {  point[pj]  =  oldX[pj];  }  timeout  [FE]                    AssertionFailedError      [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  for(int  i  =  0;  j  <  solvedCols;  ++i)  {  point[pj]  =  oldX[pj];  }  for(int  i  =  0;  j  <  solvedCols;  ++i)  {  point[pj]  =  oldX[pj];  }  [BUGGY]      point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	for(int    i    =    0;    j    <    solvedCols;    ++i)    {    point[pj]    =    oldX[pj];    }    for(int  i  =  0;  j  <  solvedCols;  ++i)  {  point[pj]  =  oldX[pj];  }	  timeout    	compilable	timeout	83	1	add
204	[BUG]  [BUGGY]  for(int  i  =  0;  j  <  solvedCols;  ++i)  {  point[pj]  =  oldX[pj];  }  For(int  i  =  0;  j  <  solvedCols;  ++i)  {  point[pj]  =  oldX[pj];  }  [CE]  '.class'  expected  [FE]                      AssertionFailedError      [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  for(int  i  =  0;  j  <  solvedCols;  ++i)  {  point[pj]  =  oldX[pj];  }  For(int  i  =  0;  j  <  solvedCols;  ++i)  {  point[pj]  =  oldX[pj];  }  [BUGGY]      point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	for(int    i    =    0;    j    <    solvedCols;    ++i)    {    point[pj]    =    oldX[pj];    }    For(int  i  =  0;  j  <  solvedCols;  ++i)  {  point[pj]  =  oldX[pj];  }	  timeout    	non-compiled	[CE]  '.class'  expected	83	None	add
205	[BUG]  [BUGGY]  for(int  i  =  0;  j  <  solvedCols;  ++i)  {  point[pj]  =  oldX[pj];  }  for(int  i  =  0;  j  <  resolvedCols;  ++i)  {  point[pj]  =  oldX[pj];  }  [CE]  cannot  find  symbol  resolvedCols  [FE]                        AssertionFailedError      [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  for(int  i  =  0;  j  <  solvedCols;  ++i)  {  point[pj]  =  oldX[pj];  }  for(int  i  =  0;  j  <  resolvedCols;  ++i)  {  point[pj]  =  oldX[pj];  }  [BUGGY]      point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	for(int    i    =    0;    j    <    solvedCols;    ++i)    {    point[pj]    =    oldX[pj];    }    for(int  i  =  0;  j  <  resolvedCols;  ++i)  {  point[pj]  =  oldX[pj];  }	  timeout    	non-compiled	[CE]  cannot  find  symbol  resolvedCols	83	None	add
206	[BUG]  [BUGGY]  for(int  i  =  0;  j  <  solvedCols;  ++i)  {  point[pj]  =  oldX[pj];  }  for(int  i  =  0;  j  <  solvedCols;  ++i)  {  points[pj]  =  oldX[pj];  }  [CE]  cannot  find  symbol  points  [FE]                          AssertionFailedError      [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  for(int  i  =  0;  j  <  solvedCols;  ++i)  {  point[pj]  =  oldX[pj];  }  for(int  i  =  0;  j  <  solvedCols;  ++i)  {  points[pj]  =  oldX[pj];  }  [BUGGY]      point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	for(int    i    =    0;    j    <    solvedCols;    ++i)    {    point[pj]    =    oldX[pj];    }    for(int  i  =  0;  j  <  solvedCols;  ++i)  {  points[pj]  =  oldX[pj];  }	  timeout    	non-compiled	[CE]  cannot  find  symbol  points	83	None	add
207	[BUG]  [BUGGY]  for(int  i  =  0;  j  <  solvedCols;  ++i)  {  point[pj]  =  oldX[pj];  }  int  i  =  0;  j  <  solvedCols;  ++i)  {  point[pj]  =  oldX[pj];  }  [CE]  >  expected  [FE]                            AssertionFailedError      [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  for(int  i  =  0;  j  <  solvedCols;  ++i)  {  point[pj]  =  oldX[pj];  }  int  i  =  0;  j  <  solvedCols;  ++i)  {  point[pj]  =  oldX[pj];  }  [BUGGY]      point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	for(int    i    =    0;    j    <    solvedCols;    ++i)    {    point[pj]    =    oldX[pj];    }    int  i  =  0;  j  <  solvedCols;  ++i)  {  point[pj]  =  oldX[pj];  }	  timeout    	non-compiled	[CE]  >  expected	83	None	add
208	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  for(int  i  =  0;  i  <  solvedCols;  ++i)  {  point[pj]  =  permutation[j];  }  for(int  i  =  0;  i  <  solvedCols;  ++i)  {  point[pj]  =  permutation[j];  }  [BUGGY]      point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	add	for(int    i    =    0;    i    <    solvedCols;    ++i)    {    point[pj]    =    permutation[j];    }    for(int  i  =  0;  i  <  solvedCols;  ++i)  {  point[pj]  =  permutation[j];  }	  	compilable	  [FE]  AssertionFailedError  	63	2	add
209	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  solvedCols;  ++i)  {  point[pj]  =  permutation[j];  }  for(int  i  =  0;  i  <  solvedCols;  ++i)  {  point[pj]  =  permutation[j];  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  for(int  i  =  0;  i  <  solvedCols;  ++i)  {  point[pj]  =  permutation[j];  }  for(int  i  =  0;  i  <  solvedCols;  ++i)  {  point[pj]  =  permutation[j];  }  [BUGGY]      point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	for(int    i    =    0;    i    <    solvedCols;    ++i)    {    point[pj]    =    permutation[j];    }    for(int  i  =  0;  i  <  solvedCols;  ++i)  {  point[pj]  =  permutation[j];  }	  	compilable	  [FE]  AssertionFailedError  	63	2	add
210	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  solvedCols;  ++i)  {  point[pj]  =  permutation[j];  }  For(int  i  =  0;  i  <  solvedCols;  ++i)  {  point[pj]  =  permutation[j];  }  [CE]  '.class'  expected  [FE]      AssertionFailedError    [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  for(int  i  =  0;  i  <  solvedCols;  ++i)  {  point[pj]  =  permutation[j];  }  For(int  i  =  0;  i  <  solvedCols;  ++i)  {  point[pj]  =  permutation[j];  }  [BUGGY]      point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	for(int    i    =    0;    i    <    solvedCols;    ++i)    {    point[pj]    =    permutation[j];    }    For(int  i  =  0;  i  <  solvedCols;  ++i)  {  point[pj]  =  permutation[j];  }	  	non-compiled	[CE]  '.class'  expected	63	None	add
211	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  solvedCols;  ++i)  {  point[pj]  =  permutation[j];  }  int  i  =  0;  i  <  solvedCols;  ++i)  {  point[pj]  =  permutation[j];  }  [CE]  >  expected  [FE]        AssertionFailedError    [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  for(int  i  =  0;  i  <  solvedCols;  ++i)  {  point[pj]  =  permutation[j];  }  int  i  =  0;  i  <  solvedCols;  ++i)  {  point[pj]  =  permutation[j];  }  [BUGGY]      point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	for(int    i    =    0;    i    <    solvedCols;    ++i)    {    point[pj]    =    permutation[j];    }    int  i  =  0;  i  <  solvedCols;  ++i)  {  point[pj]  =  permutation[j];  }	  	non-compiled	[CE]  >  expected	63	None	add
212	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  solvedCols;  ++i)  {  point[pj]  =  permutation[j];  }  for(int  i  =  0;  i  <  solvedCols;  ++i)  {  points[pj]  =  permutation[j];  }  [CE]  cannot  find  symbol  points  [FE]          AssertionFailedError    [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  for(int  i  =  0;  i  <  solvedCols;  ++i)  {  point[pj]  =  permutation[j];  }  for(int  i  =  0;  i  <  solvedCols;  ++i)  {  points[pj]  =  permutation[j];  }  [BUGGY]      point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	for(int    i    =    0;    i    <    solvedCols;    ++i)    {    point[pj]    =    permutation[j];    }    for(int  i  =  0;  i  <  solvedCols;  ++i)  {  points[pj]  =  permutation[j];  }	  	non-compiled	[CE]  cannot  find  symbol  points	63	None	add
213	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  oldRes.length;  ++i)  {  int  oldX  =  oldX[i];  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  for(int  i  =  0;  i  <  oldRes.length;  ++i)  {  int  oldX  =  oldX[i];  [BUGGY]      point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	for(int  i  =  0;  i  <  oldRes.length;  ++i)  {  int  oldX  =  oldX[i];	  for(int    i    =    0;    i    <    oldRes;    ++i)    {    int    oldX    =    oldX[i];    	non-compiled	[CE]  illegal  start  of  expression	116	None	replace
214	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  oldVec;  ++i)  {  int  oldX  =  oldX[i];  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  for(int  i  =  0;  i  <  oldVec;  ++i)  {  int  oldX  =  oldX[i];  [BUGGY]      point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	for(int  i  =  0;  i  <  oldVec;  ++i)  {  int  oldX  =  oldX[i];	  for(int    i    =    0;    i    <    oldRes;    ++i)    {    int    oldX    =    oldX[i];    	non-compiled	[CE]  illegal  start  of  expression	116	None	replace
215	[BUG]  [BUGGY]  points[pj]  =  cost[pj];  [CE]  cannot  find  symbol  points  [FE]        AssertionFailedError      [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  points[pj]  =  cost[pj];  [BUGGY]      }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	points[pj]  =  cost[pj];	  point[pj]    =    permutation[pj];    points[pj]    =    point[pj];    	non-compiled	[CE]  cannot  find  symbol  points	145	None	replace
216	[BUG]  [BUGGY]  points[pj]  =  point[pj];  [CE]  cannot  find  symbol  points  [FE]          AssertionFailedError      [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  points[pj]  =  point[pj];  [BUGGY]      }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	points[pj]  =  point[pj];	  point[pj]    =    permutation[pj];    points[pj]    =    point[pj];    	non-compiled	[CE]  cannot  find  symbol  points	145	None	replace
217	[BUG]  [BUGGY]  points[pj]  =  permutation[j];  [CE]  cannot  find  symbol  points  [FE]            AssertionFailedError      [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  points[pj]  =  permutation[j];  [BUGGY]      }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	points[pj]  =  permutation[j];	  point[pj]    =    permutation[pj];    points[pj]    =    point[pj];    	non-compiled	[CE]  cannot  find  symbol  points	145	None	replace
218	[BUG]  [BUGGY]  point[j]  =  cost[j];  [CE]  array  required,  but  double  found  [FE]        AssertionFailedError      [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  point[j]  =  cost[j];  [BUGGY]      }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	point[j]  =  cost[j];	  point[j]    =    cost[pj];    	non-compiled	[CE]  array  required,  but  double  found	118	None	replace
219	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  solvedCols;  ++i)  {  point[j]  =  oldX[i];  }  [CE]  variable  j  is  already  defined  in  method  doOptimize()  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  for(int  j  =  0;  j  <  solvedCols;  ++i)  {  point[j]  =  oldX[i];  }  [BUGGY]      point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	for(int  j  =  0;  j  <  solvedCols;  ++i)  {  point[j]  =  oldX[i];  }	          for(int    i    =    0;    j    <    solvedCols;    ++i)    {    point[pj]    =    oldX[i];    }    For(int    i    =    0;    j    <    solvedCols;    ++i)    {    point[pj]    =    oldX[i];    }    	non-compiled	[CE]  variable  j  is  already  defined  in  method  doOptimize()	46	None	replace
220	[BUG]  [BUGGY]  point[pj]  =  cost?  permutation[j]  :  0;  [CE]  incompatible  types  [FE]        AssertionFailedError      [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  point[pj]  =  cost?  permutation[j]  :  0;  [BUGGY]      }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	point[pj]  =  cost?  permutation[j]  :  0;	  point[pj]    =    cost?    permutation[pj]    :    0;    	non-compiled	[CE]  incompatible  types	150	None	replace
221	[BUG]  [BUGGY]  point[pj]  =  permutation[pj]?  cost  :  0;  [CE]  incompatible  types  [FE]          AssertionFailedError      [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  point[pj]  =  permutation[pj]?  cost  :  0;  [BUGGY]      }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	point[pj]  =  permutation[pj]?  cost  :  0;	  point[pj]    =    cost?    permutation[pj]    :    0;    	non-compiled	[CE]  incompatible  types	150	None	replace
222	[BUG]  [BUGGY]  point[pj]  =  permutation[j]?  cost  :  0;  [CE]  incompatible  types  [FE]            AssertionFailedError      [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  point[pj]  =  permutation[j]?  cost  :  0;  [BUGGY]      }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	point[pj]  =  permutation[j]?  cost  :  0;	  point[pj]    =    cost?    permutation[pj]    :    0;    	non-compiled	[CE]  incompatible  types	150	None	replace
223	[BUG]  [BUGGY]  ((  VectorialPointValuePair)permutation).remove(pj,  previousCost);  [CE]  inconvertible  types  [FE]                    AssertionFailedError      [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  ((  VectorialPointValuePair)permutation).remove(pj,  previousCost);  [BUGGY]      point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	((  VectorialPointValuePair)permutation).remove(pj,  previousCost);	  ((    VectorialPointValuePair)previous).remove(pj,    permutation);    	non-compiled	[CE]  inconvertible  types	35	None	replace
224	[BUG]  [BUGGY]  ((  VectorialPointValuePair)permutation).remove(pj,  preRed);  [CE]  inconvertible  types  [FE]                      AssertionFailedError      [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  ((  VectorialPointValuePair)permutation).remove(pj,  preRed);  [BUGGY]      point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	((  VectorialPointValuePair)permutation).remove(pj,  preRed);	  ((    VectorialPointValuePair)previous).remove(pj,    permutation);    	non-compiled	[CE]  inconvertible  types	35	None	replace
225	[BUG]  [BUGGY]  ((  VectorialPointValuePair)previous).remove(pj,  xNorm);  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  ((  VectorialPointValuePair)previous).remove(pj,  xNorm);  [BUGGY]      point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	((  VectorialPointValuePair)previous).remove(pj,  xNorm);	  ((    VectorialPointValuePair)previous).remove(pj,    permutation);    	non-compiled	[CE]  cannot  find  symbol	35	None	replace
226	[BUG]  [BUGGY]  ((  VectorialPointValuePair)pj).remove(cost,  permutation);  [CE]  inconvertible  types  [FE]                      AssertionFailedError      [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  ((  VectorialPointValuePair)pj).remove(cost,  permutation);  [BUGGY]      point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	((  VectorialPointValuePair)pj).remove(cost,  permutation);	  ((    VectorialPointValuePair)pj).remove(permutation);    	non-compiled	[CE]  inconvertible  types	36	None	replace
227	[BUG]  [BUGGY]  timeout  [FE]                AssertionFailedError      [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  for(int  i  =  0;  j  <  solvedCols;  ++i)  {  point[pj]  =  permutation[j];  }  for(int  i  =  0;  j  <  solvedCols;  ++i)  {  point[pj]  =  permutation[j];  }  [BUGGY]      point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	add	for(int    i    =    0;    j    <    solvedCols;    ++i)    {    point[pj]    =    permutation[j];    }    for(int  i  =  0;  j  <  solvedCols;  ++i)  {  point[pj]  =  permutation[j];  }	  timeout    	compilable	timeout	80	1	add
228	[BUG]  [BUGGY]  for(int  i  =  0;  j  <  solvedCols;  ++i)  {  point[pj]  =  permutation[j];  }  for(int  i  =  0;  j  <  solvedCols;  ++i)  {  point[pj]  =  permutation[j];  }  timeout  [FE]                AssertionFailedError      [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  for(int  i  =  0;  j  <  solvedCols;  ++i)  {  point[pj]  =  permutation[j];  }  for(int  i  =  0;  j  <  solvedCols;  ++i)  {  point[pj]  =  permutation[j];  }  [BUGGY]      point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	for(int    i    =    0;    j    <    solvedCols;    ++i)    {    point[pj]    =    permutation[j];    }    for(int  i  =  0;  j  <  solvedCols;  ++i)  {  point[pj]  =  permutation[j];  }	  timeout    	compilable	timeout	80	1	add
229	[BUG]  [BUGGY]  for(int  i  =  0;  j  <  solvedCols;  ++i)  {  point[pj]  =  permutation[j];  }  For(int  i  =  0;  j  <  solvedCols;  ++i)  {  point[pj]  =  permutation[j];  }  [CE]  '.class'  expected  [FE]                  AssertionFailedError      [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  for(int  i  =  0;  j  <  solvedCols;  ++i)  {  point[pj]  =  permutation[j];  }  For(int  i  =  0;  j  <  solvedCols;  ++i)  {  point[pj]  =  permutation[j];  }  [BUGGY]      point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	for(int    i    =    0;    j    <    solvedCols;    ++i)    {    point[pj]    =    permutation[j];    }    For(int  i  =  0;  j  <  solvedCols;  ++i)  {  point[pj]  =  permutation[j];  }	  timeout    	non-compiled	[CE]  '.class'  expected	80	None	add
230	[BUG]  [BUGGY]  for(int  i  =  0;  j  <  solvedCols;  ++i)  {  point[pj]  =  permutation[j];  }  for(int  i  =  0;  j  <  solvedCols;  ++i)  {  points[pj]  =  permutation[j];  }  [CE]  cannot  find  symbol  points  [FE]                    AssertionFailedError      [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  for(int  i  =  0;  j  <  solvedCols;  ++i)  {  point[pj]  =  permutation[j];  }  for(int  i  =  0;  j  <  solvedCols;  ++i)  {  points[pj]  =  permutation[j];  }  [BUGGY]      point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	for(int    i    =    0;    j    <    solvedCols;    ++i)    {    point[pj]    =    permutation[j];    }    for(int  i  =  0;  j  <  solvedCols;  ++i)  {  points[pj]  =  permutation[j];  }	  timeout    	non-compiled	[CE]  cannot  find  symbol  points	80	None	add
231	[BUG]  [BUGGY]  for(int  i  =  0;  j  <  solvedCols;  ++i)  {  point[pj]  =  permutation[j];  }  for(int  i  =  0;  j  <  resolvedCols;  ++i)  {  point[pj]  =  permutation[j];  }  [CE]  cannot  find  symbol  resolvedCols  [FE]                      AssertionFailedError      [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  for(int  i  =  0;  j  <  solvedCols;  ++i)  {  point[pj]  =  permutation[j];  }  for(int  i  =  0;  j  <  resolvedCols;  ++i)  {  point[pj]  =  permutation[j];  }  [BUGGY]      point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	for(int    i    =    0;    j    <    solvedCols;    ++i)    {    point[pj]    =    permutation[j];    }    for(int  i  =  0;  j  <  resolvedCols;  ++i)  {  point[pj]  =  permutation[j];  }	  timeout    	non-compiled	[CE]  cannot  find  symbol  resolvedCols	80	None	add
232	[BUG]  [BUGGY]  for(int  i  =  0;  j  <  solvedCols;  ++i)  {  point[pj]  =  permutation[j];  }  int  i  =  0;  j  <  solvedCols;  ++i)  {  point[pj]  =  permutation[j];  }  [CE]  >  expected  [FE]                        AssertionFailedError      [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  for(int  i  =  0;  j  <  solvedCols;  ++i)  {  point[pj]  =  permutation[j];  }  int  i  =  0;  j  <  solvedCols;  ++i)  {  point[pj]  =  permutation[j];  }  [BUGGY]      point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	for(int    i    =    0;    j    <    solvedCols;    ++i)    {    point[pj]    =    permutation[j];    }    int  i  =  0;  j  <  solvedCols;  ++i)  {  point[pj]  =  permutation[j];  }	  timeout    	non-compiled	[CE]  >  expected	80	None	add
233	[BUG]  [BUGGY]  int  i  =  0;  j  <  solvedCols;  ++i)  {  point[pj]  =  permutation[j];  }  [CE]  >  expected  [FE]                AssertionFailedError      [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  int  i  =  0;  j  <  solvedCols;  ++i)  {  point[pj]  =  permutation[j];  }  [BUGGY]      point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	int  i  =  0;  j  <  solvedCols;  ++i)  {  point[pj]  =  permutation[j];  }	  int    i    =    0;    j    <    solvedCols;    ++i)    {    point[pj]    =    cost;    }    	non-compiled	[CE]  >  expected	124	None	replace
234	[BUG]  [BUGGY]  int  i  =  1;  j  <  solvedCols;  ++i)  {  point[pj]  =  cost;  }  [CE]  >  expected  [FE]                  AssertionFailedError      [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  int  i  =  1;  j  <  solvedCols;  ++i)  {  point[pj]  =  cost;  }  [BUGGY]      point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	int  i  =  1;  j  <  solvedCols;  ++i)  {  point[pj]  =  cost;  }	  int    i    =    0;    j    <    solvedCols;    ++i)    {    point[pj]    =    cost;    }    	non-compiled	[CE]  >  expected	124	None	replace
235	[BUG]  [BUGGY]  int  i  =  0;  j  <  resolvedCols;  ++i)  {  point[pj]  =  cost;  }  [CE]  >  expected  [FE]                    AssertionFailedError      [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  int  i  =  0;  j  <  resolvedCols;  ++i)  {  point[pj]  =  cost;  }  [BUGGY]      point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	int  i  =  0;  j  <  resolvedCols;  ++i)  {  point[pj]  =  cost;  }	  int    i    =    0;    j    <    solvedCols;    ++i)    {    point[pj]    =    cost;    }    	non-compiled	[CE]  >  expected	124	None	replace
236	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  point[pj]  =  cost  /  1;  [BUGGY]      }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	add	point[pj]  =  cost  /  1;	  point[pj]    =    cost    +    1;    	compilable	  [FE]  AssertionFailedError  	8	12	replace
237	[BUG]  [BUGGY]  point[pj]  =  cost  /  1;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  point[pj]  =  cost  /  1;  [BUGGY]      }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	point[pj]  =  cost  /  1;	  point[pj]    =    cost    +    1;    	compilable	  [FE]  AssertionFailedError  	8	12	replace
238	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  point[pj]  =  cost  +  2;  [BUGGY]      }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	add	point[pj]  =  cost  +  2;	  point[pj]    =    cost    +    1;    	compilable	  [FE]  AssertionFailedError  	8	12	replace
239	[BUG]  [BUGGY]  point[pj]  =  cost  +  2;  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  point[pj]  =  cost  +  2;  [BUGGY]      }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	point[pj]  =  cost  +  2;	  point[pj]    =    cost    +    1;    	compilable	  [FE]  AssertionFailedError  	8	12	replace
240	[BUG]  [BUGGY]  point[pj]  =  cost.RELATIVE;  [CE]  double  cannot  be  dereferenced  [FE]        AssertionFailedError      [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  point[pj]  =  cost.RELATIVE;  [BUGGY]      }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	point[pj]  =  cost.RELATIVE;	  point[pj]    =    CostRelativeTolerance.RELATIVE;    	non-compiled	[CE]  double  cannot  be  dereferenced	111	None	replace
241	[BUG]  [BUGGY]  point[pj]  =  CostRelativeTolerance.DEFAULT;  [CE]  cannot  find  symbol  CostRelativeTolerance  [FE]          AssertionFailedError      [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  point[pj]  =  CostRelativeTolerance.DEFAULT;  [BUGGY]      }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	point[pj]  =  CostRelativeTolerance.DEFAULT;	  point[pj]    =    CostRelativeTolerance.RELATIVE;    	non-compiled	[CE]  cannot  find  symbol  CostRelativeTolerance	111	None	replace
242	[BUG]  [BUGGY]  points[pj]  =  xNorm;  [CE]  cannot  find  symbol  points  [FE]          AssertionFailedError      [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  points[pj]  =  xNorm;  [BUGGY]      }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	points[pj]  =  xNorm;	  point[pj]    =    xNorm;    points[pj]    =    xNorm;    	non-compiled	[CE]  cannot  find  symbol  points	31	None	replace
243	[BUG]  [BUGGY]  points[pj]  =  cost;  [CE]  cannot  find  symbol  points  [FE]            AssertionFailedError      [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  points[pj]  =  cost;  [BUGGY]      }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	points[pj]  =  cost;	  point[pj]    =    xNorm;    points[pj]    =    xNorm;    	non-compiled	[CE]  cannot  find  symbol  points	31	None	replace
244	[BUG]  [BUGGY]  points[pj]  =  0;  [CE]  cannot  find  symbol  points  [FE]              AssertionFailedError      [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  points[pj]  =  0;  [BUGGY]      }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	points[pj]  =  0;	  point[pj]    =    xNorm;    points[pj]    =    xNorm;    	non-compiled	[CE]  cannot  find  symbol  points	31	None	replace
245	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  point[j]    =    oldX[pj];    point[j]  =  oldX[pj];  point[j]  =  oldX[pj];  point[j]  =  oldX[pj];  [BUGGY]      }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	add	point[j]        =        oldX[pj];        point[j]    =    oldX[pj];    point[j]  =  oldX[pj];  point[j]  =  oldX[pj];	  	compilable	  [FE]  AssertionFailedError  	49	11	add
246	[BUG]  [BUGGY]  point[j]    =    oldX[pj];    point[j]  =  oldX[pj];  point[j]  =  oldX[pj];  point[j]  =  oldX[pj];  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  point[j]    =    oldX[pj];    point[j]  =  oldX[pj];  point[j]  =  oldX[pj];  point[j]  =  oldX[pj];  [BUGGY]      }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	point[j]        =        oldX[pj];        point[j]    =    oldX[pj];    point[j]  =  oldX[pj];  point[j]  =  oldX[pj];	  	compilable	  [FE]  AssertionFailedError  	49	11	add
247	[BUG]  [BUGGY]  point[j]    =    oldX[pj];    point[j]  =  oldX[pj];  points[j]  =  oldX[pj];  point[j]  =  oldX[pj];  [CE]  cannot  find  symbol  points  [FE]      AssertionFailedError    [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  point[j]    =    oldX[pj];    point[j]  =  oldX[pj];  points[j]  =  oldX[pj];  point[j]  =  oldX[pj];  [BUGGY]      }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	point[j]        =        oldX[pj];        point[j]    =    oldX[pj];    points[j]  =  oldX[pj];  point[j]  =  oldX[pj];	  	non-compiled	[CE]  cannot  find  symbol  points	49	None	add
248	[BUG]  [BUGGY]  point[j]    =    oldX[pj];    point[j]  =  oldX[pj];  point[j]  =  oldY[pj];  point[j]  =  oldX[pj];  [CE]  cannot  find  symbol  oldY  [FE]        AssertionFailedError    [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  point[j]    =    oldX[pj];    point[j]  =  oldX[pj];  point[j]  =  oldY[pj];  point[j]  =  oldX[pj];  [BUGGY]      }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	point[j]        =        oldX[pj];        point[j]    =    oldX[pj];    point[j]  =  oldY[pj];  point[j]  =  oldX[pj];	  	non-compiled	[CE]  cannot  find  symbol  oldY	49	None	add
249	[BUG]  [BUGGY]  point[j]    =    oldX[pj];    point[j]  =  oldX[pj];  Point[j]  =  oldX[pj];  point[j]  =  oldX[pj];  [CE]  cannot  find  symbol  Point  [FE]          AssertionFailedError    [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  point[j]    =    oldX[pj];    point[j]  =  oldX[pj];  Point[j]  =  oldX[pj];  point[j]  =  oldX[pj];  [BUGGY]      }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	point[j]        =        oldX[pj];        point[j]    =    oldX[pj];    Point[j]  =  oldX[pj];  point[j]  =  oldX[pj];	  	non-compiled	[CE]  cannot  find  symbol  Point	49	None	add
250	[BUG]  [BUGGY]  points[pj]  =  permutation[pj];  [CE]  cannot  find  symbol  points  [FE]          AssertionFailedError      [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  points[pj]  =  permutation[pj];  [BUGGY]      }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	points[pj]  =  permutation[pj];	  point[pj]    =    permutation[pj];    points[pj]    =    permutation[pj];    	non-compiled	[CE]  cannot  find  symbol  points	16	None	replace
251	[BUG]  [BUGGY]  points[j]  =  permutation[j];  [CE]  cannot  find  symbol  points  [FE]            AssertionFailedError      [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  points[j]  =  permutation[j];  [BUGGY]      }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	points[j]  =  permutation[j];	  point[pj]    =    permutation[pj];    points[pj]    =    permutation[pj];    	non-compiled	[CE]  cannot  find  symbol  points	16	None	replace
252	[BUG]  [BUGGY]  ((  VectorialPointValuePair)previousCost).add(pj,  cost  -  1);  [CE]  inconvertible  types  [FE]                    AssertionFailedError      [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  ((  VectorialPointValuePair)previousCost).add(pj,  cost  -  1);  [BUGGY]      point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	((  VectorialPointValuePair)previousCost).add(pj,  cost  -  1);	  ((    VectorialPointValuePair)previousCost).add(pj    -    1);    	non-compiled	[CE]  inconvertible  types	167	None	replace
253	[BUG]  [BUGGY]  ((  VectorialPointValuePair)previousCost).add(point,  previousCost  -  1);  [CE]  inconvertible  types  [FE]                      AssertionFailedError      [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  ((  VectorialPointValuePair)previousCost).add(point,  previousCost  -  1);  [BUGGY]      point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	((  VectorialPointValuePair)previousCost).add(point,  previousCost  -  1);	  ((    VectorialPointValuePair)previousCost).add(pj    -    1);    	non-compiled	[CE]  inconvertible  types	167	None	replace
254	[BUG]  [BUGGY]  ((  VectorialPointValuePair)previousCost).add(pj  +  1);  [CE]  inconvertible  types  [FE]                        AssertionFailedError      [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  ((  VectorialPointValuePair)previousCost).add(pj  +  1);  [BUGGY]      point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	((  VectorialPointValuePair)previousCost).add(pj  +  1);	  ((    VectorialPointValuePair)previousCost).add(pj    -    1);    	non-compiled	[CE]  inconvertible  types	167	None	replace
255	[BUG]  [BUGGY]  ((  VectorialPointValuePair)previousCost).add(point,  pj  -  1);  [CE]  inconvertible  types  [FE]                          AssertionFailedError      [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  ((  VectorialPointValuePair)previousCost).add(point,  pj  -  1);  [BUGGY]      point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	((  VectorialPointValuePair)previousCost).add(point,  pj  -  1);	  ((    VectorialPointValuePair)previousCost).add(pj    -    1);    	non-compiled	[CE]  inconvertible  types	167	None	replace
256	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  oldX.length;  ++i)  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  for(int  i  =  0;  i  <  oldX.length;  ++i)  {  [BUGGY]      point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	for(int  i  =  0;  i  <  oldX.length;  ++i)  {	  for(int    i    =    0;    i    <    oldX;    ++i)    {    	non-compiled	[CE]  illegal  start  of  expression	174	None	replace
257	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  oldRes.length;  ++i)  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  for(int  i  =  0;  i  <  oldRes.length;  ++i)  {  [BUGGY]      point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	for(int  i  =  0;  i  <  oldRes.length;  ++i)  {	  for(int    i    =    0;    i    <    oldX;    ++i)    {    	non-compiled	[CE]  illegal  start  of  expression	174	None	replace
258	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  oldXNorm;  ++i)  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  for(int  i  =  0;  i  <  oldXNorm;  ++i)  {  [BUGGY]      point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	for(int  i  =  0;  i  <  oldXNorm;  ++i)  {	  for(int    i    =    0;    i    <    oldX;    ++i)    {    	non-compiled	[CE]  illegal  start  of  expression	174	None	replace
259	[BUG]  [BUGGY]  for(int  i  =  0;  j  <  solvedCols;  ++i)  {  point[pj]  =  oldX;  }  [CE]  incompatible  types  [FE]                        AssertionFailedError      [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  for(int  i  =  0;  j  <  solvedCols;  ++i)  {  point[pj]  =  oldX;  }  [BUGGY]      point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	for(int  i  =  0;  j  <  solvedCols;  ++i)  {  point[pj]  =  oldX;  }	          for(int    i    =    0;    j    <    solvedCols;    ++i)    {    point[pj]    =    cost;    }    for(int    i    =    0;    j    <    solvedCols;    ++i)    {    point[pj]    =    Cost;    }    	non-compiled	[CE]  incompatible  types	25	None	replace
260	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  point[pj]  =  permutation[j];  point[pj]  =  permutation[j];  [BUGGY]      }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	add	point[pj]    =    permutation[j];    point[pj]  =  permutation[j];	  	compilable	  [FE]  AssertionFailedError  	1	2	add
261	[BUG]  [BUGGY]  point[pj]  =  permutation[j];  point[pj]  =  permutation[j];  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  point[pj]  =  permutation[j];  point[pj]  =  permutation[j];  [BUGGY]      }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	point[pj]    =    permutation[j];    point[pj]  =  permutation[j];	  	compilable	  [FE]  AssertionFailedError  	1	2	add
262	[BUG]  [BUGGY]  point[pj]  =  permutation[j];  points[pj]  =  permutation[j];  [CE]  cannot  find  symbol  points  [FE]      AssertionFailedError    [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  point[pj]  =  permutation[j];  points[pj]  =  permutation[j];  [BUGGY]      }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	point[pj]    =    permutation[j];    points[pj]  =  permutation[j];	  	non-compiled	[CE]  cannot  find  symbol  points	1	None	add
263	[BUG]  [BUGGY]  point[pj]  =  permutation[j];  int  point[pj]  =  permutation[j];  [CE]  ']'  expected  [FE]        AssertionFailedError    [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  point[pj]  =  permutation[j];  int  point[pj]  =  permutation[j];  [BUGGY]      }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	point[pj]    =    permutation[j];    int  point[pj]  =  permutation[j];	  	non-compiled	[CE]  ']'  expected	1	None	add
264	[BUG]  [BUGGY]  point[pj]  =  permutation[j];  Point[pj]  =  permutation[j];  [CE]  cannot  find  symbol  Point  [FE]          AssertionFailedError    [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  point[pj]  =  permutation[j];  Point[pj]  =  permutation[j];  [BUGGY]      }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	point[pj]    =    permutation[j];    Point[pj]  =  permutation[j];	  	non-compiled	[CE]  cannot  find  symbol  Point	1	None	add
265	[BUG]  [BUGGY]  point[pj]  =  permutation[j];  Point[pj]  =  point[j];  [CE]  cannot  find  symbol  Point  [FE]            AssertionFailedError    [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  point[pj]  =  permutation[j];  Point[pj]  =  point[j];  [BUGGY]      }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	point[pj]    =    permutation[j];    Point[pj]  =  point[j];	  	non-compiled	[CE]  cannot  find  symbol  Point	1	None	add
266	[BUG]  [BUGGY]  ((  VectorialPointValuePair)previousCost).remove(pj,  cost  -  1);  [CE]  inconvertible  types  [FE]                    AssertionFailedError      [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  ((  VectorialPointValuePair)previousCost).remove(pj,  cost  -  1);  [BUGGY]      point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	((  VectorialPointValuePair)previousCost).remove(pj,  cost  -  1);	  ((    VectorialPointValuePair)previousCost).remove(pj    -    1);    	non-compiled	[CE]  inconvertible  types	106	None	replace
267	[BUG]  [BUGGY]  int  pj  =  oldRes[j];  [CE]  variable  pj  is  already  defined  in  method  doOptimize()  [FE]            AssertionFailedError      [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  int  pj  =  oldRes[j];  [BUGGY]      point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	int  pj  =  oldRes[j];	  int    pj    =    oldX[j];    	non-compiled	[CE]  variable  pj  is  already  defined  in  method  doOptimize()	26	None	replace
268	[BUG]  [BUGGY]  int  pj  =  oldX[j]  +  cost;  [CE]  variable  pj  is  already  defined  in  method  doOptimize()  [FE]              AssertionFailedError      [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  int  pj  =  oldX[j]  +  cost;  [BUGGY]      point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	int  pj  =  oldX[j]  +  cost;	  int    pj    =    oldX[j];    	non-compiled	[CE]  variable  pj  is  already  defined  in  method  doOptimize()	26	None	replace
269	[BUG]  [BUGGY]  int  point[pj]  =  cost  -  1;  [CE]  ']'  expected  [FE]            AssertionFailedError      [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  int  point[pj]  =  cost  -  1;  [BUGGY]      }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	int  point[pj]  =  cost  -  1;	  point[pj]    =    cost;    int    point[pj]    =    cost;    	non-compiled	[CE]  ']'  expected	41	None	replace
270	[BUG]  [BUGGY]  int  point[pj]  =  cost  +  1;  [CE]  ']'  expected  [FE]              AssertionFailedError      [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  int  point[pj]  =  cost  +  1;  [BUGGY]      }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	int  point[pj]  =  cost  +  1;	  point[pj]    =    cost;    int    point[pj]    =    cost;    	non-compiled	[CE]  ']'  expected	41	None	replace
271	[BUG]  [BUGGY]  int  point[pj]  =  0;  [CE]  ']'  expected  [FE]                AssertionFailedError      [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  int  point[pj]  =  0;  [BUGGY]      }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	int  point[pj]  =  0;	  point[pj]    =    cost;    int    point[pj]    =    cost;    	non-compiled	[CE]  ']'  expected	41	None	replace
272	[BUG]  [BUGGY]  tmpVec  =  permutation[j  +  3];  [CE]  incompatible  types  [FE]                AssertionFailedError      [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  tmpVec  =  permutation[j  +  3];  [BUGGY]      point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	tmpVec  =  permutation[j  +  3];	  tmpVec    =    permutation[j    +    1];    	non-compiled	[CE]  incompatible  types	166	None	replace
273	[BUG]  [BUGGY]  tmpVec  =  permutation[j  +  2];  [CE]  incompatible  types  [FE]                  AssertionFailedError      [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  tmpVec  =  permutation[j  +  2];  [BUGGY]      point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	tmpVec  =  permutation[j  +  2];	  tmpVec    =    permutation[j    +    1];    	non-compiled	[CE]  incompatible  types	166	None	replace
274	[BUG]  [BUGGY]  point[pj]  =  cost;  pj]  =  xNorm;  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  point[pj]  =  cost;  pj]  =  xNorm;  [BUGGY]      }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	point[pj]  =  cost;  pj]  =  xNorm;	  point[pj]    =    xNorm;    pj]    =    xNorm;    	non-compiled	[CE]  not  a  statement	33	None	replace
275	[BUG]  [BUGGY]  point[pj]  =  xNorm;  pj]  =  pj;  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  point[pj]  =  xNorm;  pj]  =  pj;  [BUGGY]      }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	point[pj]  =  xNorm;  pj]  =  pj;	  point[pj]    =    xNorm;    pj]    =    xNorm;    	non-compiled	[CE]  not  a  statement	33	None	replace
276	[BUG]  [BUGGY]  point[pj]  =  i;  pj]  =  xNorm;  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  point[pj]  =  i;  pj]  =  xNorm;  [BUGGY]      }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	point[pj]  =  i;  pj]  =  xNorm;	  point[pj]    =    xNorm;    pj]    =    xNorm;    	non-compiled	[CE]  not  a  statement	33	None	replace
277	[BUG]  [BUGGY]  pj]  =  xNorm;  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  pj]  =  xNorm;  [BUGGY]      }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	pj]  =  xNorm;	  point[pj]    =    xNorm;    pj]    =    xNorm;    	non-compiled	[CE]  not  a  statement	33	None	replace
278	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  point[j]  =  pj;  [BUGGY]      }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	add	point[j]  =  pj;	  point[j]    =    xNorm;    	compilable	  [FE]  AssertionFailedError  	97	11	replace
279	[BUG]  [BUGGY]  point[j]  =  pj;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  point[j]  =  pj;  [BUGGY]      }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	point[j]  =  pj;	  point[j]    =    xNorm;    	compilable	  [FE]  AssertionFailedError  	97	11	replace
280	[BUG]  [BUGGY]  point[j]  =  value;  [CE]  cannot  find  symbol  value  [FE]      AssertionFailedError    [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  point[j]  =  value;  [BUGGY]      }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	point[j]  =  value;	  point[j]    =    xNorm;    	non-compiled	[CE]  cannot  find  symbol  value	97	None	replace
281	[BUG]  [BUGGY]  point[j]  =  permutation;  [CE]  incompatible  types  [FE]        AssertionFailedError    [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  point[j]  =  permutation;  [BUGGY]      }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	point[j]  =  permutation;	  point[j]    =    xNorm;    	non-compiled	[CE]  incompatible  types	97	None	replace
282	[BUG]  [BUGGY]  tmpVec  =  Math.sqrt(pj,  cost);  [CE]  method  sqrt  in  class  Math  cannot  be  applied  to  given  types;  [FE]                AssertionFailedError      [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  tmpVec  =  Math.sqrt(pj,  cost);  [BUGGY]      point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	tmpVec  =  Math.sqrt(pj,  cost);	  tmpVec    =    Math.sqrt(pj);    	non-compiled	[CE]  method  sqrt  in  class  Math  cannot  be  applied  to  given  types;	72	None	replace
283	[BUG]  [BUGGY]  tmpVec  =  Math.sqrt(pj  +  1);  [CE]  incompatible  types  [FE]                  AssertionFailedError      [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  tmpVec  =  Math.sqrt(pj  +  1);  [BUGGY]      point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	tmpVec  =  Math.sqrt(pj  +  1);	  tmpVec    =    Math.sqrt(pj);    	non-compiled	[CE]  incompatible  types	72	None	replace
284	[BUG]  [BUGGY]  int  i  =  0;  i  <  solvedCols;  ++i)  {  point[pj]  =  permutation[j];  }  [CE]  >  expected  [FE]        AssertionFailedError      [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  int  i  =  0;  i  <  solvedCols;  ++i)  {  point[pj]  =  permutation[j];  }  [BUGGY]      point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	int  i  =  0;  i  <  solvedCols;  ++i)  {  point[pj]  =  permutation[j];  }	  int    i    =    0;    i    <    solvedCols;    ++i)    {    point[pj]    =    cost;    }    	non-compiled	[CE]  >  expected	112	None	replace
285	[BUG]  [BUGGY]  int  i  =  1;  ++i)  {  point[pj]  =  cost;  }  [CE]  ';'  expected  [FE]          AssertionFailedError      [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  int  i  =  1;  ++i)  {  point[pj]  =  cost;  }  [BUGGY]      point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	int  i  =  1;  ++i)  {  point[pj]  =  cost;  }	  int    i    =    0;    i    <    solvedCols;    ++i)    {    point[pj]    =    cost;    }    	non-compiled	[CE]  ';'  expected	112	None	replace
286	[BUG]  [BUGGY]  int  pj  =  oldRes[i];  [CE]  variable  pj  is  already  defined  in  method  doOptimize()  [FE]        ArrayIndexOutOfBoundsException      [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  int  pj  =  oldRes[i];  [BUGGY]      point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	int  pj  =  oldRes[i];	  int    pj    =    oldX[i];    	non-compiled	[CE]  variable  pj  is  already  defined  in  method  doOptimize()	140	None	replace
287	[BUG]  [BUGGY]  int  pj  =  permutation[i];  [CE]  variable  pj  is  already  defined  in  method  doOptimize()  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  int  pj  =  permutation[i];  [BUGGY]      point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	int  pj  =  permutation[i];	  int    pj    =    oldX[i];    	non-compiled	[CE]  variable  pj  is  already  defined  in  method  doOptimize()	140	None	replace
288	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  oldRes.length;  ++i)  {  int  point  =  oldX[i];  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  for(int  i  =  0;  i  <  oldRes.length;  ++i)  {  int  point  =  oldX[i];  [BUGGY]      point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	for(int  i  =  0;  i  <  oldRes.length;  ++i)  {  int  point  =  oldX[i];	  for(int    i    =    0;    i    <    oldX;    ++i)    {    int    point    =    oldX[i];    	non-compiled	[CE]  illegal  start  of  expression	175	None	replace
289	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  oldX.length;  ++i)  {  int  point  =  oldX[i];  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  for(int  i  =  0;  i  <  oldX.length;  ++i)  {  int  point  =  oldX[i];  [BUGGY]      point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	for(int  i  =  0;  i  <  oldX.length;  ++i)  {  int  point  =  oldX[i];	  for(int    i    =    0;    i    <    oldX;    ++i)    {    int    point    =    oldX[i];    	non-compiled	[CE]  illegal  start  of  expression	175	None	replace
290	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  oldY;  ++i)  {  int  point  =  oldX[i];  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  for(int  i  =  0;  i  <  oldY;  ++i)  {  int  point  =  oldX[i];  [BUGGY]      point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	for(int  i  =  0;  i  <  oldY;  ++i)  {  int  point  =  oldX[i];	  for(int    i    =    0;    i    <    oldX;    ++i)    {    int    point    =    oldX[i];    	non-compiled	[CE]  illegal  start  of  expression	175	None	replace
291	[BUG]  [BUGGY]  point[pj]  =  cost[j  -  1];  [CE]  array  required,  but  double  found  [FE]                AssertionFailedError      [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  point[pj]  =  cost[j  -  1];  [BUGGY]      }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	point[pj]  =  cost[j  -  1];	  point[pj]    =    cost[j];    	non-compiled	[CE]  array  required,  but  double  found	4	None	replace
292	[BUG]  [BUGGY]  point[j]  =  oldY[pj];  [CE]  cannot  find  symbol  oldY  [FE]    AssertionFailedError    [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  point[j]  =  oldY[pj];  [BUGGY]      }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	point[j]  =  oldY[pj];	  point[j]    =    oldX[pj];    point[j]    =    oldX[pj];    	non-compiled	[CE]  cannot  find  symbol  oldY	50	None	replace
293	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  point[j]  =  oldRes[pj];  [BUGGY]      }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	add	point[j]  =  oldRes[pj];	  point[j]    =    oldX[pj];    point[j]    =    oldX[pj];    	compilable	  [FE]  AssertionFailedError  	50	12	replace
294	[BUG]  [BUGGY]  point[j]  =  oldRes[pj];  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  point[j]  =  oldRes[pj];  [BUGGY]      }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	point[j]  =  oldRes[pj];	  point[j]    =    oldX[pj];    point[j]    =    oldX[pj];    	compilable	  [FE]  AssertionFailedError  	50	12	replace
295	[BUG]  [BUGGY]  tmpVec  =  permutation[j]  +  cost  *  solvedCols;  [CE]  incompatible  types  [FE]                AssertionFailedError      [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  tmpVec  =  permutation[j]  +  cost  *  solvedCols;  [BUGGY]      point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	tmpVec  =  permutation[j]  +  cost  *  solvedCols;	  tmpVec    =    permutation[j]    +    cost;    	non-compiled	[CE]  incompatible  types	135	None	replace
296	[BUG]  [BUGGY]  tmpVec  =  permutation[j]  *  cost;  [CE]  incompatible  types  [FE]                  AssertionFailedError      [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  tmpVec  =  permutation[j]  *  cost;  [BUGGY]      point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	tmpVec  =  permutation[j]  *  cost;	  tmpVec    =    permutation[j]    +    cost;    	non-compiled	[CE]  incompatible  types	135	None	replace
297	[BUG]  [BUGGY]  tmpVec  =  permutation[j]  -  cost;  [CE]  incompatible  types  [FE]                    AssertionFailedError      [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  tmpVec  =  permutation[j]  -  cost;  [BUGGY]      point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	tmpVec  =  permutation[j]  -  cost;	  tmpVec    =    permutation[j]    +    cost;    	non-compiled	[CE]  incompatible  types	135	None	replace
298	[BUG]  [BUGGY]  ((  VectorialPointValuePair)oldX).remove(pj,  cost);  [CE]  inconvertible  types  [FE]              AssertionFailedError      [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  ((  VectorialPointValuePair)oldX).remove(pj,  cost);  [BUGGY]      point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	((  VectorialPointValuePair)oldX).remove(pj,  cost);	  ((    VectorialPointValuePair)oldX).remove(pj);    	non-compiled	[CE]  inconvertible  types	113	None	replace
299	[BUG]  [BUGGY]  ((  VectorialPointValuePair)oldX).remove(pj  -  1);  [CE]  inconvertible  types  [FE]                AssertionFailedError      [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  ((  VectorialPointValuePair)oldX).remove(pj  -  1);  [BUGGY]      point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	((  VectorialPointValuePair)oldX).remove(pj  -  1);	  ((    VectorialPointValuePair)oldX).remove(pj);    	non-compiled	[CE]  inconvertible  types	113	None	replace
300	[BUG]  [BUGGY]  ((  VectorialPointValuePair)oldX).get(pj);  [CE]  inconvertible  types  [FE]                  AssertionFailedError      [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  ((  VectorialPointValuePair)oldX).get(pj);  [BUGGY]      point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	((  VectorialPointValuePair)oldX).get(pj);	  ((    VectorialPointValuePair)oldX).remove(pj);    	non-compiled	[CE]  inconvertible  types	113	None	replace
301	[BUG]  [BUGGY]  ((  VectorialPointValuePair)oldX).add(pj);  [CE]  inconvertible  types  [FE]                    AssertionFailedError      [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  ((  VectorialPointValuePair)oldX).add(pj);  [BUGGY]      point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	((  VectorialPointValuePair)oldX).add(pj);	  ((    VectorialPointValuePair)oldX).remove(pj);    	non-compiled	[CE]  inconvertible  types	113	None	replace
302	[BUG]  [BUGGY]  ((  VectorialPointValuePair)previousCost).get(pj);  [CE]  inconvertible  types  [FE]                    AssertionFailedError      [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  ((  VectorialPointValuePair)previousCost).get(pj);  [BUGGY]      point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	((  VectorialPointValuePair)previousCost).get(pj);	  ((    VectorialPointValuePair)previousCost).remove(point);    	non-compiled	[CE]  inconvertible  types	110	None	replace
303	[BUG]  [BUGGY]  ((  VectorialPointValuePair)previousCost).add(point,  cost);  [CE]  inconvertible  types  [FE]                      AssertionFailedError      [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  ((  VectorialPointValuePair)previousCost).add(point,  cost);  [BUGGY]      point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	((  VectorialPointValuePair)previousCost).add(point,  cost);	  ((    VectorialPointValuePair)previousCost).remove(point);    	non-compiled	[CE]  inconvertible  types	110	None	replace
304	[BUG]  [BUGGY]  ((  VectorialPointValuePair)previousCost).set(pj,  point);  [CE]  inconvertible  types  [FE]                        AssertionFailedError      [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  ((  VectorialPointValuePair)previousCost).set(pj,  point);  [BUGGY]      point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	((  VectorialPointValuePair)previousCost).set(pj,  point);	  ((    VectorialPointValuePair)previousCost).remove(point);    	non-compiled	[CE]  inconvertible  types	110	None	replace
305	[BUG]  [BUGGY]  ((  VectorialPointValuePair)previous).setIndex(point,  pj);  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  ((  VectorialPointValuePair)previous).setIndex(point,  pj);  [BUGGY]      point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	((  VectorialPointValuePair)previous).setIndex(point,  pj);	  ((    VectorialPointValuePair)previous).setIndex(point);    	non-compiled	[CE]  cannot  find  symbol	13	None	replace
306	[BUG]  [BUGGY]  ((  VectorialPointValuePair)previous).setIndex(point,  cost);  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  ((  VectorialPointValuePair)previous).setIndex(point,  cost);  [BUGGY]      point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	((  VectorialPointValuePair)previous).setIndex(point,  cost);	  ((    VectorialPointValuePair)previous).setIndex(point);    	non-compiled	[CE]  cannot  find  symbol	13	None	replace
307	[BUG]  [BUGGY]  point[pj]  =  CostRelativeTolerance.doubleValue();  [CE]  cannot  find  symbol  CostRelativeTolerance  [FE]            AssertionFailedError      [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  point[pj]  =  CostRelativeTolerance.doubleValue();  [BUGGY]      }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	point[pj]  =  CostRelativeTolerance.doubleValue();	  point[pj]    =    CostRelativeTolerance;    	non-compiled	[CE]  cannot  find  symbol  CostRelativeTolerance	78	None	replace
308	[BUG]  [BUGGY]  point[j]  =  CostRelativeTolerance;  [CE]  cannot  find  symbol  CostRelativeTolerance  [FE]              AssertionFailedError      [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  point[j]  =  CostRelativeTolerance;  [BUGGY]      }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	point[j]  =  CostRelativeTolerance;	  point[pj]    =    CostRelativeTolerance;    	non-compiled	[CE]  cannot  find  symbol  CostRelativeTolerance	78	None	replace
309	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  for(int  i  =  0;  i  <  pj;  ++i)  {  point[pj]  =  oldX[pj];  }  for(int  i  =  0;  i  <  pj;  ++i)  {  point[pj]  =  oldX[pj];  }  [BUGGY]      point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	add	for(int    i    =    0;    i    <    pj;    ++i)    {    point[pj]    =    oldX[pj];    }    for(int  i  =  0;  i  <  pj;  ++i)  {  point[pj]  =  oldX[pj];  }	  	compilable	  [FE]  AssertionFailedError  	177	2	add
310	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  pj;  ++i)  {  point[pj]  =  oldX[pj];  }  for(int  i  =  0;  i  <  pj;  ++i)  {  point[pj]  =  oldX[pj];  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  for(int  i  =  0;  i  <  pj;  ++i)  {  point[pj]  =  oldX[pj];  }  for(int  i  =  0;  i  <  pj;  ++i)  {  point[pj]  =  oldX[pj];  }  [BUGGY]      point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	for(int    i    =    0;    i    <    pj;    ++i)    {    point[pj]    =    oldX[pj];    }    for(int  i  =  0;  i  <  pj;  ++i)  {  point[pj]  =  oldX[pj];  }	  	compilable	  [FE]  AssertionFailedError  	177	2	add
311	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  pj;  ++i)  {  point[pj]  =  oldX[pj];  }  For(int  i  =  0;  i  <  pj;  ++i)  {  point[pj]  =  oldX[pj];  }  [CE]  '.class'  expected  [FE]      AssertionFailedError    [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  for(int  i  =  0;  i  <  pj;  ++i)  {  point[pj]  =  oldX[pj];  }  For(int  i  =  0;  i  <  pj;  ++i)  {  point[pj]  =  oldX[pj];  }  [BUGGY]      point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	for(int    i    =    0;    i    <    pj;    ++i)    {    point[pj]    =    oldX[pj];    }    For(int  i  =  0;  i  <  pj;  ++i)  {  point[pj]  =  oldX[pj];  }	  	non-compiled	[CE]  '.class'  expected	177	None	add
312	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  pj;  ++i)  {  point[pj]  =  oldX[pj];  }  int  i  =  0;  i  <  pj;  ++i)  {  point[pj]  =  oldX[pj];  }  [CE]  >  expected  [FE]        AssertionFailedError    [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  for(int  i  =  0;  i  <  pj;  ++i)  {  point[pj]  =  oldX[pj];  }  int  i  =  0;  i  <  pj;  ++i)  {  point[pj]  =  oldX[pj];  }  [BUGGY]      point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	for(int    i    =    0;    i    <    pj;    ++i)    {    point[pj]    =    oldX[pj];    }    int  i  =  0;  i  <  pj;  ++i)  {  point[pj]  =  oldX[pj];  }	  	non-compiled	[CE]  >  expected	177	None	add
313	[BUG]  [BUGGY]  Point[pj]  =  point[pj];  [CE]  cannot  find  symbol  Point  [FE]                AssertionFailedError      [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  Point[pj]  =  point[pj];  [BUGGY]      }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	Point[pj]  =  point[pj];	  point[pj]    =    permutation[pj];    Point[pj]    =    point[pj];    	non-compiled	[CE]  cannot  find  symbol  Point	19	None	replace
314	[BUG]  [BUGGY]  ((  VectorialPointValuePair)previous).setIndex(pj,  permutation);  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  ((  VectorialPointValuePair)previous).setIndex(pj,  permutation);  [BUGGY]      point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	((  VectorialPointValuePair)previous).setIndex(pj,  permutation);	  ((    VectorialPointValuePair)previous).setIndex(pj,    cost);    	non-compiled	[CE]  cannot  find  symbol	12	None	replace
315	[BUG]  [BUGGY]  ((  VectorialPointValuePair)previous).setIndex(pj,  permutation[j]);  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  ((  VectorialPointValuePair)previous).setIndex(pj,  permutation[j]);  [BUGGY]      point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	((  VectorialPointValuePair)previous).setIndex(pj,  permutation[j]);	  ((    VectorialPointValuePair)previous).setIndex(pj,    cost);    	non-compiled	[CE]  cannot  find  symbol	12	None	replace
316	[BUG]  [BUGGY]  tmpVec  =  oldX  +  1;  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]                AssertionFailedError      [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  tmpVec  =  oldX  +  1;  [BUGGY]      point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	tmpVec  =  oldX  +  1;	  tmpVec    =    cost    +    1;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	152	None	replace
317	[BUG]  [BUGGY]  tmpVec  =  pj  +  1;  [CE]  incompatible  types  [FE]                  AssertionFailedError      [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  tmpVec  =  pj  +  1;  [BUGGY]      point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	tmpVec  =  pj  +  1;	  tmpVec    =    cost    +    1;    	non-compiled	[CE]  incompatible  types	152	None	replace
318	[BUG]  [BUGGY]  tmpVec  =  previousCost  +  1;  [CE]  incompatible  types  [FE]                    AssertionFailedError      [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  tmpVec  =  previousCost  +  1;  [BUGGY]      point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	tmpVec  =  previousCost  +  1;	  tmpVec    =    cost    +    1;    	non-compiled	[CE]  incompatible  types	152	None	replace
319	[BUG]  [BUGGY]  ((  VectorialPointValuePair)point[0]).setIndex(pj);  [CE]  inconvertible  types  [FE]          AssertionFailedError      [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  ((  VectorialPointValuePair)point[0]).setIndex(pj);  [BUGGY]      }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	((  VectorialPointValuePair)point[0]).setIndex(pj);	  point[pj]    =    xNorm;    ((    VectorialPointValuePair)point[pj]).setIndex(pj);    	non-compiled	[CE]  inconvertible  types	133	None	replace
320	[BUG]  [BUGGY]  ((  VectorialPointValuePair)point[pj]).setIndex(pj);  [CE]  inconvertible  types  [FE]            AssertionFailedError      [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  ((  VectorialPointValuePair)point[pj]).setIndex(pj);  [BUGGY]      }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	((  VectorialPointValuePair)point[pj]).setIndex(pj);	  point[pj]    =    xNorm;    ((    VectorialPointValuePair)point[pj]).setIndex(pj);    	non-compiled	[CE]  inconvertible  types	133	None	replace
321	[BUG]  [BUGGY]  point[pj]  =  VectorialPointValuePair.setIndex(pj);  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  point[pj]  =  VectorialPointValuePair.setIndex(pj);  [BUGGY]      }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	point[pj]  =  VectorialPointValuePair.setIndex(pj);	  point[pj]    =    xNorm;    ((    VectorialPointValuePair)point[pj]).setIndex(pj);    	non-compiled	[CE]  cannot  find  symbol	133	None	replace
322	[BUG]  [BUGGY]  ((  VectorialPointValuePair)pj).remove(point);  [CE]  inconvertible  types  [FE]              AssertionFailedError      [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  ((  VectorialPointValuePair)pj).remove(point);  [BUGGY]      point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	((  VectorialPointValuePair)pj).remove(point);	  ((    VectorialPointValuePair)pj).remove(pj);    	non-compiled	[CE]  inconvertible  types	100	None	replace
323	[BUG]  [BUGGY]  ((  VectorialPointValuePair)pj).remove(pj,  cost);  [CE]  inconvertible  types  [FE]                AssertionFailedError      [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  ((  VectorialPointValuePair)pj).remove(pj,  cost);  [BUGGY]      point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	((  VectorialPointValuePair)pj).remove(pj,  cost);	  ((    VectorialPointValuePair)pj).remove(pj);    	non-compiled	[CE]  inconvertible  types	100	None	replace
324	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  oldX.length  -  1;  ++i)  {  int  oldX  =  oldX[i];  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  for(int  i  =  0;  i  <  oldX.length  -  1;  ++i)  {  int  oldX  =  oldX[i];  [BUGGY]      point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	for(int  i  =  0;  i  <  oldX.length  -  1;  ++i)  {  int  oldX  =  oldX[i];	  for(int    i    =    0;    i    <    oldX.length;    ++i)    {    int    oldX    =    oldX[i];    	non-compiled	[CE]  illegal  start  of  expression	58	None	replace
325	[BUG]  [BUGGY]  points[j]  =  cost;  [CE]  cannot  find  symbol  points  [FE]          AssertionFailedError      [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  points[j]  =  cost;  [BUGGY]      }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	points[j]  =  cost;	  point[pj]    =    cost;    points[pj]    =    cost;    	non-compiled	[CE]  cannot  find  symbol  points	40	None	replace
326	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  resolvedCols;  ++j)  {  point[pj]  =  oldX[j];  }  [CE]  variable  j  is  already  defined  in  method  doOptimize()  [FE]                  AssertionFailedError      [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  for(int  j  =  0;  j  <  resolvedCols;  ++j)  {  point[pj]  =  oldX[j];  }  [BUGGY]      point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	for(int  j  =  0;  j  <  resolvedCols;  ++j)  {  point[pj]  =  oldX[j];  }	  for(int    j    =    0;    j    <    solvedCols;    ++j)    {    point[pj]    =    permutation[j];    }    	non-compiled	[CE]  variable  j  is  already  defined  in  method  doOptimize()	82	None	replace
327	[BUG]  [BUGGY]  int  pj  =  oldY[j];  [CE]  variable  pj  is  already  defined  in  method  doOptimize()  [FE]                AssertionFailedError      [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  int  pj  =  oldY[j];  [BUGGY]      point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	int  pj  =  oldY[j];	  int    pj    =    oldNorm[j];    	non-compiled	[CE]  variable  pj  is  already  defined  in  method  doOptimize()	157	None	replace
328	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError      [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  point[0]  =  cost;  [BUGGY]      }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	add	point[0]  =  cost;	  point[pj]    =    cost;    if(pj    <    =    0)    {    point[pj]    =    cost;    }    	compilable	  [FE]  AssertionFailedError  	117	12	replace
329	[BUG]  [BUGGY]  point[0]  =  cost;  [FE]  AssertionFailedError  [FE]        AssertionFailedError      [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  point[0]  =  cost;  [BUGGY]      }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	point[0]  =  cost;	  point[pj]    =    cost;    if(pj    <    =    0)    {    point[pj]    =    cost;    }    	compilable	  [FE]  AssertionFailedError  	117	12	replace
330	[BUG]  [BUGGY]  ((  VectorialPointValuePair)point).remove(pj  -  1);  [CE]  inconvertible  types  [FE]                  AssertionFailedError      [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  ((  VectorialPointValuePair)point).remove(pj  -  1);  [BUGGY]      point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	((  VectorialPointValuePair)point).remove(pj  -  1);	  ((    VectorialPointValuePair)point).remove(pj);    	non-compiled	[CE]  inconvertible  types	102	None	replace
331	[BUG]  [BUGGY]  ((  VectorialPointValuePair)point).remove(pj,  cost);  [CE]  inconvertible  types  [FE]                    AssertionFailedError      [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  ((  VectorialPointValuePair)point).remove(pj,  cost);  [BUGGY]      point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	((  VectorialPointValuePair)point).remove(pj,  cost);	  ((    VectorialPointValuePair)point).remove(pj);    	non-compiled	[CE]  inconvertible  types	102	None	replace
332	[BUG]  [BUGGY]  ((  VectorialPointValuePair)point).remove(pj  +  1);  [CE]  inconvertible  types  [FE]                      AssertionFailedError      [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  ((  VectorialPointValuePair)point).remove(pj  +  1);  [BUGGY]      point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	((  VectorialPointValuePair)point).remove(pj  +  1);	  ((    VectorialPointValuePair)point).remove(pj);    	non-compiled	[CE]  inconvertible  types	102	None	replace
333	[BUG]  [BUGGY]  point[j]  =  cost[oldX];  point[j]  =  value[oldY];  [CE]  incompatible  types  [FE]                AssertionFailedError      [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  point[j]  =  cost[oldX];  point[j]  =  value[oldY];  [BUGGY]      }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	point[j]  =  cost[oldX];  point[j]  =  value[oldY];	  point[j]    =    oldX[pj];    point[j]    =    oldY[pj];    	non-compiled	[CE]  incompatible  types	54	None	replace
334	[BUG]  [BUGGY]  point[j]  =  cost[oldX];  point[j]  =  oldY[pj];  [CE]  incompatible  types  [FE]                  AssertionFailedError      [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  point[j]  =  cost[oldX];  point[j]  =  oldY[pj];  [BUGGY]      }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	point[j]  =  cost[oldX];  point[j]  =  oldY[pj];	  point[j]    =    oldX[pj];    point[j]    =    oldY[pj];    	non-compiled	[CE]  incompatible  types	54	None	replace
335	[BUG]  [BUGGY]  point[j]  =  cost[oldX];  point[j]  =  value[pj];  [CE]  incompatible  types  [FE]                    AssertionFailedError      [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  point[j]  =  cost[oldX];  point[j]  =  value[pj];  [BUGGY]      }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	point[j]  =  cost[oldX];  point[j]  =  value[pj];	  point[j]    =    oldX[pj];    point[j]    =    oldY[pj];    	non-compiled	[CE]  incompatible  types	54	None	replace
336	[BUG]  [BUGGY]  int  pj  =  permutation[j]  *  1;  [CE]  variable  pj  is  already  defined  in  method  doOptimize()  [FE]              AssertionFailedError      [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  int  pj  =  permutation[j]  *  1;  [BUGGY]      point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	int  pj  =  permutation[j]  *  1;	  int    pj    =    permutation[j]    +    1;    	non-compiled	[CE]  variable  pj  is  already  defined  in  method  doOptimize()	27	None	replace
337	[BUG]  [BUGGY]  int  pj  =  permutation[j]  +  2;  [CE]  variable  pj  is  already  defined  in  method  doOptimize()  [FE]                AssertionFailedError      [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  int  pj  =  permutation[j]  +  2;  [BUGGY]      point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	int  pj  =  permutation[j]  +  2;	  int    pj    =    permutation[j]    +    1;    	non-compiled	[CE]  variable  pj  is  already  defined  in  method  doOptimize()	27	None	replace
338	[BUG]  [BUGGY]  point[pj]  =  cost.parseValue(xNorm);  [CE]  double  cannot  be  dereferenced  [FE]              AssertionFailedError      [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  point[pj]  =  cost.parseValue(xNorm);  [BUGGY]      }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	point[pj]  =  cost.parseValue(xNorm);	  point[pj]    =    Cost.parseValue(xNorm);    	non-compiled	[CE]  double  cannot  be  dereferenced	79	None	replace
339	[BUG]  [BUGGY]  point[j]  =  Cost.parseValue(xNorm);  [CE]  cannot  find  symbol  Cost  [FE]                AssertionFailedError      [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  point[j]  =  Cost.parseValue(xNorm);  [BUGGY]      }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	point[j]  =  Cost.parseValue(xNorm);	  point[pj]    =    Cost.parseValue(xNorm);    	non-compiled	[CE]  cannot  find  symbol  Cost	79	None	replace
340	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  point[0]  =  permutation[pj];  point[0]  =  permutation[pj];  [BUGGY]      }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	add	point[0]    =    permutation[pj];    point[0]  =  permutation[pj];	  	compilable	  [FE]  AssertionFailedError  	104	10	add
341	[BUG]  [BUGGY]  point[0]  =  permutation[pj];  point[0]  =  permutation[pj];  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  point[0]  =  permutation[pj];  point[0]  =  permutation[pj];  [BUGGY]      }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	point[0]    =    permutation[pj];    point[0]  =  permutation[pj];	  	compilable	  [FE]  AssertionFailedError  	104	10	add
342	[BUG]  [BUGGY]  point[0]  =  permutation[pj];  points[0]  =  permutation[pj];  [CE]  cannot  find  symbol  points  [FE]      AssertionFailedError    [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  point[0]  =  permutation[pj];  points[0]  =  permutation[pj];  [BUGGY]      }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	point[0]    =    permutation[pj];    points[0]  =  permutation[pj];	  	non-compiled	[CE]  cannot  find  symbol  points	104	None	add
343	[BUG]  [BUGGY]  point[0]  =  permutation[pj];  int  point[0]  =  permutation[pj];  [CE]  ']'  expected  [FE]        AssertionFailedError    [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  point[0]  =  permutation[pj];  int  point[0]  =  permutation[pj];  [BUGGY]      }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	point[0]    =    permutation[pj];    int  point[0]  =  permutation[pj];	  	non-compiled	[CE]  ']'  expected	104	None	add
344	[BUG]  [BUGGY]  point[0]  =  permutation[pj];  Point[0]  =  permutation[pj];  [CE]  cannot  find  symbol  Point  [FE]          AssertionFailedError    [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  point[0]  =  permutation[pj];  Point[0]  =  permutation[pj];  [BUGGY]      }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	point[0]    =    permutation[pj];    Point[0]  =  permutation[pj];	  	non-compiled	[CE]  cannot  find  symbol  Point	104	None	add
345	[BUG]  [BUGGY]  point[0]  =  permutation[pj];  Point[0]  =  point[pj];  [CE]  cannot  find  symbol  Point  [FE]            AssertionFailedError    [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  point[0]  =  permutation[pj];  Point[0]  =  point[pj];  [BUGGY]      }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	point[0]    =    permutation[pj];    Point[0]  =  point[pj];	  	non-compiled	[CE]  cannot  find  symbol  Point	104	None	add
346	[BUG]  [BUGGY]  tmpVec  =  preRed;  [CE]  incompatible  types  [FE]                    AssertionFailedError      [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  tmpVec  =  preRed;  [BUGGY]      point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	tmpVec  =  preRed;	  tmpVec    =    previousCost;    	non-compiled	[CE]  incompatible  types	91	None	replace
347	[BUG]  [BUGGY]  tmpVec  =  previousCost.previousCost;  [CE]  double  cannot  be  dereferenced  [FE]                      AssertionFailedError      [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  tmpVec  =  previousCost.previousCost;  [BUGGY]      point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	tmpVec  =  previousCost.previousCost;	  tmpVec    =    previousCost;    	non-compiled	[CE]  double  cannot  be  dereferenced	91	None	replace
348	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  point[pj]  =  cost  -  2;  [BUGGY]      }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	add	point[pj]  =  cost  -  2;	  point[pj]    =    cost    -    1;    	compilable	  [FE]  AssertionFailedError  	123	12	replace
349	[BUG]  [BUGGY]  point[pj]  =  cost  -  2;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  point[pj]  =  cost  -  2;  [BUGGY]      }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	point[pj]  =  cost  -  2;	  point[pj]    =    cost    -    1;    	compilable	  [FE]  AssertionFailedError  	123	12	replace
350	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  point[pj]  =  xNorm  -  1;  [BUGGY]      }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	add	point[pj]  =  xNorm  -  1;	  point[pj]    =    cost    -    1;    	compilable	  [FE]  AssertionFailedError  	123	12	replace
351	[BUG]  [BUGGY]  point[pj]  =  xNorm  -  1;  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  point[pj]  =  xNorm  -  1;  [BUGGY]      }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	point[pj]  =  xNorm  -  1;	  point[pj]    =    cost    -    1;    	compilable	  [FE]  AssertionFailedError  	123	12	replace
352	[BUG]  [BUGGY]  point[pj]  =  xNorm;  Point[pj]  =  cost;  [CE]  cannot  find  symbol  Point  [FE]              AssertionFailedError      [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  point[pj]  =  xNorm;  Point[pj]  =  cost;  [BUGGY]      }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	point[pj]  =  xNorm;  Point[pj]  =  cost;	  point[pj]    =    cost;    Point[pj]    =    cost;    	non-compiled	[CE]  cannot  find  symbol  Point	42	None	replace
353	[BUG]  [BUGGY]  point[pj]  =  cost;  Point[pj]  =  permutation;  [CE]  cannot  find  symbol  Point  [FE]                AssertionFailedError      [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  point[pj]  =  cost;  Point[pj]  =  permutation;  [BUGGY]      }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	point[pj]  =  cost;  Point[pj]  =  permutation;	  point[pj]    =    cost;    Point[pj]    =    cost;    	non-compiled	[CE]  cannot  find  symbol  Point	42	None	replace
354	[BUG]  [BUGGY]  point[pj]  =  cost;  Point[pj]  =  tmpVec;  [CE]  cannot  find  symbol  Point  [FE]                  AssertionFailedError      [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  point[pj]  =  cost;  Point[pj]  =  tmpVec;  [BUGGY]      }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	point[pj]  =  cost;  Point[pj]  =  tmpVec;	  point[pj]    =    cost;    Point[pj]    =    cost;    	non-compiled	[CE]  cannot  find  symbol  Point	42	None	replace
355	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  resolvedCols;  ++j)  {  point[pj]  =  oldX[i];  }  [CE]  variable  j  is  already  defined  in  method  doOptimize()  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  for(int  j  =  0;  j  <  resolvedCols;  ++j)  {  point[pj]  =  oldX[i];  }  [BUGGY]      point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	for(int  j  =  0;  j  <  resolvedCols;  ++j)  {  point[pj]  =  oldX[i];  }	  for(int    j    =    0;    j    <    solvedCols;    ++j)    {    point[pj]    =    oldX[i];    }    	non-compiled	[CE]  variable  j  is  already  defined  in  method  doOptimize()	60	None	replace
356	[BUG]  [BUGGY]  point[pj]  =  cost.cloneTree();  [CE]  double  cannot  be  dereferenced  [FE]              AssertionFailedError      [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  point[pj]  =  cost.cloneTree();  [BUGGY]      }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	point[pj]  =  cost.cloneTree();	  point[pj]    =    tmpVec.cloneTree();    	non-compiled	[CE]  double  cannot  be  dereferenced	148	None	replace
357	[BUG]  [BUGGY]  point[j]  =  tmpVec.cloneTree();  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  point[j]  =  tmpVec.cloneTree();  [BUGGY]      }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	point[j]  =  tmpVec.cloneTree();	  point[pj]    =    tmpVec.cloneTree();    	non-compiled	[CE]  cannot  find  symbol	148	None	replace
358	[BUG]  [BUGGY]  point[pj]  =  xNorm.cloneTree();  [CE]  double  cannot  be  dereferenced  [FE]                  AssertionFailedError      [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  point[pj]  =  xNorm.cloneTree();  [BUGGY]      }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	point[pj]  =  xNorm.cloneTree();	  point[pj]    =    tmpVec.cloneTree();    	non-compiled	[CE]  double  cannot  be  dereferenced	148	None	replace
359	[BUG]  [BUGGY]  point[pj]  =  tmpVec  +  2;  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]              AssertionFailedError      [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  point[pj]  =  tmpVec  +  2;  [BUGGY]      }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	point[pj]  =  tmpVec  +  2;	  point[pj]    =    tmpVec    +    1;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	55	None	replace
360	[BUG]  [BUGGY]  ((  VectorialPointValuePair)permutation).remove(pj  -  1);  [CE]  inconvertible  types  [FE]                AssertionFailedError      [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  ((  VectorialPointValuePair)permutation).remove(pj  -  1);  [BUGGY]      point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	((  VectorialPointValuePair)permutation).remove(pj  -  1);	  ((    VectorialPointValuePair)permutation).remove(pj);    	non-compiled	[CE]  inconvertible  types	101	None	replace
361	[BUG]  [BUGGY]  ((  VectorialPointValuePair)permutation).remove(pj  +  1);  [CE]  inconvertible  types  [FE]                  AssertionFailedError      [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  ((  VectorialPointValuePair)permutation).remove(pj  +  1);  [BUGGY]      point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	((  VectorialPointValuePair)permutation).remove(pj  +  1);	  ((    VectorialPointValuePair)permutation).remove(pj);    	non-compiled	[CE]  inconvertible  types	101	None	replace
362	[BUG]  [BUGGY]  ((  VectorialPointValuePair)permutation).remove(pj,  cost);  [CE]  inconvertible  types  [FE]                    AssertionFailedError      [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  ((  VectorialPointValuePair)permutation).remove(pj,  cost);  [BUGGY]      point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	((  VectorialPointValuePair)permutation).remove(pj,  cost);	  ((    VectorialPointValuePair)permutation).remove(pj);    	non-compiled	[CE]  inconvertible  types	101	None	replace
363	[BUG]  [BUGGY]  int  pj  =  previousCost[j];  [CE]  variable  pj  is  already  defined  in  method  doOptimize()  [FE]              AssertionFailedError      [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  int  pj  =  previousCost[j];  [BUGGY]      point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	int  pj  =  previousCost[j];	  int    pj    =    cost[j];    	non-compiled	[CE]  variable  pj  is  already  defined  in  method  doOptimize()	156	None	replace
364	[BUG]  [BUGGY]  int  pj  =  oldCost[j];  [CE]  variable  pj  is  already  defined  in  method  doOptimize()  [FE]                AssertionFailedError      [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  int  pj  =  oldCost[j];  [BUGGY]      point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	int  pj  =  oldCost[j];	  int    pj    =    cost[j];    	non-compiled	[CE]  variable  pj  is  already  defined  in  method  doOptimize()	156	None	replace
365	[BUG]  [BUGGY]  tmpVec  =  permutation[j]  +  2;  [CE]  incompatible  types  [FE]                AssertionFailedError      [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  tmpVec  =  permutation[j]  +  2;  [BUGGY]      point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	tmpVec  =  permutation[j]  +  2;	  tmpVec    =    permutation[j]    +    1;    	non-compiled	[CE]  incompatible  types	103	None	replace
366	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  solvedCols;  ++i)  {  point[pj]  =  oldX;  }  [CE]  incompatible  types  [FE]              AssertionFailedError      [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  for(int  i  =  0;  i  <  solvedCols;  ++i)  {  point[pj]  =  oldX;  }  [BUGGY]      point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	for(int  i  =  0;  i  <  solvedCols;  ++i)  {  point[pj]  =  oldX;  }	          for(int    i    =    0;    i    <    solvedCols;    ++i)    {    point[pj]    =    cost;    }    for(int    i    =    0;    i    <    solvedCols;    ++i)    {    point[pj]    =    Cost;    }    	non-compiled	[CE]  incompatible  types	70	None	replace
367	[BUG]  [BUGGY]  tmpVec  =  Math.sqrt(v);  [CE]  cannot  find  symbol  v  [FE]                AssertionFailedError      [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  tmpVec  =  Math.sqrt(v);  [BUGGY]      point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	tmpVec  =  Math.sqrt(v);	  tmpVec    =    Math.sqrt(lastCost);    	non-compiled	[CE]  cannot  find  symbol  v	139	None	replace
368	[BUG]  [BUGGY]  tmpVec  =  Math.sqrt(result);  [CE]  cannot  find  symbol  result  [FE]                  AssertionFailedError      [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  tmpVec  =  Math.sqrt(result);  [BUGGY]      point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	tmpVec  =  Math.sqrt(result);	  tmpVec    =    Math.sqrt(lastCost);    	non-compiled	[CE]  cannot  find  symbol  result	139	None	replace
369	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  point[pj]  =  cost  -  1;  point[pj]  =  cost  -  1;  [BUGGY]      }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	add	point[pj]    =    cost    -    1;    point[pj]  =  cost  -  1;	  	compilable	  [FE]  AssertionFailedError  	122	2	add
370	[BUG]  [BUGGY]  point[pj]  =  cost  -  1;  point[pj]  =  cost  -  1;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  point[pj]  =  cost  -  1;  point[pj]  =  cost  -  1;  [BUGGY]      }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	point[pj]    =    cost    -    1;    point[pj]  =  cost  -  1;	  	compilable	  [FE]  AssertionFailedError  	122	2	add
371	[BUG]  [BUGGY]  point[pj]  =  cost  -  1;  points[pj]  =  cost  -  1;  [CE]  cannot  find  symbol  points  [FE]      AssertionFailedError    [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  point[pj]  =  cost  -  1;  points[pj]  =  cost  -  1;  [BUGGY]      }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	point[pj]    =    cost    -    1;    points[pj]  =  cost  -  1;	  	non-compiled	[CE]  cannot  find  symbol  points	122	None	add
372	[BUG]  [BUGGY]  point[pj]  =  cost  -  1;  int  point[pj]  =  cost  -  1;  [CE]  ']'  expected  [FE]        AssertionFailedError    [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  point[pj]  =  cost  -  1;  int  point[pj]  =  cost  -  1;  [BUGGY]      }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	point[pj]    =    cost    -    1;    int  point[pj]  =  cost  -  1;	  	non-compiled	[CE]  ']'  expected	122	None	add
373	[BUG]  [BUGGY]  point[pj]  =  cost  -  1;  Point  pj]  =  cost  -  1;  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  point[pj]  =  cost  -  1;  Point  pj]  =  cost  -  1;  [BUGGY]      }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	point[pj]    =    cost    -    1;    Point  pj]  =  cost  -  1;	  	non-compiled	[CE]  ';'  expected	122	None	add
374	[BUG]  [BUGGY]  point[pj]  =  cost  -  1;  pj]  =  cost  -  1;  [CE]  not  a  statement  [FE]            AssertionFailedError    [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  point[pj]  =  cost  -  1;  pj]  =  cost  -  1;  [BUGGY]      }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	point[pj]    =    cost    -    1;    pj]  =  cost  -  1;	  	non-compiled	[CE]  not  a  statement	122	None	add
375	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  point[pj]  =  xNorm  +  2;  [BUGGY]      }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	add	point[pj]  =  xNorm  +  2;	  point[pj]    =    xNorm    +    1;    	compilable	  [FE]  AssertionFailedError  	87	12	replace
376	[BUG]  [BUGGY]  point[pj]  =  xNorm  +  2;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  point[pj]  =  xNorm  +  2;  [BUGGY]      }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	point[pj]  =  xNorm  +  2;	  point[pj]    =    xNorm    +    1;    	compilable	  [FE]  AssertionFailedError  	87	12	replace
377	[BUG]  [BUGGY]  point[pj]  =  value  +  1;  [CE]  cannot  find  symbol  value  [FE]      AssertionFailedError    [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  point[pj]  =  value  +  1;  [BUGGY]      }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	point[pj]  =  value  +  1;	  point[pj]    =    xNorm    +    1;    	non-compiled	[CE]  cannot  find  symbol  value	87	None	replace
378	[BUG]  [BUGGY]  ((  VectorialPointValuePair)point[j]).evaluate();  [CE]  inconvertible  types  [FE]        AssertionFailedError      [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  ((  VectorialPointValuePair)point[j]).evaluate();  [BUGGY]      }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	((  VectorialPointValuePair)point[j]).evaluate();	  point[pj]    =    cost;    ((    VectorialPointValuePair)point[pj]).evaluate();    	non-compiled	[CE]  inconvertible  types	153	None	replace
379	[BUG]  [BUGGY]  ((  VectorialPointValuePair)point[0]).evaluate();  [CE]  inconvertible  types  [FE]          AssertionFailedError      [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  ((  VectorialPointValuePair)point[0]).evaluate();  [BUGGY]      }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	((  VectorialPointValuePair)point[0]).evaluate();	  point[pj]    =    cost;    ((    VectorialPointValuePair)point[pj]).evaluate();    	non-compiled	[CE]  inconvertible  types	153	None	replace
380	[BUG]  [BUGGY]  VectorialPointValuePair  point[]  =  VectorialPointValuePair.newInstance();  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  VectorialPointValuePair  point[]  =  VectorialPointValuePair.newInstance();  [BUGGY]      }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	VectorialPointValuePair  point[]  =  VectorialPointValuePair.newInstance();	  point[pj]    =    cost;    ((    VectorialPointValuePair)point[pj]).evaluate();    	non-compiled	[CE]  cannot  find  symbol	153	None	replace
381	[BUG]  [BUGGY]  VectorialPointValuePair  point[]  =  VectorialPointValuePair.getPoint(pj);  [CE]  method  getPoint  in  class  VectorialPointValuePair  cannot  be  applied  to  given  types;  [FE]              AssertionFailedError      [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  VectorialPointValuePair  point[]  =  VectorialPointValuePair.getPoint(pj);  [BUGGY]      }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	VectorialPointValuePair  point[]  =  VectorialPointValuePair.getPoint(pj);	  point[pj]    =    cost;    ((    VectorialPointValuePair)point[pj]).evaluate();    	non-compiled	[CE]  method  getPoint  in  class  VectorialPointValuePair  cannot  be  applied  to  given  types;	153	None	replace
382	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  tmpVec  =  oldX;  tmpVec  =  oldX;  [BUGGY]      point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	add	tmpVec    =    oldX;    tmpVec  =  oldX;	  	compilable	  [FE]  AssertionFailedError  	88	2	add
383	[BUG]  [BUGGY]  tmpVec  =  oldX;  tmpVec  =  oldX;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  tmpVec  =  oldX;  tmpVec  =  oldX;  [BUGGY]      point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	tmpVec    =    oldX;    tmpVec  =  oldX;	  	compilable	  [FE]  AssertionFailedError  	88	2	add
384	[BUG]  [BUGGY]  tmpVec  =  oldX;  int  tmpVec  =  oldX;  [CE]  variable  tmpVec  is  already  defined  in  method  doOptimize()  [FE]      AssertionFailedError    [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  tmpVec  =  oldX;  int  tmpVec  =  oldX;  [BUGGY]      point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	tmpVec    =    oldX;    int  tmpVec  =  oldX;	  	non-compiled	[CE]  variable  tmpVec  is  already  defined  in  method  doOptimize()	88	None	add
385	[BUG]  [BUGGY]  tmpVec  =  oldX;  tmpVec  =  oldY;  [CE]  cannot  find  symbol  oldY  [FE]        AssertionFailedError    [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  tmpVec  =  oldX;  tmpVec  =  oldY;  [BUGGY]      point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	tmpVec    =    oldX;    tmpVec  =  oldY;	  	non-compiled	[CE]  cannot  find  symbol  oldY	88	None	add
386	[BUG]  [BUGGY]  tmpVec  =  oldX;  tmpVec  =  oldX.length;  [CE]  incompatible  types  [FE]          AssertionFailedError    [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  tmpVec  =  oldX;  tmpVec  =  oldX.length;  [BUGGY]      point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	tmpVec    =    oldX;    tmpVec  =  oldX.length;	  	non-compiled	[CE]  incompatible  types	88	None	add
387	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  point[j]  =  permutation[pj  -  1];  [BUGGY]      }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	add	point[j]  =  permutation[pj  -  1];	  point[j]    =    oldX[pj    -    1];    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	170	15	replace
388	[BUG]  [BUGGY]  point[j]  =  permutation[pj  -  1];  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  point[j]  =  permutation[pj  -  1];  [BUGGY]      }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	point[j]  =  permutation[pj  -  1];	  point[j]    =    oldX[pj    -    1];    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	170	15	replace
389	[BUG]  [BUGGY]  point[j]  =  cost[pj  -  1];  [CE]  array  required,  but  double  found  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  point[j]  =  cost[pj  -  1];  [BUGGY]      }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	point[j]  =  cost[pj  -  1];	  point[j]    =    oldX[pj    -    1];    	non-compiled	[CE]  array  required,  but  double  found	170	None	replace
390	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  point[j]  =  oldRes[pj  -  1];  [BUGGY]      }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	add	point[j]  =  oldRes[pj  -  1];	  point[j]    =    oldX[pj    -    1];    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	170	15	replace
391	[BUG]  [BUGGY]  point[j]  =  oldRes[pj  -  1];  [FE]  ArrayIndexOutOfBoundsException  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  point[j]  =  oldRes[pj  -  1];  [BUGGY]      }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	point[j]  =  oldRes[pj  -  1];	  point[j]    =    oldX[pj    -    1];    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	170	15	replace
392	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  point[pj]    =    xNorm;    point[pj]  =  xNorm;  point[pj]  =  xNorm;  point[pj]  =  xNorm;  [BUGGY]      }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	add	point[pj]        =        xNorm;        point[pj]    =    xNorm;    point[pj]  =  xNorm;  point[pj]  =  xNorm;	  	compilable	  [FE]  AssertionFailedError  	29	2	add
393	[BUG]  [BUGGY]  point[pj]    =    xNorm;    point[pj]  =  xNorm;  point[pj]  =  xNorm;  point[pj]  =  xNorm;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  point[pj]    =    xNorm;    point[pj]  =  xNorm;  point[pj]  =  xNorm;  point[pj]  =  xNorm;  [BUGGY]      }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	point[pj]        =        xNorm;        point[pj]    =    xNorm;    point[pj]  =  xNorm;  point[pj]  =  xNorm;	  	compilable	  [FE]  AssertionFailedError  	29	2	add
394	[BUG]  [BUGGY]  point[pj]    =    xNorm;    point[pj]  =  xNorm;  point[pj]  =  xNorm;  point[pj]  =  tmpVec;  [CE]  incompatible  types  [FE]      AssertionFailedError    [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  point[pj]    =    xNorm;    point[pj]  =  xNorm;  point[pj]  =  xNorm;  point[pj]  =  tmpVec;  [BUGGY]      }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	point[pj]        =        xNorm;        point[pj]    =    xNorm;    point[pj]  =  xNorm;  point[pj]  =  tmpVec;	  	non-compiled	[CE]  incompatible  types	29	None	add
395	[BUG]  [BUGGY]  point[pj]    =    xNorm;    point[pj]  =  xNorm;  points[pj]  =  xNorm;  point[pj]  =  xNorm;  [CE]  cannot  find  symbol  points  [FE]        AssertionFailedError    [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  point[pj]    =    xNorm;    point[pj]  =  xNorm;  points[pj]  =  xNorm;  point[pj]  =  xNorm;  [BUGGY]      }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	point[pj]        =        xNorm;        point[pj]    =    xNorm;    points[pj]  =  xNorm;  point[pj]  =  xNorm;	  	non-compiled	[CE]  cannot  find  symbol  points	29	None	add
396	[BUG]  [BUGGY]  point[pj]    =    xNorm;    point[pj]  =  xNorm;  point[pj]  =  yNorm;  point[pj]  =  xNorm;  [CE]  cannot  find  symbol  yNorm  [FE]          AssertionFailedError    [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  point[pj]    =    xNorm;    point[pj]  =  xNorm;  point[pj]  =  yNorm;  point[pj]  =  xNorm;  [BUGGY]      }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	point[pj]        =        xNorm;        point[pj]    =    xNorm;    point[pj]  =  yNorm;  point[pj]  =  xNorm;	  	non-compiled	[CE]  cannot  find  symbol  yNorm	29	None	add
397	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  permutation.length;  ++j)  {  point[pj]  =  oldX[j];  }  [CE]  variable  j  is  already  defined  in  method  doOptimize()  [FE]        ArrayIndexOutOfBoundsException      [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  for(int  j  =  0;  j  <  permutation.length;  ++j)  {  point[pj]  =  oldX[j];  }  [BUGGY]      point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	for(int  j  =  0;  j  <  permutation.length;  ++j)  {  point[pj]  =  oldX[j];  }	  for(int    j    =    0;    j    <    solvedCols;    ++j)    {    point[pj]    =    oldX[j];    }    	non-compiled	[CE]  variable  j  is  already  defined  in  method  doOptimize()	119	None	replace
398	[BUG]  [BUGGY]  int  i  =  0;  j  <  resolvedCols;  ++i)  {  point[pj]  =  oldX[i];  }  [CE]  >  expected  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  int  i  =  0;  j  <  resolvedCols;  ++i)  {  point[pj]  =  oldX[i];  }  [BUGGY]      point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	int  i  =  0;  j  <  resolvedCols;  ++i)  {  point[pj]  =  oldX[i];  }	  int    i    =    0;    j    <    solvedCols;    ++i)    {    point[pj]    =    oldX[i];    }    	non-compiled	[CE]  >  expected	120	None	replace
399	[BUG]  [BUGGY]  int  i  =  1;  j  <  solvedCols;  ++i)  {  point[pj]  =  oldX[i];  }  [CE]  >  expected  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  int  i  =  1;  j  <  solvedCols;  ++i)  {  point[pj]  =  oldX[i];  }  [BUGGY]      point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	int  i  =  1;  j  <  solvedCols;  ++i)  {  point[pj]  =  oldX[i];  }	  int    i    =    0;    j    <    solvedCols;    ++i)    {    point[pj]    =    oldX[i];    }    	non-compiled	[CE]  >  expected	120	None	replace
400	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  point[j]  =  cost;  point[j]  =  cost;  [BUGGY]      }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	add	point[j]    =    cost;    point[j]  =  cost;	  	compilable	  [FE]  AssertionFailedError  	94	12	add
401	[BUG]  [BUGGY]  point[j]  =  cost;  point[j]  =  cost;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  point[j]  =  cost;  point[j]  =  cost;  [BUGGY]      }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	point[j]    =    cost;    point[j]  =  cost;	  	compilable	  [FE]  AssertionFailedError  	94	12	add
402	[BUG]  [BUGGY]  point[j]  =  cost;  if(pj  ==  0)  {  point[j]  =  cost;  }  else  {  for(int  i  =  0;  j  <  solvedCols;  ++j)  {  point[j]  =  cost;  }  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  point[j]  =  cost;  if(pj  ==  0)  {  point[j]  =  cost;  }  else  {  for(int  i  =  0;  j  <  solvedCols;  ++j)  {  point[j]  =  cost;  }  [BUGGY]      }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	point[j]    =    cost;    if(pj  ==  0)  {  point[j]  =  cost;  }  else  {  for(int  i  =  0;  j  <  solvedCols;  ++j)  {  point[j]  =  cost;  }	  	non-compiled	[CE]  illegal  start  of  expression	94	None	add
403	[BUG]  [BUGGY]  point[j]  =  cost;  if(pj  ==  0)  {  point[j]  =  cost;  }  else  {  for(int  i  =  0;  j  <  solvedCols;  ++j)  {  point[j]  =  value;  }  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  point[j]  =  cost;  if(pj  ==  0)  {  point[j]  =  cost;  }  else  {  for(int  i  =  0;  j  <  solvedCols;  ++j)  {  point[j]  =  value;  }  [BUGGY]      }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	point[j]    =    cost;    if(pj  ==  0)  {  point[j]  =  cost;  }  else  {  for(int  i  =  0;  j  <  solvedCols;  ++j)  {  point[j]  =  value;  }	  	non-compiled	[CE]  illegal  start  of  expression	94	None	add
404	[BUG]  [BUGGY]  point[j]  =  cost;  if(pj  ==  0)  {  point[j]  =  cost;  }  else  {  for(int  i  =  0;  i  <  solvedCols;  ++j)  {  point[j]  =  cost;  }  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  point[j]  =  cost;  if(pj  ==  0)  {  point[j]  =  cost;  }  else  {  for(int  i  =  0;  i  <  solvedCols;  ++j)  {  point[j]  =  cost;  }  [BUGGY]      }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	point[j]    =    cost;    if(pj  ==  0)  {  point[j]  =  cost;  }  else  {  for(int  i  =  0;  i  <  solvedCols;  ++j)  {  point[j]  =  cost;  }	  	non-compiled	[CE]  illegal  start  of  expression	94	None	add
405	[BUG]  [BUGGY]  point[j]  =  cost;  if(pj  ==  0)  {  point[j]  =  cost;  }  else  {  for(int  i  =  0;  i  <  solvedCols;  ++i)  {  point[j]  =  cost;  }  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  point[j]  =  cost;  if(pj  ==  0)  {  point[j]  =  cost;  }  else  {  for(int  i  =  0;  i  <  solvedCols;  ++i)  {  point[j]  =  cost;  }  [BUGGY]      }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	point[j]    =    cost;    if(pj  ==  0)  {  point[j]  =  cost;  }  else  {  for(int  i  =  0;  i  <  solvedCols;  ++i)  {  point[j]  =  cost;  }	  	non-compiled	[CE]  illegal  start  of  expression	94	None	add
406	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        ArrayIndexOutOfBoundsException      [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  point[pj]  =  oldX[j];  [BUGGY]      point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	add	point[pj]  =  oldX[j];	  point[pj]    =    oldX[i];    	compilable	  [FE]  AssertionFailedError  	59	6	replace
407	[BUG]  [BUGGY]  point[pj]  =  oldX[j];  [FE]  AssertionFailedError  [FE]        ArrayIndexOutOfBoundsException      [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  point[pj]  =  oldX[j];  [BUGGY]      point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	point[pj]  =  oldX[j];	  point[pj]    =    oldX[i];    	compilable	  [FE]  AssertionFailedError  	59	6	replace
408	[BUG]  [BUGGY]  point[pj]  =  cost[oldX];  [CE]  incompatible  types  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  point[pj]  =  cost[oldX];  [BUGGY]      point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	point[pj]  =  cost[oldX];	  point[pj]    =    oldX[i];    	non-compiled	[CE]  incompatible  types	59	None	replace
409	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  point[pj]  =  oldRes[pj];  [BUGGY]      point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	add	point[pj]  =  oldRes[pj];	  point[pj]    =    oldX[i];    	compilable	  [FE]  AssertionFailedError  	59	12	replace
410	[BUG]  [BUGGY]  point[pj]  =  oldRes[pj];  [FE]  AssertionFailedError  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  point[pj]  =  oldRes[pj];  [BUGGY]      point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	point[pj]  =  oldRes[pj];	  point[pj]    =    oldX[i];    	compilable	  [FE]  AssertionFailedError  	59	12	replace
411	[BUG]  [BUGGY]  point[pj]  =  xNorm[i];  [CE]  cannot  find  symbol  i  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  point[pj]  =  xNorm[i];  [BUGGY]      point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	point[pj]  =  xNorm[i];	  point[pj]    =    oldX[i];    	non-compiled	[CE]  cannot  find  symbol  i	59	None	replace
412	[BUG]  [BUGGY]  tmpVec  =  Math.sqrt(previousCost  +  pj);  [CE]  incompatible  types  [FE]              AssertionFailedError      [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  tmpVec  =  Math.sqrt(previousCost  +  pj);  [BUGGY]      point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	tmpVec  =  Math.sqrt(previousCost  +  pj);	  tmpVec    =    Math.sqrt(previousCost    +    1);    	non-compiled	[CE]  incompatible  types	138	None	replace
413	[BUG]  [BUGGY]  tmpVec  =  Math.sqrt(previousCost  *  1);  [CE]  incompatible  types  [FE]                AssertionFailedError      [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  tmpVec  =  Math.sqrt(previousCost  *  1);  [BUGGY]      point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	tmpVec  =  Math.sqrt(previousCost  *  1);	  tmpVec    =    Math.sqrt(previousCost    +    1);    	non-compiled	[CE]  incompatible  types	138	None	replace
414	[BUG]  [BUGGY]  tmpVec  =  Math.sqrt(previousCost,  pj  +  1);  [CE]  method  sqrt  in  class  Math  cannot  be  applied  to  given  types;  [FE]                  AssertionFailedError      [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  tmpVec  =  Math.sqrt(previousCost,  pj  +  1);  [BUGGY]      point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	tmpVec  =  Math.sqrt(previousCost,  pj  +  1);	  tmpVec    =    Math.sqrt(previousCost    +    1);    	non-compiled	[CE]  method  sqrt  in  class  Math  cannot  be  applied  to  given  types;	138	None	replace
415	[BUG]  [BUGGY]  tmpVec  =  Math.sqrt(previousCost,  cost  +  1);  [CE]  method  sqrt  in  class  Math  cannot  be  applied  to  given  types;  [FE]                    AssertionFailedError      [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  tmpVec  =  Math.sqrt(previousCost,  cost  +  1);  [BUGGY]      point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	tmpVec  =  Math.sqrt(previousCost,  cost  +  1);	  tmpVec    =    Math.sqrt(previousCost    +    1);    	non-compiled	[CE]  method  sqrt  in  class  Math  cannot  be  applied  to  given  types;	138	None	replace
416	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  for(int  i  =  0;  i  <  solvedCols;  ++i)  {  point[pj]  =  oldX[pj];  }  for(int  i  =  0;  i  <  solvedCols;  ++i)  {  point[pj]  =  oldX[pj];  }  [BUGGY]      point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	add	for(int    i    =    0;    i    <    solvedCols;    ++i)    {    point[pj]    =    oldX[pj];    }    for(int  i  =  0;  i  <  solvedCols;  ++i)  {  point[pj]  =  oldX[pj];  }	  	compilable	  [FE]  AssertionFailedError  	61	2	add
417	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  solvedCols;  ++i)  {  point[pj]  =  oldX[pj];  }  for(int  i  =  0;  i  <  solvedCols;  ++i)  {  point[pj]  =  oldX[pj];  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  for(int  i  =  0;  i  <  solvedCols;  ++i)  {  point[pj]  =  oldX[pj];  }  for(int  i  =  0;  i  <  solvedCols;  ++i)  {  point[pj]  =  oldX[pj];  }  [BUGGY]      point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	for(int    i    =    0;    i    <    solvedCols;    ++i)    {    point[pj]    =    oldX[pj];    }    for(int  i  =  0;  i  <  solvedCols;  ++i)  {  point[pj]  =  oldX[pj];  }	  	compilable	  [FE]  AssertionFailedError  	61	2	add
418	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  solvedCols;  ++i)  {  point[pj]  =  oldX[pj];  }  For(int  i  =  0;  i  <  solvedCols;  ++i)  {  point[pj]  =  oldX[pj];  }  [CE]  '.class'  expected  [FE]      AssertionFailedError    [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  for(int  i  =  0;  i  <  solvedCols;  ++i)  {  point[pj]  =  oldX[pj];  }  For(int  i  =  0;  i  <  solvedCols;  ++i)  {  point[pj]  =  oldX[pj];  }  [BUGGY]      point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	for(int    i    =    0;    i    <    solvedCols;    ++i)    {    point[pj]    =    oldX[pj];    }    For(int  i  =  0;  i  <  solvedCols;  ++i)  {  point[pj]  =  oldX[pj];  }	  	non-compiled	[CE]  '.class'  expected	61	None	add
419	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  solvedCols;  ++i)  {  point[pj]  =  oldX[pj];  }  int  i  =  0;  i  <  solvedCols;  ++i)  {  point[pj]  =  oldX[pj];  }  [CE]  >  expected  [FE]        AssertionFailedError    [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  for(int  i  =  0;  i  <  solvedCols;  ++i)  {  point[pj]  =  oldX[pj];  }  int  i  =  0;  i  <  solvedCols;  ++i)  {  point[pj]  =  oldX[pj];  }  [BUGGY]      point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	for(int    i    =    0;    i    <    solvedCols;    ++i)    {    point[pj]    =    oldX[pj];    }    int  i  =  0;  i  <  solvedCols;  ++i)  {  point[pj]  =  oldX[pj];  }	  	non-compiled	[CE]  >  expected	61	None	add
420	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  solvedCols;  ++i)  {  point[pj]  =  oldX[pj];  }  for(int  i  =  0;  i  <  solvedCols;  ++i)  {  points[pj]  =  oldX[pj];  }  [CE]  cannot  find  symbol  points  [FE]          AssertionFailedError    [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  for(int  i  =  0;  i  <  solvedCols;  ++i)  {  point[pj]  =  oldX[pj];  }  for(int  i  =  0;  i  <  solvedCols;  ++i)  {  points[pj]  =  oldX[pj];  }  [BUGGY]      point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	for(int    i    =    0;    i    <    solvedCols;    ++i)    {    point[pj]    =    oldX[pj];    }    for(int  i  =  0;  i  <  solvedCols;  ++i)  {  points[pj]  =  oldX[pj];  }	  	non-compiled	[CE]  cannot  find  symbol  points	61	None	add
421	[BUG]  [BUGGY]  ((  VectorialPointValuePair)previousCost).remove(pj,  xNorm,  permutation);  [CE]  inconvertible  types  [FE]                        AssertionFailedError      [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  ((  VectorialPointValuePair)previousCost).remove(pj,  xNorm,  permutation);  [BUGGY]      point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	((  VectorialPointValuePair)previousCost).remove(pj,  xNorm,  permutation);	  ((    VectorialPointValuePair)previousCost).remove(pj,    permutation);    	non-compiled	[CE]  inconvertible  types	108	None	replace
422	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  point[pj]    =    cost;    point[pj]  =  cost;  point[pj]  =  cost;  point[pj]  =  cost;  [BUGGY]      }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	add	point[pj]        =        cost;        point[pj]    =    cost;    point[pj]  =  cost;  point[pj]  =  cost;	  	compilable	  [FE]  AssertionFailedError  	38	2	add
423	[BUG]  [BUGGY]  point[pj]    =    cost;    point[pj]  =  cost;  point[pj]  =  cost;  point[pj]  =  cost;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  point[pj]    =    cost;    point[pj]  =  cost;  point[pj]  =  cost;  point[pj]  =  cost;  [BUGGY]      }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	point[pj]        =        cost;        point[pj]    =    cost;    point[pj]  =  cost;  point[pj]  =  cost;	  	compilable	  [FE]  AssertionFailedError  	38	2	add
424	[BUG]  [BUGGY]  point[pj]    =    cost;    point[pj]  =  cost;  points[pj]  =  cost;  point[pj]  =  cost;  [CE]  cannot  find  symbol  points  [FE]      AssertionFailedError    [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  point[pj]    =    cost;    point[pj]  =  cost;  points[pj]  =  cost;  point[pj]  =  cost;  [BUGGY]      }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	point[pj]        =        cost;        point[pj]    =    cost;    points[pj]  =  cost;  point[pj]  =  cost;	  	non-compiled	[CE]  cannot  find  symbol  points	38	None	add
425	[BUG]  [BUGGY]  point[pj]    =    cost;    point[pj]  =  cost;  point[pj]  =  Cost;  point[pj]  =  cost;  [CE]  cannot  find  symbol  Cost  [FE]        AssertionFailedError    [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  point[pj]    =    cost;    point[pj]  =  cost;  point[pj]  =  Cost;  point[pj]  =  cost;  [BUGGY]      }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	point[pj]        =        cost;        point[pj]    =    cost;    point[pj]  =  Cost;  point[pj]  =  cost;	  	non-compiled	[CE]  cannot  find  symbol  Cost	38	None	add
426	[BUG]  [BUGGY]  point[pj]    =    cost;    point[pj]  =  cost;  Point[pj]  =  cost;  point[pj]  =  cost;  [CE]  cannot  find  symbol  Point  [FE]          AssertionFailedError    [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  point[pj]    =    cost;    point[pj]  =  cost;  Point[pj]  =  cost;  point[pj]  =  cost;  [BUGGY]      }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	point[pj]        =        cost;        point[pj]    =    cost;    Point[pj]  =  cost;  point[pj]  =  cost;	  	non-compiled	[CE]  cannot  find  symbol  Point	38	None	add
427	[BUG]  [BUGGY]  ((  VectorialPointValuePair)pj).remove(pj  -  1);  [CE]  inconvertible  types  [FE]                  AssertionFailedError      [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  ((  VectorialPointValuePair)pj).remove(pj  -  1);  [BUGGY]      point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	((  VectorialPointValuePair)pj).remove(pj  -  1);	  ((    VectorialPointValuePair)previous).remove(pj    -    1);    	non-compiled	[CE]  inconvertible  types	130	None	replace
428	[BUG]  [BUGGY]  ((  VectorialPointValuePair)previous).add(pj  -  1);  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  ((  VectorialPointValuePair)previous).add(pj  -  1);  [BUGGY]      point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	((  VectorialPointValuePair)previous).add(pj  -  1);	  ((    VectorialPointValuePair)previous).remove(pj    -    1);    	non-compiled	[CE]  cannot  find  symbol	130	None	replace
429	[BUG]  [BUGGY]  tmpVec  =  pj,  cost;  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  tmpVec  =  pj,  cost;  [BUGGY]      point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	tmpVec  =  pj,  cost;	  tmpVec    =    pj;    	non-compiled	[CE]  ';'  expected	90	None	replace
430	[BUG]  [BUGGY]  ((  VectorialPointValuePair)previousCost).setIndex(pj,  permutation);  [CE]  inconvertible  types  [FE]                        AssertionFailedError      [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  ((  VectorialPointValuePair)previousCost).setIndex(pj,  permutation);  [BUGGY]      point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	((  VectorialPointValuePair)previousCost).setIndex(pj,  permutation);	  ((    VectorialPointValuePair)previousCost).setIndex(pj,    cost);    	non-compiled	[CE]  inconvertible  types	77	None	replace
431	[BUG]  [BUGGY]  ((  VectorialPointValuePair)previousCost).setIndex(pj,  permutation.length);  [CE]  inconvertible  types  [FE]                          AssertionFailedError      [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  ((  VectorialPointValuePair)previousCost).setIndex(pj,  permutation.length);  [BUGGY]      point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	((  VectorialPointValuePair)previousCost).setIndex(pj,  permutation.length);	  ((    VectorialPointValuePair)previousCost).setIndex(pj,    cost);    	non-compiled	[CE]  inconvertible  types	77	None	replace
432	[BUG]  [BUGGY]  ((  VectorialPointValuePair)previousCost).setIndex(pj,  permutation[j]);  [CE]  inconvertible  types  [FE]                            AssertionFailedError      [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  ((  VectorialPointValuePair)previousCost).setIndex(pj,  permutation[j]);  [BUGGY]      point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	((  VectorialPointValuePair)previousCost).setIndex(pj,  permutation[j]);	  ((    VectorialPointValuePair)previousCost).setIndex(pj,    cost);    	non-compiled	[CE]  inconvertible  types	77	None	replace
433	[BUG]  [BUGGY]  ((  VectorialPointValuePair)previousCost).setIndex(pj,  oldX,  cost);  [CE]  inconvertible  types  [FE]                              AssertionFailedError      [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  ((  VectorialPointValuePair)previousCost).setIndex(pj,  oldX,  cost);  [BUGGY]      point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	((  VectorialPointValuePair)previousCost).setIndex(pj,  oldX,  cost);	  ((    VectorialPointValuePair)previousCost).setIndex(pj,    cost);    	non-compiled	[CE]  inconvertible  types	77	None	replace
434	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  fixedCols;  ++i)  {  point[pj]  =  permutation[j];  }  [CE]  cannot  find  symbol  fixedCols  [FE]    AssertionFailedError    [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  for(int  i  =  0;  i  <  fixedCols;  ++i)  {  point[pj]  =  permutation[j];  }  [BUGGY]      point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	for(int  i  =  0;  i  <  fixedCols;  ++i)  {  point[pj]  =  permutation[j];  }	  for(int    i    =    0;    i    <    solvedCols;    ++i)    {    point[pj]    =    permutation[j];    }    	non-compiled	[CE]  cannot  find  symbol  fixedCols	64	None	replace
435	[BUG]  [BUGGY]  ((  VectorialPointValuePair)point[pj]).setValue(value);  [CE]  cannot  find  symbol  value  [FE]            AssertionFailedError      [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  ((  VectorialPointValuePair)point[pj]).setValue(value);  [BUGGY]      }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	((  VectorialPointValuePair)point[pj]).setValue(value);	  point[pj]    =    xNorm;    ((    VectorialPointValuePair)point[pj]).setValue(value);    	non-compiled	[CE]  cannot  find  symbol  value	134	None	replace
436	[BUG]  [BUGGY]  ((  VectorialPointValuePair)point[pj]).setValue(cost);  [CE]  inconvertible  types  [FE]              AssertionFailedError      [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  ((  VectorialPointValuePair)point[pj]).setValue(cost);  [BUGGY]      }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	((  VectorialPointValuePair)point[pj]).setValue(cost);	  point[pj]    =    xNorm;    ((    VectorialPointValuePair)point[pj]).setValue(value);    	non-compiled	[CE]  inconvertible  types	134	None	replace
437	[BUG]  [BUGGY]  ((  VectorialPointValuePair)previous).setVec(tmpVec);  [CE]  cannot  find  symbol  [FE]        AssertionFailedError      [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  ((  VectorialPointValuePair)previous).setVec(tmpVec);  [BUGGY]      }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	((  VectorialPointValuePair)previous).setVec(tmpVec);	  point[j]    =    oldX[pj];    ((    VectorialPointValuePair)previous).setVec(tmpVec);    	non-compiled	[CE]  cannot  find  symbol	142	None	replace
438	[BUG]  [BUGGY]  ((  VectorialPointValuePair)previous).setVec(pj);  [CE]  cannot  find  symbol  [FE]          AssertionFailedError      [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  ((  VectorialPointValuePair)previous).setVec(pj);  [BUGGY]      }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	((  VectorialPointValuePair)previous).setVec(pj);	  point[j]    =    oldX[pj];    ((    VectorialPointValuePair)previous).setVec(tmpVec);    	non-compiled	[CE]  cannot  find  symbol	142	None	replace
439	[BUG]  [BUGGY]  ((  VectorialPointValuePair)previous).setVec(permutation[j]);  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  ((  VectorialPointValuePair)previous).setVec(permutation[j]);  [BUGGY]      }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	((  VectorialPointValuePair)previous).setVec(permutation[j]);	  point[j]    =    oldX[pj];    ((    VectorialPointValuePair)previous).setVec(tmpVec);    	non-compiled	[CE]  cannot  find  symbol	142	None	replace
440	[BUG]  [BUGGY]  ((  VectorialPointValuePair)previous).setVec(xNorm);  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  ((  VectorialPointValuePair)previous).setVec(xNorm);  [BUGGY]      }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	((  VectorialPointValuePair)previous).setVec(xNorm);	  point[j]    =    oldX[pj];    ((    VectorialPointValuePair)previous).setVec(tmpVec);    	non-compiled	[CE]  cannot  find  symbol	142	None	replace
441	[BUG]  [BUGGY]  point[j]  =  oldRes[pj];  Point[j]  =  oldX[pj];  [CE]  cannot  find  symbol  Point  [FE]              AssertionFailedError      [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  point[j]  =  oldRes[pj];  Point[j]  =  oldX[pj];  [BUGGY]      }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	point[j]  =  oldRes[pj];  Point[j]  =  oldX[pj];	  point[j]    =    oldX[pj];    Point[j]    =    oldX[pj];    	non-compiled	[CE]  cannot  find  symbol  Point	53	None	replace
442	[BUG]  [BUGGY]  Point[j]  =  oldX[pj];  [CE]  cannot  find  symbol  Point  [FE]                AssertionFailedError      [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  Point[j]  =  oldX[pj];  [BUGGY]      }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	Point[j]  =  oldX[pj];	  point[j]    =    oldX[pj];    Point[j]    =    oldX[pj];    	non-compiled	[CE]  cannot  find  symbol  Point	53	None	replace
443	[BUG]  [BUGGY]  points[j]  =  oldX[pj];  [CE]  cannot  find  symbol  points  [FE]                  AssertionFailedError      [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  points[j]  =  oldX[pj];  [BUGGY]      }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	points[j]  =  oldX[pj];	  point[j]    =    oldX[pj];    Point[j]    =    oldX[pj];    	non-compiled	[CE]  cannot  find  symbol  points	53	None	replace
444	[BUG]  [BUGGY]  ((  VectorialPointValuePair)previousCost).remove(pj,  permutation[j]);  [CE]  inconvertible  types  [FE]                      AssertionFailedError      [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  ((  VectorialPointValuePair)previousCost).remove(pj,  permutation[j]);  [BUGGY]      point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	((  VectorialPointValuePair)previousCost).remove(pj,  permutation[j]);	  ((    VectorialPointValuePair)previousCost).remove(pj,    cost);    	non-compiled	[CE]  inconvertible  types	107	None	replace
445	[BUG]  [BUGGY]  ((  VectorialPointValuePair)previousCost).remove(pj,  permutation.length);  [CE]  inconvertible  types  [FE]                        AssertionFailedError      [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  ((  VectorialPointValuePair)previousCost).remove(pj,  permutation.length);  [BUGGY]      point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	((  VectorialPointValuePair)previousCost).remove(pj,  permutation.length);	  ((    VectorialPointValuePair)previousCost).remove(pj,    cost);    	non-compiled	[CE]  inconvertible  types	107	None	replace
446	[BUG]  [BUGGY]  ((  VectorialPointValuePair)previousCost).remove(pj,  permutation[j],  cost);  [CE]  inconvertible  types  [FE]                          AssertionFailedError      [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  ((  VectorialPointValuePair)previousCost).remove(pj,  permutation[j],  cost);  [BUGGY]      point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	((  VectorialPointValuePair)previousCost).remove(pj,  permutation[j],  cost);	  ((    VectorialPointValuePair)previousCost).remove(pj,    cost);    	non-compiled	[CE]  inconvertible  types	107	None	replace
447	[BUG]  [BUGGY]  point[j]  =  oldX[i];  points[j]  =  oldX[pj];  [CE]  cannot  find  symbol  i  [FE]          AssertionFailedError      [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  point[j]  =  oldX[i];  points[j]  =  oldX[pj];  [BUGGY]      }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	point[j]  =  oldX[i];  points[j]  =  oldX[pj];	  point[j]    =    oldX[pj];    points[j]    =    oldX[pj];    	non-compiled	[CE]  cannot  find  symbol  i	51	None	replace
448	[BUG]  [BUGGY]  point[0]  =  cost[pj];  [CE]  array  required,  but  double  found  [FE]    AssertionFailedError    [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  point[0]  =  cost[pj];  [BUGGY]      }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	point[0]  =  cost[pj];	  point[0]    =    permutation[pj];    	non-compiled	[CE]  array  required,  but  double  found	105	None	replace
449	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]      AssertionFailedError    [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  point[0]  =  permutation[pj  -  1];  [BUGGY]      }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	add	point[0]  =  permutation[pj  -  1];	  point[0]    =    permutation[pj];    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	105	15	replace
450	[BUG]  [BUGGY]  point[0]  =  permutation[pj  -  1];  [FE]  ArrayIndexOutOfBoundsException  [FE]      AssertionFailedError    [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  point[0]  =  permutation[pj  -  1];  [BUGGY]      }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	point[0]  =  permutation[pj  -  1];	  point[0]    =    permutation[pj];    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	105	15	replace
451	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  point[1]  =  permutation[pj];  [BUGGY]      }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	add	point[1]  =  permutation[pj];	  point[0]    =    permutation[pj];    	compilable	  [FE]  AssertionFailedError  	105	12	replace
452	[BUG]  [BUGGY]  point[1]  =  permutation[pj];  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  point[1]  =  permutation[pj];  [BUGGY]      }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	point[1]  =  permutation[pj];	  point[0]    =    permutation[pj];    	compilable	  [FE]  AssertionFailedError  	105	12	replace
453	[BUG]  [BUGGY]  point[j]  =  p;  [CE]  cannot  find  symbol  p  [FE]    AssertionFailedError    [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  point[j]  =  p;  [BUGGY]      }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	point[j]  =  p;	  point[j]    =    cost;    	non-compiled	[CE]  cannot  find  symbol  p	95	None	replace
454	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  point[j]  =  1;  [BUGGY]      }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	add	point[j]  =  1;	  point[j]    =    cost;    	compilable	  [FE]  AssertionFailedError  	95	10	replace
455	[BUG]  [BUGGY]  point[j]  =  1;  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  point[j]  =  1;  [BUGGY]      }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	point[j]  =  1;	  point[j]    =    cost;    	compilable	  [FE]  AssertionFailedError  	95	10	replace
456	[BUG]  [BUGGY]  point[pj]  =  value  -  1;  [CE]  cannot  find  symbol  value  [FE]    AssertionFailedError    [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  point[pj]  =  value  -  1;  [BUGGY]      }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	point[pj]  =  value  -  1;	  point[pj]    =    cost    -    1;    	non-compiled	[CE]  cannot  find  symbol  value	123	None	replace
457	[BUG]  [BUGGY]  int  j  =  0;  j  <  solvedCols;  ++j)  {  point[pj]  =  oldX[pj];  }  [CE]  >  expected  [FE]                  AssertionFailedError      [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  int  j  =  0;  j  <  solvedCols;  ++j)  {  point[pj]  =  oldX[pj];  }  [BUGGY]      point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	int  j  =  0;  j  <  solvedCols;  ++j)  {  point[pj]  =  oldX[pj];  }	  for(int    j    =    0;    j    <    solvedCols;    ++i)    {    point[pj]    =    oldX[pj];    }    	non-compiled	[CE]  >  expected	162	None	replace
458	[BUG]  [BUGGY]  ((  VectorialPointValuePair)previous).setVec(oldX);  [CE]  cannot  find  symbol  [FE]        AssertionFailedError      [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  ((  VectorialPointValuePair)previous).setVec(oldX);  [BUGGY]      }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	((  VectorialPointValuePair)previous).setVec(oldX);	  point[j]    =    oldX[pj];    ((    VectorialPointValuePair)previous).setVec(tmpVec);    	non-compiled	[CE]  cannot  find  symbol	142	None	replace
459	[BUG]  [BUGGY]  point[j]  =  tmpVec[pj];  ((  VectorialPointValuePair)previous).setVec(oldX);  [CE]  cannot  find  symbol  [FE]          AssertionFailedError      [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  point[j]  =  tmpVec[pj];  ((  VectorialPointValuePair)previous).setVec(oldX);  [BUGGY]      }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	point[j]  =  tmpVec[pj];  ((  VectorialPointValuePair)previous).setVec(oldX);	  point[j]    =    oldX[pj];    ((    VectorialPointValuePair)previous).setVec(tmpVec);    	non-compiled	[CE]  cannot  find  symbol	142	None	replace
460	[BUG]  [BUGGY]  int  pj  =  oldR[j];  [CE]  variable  pj  is  already  defined  in  method  doOptimize()  [FE]                AssertionFailedError      [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  int  pj  =  oldR[j];  [BUGGY]      point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	int  pj  =  oldR[j];	  int    pj    =    oldNorm[j];    	non-compiled	[CE]  variable  pj  is  already  defined  in  method  doOptimize()	157	None	replace
461	[BUG]  [BUGGY]  point[pj]  =  permutation[j].;  [CE]  <identifier>  expected  [FE]          AssertionFailedError      [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  point[pj]  =  permutation[j].;  [BUGGY]      }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	point[pj]  =  permutation[j].;	  point[pj]    =    permutation[pj];    point[pj]    =    permutation[pj].;    	non-compiled	[CE]  <identifier>  expected	146	None	replace
462	[BUG]  [BUGGY]  point[0]  =  permutation[0].;  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  point[0]  =  permutation[0].;  [BUGGY]      }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	point[0]  =  permutation[0].;	  point[pj]    =    permutation[pj];    point[pj]    =    permutation[pj].;    	non-compiled	[CE]  <identifier>  expected	146	None	replace
463	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  fixedCols;  ++i)  {  point[pj]  =  oldX;  }  [CE]  cannot  find  symbol  fixedCols  [FE]        AssertionFailedError      [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  for(int  i  =  0;  i  <  fixedCols;  ++i)  {  point[pj]  =  oldX;  }  [BUGGY]      point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	for(int  i  =  0;  i  <  fixedCols;  ++i)  {  point[pj]  =  oldX;  }	          for(int    i    =    0;    i    <    solvedCols;    ++i)    {    point[pj]    =    cost;    }    Integer    i    =    0;    i    <    solvedCols;    ++i)    {    point[pj]    =    cost;    }    	non-compiled	[CE]  cannot  find  symbol  fixedCols	136	None	replace
464	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  fixedCols;  ++j)  {  point[j]  =  oldX[j];  }  [CE]  variable  j  is  already  defined  in  method  doOptimize()  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  for(int  j  =  0;  j  <  fixedCols;  ++j)  {  point[j]  =  oldX[j];  }  [BUGGY]      point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	for(int  j  =  0;  j  <  fixedCols;  ++j)  {  point[j]  =  oldX[j];  }	  for(int    j    =    0;    j    <    solvedCols;    ++j)    {    point[j]    =    oldX[j];    }    	non-compiled	[CE]  variable  j  is  already  defined  in  method  doOptimize()	121	None	replace
465	[BUG]  [BUGGY]  ((  VectorialPointValuePair)pj).remove(oldX,  pj);  [CE]  inconvertible  types  [FE]              AssertionFailedError      [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  ((  VectorialPointValuePair)pj).remove(oldX,  pj);  [BUGGY]      point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	((  VectorialPointValuePair)pj).remove(oldX,  pj);	  ((    VectorialPointValuePair)pj).remove(oldX);    	non-compiled	[CE]  inconvertible  types	160	None	replace
466	[BUG]  [BUGGY]  ((  VectorialPointValuePair)pj).remove(oldX,  oldRes);  [CE]  inconvertible  types  [FE]                AssertionFailedError      [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  ((  VectorialPointValuePair)pj).remove(oldX,  oldRes);  [BUGGY]      point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	((  VectorialPointValuePair)pj).remove(oldX,  oldRes);	  ((    VectorialPointValuePair)pj).remove(oldX);    	non-compiled	[CE]  inconvertible  types	160	None	replace
467	[BUG]  [BUGGY]  ((  VectorialPointValuePair)oldX).remove(0);  [CE]  inconvertible  types  [FE]                  AssertionFailedError      [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  ((  VectorialPointValuePair)oldX).remove(0);  [BUGGY]      point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	((  VectorialPointValuePair)oldX).remove(0);	  ((    VectorialPointValuePair)pj).remove(oldX);    	non-compiled	[CE]  inconvertible  types	160	None	replace
468	[BUG]  [BUGGY]  ((  VectorialPointValuePair)point[pj]).setValue(coeff1);  [CE]  inconvertible  types  [FE]            AssertionFailedError      [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  ((  VectorialPointValuePair)point[pj]).setValue(coeff1);  [BUGGY]      }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	((  VectorialPointValuePair)point[pj]).setValue(coeff1);	  point[pj]    =    xNorm;    ((    VectorialPointValuePair)point[pj]).setValue(value);    	non-compiled	[CE]  inconvertible  types	134	None	replace
469	[BUG]  [BUGGY]  ((  VectorialPointValuePair)previousCost).add(point);  [CE]  inconvertible  types  [FE]                    AssertionFailedError      [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  ((  VectorialPointValuePair)previousCost).add(point);  [BUGGY]      point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	((  VectorialPointValuePair)previousCost).add(point);	  ((    VectorialPointValuePair)previousCost).remove(point);    	non-compiled	[CE]  inconvertible  types	110	None	replace
470	[BUG]  [BUGGY]  point[pj]  =  Cost.parseValue(xNorm,  cost);  [CE]  cannot  find  symbol  Cost  [FE]              AssertionFailedError      [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  point[pj]  =  Cost.parseValue(xNorm,  cost);  [BUGGY]      }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	point[pj]  =  Cost.parseValue(xNorm,  cost);	  point[pj]    =    Cost.parseValue(xNorm);    	non-compiled	[CE]  cannot  find  symbol  Cost	79	None	replace
471	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError      [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  point[pj]  =  point[pj];  [BUGGY]      }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	add	point[pj]  =  point[pj];	  point[pj]    =    permutation[pj];    int    point[pj]    =    permutation[pj];    	compilable	  [FE]  AssertionFailedError  	17	12	replace
472	[BUG]  [BUGGY]  point[pj]  =  point[pj];  [FE]  AssertionFailedError  [FE]            AssertionFailedError      [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  point[pj]  =  point[pj];  [BUGGY]      }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	point[pj]  =  point[pj];	  point[pj]    =    permutation[pj];    int    point[pj]    =    permutation[pj];    	compilable	  [FE]  AssertionFailedError  	17	12	replace
473	[BUG]  [BUGGY]  int  point[pj]  =  permutation[pj];  [CE]  ']'  expected  [FE]              AssertionFailedError      [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  int  point[pj]  =  permutation[pj];  [BUGGY]      }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	int  point[pj]  =  permutation[pj];	  point[pj]    =    permutation[pj];    int    point[pj]    =    permutation[pj];    	non-compiled	[CE]  ']'  expected	17	None	replace
474	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  solvedCols;  ++i)  {  point[j]  =  oldX[j];  }  [CE]  variable  j  is  already  defined  in  method  doOptimize()  [FE]        ArrayIndexOutOfBoundsException      [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  for(int  j  =  0;  j  <  solvedCols;  ++i)  {  point[j]  =  oldX[j];  }  [BUGGY]      point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	for(int  j  =  0;  j  <  solvedCols;  ++i)  {  point[j]  =  oldX[j];  }	          for(int    i    =    0;    j    <    solvedCols;    ++i)    {    point[pj]    =    oldX[i];    }    if(i    >    0)    {    for(int    i    =    0;    j    <    solvedCols;    ++i)    {    point[pj]    =    oldX[i];    }    }    	non-compiled	[CE]  variable  j  is  already  defined  in  method  doOptimize()	163	None	replace
475	[BUG]  [BUGGY]  ((  VectorialPointValuePair)point[pj]).setValue(xNorm);  [CE]  inconvertible  types  [FE]          AssertionFailedError      [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  ((  VectorialPointValuePair)point[pj]).setValue(xNorm);  [BUGGY]      }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	((  VectorialPointValuePair)point[pj]).setValue(xNorm);	  point[pj]    =    xNorm;    ((    VectorialPointValuePair)point[pj]).setValue(xNorm);    	non-compiled	[CE]  inconvertible  types	159	None	replace
476	[BUG]  [BUGGY]  ((  VectorialPointValuePair)point[0]).setValue(xNorm);  [CE]  inconvertible  types  [FE]            AssertionFailedError      [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  ((  VectorialPointValuePair)point[0]).setValue(xNorm);  [BUGGY]      }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	((  VectorialPointValuePair)point[0]).setValue(xNorm);	  point[pj]    =    xNorm;    ((    VectorialPointValuePair)point[pj]).setValue(xNorm);    	non-compiled	[CE]  inconvertible  types	159	None	replace
477	[BUG]  [BUGGY]  ((  VectorialPointValuePair)pj).setIndex(oldX[pj  -  1);  [CE]  ']'  expected  [FE]              AssertionFailedError      [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  ((  VectorialPointValuePair)pj).setIndex(oldX[pj  -  1);  [BUGGY]      point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	((  VectorialPointValuePair)pj).setIndex(oldX[pj  -  1);	  ((    VectorialPointValuePair)previous).setIndex(pj    -    1);    	non-compiled	[CE]  ']'  expected	11	None	replace
478	[BUG]  [BUGGY]  ((  VectorialPointValuePair)last).setIndex(pj  -  1);  [CE]  cannot  find  symbol  last  [FE]                AssertionFailedError      [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  ((  VectorialPointValuePair)last).setIndex(pj  -  1);  [BUGGY]      point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	((  VectorialPointValuePair)last).setIndex(pj  -  1);	  ((    VectorialPointValuePair)previous).setIndex(pj    -    1);    	non-compiled	[CE]  cannot  find  symbol  last	11	None	replace
479	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  permutation.length;  ++i)  {  point[pj]  =  value;  }  [CE]  cannot  find  symbol  value  [FE]          AssertionFailedError      [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  for(int  i  =  0;  i  <  permutation.length;  ++i)  {  point[pj]  =  value;  }  [BUGGY]      point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	for(int  i  =  0;  i  <  permutation.length;  ++i)  {  point[pj]  =  value;  }	          for(int    i    =    0;    i    <    solvedCols;    ++i)    {    point[pj]    =    cost;    }    For(int    i    =    0;    i    <    solvedCols;    ++i)    {    point[pj]    =    cost;    }    	non-compiled	[CE]  cannot  find  symbol  value	68	None	replace
480	[BUG]  [BUGGY]  point[j]  =  VectorialPointValuePair.setIndex(pj);  [CE]  cannot  find  symbol  [FE]          AssertionFailedError      [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  point[j]  =  VectorialPointValuePair.setIndex(pj);  [BUGGY]      }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	point[j]  =  VectorialPointValuePair.setIndex(pj);	  point[j]    =    oldX[pj];    ((    VectorialPointValuePair)point[j]).setIndex(pj);    	non-compiled	[CE]  cannot  find  symbol	143	None	replace
481	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  point[j]  =  oldX[pj  -  1]  +  cost;  [BUGGY]      }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	add	point[j]  =  oldX[pj  -  1]  +  cost;	  point[j]    =    oldX[pj    -    1];    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	170	15	replace
482	[BUG]  [BUGGY]  point[j]  =  oldX[pj  -  1]  +  cost;  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  point[j]  =  oldX[pj  -  1]  +  cost;  [BUGGY]      }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	point[j]  =  oldX[pj  -  1]  +  cost;	  point[j]    =    oldX[pj    -    1];    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	170	15	replace
483	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  fixedCols;  ++j)  {  point[pj]  =  oldX[j];  }  [CE]  variable  j  is  already  defined  in  method  doOptimize()  [FE]        ArrayIndexOutOfBoundsException      [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  for(int  j  =  0;  j  <  fixedCols;  ++j)  {  point[pj]  =  oldX[j];  }  [BUGGY]      point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	for(int  j  =  0;  j  <  fixedCols;  ++j)  {  point[pj]  =  oldX[j];  }	  for(int    j    =    0;    j    <    solvedCols;    ++j)    {    point[pj]    =    oldX[j];    }    	non-compiled	[CE]  variable  j  is  already  defined  in  method  doOptimize()	119	None	replace
484	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  oldX;  ++i)  {  point[pj]  =  cost;  }  if(i  =  0;  i  <  solvedCols;  ++i)  {  point[pj]  =  oldX[pj];  }  [CE]  ')'  expected  [FE]          AssertionFailedError      [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  for(int  i  =  0;  i  <  oldX;  ++i)  {  point[pj]  =  cost;  }  if(i  =  0;  i  <  solvedCols;  ++i)  {  point[pj]  =  oldX[pj];  }  [BUGGY]      point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	for(int  i  =  0;  i  <  oldX;  ++i)  {  point[pj]  =  cost;  }  if(i  =  0;  i  <  solvedCols;  ++i)  {  point[pj]  =  oldX[pj];  }	          for(int    i    =    0;    i    <    solvedCols;    ++i)    {    point[pj]    =    cost;    }    if(i    =    0;    i    <    solvedCols;    ++i)    {    point[pj]    =    cost;    }    	non-compiled	[CE]  ')'  expected	137	None	replace
485	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  fixedCols;  ++i)  {  point[pj]  =  cost;  }  if(i  =  0;  i  <  solvedCols;  ++i)  {  point[pj]  =  oldX[pj];  }  [CE]  ')'  expected  [FE]            AssertionFailedError      [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  for(int  i  =  0;  i  <  fixedCols;  ++i)  {  point[pj]  =  cost;  }  if(i  =  0;  i  <  solvedCols;  ++i)  {  point[pj]  =  oldX[pj];  }  [BUGGY]      point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	for(int  i  =  0;  i  <  fixedCols;  ++i)  {  point[pj]  =  cost;  }  if(i  =  0;  i  <  solvedCols;  ++i)  {  point[pj]  =  oldX[pj];  }	          for(int    i    =    0;    i    <    solvedCols;    ++i)    {    point[pj]    =    cost;    }    if(i    =    0;    i    <    solvedCols;    ++i)    {    point[pj]    =    cost;    }    	non-compiled	[CE]  ')'  expected	137	None	replace
486	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  fixedCols;  ++i)  {  point[pj]  =  cost;  }  if(i  =  0;  i  <  solveCols;  ++i)  {  point[pj]  =  oldX[pj];  }  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  for(int  i  =  0;  i  <  fixedCols;  ++i)  {  point[pj]  =  cost;  }  if(i  =  0;  i  <  solveCols;  ++i)  {  point[pj]  =  oldX[pj];  }  [BUGGY]      point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	for(int  i  =  0;  i  <  fixedCols;  ++i)  {  point[pj]  =  cost;  }  if(i  =  0;  i  <  solveCols;  ++i)  {  point[pj]  =  oldX[pj];  }	          for(int    i    =    0;    i    <    solvedCols;    ++i)    {    point[pj]    =    cost;    }    if(i    =    0;    i    <    solvedCols;    ++i)    {    point[pj]    =    cost;    }    	non-compiled	[CE]  ')'  expected	137	None	replace
487	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  oldX;  ++i)  {  point[pj]  =  cost;  }  if(i  =  0;  i  <  solvedCols;  ++i)  {  point[pj]  =  value;  }  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  for(int  i  =  0;  i  <  oldX;  ++i)  {  point[pj]  =  cost;  }  if(i  =  0;  i  <  solvedCols;  ++i)  {  point[pj]  =  value;  }  [BUGGY]      point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	for(int  i  =  0;  i  <  oldX;  ++i)  {  point[pj]  =  cost;  }  if(i  =  0;  i  <  solvedCols;  ++i)  {  point[pj]  =  value;  }	          for(int    i    =    0;    i    <    solvedCols;    ++i)    {    point[pj]    =    cost;    }    if(i    =    0;    i    <    solvedCols;    ++i)    {    point[pj]    =    cost;    }    	non-compiled	[CE]  ')'  expected	137	None	replace
488	[BUG]  [BUGGY]  timeout  [FE]    AssertionFailedError    [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  for(int  i  =  0;  j  <  solvedCols;  ++i)  {  point[pj]  =  oldX[j];  }  [BUGGY]      point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	add	for(int  i  =  0;  j  <  solvedCols;  ++i)  {  point[pj]  =  oldX[j];  }	  for(int    i    =    0;    i    <    solvedCols;    ++i)    {    point[pj]    =    permutation[j];    }    	compilable	timeout	64	1	replace
489	[BUG]  [BUGGY]  for(int  i  =  0;  j  <  solvedCols;  ++i)  {  point[pj]  =  oldX[j];  }  timeout  [FE]    AssertionFailedError    [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  for(int  i  =  0;  j  <  solvedCols;  ++i)  {  point[pj]  =  oldX[j];  }  [BUGGY]      point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	for(int  i  =  0;  j  <  solvedCols;  ++i)  {  point[pj]  =  oldX[j];  }	  for(int    i    =    0;    i    <    solvedCols;    ++i)    {    point[pj]    =    permutation[j];    }    	compilable	timeout	64	1	replace
490	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  for(int  i  =  0;  i  <  solvedCols;  ++i)  {  point[pj]  =  oldX[j];  }  [BUGGY]      point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	add	for(int  i  =  0;  i  <  solvedCols;  ++i)  {  point[pj]  =  oldX[j];  }	  for(int    i    =    0;    i    <    solvedCols;    ++i)    {    point[pj]    =    permutation[j];    }    	compilable	  [FE]  AssertionFailedError  	64	6	replace
491	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  solvedCols;  ++i)  {  point[pj]  =  oldX[j];  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  for(int  i  =  0;  i  <  solvedCols;  ++i)  {  point[pj]  =  oldX[j];  }  [BUGGY]      point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	for(int  i  =  0;  i  <  solvedCols;  ++i)  {  point[pj]  =  oldX[j];  }	  for(int    i    =    0;    i    <    solvedCols;    ++i)    {    point[pj]    =    permutation[j];    }    	compilable	  [FE]  AssertionFailedError  	64	6	replace
492	[BUG]  [BUGGY]  int  i  =  0;  i  <  solvedCols;  ++i)  {  point[pj]  =  oldX[j];  }  [CE]  >  expected  [FE]        AssertionFailedError    [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  int  i  =  0;  i  <  solvedCols;  ++i)  {  point[pj]  =  oldX[j];  }  [BUGGY]      point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	int  i  =  0;  i  <  solvedCols;  ++i)  {  point[pj]  =  oldX[j];  }	  for(int    i    =    0;    i    <    solvedCols;    ++i)    {    point[pj]    =    permutation[j];    }    	non-compiled	[CE]  >  expected	64	None	replace
493	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  oldX;  ++i)  {  point[pj]  =  permutation[j];  }  [CE]  bad  operand  types  for  binary  operator  '<'  [FE]          AssertionFailedError    [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  for(int  i  =  0;  i  <  oldX;  ++i)  {  point[pj]  =  permutation[j];  }  [BUGGY]      point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	for(int  i  =  0;  i  <  oldX;  ++i)  {  point[pj]  =  permutation[j];  }	  for(int    i    =    0;    i    <    solvedCols;    ++i)    {    point[pj]    =    permutation[j];    }    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '<'	64	None	replace
494	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  tmpVec  =  new  double[pj];  [BUGGY]      point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	add	tmpVec  =  new  double[pj];	  tmpVec    =    oldX;    	compilable	  [FE]  AssertionFailedError  	89	12	replace
495	[BUG]  [BUGGY]  tmpVec  =  new  double[pj];  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  tmpVec  =  new  double[pj];  [BUGGY]      point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	tmpVec  =  new  double[pj];	  tmpVec    =    oldX;    	compilable	  [FE]  AssertionFailedError  	89	12	replace
496	[BUG]  [BUGGY]  ((  VectorialPointValuePair)point).add(pj);  [CE]  inconvertible  types  [FE]                  AssertionFailedError      [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  ((  VectorialPointValuePair)point).add(pj);  [BUGGY]      point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	((  VectorialPointValuePair)point).add(pj);	  ((    VectorialPointValuePair)point).remove(pj);    	non-compiled	[CE]  inconvertible  types	102	None	replace
497	[BUG]  [BUGGY]  point[pj]  =  xNorm  +  1;  ((  VectorialPointValuePair)point[pj]).doubleValue();  [CE]  inconvertible  types  [FE]    AssertionFailedError    [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  point[pj]  =  xNorm  +  1;  ((  VectorialPointValuePair)point[pj]).doubleValue();  [BUGGY]      }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	point[pj]    =    xNorm    +    1;    ((  VectorialPointValuePair)point[pj]).doubleValue();	  	non-compiled	[CE]  inconvertible  types	86	None	add
498	[BUG]  [BUGGY]  point[pj]  =  xNorm  +  1;  ((  VectorialPointValuePair)point[pj]).setIndex(pj);  [CE]  inconvertible  types  [FE]      AssertionFailedError    [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  point[pj]  =  xNorm  +  1;  ((  VectorialPointValuePair)point[pj]).setIndex(pj);  [BUGGY]      }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	point[pj]    =    xNorm    +    1;    ((  VectorialPointValuePair)point[pj]).setIndex(pj);	  	non-compiled	[CE]  inconvertible  types	86	None	add
499	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  solvedCols;  ++i)  {  point[pj]  =  oldX[pj];  }  if(i  =  0;  i  <  solvedCols;  ++i)  {  point[pj]  =  oldX[pj];  }  [CE]  ')'  expected  [FE]    AssertionFailedError    [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  for(int  i  =  0;  i  <  solvedCols;  ++i)  {  point[pj]  =  oldX[pj];  }  if(i  =  0;  i  <  solvedCols;  ++i)  {  point[pj]  =  oldX[pj];  }  [BUGGY]      point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	for(int    i    =    0;    i    <    solvedCols;    ++i)    {    point[pj]    =    oldX[pj];    }    if(i  =  0;  i  <  solvedCols;  ++i)  {  point[pj]  =  oldX[pj];  }	  	non-compiled	[CE]  ')'  expected	61	None	add
500	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  solvedCols;  ++i)  {  point[pj]  =  oldX[pj];  }  for(int  i  =  0;  i  <  resolvedCols;  ++i)  {  point[pj]  =  oldX[pj];  }  [CE]  cannot  find  symbol  resolvedCols  [FE]      AssertionFailedError    [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  for(int  i  =  0;  i  <  solvedCols;  ++i)  {  point[pj]  =  oldX[pj];  }  for(int  i  =  0;  i  <  resolvedCols;  ++i)  {  point[pj]  =  oldX[pj];  }  [BUGGY]      point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	for(int    i    =    0;    i    <    solvedCols;    ++i)    {    point[pj]    =    oldX[pj];    }    for(int  i  =  0;  i  <  resolvedCols;  ++i)  {  point[pj]  =  oldX[pj];  }	  	non-compiled	[CE]  cannot  find  symbol  resolvedCols	61	None	add
501	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  point[j]  =  oldX[0];  [BUGGY]      }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	add	point[j]  =  oldX[0];	  point[j]    =    oldX[pj];    point[j]    =    oldX[pj];    	compilable	  [FE]  AssertionFailedError  	50	11	replace
502	[BUG]  [BUGGY]  point[j]  =  oldX[0];  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  point[j]  =  oldX[0];  [BUGGY]      }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	point[j]  =  oldX[0];	  point[j]    =    oldX[pj];    point[j]    =    oldX[pj];    	compilable	  [FE]  AssertionFailedError  	50	11	replace
503	[BUG]  [BUGGY]  point[j]  =  oldX[pj];  points[j]  =  oldY[pj];  [CE]  cannot  find  symbol  points  [FE]          AssertionFailedError      [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  point[j]  =  oldX[pj];  points[j]  =  oldY[pj];  [BUGGY]      }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	point[j]  =  oldX[pj];  points[j]  =  oldY[pj];	  point[j]    =    oldX[pj];    points[j]    =    oldX[pj];    	non-compiled	[CE]  cannot  find  symbol  points	51	None	replace
504	[BUG]  [BUGGY]  point[j]  =  oldX[pj];  points[j]  =  oldRes[pj];  [CE]  cannot  find  symbol  points  [FE]            AssertionFailedError      [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  point[j]  =  oldX[pj];  points[j]  =  oldRes[pj];  [BUGGY]      }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	point[j]  =  oldX[pj];  points[j]  =  oldRes[pj];	  point[j]    =    oldX[pj];    points[j]    =    oldX[pj];    	non-compiled	[CE]  cannot  find  symbol  points	51	None	replace
505	[BUG]  [BUGGY]  int  i  =  0;  i  <  fixedCols;  ++i)  {  point[pj]  =  cost;  }  [CE]  >  expected  [FE]        AssertionFailedError      [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  int  i  =  0;  i  <  fixedCols;  ++i)  {  point[pj]  =  cost;  }  [BUGGY]      point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	int  i  =  0;  i  <  fixedCols;  ++i)  {  point[pj]  =  cost;  }	  int    i    =    0;    i    <    solvedCols;    ++i)    {    point[pj]    =    cost;    }    	non-compiled	[CE]  >  expected	112	None	replace
506	[BUG]  [BUGGY]  int  i  =  0;  i  <  solvedCols;  ++i)  {  point[pj]  =  value;  }  [CE]  >  expected  [FE]          AssertionFailedError      [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  int  i  =  0;  i  <  solvedCols;  ++i)  {  point[pj]  =  value;  }  [BUGGY]      point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	int  i  =  0;  i  <  solvedCols;  ++i)  {  point[pj]  =  value;  }	  int    i    =    0;    i    <    solvedCols;    ++i)    {    point[pj]    =    cost;    }    	non-compiled	[CE]  >  expected	112	None	replace
507	[BUG]  [BUGGY]  ((  VectorialPointValuePair)previous).remove(pj,  oldX);  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  ((  VectorialPointValuePair)previous).remove(pj,  oldX);  [BUGGY]      point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	((  VectorialPointValuePair)previous).remove(pj,  oldX);	  ((    VectorialPointValuePair)previous).remove(pj,    cost);    	non-compiled	[CE]  cannot  find  symbol	37	None	replace
508	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  solvedCols;  ++i)  {  point[pj]  =  oldX[j];  }  [CE]  variable  j  is  already  defined  in  method  doOptimize()  [FE]                AssertionFailedError      [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  for(int  j  =  0;  j  <  solvedCols;  ++i)  {  point[pj]  =  oldX[j];  }  [BUGGY]      point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	for(int  j  =  0;  j  <  solvedCols;  ++i)  {  point[pj]  =  oldX[j];  }	  for(int    i    =    0;    j    <    solvedCols;    ++i)    {    point[pj]    =    permutation[j];    }    timeout    	non-compiled	[CE]  variable  j  is  already  defined  in  method  doOptimize()	81	None	replace
509	[BUG]  [BUGGY]  int  i  =  0;  j  <  solvedCols;  ++i)  {  point[pj]  =  oldX[j];  }  [CE]  >  expected  [FE]                  AssertionFailedError      [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  int  i  =  0;  j  <  solvedCols;  ++i)  {  point[pj]  =  oldX[j];  }  [BUGGY]      point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	int  i  =  0;  j  <  solvedCols;  ++i)  {  point[pj]  =  oldX[j];  }	  for(int    i    =    0;    j    <    solvedCols;    ++i)    {    point[pj]    =    permutation[j];    }    timeout    	non-compiled	[CE]  >  expected	81	None	replace
510	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  point[j]  =  cost;  }  [CE]  variable  j  is  already  defined  in  method  doOptimize()  [FE]                        AssertionFailedError      [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  point[j]  =  cost;  }  [BUGGY]      point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	for(int  j  =  0;  j  <  solvedCols;  ++j)  {  point[j]  =  cost;  }	          for(int    i    =    0;    j    <    solvedCols;    ++i)    {    point[pj]    =    cost;    }    for(int    i    =    0;    j    <    solvedCols;    ++i)    {    point[pj]    =    Cost;    }    	non-compiled	[CE]  variable  j  is  already  defined  in  method  doOptimize()	25	None	replace
511	[BUG]  [BUGGY]  ((  VectorialPointValuePair)previousCost).setIndex(pj  /  1);  [CE]  inconvertible  types  [FE]                  AssertionFailedError      [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  ((  VectorialPointValuePair)previousCost).setIndex(pj  /  1);  [BUGGY]      point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	((  VectorialPointValuePair)previousCost).setIndex(pj  /  1);	  ((    VectorialPointValuePair)previousCost).setIndex(pj    +    1);    	non-compiled	[CE]  inconvertible  types	74	None	replace
512	[BUG]  [BUGGY]  point[pj]  =  cost[pj];  Point[pj]  =  permutation[pj];  [CE]  array  required,  but  double  found  [FE]              AssertionFailedError      [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  point[pj]  =  cost[pj];  Point[pj]  =  permutation[pj];  [BUGGY]      }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	point[pj]  =  cost[pj];  Point[pj]  =  permutation[pj];	  point[pj]    =    permutation[pj];    Point[pj]    =    permutation[pj];    	non-compiled	[CE]  array  required,  but  double  found	18	None	replace
513	[BUG]  [BUGGY]  point[pj]  =  point[pj];  Point[pj]  =  point[pj];  [CE]  cannot  find  symbol  Point  [FE]                AssertionFailedError      [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  point[pj]  =  point[pj];  Point[pj]  =  point[pj];  [BUGGY]      }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	point[pj]  =  point[pj];  Point[pj]  =  point[pj];	  point[pj]    =    permutation[pj];    Point[pj]    =    permutation[pj];    	non-compiled	[CE]  cannot  find  symbol  Point	18	None	replace
514	[BUG]  [BUGGY]  point[pj]  =  cost;  Point[pj]  =  permutation[pj];  [CE]  cannot  find  symbol  Point  [FE]                  AssertionFailedError      [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  point[pj]  =  cost;  Point[pj]  =  permutation[pj];  [BUGGY]      }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	point[pj]  =  cost;  Point[pj]  =  permutation[pj];	  point[pj]    =    permutation[pj];    Point[pj]    =    permutation[pj];    	non-compiled	[CE]  cannot  find  symbol  Point	18	None	replace
515	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  solvedCols;  ++i)  {  point[pj]  =  permutation[j];  }  Integer  i  =  0;  i  <  solvedCols;  ++i)  {  point[pj]  =  permutation[j];  }  [CE]  >  expected  [FE]    AssertionFailedError    [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  for(int  i  =  0;  i  <  solvedCols;  ++i)  {  point[pj]  =  permutation[j];  }  Integer  i  =  0;  i  <  solvedCols;  ++i)  {  point[pj]  =  permutation[j];  }  [BUGGY]      point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	for(int    i    =    0;    i    <    solvedCols;    ++i)    {    point[pj]    =    permutation[j];    }    Integer  i  =  0;  i  <  solvedCols;  ++i)  {  point[pj]  =  permutation[j];  }	  	non-compiled	[CE]  >  expected	63	None	add
516	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  for(int  i  =  0;  i  <  solvedCols;  ++i)  {  point[pj]  =  permutation[j];  }  for(int  i  =  0;  i  <  solvedCols;  ++i)  {  point[pj]  =  oldX[j];  }  [BUGGY]      point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	add	for(int    i    =    0;    i    <    solvedCols;    ++i)    {    point[pj]    =    permutation[j];    }    for(int  i  =  0;  i  <  solvedCols;  ++i)  {  point[pj]  =  oldX[j];  }	  	compilable	  [FE]  AssertionFailedError  	63	2	add
517	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  solvedCols;  ++i)  {  point[pj]  =  permutation[j];  }  for(int  i  =  0;  i  <  solvedCols;  ++i)  {  point[pj]  =  oldX[j];  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  for(int  i  =  0;  i  <  solvedCols;  ++i)  {  point[pj]  =  permutation[j];  }  for(int  i  =  0;  i  <  solvedCols;  ++i)  {  point[pj]  =  oldX[j];  }  [BUGGY]      point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	for(int    i    =    0;    i    <    solvedCols;    ++i)    {    point[pj]    =    permutation[j];    }    for(int  i  =  0;  i  <  solvedCols;  ++i)  {  point[pj]  =  oldX[j];  }	  	compilable	  [FE]  AssertionFailedError  	63	2	add
518	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  solvedCols;  ++i)  {  point[j]  =  cost;  }  [CE]  variable  j  is  already  defined  in  method  doOptimize()  [FE]                      AssertionFailedError      [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  for(int  j  =  0;  j  <  solvedCols;  ++i)  {  point[j]  =  cost;  }  [BUGGY]      point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	for(int  j  =  0;  j  <  solvedCols;  ++i)  {  point[j]  =  cost;  }	          for(int    i    =    0;    j    <    solvedCols;    ++i)    {    point[pj]    =    cost;    }    for(int    i    =    0;    j    <    resolvedCols;    ++i)    {    point[pj]    =    cost;    }    	non-compiled	[CE]  variable  j  is  already  defined  in  method  doOptimize()	24	None	replace
519	[BUG]  [BUGGY]  for(int  i  =  0;  j  <  resolvedCost;  ++i)  {  point[pj]  =  cost;  }  [CE]  cannot  find  symbol  resolvedCost  [FE]                        AssertionFailedError      [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  for(int  i  =  0;  j  <  resolvedCost;  ++i)  {  point[pj]  =  cost;  }  [BUGGY]      point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	for(int  i  =  0;  j  <  resolvedCost;  ++i)  {  point[pj]  =  cost;  }	          for(int    i    =    0;    j    <    solvedCols;    ++i)    {    point[pj]    =    cost;    }    for(int    i    =    0;    j    <    resolvedCols;    ++i)    {    point[pj]    =    cost;    }    	non-compiled	[CE]  cannot  find  symbol  resolvedCost	24	None	replace
520	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  solvedCols;  ++i)  {  point[pj]  =  cost;  }  [CE]  variable  j  is  already  defined  in  method  doOptimize()  [FE]                          AssertionFailedError      [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  for(int  j  =  0;  j  <  solvedCols;  ++i)  {  point[pj]  =  cost;  }  [BUGGY]      point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	for(int  j  =  0;  j  <  solvedCols;  ++i)  {  point[pj]  =  cost;  }	          for(int    i    =    0;    j    <    solvedCols;    ++i)    {    point[pj]    =    cost;    }    for(int    i    =    0;    j    <    resolvedCols;    ++i)    {    point[pj]    =    cost;    }    	non-compiled	[CE]  variable  j  is  already  defined  in  method  doOptimize()	24	None	replace
521	[BUG]  [BUGGY]          for(int    i    =    0;    j    <    solvedCols;    ++i)    {    point[pj]    =    oldX[i];    }    for(int  i  =  0;  j  <  solvedCols;  ++i)  {  point[pj]  =  oldX[i];  }  int  pj  =  permutation[j];  [CE]  variable  pj  is  already  defined  in  method  doOptimize()  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]          for(int    i    =    0;    j    <    solvedCols;    ++i)    {    point[pj]    =    oldX[i];    }    for(int  i  =  0;  j  <  solvedCols;  ++i)  {  point[pj]  =  oldX[i];  }  int  pj  =  permutation[j];  [BUGGY]      point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	                for(int        i        =        0;        j        <        solvedCols;        ++i)        {        point[pj]        =        oldX[i];        }        for(int    i    =    0;    j    <    solvedCols;    ++i)    {    point[pj]    =    oldX[i];    }    int  pj  =  permutation[j];	  	non-compiled	[CE]  variable  pj  is  already  defined  in  method  doOptimize()	44	None	add
522	[BUG]  [BUGGY]          for(int    i    =    0;    j    <    solvedCols;    ++i)    {    point[pj]    =    oldX[i];    }    for(int  i  =  0;  j  <  solvedCols;  ++i)  {  point[pj]  =  oldX[i];  }  ArrayIndexOutOfBoundsException  ex  =  new  ArrayIndexOutOfBoundsException(i);  [CE]  cannot  find  symbol  i  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]          for(int    i    =    0;    j    <    solvedCols;    ++i)    {    point[pj]    =    oldX[i];    }    for(int  i  =  0;  j  <  solvedCols;  ++i)  {  point[pj]  =  oldX[i];  }  ArrayIndexOutOfBoundsException  ex  =  new  ArrayIndexOutOfBoundsException(i);  [BUGGY]      point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	                for(int        i        =        0;        j        <        solvedCols;        ++i)        {        point[pj]        =        oldX[i];        }        for(int    i    =    0;    j    <    solvedCols;    ++i)    {    point[pj]    =    oldX[i];    }    ArrayIndexOutOfBoundsException  ex  =  new  ArrayIndexOutOfBoundsException(i);	  	non-compiled	[CE]  cannot  find  symbol  i	44	None	add
523	[BUG]  [BUGGY]          for(int    i    =    0;    j    <    solvedCols;    ++i)    {    point[pj]    =    oldX[i];    }    for(int  i  =  0;  j  <  solvedCols;  ++i)  {  point[pj]  =  oldX[i];  }  ArrayIndexOutOfBoundsException  ex  =  new  ArrayIndexOutOfBoundsException(tolerance);  [CE]  cannot  find  symbol  tolerance  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]          for(int    i    =    0;    j    <    solvedCols;    ++i)    {    point[pj]    =    oldX[i];    }    for(int  i  =  0;  j  <  solvedCols;  ++i)  {  point[pj]  =  oldX[i];  }  ArrayIndexOutOfBoundsException  ex  =  new  ArrayIndexOutOfBoundsException(tolerance);  [BUGGY]      point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	                for(int        i        =        0;        j        <        solvedCols;        ++i)        {        point[pj]        =        oldX[i];        }        for(int    i    =    0;    j    <    solvedCols;    ++i)    {    point[pj]    =    oldX[i];    }    ArrayIndexOutOfBoundsException  ex  =  new  ArrayIndexOutOfBoundsException(tolerance);	  	non-compiled	[CE]  cannot  find  symbol  tolerance	44	None	add
524	[BUG]  [BUGGY]  tmpVec  =  Math.sqrt(j);  [CE]  incompatible  types  [FE]                AssertionFailedError      [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  tmpVec  =  Math.sqrt(j);  [BUGGY]      point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	tmpVec  =  Math.sqrt(j);	  tmpVec    =    Math.sqrt(lastCost);    	non-compiled	[CE]  incompatible  types	139	None	replace
525	[BUG]  [BUGGY]  ((  VectorialPointValuePair)permutation).remove(pj,  previous);  [CE]  inconvertible  types  [FE]                    AssertionFailedError      [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  ((  VectorialPointValuePair)permutation).remove(pj,  previous);  [BUGGY]      point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	((  VectorialPointValuePair)permutation).remove(pj,  previous);	  ((    VectorialPointValuePair)previous).remove(pj,    permutation);    	non-compiled	[CE]  inconvertible  types	35	None	replace
526	[BUG]  [BUGGY]  int  pj  =  permutation[j  -  1]  +  1;  [CE]  variable  pj  is  already  defined  in  method  doOptimize()  [FE]            AssertionFailedError      [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  int  pj  =  permutation[j  -  1]  +  1;  [BUGGY]      point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	int  pj  =  permutation[j  -  1]  +  1;	  int    pj    =    permutation[j    -    1];    	non-compiled	[CE]  variable  pj  is  already  defined  in  method  doOptimize()	155	None	replace
527	[BUG]  [BUGGY]  int  pj  =  permutation[j  -  1]  +  2;  [CE]  variable  pj  is  already  defined  in  method  doOptimize()  [FE]              AssertionFailedError      [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  int  pj  =  permutation[j  -  1]  +  2;  [BUGGY]      point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	int  pj  =  permutation[j  -  1]  +  2;	  int    pj    =    permutation[j    -    1];    	non-compiled	[CE]  variable  pj  is  already  defined  in  method  doOptimize()	155	None	replace
528	[BUG]  [BUGGY]  tmpVec  =  new  VectorialPointValuePair(pj,  cost);  [CE]  no  suitable  constructor  found  for  VectorialPointValuePair(int,double)  [FE]                  AssertionFailedError      [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  tmpVec  =  new  VectorialPointValuePair(pj,  cost);  [BUGGY]      point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	tmpVec  =  new  VectorialPointValuePair(pj,  cost);	  tmpVec    =    pj;    	non-compiled	[CE]  no  suitable  constructor  found  for  VectorialPointValuePair(int,double)	90	None	replace
529	[BUG]  [BUGGY]  ((  VectorialPointValuePair)pj).remove(previousCost  -  1);  [CE]  inconvertible  types  [FE]                  AssertionFailedError      [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  ((  VectorialPointValuePair)pj).remove(previousCost  -  1);  [BUGGY]      point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	((  VectorialPointValuePair)pj).remove(previousCost  -  1);	  ((    VectorialPointValuePair)previous).remove(pj    -    1);    	non-compiled	[CE]  inconvertible  types	130	None	replace
530	[BUG]  [BUGGY]  ((  VectorialPointValuePair)last).remove(pj  -  1);  [CE]  cannot  find  symbol  last  [FE]                    AssertionFailedError      [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  ((  VectorialPointValuePair)last).remove(pj  -  1);  [BUGGY]      point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	((  VectorialPointValuePair)last).remove(pj  -  1);	  ((    VectorialPointValuePair)previous).remove(pj    -    1);    	non-compiled	[CE]  cannot  find  symbol  last	130	None	replace
531	[BUG]  [BUGGY]  ((  VectorialPointValuePair)previous).remove(pj  *  1);  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  ((  VectorialPointValuePair)previous).remove(pj  *  1);  [BUGGY]      point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	((  VectorialPointValuePair)previous).remove(pj  *  1);	  ((    VectorialPointValuePair)previous).remove(pj    -    1);    	non-compiled	[CE]  cannot  find  symbol	130	None	replace
532	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  oldX;  ++i)  {  int  oldX  =  oldX[i];  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  for(int  i  =  0;  i  <  oldX;  ++i)  {  int  oldX  =  oldX[i];  [BUGGY]      point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	for(int  i  =  0;  i  <  oldX;  ++i)  {  int  oldX  =  oldX[i];	  for(int    i    =    0;    i    <    fixedCols;    ++i)    {    int    oldX    =    oldX[i];    	non-compiled	[CE]  illegal  start  of  expression	57	None	replace
533	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  pj;  ++i)  {  point[pj]  =  oldX[pj];  }  if(i  =  0;  i  <  pj;  ++i)  {  point[pj]  =  oldX[pj];  }  [CE]  ')'  expected  [FE]    AssertionFailedError    [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  for(int  i  =  0;  i  <  pj;  ++i)  {  point[pj]  =  oldX[pj];  }  if(i  =  0;  i  <  pj;  ++i)  {  point[pj]  =  oldX[pj];  }  [BUGGY]      point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	for(int    i    =    0;    i    <    pj;    ++i)    {    point[pj]    =    oldX[pj];    }    if(i  =  0;  i  <  pj;  ++i)  {  point[pj]  =  oldX[pj];  }	  	non-compiled	[CE]  ')'  expected	177	None	add
534	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  pj;  ++i)  {  point[pj]  =  oldX[pj];  }  Integer  pj  =  0;  i  <  pj;  ++i)  {  point[pj]  =  oldX[pj];  }  [CE]  >  expected  [FE]      AssertionFailedError    [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  for(int  i  =  0;  i  <  pj;  ++i)  {  point[pj]  =  oldX[pj];  }  Integer  pj  =  0;  i  <  pj;  ++i)  {  point[pj]  =  oldX[pj];  }  [BUGGY]      point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	for(int    i    =    0;    i    <    pj;    ++i)    {    point[pj]    =    oldX[pj];    }    Integer  pj  =  0;  i  <  pj;  ++i)  {  point[pj]  =  oldX[pj];  }	  	non-compiled	[CE]  >  expected	177	None	add
535	[BUG]  [BUGGY]  points[pj]  =  i;  [CE]  cannot  find  symbol  points  [FE]          AssertionFailedError      [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  points[pj]  =  i;  [BUGGY]      }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	points[pj]  =  i;	  point[pj]    =    xNorm;    points[pj]    =    xNorm;    	non-compiled	[CE]  cannot  find  symbol  points	31	None	replace
536	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  oldRes;  ++i)  {  int  oldX  =  oldX[i];  }  [CE]  bad  operand  types  for  binary  operator  '<'  [FE]              AssertionFailedError      [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  for(int  i  =  0;  i  <  oldRes;  ++i)  {  int  oldX  =  oldX[i];  }  [BUGGY]      point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	for(int  i  =  0;  i  <  oldRes;  ++i)  {  int  oldX  =  oldX[i];  }	  for(int    i    =    0;    i    <    oldRes;    ++i)    {    int    oldX    =    oldX[i];    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '<'	116	None	replace
537	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  oldRes;  ++i)  {  int  point  =  oldX[i];  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  for(int  i  =  0;  i  <  oldRes;  ++i)  {  int  point  =  oldX[i];  [BUGGY]      point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	for(int  i  =  0;  i  <  oldRes;  ++i)  {  int  point  =  oldX[i];	  for(int    i    =    0;    i    <    oldRes;    ++i)    {    int    oldX    =    oldX[i];    	non-compiled	[CE]  illegal  start  of  expression	116	None	replace
538	[BUG]  [BUGGY]  ((  VectorialPointValuePair)previous).setIndex(pj,  oldX);  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  ((  VectorialPointValuePair)previous).setIndex(pj,  oldX);  [BUGGY]      point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	((  VectorialPointValuePair)previous).setIndex(pj,  oldX);	  ((    VectorialPointValuePair)previous).setIndex(pj,    cost);    	non-compiled	[CE]  cannot  find  symbol	12	None	replace
539	[BUG]  [BUGGY]  ((  VectorialPointValuePair)last).setIndex(pj,  cost);  [CE]  cannot  find  symbol  last  [FE]                  AssertionFailedError      [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  ((  VectorialPointValuePair)last).setIndex(pj,  cost);  [BUGGY]      point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	((  VectorialPointValuePair)last).setIndex(pj,  cost);	  ((    VectorialPointValuePair)previous).setIndex(pj,    cost);    	non-compiled	[CE]  cannot  find  symbol  last	12	None	replace
540	[BUG]  [BUGGY]  tmpVec  =  Math.sqrt(oldX);  [CE]  method  sqrt  in  class  Math  cannot  be  applied  to  given  types;  [FE]                AssertionFailedError      [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  tmpVec  =  Math.sqrt(oldX);  [BUGGY]      point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	tmpVec  =  Math.sqrt(oldX);	  tmpVec    =    Math.sqrt(pj);    	non-compiled	[CE]  method  sqrt  in  class  Math  cannot  be  applied  to  given  types;	72	None	replace
541	[BUG]  [BUGGY]  tmpVec  =  Math.sqrt(oldX,  oldX);  [CE]  method  sqrt  in  class  Math  cannot  be  applied  to  given  types;  [FE]                  AssertionFailedError      [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  tmpVec  =  Math.sqrt(oldX,  oldX);  [BUGGY]      point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	tmpVec  =  Math.sqrt(oldX,  oldX);	  tmpVec    =    Math.sqrt(pj);    	non-compiled	[CE]  method  sqrt  in  class  Math  cannot  be  applied  to  given  types;	72	None	replace
542	[BUG]  [BUGGY]  tmpVec  =  Math.sqrt(oldX,  oldRes);  [CE]  method  sqrt  in  class  Math  cannot  be  applied  to  given  types;  [FE]                    AssertionFailedError      [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  tmpVec  =  Math.sqrt(oldX,  oldRes);  [BUGGY]      point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	tmpVec  =  Math.sqrt(oldX,  oldRes);	  tmpVec    =    Math.sqrt(pj);    	non-compiled	[CE]  method  sqrt  in  class  Math  cannot  be  applied  to  given  types;	72	None	replace
543	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  point[pj]  =  -1;  [BUGGY]      }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	add	point[pj]  =  -1;	  point[pj]    =    0;    	compilable	  [FE]  AssertionFailedError  	6	11	replace
544	[BUG]  [BUGGY]  point[pj]  =  -1;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  point[pj]  =  -1;  [BUGGY]      }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	point[pj]  =  -1;	  point[pj]    =    0;    	compilable	  [FE]  AssertionFailedError  	6	11	replace
545	[BUG]  [BUGGY]  ((  VectorialPointValuePair)point).setIndex(pj);  [CE]  inconvertible  types  [FE]                  AssertionFailedError      [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  ((  VectorialPointValuePair)point).setIndex(pj);  [BUGGY]      point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	((  VectorialPointValuePair)point).setIndex(pj);	  ((    VectorialPointValuePair)previous).setIndex(point);    	non-compiled	[CE]  inconvertible  types	13	None	replace
546	[BUG]  [BUGGY]  ((  VectorialPointValuePair)oldX).remove(pj  +  1);  [CE]  inconvertible  types  [FE]              AssertionFailedError      [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  ((  VectorialPointValuePair)oldX).remove(pj  +  1);  [BUGGY]      point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	((  VectorialPointValuePair)oldX).remove(pj  +  1);	  ((    VectorialPointValuePair)oldX).remove(pj);    	non-compiled	[CE]  inconvertible  types	113	None	replace
547	[BUG]  [BUGGY]  tmpVec  =  oldX;  (tmpVec  =  oldX;  [CE]  ')'  expected  [FE]    AssertionFailedError    [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  tmpVec  =  oldX;  (tmpVec  =  oldX;  [BUGGY]      point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	tmpVec    =    oldX;    (tmpVec  =  oldX;	  	non-compiled	[CE]  ')'  expected	88	None	add
548	[BUG]  [BUGGY]  tmpVec  =  oldX;  TmpVec  =  oldX;  [CE]  cannot  find  symbol  TmpVec  [FE]      AssertionFailedError    [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  tmpVec  =  oldX;  TmpVec  =  oldX;  [BUGGY]      point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	tmpVec    =    oldX;    TmpVec  =  oldX;	  	non-compiled	[CE]  cannot  find  symbol  TmpVec	88	None	add
549	[BUG]  [BUGGY]  point[j]  =  permutation[j];  if(pj  >=  0)  {  point[j]  =  permutation[j];  }  else  {  cost  =  previousCost;  for(int  k  =  0;  j  <  solvedCols;  ++j)  {  point[j]  =  permutation[j];  }  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  point[j]  =  permutation[j];  if(pj  >=  0)  {  point[j]  =  permutation[j];  }  else  {  cost  =  previousCost;  for(int  k  =  0;  j  <  solvedCols;  ++j)  {  point[j]  =  permutation[j];  }  [BUGGY]      }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	point[j]    =    permutation[j];    if(pj  >=  0)  {  point[j]  =  permutation[j];  }  else  {  cost  =  previousCost;  for(int  k  =  0;  j  <  solvedCols;  ++j)  {  point[j]  =  permutation[j];  }	  	non-compiled	[CE]  illegal  start  of  expression	98	None	add
550	[BUG]  [BUGGY]  point[j]  =  permutation[j];  if(pj  >=  0)  {  point[j]  =  permutation[j];  }  else  {  cost  =  previousCost;  for(int  i  =  0;  j  <  solvedCols;  ++i)  {  point[j]  =  permutation[j];  }  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  point[j]  =  permutation[j];  if(pj  >=  0)  {  point[j]  =  permutation[j];  }  else  {  cost  =  previousCost;  for(int  i  =  0;  j  <  solvedCols;  ++i)  {  point[j]  =  permutation[j];  }  [BUGGY]      }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	point[j]    =    permutation[j];    if(pj  >=  0)  {  point[j]  =  permutation[j];  }  else  {  cost  =  previousCost;  for(int  i  =  0;  j  <  solvedCols;  ++i)  {  point[j]  =  permutation[j];  }	  	non-compiled	[CE]  illegal  start  of  expression	98	None	add
551	[BUG]  [BUGGY]  point[j]  =  permutation[j];  if(pj  >=  0)  {  point[j]  =  permutation[j];  }  else  {  cost  =  previousCost;  for(int  i  =  0;  i  <  solvedCols;  ++i)  {  point[j]  =  permutation[i];  }  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  point[j]  =  permutation[j];  if(pj  >=  0)  {  point[j]  =  permutation[j];  }  else  {  cost  =  previousCost;  for(int  i  =  0;  i  <  solvedCols;  ++i)  {  point[j]  =  permutation[i];  }  [BUGGY]      }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	point[j]    =    permutation[j];    if(pj  >=  0)  {  point[j]  =  permutation[j];  }  else  {  cost  =  previousCost;  for(int  i  =  0;  i  <  solvedCols;  ++i)  {  point[j]  =  permutation[i];  }	  	non-compiled	[CE]  illegal  start  of  expression	98	None	add
552	[BUG]  [BUGGY]  ((  VectorialPointValuePair)previousCost).setIndex(pj,  oldX);  [CE]  inconvertible  types  [FE]                        AssertionFailedError      [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  ((  VectorialPointValuePair)previousCost).setIndex(pj,  oldX);  [BUGGY]      point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	((  VectorialPointValuePair)previousCost).setIndex(pj,  oldX);	  ((    VectorialPointValuePair)previousCost).setIndex(pj,    cost);    	non-compiled	[CE]  inconvertible  types	77	None	replace
553	[BUG]  [BUGGY]  ((  VectorialPointValuePair)previousCost).setIndex(pj,  oldX[pj]);  [CE]  inconvertible  types  [FE]                          AssertionFailedError      [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  ((  VectorialPointValuePair)previousCost).setIndex(pj,  oldX[pj]);  [BUGGY]      point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	((  VectorialPointValuePair)previousCost).setIndex(pj,  oldX[pj]);	  ((    VectorialPointValuePair)previousCost).setIndex(pj,    cost);    	non-compiled	[CE]  inconvertible  types	77	None	replace
554	[BUG]  [BUGGY]  ((  VectorialPointValuePair)point[0]).setValue(null);  [CE]  inconvertible  types  [FE]        AssertionFailedError      [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  ((  VectorialPointValuePair)point[0]).setValue(null);  [BUGGY]      }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	((  VectorialPointValuePair)point[0]).setValue(null);	  point[pj]    =    xNorm;    ((    VectorialPointValuePair)point[pj]).setValue(null);    	non-compiled	[CE]  inconvertible  types	132	None	replace
555	[BUG]  [BUGGY]  timeout  [FE]                AssertionFailedError      [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  for(int  i  =  0;  j  <  solvedCols;  ++i)  {  point[pj]  =  permutation[j];  }  for(int  i  =  0;  j  <  solvedCols;  ++i)  {  point[pj]  =  oldX[j];  }  [BUGGY]      point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	add	for(int    i    =    0;    j    <    solvedCols;    ++i)    {    point[pj]    =    permutation[j];    }    for(int  i  =  0;  j  <  solvedCols;  ++i)  {  point[pj]  =  oldX[j];  }	  timeout    	compilable	timeout	80	1	add
556	[BUG]  [BUGGY]  for(int  i  =  0;  j  <  solvedCols;  ++i)  {  point[pj]  =  permutation[j];  }  for(int  i  =  0;  j  <  solvedCols;  ++i)  {  point[pj]  =  oldX[j];  }  timeout  [FE]                AssertionFailedError      [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  for(int  i  =  0;  j  <  solvedCols;  ++i)  {  point[pj]  =  permutation[j];  }  for(int  i  =  0;  j  <  solvedCols;  ++i)  {  point[pj]  =  oldX[j];  }  [BUGGY]      point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	for(int    i    =    0;    j    <    solvedCols;    ++i)    {    point[pj]    =    permutation[j];    }    for(int  i  =  0;  j  <  solvedCols;  ++i)  {  point[pj]  =  oldX[j];  }	  timeout    	compilable	timeout	80	1	add
557	[BUG]  [BUGGY]  point[j]  =  permutation[pj];  tmpVec  =  point[j];  [CE]  incompatible  types  [FE]    AssertionFailedError    [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  point[j]  =  permutation[pj];  tmpVec  =  point[j];  [BUGGY]      }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	point[j]    =    permutation[pj];    tmpVec  =  point[j];	  	non-compiled	[CE]  incompatible  types	92	None	add
558	[BUG]  [BUGGY]  point[j]  =  permutation[pj];  tmpVec  =  cost;  [CE]  incompatible  types  [FE]      AssertionFailedError    [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  point[j]  =  permutation[pj];  tmpVec  =  cost;  [BUGGY]      }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	point[j]    =    permutation[pj];    tmpVec  =  cost;	  	non-compiled	[CE]  incompatible  types	92	None	add
559	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  oldY.length;  ++i)  {  int  oldX  =  oldX[i];  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  for(int  i  =  0;  i  <  oldY.length;  ++i)  {  int  oldX  =  oldX[i];  [BUGGY]      point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	for(int  i  =  0;  i  <  oldY.length;  ++i)  {  int  oldX  =  oldX[i];	  for(int    i    =    0;    i    <    oldX.length;    ++i)    {    int    oldX    =    oldX[i];    	non-compiled	[CE]  illegal  start  of  expression	58	None	replace
560	[BUG]  [BUGGY]  point[pj]  =  xNorm;  Point[pj]  =  tmp;  [CE]  cannot  find  symbol  Point  [FE]            AssertionFailedError      [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  point[pj]  =  xNorm;  Point[pj]  =  tmp;  [BUGGY]      }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	point[pj]  =  xNorm;  Point[pj]  =  tmp;	  point[pj]    =    xNorm;    Point[pj]    =    xNorm;    	non-compiled	[CE]  cannot  find  symbol  Point	32	None	replace
561	[BUG]  [BUGGY]  point[pj]  =  tmp;  Point[pj]  =  xNorm;  [CE]  cannot  find  symbol  tmp  [FE]              AssertionFailedError      [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  point[pj]  =  tmp;  Point[pj]  =  xNorm;  [BUGGY]      }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	point[pj]  =  tmp;  Point[pj]  =  xNorm;	  point[pj]    =    xNorm;    Point[pj]    =    xNorm;    	non-compiled	[CE]  cannot  find  symbol  tmp	32	None	replace
562	[BUG]  [BUGGY]  tmpVec  =  Math.sqrt(previousCost,  preRed,  solvedCols);  [CE]  method  sqrt  in  class  Math  cannot  be  applied  to  given  types;  [FE]                  AssertionFailedError      [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  tmpVec  =  Math.sqrt(previousCost,  preRed,  solvedCols);  [BUGGY]      point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	tmpVec  =  Math.sqrt(previousCost,  preRed,  solvedCols);	  tmpVec    =    Math.sqrt(previousCost,    preRed);    	non-compiled	[CE]  method  sqrt  in  class  Math  cannot  be  applied  to  given  types;	73	None	replace
563	[BUG]  [BUGGY]          for(int    i    =    0;    j    <    solvedCols;    ++i)    {    point[pj]    =    cost;    }    for(int  i  =  0;  j  <  solvedCols;  ++i)  {  point[pj]  =  cost;  }  For(int  i  =  0;  j  <  solvedCols;  ++i)  {  point[pj]  =  cost;  }  for(int  i  =  0;  j  <  solvedCols;  ++i)  {  point[pj]  =  cost;  }  [CE]  '.class'  expected  [FE]                AssertionFailedError      [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]          for(int    i    =    0;    j    <    solvedCols;    ++i)    {    point[pj]    =    cost;    }    for(int  i  =  0;  j  <  solvedCols;  ++i)  {  point[pj]  =  cost;  }  For(int  i  =  0;  j  <  solvedCols;  ++i)  {  point[pj]  =  cost;  }  for(int  i  =  0;  j  <  solvedCols;  ++i)  {  point[pj]  =  cost;  }  [BUGGY]      point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	                for(int        i        =        0;        j        <        solvedCols;        ++i)        {        point[pj]        =        cost;        }        for(int    i    =    0;    j    <    solvedCols;    ++i)    {    point[pj]    =    cost;    }    For(int  i  =  0;  j  <  solvedCols;  ++i)  {  point[pj]  =  cost;  }  for(int  i  =  0;  j  <  solvedCols;  ++i)  {  point[pj]  =  cost;  }	  timeout    	non-compiled	[CE]  '.class'  expected	20	None	add
564	[BUG]  [BUGGY]          for(int    i    =    0;    j    <    solvedCols;    ++i)    {    point[pj]    =    cost;    }    for(int  i  =  0;  j  <  solvedCols;  ++i)  {  point[pj]  =  cost;  }  int  i  =  0;  j  <  solvedCols;  ++i)  {  point[pj]  =  cost;  }  [CE]  >  expected  [FE]                  AssertionFailedError      [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]          for(int    i    =    0;    j    <    solvedCols;    ++i)    {    point[pj]    =    cost;    }    for(int  i  =  0;  j  <  solvedCols;  ++i)  {  point[pj]  =  cost;  }  int  i  =  0;  j  <  solvedCols;  ++i)  {  point[pj]  =  cost;  }  [BUGGY]      point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	                for(int        i        =        0;        j        <        solvedCols;        ++i)        {        point[pj]        =        cost;        }        for(int    i    =    0;    j    <    solvedCols;    ++i)    {    point[pj]    =    cost;    }    int  i  =  0;  j  <  solvedCols;  ++i)  {  point[pj]  =  cost;  }	  timeout    	non-compiled	[CE]  >  expected	20	None	add
565	[BUG]  [BUGGY]          for(int    i    =    0;    j    <    solvedCols;    ++i)    {    point[pj]    =    cost;    }    for(int  i  =  0;  j  <  solvedCols;  ++i)  {  point[pj]  =  cost;  }  for(int  i  =  0;  j  <  solvedCols;  ++i)  {  point[pj]  =  cost;  }  for(int  i  =  0;  j  <  solvedCols;  ++i)  {  point[pj]  =  value;  }  [CE]  cannot  find  symbol  value  [FE]                    AssertionFailedError      [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]          for(int    i    =    0;    j    <    solvedCols;    ++i)    {    point[pj]    =    cost;    }    for(int  i  =  0;  j  <  solvedCols;  ++i)  {  point[pj]  =  cost;  }  for(int  i  =  0;  j  <  solvedCols;  ++i)  {  point[pj]  =  cost;  }  for(int  i  =  0;  j  <  solvedCols;  ++i)  {  point[pj]  =  value;  }  [BUGGY]      point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	                for(int        i        =        0;        j        <        solvedCols;        ++i)        {        point[pj]        =        cost;        }        for(int    i    =    0;    j    <    solvedCols;    ++i)    {    point[pj]    =    cost;    }    for(int  i  =  0;  j  <  solvedCols;  ++i)  {  point[pj]  =  cost;  }  for(int  i  =  0;  j  <  solvedCols;  ++i)  {  point[pj]  =  value;  }	  timeout    	non-compiled	[CE]  cannot  find  symbol  value	20	None	add
566	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  point[pj]  =  value;  }  [CE]  variable  j  is  already  defined  in  method  doOptimize()  [FE]                      AssertionFailedError      [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  point[pj]  =  value;  }  [BUGGY]      point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	for(int  j  =  0;  j  <  solvedCols;  ++j)  {  point[pj]  =  value;  }	  for(int    j    =    0;    j    <    solvedCols;    ++j)    {    point[pj]    =    cost;    }    	non-compiled	[CE]  variable  j  is  already  defined  in  method  doOptimize()	85	None	replace
567	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  point[pj]  =  oldX;  }  [CE]  variable  j  is  already  defined  in  method  doOptimize()  [FE]                        AssertionFailedError      [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  point[pj]  =  oldX;  }  [BUGGY]      point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	for(int  j  =  0;  j  <  solvedCols;  ++j)  {  point[pj]  =  oldX;  }	  for(int    j    =    0;    j    <    solvedCols;    ++j)    {    point[pj]    =    cost;    }    	non-compiled	[CE]  variable  j  is  already  defined  in  method  doOptimize()	85	None	replace
568	[BUG]  [BUGGY]  int  oldX  =  oldRes[i];  [CE]  variable  oldX  is  already  defined  in  method  doOptimize()  [FE]              AssertionFailedError      [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  int  oldX  =  oldRes[i];  [BUGGY]      point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	int  oldX  =  oldRes[i];	  int    oldX    =    oldX[i];    	non-compiled	[CE]  variable  oldX  is  already  defined  in  method  doOptimize()	56	None	replace
569	[BUG]  [BUGGY]  int  oldX  =  point[i];  [CE]  variable  oldX  is  already  defined  in  method  doOptimize()  [FE]                AssertionFailedError      [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  int  oldX  =  point[i];  [BUGGY]      point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	int  oldX  =  point[i];	  int    oldX    =    oldX[i];    	non-compiled	[CE]  variable  oldX  is  already  defined  in  method  doOptimize()	56	None	replace
570	[BUG]  [BUGGY]  point[pj]  =  CostRelativeTolerance.EOF;  [CE]  cannot  find  symbol  CostRelativeTolerance  [FE]            AssertionFailedError      [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  point[pj]  =  CostRelativeTolerance.EOF;  [BUGGY]      }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	point[pj]  =  CostRelativeTolerance.EOF;	  point[pj]    =    i;    	non-compiled	[CE]  cannot  find  symbol  CostRelativeTolerance	9	None	replace
571	[BUG]  [BUGGY]  int  j  =  0;  j  <  solvedCols;  ++j)  {  point[pj]  =  oldX[i];  }  [CE]  >  expected  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  int  j  =  0;  j  <  solvedCols;  ++j)  {  point[pj]  =  oldX[i];  }  [BUGGY]      point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	int  j  =  0;  j  <  solvedCols;  ++j)  {  point[pj]  =  oldX[i];  }	  for(int    j    =    0;    j    <    solvedCols;    ++j)    {    point[pj]    =    oldX[i];    }    	non-compiled	[CE]  >  expected	60	None	replace
572	[BUG]  [BUGGY]  point[pj]  =  cost;  points[pj]  =  permutation;  [CE]  cannot  find  symbol  points  [FE]          AssertionFailedError      [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  point[pj]  =  cost;  points[pj]  =  permutation;  [BUGGY]      }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	point[pj]  =  cost;  points[pj]  =  permutation;	  point[pj]    =    cost;    points[pj]    =    cost;    	non-compiled	[CE]  cannot  find  symbol  points	40	None	replace
573	[BUG]  [BUGGY]  point[pj]  =  cost;  points[pj]  =  xNorm;  [CE]  cannot  find  symbol  points  [FE]            AssertionFailedError      [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  point[pj]  =  cost;  points[pj]  =  xNorm;  [BUGGY]      }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	point[pj]  =  cost;  points[pj]  =  xNorm;	  point[pj]    =    cost;    points[pj]    =    cost;    	non-compiled	[CE]  cannot  find  symbol  points	40	None	replace
574	[BUG]  [BUGGY]  point[pj]  =  i;  points[pj]  =  cost;  [CE]  cannot  find  symbol  i  [FE]              AssertionFailedError      [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  point[pj]  =  i;  points[pj]  =  cost;  [BUGGY]      }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	point[pj]  =  i;  points[pj]  =  cost;	  point[pj]    =    cost;    points[pj]    =    cost;    	non-compiled	[CE]  cannot  find  symbol  i	40	None	replace
575	[BUG]  [BUGGY]  for(int  i  =  0;  j  <  k;  ++i)  {  point[pj]  =  oldX[i];  }  if(i  =  0;  j  <  solvedCols;  ++i)  {  point[pj]  =  oldX[i];  }  [CE]  ')'  expected  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  for(int  i  =  0;  j  <  k;  ++i)  {  point[pj]  =  oldX[i];  }  if(i  =  0;  j  <  solvedCols;  ++i)  {  point[pj]  =  oldX[i];  }  [BUGGY]      point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	for(int  i  =  0;  j  <  k;  ++i)  {  point[pj]  =  oldX[i];  }  if(i  =  0;  j  <  solvedCols;  ++i)  {  point[pj]  =  oldX[i];  }	          for(int    i    =    0;    j    <    solvedCols;    ++i)    {    point[pj]    =    oldX[i];    }    if(i    =    0;    j    <    solvedCols;    ++i)    {    point[pj]    =    oldX[i];    }    	non-compiled	[CE]  ')'  expected	128	None	replace
576	[BUG]  [BUGGY]  if(pj!=  0)  {  for(int  i  =  0;  j  <  solvedCols;  ++i)  {  point[pj]  =  oldX[i];  }  [CE]  illegal  start  of  expression  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  if(pj!=  0)  {  for(int  i  =  0;  j  <  solvedCols;  ++i)  {  point[pj]  =  oldX[i];  }  [BUGGY]      point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	if(pj!=  0)  {  for(int  i  =  0;  j  <  solvedCols;  ++i)  {  point[pj]  =  oldX[i];  }	          for(int    i    =    0;    j    <    solvedCols;    ++i)    {    point[pj]    =    oldX[i];    }    if(i    =    0;    j    <    solvedCols;    ++i)    {    point[pj]    =    oldX[i];    }    	non-compiled	[CE]  illegal  start  of  expression	128	None	replace
577	[BUG]  [BUGGY]  for(int  i  =  0;  j  <  k;  ++i)  {  point[pj]  =  oldX[i];  }  if(i  =  0;  j  <  k;  ++i)  {  point[pj]  =  oldX[i];  }  [CE]  ')'  expected  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  for(int  i  =  0;  j  <  k;  ++i)  {  point[pj]  =  oldX[i];  }  if(i  =  0;  j  <  k;  ++i)  {  point[pj]  =  oldX[i];  }  [BUGGY]      point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	for(int  i  =  0;  j  <  k;  ++i)  {  point[pj]  =  oldX[i];  }  if(i  =  0;  j  <  k;  ++i)  {  point[pj]  =  oldX[i];  }	          for(int    i    =    0;    j    <    solvedCols;    ++i)    {    point[pj]    =    oldX[i];    }    if(i    =    0;    j    <    solvedCols;    ++i)    {    point[pj]    =    oldX[i];    }    	non-compiled	[CE]  ')'  expected	128	None	replace
578	[BUG]  [BUGGY]  tmpVec  =  permutation[j]  +  1L;  [CE]  incompatible  types  [FE]                AssertionFailedError      [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  tmpVec  =  permutation[j]  +  1L;  [BUGGY]      point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	tmpVec  =  permutation[j]  +  1L;	  tmpVec    =    permutation[j]    +    1;    	non-compiled	[CE]  incompatible  types	103	None	replace
579	[BUG]  [BUGGY]  tmpVec  =  permutation[j]  +  3;  [CE]  incompatible  types  [FE]                  AssertionFailedError      [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  tmpVec  =  permutation[j]  +  3;  [BUGGY]      point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	tmpVec  =  permutation[j]  +  3;	  tmpVec    =    permutation[j]    +    1;    	non-compiled	[CE]  incompatible  types	103	None	replace
580	[BUG]  [BUGGY]  point[j]  =  oldX[pj];  Point[j]  =  oldY[pj];  [CE]  cannot  find  symbol  Point  [FE]              AssertionFailedError      [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  point[j]  =  oldX[pj];  Point[j]  =  oldY[pj];  [BUGGY]      }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	point[j]  =  oldX[pj];  Point[j]  =  oldY[pj];	  point[j]    =    oldX[pj];    Point[j]    =    oldX[pj];    	non-compiled	[CE]  cannot  find  symbol  Point	53	None	replace
581	[BUG]  [BUGGY]  point[j]  =  oldY[pj];  Point[j]  =  oldX[pj];  [CE]  cannot  find  symbol  oldY  [FE]                AssertionFailedError      [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  point[j]  =  oldY[pj];  Point[j]  =  oldX[pj];  [BUGGY]      }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	point[j]  =  oldY[pj];  Point[j]  =  oldX[pj];	  point[j]    =    oldX[pj];    Point[j]    =    oldX[pj];    	non-compiled	[CE]  cannot  find  symbol  oldY	53	None	replace
582	[BUG]  [BUGGY]  point[j]  =  oldX[pj];  Point[j]  =  oldRes[pj];  [CE]  cannot  find  symbol  Point  [FE]                  AssertionFailedError      [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  point[j]  =  oldX[pj];  Point[j]  =  oldRes[pj];  [BUGGY]      }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	point[j]  =  oldX[pj];  Point[j]  =  oldRes[pj];	  point[j]    =    oldX[pj];    Point[j]    =    oldX[pj];    	non-compiled	[CE]  cannot  find  symbol  Point	53	None	replace
583	[BUG]  [BUGGY]  point[pj]  =  xNorm;  pj]  =  p;  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  point[pj]  =  xNorm;  pj]  =  p;  [BUGGY]      }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	point[pj]  =  xNorm;  pj]  =  p;	  point[pj]    =    xNorm;    pj]    =    xNorm;    	non-compiled	[CE]  not  a  statement	33	None	replace
584	[BUG]  [BUGGY]  int  j  =  0;  j  <  solvedCols;  ++j)  {  point[pj]  =  oldX[j];  }  [CE]  >  expected  [FE]                  AssertionFailedError      [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  int  j  =  0;  j  <  solvedCols;  ++j)  {  point[pj]  =  oldX[j];  }  [BUGGY]      point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	int  j  =  0;  j  <  solvedCols;  ++j)  {  point[pj]  =  oldX[j];  }	  for(int    j    =    0;    j    <    solvedCols;    ++j)    {    point[pj]    =    permutation[j];    }    	non-compiled	[CE]  >  expected	82	None	replace
585	[BUG]  [BUGGY]  ((  VectorialPointValuePair)pj).add(point);  [CE]  inconvertible  types  [FE]              AssertionFailedError      [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  ((  VectorialPointValuePair)pj).add(point);  [BUGGY]      point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	((  VectorialPointValuePair)pj).add(point);	  ((    VectorialPointValuePair)pj).remove(pj);    	non-compiled	[CE]  inconvertible  types	100	None	replace
586	[BUG]  [BUGGY]  int  pj  =  oldX[j]  +  1;  [CE]  variable  pj  is  already  defined  in  method  doOptimize()  [FE]            AssertionFailedError      [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  int  pj  =  oldX[j]  +  1;  [BUGGY]      point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	int  pj  =  oldX[j]  +  1;	  int    pj    =    oldX[j];    	non-compiled	[CE]  variable  pj  is  already  defined  in  method  doOptimize()	26	None	replace
587	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError      [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  point[pj]  =  costRelativeTolerance;  [BUGGY]      }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	add	point[pj]  =  costRelativeTolerance;	  point[pj]    =    CostRelativeTolerance;    	compilable	  [FE]  AssertionFailedError  	78	11	replace
588	[BUG]  [BUGGY]  point[pj]  =  costRelativeTolerance;  [FE]  AssertionFailedError  [FE]            AssertionFailedError      [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  point[pj]  =  costRelativeTolerance;  [BUGGY]      }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	point[pj]  =  costRelativeTolerance;	  point[pj]    =    CostRelativeTolerance;    	compilable	  [FE]  AssertionFailedError  	78	11	replace
589	[BUG]  [BUGGY]  point[pj]    =    permutation[pj];    point[pj]  =  permutation[pj];  Point[pj]  =  permutation[pj];  point[pj]  =  permutation[pj];  [CE]  cannot  find  symbol  Point  [FE]    AssertionFailedError    [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  point[pj]    =    permutation[pj];    point[pj]  =  permutation[pj];  Point[pj]  =  permutation[pj];  point[pj]  =  permutation[pj];  [BUGGY]      }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	point[pj]        =        permutation[pj];        point[pj]    =    permutation[pj];    Point[pj]  =  permutation[pj];  point[pj]  =  permutation[pj];	  	non-compiled	[CE]  cannot  find  symbol  Point	14	None	add
590	[BUG]  [BUGGY]  point[pj]    =    permutation[pj];    point[pj]  =  permutation[pj];  Point[pj]  =  point[pj];  point[pj]  =  permutation[pj];  [CE]  cannot  find  symbol  Point  [FE]      AssertionFailedError    [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  point[pj]    =    permutation[pj];    point[pj]  =  permutation[pj];  Point[pj]  =  point[pj];  point[pj]  =  permutation[pj];  [BUGGY]      }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	point[pj]        =        permutation[pj];        point[pj]    =    permutation[pj];    Point[pj]  =  point[pj];  point[pj]  =  permutation[pj];	  	non-compiled	[CE]  cannot  find  symbol  Point	14	None	add
591	[BUG]  [BUGGY]  ((  VectorialPointValuePair)previousCost).remove(pj,  xNorm);  [CE]  inconvertible  types  [FE]                        AssertionFailedError      [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  ((  VectorialPointValuePair)previousCost).remove(pj,  xNorm);  [BUGGY]      point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	((  VectorialPointValuePair)previousCost).remove(pj,  xNorm);	  ((    VectorialPointValuePair)previousCost).remove(pj,    permutation);    	non-compiled	[CE]  inconvertible  types	108	None	replace
592	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  oldRes;  ++i)  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  for(int  i  =  0;  i  <  oldRes;  ++i)  {  [BUGGY]      point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	for(int  i  =  0;  i  <  oldRes;  ++i)  {	  for(int    i    =    0;    i    <    oldX;    ++i)    {    	non-compiled	[CE]  illegal  start  of  expression	174	None	replace
593	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  oldY;  ++i)  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  for(int  i  =  0;  i  <  oldY;  ++i)  {  [BUGGY]      point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	for(int  i  =  0;  i  <  oldY;  ++i)  {	  for(int    i    =    0;    i    <    oldX;    ++i)    {    	non-compiled	[CE]  illegal  start  of  expression	174	None	replace
594	[BUG]  [BUGGY]  point[pj]  =  cost  -  1;  ((  VectorialPointValuePair)point[pj]).doubleValue();  [CE]  inconvertible  types  [FE]    AssertionFailedError    [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  point[pj]  =  cost  -  1;  ((  VectorialPointValuePair)point[pj]).doubleValue();  [BUGGY]      }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	point[pj]    =    cost    -    1;    ((  VectorialPointValuePair)point[pj]).doubleValue();	  	non-compiled	[CE]  inconvertible  types	122	None	add
595	[BUG]  [BUGGY]  point[pj]  =  cost  -  1;  ((  VectorialPointValuePair)point[pj]).result  -  1;  [CE]  not  a  statement  [FE]      AssertionFailedError    [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  point[pj]  =  cost  -  1;  ((  VectorialPointValuePair)point[pj]).result  -  1;  [BUGGY]      }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	point[pj]    =    cost    -    1;    ((  VectorialPointValuePair)point[pj]).result  -  1;	  	non-compiled	[CE]  not  a  statement	122	None	add
596	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  point[j]  =  cost  +  1;  [BUGGY]      }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	add	point[j]  =  cost  +  1;	  point[j]    =    cost;    	compilable	  [FE]  AssertionFailedError  	95	12	replace
597	[BUG]  [BUGGY]  point[j]  =  cost  +  1;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  point[j]  =  cost  +  1;  [BUGGY]      }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	point[j]  =  cost  +  1;	  point[j]    =    cost;    	compilable	  [FE]  AssertionFailedError  	95	12	replace
598	[BUG]  [BUGGY]  point[j]  =  xNorm;  if(pj!=  0)  {  point[j]  =  xNorm;  }  else  {  cost  =  previousCost;  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  point[j]  =  xNorm;  }  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  point[j]  =  xNorm;  if(pj!=  0)  {  point[j]  =  xNorm;  }  else  {  cost  =  previousCost;  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  point[j]  =  xNorm;  }  [BUGGY]      }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	point[j]    =    xNorm;    if(pj!=  0)  {  point[j]  =  xNorm;  }  else  {  cost  =  previousCost;  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  point[j]  =  xNorm;  }	  	non-compiled	[CE]  illegal  start  of  expression	96	None	add
599	[BUG]  [BUGGY]  point[j]  =  xNorm;  if(pj!=  0)  {  point[j]  =  xNorm;  }  else  {  cost  =  previousCost;  for(int  i  =  0;  j  <  solvedCols;  ++j)  {  point[j]  =  xNorm;  }  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  point[j]  =  xNorm;  if(pj!=  0)  {  point[j]  =  xNorm;  }  else  {  cost  =  previousCost;  for(int  i  =  0;  j  <  solvedCols;  ++j)  {  point[j]  =  xNorm;  }  [BUGGY]      }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	point[j]    =    xNorm;    if(pj!=  0)  {  point[j]  =  xNorm;  }  else  {  cost  =  previousCost;  for(int  i  =  0;  j  <  solvedCols;  ++j)  {  point[j]  =  xNorm;  }	  	non-compiled	[CE]  illegal  start  of  expression	96	None	add
600	[BUG]  [BUGGY]  point[j]  =  xNorm;  if(pj!=  0)  {  point[j]  =  xNorm;  }  else  {  cost  =  previousCost;  for(int  k  =  0;  j  <  solvedCols;  ++j)  {  point[j]  =  xNorm;  }  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  point[j]  =  xNorm;  if(pj!=  0)  {  point[j]  =  xNorm;  }  else  {  cost  =  previousCost;  for(int  k  =  0;  j  <  solvedCols;  ++j)  {  point[j]  =  xNorm;  }  [BUGGY]      }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	point[j]    =    xNorm;    if(pj!=  0)  {  point[j]  =  xNorm;  }  else  {  cost  =  previousCost;  for(int  k  =  0;  j  <  solvedCols;  ++j)  {  point[j]  =  xNorm;  }	  	non-compiled	[CE]  illegal  start  of  expression	96	None	add
601	[BUG]  [BUGGY]  point[j]  =  xNorm;  if(pj!=  0)  {  point[j]  =  xNorm;  }  else  {  cost  =  previousCost;  for(int  i  =  0;  j  <  solvedCols;  ++i)  {  point[j]  =  xNorm;  }  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  point[j]  =  xNorm;  if(pj!=  0)  {  point[j]  =  xNorm;  }  else  {  cost  =  previousCost;  for(int  i  =  0;  j  <  solvedCols;  ++i)  {  point[j]  =  xNorm;  }  [BUGGY]      }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	point[j]    =    xNorm;    if(pj!=  0)  {  point[j]  =  xNorm;  }  else  {  cost  =  previousCost;  for(int  i  =  0;  j  <  solvedCols;  ++i)  {  point[j]  =  xNorm;  }	  	non-compiled	[CE]  illegal  start  of  expression	96	None	add
602	[BUG]  [BUGGY]          for(int    i    =    0;    i    <    solvedCols;    ++i)    {    point[pj]    =    cost;    }    for(int  i  =  0;  i  <  solvedCols;  ++i)  {  point[pj]  =  cost;  }  int  i  =  0;  i  <  solvedCols;  ++i)  {  point[pj]  =  cost;  }  for(int  i  =  0;  i  <  solvedCols;  ++i)  {  point[pj]  =  cost;  }  [CE]  >  expected  [FE]    AssertionFailedError    [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]          for(int    i    =    0;    i    <    solvedCols;    ++i)    {    point[pj]    =    cost;    }    for(int  i  =  0;  i  <  solvedCols;  ++i)  {  point[pj]  =  cost;  }  int  i  =  0;  i  <  solvedCols;  ++i)  {  point[pj]  =  cost;  }  for(int  i  =  0;  i  <  solvedCols;  ++i)  {  point[pj]  =  cost;  }  [BUGGY]      point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	                for(int        i        =        0;        i        <        solvedCols;        ++i)        {        point[pj]        =        cost;        }        for(int    i    =    0;    i    <    solvedCols;    ++i)    {    point[pj]    =    cost;    }    int  i  =  0;  i  <  solvedCols;  ++i)  {  point[pj]  =  cost;  }  for(int  i  =  0;  i  <  solvedCols;  ++i)  {  point[pj]  =  cost;  }	  	non-compiled	[CE]  >  expected	66	None	add
603	[BUG]  [BUGGY]  ((  VectorialPointValuePair)previous).setIndex(point  +  1);  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]            AssertionFailedError      [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  ((  VectorialPointValuePair)previous).setIndex(point  +  1);  [BUGGY]      point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	((  VectorialPointValuePair)previous).setIndex(point  +  1);	  ((    VectorialPointValuePair)previous).setIndex(pj    +    1);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	10	None	replace
604	[BUG]  [BUGGY]  ((  VectorialPointValuePair)pj).setIndex(oldX[pj  +  1);  [CE]  ']'  expected  [FE]              AssertionFailedError      [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  ((  VectorialPointValuePair)pj).setIndex(oldX[pj  +  1);  [BUGGY]      point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	((  VectorialPointValuePair)pj).setIndex(oldX[pj  +  1);	  ((    VectorialPointValuePair)previous).setIndex(pj    +    1);    	non-compiled	[CE]  ']'  expected	10	None	replace
605	[BUG]  [BUGGY]  point[pj]  =  cost;  Point[pj]  =  previousCost;  [CE]  cannot  find  symbol  Point  [FE]              AssertionFailedError      [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  point[pj]  =  cost;  Point[pj]  =  previousCost;  [BUGGY]      }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	point[pj]  =  cost;  Point[pj]  =  previousCost;	  point[pj]    =    cost;    Point[pj]    =    cost;    	non-compiled	[CE]  cannot  find  symbol  Point	42	None	replace
606	[BUG]  [BUGGY]  point[pj]  =  cost;  Point[pj]  =  nextCost;  [CE]  cannot  find  symbol  Point  [FE]                AssertionFailedError      [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  point[pj]  =  cost;  Point[pj]  =  nextCost;  [BUGGY]      }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	point[pj]  =  cost;  Point[pj]  =  nextCost;	  point[pj]    =    cost;    Point[pj]    =    cost;    	non-compiled	[CE]  cannot  find  symbol  Point	42	None	replace
607	[BUG]  [BUGGY]  point[pj]    =    xNorm;    point[pj]  =  xNorm;  point[pj]  =  iNorm;  point[pj]  =  iNorm;  [CE]  cannot  find  symbol  iNorm  [FE]    AssertionFailedError    [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  point[pj]    =    xNorm;    point[pj]  =  xNorm;  point[pj]  =  iNorm;  point[pj]  =  iNorm;  [BUGGY]      }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	point[pj]        =        xNorm;        point[pj]    =    xNorm;    point[pj]  =  iNorm;  point[pj]  =  iNorm;	  	non-compiled	[CE]  cannot  find  symbol  iNorm	29	None	add
608	[BUG]  [BUGGY]  point[pj]  =  cost?  permutation[pj]  :  tmp;  [CE]  incompatible  types  [FE]          AssertionFailedError      [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  point[pj]  =  cost?  permutation[pj]  :  tmp;  [BUGGY]      }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	point[pj]  =  cost?  permutation[pj]  :  tmp;	  point[pj]    =    cost?    permutation[pj]    :    xNorm;    	non-compiled	[CE]  incompatible  types	151	None	replace
609	[BUG]  [BUGGY]  point[pj]  =  cost?  permutation[pj]  :  jacNorm;  [CE]  incompatible  types  [FE]            AssertionFailedError      [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  point[pj]  =  cost?  permutation[pj]  :  jacNorm;  [BUGGY]      }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	point[pj]  =  cost?  permutation[pj]  :  jacNorm;	  point[pj]    =    cost?    permutation[pj]    :    xNorm;    	non-compiled	[CE]  incompatible  types	151	None	replace
610	[BUG]  [BUGGY]  point[j]    =    oldX[pj];    point[j]  =  oldX[pj];  point[j]  =  oldY[pj];  point[j]  =  oldY[pj];  [CE]  cannot  find  symbol  oldY  [FE]    AssertionFailedError    [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  point[j]    =    oldX[pj];    point[j]  =  oldX[pj];  point[j]  =  oldY[pj];  point[j]  =  oldY[pj];  [BUGGY]      }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	point[j]        =        oldX[pj];        point[j]    =    oldX[pj];    point[j]  =  oldY[pj];  point[j]  =  oldY[pj];	  	non-compiled	[CE]  cannot  find  symbol  oldY	49	None	add
611	[BUG]  [BUGGY]  point[j]    =    oldX[pj];    point[j]  =  oldX[pj];  point[j]  =  oldX[pj];  point[j]  =  oldY[pj];  [CE]  cannot  find  symbol  oldY  [FE]      AssertionFailedError    [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  point[j]    =    oldX[pj];    point[j]  =  oldX[pj];  point[j]  =  oldX[pj];  point[j]  =  oldY[pj];  [BUGGY]      }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	point[j]        =        oldX[pj];        point[j]    =    oldX[pj];    point[j]  =  oldX[pj];  point[j]  =  oldY[pj];	  	non-compiled	[CE]  cannot  find  symbol  oldY	49	None	add
612	[BUG]  [BUGGY]  int  i  =  0;  j  <  solvedCols;  ++i)  {  point[pj]  =  value;  }  [CE]  >  expected  [FE]                AssertionFailedError      [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  int  i  =  0;  j  <  solvedCols;  ++i)  {  point[pj]  =  value;  }  [BUGGY]      point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	int  i  =  0;  j  <  solvedCols;  ++i)  {  point[pj]  =  value;  }	  int    i    =    0;    j    <    solvedCols;    ++i)    {    point[pj]    =    cost;    }    	non-compiled	[CE]  >  expected	124	None	replace
613	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  oldY;  ++i)  {  point[pj]  =  cost;  }  [CE]  cannot  find  symbol  oldY  [FE]            AssertionFailedError      [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  for(int  i  =  0;  i  <  oldY;  ++i)  {  point[pj]  =  cost;  }  [BUGGY]      point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	for(int  i  =  0;  i  <  oldY;  ++i)  {  point[pj]  =  cost;  }	  for(int    i    =    0;    i    <    fixedCols;    ++i)    {    point[pj]    =    cost;    }    	non-compiled	[CE]  cannot  find  symbol  oldY	65	None	replace
614	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  oldRes;  ++i)  {  point[pj]  =  cost;  }  [CE]  bad  operand  types  for  binary  operator  '<'  [FE]              AssertionFailedError      [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  for(int  i  =  0;  i  <  oldRes;  ++i)  {  point[pj]  =  cost;  }  [BUGGY]      point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	for(int  i  =  0;  i  <  oldRes;  ++i)  {  point[pj]  =  cost;  }	  for(int    i    =    0;    i    <    fixedCols;    ++i)    {    point[pj]    =    cost;    }    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '<'	65	None	replace
615	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                AssertionFailedError      [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  for(int  i  =  0;  i  <  oldX.length;  ++i)  {  point[pj]  =  cost;  }  [BUGGY]      point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	add	for(int  i  =  0;  i  <  oldX.length;  ++i)  {  point[pj]  =  cost;  }	  for(int    i    =    0;    i    <    fixedCols;    ++i)    {    point[pj]    =    cost;    }    	compilable	  [FE]  AssertionFailedError  	65	12	replace
616	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  oldX.length;  ++i)  {  point[pj]  =  cost;  }  [FE]  AssertionFailedError  [FE]                AssertionFailedError      [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  for(int  i  =  0;  i  <  oldX.length;  ++i)  {  point[pj]  =  cost;  }  [BUGGY]      point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	for(int  i  =  0;  i  <  oldX.length;  ++i)  {  point[pj]  =  cost;  }	  for(int    i    =    0;    i    <    fixedCols;    ++i)    {    point[pj]    =    cost;    }    	compilable	  [FE]  AssertionFailedError  	65	12	replace
617	[BUG]  [BUGGY]  point[j]  =  value[pj];  [CE]  cannot  find  symbol  value  [FE]        AssertionFailedError      [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  point[j]  =  value[pj];  [BUGGY]      }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	point[j]  =  value[pj];	  point[j]    =    cost[pj];    	non-compiled	[CE]  cannot  find  symbol  value	118	None	replace
618	[BUG]  [BUGGY]  point[pj]  =  permutation[qrRankingThreshold];  [CE]  possible  loss  of  precision  [FE]            AssertionFailedError      [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  point[pj]  =  permutation[qrRankingThreshold];  [BUGGY]      }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	point[pj]  =  permutation[qrRankingThreshold];	  point[pj]    =    permutation[c];    	non-compiled	[CE]  possible  loss  of  precision	173	None	replace
619	[BUG]  [BUGGY]  point[pj]  =  cost[c];  [CE]  cannot  find  symbol  c  [FE]              AssertionFailedError      [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  point[pj]  =  cost[c];  [BUGGY]      }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	point[pj]  =  cost[c];	  point[pj]    =    permutation[c];    	non-compiled	[CE]  cannot  find  symbol  c	173	None	replace
620	[BUG]  [BUGGY]  ((  VectorialPointValuePair)previousCost).remove(pj,  oldX);  [CE]  inconvertible  types  [FE]                      AssertionFailedError      [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  ((  VectorialPointValuePair)previousCost).remove(pj,  oldX);  [BUGGY]      point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	((  VectorialPointValuePair)previousCost).remove(pj,  oldX);	  ((    VectorialPointValuePair)previousCost).remove(pj,    cost);    	non-compiled	[CE]  inconvertible  types	107	None	replace
621	[BUG]  [BUGGY]  ((  VectorialPointValuePair)previousCost).remove(pj  -  1,  cost);  [CE]  inconvertible  types  [FE]                        AssertionFailedError      [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  ((  VectorialPointValuePair)previousCost).remove(pj  -  1,  cost);  [BUGGY]      point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	((  VectorialPointValuePair)previousCost).remove(pj  -  1,  cost);	  ((    VectorialPointValuePair)previousCost).remove(pj,    cost);    	non-compiled	[CE]  inconvertible  types	107	None	replace
622	[BUG]  [BUGGY]  int  pj  =  oldX[0];  [CE]  variable  pj  is  already  defined  in  method  doOptimize()  [FE]        ArrayIndexOutOfBoundsException      [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  int  pj  =  oldX[0];  [BUGGY]      point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	int  pj  =  oldX[0];	  int    pj    =    oldX[i];    	non-compiled	[CE]  variable  pj  is  already  defined  in  method  doOptimize()	140	None	replace
623	[BUG]  [BUGGY]  int  pj  =  oldY[i];  [CE]  variable  pj  is  already  defined  in  method  doOptimize()  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  int  pj  =  oldY[i];  [BUGGY]      point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	int  pj  =  oldY[i];	  int    pj    =    oldX[i];    	non-compiled	[CE]  variable  pj  is  already  defined  in  method  doOptimize()	140	None	replace
624	[BUG]  [BUGGY]  ((  VectorialPointValuePair)previousCost).remove(pj  *  1);  [CE]  inconvertible  types  [FE]                          AssertionFailedError      [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  ((  VectorialPointValuePair)previousCost).remove(pj  *  1);  [BUGGY]      point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	((  VectorialPointValuePair)previousCost).remove(pj  *  1);	  ((    VectorialPointValuePair)previousCost).remove(pj    +    1);    	non-compiled	[CE]  inconvertible  types	109	None	replace
625	[BUG]  [BUGGY]  int  pj  =  permutation[j]  -  1L;  [CE]  variable  pj  is  already  defined  in  method  doOptimize()  [FE]                AssertionFailedError      [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  int  pj  =  permutation[j]  -  1L;  [BUGGY]      point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	int  pj  =  permutation[j]  -  1L;	  int    pj    =    permutation[j]    -    1;    	non-compiled	[CE]  variable  pj  is  already  defined  in  method  doOptimize()	28	None	replace
626	[BUG]  [BUGGY]  for(int  i  =  0;  j  <  solvedCols;  ++i)  {  point[pj]  =  oldX[pj];  }  if(i  =  0;  j  <  solvedCols;  ++i)  {  point[pj]  =  oldX[pj];  }  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  for(int  i  =  0;  j  <  solvedCols;  ++i)  {  point[pj]  =  oldX[pj];  }  if(i  =  0;  j  <  solvedCols;  ++i)  {  point[pj]  =  oldX[pj];  }  [BUGGY]      point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	for(int    i    =    0;    j    <    solvedCols;    ++i)    {    point[pj]    =    oldX[pj];    }    if(i  =  0;  j  <  solvedCols;  ++i)  {  point[pj]  =  oldX[pj];  }	  timeout    	non-compiled	[CE]  ')'  expected	83	None	add
627	[BUG]  [BUGGY]  point[pj]  =  cost;  points[pj]  =  permutation[pj];  [CE]  cannot  find  symbol  points  [FE]          AssertionFailedError      [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  point[pj]  =  cost;  points[pj]  =  permutation[pj];  [BUGGY]      }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	point[pj]  =  cost;  points[pj]  =  permutation[pj];	  point[pj]    =    permutation[pj];    points[pj]    =    permutation[pj];    	non-compiled	[CE]  cannot  find  symbol  points	16	None	replace
628	[BUG]  [BUGGY]  point[j]  =  oldX[pj  -  1];  j]  =  oldX[pj  -  1];  [CE]  not  a  statement  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  point[j]  =  oldX[pj  -  1];  j]  =  oldX[pj  -  1];  [BUGGY]      }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	point[j]    =    oldX[pj    -    1];    j]  =  oldX[pj  -  1];	  	non-compiled	[CE]  not  a  statement	169	None	add
629	[BUG]  [BUGGY]  point[j]  =  oldX[pj  -  1];  pj  =  oldX[pj  -  1];  [CE]  possible  loss  of  precision  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  point[j]  =  oldX[pj  -  1];  pj  =  oldX[pj  -  1];  [BUGGY]      }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	point[j]    =    oldX[pj    -    1];    pj  =  oldX[pj  -  1];	  	non-compiled	[CE]  possible  loss  of  precision	169	None	add
630	[BUG]  [BUGGY]  tmpVec  =  Math.sqrt(xNorm,  cost);  [CE]  method  sqrt  in  class  Math  cannot  be  applied  to  given  types;  [FE]              AssertionFailedError      [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  tmpVec  =  Math.sqrt(xNorm,  cost);  [BUGGY]      point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	tmpVec  =  Math.sqrt(xNorm,  cost);	  tmpVec    =    Math.sqrt(xNorm);    	non-compiled	[CE]  method  sqrt  in  class  Math  cannot  be  applied  to  given  types;	149	None	replace
631	[BUG]  [BUGGY]  tmpVec  =  Math.sqrt(last);  [CE]  cannot  find  symbol  last  [FE]                AssertionFailedError      [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  tmpVec  =  Math.sqrt(last);  [BUGGY]      point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	tmpVec  =  Math.sqrt(last);	  tmpVec    =    Math.sqrt(xNorm);    	non-compiled	[CE]  cannot  find  symbol  last	149	None	replace
632	[BUG]  [BUGGY]  point[pj]  =  Cost.parse(xNorm,  firstIteration);  [CE]  cannot  find  symbol  Cost  [FE]        AssertionFailedError      [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  point[pj]  =  Cost.parse(xNorm,  firstIteration);  [BUGGY]      }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	point[pj]  =  Cost.parse(xNorm,  firstIteration);	  point[pj]    =    Cost.parse(xNorm);    	non-compiled	[CE]  cannot  find  symbol  Cost	171	None	replace
633	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  for(int  i  =  0;  j  <  oldRes.length;  ++i)  {  point[pj]  =  oldX[i];  }  [BUGGY]      point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	add	for(int  i  =  0;  j  <  oldRes.length;  ++i)  {  point[pj]  =  oldX[i];  }	  for(int    i    =    0;    j    <    k;    ++i)    {    point[pj]    =    oldX[i];    }    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	141	15	replace
634	[BUG]  [BUGGY]  for(int  i  =  0;  j  <  oldRes.length;  ++i)  {  point[pj]  =  oldX[i];  }  [FE]  ArrayIndexOutOfBoundsException  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  for(int  i  =  0;  j  <  oldRes.length;  ++i)  {  point[pj]  =  oldX[i];  }  [BUGGY]      point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	for(int  i  =  0;  j  <  oldRes.length;  ++i)  {  point[pj]  =  oldX[i];  }	  for(int    i    =    0;    j    <    k;    ++i)    {    point[pj]    =    oldX[i];    }    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	141	15	replace
635	[BUG]  [BUGGY]  for(int  i  =  0;  j  <  oldY;  ++i)  {  point[pj]  =  oldX[i];  }  [CE]  cannot  find  symbol  oldY  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  for(int  i  =  0;  j  <  oldY;  ++i)  {  point[pj]  =  oldX[i];  }  [BUGGY]      point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	for(int  i  =  0;  j  <  oldY;  ++i)  {  point[pj]  =  oldX[i];  }	  for(int    i    =    0;    j    <    k;    ++i)    {    point[pj]    =    oldX[i];    }    	non-compiled	[CE]  cannot  find  symbol  oldY	141	None	replace
636	[BUG]  [BUGGY]  for(int  i  =  0;  j  <  pk;  ++i)  {  point[pj]  =  oldX[i];  }  [CE]  cannot  find  symbol  pk  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  for(int  i  =  0;  j  <  pk;  ++i)  {  point[pj]  =  oldX[i];  }  [BUGGY]      point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	for(int  i  =  0;  j  <  pk;  ++i)  {  point[pj]  =  oldX[i];  }	  for(int    i    =    0;    j    <    k;    ++i)    {    point[pj]    =    oldX[i];    }    	non-compiled	[CE]  cannot  find  symbol  pk	141	None	replace
637	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  oldRes.length;  ++i)  {  point[pj]  =  oldX[i];  }  [CE]  variable  j  is  already  defined  in  method  doOptimize()  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  for(int  j  =  0;  j  <  oldRes.length;  ++i)  {  point[pj]  =  oldX[i];  }  [BUGGY]      point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	for(int  j  =  0;  j  <  oldRes.length;  ++i)  {  point[pj]  =  oldX[i];  }	  for(int    i    =    0;    j    <    k;    ++i)    {    point[pj]    =    oldX[i];    }    	non-compiled	[CE]  variable  j  is  already  defined  in  method  doOptimize()	141	None	replace
638	[BUG]  [BUGGY]  point[pj]  =  cost?  permutation[pj]  :  1;  [CE]  incompatible  types  [FE]        AssertionFailedError      [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  point[pj]  =  cost?  permutation[pj]  :  1;  [BUGGY]      }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	point[pj]  =  cost?  permutation[pj]  :  1;	  point[pj]    =    cost?    permutation[pj]    :    0;    	non-compiled	[CE]  incompatible  types	150	None	replace
639	[BUG]  [BUGGY]  point[pj]  =  cost  +  1;  ((  VectorialPointValuePair)point[pj]).doubleValue();  [CE]  inconvertible  types  [FE]    AssertionFailedError    [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  point[pj]  =  cost  +  1;  ((  VectorialPointValuePair)point[pj]).doubleValue();  [BUGGY]      }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	point[pj]    =    cost    +    1;    ((  VectorialPointValuePair)point[pj]).doubleValue();	  	non-compiled	[CE]  inconvertible  types	7	None	add
640	[BUG]  [BUGGY]  point[pj]  =  cost  +  1;  ((  VectorialPointValuePair)point[pj]).setIndex(pj);  [CE]  inconvertible  types  [FE]      AssertionFailedError    [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  point[pj]  =  cost  +  1;  ((  VectorialPointValuePair)point[pj]).setIndex(pj);  [BUGGY]      }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	point[pj]    =    cost    +    1;    ((  VectorialPointValuePair)point[pj]).setIndex(pj);	  	non-compiled	[CE]  inconvertible  types	7	None	add
641	[BUG]  [BUGGY]  point[pj]  =  cost  +  1;  ((  VectorialPointValuePair)point[pj]).remainders  +  1;  [CE]  not  a  statement  [FE]        AssertionFailedError    [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  point[pj]  =  cost  +  1;  ((  VectorialPointValuePair)point[pj]).remainders  +  1;  [BUGGY]      }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	point[pj]    =    cost    +    1;    ((  VectorialPointValuePair)point[pj]).remainders  +  1;	  	non-compiled	[CE]  not  a  statement	7	None	add
642	[BUG]  [BUGGY]  point[pj]  =  Cost.parseValue(xNorm,  permutation[pj]);  [CE]  cannot  find  symbol  Cost  [FE]            AssertionFailedError      [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  point[pj]  =  Cost.parseValue(xNorm,  permutation[pj]);  [BUGGY]      }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	point[pj]  =  Cost.parseValue(xNorm,  permutation[pj]);	  point[pj]    =    Cost.parseValue(xNorm,    pj);    	non-compiled	[CE]  cannot  find  symbol  Cost	147	None	replace
643	[BUG]  [BUGGY]  point[pj]  =  0;  if(pj  <  0)  {  point[pj]  =  0;  }  else  {  cost  =  previousCost;  for(int  i  =  0;  i  <  solvedCols;  ++i)  {  point[pj]  =  0;  }  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  point[pj]  =  0;  if(pj  <  0)  {  point[pj]  =  0;  }  else  {  cost  =  previousCost;  for(int  i  =  0;  i  <  solvedCols;  ++i)  {  point[pj]  =  0;  }  [BUGGY]      }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	point[pj]    =    0;    if(pj  <  0)  {  point[pj]  =  0;  }  else  {  cost  =  previousCost;  for(int  i  =  0;  i  <  solvedCols;  ++i)  {  point[pj]  =  0;  }	  	non-compiled	[CE]  illegal  start  of  expression	5	None	add
644	[BUG]  [BUGGY]  point[pj]  =  0;  if(pj  <  0)  {  point[pj]  =  0;  }  else  {  cost  =  previousCost;  for(int  i  =  0;  i  <  solveCols;  ++i)  {  point[pj]  =  0;  }  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  point[pj]  =  0;  if(pj  <  0)  {  point[pj]  =  0;  }  else  {  cost  =  previousCost;  for(int  i  =  0;  i  <  solveCols;  ++i)  {  point[pj]  =  0;  }  [BUGGY]      }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	point[pj]    =    0;    if(pj  <  0)  {  point[pj]  =  0;  }  else  {  cost  =  previousCost;  for(int  i  =  0;  i  <  solveCols;  ++i)  {  point[pj]  =  0;  }	  	non-compiled	[CE]  illegal  start  of  expression	5	None	add
645	[BUG]  [BUGGY]  point[pj]  =  0;  if(pj  <  0)  {  point[pj]  =  0;  }  else  {  cost  =  previousCost;  for(int  i  =  0;  i  <  solvedCols;  ++i)  {  permutation[i]  =  0;  }  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  point[pj]  =  0;  if(pj  <  0)  {  point[pj]  =  0;  }  else  {  cost  =  previousCost;  for(int  i  =  0;  i  <  solvedCols;  ++i)  {  permutation[i]  =  0;  }  [BUGGY]      }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	point[pj]    =    0;    if(pj  <  0)  {  point[pj]  =  0;  }  else  {  cost  =  previousCost;  for(int  i  =  0;  i  <  solvedCols;  ++i)  {  permutation[i]  =  0;  }	  	non-compiled	[CE]  illegal  start  of  expression	5	None	add
646	[BUG]  [BUGGY]  point[pj]  =  0;  if(pj  <  0)  {  point[pj]  =  0;  }  else  {  cost  =  previousCost;  for(int  i  =  0;  i  <  fixedCols;  ++i)  {  point[pj]  =  0;  }  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  point[pj]  =  0;  if(pj  <  0)  {  point[pj]  =  0;  }  else  {  cost  =  previousCost;  for(int  i  =  0;  i  <  fixedCols;  ++i)  {  point[pj]  =  0;  }  [BUGGY]      }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	point[pj]    =    0;    if(pj  <  0)  {  point[pj]  =  0;  }  else  {  cost  =  previousCost;  for(int  i  =  0;  i  <  fixedCols;  ++i)  {  point[pj]  =  0;  }	  	non-compiled	[CE]  illegal  start  of  expression	5	None	add
647	[BUG]  [BUGGY]  int  i  =  0;  i  <  solvedCols;  ++i)  {  point[pj]  =  oldX[pj];  }  [CE]  >  expected  [FE]    AssertionFailedError    [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  int  i  =  0;  i  <  solvedCols;  ++i)  {  point[pj]  =  oldX[pj];  }  [BUGGY]      point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	int  i  =  0;  i  <  solvedCols;  ++i)  {  point[pj]  =  oldX[pj];  }	  for(int    i    =    0;    i    <    solvedCols;    ++i)    {    point[pj]    =    oldX[pj];    }    	non-compiled	[CE]  >  expected	62	None	replace
648	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  n;  ++i)  {  point[pj]  =  oldX[pj];  }  [CE]  cannot  find  symbol  n  [FE]      AssertionFailedError    [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  for(int  i  =  0;  i  <  n;  ++i)  {  point[pj]  =  oldX[pj];  }  [BUGGY]      point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	for(int  i  =  0;  i  <  n;  ++i)  {  point[pj]  =  oldX[pj];  }	  for(int    i    =    0;    i    <    solvedCols;    ++i)    {    point[pj]    =    oldX[pj];    }    	non-compiled	[CE]  cannot  find  symbol  n	62	None	replace
649	[BUG]  [BUGGY]  ((  VectorialPointValuePair)previousCost).setIndex(pj  /  2);  [CE]  inconvertible  types  [FE]                  AssertionFailedError      [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  ((  VectorialPointValuePair)previousCost).setIndex(pj  /  2);  [BUGGY]      point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	((  VectorialPointValuePair)previousCost).setIndex(pj  /  2);	  ((    VectorialPointValuePair)previousCost).setIndex(pj    -    2);    	non-compiled	[CE]  inconvertible  types	144	None	replace
650	[BUG]  [BUGGY]  tmpVec  =  Math.sqrt(previousCost,  cost,  solvedCols);  [CE]  method  sqrt  in  class  Math  cannot  be  applied  to  given  types;  [FE]              AssertionFailedError      [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  tmpVec  =  Math.sqrt(previousCost,  cost,  solvedCols);  [BUGGY]      point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	tmpVec  =  Math.sqrt(previousCost,  cost,  solvedCols);	  tmpVec    =    Math.sqrt(previousCost,    cost);    	non-compiled	[CE]  method  sqrt  in  class  Math  cannot  be  applied  to  given  types;	71	None	replace
651	[BUG]  [BUGGY]  tmpVec  =  Math.sqrt(previousCost,  oldX,  cost);  [CE]  method  sqrt  in  class  Math  cannot  be  applied  to  given  types;  [FE]                AssertionFailedError      [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  tmpVec  =  Math.sqrt(previousCost,  oldX,  cost);  [BUGGY]      point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	tmpVec  =  Math.sqrt(previousCost,  oldX,  cost);	  tmpVec    =    Math.sqrt(previousCost,    cost);    	non-compiled	[CE]  method  sqrt  in  class  Math  cannot  be  applied  to  given  types;	71	None	replace
652	[BUG]  [BUGGY]  ((  VectorialPointValuePair)permutation).add(pj);  [CE]  inconvertible  types  [FE]                AssertionFailedError      [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  ((  VectorialPointValuePair)permutation).add(pj);  [BUGGY]      point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	((  VectorialPointValuePair)permutation).add(pj);	  ((    VectorialPointValuePair)permutation).remove(pj);    	non-compiled	[CE]  inconvertible  types	101	None	replace
653	[BUG]  [BUGGY]  ((  VectorialPointValuePair)permutation).add(point);  [CE]  inconvertible  types  [FE]                  AssertionFailedError      [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  ((  VectorialPointValuePair)permutation).add(point);  [BUGGY]      point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	((  VectorialPointValuePair)permutation).add(point);	  ((    VectorialPointValuePair)permutation).remove(pj);    	non-compiled	[CE]  inconvertible  types	101	None	replace
654	[BUG]  [BUGGY]  point[pj]  =  costRelativeTolerance.RELATIVE;  [CE]  double  cannot  be  dereferenced  [FE]        AssertionFailedError      [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  point[pj]  =  costRelativeTolerance.RELATIVE;  [BUGGY]      }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	point[pj]  =  costRelativeTolerance.RELATIVE;	  point[pj]    =    CostRelativeTolerance.RELATIVE;    	non-compiled	[CE]  double  cannot  be  dereferenced	111	None	replace
655	[BUG]  [BUGGY]  int  i  =  0;  j  <  solvedCols;  ++i)  {  point[pj]  =  oldX[pj];  }  [CE]  >  expected  [FE]                    AssertionFailedError      [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  int  i  =  0;  j  <  solvedCols;  ++i)  {  point[pj]  =  oldX[pj];  }  [BUGGY]      point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	int  i  =  0;  j  <  solvedCols;  ++i)  {  point[pj]  =  oldX[pj];  }	  for(int    i    =    0;    j    <    solvedCols;    ++i)    {    point[pj]    =    oldX[pj];    }    timeout    	non-compiled	[CE]  >  expected	84	None	replace
656	[BUG]  [BUGGY]  ((  VectorialPointValuePair)point[j]).sqrt(p);  [CE]  cannot  find  symbol  p  [FE]          AssertionFailedError      [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  ((  VectorialPointValuePair)point[j]).sqrt(p);  [BUGGY]      }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	((  VectorialPointValuePair)point[j]).sqrt(p);	  point[j]    =    oldX[pj];    ((    VectorialPointValuePair)point[j]).sqrt(value);    	non-compiled	[CE]  cannot  find  symbol  p	115	None	replace
657	[BUG]  [BUGGY]  ((  VectorialPointValuePair)point[j]).sqrt(exp);  [CE]  cannot  find  symbol  exp  [FE]            AssertionFailedError      [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  ((  VectorialPointValuePair)point[j]).sqrt(exp);  [BUGGY]      }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	((  VectorialPointValuePair)point[j]).sqrt(exp);	  point[j]    =    oldX[pj];    ((    VectorialPointValuePair)point[j]).sqrt(value);    	non-compiled	[CE]  cannot  find  symbol  exp	115	None	replace
658	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError      [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  for(int  i  =  0;  i  <  j;  ++i)  {  point[pj]  =  cost;  }  [BUGGY]      point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	add	for(int  i  =  0;  i  <  j;  ++i)  {  point[pj]  =  cost;  }	  for(int    i    =    0;    i    <    k;    ++i)    {    point[pj]    =    cost;    }    	compilable	  [FE]  AssertionFailedError  	176	12	replace
659	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  j;  ++i)  {  point[pj]  =  cost;  }  [FE]  AssertionFailedError  [FE]        AssertionFailedError      [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  for(int  i  =  0;  i  <  j;  ++i)  {  point[pj]  =  cost;  }  [BUGGY]      point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	for(int  i  =  0;  i  <  j;  ++i)  {  point[pj]  =  cost;  }	  for(int    i    =    0;    i    <    k;    ++i)    {    point[pj]    =    cost;    }    	compilable	  [FE]  AssertionFailedError  	176	12	replace
660	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError      [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  for(int  i  =  0;  i  <  pj;  ++i)  {  point[pj]  =  cost;  }  [BUGGY]      point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	add	for(int  i  =  0;  i  <  pj;  ++i)  {  point[pj]  =  cost;  }	  for(int    i    =    0;    i    <    k;    ++i)    {    point[pj]    =    cost;    }    	compilable	  [FE]  AssertionFailedError  	176	12	replace
661	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  pj;  ++i)  {  point[pj]  =  cost;  }  [FE]  AssertionFailedError  [FE]          AssertionFailedError      [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  for(int  i  =  0;  i  <  pj;  ++i)  {  point[pj]  =  cost;  }  [BUGGY]      point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	for(int  i  =  0;  i  <  pj;  ++i)  {  point[pj]  =  cost;  }	  for(int    i    =    0;    i    <    k;    ++i)    {    point[pj]    =    cost;    }    	compilable	  [FE]  AssertionFailedError  	176	12	replace
662	[BUG]  [BUGGY]  ((  VectorialPointValuePair)point[pj]).evaluate(xNorm);  [CE]  inconvertible  types  [FE]        AssertionFailedError      [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  ((  VectorialPointValuePair)point[pj]).evaluate(xNorm);  [BUGGY]      }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	((  VectorialPointValuePair)point[pj]).evaluate(xNorm);	  point[pj]    =    xNorm;    ((    VectorialPointValuePair)point[pj]).evaluate(xNorm);    	non-compiled	[CE]  inconvertible  types	158	None	replace
663	[BUG]  [BUGGY]  point[pj]  =  VectorialPointValuePair.evaluate(xNorm);  [CE]  cannot  find  symbol  [FE]          AssertionFailedError      [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  point[pj]  =  VectorialPointValuePair.evaluate(xNorm);  [BUGGY]      }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	point[pj]  =  VectorialPointValuePair.evaluate(xNorm);	  point[pj]    =    xNorm;    ((    VectorialPointValuePair)point[pj]).evaluate(xNorm);    	non-compiled	[CE]  cannot  find  symbol	158	None	replace
664	[BUG]  [BUGGY]  ((  VectorialPointValuePair)point[0]).evaluate(xNorm);  [CE]  inconvertible  types  [FE]            AssertionFailedError      [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  ((  VectorialPointValuePair)point[0]).evaluate(xNorm);  [BUGGY]      }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	((  VectorialPointValuePair)point[0]).evaluate(xNorm);	  point[pj]    =    xNorm;    ((    VectorialPointValuePair)point[pj]).evaluate(xNorm);    	non-compiled	[CE]  inconvertible  types	158	None	replace
665	[BUG]  [BUGGY]  ((  VectorialPointValuePair)pj).setIndex(oldX,  oldRes);  [CE]  inconvertible  types  [FE]            AssertionFailedError      [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  ((  VectorialPointValuePair)pj).setIndex(oldX,  oldRes);  [BUGGY]      point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	((  VectorialPointValuePair)pj).setIndex(oldX,  oldRes);	  ((    VectorialPointValuePair)pj).setIndex(oldX);    	non-compiled	[CE]  inconvertible  types	126	None	replace
666	[BUG]  [BUGGY]  ((  VectorialPointValuePair)oldX).setIndex(0);  [CE]  inconvertible  types  [FE]              AssertionFailedError      [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  ((  VectorialPointValuePair)oldX).setIndex(0);  [BUGGY]      point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	((  VectorialPointValuePair)oldX).setIndex(0);	  ((    VectorialPointValuePair)pj).setIndex(oldX);    	non-compiled	[CE]  inconvertible  types	126	None	replace
667	[BUG]  [BUGGY]  point[j]  =  cost;  int  point[j]  =  cost;  [CE]  ']'  expected  [FE]    AssertionFailedError    [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  point[j]  =  cost;  int  point[j]  =  cost;  [BUGGY]      }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	point[j]    =    cost;    int  point[j]  =  cost;	  	non-compiled	[CE]  ']'  expected	94	None	add
668	[BUG]  [BUGGY]  point[j]  =  cost;  ((  VectorialPointValuePair)point[j]).doubleValue();  [CE]  inconvertible  types  [FE]      AssertionFailedError    [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  point[j]  =  cost;  ((  VectorialPointValuePair)point[j]).doubleValue();  [BUGGY]      }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	point[j]    =    cost;    ((  VectorialPointValuePair)point[j]).doubleValue();	  	non-compiled	[CE]  inconvertible  types	94	None	add
669	[BUG]  [BUGGY]  point[j]  =  cost;  tmpVec  =  permutation[j];  [CE]  incompatible  types  [FE]        AssertionFailedError    [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  point[j]  =  cost;  tmpVec  =  permutation[j];  [BUGGY]      }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	point[j]    =    cost;    tmpVec  =  permutation[j];	  	non-compiled	[CE]  incompatible  types	94	None	add
670	[BUG]  [BUGGY]  point[j]  =  cost;  ((  VectorialPointValuePair)point[j]).setIndex(pj);  [CE]  inconvertible  types  [FE]          AssertionFailedError    [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  point[j]  =  cost;  ((  VectorialPointValuePair)point[j]).setIndex(pj);  [BUGGY]      }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	point[j]    =    cost;    ((  VectorialPointValuePair)point[j]).setIndex(pj);	  	non-compiled	[CE]  inconvertible  types	94	None	add
671	[BUG]  [BUGGY]  point[pj]  =  value.cloneTree();  [CE]  cannot  find  symbol  value  [FE]              AssertionFailedError      [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  point[pj]  =  value.cloneTree();  [BUGGY]      }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	point[pj]  =  value.cloneTree();	  point[pj]    =    tmpVec.cloneTree();    	non-compiled	[CE]  cannot  find  symbol  value	148	None	replace
672	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  for(int  i  =  0;  i  <  oldX.length;  ++i)  {  point[pj]  =  oldX[pj];  }  [BUGGY]      point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	add	for(int  i  =  0;  i  <  oldX.length;  ++i)  {  point[pj]  =  oldX[pj];  }	  for(int    i    =    0;    i    <    pj;    ++i)    {    point[pj]    =    oldX[pj];    }    	compilable	  [FE]  AssertionFailedError  	178	2	replace
673	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  oldX.length;  ++i)  {  point[pj]  =  oldX[pj];  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  for(int  i  =  0;  i  <  oldX.length;  ++i)  {  point[pj]  =  oldX[pj];  }  [BUGGY]      point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	for(int  i  =  0;  i  <  oldX.length;  ++i)  {  point[pj]  =  oldX[pj];  }	  for(int    i    =    0;    i    <    pj;    ++i)    {    point[pj]    =    oldX[pj];    }    	compilable	  [FE]  AssertionFailedError  	178	2	replace
674	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  oldY;  ++i)  {  point[pj]  =  oldX[pj];  }  [CE]  cannot  find  symbol  oldY  [FE]      AssertionFailedError    [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  for(int  i  =  0;  i  <  oldY;  ++i)  {  point[pj]  =  oldX[pj];  }  [BUGGY]      point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	for(int  i  =  0;  i  <  oldY;  ++i)  {  point[pj]  =  oldX[pj];  }	  for(int    i    =    0;    i    <    pj;    ++i)    {    point[pj]    =    oldX[pj];    }    	non-compiled	[CE]  cannot  find  symbol  oldY	178	None	replace
675	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  for(int  i  =  0;  i  <  oldRes.length;  ++i)  {  point[pj]  =  oldX[pj];  }  [BUGGY]      point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	add	for(int  i  =  0;  i  <  oldRes.length;  ++i)  {  point[pj]  =  oldX[pj];  }	  for(int    i    =    0;    i    <    pj;    ++i)    {    point[pj]    =    oldX[pj];    }    	compilable	  [FE]  AssertionFailedError  	178	2	replace
676	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  oldRes.length;  ++i)  {  point[pj]  =  oldX[pj];  }  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  for(int  i  =  0;  i  <  oldRes.length;  ++i)  {  point[pj]  =  oldX[pj];  }  [BUGGY]      point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	for(int  i  =  0;  i  <  oldRes.length;  ++i)  {  point[pj]  =  oldX[pj];  }	  for(int    i    =    0;    i    <    pj;    ++i)    {    point[pj]    =    oldX[pj];    }    	compilable	  [FE]  AssertionFailedError  	178	2	replace
677	[BUG]  [BUGGY]  ((  VectorialPointValuePair)point[pj]).evaluate();  [CE]  inconvertible  types  [FE]        AssertionFailedError      [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  ((  VectorialPointValuePair)point[pj]).evaluate();  [BUGGY]      }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	((  VectorialPointValuePair)point[pj]).evaluate();	  point[pj]    =    cost;    ((    VectorialPointValuePair)point[pj]).evaluate();    	non-compiled	[CE]  inconvertible  types	153	None	replace
678	[BUG]  [BUGGY]  for(int  pj  =  0;  pj  <  point.length;  pj++)  {  ((  VectorialPointValuePair)point[pj]).evaluate();  }  [CE]  variable  pj  is  already  defined  in  method  doOptimize()  [FE]          AssertionFailedError      [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  for(int  pj  =  0;  pj  <  point.length;  pj++)  {  ((  VectorialPointValuePair)point[pj]).evaluate();  }  [BUGGY]      }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	for(int  pj  =  0;  pj  <  point.length;  pj++)  {  ((  VectorialPointValuePair)point[pj]).evaluate();  }	  point[pj]    =    cost;    ((    VectorialPointValuePair)point[pj]).evaluate();    	non-compiled	[CE]  variable  pj  is  already  defined  in  method  doOptimize()	153	None	replace
679	[BUG]  [BUGGY]  int  i  =  0;  j  <  solvedCols;  ++i)  {  point[i]  =  oldX[i];  }  [CE]  >  expected  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  int  i  =  0;  j  <  solvedCols;  ++i)  {  point[i]  =  oldX[i];  }  [BUGGY]      point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	int  i  =  0;  j  <  solvedCols;  ++i)  {  point[i]  =  oldX[i];  }	  int    i    =    0;    j    <    solvedCols;    ++i)    {    point[pj]    =    oldX[i];    }    	non-compiled	[CE]  >  expected	120	None	replace
680	[BUG]  [BUGGY]  point[j]  =  previous[pj];  ((  VectorialPointValuePair)previous).setVec(tmpVec);  [CE]  array  required,  but  VectorialPointValuePair  found  [FE]        AssertionFailedError      [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  point[j]  =  previous[pj];  ((  VectorialPointValuePair)previous).setVec(tmpVec);  [BUGGY]      }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	point[j]  =  previous[pj];  ((  VectorialPointValuePair)previous).setVec(tmpVec);	  point[j]    =    oldX[pj];    ((    VectorialPointValuePair)previous).setVec(tmpVec);    	non-compiled	[CE]  array  required,  but  VectorialPointValuePair  found	142	None	replace
681	[BUG]  [BUGGY]  ((  VectorialPointValuePair)previousCost).remove(pj  -  2);  [CE]  inconvertible  types  [FE]                    AssertionFailedError      [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  ((  VectorialPointValuePair)previousCost).remove(pj  -  2);  [BUGGY]      point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	((  VectorialPointValuePair)previousCost).remove(pj  -  2);	  ((    VectorialPointValuePair)previousCost).remove(pj    -    1);    	non-compiled	[CE]  inconvertible  types	106	None	replace
682	[BUG]  [BUGGY]  ((  VectorialPointValuePair)previousCost).get(pj  -  1);  [CE]  inconvertible  types  [FE]                      AssertionFailedError      [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  ((  VectorialPointValuePair)previousCost).get(pj  -  1);  [BUGGY]      point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	((  VectorialPointValuePair)previousCost).get(pj  -  1);	  ((    VectorialPointValuePair)previousCost).remove(pj    -    1);    	non-compiled	[CE]  inconvertible  types	106	None	replace
683	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  fixedCols;  ++j)  {  point[pj]  =  oldX[i];  }  [CE]  variable  j  is  already  defined  in  method  doOptimize()  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  for(int  j  =  0;  j  <  fixedCols;  ++j)  {  point[pj]  =  oldX[i];  }  [BUGGY]      point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	for(int  j  =  0;  j  <  fixedCols;  ++j)  {  point[pj]  =  oldX[i];  }	  for(int    j    =    0;    j    <    solvedCols;    ++j)    {    point[pj]    =    oldX[i];    }    	non-compiled	[CE]  variable  j  is  already  defined  in  method  doOptimize()	60	None	replace
684	[BUG]  [BUGGY]  point[pj]  =  cost?  permutation[pj]  :  null;  [CE]  incompatible  types  [FE]        AssertionFailedError      [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  point[pj]  =  cost?  permutation[pj]  :  null;  [BUGGY]      }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	point[pj]  =  cost?  permutation[pj]  :  null;	  point[pj]    =    cost?    permutation[pj]    :    0;    	non-compiled	[CE]  incompatible  types	150	None	replace
685	[BUG]  [BUGGY]  int  pj  =  point[j];  [CE]  variable  pj  is  already  defined  in  method  doOptimize()  [FE]              AssertionFailedError      [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  int  pj  =  point[j];  [BUGGY]      point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	int  pj  =  point[j];	  int    pj    =    cost[j];    	non-compiled	[CE]  variable  pj  is  already  defined  in  method  doOptimize()	156	None	replace
686	[BUG]  [BUGGY]  for(int  pj  =  0;  j  <  solvedCols;  ++i)  {  point[pj]  =  oldX[pj];  }  [CE]  variable  pj  is  already  defined  in  method  doOptimize()  [FE]                  AssertionFailedError      [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  for(int  pj  =  0;  j  <  solvedCols;  ++i)  {  point[pj]  =  oldX[pj];  }  [BUGGY]      point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	for(int  pj  =  0;  j  <  solvedCols;  ++i)  {  point[pj]  =  oldX[pj];  }	          for(int    i    =    0;    j    <    solvedCols;    ++i)    {    point[pj]    =    cost;    }    For(int    i    =    0;    j    <    solvedCols;    ++i)    {    point[pj]    =    cost;    }    	non-compiled	[CE]  variable  pj  is  already  defined  in  method  doOptimize()	22	None	replace
687	[BUG]  [BUGGY]  for(int  pj  =  0;  j  <  solvedCols;  ++i)  {  point[pj]  =  cost;  }  [CE]  variable  pj  is  already  defined  in  method  doOptimize()  [FE]                    AssertionFailedError      [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  for(int  pj  =  0;  j  <  solvedCols;  ++i)  {  point[pj]  =  cost;  }  [BUGGY]      point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	for(int  pj  =  0;  j  <  solvedCols;  ++i)  {  point[pj]  =  cost;  }	          for(int    i    =    0;    j    <    solvedCols;    ++i)    {    point[pj]    =    cost;    }    For(int    i    =    0;    j    <    solvedCols;    ++i)    {    point[pj]    =    cost;    }    	non-compiled	[CE]  variable  pj  is  already  defined  in  method  doOptimize()	22	None	replace
688	[BUG]  [BUGGY]  for(int  pj  =  0;  p  <  solvedCols;  ++i)  {  point[pj]  =  oldX[pj];  }  [CE]  variable  pj  is  already  defined  in  method  doOptimize()  [FE]          AssertionFailedError      [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  for(int  pj  =  0;  p  <  solvedCols;  ++i)  {  point[pj]  =  oldX[pj];  }  [BUGGY]      point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	for(int  pj  =  0;  p  <  solvedCols;  ++i)  {  point[pj]  =  oldX[pj];  }	          for(int    i    =    0;    i    <    solvedCols;    ++i)    {    point[pj]    =    cost;    }    For(int    i    =    0;    i    <    solvedCols;    ++i)    {    point[pj]    =    cost;    }    	non-compiled	[CE]  variable  pj  is  already  defined  in  method  doOptimize()	68	None	replace
689	[BUG]  [BUGGY]  for(int  pj  =  0;  p  <  solvedCols;  ++i)  {  point[pj]  =  cost;  }  [CE]  variable  pj  is  already  defined  in  method  doOptimize()  [FE]            AssertionFailedError      [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  for(int  pj  =  0;  p  <  solvedCols;  ++i)  {  point[pj]  =  cost;  }  [BUGGY]      point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	for(int  pj  =  0;  p  <  solvedCols;  ++i)  {  point[pj]  =  cost;  }	          for(int    i    =    0;    i    <    solvedCols;    ++i)    {    point[pj]    =    cost;    }    For(int    i    =    0;    i    <    solvedCols;    ++i)    {    point[pj]    =    cost;    }    	non-compiled	[CE]  variable  pj  is  already  defined  in  method  doOptimize()	68	None	replace
690	[BUG]  [BUGGY]  point[pj]  =  tmp;  [CE]  cannot  find  symbol  tmp  [FE]        AssertionFailedError      [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  point[pj]  =  tmp;  [BUGGY]      }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	point[pj]  =  tmp;	  point[pj]    =    cost;    if(pj    <    =    0)    {    point[pj]    =    cost;    }    	non-compiled	[CE]  cannot  find  symbol  tmp	117	None	replace
691	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  k;  ++i)  {  point[pj]  =  permutation[j];  }  [CE]  cannot  find  symbol  k  [FE]    AssertionFailedError    [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  for(int  i  =  0;  i  <  k;  ++i)  {  point[pj]  =  permutation[j];  }  [BUGGY]      point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	for(int  i  =  0;  i  <  k;  ++i)  {  point[pj]  =  permutation[j];  }	  for(int    i    =    0;    i    <    solvedCols;    ++i)    {    point[pj]    =    permutation[j];    }    	non-compiled	[CE]  cannot  find  symbol  k	64	None	replace
692	[BUG]  [BUGGY]  ((  VectorialPointValuePair)pj).setIndex(oldX,  oldX);  [CE]  inconvertible  types  [FE]            AssertionFailedError      [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  ((  VectorialPointValuePair)pj).setIndex(oldX,  oldX);  [BUGGY]      point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	((  VectorialPointValuePair)pj).setIndex(oldX,  oldX);	  ((    VectorialPointValuePair)pj).setIndex(oldX);    	non-compiled	[CE]  inconvertible  types	126	None	replace
693	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  resolvedCost;  ++i)  {  point[pj]  =  cost;  }  [CE]  cannot  find  symbol  resolvedCost  [FE]        AssertionFailedError      [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  for(int  i  =  0;  i  <  resolvedCost;  ++i)  {  point[pj]  =  cost;  }  [BUGGY]      point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	for(int  i  =  0;  i  <  resolvedCost;  ++i)  {  point[pj]  =  cost;  }	          for(int    i    =    0;    i    <    solvedCols;    ++i)    {    point[pj]    =    cost;    }    for(int    i    =    0;    i    <    resolvedCols;    ++i)    {    point[pj]    =    cost;    }    	non-compiled	[CE]  cannot  find  symbol  resolvedCost	165	None	replace
694	[BUG]  [BUGGY]  point[j]  =  cost;  ((  VectorialPointValuePair)point[j]).evaluate(xk);  [CE]  cannot  find  symbol  xk  [FE]    AssertionFailedError    [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  point[j]  =  cost;  ((  VectorialPointValuePair)point[j]).evaluate(xk);  [BUGGY]      }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	point[j]    =    cost;    ((  VectorialPointValuePair)point[j]).evaluate(xk);	  	non-compiled	[CE]  cannot  find  symbol  xk	94	None	add
695	[BUG]  [BUGGY]  point[j]  =  cost;  ((  VectorialPointValuePair)point[j]).evaluate();  [CE]  inconvertible  types  [FE]      AssertionFailedError    [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  point[j]  =  cost;  ((  VectorialPointValuePair)point[j]).evaluate();  [BUGGY]      }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	point[j]    =    cost;    ((  VectorialPointValuePair)point[j]).evaluate();	  	non-compiled	[CE]  inconvertible  types	94	None	add
696	[BUG]  [BUGGY]  int  pj  =  oldNorm.length;  [CE]  variable  pj  is  already  defined  in  method  doOptimize()  [FE]                AssertionFailedError      [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  int  pj  =  oldNorm.length;  [BUGGY]      point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	int  pj  =  oldNorm.length;	  int    pj    =    oldNorm[j];    	non-compiled	[CE]  variable  pj  is  already  defined  in  method  doOptimize()	157	None	replace
697	[BUG]  [BUGGY]  ((  VectorialPointValuePair)pj).add(coeff1  -  previousCost);  [CE]  inconvertible  types  [FE]                  AssertionFailedError      [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  ((  VectorialPointValuePair)pj).add(coeff1  -  previousCost);  [BUGGY]      point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	((  VectorialPointValuePair)pj).add(coeff1  -  previousCost);	  ((    VectorialPointValuePair)pj).remove(previousCost);    	non-compiled	[CE]  inconvertible  types	34	None	replace
698	[BUG]  [BUGGY]  point[j]  =  Cost.parseInt(pj);  [CE]  cannot  find  symbol  Cost  [FE]    AssertionFailedError    [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  point[j]  =  Cost.parseInt(pj);  [BUGGY]      }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	point[j]  =  Cost.parseInt(pj);	  point[j]    =    xNorm;    	non-compiled	[CE]  cannot  find  symbol  Cost	97	None	replace
699	[BUG]  [BUGGY]  point[j]  =  Cost.parseFloat(pj);  [CE]  cannot  find  symbol  Cost  [FE]      AssertionFailedError    [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  point[j]  =  Cost.parseFloat(pj);  [BUGGY]      }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	point[j]  =  Cost.parseFloat(pj);	  point[j]    =    xNorm;    	non-compiled	[CE]  cannot  find  symbol  Cost	97	None	replace
700	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  point[j]  =  0;  [BUGGY]      }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	add	point[j]  =  0;	  point[pj]    =    0;    	compilable	  [FE]  AssertionFailedError  	6	11	replace
701	[BUG]  [BUGGY]  point[j]  =  0;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  point[j]  =  0;  [BUGGY]      }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	point[j]  =  0;	  point[pj]    =    0;    	compilable	  [FE]  AssertionFailedError  	6	11	replace
702	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  point.length;  ++i)  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  for(int  i  =  0;  i  <  point.length;  ++i)  {  [BUGGY]      point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	for(int  i  =  0;  i  <  point.length;  ++i)  {	  for(int    i    =    0;    i    <    oldX;    ++i)    {    	non-compiled	[CE]  illegal  start  of  expression	174	None	replace
703	[BUG]  [BUGGY]  point[j]  =  xNorm;  for(int  j]  =  0;  j  <  solvedCols;  ++j)  {  point[j]  =  xNorm;  }  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  point[j]  =  xNorm;  for(int  j]  =  0;  j  <  solvedCols;  ++j)  {  point[j]  =  xNorm;  }  [BUGGY]      }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	point[j]    =    xNorm;    for(int  j]  =  0;  j  <  solvedCols;  ++j)  {  point[j]  =  xNorm;  }	  	non-compiled	[CE]  ';'  expected	96	None	add
704	[BUG]  [BUGGY]  point[j]  =  xNorm;  for(int  j]  =  0;  j  <  solvedCols;  ++j)  {  permutation[j]  =  xNorm;  }  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  point[j]  =  xNorm;  for(int  j]  =  0;  j  <  solvedCols;  ++j)  {  permutation[j]  =  xNorm;  }  [BUGGY]      }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	point[j]    =    xNorm;    for(int  j]  =  0;  j  <  solvedCols;  ++j)  {  permutation[j]  =  xNorm;  }	  	non-compiled	[CE]  ';'  expected	96	None	add
705	[BUG]  [BUGGY]  point[j]  =  xNorm;  for(int  j]  =  0;  j  <  solvedCols;  ++j)  {  int  point[j]  =  xNorm;  }  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  point[j]  =  xNorm;  for(int  j]  =  0;  j  <  solvedCols;  ++j)  {  int  point[j]  =  xNorm;  }  [BUGGY]      }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	point[j]    =    xNorm;    for(int  j]  =  0;  j  <  solvedCols;  ++j)  {  int  point[j]  =  xNorm;  }	  	non-compiled	[CE]  ';'  expected	96	None	add
706	[BUG]  [BUGGY]  point[j]  =  xNorm;  for(int  j]  =  0;  j  <  solvedCols;  ++j)  {  permutation[j]  =  pj;  }  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  point[j]  =  xNorm;  for(int  j]  =  0;  j  <  solvedCols;  ++j)  {  permutation[j]  =  pj;  }  [BUGGY]      }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	point[j]    =    xNorm;    for(int  j]  =  0;  j  <  solvedCols;  ++j)  {  permutation[j]  =  pj;  }	  	non-compiled	[CE]  ';'  expected	96	None	add
707	[BUG]  [BUGGY]  point[j]  =  Cost.parseFloat(xNorm);  [CE]  cannot  find  symbol  Cost  [FE]    AssertionFailedError    [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  point[j]  =  Cost.parseFloat(xNorm);  [BUGGY]      }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	point[j]  =  Cost.parseFloat(xNorm);	  point[j]    =    permutation[j];    	non-compiled	[CE]  cannot  find  symbol  Cost	99	None	replace
708	[BUG]  [BUGGY]  ((  VectorialPointValuePair)point[pj]).setValue(false);  [CE]  inconvertible  types  [FE]        AssertionFailedError      [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  ((  VectorialPointValuePair)point[pj]).setValue(false);  [BUGGY]      }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	((  VectorialPointValuePair)point[pj]).setValue(false);	  point[pj]    =    xNorm;    ((    VectorialPointValuePair)point[pj]).setValue(null);    	non-compiled	[CE]  inconvertible  types	132	None	replace
709	[BUG]  [BUGGY]  point[j]  =  oldX[i];  Point[j]  =  oldX[pj];  [CE]  cannot  find  symbol  i  [FE]              AssertionFailedError      [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  point[j]  =  oldX[i];  Point[j]  =  oldX[pj];  [BUGGY]      }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	point[j]  =  oldX[i];  Point[j]  =  oldX[pj];	  point[j]    =    oldX[pj];    Point[j]    =    oldX[pj];    	non-compiled	[CE]  cannot  find  symbol  i	53	None	replace
710	[BUG]  [BUGGY]  point[pj]  =  0;  ((  VectorialPointValuePair)point[pj]).setValue(value);  [CE]  cannot  find  symbol  value  [FE]    AssertionFailedError    [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  point[pj]  =  0;  ((  VectorialPointValuePair)point[pj]).setValue(value);  [BUGGY]      }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	point[pj]    =    0;    ((  VectorialPointValuePair)point[pj]).setValue(value);	  	non-compiled	[CE]  cannot  find  symbol  value	5	None	add
711	[BUG]  [BUGGY]  point[pj]  =  0;  ((  VectorialPointValuePair)point[pj]).setIndex(pj);  [CE]  inconvertible  types  [FE]      AssertionFailedError    [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  point[pj]  =  0;  ((  VectorialPointValuePair)point[pj]).setIndex(pj);  [BUGGY]      }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	point[pj]    =    0;    ((  VectorialPointValuePair)point[pj]).setIndex(pj);	  	non-compiled	[CE]  inconvertible  types	5	None	add
712	[BUG]  [BUGGY]  int  pj  =  0;  j  <  solvedCols;  ++i)  {  point[pj]  =  cost;  }  [CE]  >  expected  [FE]                AssertionFailedError      [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  int  pj  =  0;  j  <  solvedCols;  ++i)  {  point[pj]  =  cost;  }  [BUGGY]      point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	int  pj  =  0;  j  <  solvedCols;  ++i)  {  point[pj]  =  cost;  }	  int    i    =    0;    j    <    solvedCols;    ++i)    {    point[pj]    =    cost;    }    	non-compiled	[CE]  >  expected	124	None	replace
713	[BUG]  [BUGGY]  ((  VectorialPointValuePair)pj).remove(oldX,  oldX);  [CE]  inconvertible  types  [FE]              AssertionFailedError      [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  ((  VectorialPointValuePair)pj).remove(oldX,  oldX);  [BUGGY]      point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	((  VectorialPointValuePair)pj).remove(oldX,  oldX);	  ((    VectorialPointValuePair)pj).remove(oldX);    	non-compiled	[CE]  inconvertible  types	160	None	replace
714	[BUG]  [BUGGY]  point[pj]  =  tmpVec,  cost.cloneTree();  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  point[pj]  =  tmpVec,  cost.cloneTree();  [BUGGY]      }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	point[pj]  =  tmpVec,  cost.cloneTree();	  point[pj]    =    tmpVec.cloneTree();    	non-compiled	[CE]  ';'  expected	148	None	replace
715	[BUG]  [BUGGY]  for(int  i  =  0;  j  <  k;  ++i)  {  point[pj]  =  oldX[pj];  }  [CE]  cannot  find  symbol  k  [FE]                    AssertionFailedError      [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  for(int  i  =  0;  j  <  k;  ++i)  {  point[pj]  =  oldX[pj];  }  [BUGGY]      point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	for(int  i  =  0;  j  <  k;  ++i)  {  point[pj]  =  oldX[pj];  }	  for(int    i    =    0;    j    <    solvedCols;    ++i)    {    point[pj]    =    oldX[pj];    }    timeout    	non-compiled	[CE]  cannot  find  symbol  k	84	None	replace
716	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError      [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  point[j]  =  point[pj];  [BUGGY]      }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	add	point[j]  =  point[pj];	  point[j]    =    cost[pj];    	compilable	  [FE]  AssertionFailedError  	118	12	replace
717	[BUG]  [BUGGY]  point[j]  =  point[pj];  [FE]  AssertionFailedError  [FE]        AssertionFailedError      [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  point[j]  =  point[pj];  [BUGGY]      }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	point[j]  =  point[pj];	  point[j]    =    cost[pj];    	compilable	  [FE]  AssertionFailedError  	118	12	replace
718	[BUG]  [BUGGY]  for(int  i  =  0;  j  <  resolvedCols;  ++i)  {  point[i]  =  oldX[i];  }  [CE]  cannot  find  symbol  resolvedCols  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  for(int  i  =  0;  j  <  resolvedCols;  ++i)  {  point[i]  =  oldX[i];  }  [BUGGY]      point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	for(int  i  =  0;  j  <  resolvedCols;  ++i)  {  point[i]  =  oldX[i];  }	          for(int    i    =    0;    j    <    solvedCols;    ++i)    {    point[pj]    =    oldX[i];    }    for(int    i    =    0;    j    <    resolvedCols;    ++i)    {    point[pj]    =    oldX[i];    }    	non-compiled	[CE]  cannot  find  symbol  resolvedCols	48	None	replace
719	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  oldX.length;  ++i)  {  int  oldX  =  oldX[i];  }  [CE]  variable  oldX  is  already  defined  in  method  doOptimize()  [FE]                  AssertionFailedError      [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  for(int  i  =  0;  i  <  oldX.length;  ++i)  {  int  oldX  =  oldX[i];  }  [BUGGY]      point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	for(int  i  =  0;  i  <  oldX.length;  ++i)  {  int  oldX  =  oldX[i];  }	  for(int    i    =    0;    i    <    oldX.length;    ++i)    {    int    oldX    =    oldX[i];    	non-compiled	[CE]  variable  oldX  is  already  defined  in  method  doOptimize()	58	None	replace
720	[BUG]  [BUGGY]  point[pj]  =  VectorialPointValuePair.evaluate();  [CE]  cannot  find  symbol  [FE]        AssertionFailedError      [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  point[pj]  =  VectorialPointValuePair.evaluate();  [BUGGY]      }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	point[pj]  =  VectorialPointValuePair.evaluate();	  point[pj]    =    cost;    ((    VectorialPointValuePair)point[pj]).evaluate();    	non-compiled	[CE]  cannot  find  symbol	153	None	replace
721	[BUG]  [BUGGY]  point[j]  =  permutation[pj];  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  point[j]  =  permutation[pj];  }  [CE]  variable  j  is  already  defined  in  method  doOptimize()  [FE]    AssertionFailedError    [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  point[j]  =  permutation[pj];  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  point[j]  =  permutation[pj];  }  [BUGGY]      }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	point[j]    =    permutation[pj];    for(int  j  =  0;  j  <  solvedCols;  ++j)  {  point[j]  =  permutation[pj];  }	  	non-compiled	[CE]  variable  j  is  already  defined  in  method  doOptimize()	92	None	add
722	[BUG]  [BUGGY]  point[j]  =  permutation[pj];  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  int  point[j]  =  permutation[pj];  }  [CE]  ']'  expected  [FE]      AssertionFailedError    [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  point[j]  =  permutation[pj];  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  int  point[j]  =  permutation[pj];  }  [BUGGY]      }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	point[j]    =    permutation[pj];    for(int  j  =  0;  j  <  solvedCols;  ++j)  {  int  point[j]  =  permutation[pj];  }	  	non-compiled	[CE]  ']'  expected	92	None	add
723	[BUG]  [BUGGY]  point[j]  =  permutation[pj];  for(int  j  =  0;  j  <  solveCols;  ++j)  {  point[j]  =  permutation[pj];  }  [CE]  variable  j  is  already  defined  in  method  doOptimize()  [FE]        AssertionFailedError    [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  point[j]  =  permutation[pj];  for(int  j  =  0;  j  <  solveCols;  ++j)  {  point[j]  =  permutation[pj];  }  [BUGGY]      }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	point[j]    =    permutation[pj];    for(int  j  =  0;  j  <  solveCols;  ++j)  {  point[j]  =  permutation[pj];  }	  	non-compiled	[CE]  variable  j  is  already  defined  in  method  doOptimize()	92	None	add
724	[BUG]  [BUGGY]  ((  VectorialPointValuePair)previous).setIndex(pj  /  1);  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  ((  VectorialPointValuePair)previous).setIndex(pj  /  1);  [BUGGY]      point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	((  VectorialPointValuePair)previous).setIndex(pj  /  1);	  ((    VectorialPointValuePair)previous).setIndex(pj    +    1);    	non-compiled	[CE]  cannot  find  symbol	10	None	replace
725	[BUG]  [BUGGY]  int  pj  =  oldX[pj];  [CE]  variable  pj  is  already  defined  in  method  doOptimize()  [FE]        AssertionFailedError      [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  int  pj  =  oldX[pj];  [BUGGY]      point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	int  pj  =  oldX[pj];	          for(int    i    =    0;    i    <    solvedCols;    ++i)    {    point[pj]    =    cost;    }    Integer    i    =    0;    i    <    solvedCols;    ++i)    {    point[pj]    =    cost;    }    	non-compiled	[CE]  variable  pj  is  already  defined  in  method  doOptimize()	136	None	replace
726	[BUG]  [BUGGY]  tmpVec  =  cost  *  1;  [CE]  incompatible  types  [FE]                AssertionFailedError      [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  tmpVec  =  cost  *  1;  [BUGGY]      point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	tmpVec  =  cost  *  1;	  tmpVec    =    cost    +    1;    	non-compiled	[CE]  incompatible  types	152	None	replace
727	[BUG]  [BUGGY]  point[pj]    =    permutation[pj];    point[pj]  =  permutation[pj];  point[pj]  =  costRelativeTolerance[pj];  point[pj]  =  costRelativeTolerance[pj];  [CE]  array  required,  but  double  found  [FE]    AssertionFailedError    [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  point[pj]    =    permutation[pj];    point[pj]  =  permutation[pj];  point[pj]  =  costRelativeTolerance[pj];  point[pj]  =  costRelativeTolerance[pj];  [BUGGY]      }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	point[pj]        =        permutation[pj];        point[pj]    =    permutation[pj];    point[pj]  =  costRelativeTolerance[pj];  point[pj]  =  costRelativeTolerance[pj];	  	non-compiled	[CE]  array  required,  but  double  found	14	None	add
728	[BUG]  [BUGGY]  point[pj]    =    permutation[pj];    point[pj]  =  permutation[pj];  point[pj]  =  parmutation[pj];  point[pj]  =  parmutation[pj];  [CE]  cannot  find  symbol  parmutation  [FE]      AssertionFailedError    [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  point[pj]    =    permutation[pj];    point[pj]  =  permutation[pj];  point[pj]  =  parmutation[pj];  point[pj]  =  parmutation[pj];  [BUGGY]      }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	point[pj]        =        permutation[pj];        point[pj]    =    permutation[pj];    point[pj]  =  parmutation[pj];  point[pj]  =  parmutation[pj];	  	non-compiled	[CE]  cannot  find  symbol  parmutation	14	None	add
729	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  point[pj]    =    permutation[pj];    point[pj]  =  permutation[pj];  point[pj]  =  point[pj];  point[pj]  =  point[pj];  [BUGGY]      }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	add	point[pj]        =        permutation[pj];        point[pj]    =    permutation[pj];    point[pj]  =  point[pj];  point[pj]  =  point[pj];	  	compilable	  [FE]  AssertionFailedError  	14	2	add
730	[BUG]  [BUGGY]  point[pj]    =    permutation[pj];    point[pj]  =  permutation[pj];  point[pj]  =  point[pj];  point[pj]  =  point[pj];  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  point[pj]    =    permutation[pj];    point[pj]  =  permutation[pj];  point[pj]  =  point[pj];  point[pj]  =  point[pj];  [BUGGY]      }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	point[pj]        =        permutation[pj];        point[pj]    =    permutation[pj];    point[pj]  =  point[pj];  point[pj]  =  point[pj];	  	compilable	  [FE]  AssertionFailedError  	14	2	add
731	[BUG]  [BUGGY]  point[pj]  =  cost;  Point[pj]  =  point;  [CE]  cannot  find  symbol  Point  [FE]              AssertionFailedError      [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  point[pj]  =  cost;  Point[pj]  =  point;  [BUGGY]      }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	point[pj]  =  cost;  Point[pj]  =  point;	  point[pj]    =    cost;    Point[pj]    =    cost;    	non-compiled	[CE]  cannot  find  symbol  Point	42	None	replace
732	[BUG]  [BUGGY]  tmpVec  =  permutation[j]  /  cost;  [CE]  incompatible  types  [FE]                AssertionFailedError      [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  tmpVec  =  permutation[j]  /  cost;  [BUGGY]      point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	tmpVec  =  permutation[j]  /  cost;	  tmpVec    =    permutation[j]    +    cost;    	non-compiled	[CE]  incompatible  types	135	None	replace
733	[BUG]  [BUGGY]  point[pj]  =  point[pj].;  [CE]  <identifier>  expected  [FE]          AssertionFailedError      [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  point[pj]  =  point[pj].;  [BUGGY]      }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	point[pj]  =  point[pj].;	  point[pj]    =    permutation[pj];    point[pj]    =    permutation[pj].;    	non-compiled	[CE]  <identifier>  expected	146	None	replace
734	[BUG]  [BUGGY]  point[pj]  =  cost.toString();  [CE]  double  cannot  be  dereferenced  [FE]            AssertionFailedError      [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  point[pj]  =  cost.toString();  [BUGGY]      }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	point[pj]  =  cost.toString();	  point[pj]    =    permutation[pj];    point[pj]    =    permutation[pj].;    	non-compiled	[CE]  double  cannot  be  dereferenced	146	None	replace
735	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  pk;  ++i)  {  point[pj]  =  cost;  }  [CE]  cannot  find  symbol  pk  [FE]            AssertionFailedError      [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  for(int  i  =  0;  i  <  pk;  ++i)  {  point[pj]  =  cost;  }  [BUGGY]      point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	for(int  i  =  0;  i  <  pk;  ++i)  {  point[pj]  =  cost;  }	  for(int    i    =    0;    i    <    fixedCols;    ++i)    {    point[pj]    =    cost;    }    	non-compiled	[CE]  cannot  find  symbol  pk	65	None	replace
736	[BUG]  [BUGGY]  point[pj]  =  cost  +  1;  ((  VectorialPointValuePair)previous).setIndex(pj);  [CE]  cannot  find  symbol  [FE]    AssertionFailedError    [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  point[pj]  =  cost  +  1;  ((  VectorialPointValuePair)previous).setIndex(pj);  [BUGGY]      }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	point[pj]    =    cost    +    1;    ((  VectorialPointValuePair)previous).setIndex(pj);	  	non-compiled	[CE]  cannot  find  symbol	7	None	add
737	[BUG]  [BUGGY]  point[pj]  =  cost  +  1;  ((  VectorialPointValuePair)previous).setVec(pj);  [CE]  cannot  find  symbol  [FE]      AssertionFailedError    [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  point[pj]  =  cost  +  1;  ((  VectorialPointValuePair)previous).setVec(pj);  [BUGGY]      }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	point[pj]    =    cost    +    1;    ((  VectorialPointValuePair)previous).setVec(pj);	  	non-compiled	[CE]  cannot  find  symbol	7	None	add
738	[BUG]  [BUGGY]  point[pj]  =  cost[permutation];  [CE]  incompatible  types  [FE]              AssertionFailedError      [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  point[pj]  =  cost[permutation];  [BUGGY]      }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	point[pj]  =  cost[permutation];	  point[pj]    =    permutation[cost];    	non-compiled	[CE]  incompatible  types	3	None	replace
739	[BUG]  [BUGGY]  tmpVec  =  oldX;  tmpVec  =  oldX);  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  tmpVec  =  oldX;  tmpVec  =  oldX);  [BUGGY]      point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	tmpVec    =    oldX;    tmpVec  =  oldX);	  	non-compiled	[CE]  ';'  expected	88	None	add
740	[BUG]  [BUGGY]  point[pj]  =  cost?  permutation[pj]  :  xNorm,  solvedCols;  [CE]  ';'  expected  [FE]          AssertionFailedError      [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  point[pj]  =  cost?  permutation[pj]  :  xNorm,  solvedCols;  [BUGGY]      }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	point[pj]  =  cost?  permutation[pj]  :  xNorm,  solvedCols;	  point[pj]    =    cost?    permutation[pj]    :    xNorm;    	non-compiled	[CE]  ';'  expected	151	None	replace
741	[BUG]  [BUGGY]  point[pj]  =  cost?  permutation[pj]  :  xNorm,  solveCols;  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  point[pj]  =  cost?  permutation[pj]  :  xNorm,  solveCols;  [BUGGY]      }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	point[pj]  =  cost?  permutation[pj]  :  xNorm,  solveCols;	  point[pj]    =    cost?    permutation[pj]    :    xNorm;    	non-compiled	[CE]  ';'  expected	151	None	replace
742	[BUG]  [BUGGY]  point[pj]  =  cost;  points[pj]  =  tmp;  [CE]  cannot  find  symbol  points  [FE]          AssertionFailedError      [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  point[pj]  =  cost;  points[pj]  =  tmp;  [BUGGY]      }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	point[pj]  =  cost;  points[pj]  =  tmp;	  point[pj]    =    cost;    points[pj]    =    cost;    	non-compiled	[CE]  cannot  find  symbol  points	40	None	replace
743	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  k;  ++i)  {  point[pj]  =  oldX[pj];  }  [CE]  variable  j  is  already  defined  in  method  doOptimize()  [FE]                  AssertionFailedError      [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  for(int  j  =  0;  j  <  k;  ++i)  {  point[pj]  =  oldX[pj];  }  [BUGGY]      point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	for(int  j  =  0;  j  <  k;  ++i)  {  point[pj]  =  oldX[pj];  }	  for(int    j    =    0;    j    <    solvedCols;    ++i)    {    point[pj]    =    oldX[pj];    }    	non-compiled	[CE]  variable  j  is  already  defined  in  method  doOptimize()	162	None	replace
744	[BUG]  [BUGGY]  ((  VectorialPointValuePair)point[pj]).setIndex(pj  -  1);  [CE]  inconvertible  types  [FE]          AssertionFailedError      [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  ((  VectorialPointValuePair)point[pj]).setIndex(pj  -  1);  [BUGGY]      }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	((  VectorialPointValuePair)point[pj]).setIndex(pj  -  1);	  point[pj]    =    xNorm;    ((    VectorialPointValuePair)point[pj]).setIndex(pj);    	non-compiled	[CE]  inconvertible  types	133	None	replace
745	[BUG]  [BUGGY]  ((  VectorialPointValuePair)point[pj]).setIndex(pj  +  1);  [CE]  inconvertible  types  [FE]            AssertionFailedError      [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  ((  VectorialPointValuePair)point[pj]).setIndex(pj  +  1);  [BUGGY]      }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	((  VectorialPointValuePair)point[pj]).setIndex(pj  +  1);	  point[pj]    =    xNorm;    ((    VectorialPointValuePair)point[pj]).setIndex(pj);    	non-compiled	[CE]  inconvertible  types	133	None	replace
746	[BUG]  [BUGGY]  ((  VectorialPointValuePair)permutation).add(pj  -  1);  [CE]  inconvertible  types  [FE]                AssertionFailedError      [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  ((  VectorialPointValuePair)permutation).add(pj  -  1);  [BUGGY]      point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	((  VectorialPointValuePair)permutation).add(pj  -  1);	  ((    VectorialPointValuePair)permutation).remove(pj);    	non-compiled	[CE]  inconvertible  types	101	None	replace
747	[BUG]  [BUGGY]  point[pj]    =    xNorm;    point[pj]  =  xNorm;  point[pj]  =  tmp;  point[pj]  =  xNorm;  [CE]  cannot  find  symbol  tmp  [FE]    AssertionFailedError    [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  point[pj]    =    xNorm;    point[pj]  =  xNorm;  point[pj]  =  tmp;  point[pj]  =  xNorm;  [BUGGY]      }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	point[pj]        =        xNorm;        point[pj]    =    xNorm;    point[pj]  =  tmp;  point[pj]  =  xNorm;	  	non-compiled	[CE]  cannot  find  symbol  tmp	29	None	add
748	[BUG]  [BUGGY]  point[pj]    =    xNorm;    point[pj]  =  xNorm;  point[pj]  =  dk;  point[pj]  =  xNorm;  [CE]  cannot  find  symbol  dk  [FE]      AssertionFailedError    [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  point[pj]    =    xNorm;    point[pj]  =  xNorm;  point[pj]  =  dk;  point[pj]  =  xNorm;  [BUGGY]      }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	point[pj]        =        xNorm;        point[pj]    =    xNorm;    point[pj]  =  dk;  point[pj]  =  xNorm;	  	non-compiled	[CE]  cannot  find  symbol  dk	29	None	add
749	[BUG]  [BUGGY]  point[pj]    =    xNorm;    point[pj]  =  xNorm;  point[pj]  =  iNorm;  point[pj]  =  xNorm;  [CE]  cannot  find  symbol  iNorm  [FE]        AssertionFailedError    [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  point[pj]    =    xNorm;    point[pj]  =  xNorm;  point[pj]  =  iNorm;  point[pj]  =  xNorm;  [BUGGY]      }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	point[pj]        =        xNorm;        point[pj]    =    xNorm;    point[pj]  =  iNorm;  point[pj]  =  xNorm;	  	non-compiled	[CE]  cannot  find  symbol  iNorm	29	None	add
750	[BUG]  [BUGGY]  ((  VectorialPointValuePair)point).remove(previousCost);  [CE]  inconvertible  types  [FE]                    AssertionFailedError      [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  ((  VectorialPointValuePair)point).remove(previousCost);  [BUGGY]      point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	((  VectorialPointValuePair)point).remove(previousCost);	  ((    VectorialPointValuePair)previousCost).remove(point);    	non-compiled	[CE]  inconvertible  types	110	None	replace
751	[BUG]  [BUGGY]  ((  VectorialPointValuePair)point[pj]).evaluate(xNorm,  pj);  [CE]  inconvertible  types  [FE]        AssertionFailedError      [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  ((  VectorialPointValuePair)point[pj]).evaluate(xNorm,  pj);  [BUGGY]      }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	((  VectorialPointValuePair)point[pj]).evaluate(xNorm,  pj);	  point[pj]    =    xNorm;    ((    VectorialPointValuePair)point[pj]).evaluate(xNorm);    	non-compiled	[CE]  inconvertible  types	158	None	replace
752	[BUG]  [BUGGY]  ((  VectorialPointValuePair)point[pj]).evaluate(xNorm,  cost);  [CE]  inconvertible  types  [FE]          AssertionFailedError      [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  ((  VectorialPointValuePair)point[pj]).evaluate(xNorm,  cost);  [BUGGY]      }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	((  VectorialPointValuePair)point[pj]).evaluate(xNorm,  cost);	  point[pj]    =    xNorm;    ((    VectorialPointValuePair)point[pj]).evaluate(xNorm);    	non-compiled	[CE]  inconvertible  types	158	None	replace
753	[BUG]  [BUGGY]          for(int    i    =    0;    i    <    solvedCols;    ++i)    {    point[pj]    =    cost;    }    for(int  i  =  0;  i  <  solvedCols;  ++i)  {  point[pj]  =  cost;  }  for(int  i  =  0;  i  <  solvedCols;  ++i)  {  point[pj]  =  value;  }  [CE]  cannot  find  symbol  value  [FE]    AssertionFailedError    [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]          for(int    i    =    0;    i    <    solvedCols;    ++i)    {    point[pj]    =    cost;    }    for(int  i  =  0;  i  <  solvedCols;  ++i)  {  point[pj]  =  cost;  }  for(int  i  =  0;  i  <  solvedCols;  ++i)  {  point[pj]  =  value;  }  [BUGGY]      point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	                for(int        i        =        0;        i        <        solvedCols;        ++i)        {        point[pj]        =        cost;        }        for(int    i    =    0;    i    <    solvedCols;    ++i)    {    point[pj]    =    cost;    }    for(int  i  =  0;  i  <  solvedCols;  ++i)  {  point[pj]  =  value;  }	  	non-compiled	[CE]  cannot  find  symbol  value	66	None	add
754	[BUG]  [BUGGY]          for(int    i    =    0;    i    <    solvedCols;    ++i)    {    point[pj]    =    cost;    }    for(int  i  =  0;  i  <  solvedCols;  ++i)  {  point[pj]  =  cost;  }  for(int  i  =  0;  i  <  resolvedCols;  ++i)  {  point[pj]  =  cost;  }  [CE]  cannot  find  symbol  resolvedCols  [FE]      AssertionFailedError    [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]          for(int    i    =    0;    i    <    solvedCols;    ++i)    {    point[pj]    =    cost;    }    for(int  i  =  0;  i  <  solvedCols;  ++i)  {  point[pj]  =  cost;  }  for(int  i  =  0;  i  <  resolvedCols;  ++i)  {  point[pj]  =  cost;  }  [BUGGY]      point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	                for(int        i        =        0;        i        <        solvedCols;        ++i)        {        point[pj]        =        cost;        }        for(int    i    =    0;    i    <    solvedCols;    ++i)    {    point[pj]    =    cost;    }    for(int  i  =  0;  i  <  resolvedCols;  ++i)  {  point[pj]  =  cost;  }	  	non-compiled	[CE]  cannot  find  symbol  resolvedCols	66	None	add
755	[BUG]  [BUGGY]  int  j  =  0;  j  <  solvedCols;  ++j)  {  point[j]  =  oldX[j];  }  [CE]  >  expected  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  int  j  =  0;  j  <  solvedCols;  ++j)  {  point[j]  =  oldX[j];  }  [BUGGY]      point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	int  j  =  0;  j  <  solvedCols;  ++j)  {  point[j]  =  oldX[j];  }	  for(int    j    =    0;    j    <    solvedCols;    ++j)    {    point[j]    =    oldX[j];    }    	non-compiled	[CE]  >  expected	121	None	replace
756	[BUG]  [BUGGY]          for(int    i    =    0;    j    <    solvedCols;    ++i)    {    point[pj]    =    cost;    }    for(int  i  =  0;  j  <  solvedCols;  ++i)  {  point[pj]  =  cost;  }  for(int  i  =  0;  j  <  solvedCols;  ++i)  {  point[pj]  =  value;  }  [CE]  cannot  find  symbol  value  [FE]                AssertionFailedError      [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]          for(int    i    =    0;    j    <    solvedCols;    ++i)    {    point[pj]    =    cost;    }    for(int  i  =  0;  j  <  solvedCols;  ++i)  {  point[pj]  =  cost;  }  for(int  i  =  0;  j  <  solvedCols;  ++i)  {  point[pj]  =  value;  }  [BUGGY]      point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	                for(int        i        =        0;        j        <        solvedCols;        ++i)        {        point[pj]        =        cost;        }        for(int    i    =    0;    j    <    solvedCols;    ++i)    {    point[pj]    =    cost;    }    for(int  i  =  0;  j  <  solvedCols;  ++i)  {  point[pj]  =  value;  }	  timeout    	non-compiled	[CE]  cannot  find  symbol  value	20	None	add
757	[BUG]  [BUGGY]          for(int    i    =    0;    j    <    solvedCols;    ++i)    {    point[pj]    =    cost;    }    for(int  i  =  0;  j  <  solvedCols;  ++i)  {  point[pj]  =  cost;  }  for(int  i  =  0;  j  <  resolvedCols;  ++i)  {  point[pj]  =  cost;  }  [CE]  cannot  find  symbol  resolvedCols  [FE]                  AssertionFailedError      [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]          for(int    i    =    0;    j    <    solvedCols;    ++i)    {    point[pj]    =    cost;    }    for(int  i  =  0;  j  <  solvedCols;  ++i)  {  point[pj]  =  cost;  }  for(int  i  =  0;  j  <  resolvedCols;  ++i)  {  point[pj]  =  cost;  }  [BUGGY]      point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	                for(int        i        =        0;        j        <        solvedCols;        ++i)        {        point[pj]        =        cost;        }        for(int    i    =    0;    j    <    solvedCols;    ++i)    {    point[pj]    =    cost;    }    for(int  i  =  0;  j  <  resolvedCols;  ++i)  {  point[pj]  =  cost;  }	  timeout    	non-compiled	[CE]  cannot  find  symbol  resolvedCols	20	None	add
758	[BUG]  [BUGGY]          for(int    i    =    0;    j    <    solvedCols;    ++i)    {    point[pj]    =    cost;    }    for(int  i  =  0;  j  <  solvedCols;  ++i)  {  point[pj]  =  cost;  }  For(int  i  =  0;  j  <  solvedCols;  ++i)  {  point[pj]  =  cost;  }  [CE]  '.class'  expected  [FE]                    AssertionFailedError      [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]          for(int    i    =    0;    j    <    solvedCols;    ++i)    {    point[pj]    =    cost;    }    for(int  i  =  0;  j  <  solvedCols;  ++i)  {  point[pj]  =  cost;  }  For(int  i  =  0;  j  <  solvedCols;  ++i)  {  point[pj]  =  cost;  }  [BUGGY]      point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	                for(int        i        =        0;        j        <        solvedCols;        ++i)        {        point[pj]        =        cost;        }        for(int    i    =    0;    j    <    solvedCols;    ++i)    {    point[pj]    =    cost;    }    For(int  i  =  0;  j  <  solvedCols;  ++i)  {  point[pj]  =  cost;  }	  timeout    	non-compiled	[CE]  '.class'  expected	20	None	add
759	[BUG]  [BUGGY]  tmpVec  =  new  VectorialPointValuePair();  [CE]  no  suitable  constructor  found  for  VectorialPointValuePair()  [FE]    AssertionFailedError    [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  tmpVec  =  new  VectorialPointValuePair();  [BUGGY]      point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	tmpVec  =  new  VectorialPointValuePair();	  tmpVec    =    oldX;    	non-compiled	[CE]  no  suitable  constructor  found  for  VectorialPointValuePair()	89	None	replace
760	[BUG]  [BUGGY]  ((  VectorialPointValuePair)previous).setIndex(cost);  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  ((  VectorialPointValuePair)previous).setIndex(cost);  [BUGGY]      point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	((  VectorialPointValuePair)previous).setIndex(cost);	  ((    VectorialPointValuePair)previous).setIndex(point);    	non-compiled	[CE]  cannot  find  symbol	13	None	replace
761	[BUG]  [BUGGY]  int  pj  =  oldX[j]  -  1;  [CE]  variable  pj  is  already  defined  in  method  doOptimize()  [FE]                AssertionFailedError      [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  int  pj  =  oldX[j]  -  1;  [BUGGY]      point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	int  pj  =  oldX[j]  -  1;	  int    pj    =    permutation[j]    -    1;    	non-compiled	[CE]  variable  pj  is  already  defined  in  method  doOptimize()	28	None	replace
762	[BUG]  [BUGGY]  int  pj  =  cost[j]  -  1;  [CE]  variable  pj  is  already  defined  in  method  doOptimize()  [FE]                  AssertionFailedError      [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  int  pj  =  cost[j]  -  1;  [BUGGY]      point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	int  pj  =  cost[j]  -  1;	  int    pj    =    permutation[j]    -    1;    	non-compiled	[CE]  variable  pj  is  already  defined  in  method  doOptimize()	28	None	replace
763	[BUG]  [BUGGY]  point[pj]  =  cost  -  1;  ((  VectorialPointValuePair)previous).setIndex(pj);  [CE]  cannot  find  symbol  [FE]    AssertionFailedError    [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  point[pj]  =  cost  -  1;  ((  VectorialPointValuePair)previous).setIndex(pj);  [BUGGY]      }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	point[pj]    =    cost    -    1;    ((  VectorialPointValuePair)previous).setIndex(pj);	  	non-compiled	[CE]  cannot  find  symbol	122	None	add
764	[BUG]  [BUGGY]  point[pj]  =  cost  -  1;  ((  VectorialPointValuePair)previous).setVec(pj);  [CE]  cannot  find  symbol  [FE]      AssertionFailedError    [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  point[pj]  =  cost  -  1;  ((  VectorialPointValuePair)previous).setVec(pj);  [BUGGY]      }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	point[pj]    =    cost    -    1;    ((  VectorialPointValuePair)previous).setVec(pj);	  	non-compiled	[CE]  cannot  find  symbol	122	None	add
765	[BUG]  [BUGGY]  ((  VectorialPointValuePair)pj).setValue(oldX,  oldX);  [CE]  inconvertible  types  [FE]              AssertionFailedError      [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  ((  VectorialPointValuePair)pj).setValue(oldX,  oldX);  [BUGGY]      point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	((  VectorialPointValuePair)pj).setValue(oldX,  oldX);	  ((    VectorialPointValuePair)pj).remove(pj);    	non-compiled	[CE]  inconvertible  types	100	None	replace
766	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  fixedCols;  ++j)  {  point[pj]  =  oldX[pj];  }  [CE]  variable  j  is  already  defined  in  method  doOptimize()  [FE]                AssertionFailedError      [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  for(int  j  =  0;  j  <  fixedCols;  ++j)  {  point[pj]  =  oldX[pj];  }  [BUGGY]      point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	for(int  j  =  0;  j  <  fixedCols;  ++j)  {  point[pj]  =  oldX[pj];  }	  for(int    j    =    0;    j    <    solvedCols;    ++j)    {    point[pj]    =    oldX[pj];    }    	non-compiled	[CE]  variable  j  is  already  defined  in  method  doOptimize()	161	None	replace
767	[BUG]  [BUGGY]  point[pj]  =  iNorm;  pj]  =  xNorm;  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  point[pj]  =  iNorm;  pj]  =  xNorm;  [BUGGY]      }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	point[pj]  =  iNorm;  pj]  =  xNorm;	  point[pj]    =    xNorm;    pj]    =    xNorm;    	non-compiled	[CE]  not  a  statement	33	None	replace
768	[BUG]  [BUGGY]  point[pj]  =  xNorm;  pj]  =  tmp;  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  point[pj]  =  xNorm;  pj]  =  tmp;  [BUGGY]      }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	point[pj]  =  xNorm;  pj]  =  tmp;	  point[pj]    =    xNorm;    pj]    =    xNorm;    	non-compiled	[CE]  not  a  statement	33	None	replace
769	[BUG]  [BUGGY]  point[pj]  =  xNorm;  pj]  =  yNorm;  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  point[pj]  =  xNorm;  pj]  =  yNorm;  [BUGGY]      }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	point[pj]  =  xNorm;  pj]  =  yNorm;	  point[pj]    =    xNorm;    pj]    =    xNorm;    	non-compiled	[CE]  not  a  statement	33	None	replace
770	[BUG]  [BUGGY]  tmpVec  =  Math.sqrt(cost);  [CE]  incompatible  types  [FE]              AssertionFailedError      [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  tmpVec  =  Math.sqrt(cost);  [BUGGY]      point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	tmpVec  =  Math.sqrt(cost);	  tmpVec    =    Math.sqrt(xNorm);    	non-compiled	[CE]  incompatible  types	149	None	replace
771	[BUG]  [BUGGY]  tmpVec  =  Math.sqrt(varPrefix);  [CE]  cannot  find  symbol  varPrefix  [FE]                AssertionFailedError      [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  tmpVec  =  Math.sqrt(varPrefix);  [BUGGY]      point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	tmpVec  =  Math.sqrt(varPrefix);	  tmpVec    =    Math.sqrt(xNorm);    	non-compiled	[CE]  cannot  find  symbol  varPrefix	149	None	replace
772	[BUG]  [BUGGY]  int  oldX  =  oldX[i]  -  1;  [CE]  variable  oldX  is  already  defined  in  method  doOptimize()  [FE]              AssertionFailedError      [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  int  oldX  =  oldX[i]  -  1;  [BUGGY]      point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	int  oldX  =  oldX[i]  -  1;	  int    oldX    =    oldX[i];    	non-compiled	[CE]  variable  oldX  is  already  defined  in  method  doOptimize()	56	None	replace
773	[BUG]  [BUGGY]  int  oldX  =  oldX[i]  &  0xff;  [CE]  variable  oldX  is  already  defined  in  method  doOptimize()  [FE]                AssertionFailedError      [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  int  oldX  =  oldX[i]  &  0xff;  [BUGGY]      point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	int  oldX  =  oldX[i]  &  0xff;	  int    oldX    =    oldX[i];    	non-compiled	[CE]  variable  oldX  is  already  defined  in  method  doOptimize()	56	None	replace
774	[BUG]  [BUGGY]  int  oldX  =  oldX[j];  [CE]  variable  oldX  is  already  defined  in  method  doOptimize()  [FE]                  AssertionFailedError      [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  int  oldX  =  oldX[j];  [BUGGY]      point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	int  oldX  =  oldX[j];	  int    oldX    =    oldX[i];    	non-compiled	[CE]  variable  oldX  is  already  defined  in  method  doOptimize()	56	None	replace
775	[BUG]  [BUGGY]  timeout  [FE]    AssertionFailedError    [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  point[pj]  =  permutation[j];  for(int  i  =  0;  j  <  solvedCols;  ++i)  {  point[pj]  =  permutation[j];  }  [BUGGY]      }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	add	point[pj]    =    permutation[j];    for(int  i  =  0;  j  <  solvedCols;  ++i)  {  point[pj]  =  permutation[j];  }	  	compilable	timeout	1	1	add
776	[BUG]  [BUGGY]  point[pj]  =  permutation[j];  for(int  i  =  0;  j  <  solvedCols;  ++i)  {  point[pj]  =  permutation[j];  }  timeout  [FE]    AssertionFailedError    [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  point[pj]  =  permutation[j];  for(int  i  =  0;  j  <  solvedCols;  ++i)  {  point[pj]  =  permutation[j];  }  [BUGGY]      }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	point[pj]    =    permutation[j];    for(int  i  =  0;  j  <  solvedCols;  ++i)  {  point[pj]  =  permutation[j];  }	  	compilable	timeout	1	1	add
777	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  point[pj]  =  permutation[j];  for(int  i  =  0;  i  <  solvedCols;  ++i)  {  point[pj]  =  permutation[j];  }  [BUGGY]      }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	add	point[pj]    =    permutation[j];    for(int  i  =  0;  i  <  solvedCols;  ++i)  {  point[pj]  =  permutation[j];  }	  	compilable	  [FE]  AssertionFailedError  	1	2	add
778	[BUG]  [BUGGY]  point[pj]  =  permutation[j];  for(int  i  =  0;  i  <  solvedCols;  ++i)  {  point[pj]  =  permutation[j];  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  point[pj]  =  permutation[j];  for(int  i  =  0;  i  <  solvedCols;  ++i)  {  point[pj]  =  permutation[j];  }  [BUGGY]      }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	point[pj]    =    permutation[j];    for(int  i  =  0;  i  <  solvedCols;  ++i)  {  point[pj]  =  permutation[j];  }	  	compilable	  [FE]  AssertionFailedError  	1	2	add
779	[BUG]  [BUGGY]  point[pj]  =  permutation[j];  for(int  i  =  0;  j  <  solveCols;  ++i)  {  point[pj]  =  permutation[j];  }  [CE]  cannot  find  symbol  solveCols  [FE]        AssertionFailedError    [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  point[pj]  =  permutation[j];  for(int  i  =  0;  j  <  solveCols;  ++i)  {  point[pj]  =  permutation[j];  }  [BUGGY]      }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	point[pj]    =    permutation[j];    for(int  i  =  0;  j  <  solveCols;  ++i)  {  point[pj]  =  permutation[j];  }	  	non-compiled	[CE]  cannot  find  symbol  solveCols	1	None	add
780	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]          AssertionFailedError    [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  point[pj]  =  permutation[j];  for(int  i  =  0;  i  <  solvedCols;  ++j)  {  point[pj]  =  permutation[j];  }  [BUGGY]      }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	add	point[pj]    =    permutation[j];    for(int  i  =  0;  i  <  solvedCols;  ++j)  {  point[pj]  =  permutation[j];  }	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	1	15	add
781	[BUG]  [BUGGY]  point[pj]  =  permutation[j];  for(int  i  =  0;  i  <  solvedCols;  ++j)  {  point[pj]  =  permutation[j];  }  [FE]  ArrayIndexOutOfBoundsException  [FE]          AssertionFailedError    [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  point[pj]  =  permutation[j];  for(int  i  =  0;  i  <  solvedCols;  ++j)  {  point[pj]  =  permutation[j];  }  [BUGGY]      }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	point[pj]    =    permutation[j];    for(int  i  =  0;  i  <  solvedCols;  ++j)  {  point[pj]  =  permutation[j];  }	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	1	15	add
782	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  point[j]  =  oldX[pj  -  1];  if(pj  >  0)  {  point[j]  =  oldX[pj  -  1];  }  [BUGGY]      }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	add	point[j]    =    oldX[pj    -    1];    if(pj  >  0)  {  point[j]  =  oldX[pj  -  1];  }	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	169	15	add
783	[BUG]  [BUGGY]  point[j]  =  oldX[pj  -  1];  if(pj  >  0)  {  point[j]  =  oldX[pj  -  1];  }  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  point[j]  =  oldX[pj  -  1];  if(pj  >  0)  {  point[j]  =  oldX[pj  -  1];  }  [BUGGY]      }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	point[j]    =    oldX[pj    -    1];    if(pj  >  0)  {  point[j]  =  oldX[pj  -  1];  }	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	169	15	add
784	[BUG]  [BUGGY]  for(int  i  =  0;  j  <  k;  ++i)  {  point[pj]  =  oldX[i];  }  if(i  =  0;  j  <  k);  ++i)  {  point[pj]  =  oldX[i];  }  [CE]  ')'  expected  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  for(int  i  =  0;  j  <  k;  ++i)  {  point[pj]  =  oldX[i];  }  if(i  =  0;  j  <  k);  ++i)  {  point[pj]  =  oldX[i];  }  [BUGGY]      point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	for(int  i  =  0;  j  <  k;  ++i)  {  point[pj]  =  oldX[i];  }  if(i  =  0;  j  <  k);  ++i)  {  point[pj]  =  oldX[i];  }	          for(int    i    =    0;    j    <    solvedCols;    ++i)    {    point[pj]    =    oldX[i];    }    if(i    =    0;    j    <    solvedCols;    ++i)    {    point[pj]    =    oldX[i];    }    	non-compiled	[CE]  ')'  expected	128	None	replace
785	[BUG]  [BUGGY]  for(int  i  =  0;  j  <  resolvedCols;  ++i)  {  point[pj]  =  oldX[i];  }  if(i  =  0;  j  <  solvedCols;  ++i)  {  point[pj]  =  oldX[i];  }  [CE]  ')'  expected  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  for(int  i  =  0;  j  <  resolvedCols;  ++i)  {  point[pj]  =  oldX[i];  }  if(i  =  0;  j  <  solvedCols;  ++i)  {  point[pj]  =  oldX[i];  }  [BUGGY]      point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	for(int  i  =  0;  j  <  resolvedCols;  ++i)  {  point[pj]  =  oldX[i];  }  if(i  =  0;  j  <  solvedCols;  ++i)  {  point[pj]  =  oldX[i];  }	          for(int    i    =    0;    j    <    solvedCols;    ++i)    {    point[pj]    =    oldX[i];    }    if(i    =    0;    j    <    solvedCols;    ++i)    {    point[pj]    =    oldX[i];    }    	non-compiled	[CE]  ')'  expected	128	None	replace
786	[BUG]  [BUGGY]  tmpVec  =  Math.sqrt(lastX);  [CE]  cannot  find  symbol  lastX  [FE]                AssertionFailedError      [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  tmpVec  =  Math.sqrt(lastX);  [BUGGY]      point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	tmpVec  =  Math.sqrt(lastX);	  tmpVec    =    Math.sqrt(lastCost);    	non-compiled	[CE]  cannot  find  symbol  lastX	139	None	replace
787	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  point[pj]  =  cost  *  1;  [BUGGY]      }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	add	point[pj]  =  cost  *  1;	  point[pj]    =    cost    +    1;    	compilable	  [FE]  AssertionFailedError  	8	12	replace
788	[BUG]  [BUGGY]  point[pj]  =  cost  *  1;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  point[pj]  =  cost  *  1;  [BUGGY]      }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	point[pj]  =  cost  *  1;	  point[pj]    =    cost    +    1;    	compilable	  [FE]  AssertionFailedError  	8	12	replace
789	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  oldX;  ++i)  {  int  point  =  oldX[i];  }  [CE]  bad  operand  types  for  binary  operator  '<'  [FE]                AssertionFailedError      [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  for(int  i  =  0;  i  <  oldX;  ++i)  {  int  point  =  oldX[i];  }  [BUGGY]      point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	for(int  i  =  0;  i  <  oldX;  ++i)  {  int  point  =  oldX[i];  }	  for(int    i    =    0;    i    <    oldX;    ++i)    {    int    point    =    oldX[i];    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '<'	175	None	replace
790	[BUG]  [BUGGY]  point[pj]  =  xNorm  +  1;  ((  VectorialPointValuePair)previous).add(xNorm  +  1);  [CE]  cannot  find  symbol  [FE]    AssertionFailedError    [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  point[pj]  =  xNorm  +  1;  ((  VectorialPointValuePair)previous).add(xNorm  +  1);  [BUGGY]      }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	point[pj]    =    xNorm    +    1;    ((  VectorialPointValuePair)previous).add(xNorm  +  1);	  	non-compiled	[CE]  cannot  find  symbol	86	None	add
791	[BUG]  [BUGGY]  point[pj]  =  xNorm  +  1;  ((  VectorialPointValuePair)previous).setIndex(pj);  [CE]  cannot  find  symbol  [FE]      AssertionFailedError    [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  point[pj]  =  xNorm  +  1;  ((  VectorialPointValuePair)previous).setIndex(pj);  [BUGGY]      }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	point[pj]    =    xNorm    +    1;    ((  VectorialPointValuePair)previous).setIndex(pj);	  	non-compiled	[CE]  cannot  find  symbol	86	None	add
792	[BUG]  [BUGGY]  int  pj  =  oldX[j  -  1];  [CE]  variable  pj  is  already  defined  in  method  doOptimize()  [FE]            AssertionFailedError      [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  int  pj  =  oldX[j  -  1];  [BUGGY]      point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	int  pj  =  oldX[j  -  1];	  int    pj    =    permutation[j    -    1];    	non-compiled	[CE]  variable  pj  is  already  defined  in  method  doOptimize()	155	None	replace
793	[BUG]  [BUGGY]  int  pj  =  0;  j  <  solvedCols;  ++i)  {  point[pj]  =  oldX[i];  }  [CE]  >  expected  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  int  pj  =  0;  j  <  solvedCols;  ++i)  {  point[pj]  =  oldX[i];  }  [BUGGY]      point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	int  pj  =  0;  j  <  solvedCols;  ++i)  {  point[pj]  =  oldX[i];  }	  int    i    =    0;    j    <    solvedCols;    ++i)    {    point[pj]    =    oldX[i];    }    	non-compiled	[CE]  >  expected	120	None	replace
794	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  solvedCols;  ++i)  {  point[pj]  =  permutation[j];  }  for(int  i  =  0;  i  <  resolvedCols;  ++i)  {  point[pj]  =  permutation[j];  }  [CE]  cannot  find  symbol  resolvedCols  [FE]    AssertionFailedError    [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  for(int  i  =  0;  i  <  solvedCols;  ++i)  {  point[pj]  =  permutation[j];  }  for(int  i  =  0;  i  <  resolvedCols;  ++i)  {  point[pj]  =  permutation[j];  }  [BUGGY]      point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	for(int    i    =    0;    i    <    solvedCols;    ++i)    {    point[pj]    =    permutation[j];    }    for(int  i  =  0;  i  <  resolvedCols;  ++i)  {  point[pj]  =  permutation[j];  }	  	non-compiled	[CE]  cannot  find  symbol  resolvedCols	63	None	add
795	[BUG]  [BUGGY]  int  pj  =  point[i];  [CE]  variable  pj  is  already  defined  in  method  doOptimize()  [FE]        ArrayIndexOutOfBoundsException      [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  int  pj  =  point[i];  [BUGGY]      point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	int  pj  =  point[i];	  int    pj    =    oldX[i];    	non-compiled	[CE]  variable  pj  is  already  defined  in  method  doOptimize()	140	None	replace
796	[BUG]  [BUGGY]  int  pj  =  oldX[i]  +  1;  [CE]  variable  pj  is  already  defined  in  method  doOptimize()  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  int  pj  =  oldX[i]  +  1;  [BUGGY]      point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	int  pj  =  oldX[i]  +  1;	  int    pj    =    oldX[i];    	non-compiled	[CE]  variable  pj  is  already  defined  in  method  doOptimize()	140	None	replace
797	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  k;  ++i)  {  point[pj]  =  oldX[i];  }  [CE]  variable  j  is  already  defined  in  method  doOptimize()  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  for(int  j  =  0;  j  <  k;  ++i)  {  point[pj]  =  oldX[i];  }  [BUGGY]      point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	for(int  j  =  0;  j  <  k;  ++i)  {  point[pj]  =  oldX[i];  }	  for(int    i    =    0;    j    <    k;    ++i)    {    point[pj]    =    oldX[i];    }    	non-compiled	[CE]  variable  j  is  already  defined  in  method  doOptimize()	141	None	replace
798	[BUG]  [BUGGY]  ((  VectorialPointValuePair)pj).remove(oldX  -  1);  [CE]  bad  operand  types  for  binary  operator  '-'  [FE]                  AssertionFailedError      [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  ((  VectorialPointValuePair)pj).remove(oldX  -  1);  [BUGGY]      point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	((  VectorialPointValuePair)pj).remove(oldX  -  1);	  ((    VectorialPointValuePair)previous).remove(pj    -    1);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '-'	130	None	replace
799	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  for(int  i  =  0;  i  <  j;  ++i)  {  point[pj]  =  oldX[pj];  }  [BUGGY]      point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	add	for(int  i  =  0;  i  <  j;  ++i)  {  point[pj]  =  oldX[pj];  }	  for(int    i    =    0;    i    <    pj;    ++i)    {    point[pj]    =    oldX[pj];    }    	compilable	  [FE]  AssertionFailedError  	178	12	replace
800	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  j;  ++i)  {  point[pj]  =  oldX[pj];  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  for(int  i  =  0;  i  <  j;  ++i)  {  point[pj]  =  oldX[pj];  }  [BUGGY]      point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	for(int  i  =  0;  i  <  j;  ++i)  {  point[pj]  =  oldX[pj];  }	  for(int    i    =    0;    i    <    pj;    ++i)    {    point[pj]    =    oldX[pj];    }    	compilable	  [FE]  AssertionFailedError  	178	12	replace
801	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError      [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  point[j]  =  oldX[pj]  -  1;  [BUGGY]      }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	add	point[j]  =  oldX[pj]  -  1;	  point[j]    =    oldX[pj];    int    point[j]    =    oldX[pj];    	compilable	  [FE]  AssertionFailedError  	52	12	replace
802	[BUG]  [BUGGY]  point[j]  =  oldX[pj]  -  1;  [FE]  AssertionFailedError  [FE]            AssertionFailedError      [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  point[j]  =  oldX[pj]  -  1;  [BUGGY]      }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	point[j]  =  oldX[pj]  -  1;	  point[j]    =    oldX[pj];    int    point[j]    =    oldX[pj];    	compilable	  [FE]  AssertionFailedError  	52	12	replace
803	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]              AssertionFailedError      [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  point[j]  =  oldX[pj]  +  1;  [BUGGY]      }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	add	point[j]  =  oldX[pj]  +  1;	  point[j]    =    oldX[pj];    int    point[j]    =    oldX[pj];    	compilable	  [FE]  AssertionFailedError  	52	12	replace
804	[BUG]  [BUGGY]  point[j]  =  oldX[pj]  +  1;  [FE]  AssertionFailedError  [FE]              AssertionFailedError      [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  point[j]  =  oldX[pj]  +  1;  [BUGGY]      }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	point[j]  =  oldX[pj]  +  1;	  point[j]    =    oldX[pj];    int    point[j]    =    oldX[pj];    	compilable	  [FE]  AssertionFailedError  	52	12	replace
805	[BUG]  [BUGGY]  for(int  i  =  0;  j  <  solvedCols;  ++i)  {  point[pj]  =  permutation[j];  }  for(int  i  =  0;  j  <  solvedCols;  ++i)  {  point[pj]  =  base[j];  }  [CE]  cannot  find  symbol  base  [FE]                AssertionFailedError      [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  for(int  i  =  0;  j  <  solvedCols;  ++i)  {  point[pj]  =  permutation[j];  }  for(int  i  =  0;  j  <  solvedCols;  ++i)  {  point[pj]  =  base[j];  }  [BUGGY]      point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	for(int    i    =    0;    j    <    solvedCols;    ++i)    {    point[pj]    =    permutation[j];    }    for(int  i  =  0;  j  <  solvedCols;  ++i)  {  point[pj]  =  base[j];  }	  timeout    	non-compiled	[CE]  cannot  find  symbol  base	80	None	add
806	[BUG]  [BUGGY]  ((  VectorialPointValuePair)previousCost).setIndex(point.length);  [CE]  inconvertible  types  [FE]                      AssertionFailedError      [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  ((  VectorialPointValuePair)previousCost).setIndex(point.length);  [BUGGY]      point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	((  VectorialPointValuePair)previousCost).setIndex(point.length);	  ((    VectorialPointValuePair)previousCost).setIndex(point);    	non-compiled	[CE]  inconvertible  types	76	None	replace
807	[BUG]  [BUGGY]  point[pj]  =  Cost.parseValue(xNorm,  pj  +  1);  [CE]  cannot  find  symbol  Cost  [FE]            AssertionFailedError      [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  point[pj]  =  Cost.parseValue(xNorm,  pj  +  1);  [BUGGY]      }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	point[pj]  =  Cost.parseValue(xNorm,  pj  +  1);	  point[pj]    =    Cost.parseValue(xNorm,    pj);    	non-compiled	[CE]  cannot  find  symbol  Cost	147	None	replace
808	[BUG]  [BUGGY]  point[pj]    =    cost;    point[pj]  =  cost;  point[pj]  =  cost;  point[pj]  =  Cost;  [CE]  cannot  find  symbol  Cost  [FE]    AssertionFailedError    [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  point[pj]    =    cost;    point[pj]  =  cost;  point[pj]  =  cost;  point[pj]  =  Cost;  [BUGGY]      }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	point[pj]        =        cost;        point[pj]    =    cost;    point[pj]  =  cost;  point[pj]  =  Cost;	  	non-compiled	[CE]  cannot  find  symbol  Cost	38	None	add
809	[BUG]  [BUGGY]  int  pj  =  0;  i  <  solvedCols;  ++i)  {  point[pj]  =  cost;  }  [CE]  >  expected  [FE]        AssertionFailedError      [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  int  pj  =  0;  i  <  solvedCols;  ++i)  {  point[pj]  =  cost;  }  [BUGGY]      point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	int  pj  =  0;  i  <  solvedCols;  ++i)  {  point[pj]  =  cost;  }	  int    i    =    0;    i    <    solvedCols;    ++i)    {    point[pj]    =    cost;    }    	non-compiled	[CE]  >  expected	112	None	replace
810	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  pj;  ++i)  {  point[pj]  =  oldX[pj];  }  for(int  i  =  0;  i  <  pj;  ++i)  {  point[pj]  =  oldX[pj].;  }  [CE]  <identifier>  expected  [FE]    AssertionFailedError    [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  for(int  i  =  0;  i  <  pj;  ++i)  {  point[pj]  =  oldX[pj];  }  for(int  i  =  0;  i  <  pj;  ++i)  {  point[pj]  =  oldX[pj].;  }  [BUGGY]      point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	for(int    i    =    0;    i    <    pj;    ++i)    {    point[pj]    =    oldX[pj];    }    for(int  i  =  0;  i  <  pj;  ++i)  {  point[pj]  =  oldX[pj].;  }	  	non-compiled	[CE]  <identifier>  expected	177	None	add
811	[BUG]  [BUGGY]          for(int    i    =    0;    j    <    solvedCols;    ++i)    {    point[pj]    =    oldX[i];    }    for(int  i  =  0;  j  <  solvedCols;  ++i)  {  point[pj]  =  oldX[i];  }  for(int  i  =  0;  j  <  solvedCols;  ++i)  {  point[point]  =  oldX[i];  }  [CE]  incompatible  types  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]          for(int    i    =    0;    j    <    solvedCols;    ++i)    {    point[pj]    =    oldX[i];    }    for(int  i  =  0;  j  <  solvedCols;  ++i)  {  point[pj]  =  oldX[i];  }  for(int  i  =  0;  j  <  solvedCols;  ++i)  {  point[point]  =  oldX[i];  }  [BUGGY]      point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	                for(int        i        =        0;        j        <        solvedCols;        ++i)        {        point[pj]        =        oldX[i];        }        for(int    i    =    0;    j    <    solvedCols;    ++i)    {    point[pj]    =    oldX[i];    }    for(int  i  =  0;  j  <  solvedCols;  ++i)  {  point[point]  =  oldX[i];  }	  	non-compiled	[CE]  incompatible  types	44	None	add
812	[BUG]  [BUGGY]          for(int    i    =    0;    j    <    solvedCols;    ++i)    {    point[pj]    =    oldX[i];    }    for(int  i  =  0;  j  <  solvedCols;  ++i)  {  point[pj]  =  oldX[i];  }  for(int  i  =  0;  j  <  solvedCols;  ++i)  {  point[pj]  =  oldX[i];  }  else  {  cost  =  previousCost;  }  [CE]  'else'  without  'if'  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]          for(int    i    =    0;    j    <    solvedCols;    ++i)    {    point[pj]    =    oldX[i];    }    for(int  i  =  0;  j  <  solvedCols;  ++i)  {  point[pj]  =  oldX[i];  }  for(int  i  =  0;  j  <  solvedCols;  ++i)  {  point[pj]  =  oldX[i];  }  else  {  cost  =  previousCost;  }  [BUGGY]      point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	                for(int        i        =        0;        j        <        solvedCols;        ++i)        {        point[pj]        =        oldX[i];        }        for(int    i    =    0;    j    <    solvedCols;    ++i)    {    point[pj]    =    oldX[i];    }    for(int  i  =  0;  j  <  solvedCols;  ++i)  {  point[pj]  =  oldX[i];  }  else  {  cost  =  previousCost;  }	  	non-compiled	[CE]  'else'  without  'if'	44	None	add
813	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]          for(int    i    =    0;    j    <    solvedCols;    ++i)    {    point[pj]    =    oldX[i];    }    for(int  i  =  0;  j  <  solvedCols;  ++i)  {  point[pj]  =  oldX[i];  }  for(int  i  =  0;  j  <  solvedCols;  ++i)  {  point[pj]  =  oldX[i];  }  preRed  =  previousCost;  [BUGGY]      point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	add	                for(int        i        =        0;        j        <        solvedCols;        ++i)        {        point[pj]        =        oldX[i];        }        for(int    i    =    0;    j    <    solvedCols;    ++i)    {    point[pj]    =    oldX[i];    }    for(int  i  =  0;  j  <  solvedCols;  ++i)  {  point[pj]  =  oldX[i];  }  preRed  =  previousCost;	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	44	15	add
814	[BUG]  [BUGGY]          for(int    i    =    0;    j    <    solvedCols;    ++i)    {    point[pj]    =    oldX[i];    }    for(int  i  =  0;  j  <  solvedCols;  ++i)  {  point[pj]  =  oldX[i];  }  for(int  i  =  0;  j  <  solvedCols;  ++i)  {  point[pj]  =  oldX[i];  }  preRed  =  previousCost;  [FE]  ArrayIndexOutOfBoundsException  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]          for(int    i    =    0;    j    <    solvedCols;    ++i)    {    point[pj]    =    oldX[i];    }    for(int  i  =  0;  j  <  solvedCols;  ++i)  {  point[pj]  =  oldX[i];  }  for(int  i  =  0;  j  <  solvedCols;  ++i)  {  point[pj]  =  oldX[i];  }  preRed  =  previousCost;  [BUGGY]      point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	                for(int        i        =        0;        j        <        solvedCols;        ++i)        {        point[pj]        =        oldX[i];        }        for(int    i    =    0;    j    <    solvedCols;    ++i)    {    point[pj]    =    oldX[i];    }    for(int  i  =  0;  j  <  solvedCols;  ++i)  {  point[pj]  =  oldX[i];  }  preRed  =  previousCost;	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	44	15	add
815	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  oldX;  ++i)  {  int  oldX  =  oldX[i];  }  [CE]  bad  operand  types  for  binary  operator  '<'  [FE]                AssertionFailedError      [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  for(int  i  =  0;  i  <  oldX;  ++i)  {  int  oldX  =  oldX[i];  }  [BUGGY]      point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	for(int  i  =  0;  i  <  oldX;  ++i)  {  int  oldX  =  oldX[i];  }	  for(int    i    =    0;    i    <    fixedCols;    ++i)    {    int    oldX    =    oldX[i];    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '<'	57	None	replace
816	[BUG]  [BUGGY]  tmpVec  =  Math.sqrt(previousCost,  cost,  oldX);  [CE]  method  sqrt  in  class  Math  cannot  be  applied  to  given  types;  [FE]              AssertionFailedError      [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  tmpVec  =  Math.sqrt(previousCost,  cost,  oldX);  [BUGGY]      point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	tmpVec  =  Math.sqrt(previousCost,  cost,  oldX);	  tmpVec    =    Math.sqrt(previousCost,    cost);    	non-compiled	[CE]  method  sqrt  in  class  Math  cannot  be  applied  to  given  types;	71	None	replace
817	[BUG]  [BUGGY]  ((  VectorialPointValuePair)point[pj]).setValue(xNorm,  pj);  [CE]  inconvertible  types  [FE]          AssertionFailedError      [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  ((  VectorialPointValuePair)point[pj]).setValue(xNorm,  pj);  [BUGGY]      }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	((  VectorialPointValuePair)point[pj]).setValue(xNorm,  pj);	  point[pj]    =    xNorm;    ((    VectorialPointValuePair)point[pj]).setValue(xNorm);    	non-compiled	[CE]  inconvertible  types	159	None	replace
818	[BUG]  [BUGGY]  ((  VectorialPointValuePair)previousCost).setIndex(pj,  xNorm);  [CE]  inconvertible  types  [FE]                        AssertionFailedError      [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  ((  VectorialPointValuePair)previousCost).setIndex(pj,  xNorm);  [BUGGY]      point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	((  VectorialPointValuePair)previousCost).setIndex(pj,  xNorm);	  ((    VectorialPointValuePair)previousCost).setIndex(pj,    cost);    	non-compiled	[CE]  inconvertible  types	77	None	replace
819	[BUG]  [BUGGY]  point[pj]  =  Cost.parseValue(cost,  xNorm);  [CE]  cannot  find  symbol  Cost  [FE]              AssertionFailedError      [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  point[pj]  =  Cost.parseValue(cost,  xNorm);  [BUGGY]      }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	point[pj]  =  Cost.parseValue(cost,  xNorm);	  point[pj]    =    Cost.parseValue(xNorm);    	non-compiled	[CE]  cannot  find  symbol  Cost	79	None	replace
820	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        ArrayIndexOutOfBoundsException      [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  point[pj]  =  oldX[0];  [BUGGY]      point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	add	point[pj]  =  oldX[0];	  point[pj]    =    oldX[i];    	compilable	  [FE]  AssertionFailedError  	59	11	replace
821	[BUG]  [BUGGY]  point[pj]  =  oldX[0];  [FE]  AssertionFailedError  [FE]        ArrayIndexOutOfBoundsException      [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  point[pj]  =  oldX[0];  [BUGGY]      point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	point[pj]  =  oldX[0];	  point[pj]    =    oldX[i];    	compilable	  [FE]  AssertionFailedError  	59	11	replace
822	[BUG]  [BUGGY]  point[j]  =  permutation[j];  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  point[j]  =  permutation[j];  }  [CE]  variable  j  is  already  defined  in  method  doOptimize()  [FE]    AssertionFailedError    [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  point[j]  =  permutation[j];  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  point[j]  =  permutation[j];  }  [BUGGY]      }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	point[j]    =    permutation[j];    for(int  j  =  0;  j  <  solvedCols;  ++j)  {  point[j]  =  permutation[j];  }	  	non-compiled	[CE]  variable  j  is  already  defined  in  method  doOptimize()	98	None	add
823	[BUG]  [BUGGY]  point[j]  =  permutation[j];  for(int  j  =  0;  j  <  solveCols;  ++j)  {  point[j]  =  permutation[j];  }  [CE]  variable  j  is  already  defined  in  method  doOptimize()  [FE]      AssertionFailedError    [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  point[j]  =  permutation[j];  for(int  j  =  0;  j  <  solveCols;  ++j)  {  point[j]  =  permutation[j];  }  [BUGGY]      }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	point[j]    =    permutation[j];    for(int  j  =  0;  j  <  solveCols;  ++j)  {  point[j]  =  permutation[j];  }	  	non-compiled	[CE]  variable  j  is  already  defined  in  method  doOptimize()	98	None	add
824	[BUG]  [BUGGY]  point[j]  =  permutation[j];  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  int  point[j]  =  permutation[j];  }  [CE]  ']'  expected  [FE]        AssertionFailedError    [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  point[j]  =  permutation[j];  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  int  point[j]  =  permutation[j];  }  [BUGGY]      }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	point[j]    =    permutation[j];    for(int  j  =  0;  j  <  solvedCols;  ++j)  {  int  point[j]  =  permutation[j];  }	  	non-compiled	[CE]  ']'  expected	98	None	add
825	[BUG]  [BUGGY]  point[j]  =  permutation[j];  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  permutation[j]  =  permutation[j];  }  [CE]  variable  j  is  already  defined  in  method  doOptimize()  [FE]          AssertionFailedError    [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  point[j]  =  permutation[j];  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  permutation[j]  =  permutation[j];  }  [BUGGY]      }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	point[j]    =    permutation[j];    for(int  j  =  0;  j  <  solvedCols;  ++j)  {  permutation[j]  =  permutation[j];  }	  	non-compiled	[CE]  variable  j  is  already  defined  in  method  doOptimize()	98	None	add
826	[BUG]  [BUGGY]  point[pj]  =  iNorm;  Point[pj]  =  xNorm;  [CE]  cannot  find  symbol  iNorm  [FE]            AssertionFailedError      [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  point[pj]  =  iNorm;  Point[pj]  =  xNorm;  [BUGGY]      }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	point[pj]  =  iNorm;  Point[pj]  =  xNorm;	  point[pj]    =    xNorm;    Point[pj]    =    xNorm;    	non-compiled	[CE]  cannot  find  symbol  iNorm	32	None	replace
827	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  resolvedCols;  ++i)  {  point[pj]  =  oldX;  }  [CE]  cannot  find  symbol  resolvedCols  [FE]              AssertionFailedError      [CONTEXT]      }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];      [BUGGY]  for(int  i  =  0;  i  <  resolvedCols;  ++i)  {  point[pj]  =  oldX;  }  [BUGGY]      point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	for(int  i  =  0;  i  <  resolvedCols;  ++i)  {  point[pj]  =  oldX;  }	          for(int    i    =    0;    i    <    solvedCols;    ++i)    {    point[pj]    =    cost;    }    for(int    i    =    0;    i    <    solvedCols;    ++i)    {    point[pj]    =    Cost;    }    	non-compiled	[CE]  cannot  find  symbol  resolvedCols	70	None	replace
