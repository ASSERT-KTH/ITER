bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]    }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];    [BUGGY]  point[pj]  =  permutation[j];  [BUGGY]    }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	add	point[pj]  =  permutation[j];	  point[pj]    =    cost[cost];    	compilable	  [FE]  AssertionFailedError  	20	11	replace
2	[BUG]  [BUGGY]  point[pj]  =  permutation[j];  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]    }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];    [BUGGY]  point[pj]  =  permutation[j];  [BUGGY]    }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	point[pj]  =  permutation[j];	  point[pj]    =    cost[cost];    	compilable	  [FE]  AssertionFailedError  	20	11	replace
3	[BUG]  [BUGGY]  point[pj]  =  permutation[cost];  [CE]  possible  loss  of  precision  [FE]          AssertionFailedError    [CONTEXT]    }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];    [BUGGY]  point[pj]  =  permutation[cost];  [BUGGY]    }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	point[pj]  =  permutation[cost];	  point[pj]    =    cost[cost];    	non-compiled	[CE]  possible  loss  of  precision	20	None	replace
4	[BUG]  [BUGGY]  point[pj]  =  cost[j];  [CE]  array  required,  but  double  found  [FE]            AssertionFailedError    [CONTEXT]    }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];    [BUGGY]  point[pj]  =  cost[j];  [BUGGY]    }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	point[pj]  =  cost[j];	  point[pj]    =    cost[cost];    	non-compiled	[CE]  array  required,  but  double  found	20	None	replace
5	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];    [BUGGY]  point[pj]  =  0;  [BUGGY]    }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	add	point[pj]  =  0;	  point[pj]    =    cost;    	compilable	  [FE]  AssertionFailedError  	7	11	replace
6	[BUG]  [BUGGY]  point[pj]  =  0;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];    [BUGGY]  point[pj]  =  0;  [BUGGY]    }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	point[pj]  =  0;	  point[pj]    =    cost;    	compilable	  [FE]  AssertionFailedError  	7	11	replace
7	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];    [BUGGY]  point[pj]  =  cost  +  1;  [BUGGY]    }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	add	point[pj]  =  cost  +  1;	  point[pj]    =    cost;    	compilable	  [FE]  AssertionFailedError  	7	12	replace
8	[BUG]  [BUGGY]  point[pj]  =  cost  +  1;  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];    [BUGGY]  point[pj]  =  cost  +  1;  [BUGGY]    }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	point[pj]  =  cost  +  1;	  point[pj]    =    cost;    	compilable	  [FE]  AssertionFailedError  	7	12	replace
9	[BUG]  [BUGGY]  point[pj]  =  i;  [CE]  cannot  find  symbol  i  [FE]        AssertionFailedError    [CONTEXT]    }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];    [BUGGY]  point[pj]  =  i;  [BUGGY]    }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	point[pj]  =  i;	  point[pj]    =    cost;    	non-compiled	[CE]  cannot  find  symbol  i	7	None	replace
10	[BUG]  [BUGGY]  ((  VectorialPointValuePair)previous).setIndex(pj  +  1);  [CE]  cannot  find  symbol  [FE]        AssertionFailedError    [CONTEXT]    }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];    [BUGGY]  ((  VectorialPointValuePair)previous).setIndex(pj  +  1);  [BUGGY]    point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	((  VectorialPointValuePair)previous).setIndex(pj  +  1);	      ((    VectorialPointValuePair)previous).setIndex(pj);    	non-compiled	[CE]  cannot  find  symbol	16	None	replace
11	[BUG]  [BUGGY]  ((  VectorialPointValuePair)previous).setIndex(pj  -  1);  [CE]  cannot  find  symbol  [FE]          AssertionFailedError    [CONTEXT]    }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];    [BUGGY]  ((  VectorialPointValuePair)previous).setIndex(pj  -  1);  [BUGGY]    point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	((  VectorialPointValuePair)previous).setIndex(pj  -  1);	      ((    VectorialPointValuePair)previous).setIndex(pj);    	non-compiled	[CE]  cannot  find  symbol	16	None	replace
12	[BUG]  [BUGGY]  ((  VectorialPointValuePair)previous).setIndex(pj,  cost);  [CE]  cannot  find  symbol  [FE]            AssertionFailedError    [CONTEXT]    }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];    [BUGGY]  ((  VectorialPointValuePair)previous).setIndex(pj,  cost);  [BUGGY]    point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	((  VectorialPointValuePair)previous).setIndex(pj,  cost);	      ((    VectorialPointValuePair)previous).setIndex(pj);    	non-compiled	[CE]  cannot  find  symbol	16	None	replace
13	[BUG]  [BUGGY]  ((  VectorialPointValuePair)previous).setIndex(point);  [CE]  cannot  find  symbol  [FE]              AssertionFailedError    [CONTEXT]    }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];    [BUGGY]  ((  VectorialPointValuePair)previous).setIndex(point);  [BUGGY]    point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	((  VectorialPointValuePair)previous).setIndex(point);	      ((    VectorialPointValuePair)previous).setIndex(pj);    	non-compiled	[CE]  cannot  find  symbol	16	None	replace
14	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];    [BUGGY]  point[pj]  =  permutation[pj];  point[pj]  =  permutation[pj];  [BUGGY]    }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	add	point[pj]    =    permutation[pj];    point[pj]  =  permutation[pj];	  	compilable	  [FE]  AssertionFailedError  	12	2	add
15	[BUG]  [BUGGY]  point[pj]  =  permutation[pj];  point[pj]  =  permutation[pj];  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];    [BUGGY]  point[pj]  =  permutation[pj];  point[pj]  =  permutation[pj];  [BUGGY]    }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	point[pj]    =    permutation[pj];    point[pj]  =  permutation[pj];	  	compilable	  [FE]  AssertionFailedError  	12	2	add
16	[BUG]  [BUGGY]  point[pj]  =  permutation[pj];  points[pj]  =  permutation[pj];  [CE]  cannot  find  symbol  points  [FE]      AssertionFailedError    [CONTEXT]    }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];    [BUGGY]  point[pj]  =  permutation[pj];  points[pj]  =  permutation[pj];  [BUGGY]    }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	point[pj]    =    permutation[pj];    points[pj]  =  permutation[pj];	  	non-compiled	[CE]  cannot  find  symbol  points	12	None	add
17	[BUG]  [BUGGY]  point[pj]  =  permutation[pj];  int  point[pj]  =  permutation[pj];  [CE]  ']'  expected  [FE]        AssertionFailedError    [CONTEXT]    }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];    [BUGGY]  point[pj]  =  permutation[pj];  int  point[pj]  =  permutation[pj];  [BUGGY]    }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	point[pj]    =    permutation[pj];    int  point[pj]  =  permutation[pj];	  	non-compiled	[CE]  ']'  expected	12	None	add
18	[BUG]  [BUGGY]  point[pj]  =  permutation[pj];  Point[pj]  =  permutation[pj];  [CE]  cannot  find  symbol  Point  [FE]          AssertionFailedError    [CONTEXT]    }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];    [BUGGY]  point[pj]  =  permutation[pj];  Point[pj]  =  permutation[pj];  [BUGGY]    }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	point[pj]    =    permutation[pj];    Point[pj]  =  permutation[pj];	  	non-compiled	[CE]  cannot  find  symbol  Point	12	None	add
19	[BUG]  [BUGGY]  point[pj]  =  permutation[pj];  Point[pj]  =  point[pj];  [CE]  cannot  find  symbol  Point  [FE]            AssertionFailedError    [CONTEXT]    }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];    [BUGGY]  point[pj]  =  permutation[pj];  Point[pj]  =  point[pj];  [BUGGY]    }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	point[pj]    =    permutation[pj];    Point[pj]  =  point[pj];	  	non-compiled	[CE]  cannot  find  symbol  Point	12	None	add
20	[BUG]  [BUGGY]  timeout  [FE]            AssertionFailedError    [CONTEXT]    }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];    [BUGGY]      for(int  i  =  0;  j  <  solvedCols;  ++i)  {  point[pj]  =  cost;  }  for(int  i  =  0;  j  <  solvedCols;  ++i)  {  point[pj]  =  cost;  }  [BUGGY]    point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	add	        for(int    i    =    0;    j    <    solvedCols;    ++i)    {    point[pj]    =    cost;    }    for(int  i  =  0;  j  <  solvedCols;  ++i)  {  point[pj]  =  cost;  }	  timeout    	compilable	timeout	24	1	add
21	[BUG]  [BUGGY]      for(int  i  =  0;  j  <  solvedCols;  ++i)  {  point[pj]  =  cost;  }  for(int  i  =  0;  j  <  solvedCols;  ++i)  {  point[pj]  =  cost;  }  timeout  [FE]            AssertionFailedError    [CONTEXT]    }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];    [BUGGY]      for(int  i  =  0;  j  <  solvedCols;  ++i)  {  point[pj]  =  cost;  }  for(int  i  =  0;  j  <  solvedCols;  ++i)  {  point[pj]  =  cost;  }  [BUGGY]    point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	        for(int    i    =    0;    j    <    solvedCols;    ++i)    {    point[pj]    =    cost;    }    for(int  i  =  0;  j  <  solvedCols;  ++i)  {  point[pj]  =  cost;  }	  timeout    	compilable	timeout	24	1	add
22	[BUG]  [BUGGY]      for(int  i  =  0;  j  <  solvedCols;  ++i)  {  point[pj]  =  cost;  }  For(int  i  =  0;  j  <  solvedCols;  ++i)  {  point[pj]  =  cost;  }  [CE]  '.class'  expected  [FE]              AssertionFailedError    [CONTEXT]    }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];    [BUGGY]      for(int  i  =  0;  j  <  solvedCols;  ++i)  {  point[pj]  =  cost;  }  For(int  i  =  0;  j  <  solvedCols;  ++i)  {  point[pj]  =  cost;  }  [BUGGY]    point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	        for(int    i    =    0;    j    <    solvedCols;    ++i)    {    point[pj]    =    cost;    }    For(int  i  =  0;  j  <  solvedCols;  ++i)  {  point[pj]  =  cost;  }	  timeout    	non-compiled	[CE]  '.class'  expected	24	None	add
23	[BUG]  [BUGGY]      for(int  i  =  0;  j  <  solvedCols;  ++i)  {  point[pj]  =  cost;  }  int  i  =  0;  j  <  solvedCols;  ++i)  {  point[pj]  =  cost;  }  [CE]  >  expected  [FE]                AssertionFailedError    [CONTEXT]    }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];    [BUGGY]      for(int  i  =  0;  j  <  solvedCols;  ++i)  {  point[pj]  =  cost;  }  int  i  =  0;  j  <  solvedCols;  ++i)  {  point[pj]  =  cost;  }  [BUGGY]    point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	        for(int    i    =    0;    j    <    solvedCols;    ++i)    {    point[pj]    =    cost;    }    int  i  =  0;  j  <  solvedCols;  ++i)  {  point[pj]  =  cost;  }	  timeout    	non-compiled	[CE]  >  expected	24	None	add
24	[BUG]  [BUGGY]      for(int  i  =  0;  j  <  solvedCols;  ++i)  {  point[pj]  =  cost;  }  for(int  i  =  0;  j  <  resolvedCols;  ++i)  {  point[pj]  =  cost;  }  [CE]  cannot  find  symbol  resolvedCols  [FE]                  AssertionFailedError    [CONTEXT]    }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];    [BUGGY]      for(int  i  =  0;  j  <  solvedCols;  ++i)  {  point[pj]  =  cost;  }  for(int  i  =  0;  j  <  resolvedCols;  ++i)  {  point[pj]  =  cost;  }  [BUGGY]    point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	        for(int    i    =    0;    j    <    solvedCols;    ++i)    {    point[pj]    =    cost;    }    for(int  i  =  0;  j  <  resolvedCols;  ++i)  {  point[pj]  =  cost;  }	  timeout    	non-compiled	[CE]  cannot  find  symbol  resolvedCols	24	None	add
25	[BUG]  [BUGGY]      for(int  i  =  0;  j  <  solvedCols;  ++i)  {  point[pj]  =  cost;  }  for(int  i  =  0;  j  <  solvedCols;  ++i)  {  point[pj]  =  Cost;  }  [CE]  cannot  find  symbol  Cost  [FE]                    AssertionFailedError    [CONTEXT]    }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];    [BUGGY]      for(int  i  =  0;  j  <  solvedCols;  ++i)  {  point[pj]  =  cost;  }  for(int  i  =  0;  j  <  solvedCols;  ++i)  {  point[pj]  =  Cost;  }  [BUGGY]    point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	        for(int    i    =    0;    j    <    solvedCols;    ++i)    {    point[pj]    =    cost;    }    for(int  i  =  0;  j  <  solvedCols;  ++i)  {  point[pj]  =  Cost;  }	  timeout    	non-compiled	[CE]  cannot  find  symbol  Cost	24	None	add
26	[BUG]  [BUGGY]  int  pj  =  oldX[j];  [CE]  variable  pj  is  already  defined  in  method  doOptimize()  [FE]        AssertionFailedError    [CONTEXT]    }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];    [BUGGY]  int  pj  =  oldX[j];  [BUGGY]    point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	int  pj  =  oldX[j];	      int    pj    =    permutation[j];    	non-compiled	[CE]  variable  pj  is  already  defined  in  method  doOptimize()	1	None	replace
27	[BUG]  [BUGGY]  int  pj  =  permutation[j]  +  1;  [CE]  variable  pj  is  already  defined  in  method  doOptimize()  [FE]          AssertionFailedError    [CONTEXT]    }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];    [BUGGY]  int  pj  =  permutation[j]  +  1;  [BUGGY]    point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	int  pj  =  permutation[j]  +  1;	      int    pj    =    permutation[j];    	non-compiled	[CE]  variable  pj  is  already  defined  in  method  doOptimize()	1	None	replace
28	[BUG]  [BUGGY]  int  pj  =  permutation[j]  -  1;  [CE]  variable  pj  is  already  defined  in  method  doOptimize()  [FE]            AssertionFailedError    [CONTEXT]    }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];    [BUGGY]  int  pj  =  permutation[j]  -  1;  [BUGGY]    point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	int  pj  =  permutation[j]  -  1;	      int    pj    =    permutation[j];    	non-compiled	[CE]  variable  pj  is  already  defined  in  method  doOptimize()	1	None	replace
29	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];    [BUGGY]  point[pj]  =  xNorm;  point[pj]  =  xNorm;  [BUGGY]    }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	add	point[pj]    =    xNorm;    point[pj]  =  xNorm;	  	compilable	  [FE]  AssertionFailedError  	8	2	add
30	[BUG]  [BUGGY]  point[pj]  =  xNorm;  point[pj]  =  xNorm;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];    [BUGGY]  point[pj]  =  xNorm;  point[pj]  =  xNorm;  [BUGGY]    }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	point[pj]    =    xNorm;    point[pj]  =  xNorm;	  	compilable	  [FE]  AssertionFailedError  	8	2	add
31	[BUG]  [BUGGY]  point[pj]  =  xNorm;  points[pj]  =  xNorm;  [CE]  cannot  find  symbol  points  [FE]      AssertionFailedError    [CONTEXT]    }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];    [BUGGY]  point[pj]  =  xNorm;  points[pj]  =  xNorm;  [BUGGY]    }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	point[pj]    =    xNorm;    points[pj]  =  xNorm;	  	non-compiled	[CE]  cannot  find  symbol  points	8	None	add
32	[BUG]  [BUGGY]  point[pj]  =  xNorm;  Point[pj]  =  xNorm;  [CE]  cannot  find  symbol  Point  [FE]        AssertionFailedError    [CONTEXT]    }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];    [BUGGY]  point[pj]  =  xNorm;  Point[pj]  =  xNorm;  [BUGGY]    }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	point[pj]    =    xNorm;    Point[pj]  =  xNorm;	  	non-compiled	[CE]  cannot  find  symbol  Point	8	None	add
33	[BUG]  [BUGGY]  point[pj]  =  xNorm;  pj]  =  xNorm;  [CE]  not  a  statement  [FE]          AssertionFailedError    [CONTEXT]    }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];    [BUGGY]  point[pj]  =  xNorm;  pj]  =  xNorm;  [BUGGY]    }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	point[pj]    =    xNorm;    pj]  =  xNorm;	  	non-compiled	[CE]  not  a  statement	8	None	add
34	[BUG]  [BUGGY]  ((  VectorialPointValuePair)pj).remove(previousCost);  [CE]  inconvertible  types  [FE]              AssertionFailedError    [CONTEXT]    }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];    [BUGGY]  ((  VectorialPointValuePair)pj).remove(previousCost);  [BUGGY]    point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	((  VectorialPointValuePair)pj).remove(previousCost);	      ((    VectorialPointValuePair)previous).remove(pj);    	non-compiled	[CE]  inconvertible  types	19	None	replace
35	[BUG]  [BUGGY]  ((  VectorialPointValuePair)previous).remove(pj,  permutation);  [CE]  cannot  find  symbol  [FE]                AssertionFailedError    [CONTEXT]    }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];    [BUGGY]  ((  VectorialPointValuePair)previous).remove(pj,  permutation);  [BUGGY]    point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	((  VectorialPointValuePair)previous).remove(pj,  permutation);	      ((    VectorialPointValuePair)previous).remove(pj);    	non-compiled	[CE]  cannot  find  symbol	19	None	replace
36	[BUG]  [BUGGY]  ((  VectorialPointValuePair)pj).remove(permutation);  [CE]  inconvertible  types  [FE]                  AssertionFailedError    [CONTEXT]    }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];    [BUGGY]  ((  VectorialPointValuePair)pj).remove(permutation);  [BUGGY]    point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	((  VectorialPointValuePair)pj).remove(permutation);	      ((    VectorialPointValuePair)previous).remove(pj);    	non-compiled	[CE]  inconvertible  types	19	None	replace
37	[BUG]  [BUGGY]  ((  VectorialPointValuePair)previous).remove(pj,  cost);  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError    [CONTEXT]    }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];    [BUGGY]  ((  VectorialPointValuePair)previous).remove(pj,  cost);  [BUGGY]    point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	((  VectorialPointValuePair)previous).remove(pj,  cost);	      ((    VectorialPointValuePair)previous).remove(pj);    	non-compiled	[CE]  cannot  find  symbol	19	None	replace
38	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];    [BUGGY]  point[pj]  =  cost;  point[pj]  =  cost;  [BUGGY]    }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	add	point[pj]    =    cost;    point[pj]  =  cost;	  	compilable	  [FE]  AssertionFailedError  	6	2	add
39	[BUG]  [BUGGY]  point[pj]  =  cost;  point[pj]  =  cost;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];    [BUGGY]  point[pj]  =  cost;  point[pj]  =  cost;  [BUGGY]    }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	point[pj]    =    cost;    point[pj]  =  cost;	  	compilable	  [FE]  AssertionFailedError  	6	2	add
40	[BUG]  [BUGGY]  point[pj]  =  cost;  points[pj]  =  cost;  [CE]  cannot  find  symbol  points  [FE]      AssertionFailedError    [CONTEXT]    }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];    [BUGGY]  point[pj]  =  cost;  points[pj]  =  cost;  [BUGGY]    }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	point[pj]    =    cost;    points[pj]  =  cost;	  	non-compiled	[CE]  cannot  find  symbol  points	6	None	add
41	[BUG]  [BUGGY]  point[pj]  =  cost;  int  point[pj]  =  cost;  [CE]  ']'  expected  [FE]        AssertionFailedError    [CONTEXT]    }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];    [BUGGY]  point[pj]  =  cost;  int  point[pj]  =  cost;  [BUGGY]    }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	point[pj]    =    cost;    int  point[pj]  =  cost;	  	non-compiled	[CE]  ']'  expected	6	None	add
42	[BUG]  [BUGGY]  point[pj]  =  cost;  Point[pj]  =  cost;  [CE]  cannot  find  symbol  Point  [FE]          AssertionFailedError    [CONTEXT]    }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];    [BUGGY]  point[pj]  =  cost;  Point[pj]  =  cost;  [BUGGY]    }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	point[pj]    =    cost;    Point[pj]  =  cost;	  	non-compiled	[CE]  cannot  find  symbol  Point	6	None	add
43	[BUG]  [BUGGY]  point[pj]  =  cost;  point[pj]  =  Cost;  [CE]  cannot  find  symbol  Cost  [FE]            AssertionFailedError    [CONTEXT]    }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];    [BUGGY]  point[pj]  =  cost;  point[pj]  =  Cost;  [BUGGY]    }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	point[pj]    =    cost;    point[pj]  =  Cost;	  	non-compiled	[CE]  cannot  find  symbol  Cost	6	None	add
44	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]    }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];    [BUGGY]      for(int  i  =  0;  j  <  solvedCols;  ++i)  {  point[pj]  =  oldX[i];  }  for(int  i  =  0;  j  <  solvedCols;  ++i)  {  point[pj]  =  oldX[i];  }  [BUGGY]    point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	add	        for(int    i    =    0;    j    <    solvedCols;    ++i)    {    point[pj]    =    oldX[i];    }    for(int  i  =  0;  j  <  solvedCols;  ++i)  {  point[pj]  =  oldX[i];  }	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	21	15	add
45	[BUG]  [BUGGY]      for(int  i  =  0;  j  <  solvedCols;  ++i)  {  point[pj]  =  oldX[i];  }  for(int  i  =  0;  j  <  solvedCols;  ++i)  {  point[pj]  =  oldX[i];  }  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]    }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];    [BUGGY]      for(int  i  =  0;  j  <  solvedCols;  ++i)  {  point[pj]  =  oldX[i];  }  for(int  i  =  0;  j  <  solvedCols;  ++i)  {  point[pj]  =  oldX[i];  }  [BUGGY]    point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	        for(int    i    =    0;    j    <    solvedCols;    ++i)    {    point[pj]    =    oldX[i];    }    for(int  i  =  0;  j  <  solvedCols;  ++i)  {  point[pj]  =  oldX[i];  }	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	21	15	add
46	[BUG]  [BUGGY]      for(int  i  =  0;  j  <  solvedCols;  ++i)  {  point[pj]  =  oldX[i];  }  For(int  i  =  0;  j  <  solvedCols;  ++i)  {  point[pj]  =  oldX[i];  }  [CE]  '.class'  expected  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]    }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];    [BUGGY]      for(int  i  =  0;  j  <  solvedCols;  ++i)  {  point[pj]  =  oldX[i];  }  For(int  i  =  0;  j  <  solvedCols;  ++i)  {  point[pj]  =  oldX[i];  }  [BUGGY]    point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	        for(int    i    =    0;    j    <    solvedCols;    ++i)    {    point[pj]    =    oldX[i];    }    For(int  i  =  0;  j  <  solvedCols;  ++i)  {  point[pj]  =  oldX[i];  }	  	non-compiled	[CE]  '.class'  expected	21	None	add
47	[BUG]  [BUGGY]      for(int  i  =  0;  j  <  solvedCols;  ++i)  {  point[pj]  =  oldX[i];  }  int  i  =  0;  j  <  solvedCols;  ++i)  {  point[pj]  =  oldX[i];  }  [CE]  >  expected  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]    }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];    [BUGGY]      for(int  i  =  0;  j  <  solvedCols;  ++i)  {  point[pj]  =  oldX[i];  }  int  i  =  0;  j  <  solvedCols;  ++i)  {  point[pj]  =  oldX[i];  }  [BUGGY]    point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	        for(int    i    =    0;    j    <    solvedCols;    ++i)    {    point[pj]    =    oldX[i];    }    int  i  =  0;  j  <  solvedCols;  ++i)  {  point[pj]  =  oldX[i];  }	  	non-compiled	[CE]  >  expected	21	None	add
48	[BUG]  [BUGGY]      for(int  i  =  0;  j  <  solvedCols;  ++i)  {  point[pj]  =  oldX[i];  }  for(int  i  =  0;  j  <  resolvedCols;  ++i)  {  point[pj]  =  oldX[i];  }  [CE]  cannot  find  symbol  resolvedCols  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]    }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];    [BUGGY]      for(int  i  =  0;  j  <  solvedCols;  ++i)  {  point[pj]  =  oldX[i];  }  for(int  i  =  0;  j  <  resolvedCols;  ++i)  {  point[pj]  =  oldX[i];  }  [BUGGY]    point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	        for(int    i    =    0;    j    <    solvedCols;    ++i)    {    point[pj]    =    oldX[i];    }    for(int  i  =  0;  j  <  resolvedCols;  ++i)  {  point[pj]  =  oldX[i];  }	  	non-compiled	[CE]  cannot  find  symbol  resolvedCols	21	None	add
49	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];    [BUGGY]  point[j]  =  oldX[pj];  point[j]  =  oldX[pj];  [BUGGY]    }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	add	point[j]    =    oldX[pj];    point[j]  =  oldX[pj];	  	compilable	  [FE]  AssertionFailedError  	10	11	add
50	[BUG]  [BUGGY]  point[j]  =  oldX[pj];  point[j]  =  oldX[pj];  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];    [BUGGY]  point[j]  =  oldX[pj];  point[j]  =  oldX[pj];  [BUGGY]    }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	point[j]    =    oldX[pj];    point[j]  =  oldX[pj];	  	compilable	  [FE]  AssertionFailedError  	10	11	add
51	[BUG]  [BUGGY]  point[j]  =  oldX[pj];  points[j]  =  oldX[pj];  [CE]  cannot  find  symbol  points  [FE]      AssertionFailedError    [CONTEXT]    }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];    [BUGGY]  point[j]  =  oldX[pj];  points[j]  =  oldX[pj];  [BUGGY]    }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	point[j]    =    oldX[pj];    points[j]  =  oldX[pj];	  	non-compiled	[CE]  cannot  find  symbol  points	10	None	add
52	[BUG]  [BUGGY]  point[j]  =  oldX[pj];  int  point[j]  =  oldX[pj];  [CE]  ']'  expected  [FE]        AssertionFailedError    [CONTEXT]    }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];    [BUGGY]  point[j]  =  oldX[pj];  int  point[j]  =  oldX[pj];  [BUGGY]    }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	point[j]    =    oldX[pj];    int  point[j]  =  oldX[pj];	  	non-compiled	[CE]  ']'  expected	10	None	add
53	[BUG]  [BUGGY]  point[j]  =  oldX[pj];  Point[j]  =  oldX[pj];  [CE]  cannot  find  symbol  Point  [FE]          AssertionFailedError    [CONTEXT]    }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];    [BUGGY]  point[j]  =  oldX[pj];  Point[j]  =  oldX[pj];  [BUGGY]    }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	point[j]    =    oldX[pj];    Point[j]  =  oldX[pj];	  	non-compiled	[CE]  cannot  find  symbol  Point	10	None	add
54	[BUG]  [BUGGY]  point[j]  =  oldX[pj];  point[j]  =  oldY[pj];  [CE]  cannot  find  symbol  oldY  [FE]            AssertionFailedError    [CONTEXT]    }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];    [BUGGY]  point[j]  =  oldX[pj];  point[j]  =  oldY[pj];  [BUGGY]    }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	point[j]    =    oldX[pj];    point[j]  =  oldY[pj];	  	non-compiled	[CE]  cannot  find  symbol  oldY	10	None	add
55	[BUG]  [BUGGY]  point[pj]  =  tmpVec  +  1;  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]          AssertionFailedError    [CONTEXT]    }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];    [BUGGY]  point[pj]  =  tmpVec  +  1;  [BUGGY]    }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	point[pj]  =  tmpVec  +  1;	  point[pj]    =    tmpVec;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	15	None	replace
56	[BUG]  [BUGGY]  int  oldX  =  oldX[i];  [CE]  variable  oldX  is  already  defined  in  method  doOptimize()  [FE]          AssertionFailedError    [CONTEXT]    }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];    [BUGGY]  int  oldX  =  oldX[i];  [BUGGY]    point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	int  oldX  =  oldX[i];	      for(int    i    =    0;    i    <    solvedCols;    ++i)    {    int    oldX    =    oldX[i];    	non-compiled	[CE]  variable  oldX  is  already  defined  in  method  doOptimize()	23	None	replace
57	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  fixedCols;  ++i)  {  int  oldX  =  oldX[i];  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];    [BUGGY]  for(int  i  =  0;  i  <  fixedCols;  ++i)  {  int  oldX  =  oldX[i];  [BUGGY]    point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	for(int  i  =  0;  i  <  fixedCols;  ++i)  {  int  oldX  =  oldX[i];	      for(int    i    =    0;    i    <    solvedCols;    ++i)    {    int    oldX    =    oldX[i];    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
58	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  oldX.length;  ++i)  {  int  oldX  =  oldX[i];  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];    [BUGGY]  for(int  i  =  0;  i  <  oldX.length;  ++i)  {  int  oldX  =  oldX[i];  [BUGGY]    point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	for(int  i  =  0;  i  <  oldX.length;  ++i)  {  int  oldX  =  oldX[i];	      for(int    i    =    0;    i    <    solvedCols;    ++i)    {    int    oldX    =    oldX[i];    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
59	[BUG]  [BUGGY]  point[pj]  =  oldX[i];  [CE]  cannot  find  symbol  i  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]    }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];    [BUGGY]  point[pj]  =  oldX[i];  [BUGGY]    point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	point[pj]  =  oldX[i];	      for(int    i    =    0;    j    <    solvedCols;    ++i)    {    point[pj]    =    oldX[i];    }    	non-compiled	[CE]  cannot  find  symbol  i	22	None	replace
60	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  point[pj]  =  oldX[i];  }  [CE]  variable  j  is  already  defined  in  method  doOptimize()  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]    }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];    [BUGGY]  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  point[pj]  =  oldX[i];  }  [BUGGY]    point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	for(int  j  =  0;  j  <  solvedCols;  ++j)  {  point[pj]  =  oldX[i];  }	      for(int    i    =    0;    j    <    solvedCols;    ++i)    {    point[pj]    =    oldX[i];    }    	non-compiled	[CE]  variable  j  is  already  defined  in  method  doOptimize()	22	None	replace
61	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];    [BUGGY]  for(int  i  =  0;  i  <  solvedCols;  ++i)  {  point[pj]  =  oldX[pj];  }  [BUGGY]    point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	add	for(int  i  =  0;  i  <  solvedCols;  ++i)  {  point[pj]  =  oldX[pj];  }	      for(int    i    =    0;    i    <    solvedCols;    ++i)    {    point[pj]    =    cost;    }    	compilable	  [FE]  AssertionFailedError  	27	2	replace
62	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  solvedCols;  ++i)  {  point[pj]  =  oldX[pj];  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];    [BUGGY]  for(int  i  =  0;  i  <  solvedCols;  ++i)  {  point[pj]  =  oldX[pj];  }  [BUGGY]    point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	for(int  i  =  0;  i  <  solvedCols;  ++i)  {  point[pj]  =  oldX[pj];  }	      for(int    i    =    0;    i    <    solvedCols;    ++i)    {    point[pj]    =    cost;    }    	compilable	  [FE]  AssertionFailedError  	27	2	replace
63	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];    [BUGGY]  for(int  i  =  0;  i  <  solvedCols;  ++i)  {  point[pj]  =  permutation[j];  }  [BUGGY]    point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	add	for(int  i  =  0;  i  <  solvedCols;  ++i)  {  point[pj]  =  permutation[j];  }	      for(int    i    =    0;    i    <    solvedCols;    ++i)    {    point[pj]    =    cost;    }    	compilable	  [FE]  AssertionFailedError  	27	11	replace
64	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  solvedCols;  ++i)  {  point[pj]  =  permutation[j];  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];    [BUGGY]  for(int  i  =  0;  i  <  solvedCols;  ++i)  {  point[pj]  =  permutation[j];  }  [BUGGY]    point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	for(int  i  =  0;  i  <  solvedCols;  ++i)  {  point[pj]  =  permutation[j];  }	      for(int    i    =    0;    i    <    solvedCols;    ++i)    {    point[pj]    =    cost;    }    	compilable	  [FE]  AssertionFailedError  	27	11	replace
65	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  fixedCols;  ++i)  {  point[pj]  =  cost;  }  [CE]  cannot  find  symbol  fixedCols  [FE]        AssertionFailedError    [CONTEXT]    }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];    [BUGGY]  for(int  i  =  0;  i  <  fixedCols;  ++i)  {  point[pj]  =  cost;  }  [BUGGY]    point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	for(int  i  =  0;  i  <  fixedCols;  ++i)  {  point[pj]  =  cost;  }	      for(int    i    =    0;    i    <    solvedCols;    ++i)    {    point[pj]    =    cost;    }    	non-compiled	[CE]  cannot  find  symbol  fixedCols	27	None	replace
66	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];    [BUGGY]      for(int  i  =  0;  i  <  solvedCols;  ++i)  {  point[pj]  =  cost;  }  for(int  i  =  0;  i  <  solvedCols;  ++i)  {  point[pj]  =  cost;  }  [BUGGY]    point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	add	        for(int    i    =    0;    i    <    solvedCols;    ++i)    {    point[pj]    =    cost;    }    for(int  i  =  0;  i  <  solvedCols;  ++i)  {  point[pj]  =  cost;  }	  	compilable	  [FE]  AssertionFailedError  	26	2	add
67	[BUG]  [BUGGY]      for(int  i  =  0;  i  <  solvedCols;  ++i)  {  point[pj]  =  cost;  }  for(int  i  =  0;  i  <  solvedCols;  ++i)  {  point[pj]  =  cost;  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];    [BUGGY]      for(int  i  =  0;  i  <  solvedCols;  ++i)  {  point[pj]  =  cost;  }  for(int  i  =  0;  i  <  solvedCols;  ++i)  {  point[pj]  =  cost;  }  [BUGGY]    point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	        for(int    i    =    0;    i    <    solvedCols;    ++i)    {    point[pj]    =    cost;    }    for(int  i  =  0;  i  <  solvedCols;  ++i)  {  point[pj]  =  cost;  }	  	compilable	  [FE]  AssertionFailedError  	26	2	add
68	[BUG]  [BUGGY]      for(int  i  =  0;  i  <  solvedCols;  ++i)  {  point[pj]  =  cost;  }  For(int  i  =  0;  i  <  solvedCols;  ++i)  {  point[pj]  =  cost;  }  [CE]  '.class'  expected  [FE]      AssertionFailedError    [CONTEXT]    }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];    [BUGGY]      for(int  i  =  0;  i  <  solvedCols;  ++i)  {  point[pj]  =  cost;  }  For(int  i  =  0;  i  <  solvedCols;  ++i)  {  point[pj]  =  cost;  }  [BUGGY]    point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	        for(int    i    =    0;    i    <    solvedCols;    ++i)    {    point[pj]    =    cost;    }    For(int  i  =  0;  i  <  solvedCols;  ++i)  {  point[pj]  =  cost;  }	  	non-compiled	[CE]  '.class'  expected	26	None	add
69	[BUG]  [BUGGY]      for(int  i  =  0;  i  <  solvedCols;  ++i)  {  point[pj]  =  cost;  }  int  i  =  0;  i  <  solvedCols;  ++i)  {  point[pj]  =  cost;  }  [CE]  >  expected  [FE]        AssertionFailedError    [CONTEXT]    }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];    [BUGGY]      for(int  i  =  0;  i  <  solvedCols;  ++i)  {  point[pj]  =  cost;  }  int  i  =  0;  i  <  solvedCols;  ++i)  {  point[pj]  =  cost;  }  [BUGGY]    point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	        for(int    i    =    0;    i    <    solvedCols;    ++i)    {    point[pj]    =    cost;    }    int  i  =  0;  i  <  solvedCols;  ++i)  {  point[pj]  =  cost;  }	  	non-compiled	[CE]  >  expected	26	None	add
70	[BUG]  [BUGGY]      for(int  i  =  0;  i  <  solvedCols;  ++i)  {  point[pj]  =  cost;  }  for(int  i  =  0;  i  <  solvedCols;  ++i)  {  point[pj]  =  Cost;  }  [CE]  cannot  find  symbol  Cost  [FE]          AssertionFailedError    [CONTEXT]    }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];    [BUGGY]      for(int  i  =  0;  i  <  solvedCols;  ++i)  {  point[pj]  =  cost;  }  for(int  i  =  0;  i  <  solvedCols;  ++i)  {  point[pj]  =  Cost;  }  [BUGGY]    point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	        for(int    i    =    0;    i    <    solvedCols;    ++i)    {    point[pj]    =    cost;    }    for(int  i  =  0;  i  <  solvedCols;  ++i)  {  point[pj]  =  Cost;  }	  	non-compiled	[CE]  cannot  find  symbol  Cost	26	None	add
71	[BUG]  [BUGGY]  tmpVec  =  Math.sqrt(previousCost,  cost);  [CE]  method  sqrt  in  class  Math  cannot  be  applied  to  given  types;  [FE]          AssertionFailedError    [CONTEXT]    }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];    [BUGGY]  tmpVec  =  Math.sqrt(previousCost,  cost);  [BUGGY]    point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	tmpVec  =  Math.sqrt(previousCost,  cost);	      tmpVec    =    Math.sqrt(previousCost);    	non-compiled	[CE]  method  sqrt  in  class  Math  cannot  be  applied  to  given  types;	2	None	replace
72	[BUG]  [BUGGY]  tmpVec  =  Math.sqrt(pj);  [CE]  incompatible  types  [FE]            AssertionFailedError    [CONTEXT]    }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];    [BUGGY]  tmpVec  =  Math.sqrt(pj);  [BUGGY]    point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	tmpVec  =  Math.sqrt(pj);	      tmpVec    =    Math.sqrt(previousCost);    	non-compiled	[CE]  incompatible  types	2	None	replace
73	[BUG]  [BUGGY]  tmpVec  =  Math.sqrt(previousCost,  preRed);  [CE]  method  sqrt  in  class  Math  cannot  be  applied  to  given  types;  [FE]              AssertionFailedError    [CONTEXT]    }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];    [BUGGY]  tmpVec  =  Math.sqrt(previousCost,  preRed);  [BUGGY]    point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	tmpVec  =  Math.sqrt(previousCost,  preRed);	      tmpVec    =    Math.sqrt(previousCost);    	non-compiled	[CE]  method  sqrt  in  class  Math  cannot  be  applied  to  given  types;	2	None	replace
74	[BUG]  [BUGGY]  ((  VectorialPointValuePair)previousCost).setIndex(pj  +  1);  [CE]  inconvertible  types  [FE]              AssertionFailedError    [CONTEXT]    }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];    [BUGGY]  ((  VectorialPointValuePair)previousCost).setIndex(pj  +  1);  [BUGGY]    point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	((  VectorialPointValuePair)previousCost).setIndex(pj  +  1);	      ((    VectorialPointValuePair)previousCost).setIndex(pj);    	non-compiled	[CE]  inconvertible  types	4	None	replace
75	[BUG]  [BUGGY]  ((  VectorialPointValuePair)previousCost).setIndex(pj  -  1);  [CE]  inconvertible  types  [FE]                AssertionFailedError    [CONTEXT]    }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];    [BUGGY]  ((  VectorialPointValuePair)previousCost).setIndex(pj  -  1);  [BUGGY]    point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	((  VectorialPointValuePair)previousCost).setIndex(pj  -  1);	      ((    VectorialPointValuePair)previousCost).setIndex(pj);    	non-compiled	[CE]  inconvertible  types	4	None	replace
76	[BUG]  [BUGGY]  ((  VectorialPointValuePair)previousCost).setIndex(point);  [CE]  inconvertible  types  [FE]                  AssertionFailedError    [CONTEXT]    }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];    [BUGGY]  ((  VectorialPointValuePair)previousCost).setIndex(point);  [BUGGY]    point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	((  VectorialPointValuePair)previousCost).setIndex(point);	      ((    VectorialPointValuePair)previousCost).setIndex(pj);    	non-compiled	[CE]  inconvertible  types	4	None	replace
77	[BUG]  [BUGGY]  ((  VectorialPointValuePair)previousCost).setIndex(pj,  cost);  [CE]  inconvertible  types  [FE]                    AssertionFailedError    [CONTEXT]    }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];    [BUGGY]  ((  VectorialPointValuePair)previousCost).setIndex(pj,  cost);  [BUGGY]    point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	((  VectorialPointValuePair)previousCost).setIndex(pj,  cost);	      ((    VectorialPointValuePair)previousCost).setIndex(pj);    	non-compiled	[CE]  inconvertible  types	4	None	replace
78	[BUG]  [BUGGY]  point[pj]  =  CostRelativeTolerance;  [CE]  cannot  find  symbol  CostRelativeTolerance  [FE]        AssertionFailedError    [CONTEXT]    }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];    [BUGGY]  point[pj]  =  CostRelativeTolerance;  [BUGGY]    }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	point[pj]  =  CostRelativeTolerance;	  point[pj]    =    value;    	non-compiled	[CE]  cannot  find  symbol  CostRelativeTolerance	14	None	replace
79	[BUG]  [BUGGY]  point[pj]  =  Cost.parseValue(xNorm);  [CE]  cannot  find  symbol  Cost  [FE]          AssertionFailedError    [CONTEXT]    }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];    [BUGGY]  point[pj]  =  Cost.parseValue(xNorm);  [BUGGY]    }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	point[pj]  =  Cost.parseValue(xNorm);	  point[pj]    =    value;    	non-compiled	[CE]  cannot  find  symbol  Cost	14	None	replace
80	[BUG]  [BUGGY]  timeout  [FE]            AssertionFailedError    [CONTEXT]    }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];    [BUGGY]  for(int  i  =  0;  j  <  solvedCols;  ++i)  {  point[pj]  =  permutation[j];  }  [BUGGY]    point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	add	for(int  i  =  0;  j  <  solvedCols;  ++i)  {  point[pj]  =  permutation[j];  }	      for(int    i    =    0;    j    <    solvedCols;    ++i)    {    point[pj]    =    cost;    }    timeout    	compilable	timeout	25	1	replace
81	[BUG]  [BUGGY]  for(int  i  =  0;  j  <  solvedCols;  ++i)  {  point[pj]  =  permutation[j];  }  timeout  [FE]            AssertionFailedError    [CONTEXT]    }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];    [BUGGY]  for(int  i  =  0;  j  <  solvedCols;  ++i)  {  point[pj]  =  permutation[j];  }  [BUGGY]    point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	for(int  i  =  0;  j  <  solvedCols;  ++i)  {  point[pj]  =  permutation[j];  }	      for(int    i    =    0;    j    <    solvedCols;    ++i)    {    point[pj]    =    cost;    }    timeout    	compilable	timeout	25	1	replace
82	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  point[pj]  =  permutation[j];  }  [CE]  variable  j  is  already  defined  in  method  doOptimize()  [FE]              AssertionFailedError    [CONTEXT]    }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];    [BUGGY]  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  point[pj]  =  permutation[j];  }  [BUGGY]    point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	for(int  j  =  0;  j  <  solvedCols;  ++j)  {  point[pj]  =  permutation[j];  }	      for(int    i    =    0;    j    <    solvedCols;    ++i)    {    point[pj]    =    cost;    }    timeout    	non-compiled	[CE]  variable  j  is  already  defined  in  method  doOptimize()	25	None	replace
83	[BUG]  [BUGGY]  timeout  [FE]                AssertionFailedError    [CONTEXT]    }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];    [BUGGY]  for(int  i  =  0;  j  <  solvedCols;  ++i)  {  point[pj]  =  oldX[pj];  }  [BUGGY]    point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	add	for(int  i  =  0;  j  <  solvedCols;  ++i)  {  point[pj]  =  oldX[pj];  }	      for(int    i    =    0;    j    <    solvedCols;    ++i)    {    point[pj]    =    cost;    }    timeout    	compilable	timeout	25	1	replace
84	[BUG]  [BUGGY]  for(int  i  =  0;  j  <  solvedCols;  ++i)  {  point[pj]  =  oldX[pj];  }  timeout  [FE]                AssertionFailedError    [CONTEXT]    }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];    [BUGGY]  for(int  i  =  0;  j  <  solvedCols;  ++i)  {  point[pj]  =  oldX[pj];  }  [BUGGY]    point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	for(int  i  =  0;  j  <  solvedCols;  ++i)  {  point[pj]  =  oldX[pj];  }	      for(int    i    =    0;    j    <    solvedCols;    ++i)    {    point[pj]    =    cost;    }    timeout    	compilable	timeout	25	1	replace
85	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  point[pj]  =  cost;  }  [CE]  variable  j  is  already  defined  in  method  doOptimize()  [FE]                  AssertionFailedError    [CONTEXT]    }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];    [BUGGY]  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  point[pj]  =  cost;  }  [BUGGY]    point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	for(int  j  =  0;  j  <  solvedCols;  ++j)  {  point[pj]  =  cost;  }	      for(int    i    =    0;    j    <    solvedCols;    ++i)    {    point[pj]    =    cost;    }    timeout    	non-compiled	[CE]  variable  j  is  already  defined  in  method  doOptimize()	25	None	replace
86	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];    [BUGGY]  point[pj]  =  xNorm  +  1;  [BUGGY]    }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	add	point[pj]  =  xNorm  +  1;	  point[pj]    =    xNorm;    	compilable	  [FE]  AssertionFailedError  	9	12	replace
87	[BUG]  [BUGGY]  point[pj]  =  xNorm  +  1;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];    [BUGGY]  point[pj]  =  xNorm  +  1;  [BUGGY]    }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	point[pj]  =  xNorm  +  1;	  point[pj]    =    xNorm;    	compilable	  [FE]  AssertionFailedError  	9	12	replace
88	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]    }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];    [BUGGY]  tmpVec  =  oldX;  [BUGGY]    point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	add	tmpVec  =  oldX;	      tmpVec    =    cost;    	compilable	  [FE]  AssertionFailedError  	18	12	replace
89	[BUG]  [BUGGY]  tmpVec  =  oldX;  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]    }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];    [BUGGY]  tmpVec  =  oldX;  [BUGGY]    point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	tmpVec  =  oldX;	      tmpVec    =    cost;    	compilable	  [FE]  AssertionFailedError  	18	12	replace
90	[BUG]  [BUGGY]  tmpVec  =  pj;  [CE]  incompatible  types  [FE]              AssertionFailedError    [CONTEXT]    }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];    [BUGGY]  tmpVec  =  pj;  [BUGGY]    point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	tmpVec  =  pj;	      tmpVec    =    cost;    	non-compiled	[CE]  incompatible  types	18	None	replace
91	[BUG]  [BUGGY]  tmpVec  =  previousCost;  [CE]  incompatible  types  [FE]                AssertionFailedError    [CONTEXT]    }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];    [BUGGY]  tmpVec  =  previousCost;  [BUGGY]    point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	tmpVec  =  previousCost;	      tmpVec    =    cost;    	non-compiled	[CE]  incompatible  types	18	None	replace
92	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];    [BUGGY]  point[j]  =  permutation[pj];  [BUGGY]    }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	add	point[j]  =  permutation[pj];	  point[j]    =    oldX[pj];    	compilable	  [FE]  AssertionFailedError  	11	11	replace
93	[BUG]  [BUGGY]  point[j]  =  permutation[pj];  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];    [BUGGY]  point[j]  =  permutation[pj];  [BUGGY]    }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	point[j]  =  permutation[pj];	  point[j]    =    oldX[pj];    	compilable	  [FE]  AssertionFailedError  	11	11	replace
94	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];    [BUGGY]  point[j]  =  cost;  [BUGGY]    }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	add	point[j]  =  cost;	  point[j]    =    oldX[pj];    	compilable	  [FE]  AssertionFailedError  	11	12	replace
95	[BUG]  [BUGGY]  point[j]  =  cost;  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];    [BUGGY]  point[j]  =  cost;  [BUGGY]    }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	point[j]  =  cost;	  point[j]    =    oldX[pj];    	compilable	  [FE]  AssertionFailedError  	11	12	replace
96	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]    }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];    [BUGGY]  point[j]  =  xNorm;  [BUGGY]    }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	add	point[j]  =  xNorm;	  point[j]    =    oldX[pj];    	compilable	  [FE]  AssertionFailedError  	11	12	replace
97	[BUG]  [BUGGY]  point[j]  =  xNorm;  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]    }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];    [BUGGY]  point[j]  =  xNorm;  [BUGGY]    }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	point[j]  =  xNorm;	  point[j]    =    oldX[pj];    	compilable	  [FE]  AssertionFailedError  	11	12	replace
98	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]    }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];    [BUGGY]  point[j]  =  permutation[j];  [BUGGY]    }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	add	point[j]  =  permutation[j];	  point[j]    =    oldX[pj];    	compilable	  [FE]  AssertionFailedError  	11	11	replace
99	[BUG]  [BUGGY]  point[j]  =  permutation[j];  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]    }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];    [BUGGY]  point[j]  =  permutation[j];  [BUGGY]    }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	point[j]  =  permutation[j];	  point[j]    =    oldX[pj];    	compilable	  [FE]  AssertionFailedError  	11	11	replace
100	[BUG]  [BUGGY]  ((  VectorialPointValuePair)pj).remove(pj);  [CE]  inconvertible  types  [FE]          AssertionFailedError    [CONTEXT]    }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];    [BUGGY]  ((  VectorialPointValuePair)pj).remove(pj);  [BUGGY]    point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	((  VectorialPointValuePair)pj).remove(pj);	      ((    VectorialPointValuePair)last).remove(pj);    	non-compiled	[CE]  inconvertible  types	17	None	replace
101	[BUG]  [BUGGY]  ((  VectorialPointValuePair)permutation).remove(pj);  [CE]  inconvertible  types  [FE]            AssertionFailedError    [CONTEXT]    }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];    [BUGGY]  ((  VectorialPointValuePair)permutation).remove(pj);  [BUGGY]    point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	((  VectorialPointValuePair)permutation).remove(pj);	      ((    VectorialPointValuePair)last).remove(pj);    	non-compiled	[CE]  inconvertible  types	17	None	replace
102	[BUG]  [BUGGY]  ((  VectorialPointValuePair)point).remove(pj);  [CE]  inconvertible  types  [FE]              AssertionFailedError    [CONTEXT]    }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];    [BUGGY]  ((  VectorialPointValuePair)point).remove(pj);  [BUGGY]    point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	((  VectorialPointValuePair)point).remove(pj);	      ((    VectorialPointValuePair)last).remove(pj);    	non-compiled	[CE]  inconvertible  types	17	None	replace
103	[BUG]  [BUGGY]  tmpVec  =  permutation[j]  +  1;  [CE]  incompatible  types  [FE]            AssertionFailedError    [CONTEXT]    }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];    [BUGGY]  tmpVec  =  permutation[j]  +  1;  [BUGGY]    point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	tmpVec  =  permutation[j]  +  1;	      tmpVec    =    permutation[j];    	non-compiled	[CE]  incompatible  types	3	None	replace
104	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];    [BUGGY]  point[0]  =  permutation[pj];  [BUGGY]    }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	add	point[0]  =  permutation[pj];	  point[pj]    =    permutation[pj];    	compilable	  [FE]  AssertionFailedError  	13	12	replace
105	[BUG]  [BUGGY]  point[0]  =  permutation[pj];  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];    [BUGGY]  point[0]  =  permutation[pj];  [BUGGY]    }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	point[0]  =  permutation[pj];	  point[pj]    =    permutation[pj];    	compilable	  [FE]  AssertionFailedError  	13	12	replace
106	[BUG]  [BUGGY]  ((  VectorialPointValuePair)previousCost).remove(pj  -  1);  [CE]  inconvertible  types  [FE]                AssertionFailedError    [CONTEXT]    }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];    [BUGGY]  ((  VectorialPointValuePair)previousCost).remove(pj  -  1);  [BUGGY]    point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	((  VectorialPointValuePair)previousCost).remove(pj  -  1);	      ((    VectorialPointValuePair)previousCost).remove(pj);    	non-compiled	[CE]  inconvertible  types	5	None	replace
107	[BUG]  [BUGGY]  ((  VectorialPointValuePair)previousCost).remove(pj,  cost);  [CE]  inconvertible  types  [FE]                  AssertionFailedError    [CONTEXT]    }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];    [BUGGY]  ((  VectorialPointValuePair)previousCost).remove(pj,  cost);  [BUGGY]    point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	((  VectorialPointValuePair)previousCost).remove(pj,  cost);	      ((    VectorialPointValuePair)previousCost).remove(pj);    	non-compiled	[CE]  inconvertible  types	5	None	replace
108	[BUG]  [BUGGY]  ((  VectorialPointValuePair)previousCost).remove(pj,  permutation);  [CE]  inconvertible  types  [FE]                    AssertionFailedError    [CONTEXT]    }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];    [BUGGY]  ((  VectorialPointValuePair)previousCost).remove(pj,  permutation);  [BUGGY]    point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	((  VectorialPointValuePair)previousCost).remove(pj,  permutation);	      ((    VectorialPointValuePair)previousCost).remove(pj);    	non-compiled	[CE]  inconvertible  types	5	None	replace
109	[BUG]  [BUGGY]  ((  VectorialPointValuePair)previousCost).remove(pj  +  1);  [CE]  inconvertible  types  [FE]                      AssertionFailedError    [CONTEXT]    }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];    [BUGGY]  ((  VectorialPointValuePair)previousCost).remove(pj  +  1);  [BUGGY]    point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	((  VectorialPointValuePair)previousCost).remove(pj  +  1);	      ((    VectorialPointValuePair)previousCost).remove(pj);    	non-compiled	[CE]  inconvertible  types	5	None	replace
110	[BUG]  [BUGGY]  ((  VectorialPointValuePair)previousCost).remove(point);  [CE]  inconvertible  types  [FE]                AssertionFailedError    [CONTEXT]    }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];    [BUGGY]  ((  VectorialPointValuePair)previousCost).remove(point);  [BUGGY]    point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	((  VectorialPointValuePair)previousCost).remove(point);	      ((    VectorialPointValuePair)previousCost).remove(pj);    	non-compiled	[CE]  inconvertible  types	5	None	replace
111	[BUG]  [BUGGY]  point[pj]  =  CostRelativeTolerance.RELATIVE;  [CE]  cannot  find  symbol  CostRelativeTolerance  [FE]    AssertionFailedError    [CONTEXT]    }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];    [BUGGY]  point[pj]  =  CostRelativeTolerance.RELATIVE;  [BUGGY]    }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	point[pj]  =  CostRelativeTolerance.RELATIVE;	  point[pj]    =    permutation[pj];    	non-compiled	[CE]  cannot  find  symbol  CostRelativeTolerance	13	None	replace
112	[BUG]  [BUGGY]  int  i  =  0;  i  <  solvedCols;  ++i)  {  point[pj]  =  cost;  }  [CE]  >  expected  [FE]    AssertionFailedError    [CONTEXT]    }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];    [BUGGY]  int  i  =  0;  i  <  solvedCols;  ++i)  {  point[pj]  =  cost;  }  [BUGGY]    point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	int  i  =  0;  i  <  solvedCols;  ++i)  {  point[pj]  =  cost;  }	      for(int    i    =    0;    i    <    solvedCols;    ++i)    {    point[pj]    =    cost;    }    	non-compiled	[CE]  >  expected	27	None	replace
113	[BUG]  [BUGGY]  ((  VectorialPointValuePair)oldX).remove(pj);  [CE]  inconvertible  types  [FE]          AssertionFailedError    [CONTEXT]    }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];    [BUGGY]  ((  VectorialPointValuePair)oldX).remove(pj);  [BUGGY]    point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	((  VectorialPointValuePair)oldX).remove(pj);	      ((    VectorialPointValuePair)last).remove(pj);    	non-compiled	[CE]  inconvertible  types	17	None	replace
114	[BUG]  [BUGGY]  point[j]  =  oldX[pj];  ((  VectorialPointValuePair)point[j]).setValue(value);  [CE]  cannot  find  symbol  value  [FE]    AssertionFailedError    [CONTEXT]    }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];    [BUGGY]  point[j]  =  oldX[pj];  ((  VectorialPointValuePair)point[j]).setValue(value);  [BUGGY]    }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	point[j]    =    oldX[pj];    ((  VectorialPointValuePair)point[j]).setValue(value);	  	non-compiled	[CE]  cannot  find  symbol  value	10	None	add
115	[BUG]  [BUGGY]  point[j]  =  oldX[pj];  ((  VectorialPointValuePair)point[j]).sqrt(value);  [CE]  cannot  find  symbol  value  [FE]      AssertionFailedError    [CONTEXT]    }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];    [BUGGY]  point[j]  =  oldX[pj];  ((  VectorialPointValuePair)point[j]).sqrt(value);  [BUGGY]    }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	point[j]    =    oldX[pj];    ((  VectorialPointValuePair)point[j]).sqrt(value);	  	non-compiled	[CE]  cannot  find  symbol  value	10	None	add
116	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  oldRes;  ++i)  {  int  oldX  =  oldX[i];  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];    [BUGGY]  for(int  i  =  0;  i  <  oldRes;  ++i)  {  int  oldX  =  oldX[i];  [BUGGY]    point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	for(int  i  =  0;  i  <  oldRes;  ++i)  {  int  oldX  =  oldX[i];	      for(int    i    =    0;    i    <    solvedCols;    ++i)    {    int    oldX    =    oldX[i];    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
117	[BUG]  [BUGGY]  point[pj]  =  cost;  if(pj  <  =  0)  {  point[pj]  =  cost;  }  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]    }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];    [BUGGY]  point[pj]  =  cost;  if(pj  <  =  0)  {  point[pj]  =  cost;  }  [BUGGY]    }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	point[pj]    =    cost;    if(pj  <  =  0)  {  point[pj]  =  cost;  }	  	non-compiled	[CE]  illegal  start  of  expression	6	None	add
118	[BUG]  [BUGGY]  point[j]  =  cost[pj];  [CE]  array  required,  but  double  found  [FE]    AssertionFailedError    [CONTEXT]    }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];    [BUGGY]  point[j]  =  cost[pj];  [BUGGY]    }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	point[j]  =  cost[pj];	  point[j]    =    oldX[pj];    	non-compiled	[CE]  array  required,  but  double  found	11	None	replace
119	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  point[pj]  =  oldX[j];  }  [CE]  variable  j  is  already  defined  in  method  doOptimize()  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]    }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];    [BUGGY]  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  point[pj]  =  oldX[j];  }  [BUGGY]    point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	for(int  j  =  0;  j  <  solvedCols;  ++j)  {  point[pj]  =  oldX[j];  }	      for(int    i    =    0;    j    <    solvedCols;    ++i)    {    point[pj]    =    oldX[i];    }    	non-compiled	[CE]  variable  j  is  already  defined  in  method  doOptimize()	22	None	replace
120	[BUG]  [BUGGY]  int  i  =  0;  j  <  solvedCols;  ++i)  {  point[pj]  =  oldX[i];  }  [CE]  >  expected  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]    }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];    [BUGGY]  int  i  =  0;  j  <  solvedCols;  ++i)  {  point[pj]  =  oldX[i];  }  [BUGGY]    point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	int  i  =  0;  j  <  solvedCols;  ++i)  {  point[pj]  =  oldX[i];  }	      for(int    i    =    0;    j    <    solvedCols;    ++i)    {    point[pj]    =    oldX[i];    }    	non-compiled	[CE]  >  expected	22	None	replace
121	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  point[j]  =  oldX[j];  }  [CE]  variable  j  is  already  defined  in  method  doOptimize()  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]    }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];    [BUGGY]  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  point[j]  =  oldX[j];  }  [BUGGY]    point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	for(int  j  =  0;  j  <  solvedCols;  ++j)  {  point[j]  =  oldX[j];  }	      for(int    i    =    0;    j    <    solvedCols;    ++i)    {    point[pj]    =    oldX[i];    }    	non-compiled	[CE]  variable  j  is  already  defined  in  method  doOptimize()	22	None	replace
122	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];    [BUGGY]  point[pj]  =  cost  -  1;  [BUGGY]    }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	add	point[pj]  =  cost  -  1;	  point[pj]    =    cost;    	compilable	  [FE]  AssertionFailedError  	7	12	replace
123	[BUG]  [BUGGY]  point[pj]  =  cost  -  1;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];    [BUGGY]  point[pj]  =  cost  -  1;  [BUGGY]    }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	point[pj]  =  cost  -  1;	  point[pj]    =    cost;    	compilable	  [FE]  AssertionFailedError  	7	12	replace
124	[BUG]  [BUGGY]  int  i  =  0;  j  <  solvedCols;  ++i)  {  point[pj]  =  cost;  }  [CE]  >  expected  [FE]            AssertionFailedError    [CONTEXT]    }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];    [BUGGY]  int  i  =  0;  j  <  solvedCols;  ++i)  {  point[pj]  =  cost;  }  [BUGGY]    point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	int  i  =  0;  j  <  solvedCols;  ++i)  {  point[pj]  =  cost;  }	      for(int    i    =    0;    j    <    solvedCols;    ++i)    {    point[pj]    =    cost;    }    timeout    	non-compiled	[CE]  >  expected	25	None	replace
125	[BUG]  [BUGGY]      for(int  i  =  0;  j  <  solvedCols;  ++i)  {  point[pj]  =  cost;  }  if(i  =  0;  j  <  solvedCols;  ++i)  {  point[pj]  =  cost;  }  [CE]  ')'  expected  [FE]            AssertionFailedError    [CONTEXT]    }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];    [BUGGY]      for(int  i  =  0;  j  <  solvedCols;  ++i)  {  point[pj]  =  cost;  }  if(i  =  0;  j  <  solvedCols;  ++i)  {  point[pj]  =  cost;  }  [BUGGY]    point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	        for(int    i    =    0;    j    <    solvedCols;    ++i)    {    point[pj]    =    cost;    }    if(i  =  0;  j  <  solvedCols;  ++i)  {  point[pj]  =  cost;  }	  timeout    	non-compiled	[CE]  ')'  expected	24	None	add
126	[BUG]  [BUGGY]  ((  VectorialPointValuePair)pj).setIndex(oldX);  [CE]  inconvertible  types  [FE]        AssertionFailedError    [CONTEXT]    }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];    [BUGGY]  ((  VectorialPointValuePair)pj).setIndex(oldX);  [BUGGY]    point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	((  VectorialPointValuePair)pj).setIndex(oldX);	      ((    VectorialPointValuePair)previous).setIndex(pj);    	non-compiled	[CE]  inconvertible  types	16	None	replace
127	[BUG]  [BUGGY]      for(int  i  =  0;  j  <  solvedCols;  ++i)  {  point[pj]  =  oldX[i];  }  (int  i  =  0;  j  <  solvedCols;  ++i)  {  point[pj]  =  oldX[i];  }  [CE]  ')'  expected  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]    }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];    [BUGGY]      for(int  i  =  0;  j  <  solvedCols;  ++i)  {  point[pj]  =  oldX[i];  }  (int  i  =  0;  j  <  solvedCols;  ++i)  {  point[pj]  =  oldX[i];  }  [BUGGY]    point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	        for(int    i    =    0;    j    <    solvedCols;    ++i)    {    point[pj]    =    oldX[i];    }    (int  i  =  0;  j  <  solvedCols;  ++i)  {  point[pj]  =  oldX[i];  }	  	non-compiled	[CE]  ')'  expected	21	None	add
128	[BUG]  [BUGGY]      for(int  i  =  0;  j  <  solvedCols;  ++i)  {  point[pj]  =  oldX[i];  }  if(i  =  0;  j  <  solvedCols;  ++i)  {  point[pj]  =  oldX[i];  }  [CE]  ')'  expected  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]    }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];    [BUGGY]      for(int  i  =  0;  j  <  solvedCols;  ++i)  {  point[pj]  =  oldX[i];  }  if(i  =  0;  j  <  solvedCols;  ++i)  {  point[pj]  =  oldX[i];  }  [BUGGY]    point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	        for(int    i    =    0;    j    <    solvedCols;    ++i)    {    point[pj]    =    oldX[i];    }    if(i  =  0;  j  <  solvedCols;  ++i)  {  point[pj]  =  oldX[i];  }	  	non-compiled	[CE]  ')'  expected	21	None	add
129	[BUG]  [BUGGY]      for(int  i  =  0;  j  <  solvedCols;  ++i)  {  point[pj]  =  oldX[i];  }  Integer  i  =  0;  j  <  solvedCols;  ++i)  {  point[pj]  =  oldX[i];  }  [CE]  >  expected  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]    }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];    [BUGGY]      for(int  i  =  0;  j  <  solvedCols;  ++i)  {  point[pj]  =  oldX[i];  }  Integer  i  =  0;  j  <  solvedCols;  ++i)  {  point[pj]  =  oldX[i];  }  [BUGGY]    point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	        for(int    i    =    0;    j    <    solvedCols;    ++i)    {    point[pj]    =    oldX[i];    }    Integer  i  =  0;  j  <  solvedCols;  ++i)  {  point[pj]  =  oldX[i];  }	  	non-compiled	[CE]  >  expected	21	None	add
130	[BUG]  [BUGGY]  ((  VectorialPointValuePair)previous).remove(pj  -  1);  [CE]  cannot  find  symbol  [FE]              AssertionFailedError    [CONTEXT]    }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];    [BUGGY]  ((  VectorialPointValuePair)previous).remove(pj  -  1);  [BUGGY]    point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	((  VectorialPointValuePair)previous).remove(pj  -  1);	      ((    VectorialPointValuePair)previous).remove(pj);    	non-compiled	[CE]  cannot  find  symbol	19	None	replace
131	[BUG]  [BUGGY]  ((  VectorialPointValuePair)previous).remove(point);  [CE]  cannot  find  symbol  [FE]                AssertionFailedError    [CONTEXT]    }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];    [BUGGY]  ((  VectorialPointValuePair)previous).remove(point);  [BUGGY]    point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	((  VectorialPointValuePair)previous).remove(point);	      ((    VectorialPointValuePair)previous).remove(pj);    	non-compiled	[CE]  cannot  find  symbol	19	None	replace
132	[BUG]  [BUGGY]  point[pj]  =  xNorm;  ((  VectorialPointValuePair)point[pj]).setValue(null);  [CE]  inconvertible  types  [FE]    AssertionFailedError    [CONTEXT]    }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];    [BUGGY]  point[pj]  =  xNorm;  ((  VectorialPointValuePair)point[pj]).setValue(null);  [BUGGY]    }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	point[pj]    =    xNorm;    ((  VectorialPointValuePair)point[pj]).setValue(null);	  	non-compiled	[CE]  inconvertible  types	8	None	add
133	[BUG]  [BUGGY]  point[pj]  =  xNorm;  ((  VectorialPointValuePair)point[pj]).setIndex(pj);  [CE]  inconvertible  types  [FE]      AssertionFailedError    [CONTEXT]    }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];    [BUGGY]  point[pj]  =  xNorm;  ((  VectorialPointValuePair)point[pj]).setIndex(pj);  [BUGGY]    }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	point[pj]    =    xNorm;    ((  VectorialPointValuePair)point[pj]).setIndex(pj);	  	non-compiled	[CE]  inconvertible  types	8	None	add
134	[BUG]  [BUGGY]  point[pj]  =  xNorm;  ((  VectorialPointValuePair)point[pj]).setValue(value);  [CE]  cannot  find  symbol  value  [FE]        AssertionFailedError    [CONTEXT]    }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];    [BUGGY]  point[pj]  =  xNorm;  ((  VectorialPointValuePair)point[pj]).setValue(value);  [BUGGY]    }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	point[pj]    =    xNorm;    ((  VectorialPointValuePair)point[pj]).setValue(value);	  	non-compiled	[CE]  cannot  find  symbol  value	8	None	add
135	[BUG]  [BUGGY]  tmpVec  =  permutation[j]  +  cost;  [CE]  incompatible  types  [FE]            AssertionFailedError    [CONTEXT]    }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];    [BUGGY]  tmpVec  =  permutation[j]  +  cost;  [BUGGY]    point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	tmpVec  =  permutation[j]  +  cost;	      tmpVec    =    permutation[j];    	non-compiled	[CE]  incompatible  types	3	None	replace
136	[BUG]  [BUGGY]      for(int  i  =  0;  i  <  solvedCols;  ++i)  {  point[pj]  =  cost;  }  Integer  i  =  0;  i  <  solvedCols;  ++i)  {  point[pj]  =  cost;  }  [CE]  >  expected  [FE]    AssertionFailedError    [CONTEXT]    }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];    [BUGGY]      for(int  i  =  0;  i  <  solvedCols;  ++i)  {  point[pj]  =  cost;  }  Integer  i  =  0;  i  <  solvedCols;  ++i)  {  point[pj]  =  cost;  }  [BUGGY]    point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	        for(int    i    =    0;    i    <    solvedCols;    ++i)    {    point[pj]    =    cost;    }    Integer  i  =  0;  i  <  solvedCols;  ++i)  {  point[pj]  =  cost;  }	  	non-compiled	[CE]  >  expected	26	None	add
137	[BUG]  [BUGGY]      for(int  i  =  0;  i  <  solvedCols;  ++i)  {  point[pj]  =  cost;  }  if(i  =  0;  i  <  solvedCols;  ++i)  {  point[pj]  =  cost;  }  [CE]  ')'  expected  [FE]      AssertionFailedError    [CONTEXT]    }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];    [BUGGY]      for(int  i  =  0;  i  <  solvedCols;  ++i)  {  point[pj]  =  cost;  }  if(i  =  0;  i  <  solvedCols;  ++i)  {  point[pj]  =  cost;  }  [BUGGY]    point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	        for(int    i    =    0;    i    <    solvedCols;    ++i)    {    point[pj]    =    cost;    }    if(i  =  0;  i  <  solvedCols;  ++i)  {  point[pj]  =  cost;  }	  	non-compiled	[CE]  ')'  expected	26	None	add
138	[BUG]  [BUGGY]  tmpVec  =  Math.sqrt(previousCost  +  1);  [CE]  incompatible  types  [FE]          AssertionFailedError    [CONTEXT]    }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];    [BUGGY]  tmpVec  =  Math.sqrt(previousCost  +  1);  [BUGGY]    point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	tmpVec  =  Math.sqrt(previousCost  +  1);	      tmpVec    =    Math.sqrt(previousCost);    	non-compiled	[CE]  incompatible  types	2	None	replace
139	[BUG]  [BUGGY]  tmpVec  =  Math.sqrt(lastCost);  [CE]  cannot  find  symbol  lastCost  [FE]            AssertionFailedError    [CONTEXT]    }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];    [BUGGY]  tmpVec  =  Math.sqrt(lastCost);  [BUGGY]    point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	tmpVec  =  Math.sqrt(lastCost);	      tmpVec    =    Math.sqrt(previousCost);    	non-compiled	[CE]  cannot  find  symbol  lastCost	2	None	replace
140	[BUG]  [BUGGY]  int  pj  =  oldX[i];  [CE]  variable  pj  is  already  defined  in  method  doOptimize()  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]    }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];    [BUGGY]  int  pj  =  oldX[i];  [BUGGY]    point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	int  pj  =  oldX[i];	      for(int    i    =    0;    j    <    solvedCols;    ++i)    {    point[pj]    =    oldX[i];    }    	non-compiled	[CE]  variable  pj  is  already  defined  in  method  doOptimize()	22	None	replace
141	[BUG]  [BUGGY]  for(int  i  =  0;  j  <  k;  ++i)  {  point[pj]  =  oldX[i];  }  [CE]  cannot  find  symbol  k  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]    }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];    [BUGGY]  for(int  i  =  0;  j  <  k;  ++i)  {  point[pj]  =  oldX[i];  }  [BUGGY]    point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	for(int  i  =  0;  j  <  k;  ++i)  {  point[pj]  =  oldX[i];  }	      for(int    i    =    0;    j    <    solvedCols;    ++i)    {    point[pj]    =    oldX[i];    }    	non-compiled	[CE]  cannot  find  symbol  k	22	None	replace
142	[BUG]  [BUGGY]  point[j]  =  oldX[pj];  ((  VectorialPointValuePair)previous).setVec(tmpVec);  [CE]  cannot  find  symbol  [FE]    AssertionFailedError    [CONTEXT]    }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];    [BUGGY]  point[j]  =  oldX[pj];  ((  VectorialPointValuePair)previous).setVec(tmpVec);  [BUGGY]    }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	point[j]    =    oldX[pj];    ((  VectorialPointValuePair)previous).setVec(tmpVec);	  	non-compiled	[CE]  cannot  find  symbol	10	None	add
143	[BUG]  [BUGGY]  point[j]  =  oldX[pj];  ((  VectorialPointValuePair)point[j]).setIndex(pj);  [CE]  inconvertible  types  [FE]      AssertionFailedError    [CONTEXT]    }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];    [BUGGY]  point[j]  =  oldX[pj];  ((  VectorialPointValuePair)point[j]).setIndex(pj);  [BUGGY]    }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	point[j]    =    oldX[pj];    ((  VectorialPointValuePair)point[j]).setIndex(pj);	  	non-compiled	[CE]  inconvertible  types	10	None	add
144	[BUG]  [BUGGY]  ((  VectorialPointValuePair)previousCost).setIndex(pj  -  2);  [CE]  inconvertible  types  [FE]              AssertionFailedError    [CONTEXT]    }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];    [BUGGY]  ((  VectorialPointValuePair)previousCost).setIndex(pj  -  2);  [BUGGY]    point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	((  VectorialPointValuePair)previousCost).setIndex(pj  -  2);	      ((    VectorialPointValuePair)previousCost).setIndex(pj);    	non-compiled	[CE]  inconvertible  types	4	None	replace
145	[BUG]  [BUGGY]  point[pj]  =  permutation[pj];  points[pj]  =  point[pj];  [CE]  cannot  find  symbol  points  [FE]    AssertionFailedError    [CONTEXT]    }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];    [BUGGY]  point[pj]  =  permutation[pj];  points[pj]  =  point[pj];  [BUGGY]    }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	point[pj]    =    permutation[pj];    points[pj]  =  point[pj];	  	non-compiled	[CE]  cannot  find  symbol  points	12	None	add
146	[BUG]  [BUGGY]  point[pj]  =  permutation[pj];  point[pj]  =  permutation[pj].;  [CE]  <identifier>  expected  [FE]      AssertionFailedError    [CONTEXT]    }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];    [BUGGY]  point[pj]  =  permutation[pj];  point[pj]  =  permutation[pj].;  [BUGGY]    }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	point[pj]    =    permutation[pj];    point[pj]  =  permutation[pj].;	  	non-compiled	[CE]  <identifier>  expected	12	None	add
147	[BUG]  [BUGGY]  point[pj]  =  Cost.parseValue(xNorm,  pj);  [CE]  cannot  find  symbol  Cost  [FE]        AssertionFailedError    [CONTEXT]    }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];    [BUGGY]  point[pj]  =  Cost.parseValue(xNorm,  pj);  [BUGGY]    }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	point[pj]  =  Cost.parseValue(xNorm,  pj);	  point[pj]    =    value;    	non-compiled	[CE]  cannot  find  symbol  Cost	14	None	replace
148	[BUG]  [BUGGY]  point[pj]  =  tmpVec.cloneTree();  [CE]  cannot  find  symbol  [FE]          AssertionFailedError    [CONTEXT]    }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];    [BUGGY]  point[pj]  =  tmpVec.cloneTree();  [BUGGY]    }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	point[pj]  =  tmpVec.cloneTree();	  point[pj]    =    tmpVec;    	non-compiled	[CE]  cannot  find  symbol	15	None	replace
149	[BUG]  [BUGGY]  tmpVec  =  Math.sqrt(xNorm);  [CE]  incompatible  types  [FE]          AssertionFailedError    [CONTEXT]    }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];    [BUGGY]  tmpVec  =  Math.sqrt(xNorm);  [BUGGY]    point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	tmpVec  =  Math.sqrt(xNorm);	      tmpVec    =    Math.sqrt(previousCost);    	non-compiled	[CE]  incompatible  types	2	None	replace
150	[BUG]  [BUGGY]  point[pj]  =  cost?  permutation[pj]  :  0;  [CE]  incompatible  types  [FE]    AssertionFailedError    [CONTEXT]    }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];    [BUGGY]  point[pj]  =  cost?  permutation[pj]  :  0;  [BUGGY]    }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	point[pj]  =  cost?  permutation[pj]  :  0;	  point[pj]    =    permutation[pj];    	non-compiled	[CE]  incompatible  types	13	None	replace
151	[BUG]  [BUGGY]  point[pj]  =  cost?  permutation[pj]  :  xNorm;  [CE]  incompatible  types  [FE]      AssertionFailedError    [CONTEXT]    }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];    [BUGGY]  point[pj]  =  cost?  permutation[pj]  :  xNorm;  [BUGGY]    }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	point[pj]  =  cost?  permutation[pj]  :  xNorm;	  point[pj]    =    permutation[pj];    	non-compiled	[CE]  incompatible  types	13	None	replace
152	[BUG]  [BUGGY]  tmpVec  =  cost  +  1;  [CE]  incompatible  types  [FE]            AssertionFailedError    [CONTEXT]    }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];    [BUGGY]  tmpVec  =  cost  +  1;  [BUGGY]    point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	tmpVec  =  cost  +  1;	      tmpVec    =    cost;    	non-compiled	[CE]  incompatible  types	18	None	replace
153	[BUG]  [BUGGY]  point[pj]  =  cost;  ((  VectorialPointValuePair)point[pj]).evaluate();  [CE]  inconvertible  types  [FE]    AssertionFailedError    [CONTEXT]    }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];    [BUGGY]  point[pj]  =  cost;  ((  VectorialPointValuePair)point[pj]).evaluate();  [BUGGY]    }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	point[pj]    =    cost;    ((  VectorialPointValuePair)point[pj]).evaluate();	  	non-compiled	[CE]  inconvertible  types	6	None	add
154	[BUG]  [BUGGY]  point[pj]  =  cost;  ((  VectorialPointValuePair)point[pj]).remainder();  [CE]  inconvertible  types  [FE]      AssertionFailedError    [CONTEXT]    }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];    [BUGGY]  point[pj]  =  cost;  ((  VectorialPointValuePair)point[pj]).remainder();  [BUGGY]    }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	point[pj]    =    cost;    ((  VectorialPointValuePair)point[pj]).remainder();	  	non-compiled	[CE]  inconvertible  types	6	None	add
155	[BUG]  [BUGGY]  int  pj  =  permutation[j  -  1];  [CE]  variable  pj  is  already  defined  in  method  doOptimize()  [FE]        AssertionFailedError    [CONTEXT]    }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];    [BUGGY]  int  pj  =  permutation[j  -  1];  [BUGGY]    point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	int  pj  =  permutation[j  -  1];	      int    pj    =    permutation[j];    	non-compiled	[CE]  variable  pj  is  already  defined  in  method  doOptimize()	1	None	replace
156	[BUG]  [BUGGY]  int  pj  =  cost[j];  [CE]  variable  pj  is  already  defined  in  method  doOptimize()  [FE]          AssertionFailedError    [CONTEXT]    }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];    [BUGGY]  int  pj  =  cost[j];  [BUGGY]    point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	int  pj  =  cost[j];	      int    pj    =    permutation[j];    	non-compiled	[CE]  variable  pj  is  already  defined  in  method  doOptimize()	1	None	replace
157	[BUG]  [BUGGY]  int  pj  =  oldNorm[j];  [CE]  variable  pj  is  already  defined  in  method  doOptimize()  [FE]            AssertionFailedError    [CONTEXT]    }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];    [BUGGY]  int  pj  =  oldNorm[j];  [BUGGY]    point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	int  pj  =  oldNorm[j];	      int    pj    =    permutation[j];    	non-compiled	[CE]  variable  pj  is  already  defined  in  method  doOptimize()	1	None	replace
158	[BUG]  [BUGGY]  point[pj]  =  xNorm;  ((  VectorialPointValuePair)point[pj]).evaluate(xNorm);  [CE]  inconvertible  types  [FE]    AssertionFailedError    [CONTEXT]    }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];    [BUGGY]  point[pj]  =  xNorm;  ((  VectorialPointValuePair)point[pj]).evaluate(xNorm);  [BUGGY]    }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	point[pj]    =    xNorm;    ((  VectorialPointValuePair)point[pj]).evaluate(xNorm);	  	non-compiled	[CE]  inconvertible  types	8	None	add
159	[BUG]  [BUGGY]  point[pj]  =  xNorm;  ((  VectorialPointValuePair)point[pj]).setValue(xNorm);  [CE]  inconvertible  types  [FE]      AssertionFailedError    [CONTEXT]    }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];    [BUGGY]  point[pj]  =  xNorm;  ((  VectorialPointValuePair)point[pj]).setValue(xNorm);  [BUGGY]    }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	point[pj]    =    xNorm;    ((  VectorialPointValuePair)point[pj]).setValue(xNorm);	  	non-compiled	[CE]  inconvertible  types	8	None	add
160	[BUG]  [BUGGY]  ((  VectorialPointValuePair)pj).remove(oldX);  [CE]  inconvertible  types  [FE]          AssertionFailedError    [CONTEXT]    }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];    [BUGGY]  ((  VectorialPointValuePair)pj).remove(oldX);  [BUGGY]    point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	((  VectorialPointValuePair)pj).remove(oldX);	      ((    VectorialPointValuePair)last).remove(pj);    	non-compiled	[CE]  inconvertible  types	17	None	replace
161	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  point[pj]  =  oldX[pj];  }  [CE]  variable  j  is  already  defined  in  method  doOptimize()  [FE]            AssertionFailedError    [CONTEXT]    }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];    [BUGGY]  for(int  j  =  0;  j  <  solvedCols;  ++j)  {  point[pj]  =  oldX[pj];  }  [BUGGY]    point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	for(int  j  =  0;  j  <  solvedCols;  ++j)  {  point[pj]  =  oldX[pj];  }	      for(int    i    =    0;    j    <    solvedCols;    ++i)    {    point[pj]    =    cost;    }    timeout    	non-compiled	[CE]  variable  j  is  already  defined  in  method  doOptimize()	25	None	replace
162	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  solvedCols;  ++i)  {  point[pj]  =  oldX[pj];  }  [CE]  variable  j  is  already  defined  in  method  doOptimize()  [FE]              AssertionFailedError    [CONTEXT]    }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];    [BUGGY]  for(int  j  =  0;  j  <  solvedCols;  ++i)  {  point[pj]  =  oldX[pj];  }  [BUGGY]    point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	for(int  j  =  0;  j  <  solvedCols;  ++i)  {  point[pj]  =  oldX[pj];  }	      for(int    i    =    0;    j    <    solvedCols;    ++i)    {    point[pj]    =    cost;    }    timeout    	non-compiled	[CE]  variable  j  is  already  defined  in  method  doOptimize()	25	None	replace
163	[BUG]  [BUGGY]      for(int  i  =  0;  j  <  solvedCols;  ++i)  {  point[pj]  =  oldX[i];  }  if(i  >  0)  {  for(int  i  =  0;  j  <  solvedCols;  ++i)  {  point[pj]  =  oldX[i];  }  }  [CE]  cannot  find  symbol  i  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]    }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];    [BUGGY]      for(int  i  =  0;  j  <  solvedCols;  ++i)  {  point[pj]  =  oldX[i];  }  if(i  >  0)  {  for(int  i  =  0;  j  <  solvedCols;  ++i)  {  point[pj]  =  oldX[i];  }  }  [BUGGY]    point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	        for(int    i    =    0;    j    <    solvedCols;    ++i)    {    point[pj]    =    oldX[i];    }    if(i  >  0)  {  for(int  i  =  0;  j  <  solvedCols;  ++i)  {  point[pj]  =  oldX[i];  }  }	  	non-compiled	[CE]  cannot  find  symbol  i	21	None	add
164	[BUG]  [BUGGY]      for(int  i  =  0;  j  <  solvedCols;  ++i)  {  point[pj]  =  oldX[i];  }  if(i  >  0)  {  for(int  i  =  0;  j  <  solvedCols;  ++i)  {  point[pj]  =  oldX[i];  }  [CE]  illegal  start  of  expression  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]    }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];    [BUGGY]      for(int  i  =  0;  j  <  solvedCols;  ++i)  {  point[pj]  =  oldX[i];  }  if(i  >  0)  {  for(int  i  =  0;  j  <  solvedCols;  ++i)  {  point[pj]  =  oldX[i];  }  [BUGGY]    point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	        for(int    i    =    0;    j    <    solvedCols;    ++i)    {    point[pj]    =    oldX[i];    }    if(i  >  0)  {  for(int  i  =  0;  j  <  solvedCols;  ++i)  {  point[pj]  =  oldX[i];  }	  	non-compiled	[CE]  illegal  start  of  expression	21	None	add
165	[BUG]  [BUGGY]      for(int  i  =  0;  i  <  solvedCols;  ++i)  {  point[pj]  =  cost;  }  for(int  i  =  0;  i  <  resolvedCols;  ++i)  {  point[pj]  =  cost;  }  [CE]  cannot  find  symbol  resolvedCols  [FE]    AssertionFailedError    [CONTEXT]    }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];    [BUGGY]      for(int  i  =  0;  i  <  solvedCols;  ++i)  {  point[pj]  =  cost;  }  for(int  i  =  0;  i  <  resolvedCols;  ++i)  {  point[pj]  =  cost;  }  [BUGGY]    point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	        for(int    i    =    0;    i    <    solvedCols;    ++i)    {    point[pj]    =    cost;    }    for(int  i  =  0;  i  <  resolvedCols;  ++i)  {  point[pj]  =  cost;  }	  	non-compiled	[CE]  cannot  find  symbol  resolvedCols	26	None	add
166	[BUG]  [BUGGY]  tmpVec  =  permutation[j  +  1];  [CE]  incompatible  types  [FE]            AssertionFailedError    [CONTEXT]    }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];    [BUGGY]  tmpVec  =  permutation[j  +  1];  [BUGGY]    point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	tmpVec  =  permutation[j  +  1];	      tmpVec    =    permutation[j];    	non-compiled	[CE]  incompatible  types	3	None	replace
167	[BUG]  [BUGGY]  ((  VectorialPointValuePair)previousCost).add(pj  -  1);  [CE]  inconvertible  types  [FE]                AssertionFailedError    [CONTEXT]    }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];    [BUGGY]  ((  VectorialPointValuePair)previousCost).add(pj  -  1);  [BUGGY]    point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	((  VectorialPointValuePair)previousCost).add(pj  -  1);	      ((    VectorialPointValuePair)previousCost).remove(pj);    	non-compiled	[CE]  inconvertible  types	5	None	replace
168	[BUG]  [BUGGY]  point[j]  =  xNorm[pj];  [CE]  array  required,  but  double  found  [FE]    AssertionFailedError    [CONTEXT]    }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];    [BUGGY]  point[j]  =  xNorm[pj];  [BUGGY]    }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	point[j]  =  xNorm[pj];	  point[j]    =    oldX[pj];    	non-compiled	[CE]  array  required,  but  double  found	11	None	replace
169	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]      AssertionFailedError    [CONTEXT]    }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];    [BUGGY]  point[j]  =  oldX[pj  -  1];  [BUGGY]    }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	add	point[j]  =  oldX[pj  -  1];	  point[j]    =    oldX[pj];    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	11	15	replace
170	[BUG]  [BUGGY]  point[j]  =  oldX[pj  -  1];  [FE]  ArrayIndexOutOfBoundsException  [FE]      AssertionFailedError    [CONTEXT]    }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];    [BUGGY]  point[j]  =  oldX[pj  -  1];  [BUGGY]    }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	point[j]  =  oldX[pj  -  1];	  point[j]    =    oldX[pj];    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	11	15	replace
171	[BUG]  [BUGGY]  point[pj]  =  Cost.parse(xNorm);  [CE]  cannot  find  symbol  Cost  [FE]    AssertionFailedError    [CONTEXT]    }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];    [BUGGY]  point[pj]  =  Cost.parse(xNorm);  [BUGGY]    }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	point[pj]  =  Cost.parse(xNorm);	  point[pj]    =    xNorm;    	non-compiled	[CE]  cannot  find  symbol  Cost	9	None	replace
172	[BUG]  [BUGGY]  point[pj]  =  Cost.parseInt(xNorm);  [CE]  cannot  find  symbol  Cost  [FE]      AssertionFailedError    [CONTEXT]    }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];    [BUGGY]  point[pj]  =  Cost.parseInt(xNorm);  [BUGGY]    }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	point[pj]  =  Cost.parseInt(xNorm);	  point[pj]    =    xNorm;    	non-compiled	[CE]  cannot  find  symbol  Cost	9	None	replace
173	[BUG]  [BUGGY]  point[pj]  =  permutation[c];  [CE]  cannot  find  symbol  c  [FE]        AssertionFailedError    [CONTEXT]    }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];    [BUGGY]  point[pj]  =  permutation[c];  [BUGGY]    }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	point[pj]  =  permutation[c];	  point[pj]    =    cost[cost];    	non-compiled	[CE]  cannot  find  symbol  c	20	None	replace
174	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  oldX;  ++i)  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];    [BUGGY]  for(int  i  =  0;  i  <  oldX;  ++i)  {  [BUGGY]    point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	for(int  i  =  0;  i  <  oldX;  ++i)  {	      for(int    i    =    0;    i    <    solvedCols;    ++i)    {    int    oldX    =    oldX[i];    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
175	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  oldX;  ++i)  {  int  point  =  oldX[i];  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];    [BUGGY]  for(int  i  =  0;  i  <  oldX;  ++i)  {  int  point  =  oldX[i];  [BUGGY]    point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	for(int  i  =  0;  i  <  oldX;  ++i)  {  int  point  =  oldX[i];	      for(int    i    =    0;    i    <    solvedCols;    ++i)    {    int    oldX    =    oldX[i];    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
176	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  k;  ++i)  {  point[pj]  =  cost;  }  [CE]  cannot  find  symbol  k  [FE]    AssertionFailedError    [CONTEXT]    }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];    [BUGGY]  for(int  i  =  0;  i  <  k;  ++i)  {  point[pj]  =  cost;  }  [BUGGY]    point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	for(int  i  =  0;  i  <  k;  ++i)  {  point[pj]  =  cost;  }	      for(int    i    =    0;    i    <    solvedCols;    ++i)    {    point[pj]    =    cost;    }    	non-compiled	[CE]  cannot  find  symbol  k	27	None	replace
177	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];    [BUGGY]  for(int  i  =  0;  i  <  pj;  ++i)  {  point[pj]  =  oldX[pj];  }  [BUGGY]    point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	add	for(int  i  =  0;  i  <  pj;  ++i)  {  point[pj]  =  oldX[pj];  }	      for(int    i    =    0;    i    <    solvedCols;    ++i)    {    point[pj]    =    cost;    }    	compilable	  [FE]  AssertionFailedError  	27	12	replace
178	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  pj;  ++i)  {  point[pj]  =  oldX[pj];  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];    [BUGGY]  for(int  i  =  0;  i  <  pj;  ++i)  {  point[pj]  =  oldX[pj];  }  [BUGGY]    point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	429	429	2	replace	for(int  i  =  0;  i  <  pj;  ++i)  {  point[pj]  =  oldX[pj];  }	      for(int    i    =    0;    i    <    solvedCols;    ++i)    {    point[pj]    =    cost;    }    	compilable	  [FE]  AssertionFailedError  	27	12	replace
