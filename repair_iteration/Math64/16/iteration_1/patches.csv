bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  double  xCols  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  [CE]  class,  interface,  or  enum  expected  [FE]        AssertionFailedError    [CONTEXT]    double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;    [BUGGY]  double  xCols  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  [BUGGY]    for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	427	427	2	replace	double  xCols  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;	      double    solvedCols    =    diag[k]    *    oldX[k];    xNorm+=    xK    *    xK;    	non-compiled	[CE]  class,  interface,  or  enum  expected	8	None	replace
2	[BUG]  [BUGGY]  xNorm+=  xK  *  xK;  [CE]  class,  interface,  or  enum  expected  [FE]          AssertionFailedError    [CONTEXT]    double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;    [BUGGY]  xNorm+=  xK  *  xK;  [BUGGY]    for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	427	427	2	replace	xNorm+=  xK  *  xK;	      double    solvedCols    =    diag[k]    *    oldX[k];    xNorm+=    xK    *    xK;    	non-compiled	[CE]  class,  interface,  or  enum  expected	8	None	replace
3	[BUG]  [BUGGY]  double  solvedCols  =  diag[k]  *  point[k];  xNorm+=  xK  *  xNorm;  [CE]  class,  interface,  or  enum  expected  [FE]          AssertionFailedError    [CONTEXT]    double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;    [BUGGY]  double  solvedCols  =  diag[k]  *  point[k];  xNorm+=  xK  *  xNorm;  [BUGGY]    for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	427	427	2	replace	double  solvedCols  =  diag[k]  *  point[k];  xNorm+=  xK  *  xNorm;	      double    solvedCols    =    diag[k]    *    point[k];    xNorm+=    xK    *    xK;    	non-compiled	[CE]  class,  interface,  or  enum  expected	9	None	replace
4	[BUG]  [BUGGY]  double  solvedCols  =  diag[k]  *  point[k];  xNorm+=  xS  *  xK;  [CE]  class,  interface,  or  enum  expected  [FE]            AssertionFailedError    [CONTEXT]    double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;    [BUGGY]  double  solvedCols  =  diag[k]  *  point[k];  xNorm+=  xS  *  xK;  [BUGGY]    for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	427	427	2	replace	double  solvedCols  =  diag[k]  *  point[k];  xNorm+=  xS  *  xK;	      double    solvedCols    =    diag[k]    *    point[k];    xNorm+=    xK    *    xK;    	non-compiled	[CE]  class,  interface,  or  enum  expected	9	None	replace
5	[BUG]  [BUGGY]  double  solvedCols  =  diag[k]  *  point[k];  xNorm+=  xN  *  xK;  [CE]  class,  interface,  or  enum  expected  [FE]              AssertionFailedError    [CONTEXT]    double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;    [BUGGY]  double  solvedCols  =  diag[k]  *  point[k];  xNorm+=  xN  *  xK;  [BUGGY]    for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	427	427	2	replace	double  solvedCols  =  diag[k]  *  point[k];  xNorm+=  xN  *  xK;	      double    solvedCols    =    diag[k]    *    point[k];    xNorm+=    xK    *    xK;    	non-compiled	[CE]  class,  interface,  or  enum  expected	9	None	replace
6	[BUG]  [BUGGY]  double  solvedCols  =  diag[k]  *  point[k];  xNorm+=  xK  *  cost;  [CE]  class,  interface,  or  enum  expected  [FE]                AssertionFailedError    [CONTEXT]    double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;    [BUGGY]  double  solvedCols  =  diag[k]  *  point[k];  xNorm+=  xK  *  cost;  [BUGGY]    for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	427	427	2	replace	double  solvedCols  =  diag[k]  *  point[k];  xNorm+=  xK  *  cost;	      double    solvedCols    =    diag[k]    *    point[k];    xNorm+=    xK    *    xK;    	non-compiled	[CE]  class,  interface,  or  enum  expected	9	None	replace
7	[BUG]  [BUGGY]  xNorm+=  xK  *  permutation[k];  [CE]  class,  interface,  or  enum  expected  [FE]          AssertionFailedError    [CONTEXT]    double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;    [BUGGY]  xNorm+=  xK  *  permutation[k];  [BUGGY]    for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	427	427	2	replace	xNorm+=  xK  *  permutation[k];	      double    xK    =    permutation[k]    *    point[k];    xNorm+=    xK    *    xNorm;    	non-compiled	[CE]  class,  interface,  or  enum  expected	5	None	replace
8	[BUG]  [BUGGY]  double  xK  =  permutation[k]  *  point[k];  xNorm+=  xK  *  cost;  [CE]  class,  interface,  or  enum  expected  [FE]            AssertionFailedError    [CONTEXT]    double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;    [BUGGY]  double  xK  =  permutation[k]  *  point[k];  xNorm+=  xK  *  cost;  [BUGGY]    for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	427	427	2	replace	double  xK  =  permutation[k]  *  point[k];  xNorm+=  xK  *  cost;	      double    xK    =    permutation[k]    *    point[k];    xNorm+=    xK    *    xNorm;    	non-compiled	[CE]  class,  interface,  or  enum  expected	5	None	replace
9	[BUG]  [BUGGY]  double  xK  =  permutation[k]  *  point[k];  xNorm+=  xK  *  tmp;  [CE]  class,  interface,  or  enum  expected  [FE]              AssertionFailedError    [CONTEXT]    double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;    [BUGGY]  double  xK  =  permutation[k]  *  point[k];  xNorm+=  xK  *  tmp;  [BUGGY]    for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	427	427	2	replace	double  xK  =  permutation[k]  *  point[k];  xNorm+=  xK  *  tmp;	      double    xK    =    permutation[k]    *    point[k];    xNorm+=    xK    *    xNorm;    	non-compiled	[CE]  class,  interface,  or  enum  expected	5	None	replace
10	[BUG]  [BUGGY]  double  xK  =  permutation[k]  *  point[k];  xNorm+=  Math.sqrt(cost);  [CE]  class,  interface,  or  enum  expected  [FE]            AssertionFailedError    [CONTEXT]    double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;    [BUGGY]  double  xK  =  permutation[k]  *  point[k];  xNorm+=  Math.sqrt(cost);  [BUGGY]    for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	427	427	2	replace	double  xK  =  permutation[k]  *  point[k];  xNorm+=  Math.sqrt(cost);	      double    xK    =    permutation[k]    *    point[k];    xNorm+=    Math.sqrt(xK);    	non-compiled	[CE]  class,  interface,  or  enum  expected	6	None	replace
11	[BUG]  [BUGGY]  xNorm+=  Math.sqrt(xK);  [CE]  class,  interface,  or  enum  expected  [FE]              AssertionFailedError    [CONTEXT]    double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;    [BUGGY]  xNorm+=  Math.sqrt(xK);  [BUGGY]    for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	427	427	2	replace	xNorm+=  Math.sqrt(xK);	      double    xK    =    permutation[k]    *    point[k];    xNorm+=    Math.sqrt(xK);    	non-compiled	[CE]  class,  interface,  or  enum  expected	6	None	replace
12	[BUG]  [BUGGY]  double[]  solvedCols  =  diag[k]  *  cost;  [CE]  class,  interface,  or  enum  expected  [FE]          AssertionFailedError    [CONTEXT]    double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;    [BUGGY]  double[]  solvedCols  =  diag[k]  *  cost;  [BUGGY]    for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	427	427	2	replace	double[]  solvedCols  =  diag[k]  *  cost;	      double[]    solvedCols    =    diag[k]    *    costRelativeTolerance;    	non-compiled	[CE]  class,  interface,  or  enum  expected	15	None	replace
13	[BUG]  [BUGGY]  double[]  solvedCols  =  coeff1  *  costRelativeTolerance;  [CE]  class,  interface,  or  enum  expected  [FE]            AssertionFailedError    [CONTEXT]    double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;    [BUGGY]  double[]  solvedCols  =  coeff1  *  costRelativeTolerance;  [BUGGY]    for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	427	427	2	replace	double[]  solvedCols  =  coeff1  *  costRelativeTolerance;	      double[]    solvedCols    =    diag[k]    *    costRelativeTolerance;    	non-compiled	[CE]  class,  interface,  or  enum  expected	15	None	replace
14	[BUG]  [BUGGY]  double[]  solvedCols  =  diag[0]  *  costRelativeTolerance;  [CE]  class,  interface,  or  enum  expected  [FE]              AssertionFailedError    [CONTEXT]    double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;    [BUGGY]  double[]  solvedCols  =  diag[0]  *  costRelativeTolerance;  [BUGGY]    for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	427	427	2	replace	double[]  solvedCols  =  diag[0]  *  costRelativeTolerance;	      double[]    solvedCols    =    diag[k]    *    costRelativeTolerance;    	non-compiled	[CE]  class,  interface,  or  enum  expected	15	None	replace
15	[BUG]  [BUGGY]  double  xK  =  permutation[k]  *  point[k];  xNorm+=  xK  *  maxCosine;  [CE]  class,  interface,  or  enum  expected  [FE]              AssertionFailedError    [CONTEXT]    double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;    [BUGGY]  double  xK  =  permutation[k]  *  point[k];  xNorm+=  xK  *  maxCosine;  [BUGGY]    for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	427	427	2	replace	double  xK  =  permutation[k]  *  point[k];  xNorm+=  xK  *  maxCosine;	      double    xK    =    permutation[k]    *    point[k];    xNorm+=    xK    *    oldX;    	non-compiled	[CE]  class,  interface,  or  enum  expected	7	None	replace
16	[BUG]  [BUGGY]  xNorm+=  xK  *  tmpVec;  [CE]  class,  interface,  or  enum  expected  [FE]        AssertionFailedError    [CONTEXT]    double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;    [BUGGY]  xNorm+=  xK  *  tmpVec;  [BUGGY]    for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	427	427	2	replace	xNorm+=  xK  *  tmpVec;	      double    xK    =    permutation[k]    *    point[k];    xNorm+=    xK    *    tmpVec;    	non-compiled	[CE]  class,  interface,  or  enum  expected	14	None	replace
17	[BUG]  [BUGGY]  double  xK  =  permutation[k]  *  point[k];  xNorm+=  xN  *  tmpVec;  [CE]  class,  interface,  or  enum  expected  [FE]          AssertionFailedError    [CONTEXT]    double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;    [BUGGY]  double  xK  =  permutation[k]  *  point[k];  xNorm+=  xN  *  tmpVec;  [BUGGY]    for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	427	427	2	replace	double  xK  =  permutation[k]  *  point[k];  xNorm+=  xN  *  tmpVec;	      double    xK    =    permutation[k]    *    point[k];    xNorm+=    xK    *    tmpVec;    	non-compiled	[CE]  class,  interface,  or  enum  expected	14	None	replace
18	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]          AssertionFailedError    [CONTEXT]    double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;    [BUGGY]  for(int  j  =  0;  j  <  cost;  ++j)  {  [BUGGY]    int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	427	427	2	add	for(int  j  =  0;  j  <  cost;  ++j)  {	  for(int    j    =    0;    j    <    fixedCols;    ++j)    {    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	2	13	replace
19	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  cost;  ++j)  {  [FE]  ArrayIndexOutOfBoundsException  [FE]          AssertionFailedError    [CONTEXT]    double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;    [BUGGY]  for(int  j  =  0;  j  <  cost;  ++j)  {  [BUGGY]    int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	427	427	2	replace	for(int  j  =  0;  j  <  cost;  ++j)  {	  for(int    j    =    0;    j    <    fixedCols;    ++j)    {    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	2	13	replace
20	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]    double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;    [BUGGY]  for(int  j  =  0;  j  <  permutation.length;  ++j)  {  [BUGGY]    int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	427	427	2	add	for(int  j  =  0;  j  <  permutation.length;  ++j)  {	  for(int    j    =    0;    j    <    fixedCols;    ++j)    {    	compilable	  [FE]  AssertionFailedError  	2	2	replace
21	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  permutation.length;  ++j)  {  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]    double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;    [BUGGY]  for(int  j  =  0;  j  <  permutation.length;  ++j)  {  [BUGGY]    int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	427	427	2	replace	for(int  j  =  0;  j  <  permutation.length;  ++j)  {	  for(int    j    =    0;    j    <    fixedCols;    ++j)    {    	compilable	  [FE]  AssertionFailedError  	2	2	replace
22	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  oldX;  ++j)  {  [CE]  bad  operand  types  for  binary  operator  '<'  [FE]              AssertionFailedError    [CONTEXT]    double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;    [BUGGY]  for(int  j  =  0;  j  <  oldX;  ++j)  {  [BUGGY]    int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	427	427	2	replace	for(int  j  =  0;  j  <  oldX;  ++j)  {	  for(int    j    =    0;    j    <    fixedCols;    ++j)    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '<'	2	None	replace
23	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                AssertionFailedError    [CONTEXT]    double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;    [BUGGY]  for(int  j  =  0;  j  <  preRed;  ++j)  {  [BUGGY]    int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	427	427	2	add	for(int  j  =  0;  j  <  preRed;  ++j)  {	  for(int    j    =    0;    j    <    fixedCols;    ++j)    {    	compilable	  [FE]  AssertionFailedError  	2	12	replace
24	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  preRed;  ++j)  {  [FE]  AssertionFailedError  [FE]                AssertionFailedError    [CONTEXT]    double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;    [BUGGY]  for(int  j  =  0;  j  <  preRed;  ++j)  {  [BUGGY]    int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	427	427	2	replace	for(int  j  =  0;  j  <  preRed;  ++j)  {	  for(int    j    =    0;    j    <    fixedCols;    ++j)    {    	compilable	  [FE]  AssertionFailedError  	2	12	replace
25	[BUG]  [BUGGY]  double  solvedCols  =  diag[k]  *  point[k];  xNorm+=  xK  *  oldX[xNorm];  [CE]  class,  interface,  or  enum  expected  [FE]              AssertionFailedError    [CONTEXT]    double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;    [BUGGY]  double  solvedCols  =  diag[k]  *  point[k];  xNorm+=  xK  *  oldX[xNorm];  [BUGGY]    for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	427	427	2	replace	double  solvedCols  =  diag[k]  *  point[k];  xNorm+=  xK  *  oldX[xNorm];	      double    solvedCols    =    diag[k]    *    point[k];    xNorm+=    oldX[xNorm];    	non-compiled	[CE]  class,  interface,  or  enum  expected	11	None	replace
26	[BUG]  [BUGGY]  xNorm+=  oldX[xNorm];  [CE]  class,  interface,  or  enum  expected  [FE]                AssertionFailedError    [CONTEXT]    double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;    [BUGGY]  xNorm+=  oldX[xNorm];  [BUGGY]    for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	427	427	2	replace	xNorm+=  oldX[xNorm];	      double    solvedCols    =    diag[k]    *    point[k];    xNorm+=    oldX[xNorm];    	non-compiled	[CE]  class,  interface,  or  enum  expected	11	None	replace
27	[BUG]  [BUGGY]  double  solvedCols  =  diag[k]  *  point[k];  xNorm+=  xNorm  *  oldX[xNorm];  [CE]  class,  interface,  or  enum  expected  [FE]                  AssertionFailedError    [CONTEXT]    double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;    [BUGGY]  double  solvedCols  =  diag[k]  *  point[k];  xNorm+=  xNorm  *  oldX[xNorm];  [BUGGY]    for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	427	427	2	replace	double  solvedCols  =  diag[k]  *  point[k];  xNorm+=  xNorm  *  oldX[xNorm];	      double    solvedCols    =    diag[k]    *    point[k];    xNorm+=    oldX[xNorm];    	non-compiled	[CE]  class,  interface,  or  enum  expected	11	None	replace
28	[BUG]  [BUGGY]  double  solvedCols  =  permutation[k]  *  xNorm;  xNorm+=  oldX[xNorm];  [CE]  class,  interface,  or  enum  expected  [FE]            AssertionFailedError    [CONTEXT]    double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;    [BUGGY]  double  solvedCols  =  permutation[k]  *  xNorm;  xNorm+=  oldX[xNorm];  [BUGGY]    for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	427	427	2	replace	double  solvedCols  =  permutation[k]  *  xNorm;  xNorm+=  oldX[xNorm];	      double    solvedCols    =    diag[k]    *    permutation[k];    xNorm+=    oldX[xNorm];    	non-compiled	[CE]  class,  interface,  or  enum  expected	10	None	replace
29	[BUG]  [BUGGY]  double  solvedCols  =  permutation[k]  *  diagR[xNorm];  xNorm+=  oldX[xNorm];  [CE]  class,  interface,  or  enum  expected  [FE]              AssertionFailedError    [CONTEXT]    double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;    [BUGGY]  double  solvedCols  =  permutation[k]  *  diagR[xNorm];  xNorm+=  oldX[xNorm];  [BUGGY]    for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	427	427	2	replace	double  solvedCols  =  permutation[k]  *  diagR[xNorm];  xNorm+=  oldX[xNorm];	      double    solvedCols    =    diag[k]    *    permutation[k];    xNorm+=    oldX[xNorm];    	non-compiled	[CE]  class,  interface,  or  enum  expected	10	None	replace
30	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;    [BUGGY]  for(int  j  =  0;  j  <  3;  ++j)  {  [BUGGY]    int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	427	427	2	add	for(int  j  =  0;  j  <  3;  ++j)  {	  for(int    j    =    0;    j    <    2;    ++j)    {    	compilable	  [FE]  AssertionFailedError  	17	10	replace
31	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  3;  ++j)  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;    [BUGGY]  for(int  j  =  0;  j  <  3;  ++j)  {  [BUGGY]    int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	427	427	2	replace	for(int  j  =  0;  j  <  3;  ++j)  {	  for(int    j    =    0;    j    <    2;    ++j)    {    	compilable	  [FE]  AssertionFailedError  	17	10	replace
32	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;    [BUGGY]  for(int  j  =  0;  j  <  1;  ++j)  {  [BUGGY]    int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	427	427	2	add	for(int  j  =  0;  j  <  1;  ++j)  {	  for(int    j    =    0;    j    <    2;    ++j)    {    	compilable	  [FE]  AssertionFailedError  	17	12	replace
33	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  1;  ++j)  {  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;    [BUGGY]  for(int  j  =  0;  j  <  1;  ++j)  {  [BUGGY]    int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	427	427	2	replace	for(int  j  =  0;  j  <  1;  ++j)  {	  for(int    j    =    0;    j    <    2;    ++j)    {    	compilable	  [FE]  AssertionFailedError  	17	12	replace
34	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]        AssertionFailedError    [CONTEXT]    double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;    [BUGGY]  for(int  j  =  0;  j  <  4;  ++j)  {  [BUGGY]    int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	427	427	2	add	for(int  j  =  0;  j  <  4;  ++j)  {	  for(int    j    =    0;    j    <    2;    ++j)    {    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	17	10	replace
35	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  4;  ++j)  {  [FE]  ArrayIndexOutOfBoundsException  [FE]        AssertionFailedError    [CONTEXT]    double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;    [BUGGY]  for(int  j  =  0;  j  <  4;  ++j)  {  [BUGGY]    int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	427	427	2	replace	for(int  j  =  0;  j  <  4;  ++j)  {	  for(int    j    =    0;    j    <    2;    ++j)    {    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	17	10	replace
36	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  diag.length;  ++j)  {  for(int  j  =  0;  j  <  diag.length;  ++j)  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]    double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;    [BUGGY]  for(int  j  =  0;  j  <  diag.length;  ++j)  {  for(int  j  =  0;  j  <  diag.length;  ++j)  {  [BUGGY]    int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	427	427	2	replace	for(int    j    =    0;    j    <    diag.length;    ++j)    {    for(int  j  =  0;  j  <  diag.length;  ++j)  {	  	non-compiled	[CE]  illegal  start  of  expression	12	None	add
37	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  diag.length;  ++j)  {  int  permutation[j]  =  permutation[j];  point[pj]  =  oldX[pj];  [CE]  ']'  expected  [FE]      AssertionFailedError    [CONTEXT]    double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;    [BUGGY]  for(int  j  =  0;  j  <  diag.length;  ++j)  {  int  permutation[j]  =  permutation[j];  point[pj]  =  oldX[pj];  [BUGGY]    int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	427	427	2	replace	for(int    j    =    0;    j    <    diag.length;    ++j)    {    int  permutation[j]  =  permutation[j];  point[pj]  =  oldX[pj];	  	non-compiled	[CE]  ']'  expected	12	None	add
38	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  diag.length;  ++j)  {  int  j  =  0;  j  <  diag.length;  ++j)  {  [CE]  >  expected  [FE]        AssertionFailedError    [CONTEXT]    double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;    [BUGGY]  for(int  j  =  0;  j  <  diag.length;  ++j)  {  int  j  =  0;  j  <  diag.length;  ++j)  {  [BUGGY]    int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	427	427	2	replace	for(int    j    =    0;    j    <    diag.length;    ++j)    {    int  j  =  0;  j  <  diag.length;  ++j)  {	  	non-compiled	[CE]  >  expected	12	None	add
39	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  diag.length;  ++j)  {  For(int  j  =  0;  j  <  diag.length;  ++j)  {  [CE]  '.class'  expected  [FE]          AssertionFailedError    [CONTEXT]    double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;    [BUGGY]  for(int  j  =  0;  j  <  diag.length;  ++j)  {  For(int  j  =  0;  j  <  diag.length;  ++j)  {  [BUGGY]    int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	427	427	2	replace	for(int    j    =    0;    j    <    diag.length;    ++j)    {    For(int  j  =  0;  j  <  diag.length;  ++j)  {	  	non-compiled	[CE]  '.class'  expected	12	None	add
40	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  diag.length;  ++j)  {  int  permutation[j]  =  permutation[j];  [CE]  ']'  expected  [FE]            AssertionFailedError    [CONTEXT]    double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;    [BUGGY]  for(int  j  =  0;  j  <  diag.length;  ++j)  {  int  permutation[j]  =  permutation[j];  [BUGGY]    int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	427	427	2	replace	for(int    j    =    0;    j    <    diag.length;    ++j)    {    int  permutation[j]  =  permutation[j];	  	non-compiled	[CE]  ']'  expected	12	None	add
41	[BUG]  [BUGGY]  int  permutation[j]  =  permutation[j];  [CE]  ']'  expected  [FE]            AssertionFailedError    [CONTEXT]    double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;    [BUGGY]  int  permutation[j]  =  permutation[j];  [BUGGY]    int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	427	427	2	replace	int  permutation[j]  =  permutation[j];	      	non-compiled	[CE]  ']'  expected	3	None	replace
42	[BUG]  [BUGGY]  int  permutation[j]  =  previousCost;  [CE]  ']'  expected  [FE]              AssertionFailedError    [CONTEXT]    double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;    [BUGGY]  int  permutation[j]  =  previousCost;  [BUGGY]    int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	427	427	2	replace	int  permutation[j]  =  previousCost;	      	non-compiled	[CE]  ']'  expected	3	None	replace
43	[BUG]  [BUGGY]  int  permutation[j]  =  Math.min(permutation[j],  previousCost);  [CE]  ']'  expected  [FE]                AssertionFailedError    [CONTEXT]    double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;    [BUGGY]  int  permutation[j]  =  Math.min(permutation[j],  previousCost);  [BUGGY]    int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	427	427	2	replace	int  permutation[j]  =  Math.min(permutation[j],  previousCost);	      	non-compiled	[CE]  ']'  expected	3	None	replace
44	[BUG]  [BUGGY]  int  permutation[j]  =  Math.min(permutation[j],  preRed);  [CE]  ']'  expected  [FE]                  AssertionFailedError    [CONTEXT]    double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;    [BUGGY]  int  permutation[j]  =  Math.min(permutation[j],  preRed);  [BUGGY]    int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	427	427	2	replace	int  permutation[j]  =  Math.min(permutation[j],  preRed);	      	non-compiled	[CE]  ']'  expected	3	None	replace
45	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;    [BUGGY]  for(int  j  =  0;  j  <  oldX.length;  ++j)  {  [BUGGY]    int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	427	427	2	add	for(int  j  =  0;  j  <  oldX.length;  ++j)  {	  for(int    j    =    0;    j    <    diag.length;    ++j)    {    	compilable	  [FE]  AssertionFailedError  	13	2	replace
46	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  oldX.length;  ++j)  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;    [BUGGY]  for(int  j  =  0;  j  <  oldX.length;  ++j)  {  [BUGGY]    int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	427	427	2	replace	for(int  j  =  0;  j  <  oldX.length;  ++j)  {	  for(int    j    =    0;    j    <    diag.length;    ++j)    {    	compilable	  [FE]  AssertionFailedError  	13	2	replace
47	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;    [BUGGY]  for(int  j  =  0;  j  <  point.length;  ++j)  {  [BUGGY]    int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	427	427	2	add	for(int  j  =  0;  j  <  point.length;  ++j)  {	  for(int    j    =    0;    j    <    diag.length;    ++j)    {    	compilable	  [FE]  AssertionFailedError  	13	2	replace
48	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  point.length;  ++j)  {  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;    [BUGGY]  for(int  j  =  0;  j  <  point.length;  ++j)  {  [BUGGY]    int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	427	427	2	replace	for(int  j  =  0;  j  <  point.length;  ++j)  {	  for(int    j    =    0;    j    <    diag.length;    ++j)    {    	compilable	  [FE]  AssertionFailedError  	13	2	replace
49	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]    double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;    [BUGGY]  for(int  j  =  1;  j  <  diag.length;  ++j)  {  [BUGGY]    int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	427	427	2	add	for(int  j  =  1;  j  <  diag.length;  ++j)  {	  for(int    j    =    0;    j    <    diag.length;    ++j)    {    	compilable	  [FE]  AssertionFailedError  	13	12	replace
50	[BUG]  [BUGGY]  for(int  j  =  1;  j  <  diag.length;  ++j)  {  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]    double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;    [BUGGY]  for(int  j  =  1;  j  <  diag.length;  ++j)  {  [BUGGY]    int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	427	427	2	replace	for(int  j  =  1;  j  <  diag.length;  ++j)  {	  for(int    j    =    0;    j    <    diag.length;    ++j)    {    	compilable	  [FE]  AssertionFailedError  	13	12	replace
51	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  fixedCols.length;  ++j)  {  [CE]  cannot  find  symbol  fixedCols  [FE]        AssertionFailedError    [CONTEXT]    double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;    [BUGGY]  for(int  j  =  0;  j  <  fixedCols.length;  ++j)  {  [BUGGY]    int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	427	427	2	replace	for(int  j  =  0;  j  <  fixedCols.length;  ++j)  {	  for(int    j    =    0;    j    <    solvedCols.length;    ++j)    {    	non-compiled	[CE]  cannot  find  symbol  fixedCols	1	None	replace
52	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  resolvedCols.length;  ++j)  {  [CE]  cannot  find  symbol  resolvedCols  [FE]          AssertionFailedError    [CONTEXT]    double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;    [BUGGY]  for(int  j  =  0;  j  <  resolvedCols.length;  ++j)  {  [BUGGY]    int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	427	427	2	replace	for(int  j  =  0;  j  <  resolvedCols.length;  ++j)  {	  for(int    j    =    0;    j    <    solvedCols.length;    ++j)    {    	non-compiled	[CE]  cannot  find  symbol  resolvedCols	1	None	replace
53	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  2;  ++j)  {  for(int  j  =  0;  j  <  2;  ++j)  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]    double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;    [BUGGY]  for(int  j  =  0;  j  <  2;  ++j)  {  for(int  j  =  0;  j  <  2;  ++j)  {  [BUGGY]    int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	427	427	2	replace	for(int    j    =    0;    j    <    2;    ++j)    {    for(int  j  =  0;  j  <  2;  ++j)  {	  	non-compiled	[CE]  illegal  start  of  expression	16	None	add
54	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  2;  ++j)  {  int  permutation[j]  =  permutation[j];  point[pj]  =  oldX[pj];  [CE]  ']'  expected  [FE]      AssertionFailedError    [CONTEXT]    double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;    [BUGGY]  for(int  j  =  0;  j  <  2;  ++j)  {  int  permutation[j]  =  permutation[j];  point[pj]  =  oldX[pj];  [BUGGY]    int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	427	427	2	replace	for(int    j    =    0;    j    <    2;    ++j)    {    int  permutation[j]  =  permutation[j];  point[pj]  =  oldX[pj];	  	non-compiled	[CE]  ']'  expected	16	None	add
55	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  2;  ++j)  {  int  j  =  0;  j  <  2;  ++j)  {  [CE]  illegal  start  of  type  [FE]        AssertionFailedError    [CONTEXT]    double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;    [BUGGY]  for(int  j  =  0;  j  <  2;  ++j)  {  int  j  =  0;  j  <  2;  ++j)  {  [BUGGY]    int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	427	427	2	replace	for(int    j    =    0;    j    <    2;    ++j)    {    int  j  =  0;  j  <  2;  ++j)  {	  	non-compiled	[CE]  illegal  start  of  type	16	None	add
56	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  2;  ++j)  {  int  permutation[j]  =  permutation[j];  point[pj]  =  oldX[permutation[j];  [CE]  ']'  expected  [FE]          AssertionFailedError    [CONTEXT]    double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;    [BUGGY]  for(int  j  =  0;  j  <  2;  ++j)  {  int  permutation[j]  =  permutation[j];  point[pj]  =  oldX[permutation[j];  [BUGGY]    int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	427	427	2	replace	for(int    j    =    0;    j    <    2;    ++j)    {    int  permutation[j]  =  permutation[j];  point[pj]  =  oldX[permutation[j];	  	non-compiled	[CE]  ']'  expected	16	None	add
57	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  2;  ++j)  {  int  permutation[j]  =  permutation[j];  [CE]  ']'  expected  [FE]            AssertionFailedError    [CONTEXT]    double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;    [BUGGY]  for(int  j  =  0;  j  <  2;  ++j)  {  int  permutation[j]  =  permutation[j];  [BUGGY]    int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	427	427	2	replace	for(int    j    =    0;    j    <    2;    ++j)    {    int  permutation[j]  =  permutation[j];	  	non-compiled	[CE]  ']'  expected	16	None	add
58	[BUG]  [BUGGY]  double  xK  =  permutation[k]  *  point[k];  xNorm+=  Math.sqrt(value);  [CE]  class,  interface,  or  enum  expected  [FE]            AssertionFailedError    [CONTEXT]    double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;    [BUGGY]  double  xK  =  permutation[k]  *  point[k];  xNorm+=  Math.sqrt(value);  [BUGGY]    for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	427	427	2	replace	double  xK  =  permutation[k]  *  point[k];  xNorm+=  Math.sqrt(value);	      double    xK    =    permutation[k]    *    point[k];    xNorm+=    Math.sqrt(xK);    	non-compiled	[CE]  class,  interface,  or  enum  expected	6	None	replace
59	[BUG]  [BUGGY]  double  xK  =  permutation[k]  *  point[k];  xNorm+=  Math.sqrt(test(xK));  [CE]  class,  interface,  or  enum  expected  [FE]              AssertionFailedError    [CONTEXT]    double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;    [BUGGY]  double  xK  =  permutation[k]  *  point[k];  xNorm+=  Math.sqrt(test(xK));  [BUGGY]    for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	427	427	2	replace	double  xK  =  permutation[k]  *  point[k];  xNorm+=  Math.sqrt(test(xK));	      double    xK    =    permutation[k]    *    point[k];    xNorm+=    Math.sqrt(xK);    	non-compiled	[CE]  class,  interface,  or  enum  expected	6	None	replace
60	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  solveCols.length;  ++j)  {  [CE]  cannot  find  symbol  solveCols  [FE]        AssertionFailedError    [CONTEXT]    double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;    [BUGGY]  for(int  j  =  0;  j  <  solveCols.length;  ++j)  {  [BUGGY]    int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	427	427	2	replace	for(int  j  =  0;  j  <  solveCols.length;  ++j)  {	  for(int    j    =    0;    j    <    solvedCols.length;    ++j)    {    	non-compiled	[CE]  cannot  find  symbol  solveCols	1	None	replace
61	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  diag.length;  ++j)  {  int  diag  =  0;  j  <  diag.length;  ++j)  {  [CE]  >  expected  [FE]    AssertionFailedError    [CONTEXT]    double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;    [BUGGY]  for(int  j  =  0;  j  <  diag.length;  ++j)  {  int  diag  =  0;  j  <  diag.length;  ++j)  {  [BUGGY]    int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	427	427	2	replace	for(int    j    =    0;    j    <    diag.length;    ++j)    {    int  diag  =  0;  j  <  diag.length;  ++j)  {	  	non-compiled	[CE]  >  expected	12	None	add
62	[BUG]  [BUGGY]  double[]  solvedCols  =  diag[k]  *  costRelativeTolerance  +  1;  [CE]  class,  interface,  or  enum  expected  [FE]          AssertionFailedError    [CONTEXT]    double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;    [BUGGY]  double[]  solvedCols  =  diag[k]  *  costRelativeTolerance  +  1;  [BUGGY]    for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	427	427	2	replace	double[]  solvedCols  =  diag[k]  *  costRelativeTolerance  +  1;	      double[]    solvedCols    =    diag[k]    *    costRelativeTolerance;    	non-compiled	[CE]  class,  interface,  or  enum  expected	15	None	replace
63	[BUG]  [BUGGY]  double  xNorm  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  [CE]  class,  interface,  or  enum  expected  [FE]          AssertionFailedError    [CONTEXT]    double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;    [BUGGY]  double  xNorm  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  [BUGGY]    for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	427	427	2	replace	double  xNorm  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;	      double    solvedCols    =    diag[k]    *    point[k];    xNorm+=    xK    *    xK;    	non-compiled	[CE]  class,  interface,  or  enum  expected	9	None	replace
64	[BUG]  [BUGGY]  double  solvedCols  =  diag[k]  *  point[k];  xNorm+=  xW  *  xK;  [CE]  class,  interface,  or  enum  expected  [FE]            AssertionFailedError    [CONTEXT]    double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;    [BUGGY]  double  solvedCols  =  diag[k]  *  point[k];  xNorm+=  xW  *  xK;  [BUGGY]    for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	427	427	2	replace	double  solvedCols  =  diag[k]  *  point[k];  xNorm+=  xW  *  xK;	      double    solvedCols    =    diag[k]    *    point[k];    xNorm+=    xK    *    xK;    	non-compiled	[CE]  class,  interface,  or  enum  expected	9	None	replace
65	[BUG]  [BUGGY]  xK  =  permutation[k]  *  point[k];  xNorm+=  xK  *  xNorm;  [CE]  class,  interface,  or  enum  expected  [FE]          AssertionFailedError    [CONTEXT]    double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;    [BUGGY]  xK  =  permutation[k]  *  point[k];  xNorm+=  xK  *  xNorm;  [BUGGY]    for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	427	427	2	replace	xK  =  permutation[k]  *  point[k];  xNorm+=  xK  *  xNorm;	      double    xK    =    permutation[k]    *    point[k];    xNorm+=    xK    *    xNorm;    	non-compiled	[CE]  class,  interface,  or  enum  expected	5	None	replace
66	[BUG]  [BUGGY]  double  xK  =  permutation[k]  *  point[k];  xNorm+=  diag[xK  *  xNorm;  [CE]  ']'  expected  [FE]            AssertionFailedError    [CONTEXT]    double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;    [BUGGY]  double  xK  =  permutation[k]  *  point[k];  xNorm+=  diag[xK  *  xNorm;  [BUGGY]    for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	427	427	2	replace	double  xK  =  permutation[k]  *  point[k];  xNorm+=  diag[xK  *  xNorm;	      double    xK    =    permutation[k]    *    point[k];    xNorm+=    xK    *    xNorm;    	non-compiled	[CE]  ']'  expected	5	None	replace
67	[BUG]  [BUGGY]  double  xK  =  permutation[k]  *  point[k];  xNorm+=  diag[xK  *  xK;  [CE]  ']'  expected  [FE]        AssertionFailedError    [CONTEXT]    double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;    [BUGGY]  double  xK  =  permutation[k]  *  point[k];  xNorm+=  diag[xK  *  xK;  [BUGGY]    for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	427	427	2	replace	double  xK  =  permutation[k]  *  point[k];  xNorm+=  diag[xK  *  xK;	      double    xK    =    permutation[k]    *    point[k];    xNorm+=    xK    *    xK;    	non-compiled	[CE]  ']'  expected	4	None	replace
68	[BUG]  [BUGGY]  xK  =  permutation[k]  *  point[k];  xNorm+=  xK  *  xK;  [CE]  class,  interface,  or  enum  expected  [FE]          AssertionFailedError    [CONTEXT]    double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;    [BUGGY]  xK  =  permutation[k]  *  point[k];  xNorm+=  xK  *  xK;  [BUGGY]    for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	427	427	2	replace	xK  =  permutation[k]  *  point[k];  xNorm+=  xK  *  xK;	      double    xK    =    permutation[k]    *    point[k];    xNorm+=    xK    *    xK;    	non-compiled	[CE]  class,  interface,  or  enum  expected	4	None	replace
69	[BUG]  [BUGGY]  xNorm+=  permutation[k]  *  point[k];  [CE]  class,  interface,  or  enum  expected  [FE]            AssertionFailedError    [CONTEXT]    double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;    [BUGGY]  xNorm+=  permutation[k]  *  point[k];  [BUGGY]    for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	427	427	2	replace	xNorm+=  permutation[k]  *  point[k];	      double    xK    =    permutation[k]    *    point[k];    xNorm+=    xK    *    xK;    	non-compiled	[CE]  class,  interface,  or  enum  expected	4	None	replace
70	[BUG]  [BUGGY]  double  solvedCols  =  diag[k]  *  point[k];  xNorm+=  oldX[0];  [CE]  class,  interface,  or  enum  expected  [FE]              AssertionFailedError    [CONTEXT]    double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;    [BUGGY]  double  solvedCols  =  diag[k]  *  point[k];  xNorm+=  oldX[0];  [BUGGY]    for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	427	427	2	replace	double  solvedCols  =  diag[k]  *  point[k];  xNorm+=  oldX[0];	      double    solvedCols    =    diag[k]    *    point[k];    xNorm+=    oldX[xNorm];    	non-compiled	[CE]  class,  interface,  or  enum  expected	11	None	replace
71	[BUG]  [BUGGY]  double  solvedCols  =  diag[k]  *  point[k];  xNorm+=  oldX[1];  [CE]  class,  interface,  or  enum  expected  [FE]                AssertionFailedError    [CONTEXT]    double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;    [BUGGY]  double  solvedCols  =  diag[k]  *  point[k];  xNorm+=  oldX[1];  [BUGGY]    for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	427	427	2	replace	double  solvedCols  =  diag[k]  *  point[k];  xNorm+=  oldX[1];	      double    solvedCols    =    diag[k]    *    point[k];    xNorm+=    oldX[xNorm];    	non-compiled	[CE]  class,  interface,  or  enum  expected	11	None	replace
72	[BUG]  [BUGGY]  double  solvedCols  =  diag[k]  *  point[k];  xNorm+=  oldX[i];  [CE]  class,  interface,  or  enum  expected  [FE]                  AssertionFailedError    [CONTEXT]    double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;    [BUGGY]  double  solvedCols  =  diag[k]  *  point[k];  xNorm+=  oldX[i];  [BUGGY]    for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	427	427	2	replace	double  solvedCols  =  diag[k]  *  point[k];  xNorm+=  oldX[i];	      double    solvedCols    =    diag[k]    *    point[k];    xNorm+=    oldX[xNorm];    	non-compiled	[CE]  class,  interface,  or  enum  expected	11	None	replace
73	[BUG]  [BUGGY]  double  solvedCols  =  oldX[k]  *  point[k];  xNorm+=  oldX[xNorm];  [CE]  class,  interface,  or  enum  expected  [FE]                    AssertionFailedError    [CONTEXT]    double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;    [BUGGY]  double  solvedCols  =  oldX[k]  *  point[k];  xNorm+=  oldX[xNorm];  [BUGGY]    for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	427	427	2	replace	double  solvedCols  =  oldX[k]  *  point[k];  xNorm+=  oldX[xNorm];	      double    solvedCols    =    diag[k]    *    point[k];    xNorm+=    oldX[xNorm];    	non-compiled	[CE]  class,  interface,  or  enum  expected	11	None	replace
74	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  2;  ++j)  {  For(int  j  =  0;  j  <  2;  ++j)  {  [CE]  '.class'  expected  [FE]    AssertionFailedError    [CONTEXT]    double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;    [BUGGY]  for(int  j  =  0;  j  <  2;  ++j)  {  For(int  j  =  0;  j  <  2;  ++j)  {  [BUGGY]    int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	427	427	2	replace	for(int    j    =    0;    j    <    2;    ++j)    {    For(int  j  =  0;  j  <  2;  ++j)  {	  	non-compiled	[CE]  '.class'  expected	16	None	add
75	[BUG]  [BUGGY]  double  solveCols  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  [CE]  class,  interface,  or  enum  expected  [FE]        AssertionFailedError    [CONTEXT]    double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;    [BUGGY]  double  solveCols  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  [BUGGY]    for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	427	427	2	replace	double  solveCols  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;	      double    solvedCols    =    diag[k]    *    oldX[k];    xNorm+=    xK    *    xK;    	non-compiled	[CE]  class,  interface,  or  enum  expected	8	None	replace
76	[BUG]  [BUGGY]  xK  =  permutation[k]  *  point[k];  xNorm+=  xK  *  tmpVec;  [CE]  class,  interface,  or  enum  expected  [FE]        AssertionFailedError    [CONTEXT]    double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;    [BUGGY]  xK  =  permutation[k]  *  point[k];  xNorm+=  xK  *  tmpVec;  [BUGGY]    for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	427	427	2	replace	xK  =  permutation[k]  *  point[k];  xNorm+=  xK  *  tmpVec;	      double    xK    =    permutation[k]    *    point[k];    xNorm+=    xK    *    tmpVec;    	non-compiled	[CE]  class,  interface,  or  enum  expected	14	None	replace
77	[BUG]  [BUGGY]  double  xK  =  permutation[0]  *  point[0];  xNorm+=  xK  *  tmpVec;  [CE]  class,  interface,  or  enum  expected  [FE]          AssertionFailedError    [CONTEXT]    double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;    [BUGGY]  double  xK  =  permutation[0]  *  point[0];  xNorm+=  xK  *  tmpVec;  [BUGGY]    for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	427	427	2	replace	double  xK  =  permutation[0]  *  point[0];  xNorm+=  xK  *  tmpVec;	      double    xK    =    permutation[k]    *    point[k];    xNorm+=    xK    *    tmpVec;    	non-compiled	[CE]  class,  interface,  or  enum  expected	14	None	replace
78	[BUG]  [BUGGY]  double  xK  =  permutation[k]  *  point[k];  xNorm+=  xK  *  tmpVec  +  1;  [CE]  class,  interface,  or  enum  expected  [FE]            AssertionFailedError    [CONTEXT]    double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;    [BUGGY]  double  xK  =  permutation[k]  *  point[k];  xNorm+=  xK  *  tmpVec  +  1;  [BUGGY]    for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	427	427	2	replace	double  xK  =  permutation[k]  *  point[k];  xNorm+=  xK  *  tmpVec  +  1;	      double    xK    =    permutation[k]    *    point[k];    xNorm+=    xK    *    tmpVec;    	non-compiled	[CE]  class,  interface,  or  enum  expected	14	None	replace
79	[BUG]  [BUGGY]  int  permutation  =  permutation[j];  [CE]  class,  interface,  or  enum  expected  [FE]            AssertionFailedError    [CONTEXT]    double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;    [BUGGY]  int  permutation  =  permutation[j];  [BUGGY]    int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	427	427	2	replace	int  permutation  =  permutation[j];	      	non-compiled	[CE]  class,  interface,  or  enum  expected	3	None	replace
80	[BUG]  [BUGGY]  int  j  =  permutation[j];  [CE]  class,  interface,  or  enum  expected  [FE]              AssertionFailedError    [CONTEXT]    double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;    [BUGGY]  int  j  =  permutation[j];  [BUGGY]    int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	427	427	2	replace	int  j  =  permutation[j];	      	non-compiled	[CE]  class,  interface,  or  enum  expected	3	None	replace
81	[BUG]  [BUGGY]  int  permutation  =  permutation[0];  [CE]  class,  interface,  or  enum  expected  [FE]                AssertionFailedError    [CONTEXT]    double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;    [BUGGY]  int  permutation  =  permutation[0];  [BUGGY]    int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	427	427	2	replace	int  permutation  =  permutation[0];	      	non-compiled	[CE]  class,  interface,  or  enum  expected	3	None	replace
82	[BUG]  [BUGGY]  xK  =  permutation[k]  *  point[k];  xNorm+=  xK  *  oldX;  [CE]  class,  interface,  or  enum  expected  [FE]              AssertionFailedError    [CONTEXT]    double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;    [BUGGY]  xK  =  permutation[k]  *  point[k];  xNorm+=  xK  *  oldX;  [BUGGY]    for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	427	427	2	replace	xK  =  permutation[k]  *  point[k];  xNorm+=  xK  *  oldX;	      double    xK    =    permutation[k]    *    point[k];    xNorm+=    xK    *    oldX;    	non-compiled	[CE]  class,  interface,  or  enum  expected	7	None	replace
83	[BUG]  [BUGGY]  double  xK  =  permutation[k]  *  point[k];  xNorm+=  xK  *  oldY;  [CE]  class,  interface,  or  enum  expected  [FE]                AssertionFailedError    [CONTEXT]    double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;    [BUGGY]  double  xK  =  permutation[k]  *  point[k];  xNorm+=  xK  *  oldY;  [BUGGY]    for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	427	427	2	replace	double  xK  =  permutation[k]  *  point[k];  xNorm+=  xK  *  oldY;	      double    xK    =    permutation[k]    *    point[k];    xNorm+=    xK    *    oldX;    	non-compiled	[CE]  class,  interface,  or  enum  expected	7	None	replace
84	[BUG]  [BUGGY]  double  solveCols  =  diag[k]  *  point[k];  xNorm+=  oldX[xNorm];  [CE]  class,  interface,  or  enum  expected  [FE]            AssertionFailedError    [CONTEXT]    double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;    [BUGGY]  double  solveCols  =  diag[k]  *  point[k];  xNorm+=  oldX[xNorm];  [BUGGY]    for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	427	427	2	replace	double  solveCols  =  diag[k]  *  point[k];  xNorm+=  oldX[xNorm];	      double    solvedCols    =    diag[k]    *    permutation[k];    xNorm+=    oldX[xNorm];    	non-compiled	[CE]  class,  interface,  or  enum  expected	10	None	replace
85	[BUG]  [BUGGY]  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  [CE]  class,  interface,  or  enum  expected  [FE]        AssertionFailedError    [CONTEXT]    double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;    [BUGGY]  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  [BUGGY]    for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	427	427	2	replace	double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;	      double    solvedCols    =    diag[k]    *    oldX[k];    xNorm+=    xK    *    xK;    	non-compiled	[CE]  class,  interface,  or  enum  expected	8	None	replace
86	[BUG]  [BUGGY]  double  xK  =  permutation[k]  *  point[k];  xNorm+=  tmp  *  xK;  [CE]  class,  interface,  or  enum  expected  [FE]        AssertionFailedError    [CONTEXT]    double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;    [BUGGY]  double  xK  =  permutation[k]  *  point[k];  xNorm+=  tmp  *  xK;  [BUGGY]    for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	427	427	2	replace	double  xK  =  permutation[k]  *  point[k];  xNorm+=  tmp  *  xK;	      double    xK    =    permutation[k]    *    point[k];    xNorm+=    xK    *    xK;    	non-compiled	[CE]  class,  interface,  or  enum  expected	4	None	replace
87	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  diag.length;  ++j)  {  Integer  j  =  0;  j  <  diag.length;  ++j)  {  [CE]  >  expected  [FE]    AssertionFailedError    [CONTEXT]    double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;    [BUGGY]  for(int  j  =  0;  j  <  diag.length;  ++j)  {  Integer  j  =  0;  j  <  diag.length;  ++j)  {  [BUGGY]    int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	427	427	2	replace	for(int    j    =    0;    j    <    diag.length;    ++j)    {    Integer  j  =  0;  j  <  diag.length;  ++j)  {	  	non-compiled	[CE]  >  expected	12	None	add
88	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  diag.length;  ++j)  {  for(int  j  =  0;  j  <  diag.length);  ++j)  {  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]    double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;    [BUGGY]  for(int  j  =  0;  j  <  diag.length;  ++j)  {  for(int  j  =  0;  j  <  diag.length);  ++j)  {  [BUGGY]    int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	427	427	2	replace	for(int    j    =    0;    j    <    diag.length;    ++j)    {    for(int  j  =  0;  j  <  diag.length);  ++j)  {	  	non-compiled	[CE]  ';'  expected	12	None	add
89	[BUG]  [BUGGY]  double  xNorm  =  diag[k]  *  point[k];  xNorm+=  oldX[xNorm];  [CE]  class,  interface,  or  enum  expected  [FE]              AssertionFailedError    [CONTEXT]    double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;    [BUGGY]  double  xNorm  =  diag[k]  *  point[k];  xNorm+=  oldX[xNorm];  [BUGGY]    for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	427	427	2	replace	double  xNorm  =  diag[k]  *  point[k];  xNorm+=  oldX[xNorm];	      double    solvedCols    =    diag[k]    *    point[k];    xNorm+=    oldX[xNorm];    	non-compiled	[CE]  class,  interface,  or  enum  expected	11	None	replace
90	[BUG]  [BUGGY]  double  xCols  =  diag[k]  *  point[k];  xNorm+=  oldX[xNorm];  [CE]  class,  interface,  or  enum  expected  [FE]                AssertionFailedError    [CONTEXT]    double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;    [BUGGY]  double  xCols  =  diag[k]  *  point[k];  xNorm+=  oldX[xNorm];  [BUGGY]    for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	427	427	2	replace	double  xCols  =  diag[k]  *  point[k];  xNorm+=  oldX[xNorm];	      double    solvedCols    =    diag[k]    *    point[k];    xNorm+=    oldX[xNorm];    	non-compiled	[CE]  class,  interface,  or  enum  expected	11	None	replace
91	[BUG]  [BUGGY]  double  xK  =  permutation[k]  *  point[k];  xNorm+=  Math.sqrt(diag[k]);  [CE]  class,  interface,  or  enum  expected  [FE]            AssertionFailedError    [CONTEXT]    double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;    [BUGGY]  double  xK  =  permutation[k]  *  point[k];  xNorm+=  Math.sqrt(diag[k]);  [BUGGY]    for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	427	427	2	replace	double  xK  =  permutation[k]  *  point[k];  xNorm+=  Math.sqrt(diag[k]);	      double    xK    =    permutation[k]    *    point[k];    xNorm+=    Math.sqrt(xK);    	non-compiled	[CE]  class,  interface,  or  enum  expected	6	None	replace
92	[BUG]  [BUGGY]  xK  =  permutation[k]  *  point[k];  xNorm+=  Math.sqrt(cost);  [CE]  class,  interface,  or  enum  expected  [FE]              AssertionFailedError    [CONTEXT]    double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;    [BUGGY]  xK  =  permutation[k]  *  point[k];  xNorm+=  Math.sqrt(cost);  [BUGGY]    for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	427	427	2	replace	xK  =  permutation[k]  *  point[k];  xNorm+=  Math.sqrt(cost);	      double    xK    =    permutation[k]    *    point[k];    xNorm+=    Math.sqrt(xK);    	non-compiled	[CE]  class,  interface,  or  enum  expected	6	None	replace
93	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  cost.length;  ++j)  {  [CE]  double  cannot  be  dereferenced  [FE]    AssertionFailedError    [CONTEXT]    double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;    [BUGGY]  for(int  j  =  0;  j  <  cost.length;  ++j)  {  [BUGGY]    int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	427	427	2	replace	for(int  j  =  0;  j  <  cost.length;  ++j)  {	  for(int    j    =    0;    j    <    diag.length;    ++j)    {    	non-compiled	[CE]  double  cannot  be  dereferenced	13	None	replace
94	[BUG]  [BUGGY]  double[]  solvedCols  =  diag[k]  *  coeff1;  [CE]  class,  interface,  or  enum  expected  [FE]          AssertionFailedError    [CONTEXT]    double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;    [BUGGY]  double[]  solvedCols  =  diag[k]  *  coeff1;  [BUGGY]    for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	427	427	2	replace	double[]  solvedCols  =  diag[k]  *  coeff1;	      double[]    solvedCols    =    diag[k]    *    costRelativeTolerance;    	non-compiled	[CE]  class,  interface,  or  enum  expected	15	None	replace
95	[BUG]  [BUGGY]  double  xNorm  =  diag[k]  *  permutation[k];  xNorm+=  oldX[xNorm];  [CE]  class,  interface,  or  enum  expected  [FE]            AssertionFailedError    [CONTEXT]    double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;    [BUGGY]  double  xNorm  =  diag[k]  *  permutation[k];  xNorm+=  oldX[xNorm];  [BUGGY]    for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	427	427	2	replace	double  xNorm  =  diag[k]  *  permutation[k];  xNorm+=  oldX[xNorm];	      double    solvedCols    =    diag[k]    *    permutation[k];    xNorm+=    oldX[xNorm];    	non-compiled	[CE]  class,  interface,  or  enum  expected	10	None	replace
96	[BUG]  [BUGGY]  int  oldX  =  diag[k]  *  point[k];  [CE]  class,  interface,  or  enum  expected  [FE]            AssertionFailedError    [CONTEXT]    double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;    [BUGGY]  int  oldX  =  diag[k]  *  point[k];  [BUGGY]    int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	427	427	2	replace	int  oldX  =  diag[k]  *  point[k];	      	non-compiled	[CE]  class,  interface,  or  enum  expected	3	None	replace
97	[BUG]  [BUGGY]  int  permutation  =  permutation[i];  [CE]  class,  interface,  or  enum  expected  [FE]              AssertionFailedError    [CONTEXT]    double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;    [BUGGY]  int  permutation  =  permutation[i];  [BUGGY]    int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	427	427	2	replace	int  permutation  =  permutation[i];	      	non-compiled	[CE]  class,  interface,  or  enum  expected	3	None	replace
98	[BUG]  [BUGGY]  double  xK  =  point[k]  *  point[k];  xNorm+=  xK  *  xNorm;  [CE]  class,  interface,  or  enum  expected  [FE]          AssertionFailedError    [CONTEXT]    double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;    [BUGGY]  double  xK  =  point[k]  *  point[k];  xNorm+=  xK  *  xNorm;  [BUGGY]    for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	427	427	2	replace	double  xK  =  point[k]  *  point[k];  xNorm+=  xK  *  xNorm;	      double    xK    =    permutation[k]    *    point[k];    xNorm+=    xK    *    xNorm;    	non-compiled	[CE]  class,  interface,  or  enum  expected	5	None	replace
99	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  2;  ++j)  {  double  j  =  0;  j  <  2;  ++j)  {  [CE]  illegal  start  of  type  [FE]    AssertionFailedError    [CONTEXT]    double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;    [BUGGY]  for(int  j  =  0;  j  <  2;  ++j)  {  double  j  =  0;  j  <  2;  ++j)  {  [BUGGY]    int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	427	427	2	replace	for(int    j    =    0;    j    <    2;    ++j)    {    double  j  =  0;  j  <  2;  ++j)  {	  	non-compiled	[CE]  illegal  start  of  type	16	None	add
100	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  2;  ++j)  {  for(int  j  =  0;  j  <  2)  {  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]    double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;    [BUGGY]  for(int  j  =  0;  j  <  2;  ++j)  {  for(int  j  =  0;  j  <  2)  {  [BUGGY]    int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	427	427	2	replace	for(int    j    =    0;    j    <    2;    ++j)    {    for(int  j  =  0;  j  <  2)  {	  	non-compiled	[CE]  ';'  expected	16	None	add
