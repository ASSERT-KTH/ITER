bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  xK  =  permutation[k]  *  point[k];  xNorm+=  xK  *  xNorm  +  1;  [CE]  class,  interface,  or  enum  expected  [FE]              AssertionFailedError      [CONTEXT]      double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;      [BUGGY]  xK  =  permutation[k]  *  point[k];  xNorm+=  xK  *  xNorm  +  1;  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	427	427	2	replace	xK  =  permutation[k]  *  point[k];  xNorm+=  xK  *  xNorm  +  1;	  xK    =    permutation[k]    *    point[k];    xNorm+=    xK    *    xNorm;    	non-compiled	[CE]  class,  interface,  or  enum  expected	65	None	replace
2	[BUG]  [BUGGY]  xK  =  point[k]  *  permutation[k];  xNorm+=  xK  *  xNorm;  [CE]  class,  interface,  or  enum  expected  [FE]                AssertionFailedError      [CONTEXT]      double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;      [BUGGY]  xK  =  point[k]  *  permutation[k];  xNorm+=  xK  *  xNorm;  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	427	427	2	replace	xK  =  point[k]  *  permutation[k];  xNorm+=  xK  *  xNorm;	  xK    =    permutation[k]    *    point[k];    xNorm+=    xK    *    xNorm;    	non-compiled	[CE]  class,  interface,  or  enum  expected	65	None	replace
3	[BUG]  [BUGGY]  For(int  j  =  0;  j  <  permutation.length;  ++j)  {  [CE]  '.class'  expected  [FE]              AssertionFailedError      [CONTEXT]      double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;      [BUGGY]  For(int  j  =  0;  j  <  permutation.length;  ++j)  {  [BUGGY]      int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	427	427	2	replace	For(int  j  =  0;  j  <  permutation.length;  ++j)  {	  for(int    j    =    0;    j    <    resolvedCols.length;    ++j)    {    	non-compiled	[CE]  '.class'  expected	52	None	replace
4	[BUG]  [BUGGY]  int  permutation  =  permutation[i]  -  1;  [CE]  class,  interface,  or  enum  expected  [FE]                  AssertionFailedError      [CONTEXT]      double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;      [BUGGY]  int  permutation  =  permutation[i]  -  1;  [BUGGY]      int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	427	427	2	replace	int  permutation  =  permutation[i]  -  1;	  int    permutation    =    permutation[i];    	non-compiled	[CE]  class,  interface,  or  enum  expected	97	None	replace
5	[BUG]  [BUGGY]  int  permutation  =  permutation[i]  &  0xff;  [CE]  class,  interface,  or  enum  expected  [FE]                    AssertionFailedError      [CONTEXT]      double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;      [BUGGY]  int  permutation  =  permutation[i]  &  0xff;  [BUGGY]      int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	427	427	2	replace	int  permutation  =  permutation[i]  &  0xff;	  int    permutation    =    permutation[i];    	non-compiled	[CE]  class,  interface,  or  enum  expected	97	None	replace
6	[BUG]  [BUGGY]  int  permutation  =  permutation[i]  +  1;  [CE]  class,  interface,  or  enum  expected  [FE]                      AssertionFailedError      [CONTEXT]      double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;      [BUGGY]  int  permutation  =  permutation[i]  +  1;  [BUGGY]      int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	427	427	2	replace	int  permutation  =  permutation[i]  +  1;	  int    permutation    =    permutation[i];    	non-compiled	[CE]  class,  interface,  or  enum  expected	97	None	replace
7	[BUG]  [BUGGY]  int  j  =  0;  j  <  2;  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;      [BUGGY]  int  j  =  0;  j  <  2;  [BUGGY]      int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	427	427	2	replace	int  j  =  0;  j  <  2;	  for(int    j    =    0;    j    <    2;    ++j)    {    int    j    =    0;    j    <    2;    ++j)    {    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
8	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  1;  ++j)  {  int  j  =  0;  j  <  2;  ++j)  {  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;      [BUGGY]  for(int  j  =  0;  j  <  1;  ++j)  {  int  j  =  0;  j  <  2;  ++j)  {  [BUGGY]      int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	427	427	2	replace	for(int  j  =  0;  j  <  1;  ++j)  {  int  j  =  0;  j  <  2;  ++j)  {	  for(int    j    =    0;    j    <    2;    ++j)    {    int    j    =    0;    j    <    2;    ++j)    {    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
9	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  3;  ++j)  {  int  j  =  0;  j  <  2;  ++j)  {  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;      [BUGGY]  for(int  j  =  0;  j  <  3;  ++j)  {  int  j  =  0;  j  <  2;  ++j)  {  [BUGGY]      int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	427	427	2	replace	for(int  j  =  0;  j  <  3;  ++j)  {  int  j  =  0;  j  <  2;  ++j)  {	  for(int    j    =    0;    j    <    2;    ++j)    {    int    j    =    0;    j    <    2;    ++j)    {    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
10	[BUG]  [BUGGY]  xK  =  permutation[k]  *  point[k];  xNorm+=  xK  *  tmpVec  +  1;  [CE]  class,  interface,  or  enum  expected  [FE]            AssertionFailedError      [CONTEXT]      double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;      [BUGGY]  xK  =  permutation[k]  *  point[k];  xNorm+=  xK  *  tmpVec  +  1;  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	427	427	2	replace	xK  =  permutation[k]  *  point[k];  xNorm+=  xK  *  tmpVec  +  1;	  xK    =    permutation[k]    *    point[k];    xNorm+=    xK    *    tmpVec;    	non-compiled	[CE]  class,  interface,  or  enum  expected	76	None	replace
11	[BUG]  [BUGGY]  xK  =  permutation[k]  *  point[k];  xNorm+=  xN  *  tmpVec;  [CE]  class,  interface,  or  enum  expected  [FE]              AssertionFailedError      [CONTEXT]      double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;      [BUGGY]  xK  =  permutation[k]  *  point[k];  xNorm+=  xN  *  tmpVec;  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	427	427	2	replace	xK  =  permutation[k]  *  point[k];  xNorm+=  xN  *  tmpVec;	  xK    =    permutation[k]    *    point[k];    xNorm+=    xK    *    tmpVec;    	non-compiled	[CE]  class,  interface,  or  enum  expected	76	None	replace
12	[BUG]  [BUGGY]  xK  =  permutation[k]  *  point[k];  xNorm+=  Math.sqrt(xNorm);  [CE]  class,  interface,  or  enum  expected  [FE]                  AssertionFailedError      [CONTEXT]      double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;      [BUGGY]  xK  =  permutation[k]  *  point[k];  xNorm+=  Math.sqrt(xNorm);  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	427	427	2	replace	xK  =  permutation[k]  *  point[k];  xNorm+=  Math.sqrt(xNorm);	  xK    =    permutation[k]    *    point[k];    xNorm+=    Math.sqrt(cost);    	non-compiled	[CE]  class,  interface,  or  enum  expected	92	None	replace
13	[BUG]  [BUGGY]  xK  =  permutation[k]  *  cost;  xNorm+=  Math.sqrt(xNorm);  [CE]  class,  interface,  or  enum  expected  [FE]                    AssertionFailedError      [CONTEXT]      double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;      [BUGGY]  xK  =  permutation[k]  *  cost;  xNorm+=  Math.sqrt(xNorm);  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	427	427	2	replace	xK  =  permutation[k]  *  cost;  xNorm+=  Math.sqrt(xNorm);	  xK    =    permutation[k]    *    point[k];    xNorm+=    Math.sqrt(cost);    	non-compiled	[CE]  class,  interface,  or  enum  expected	92	None	replace
14	[BUG]  [BUGGY]  xK  =  permutation[k]  *  cost[k];  xNorm+=  Math.sqrt(xNorm);  [CE]  class,  interface,  or  enum  expected  [FE]                      AssertionFailedError      [CONTEXT]      double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;      [BUGGY]  xK  =  permutation[k]  *  cost[k];  xNorm+=  Math.sqrt(xNorm);  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	427	427	2	replace	xK  =  permutation[k]  *  cost[k];  xNorm+=  Math.sqrt(xNorm);	  xK    =    permutation[k]    *    point[k];    xNorm+=    Math.sqrt(cost);    	non-compiled	[CE]  class,  interface,  or  enum  expected	92	None	replace
15	[BUG]  [BUGGY]  xNorm+=  Math.sqrt(cost);  [CE]  class,  interface,  or  enum  expected  [FE]                  AssertionFailedError      [CONTEXT]      double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;      [BUGGY]  xNorm+=  Math.sqrt(cost);  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	427	427	2	replace	xNorm+=  Math.sqrt(cost);	  xNorm+=    Math.sqrt(xK);    	non-compiled	[CE]  class,  interface,  or  enum  expected	11	None	replace
16	[BUG]  [BUGGY]  xNorm+=  Math.sqrt(previousCost);  [CE]  class,  interface,  or  enum  expected  [FE]                    AssertionFailedError      [CONTEXT]      double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;      [BUGGY]  xNorm+=  Math.sqrt(previousCost);  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	427	427	2	replace	xNorm+=  Math.sqrt(previousCost);	  xNorm+=    Math.sqrt(xK);    	non-compiled	[CE]  class,  interface,  or  enum  expected	11	None	replace
17	[BUG]  [BUGGY]  xNorm+=  Math.sqrt(last);  [CE]  class,  interface,  or  enum  expected  [FE]                      AssertionFailedError      [CONTEXT]      double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;      [BUGGY]  xNorm+=  Math.sqrt(last);  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	427	427	2	replace	xNorm+=  Math.sqrt(last);	  xNorm+=    Math.sqrt(xK);    	non-compiled	[CE]  class,  interface,  or  enum  expected	11	None	replace
18	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  2)  {  [CE]  ';'  expected  [FE]          AssertionFailedError      [CONTEXT]      double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;      [BUGGY]  for(int  j  =  0;  j  <  2)  {  [BUGGY]      int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	427	427	2	replace	for(int  j  =  0;  j  <  2)  {	  for(int    j    =    0;    j    <    2;    ++j)    {    for(int    j    =    0;    j    <    2)    {    	non-compiled	[CE]  ';'  expected	100	None	replace
19	[BUG]  [BUGGY]  double  solvedCols  =  permutation[k]  *  point[k];  xNorm+=  oldX[xNorm];  [CE]  class,  interface,  or  enum  expected  [FE]                  AssertionFailedError      [CONTEXT]      double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;      [BUGGY]  double  solvedCols  =  permutation[k]  *  point[k];  xNorm+=  oldX[xNorm];  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	427	427	2	replace	double  solvedCols  =  permutation[k]  *  point[k];  xNorm+=  oldX[xNorm];	  double    solvedCols    =    permutation[k]    *    diagR[xNorm];    xNorm+=    oldX[xNorm];    	non-compiled	[CE]  class,  interface,  or  enum  expected	29	None	replace
20	[BUG]  [BUGGY]  double  solvedCols  =  diag[k]  *  diagR[xNorm];  xNorm+=  oldX[xNorm];  [CE]  class,  interface,  or  enum  expected  [FE]                    AssertionFailedError      [CONTEXT]      double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;      [BUGGY]  double  solvedCols  =  diag[k]  *  diagR[xNorm];  xNorm+=  oldX[xNorm];  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	427	427	2	replace	double  solvedCols  =  diag[k]  *  diagR[xNorm];  xNorm+=  oldX[xNorm];	  double    solvedCols    =    permutation[k]    *    diagR[xNorm];    xNorm+=    oldX[xNorm];    	non-compiled	[CE]  class,  interface,  or  enum  expected	29	None	replace
21	[BUG]  [BUGGY]  double  solvedCols  =  permutation[k]  *  point[xNorm];  xNorm+=  oldX[xNorm];  [CE]  class,  interface,  or  enum  expected  [FE]                      AssertionFailedError      [CONTEXT]      double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;      [BUGGY]  double  solvedCols  =  permutation[k]  *  point[xNorm];  xNorm+=  oldX[xNorm];  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	427	427	2	replace	double  solvedCols  =  permutation[k]  *  point[xNorm];  xNorm+=  oldX[xNorm];	  double    solvedCols    =    permutation[k]    *    diagR[xNorm];    xNorm+=    oldX[xNorm];    	non-compiled	[CE]  class,  interface,  or  enum  expected	29	None	replace
22	[BUG]  [BUGGY]  double[]  solvedCols  =  diag[k]  *  point;  [CE]  class,  interface,  or  enum  expected  [FE]              AssertionFailedError      [CONTEXT]      double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;      [BUGGY]  double[]  solvedCols  =  diag[k]  *  point;  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	427	427	2	replace	double[]  solvedCols  =  diag[k]  *  point;	  double[]    solvedCols    =    diag[k]    *    cost;    	non-compiled	[CE]  class,  interface,  or  enum  expected	12	None	replace
23	[BUG]  [BUGGY]  double[]  solvedCols  =  diag[k]  *  cost  +  1;  [CE]  class,  interface,  or  enum  expected  [FE]                AssertionFailedError      [CONTEXT]      double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;      [BUGGY]  double[]  solvedCols  =  diag[k]  *  cost  +  1;  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	427	427	2	replace	double[]  solvedCols  =  diag[k]  *  cost  +  1;	  double[]    solvedCols    =    diag[k]    *    cost;    	non-compiled	[CE]  class,  interface,  or  enum  expected	12	None	replace
24	[BUG]  [BUGGY]  double[]  solvedCols  =  diag[k]  *  cost.doubleValue();  [CE]  class,  interface,  or  enum  expected  [FE]                  AssertionFailedError      [CONTEXT]      double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;      [BUGGY]  double[]  solvedCols  =  diag[k]  *  cost.doubleValue();  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	427	427	2	replace	double[]  solvedCols  =  diag[k]  *  cost.doubleValue();	  double[]    solvedCols    =    diag[k]    *    cost;    	non-compiled	[CE]  class,  interface,  or  enum  expected	12	None	replace
25	[BUG]  [BUGGY]  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xNorm;  [CE]  class,  interface,  or  enum  expected  [FE]              AssertionFailedError      [CONTEXT]      double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;      [BUGGY]  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xNorm;  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	427	427	2	replace	double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xNorm;	  double    xK    =    point[k]    *    point[k];    xNorm+=    xK    *    xNorm;    	non-compiled	[CE]  class,  interface,  or  enum  expected	98	None	replace
26	[BUG]  [BUGGY]  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xNorm;  [CE]  class,  interface,  or  enum  expected  [FE]                AssertionFailedError      [CONTEXT]      double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;      [BUGGY]  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xNorm;  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	427	427	2	replace	xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xNorm;	  double    xK    =    point[k]    *    point[k];    xNorm+=    xK    *    xNorm;    	non-compiled	[CE]  class,  interface,  or  enum  expected	98	None	replace
27	[BUG]  [BUGGY]  xNorm+=  xK  *  point[k];  [CE]  class,  interface,  or  enum  expected  [FE]                  AssertionFailedError      [CONTEXT]      double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;      [BUGGY]  xNorm+=  xK  *  point[k];  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	427	427	2	replace	xNorm+=  xK  *  point[k];	  double    xK    =    point[k]    *    point[k];    xNorm+=    xK    *    xNorm;    	non-compiled	[CE]  class,  interface,  or  enum  expected	98	None	replace
28	[BUG]  [BUGGY]  int  permutation  =  permutation[0]  -  1;  [CE]  class,  interface,  or  enum  expected  [FE]                    AssertionFailedError      [CONTEXT]      double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;      [BUGGY]  int  permutation  =  permutation[0]  -  1;  [BUGGY]      int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	427	427	2	replace	int  permutation  =  permutation[0]  -  1;	  int    permutation    =    permutation[0];    	non-compiled	[CE]  class,  interface,  or  enum  expected	81	None	replace
29	[BUG]  [BUGGY]  int  permutation  =  permutation[1];  [CE]  class,  interface,  or  enum  expected  [FE]                      AssertionFailedError      [CONTEXT]      double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;      [BUGGY]  int  permutation  =  permutation[1];  [BUGGY]      int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	427	427	2	replace	int  permutation  =  permutation[1];	  int    permutation    =    permutation[0];    	non-compiled	[CE]  class,  interface,  or  enum  expected	81	None	replace
30	[BUG]  [BUGGY]  int  permutation  =  permutation[0]  &  1;  [CE]  class,  interface,  or  enum  expected  [FE]                        AssertionFailedError      [CONTEXT]      double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;      [BUGGY]  int  permutation  =  permutation[0]  &  1;  [BUGGY]      int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	427	427	2	replace	int  permutation  =  permutation[0]  &  1;	  int    permutation    =    permutation[0];    	non-compiled	[CE]  class,  interface,  or  enum  expected	81	None	replace
31	[BUG]  [BUGGY]  xNorm+=  Math.sqrt(diag[k]);  [CE]  class,  interface,  or  enum  expected  [FE]                AssertionFailedError      [CONTEXT]      double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;      [BUGGY]  xNorm+=  Math.sqrt(diag[k]);  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	427	427	2	replace	xNorm+=  Math.sqrt(diag[k]);	  double    xK    =    permutation[k]    *    point[k];    xNorm+=    Math.sqrt(diag[k]);    	non-compiled	[CE]  class,  interface,  or  enum  expected	91	None	replace
32	[BUG]  [BUGGY]  xK  =  permutation[k]  *  point[k];  xNorm+=  Math.sqrt(diag[k]);  [CE]  class,  interface,  or  enum  expected  [FE]                  AssertionFailedError      [CONTEXT]      double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;      [BUGGY]  xK  =  permutation[k]  *  point[k];  xNorm+=  Math.sqrt(diag[k]);  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	427	427	2	replace	xK  =  permutation[k]  *  point[k];  xNorm+=  Math.sqrt(diag[k]);	  double    xK    =    permutation[k]    *    point[k];    xNorm+=    Math.sqrt(diag[k]);    	non-compiled	[CE]  class,  interface,  or  enum  expected	91	None	replace
33	[BUG]  [BUGGY]  double  xK  =  diag[k]  *  point[k];  xNorm+=  Math.sqrt(xNorm);  [CE]  class,  interface,  or  enum  expected  [FE]                    AssertionFailedError      [CONTEXT]      double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;      [BUGGY]  double  xK  =  diag[k]  *  point[k];  xNorm+=  Math.sqrt(xNorm);  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	427	427	2	replace	double  xK  =  diag[k]  *  point[k];  xNorm+=  Math.sqrt(xNorm);	  double    xK    =    permutation[k]    *    point[k];    xNorm+=    Math.sqrt(diag[k]);    	non-compiled	[CE]  class,  interface,  or  enum  expected	91	None	replace
34	[BUG]  [BUGGY]  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  [CE]  class,  interface,  or  enum  expected  [FE]            AssertionFailedError      [CONTEXT]      double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;      [BUGGY]  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	427	427	2	replace	xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;	  double    xK    =    permutation[k]    *    point[k];    xNorm+=    diag[xK    *    xK;    	non-compiled	[CE]  class,  interface,  or  enum  expected	67	None	replace
35	[BUG]  [BUGGY]  xK  =  permutation[k]  *  point[k];  xNorm+=  diag[0  *  xK;  [CE]  ']'  expected  [FE]              AssertionFailedError      [CONTEXT]      double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;      [BUGGY]  xK  =  permutation[k]  *  point[k];  xNorm+=  diag[0  *  xK;  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	427	427	2	replace	xK  =  permutation[k]  *  point[k];  xNorm+=  diag[0  *  xK;	  double    xK    =    permutation[k]    *    point[k];    xNorm+=    diag[xK    *    xK;    	non-compiled	[CE]  ']'  expected	67	None	replace
36	[BUG]  [BUGGY]  double  xK  =  permutation[k]  *  point[k];  xNorm+=  diag[0  *  xK;  [CE]  ']'  expected  [FE]                AssertionFailedError      [CONTEXT]      double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;      [BUGGY]  double  xK  =  permutation[k]  *  point[k];  xNorm+=  diag[0  *  xK;  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	427	427	2	replace	double  xK  =  permutation[k]  *  point[k];  xNorm+=  diag[0  *  xK;	  double    xK    =    permutation[k]    *    point[k];    xNorm+=    diag[xK    *    xK;    	non-compiled	[CE]  ']'  expected	67	None	replace
37	[BUG]  [BUGGY]  For(int  j  =  0;  j  <  2;  ++j)  {  [CE]  '.class'  expected  [FE]        AssertionFailedError      [CONTEXT]      double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;      [BUGGY]  For(int  j  =  0;  j  <  2;  ++j)  {  [BUGGY]      int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	427	427	2	replace	For(int  j  =  0;  j  <  2;  ++j)  {	  for(int    j    =    0;    j    <    2;    ++j)    {    For(int    j    =    0;    j    <    2;    ++j)    {    	non-compiled	[CE]  '.class'  expected	74	None	replace
38	[BUG]  [BUGGY]  double  solvedCols  =  diag[k]  *  point[k];  xNorm+=  xK  *  oldX[0];  [CE]  class,  interface,  or  enum  expected  [FE]                  AssertionFailedError      [CONTEXT]      double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;      [BUGGY]  double  solvedCols  =  diag[k]  *  point[k];  xNorm+=  xK  *  oldX[0];  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	427	427	2	replace	double  solvedCols  =  diag[k]  *  point[k];  xNorm+=  xK  *  oldX[0];	  double    solvedCols    =    diag[k]    *    point[k];    xNorm+=    xK    *    oldX[xNorm];    	non-compiled	[CE]  class,  interface,  or  enum  expected	25	None	replace
39	[BUG]  [BUGGY]  double  solvedCols  =  xNorm  *  point[k];  xNorm+=  xK  *  oldX[xNorm];  [CE]  class,  interface,  or  enum  expected  [FE]                    AssertionFailedError      [CONTEXT]      double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;      [BUGGY]  double  solvedCols  =  xNorm  *  point[k];  xNorm+=  xK  *  oldX[xNorm];  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	427	427	2	replace	double  solvedCols  =  xNorm  *  point[k];  xNorm+=  xK  *  oldX[xNorm];	  double    solvedCols    =    diag[k]    *    point[k];    xNorm+=    xK    *    oldX[xNorm];    	non-compiled	[CE]  class,  interface,  or  enum  expected	25	None	replace
40	[BUG]  [BUGGY]  double  solvedCols  =  diag[k]  *  point[k];  xNorm+=  xNorm  *  xK;  [CE]  class,  interface,  or  enum  expected  [FE]                      AssertionFailedError      [CONTEXT]      double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;      [BUGGY]  double  solvedCols  =  diag[k]  *  point[k];  xNorm+=  xNorm  *  xK;  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	427	427	2	replace	double  solvedCols  =  diag[k]  *  point[k];  xNorm+=  xNorm  *  xK;	  double    solvedCols    =    diag[k]    *    point[k];    xNorm+=    xNorm    *    oldX[xNorm];    	non-compiled	[CE]  class,  interface,  or  enum  expected	27	None	replace
41	[BUG]  [BUGGY]  double  solvedCols  =  diag[k]  *  point[k];  xNorm+=  xNorm  *  2  *  oldX[xNorm];  [CE]  class,  interface,  or  enum  expected  [FE]                        AssertionFailedError      [CONTEXT]      double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;      [BUGGY]  double  solvedCols  =  diag[k]  *  point[k];  xNorm+=  xNorm  *  2  *  oldX[xNorm];  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	427	427	2	replace	double  solvedCols  =  diag[k]  *  point[k];  xNorm+=  xNorm  *  2  *  oldX[xNorm];	  double    solvedCols    =    diag[k]    *    point[k];    xNorm+=    xNorm    *    oldX[xNorm];    	non-compiled	[CE]  class,  interface,  or  enum  expected	27	None	replace
42	[BUG]  [BUGGY]  double  solvedCols  =  xNorm  *  point[k];  xNorm+=  xNorm  *  oldX[xNorm];  [CE]  class,  interface,  or  enum  expected  [FE]                          AssertionFailedError      [CONTEXT]      double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;      [BUGGY]  double  solvedCols  =  xNorm  *  point[k];  xNorm+=  xNorm  *  oldX[xNorm];  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	427	427	2	replace	double  solvedCols  =  xNorm  *  point[k];  xNorm+=  xNorm  *  oldX[xNorm];	  double    solvedCols    =    diag[k]    *    point[k];    xNorm+=    xNorm    *    oldX[xNorm];    	non-compiled	[CE]  class,  interface,  or  enum  expected	27	None	replace
43	[BUG]  [BUGGY]  double  solvedCols  =  oldX[k]  *  point[k];  xNorm+=  xK[xNorm];  [CE]  class,  interface,  or  enum  expected  [FE]                        AssertionFailedError      [CONTEXT]      double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;      [BUGGY]  double  solvedCols  =  oldX[k]  *  point[k];  xNorm+=  xK[xNorm];  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	427	427	2	replace	double  solvedCols  =  oldX[k]  *  point[k];  xNorm+=  xK[xNorm];	  double    solvedCols    =    oldX[k]    *    point[k];    xNorm+=    oldX[xNorm];    	non-compiled	[CE]  class,  interface,  or  enum  expected	73	None	replace
44	[BUG]  [BUGGY]  xNorm+=  oldX[k];  [CE]  class,  interface,  or  enum  expected  [FE]                          AssertionFailedError      [CONTEXT]      double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;      [BUGGY]  xNorm+=  oldX[k];  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	427	427	2	replace	xNorm+=  oldX[k];	  double    solvedCols    =    oldX[k]    *    point[k];    xNorm+=    oldX[xNorm];    	non-compiled	[CE]  class,  interface,  or  enum  expected	73	None	replace
45	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  3;  ++j)  {  for(int  j  =  0;  j  <  3;  ++j)  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;      [BUGGY]  for(int  j  =  0;  j  <  3;  ++j)  {  for(int  j  =  0;  j  <  3;  ++j)  {  [BUGGY]      int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	427	427	2	replace	for(int    j    =    0;    j    <    3;    ++j)    {    for(int  j  =  0;  j  <  3;  ++j)  {	  	non-compiled	[CE]  illegal  start  of  expression	30	None	add
46	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  3;  ++j)  {  int  permutation[j]  =  permutation[j];  point[pj]  =  oldX[pj];  [CE]  ']'  expected  [FE]      AssertionFailedError    [CONTEXT]      double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;      [BUGGY]  for(int  j  =  0;  j  <  3;  ++j)  {  int  permutation[j]  =  permutation[j];  point[pj]  =  oldX[pj];  [BUGGY]      int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	427	427	2	replace	for(int    j    =    0;    j    <    3;    ++j)    {    int  permutation[j]  =  permutation[j];  point[pj]  =  oldX[pj];	  	non-compiled	[CE]  ']'  expected	30	None	add
47	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  3;  ++j)  {  int  j  =  0;  j  <  3;  ++j)  {  [CE]  illegal  start  of  type  [FE]        AssertionFailedError    [CONTEXT]      double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;      [BUGGY]  for(int  j  =  0;  j  <  3;  ++j)  {  int  j  =  0;  j  <  3;  ++j)  {  [BUGGY]      int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	427	427	2	replace	for(int    j    =    0;    j    <    3;    ++j)    {    int  j  =  0;  j  <  3;  ++j)  {	  	non-compiled	[CE]  illegal  start  of  type	30	None	add
48	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  3;  ++j)  {  int  permutation[j]  =  permutation[j];  point[pj]  =  oldX[permutation[j];  [CE]  ']'  expected  [FE]          AssertionFailedError    [CONTEXT]      double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;      [BUGGY]  for(int  j  =  0;  j  <  3;  ++j)  {  int  permutation[j]  =  permutation[j];  point[pj]  =  oldX[permutation[j];  [BUGGY]      int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	427	427	2	replace	for(int    j    =    0;    j    <    3;    ++j)    {    int  permutation[j]  =  permutation[j];  point[pj]  =  oldX[permutation[j];	  	non-compiled	[CE]  ']'  expected	30	None	add
49	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  3;  ++j)  {  int  permutation[j]  =  permutation[j];  point[pj]  =  oldX[previousCost];  [CE]  ']'  expected  [FE]            AssertionFailedError    [CONTEXT]      double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;      [BUGGY]  for(int  j  =  0;  j  <  3;  ++j)  {  int  permutation[j]  =  permutation[j];  point[pj]  =  oldX[previousCost];  [BUGGY]      int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	427	427	2	replace	for(int    j    =    0;    j    <    3;    ++j)    {    int  permutation[j]  =  permutation[j];  point[pj]  =  oldX[previousCost];	  	non-compiled	[CE]  ']'  expected	30	None	add
50	[BUG]  [BUGGY]  double  solvedCols  =  diag[k]  *  point[k];  xNorm+=  xNorm  *  oldX[0];  [CE]  class,  interface,  or  enum  expected  [FE]                  AssertionFailedError      [CONTEXT]      double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;      [BUGGY]  double  solvedCols  =  diag[k]  *  point[k];  xNorm+=  xNorm  *  oldX[0];  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	427	427	2	replace	double  solvedCols  =  diag[k]  *  point[k];  xNorm+=  xNorm  *  oldX[0];	  double    solvedCols    =    diag[k]    *    point[k];    xNorm+=    oldX[0];    	non-compiled	[CE]  class,  interface,  or  enum  expected	70	None	replace
51	[BUG]  [BUGGY]  double  solvedCols  =  oldX[k]  *  point[k];  xNorm+=  xNorm[0];  [CE]  class,  interface,  or  enum  expected  [FE]                    AssertionFailedError      [CONTEXT]      double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;      [BUGGY]  double  solvedCols  =  oldX[k]  *  point[k];  xNorm+=  xNorm[0];  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	427	427	2	replace	double  solvedCols  =  oldX[k]  *  point[k];  xNorm+=  xNorm[0];	  double    solvedCols    =    diag[k]    *    point[k];    xNorm+=    oldX[0];    	non-compiled	[CE]  class,  interface,  or  enum  expected	70	None	replace
52	[BUG]  [BUGGY]  xK  =  permutation[k]  *  point[k];  xNorm+=  xN  *  xK;  [CE]  class,  interface,  or  enum  expected  [FE]              AssertionFailedError      [CONTEXT]      double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;      [BUGGY]  xK  =  permutation[k]  *  point[k];  xNorm+=  xN  *  xK;  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	427	427	2	replace	xK  =  permutation[k]  *  point[k];  xNorm+=  xN  *  xK;	  xK    =    permutation[k]    *    point[k];    xNorm+=    xK    *    xK;    	non-compiled	[CE]  class,  interface,  or  enum  expected	68	None	replace
53	[BUG]  [BUGGY]  xK  =  point[k]  *  permutation[k];  xNorm+=  xK  *  xK;  [CE]  class,  interface,  or  enum  expected  [FE]                AssertionFailedError      [CONTEXT]      double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;      [BUGGY]  xK  =  point[k]  *  permutation[k];  xNorm+=  xK  *  xK;  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	427	427	2	replace	xK  =  point[k]  *  permutation[k];  xNorm+=  xK  *  xK;	  xK    =    permutation[k]    *    point[k];    xNorm+=    xK    *    xK;    	non-compiled	[CE]  class,  interface,  or  enum  expected	68	None	replace
54	[BUG]  [BUGGY]  xK  =  permutation[k]  *  point[k];  xNorm+=  xK  *  tmp;  [CE]  class,  interface,  or  enum  expected  [FE]                  AssertionFailedError      [CONTEXT]      double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;      [BUGGY]  xK  =  permutation[k]  *  point[k];  xNorm+=  xK  *  tmp;  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	427	427	2	replace	xK  =  permutation[k]  *  point[k];  xNorm+=  xK  *  tmp;	  xK    =    permutation[k]    *    point[k];    xNorm+=    xK    *    xK;    	non-compiled	[CE]  class,  interface,  or  enum  expected	68	None	replace
55	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  preRed.length;  ++j)  {  [CE]  double  cannot  be  dereferenced  [FE]        AssertionFailedError      [CONTEXT]      double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;      [BUGGY]  for(int  j  =  0;  j  <  preRed.length;  ++j)  {  [BUGGY]      int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	427	427	2	replace	for(int  j  =  0;  j  <  preRed.length;  ++j)  {	  for(int    j    =    0;    j    <    cost.length;    ++j)    {    	non-compiled	[CE]  double  cannot  be  dereferenced	93	None	replace
56	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;      [BUGGY]  for(int  j  =  1;  j  <  permutation.length;  ++j)  {  [BUGGY]      int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	427	427	2	add	for(int  j  =  1;  j  <  permutation.length;  ++j)  {	  for(int    j    =    1;    j    <    diag.length;    ++j)    {    	compilable	  [FE]  AssertionFailedError  	50	12	replace
57	[BUG]  [BUGGY]  for(int  j  =  1;  j  <  permutation.length;  ++j)  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;      [BUGGY]  for(int  j  =  1;  j  <  permutation.length;  ++j)  {  [BUGGY]      int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	427	427	2	replace	for(int  j  =  1;  j  <  permutation.length;  ++j)  {	  for(int    j    =    1;    j    <    diag.length;    ++j)    {    	compilable	  [FE]  AssertionFailedError  	50	12	replace
58	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;      [BUGGY]  for(int  j  =  2;  j  <  diag.length;  ++j)  {  [BUGGY]      int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	427	427	2	add	for(int  j  =  2;  j  <  diag.length;  ++j)  {	  for(int    j    =    1;    j    <    diag.length;    ++j)    {    	compilable	  [FE]  AssertionFailedError  	50	12	replace
59	[BUG]  [BUGGY]  for(int  j  =  2;  j  <  diag.length;  ++j)  {  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;      [BUGGY]  for(int  j  =  2;  j  <  diag.length;  ++j)  {  [BUGGY]      int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	427	427	2	replace	for(int  j  =  2;  j  <  diag.length;  ++j)  {	  for(int    j    =    1;    j    <    diag.length;    ++j)    {    	compilable	  [FE]  AssertionFailedError  	50	12	replace
60	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;      [BUGGY]  for(int  j  =  1;  j  <  point.length;  ++j)  {  [BUGGY]      int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	427	427	2	add	for(int  j  =  1;  j  <  point.length;  ++j)  {	  for(int    j    =    1;    j    <    diag.length;    ++j)    {    	compilable	  [FE]  AssertionFailedError  	50	12	replace
61	[BUG]  [BUGGY]  for(int  j  =  1;  j  <  point.length;  ++j)  {  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;      [BUGGY]  for(int  j  =  1;  j  <  point.length;  ++j)  {  [BUGGY]      int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	427	427	2	replace	for(int  j  =  1;  j  <  point.length;  ++j)  {	  for(int    j    =    1;    j    <    diag.length;    ++j)    {    	compilable	  [FE]  AssertionFailedError  	50	12	replace
62	[BUG]  [BUGGY]  int  j  =  permutation[0];  [CE]  class,  interface,  or  enum  expected  [FE]                  AssertionFailedError      [CONTEXT]      double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;      [BUGGY]  int  j  =  permutation[0];  [BUGGY]      int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	427	427	2	replace	int  j  =  permutation[0];	  int    j    =    permutation[j];    	non-compiled	[CE]  class,  interface,  or  enum  expected	80	None	replace
63	[BUG]  [BUGGY]  int  j  =  permutation[j]  -  1;  [CE]  class,  interface,  or  enum  expected  [FE]                    AssertionFailedError      [CONTEXT]      double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;      [BUGGY]  int  j  =  permutation[j]  -  1;  [BUGGY]      int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	427	427	2	replace	int  j  =  permutation[j]  -  1;	  int    j    =    permutation[j];    	non-compiled	[CE]  class,  interface,  or  enum  expected	80	None	replace
64	[BUG]  [BUGGY]  int  j  =  permutation[j]  +  1;  [CE]  class,  interface,  or  enum  expected  [FE]                      AssertionFailedError      [CONTEXT]      double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;      [BUGGY]  int  j  =  permutation[j]  +  1;  [BUGGY]      int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	427	427	2	replace	int  j  =  permutation[j]  +  1;	  int    j    =    permutation[j];    	non-compiled	[CE]  class,  interface,  or  enum  expected	80	None	replace
65	[BUG]  [BUGGY]  xNorm+=  permutation[k]  *  point[k]  +  cost;  [CE]  class,  interface,  or  enum  expected  [FE]                AssertionFailedError      [CONTEXT]      double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;      [BUGGY]  xNorm+=  permutation[k]  *  point[k]  +  cost;  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	427	427	2	replace	xNorm+=  permutation[k]  *  point[k]  +  cost;	  xNorm+=    permutation[k]    *    point[k];    	non-compiled	[CE]  class,  interface,  or  enum  expected	69	None	replace
66	[BUG]  [BUGGY]  xNorm+=  permutation[k]  *  cost[k];  [CE]  class,  interface,  or  enum  expected  [FE]                  AssertionFailedError      [CONTEXT]      double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;      [BUGGY]  xNorm+=  permutation[k]  *  cost[k];  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	427	427	2	replace	xNorm+=  permutation[k]  *  cost[k];	  xNorm+=    permutation[k]    *    point[k];    	non-compiled	[CE]  class,  interface,  or  enum  expected	69	None	replace
67	[BUG]  [BUGGY]  xNorm+=  permutation[k]  *  point[k]  +  1;  [CE]  class,  interface,  or  enum  expected  [FE]                    AssertionFailedError      [CONTEXT]      double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;      [BUGGY]  xNorm+=  permutation[k]  *  point[k]  +  1;  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	427	427	2	replace	xNorm+=  permutation[k]  *  point[k]  +  1;	  xNorm+=    permutation[k]    *    point[k];    	non-compiled	[CE]  class,  interface,  or  enum  expected	69	None	replace
68	[BUG]  [BUGGY]  double  solvedCols  =  permutation[k]  *  point;  xNorm+=  oldX[xNorm];  [CE]  class,  interface,  or  enum  expected  [FE]                AssertionFailedError      [CONTEXT]      double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;      [BUGGY]  double  solvedCols  =  permutation[k]  *  point;  xNorm+=  oldX[xNorm];  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	427	427	2	replace	double  solvedCols  =  permutation[k]  *  point;  xNorm+=  oldX[xNorm];	  double    solvedCols    =    permutation[k]    *    xNorm;    xNorm+=    oldX[xNorm];    	non-compiled	[CE]  class,  interface,  or  enum  expected	28	None	replace
69	[BUG]  [BUGGY]  double  solvedCols  =  permutation[k]  *  xNorm;  xNorm+=  xK  *  oldX[xNorm];  [CE]  class,  interface,  or  enum  expected  [FE]                  AssertionFailedError      [CONTEXT]      double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;      [BUGGY]  double  solvedCols  =  permutation[k]  *  xNorm;  xNorm+=  xK  *  oldX[xNorm];  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	427	427	2	replace	double  solvedCols  =  permutation[k]  *  xNorm;  xNorm+=  xK  *  oldX[xNorm];	  double    solvedCols    =    permutation[k]    *    xNorm;    xNorm+=    oldX[xNorm];    	non-compiled	[CE]  class,  interface,  or  enum  expected	28	None	replace
70	[BUG]  [BUGGY]  double  solvedCols  =  permutation[k]  *  xNorm;  xNorm+=  xK  *  xNorm;  [CE]  class,  interface,  or  enum  expected  [FE]                    AssertionFailedError      [CONTEXT]      double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;      [BUGGY]  double  solvedCols  =  permutation[k]  *  xNorm;  xNorm+=  xK  *  xNorm;  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	427	427	2	replace	double  solvedCols  =  permutation[k]  *  xNorm;  xNorm+=  xK  *  xNorm;	  double    solvedCols    =    permutation[k]    *    xNorm;    xNorm+=    oldX[xNorm];    	non-compiled	[CE]  class,  interface,  or  enum  expected	28	None	replace
71	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  preRed;  ++j)  {  for(int  j  =  0;  j  <  preRed;  ++j)  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;      [BUGGY]  for(int  j  =  0;  j  <  preRed;  ++j)  {  for(int  j  =  0;  j  <  preRed;  ++j)  {  [BUGGY]      int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	427	427	2	replace	for(int    j    =    0;    j    <    preRed;    ++j)    {    for(int  j  =  0;  j  <  preRed;  ++j)  {	  	non-compiled	[CE]  illegal  start  of  expression	23	None	add
72	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  preRed;  ++j)  {  int  permutation[j]  =  permutation[j];  point[pj]  =  oldX[pj];  [CE]  ']'  expected  [FE]      AssertionFailedError    [CONTEXT]      double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;      [BUGGY]  for(int  j  =  0;  j  <  preRed;  ++j)  {  int  permutation[j]  =  permutation[j];  point[pj]  =  oldX[pj];  [BUGGY]      int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	427	427	2	replace	for(int    j    =    0;    j    <    preRed;    ++j)    {    int  permutation[j]  =  permutation[j];  point[pj]  =  oldX[pj];	  	non-compiled	[CE]  ']'  expected	23	None	add
73	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  preRed;  ++j)  {  int  permutation[j]  =  permutation[j];  point[pj]  =  oldX[preRed];  [CE]  ']'  expected  [FE]        AssertionFailedError    [CONTEXT]      double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;      [BUGGY]  for(int  j  =  0;  j  <  preRed;  ++j)  {  int  permutation[j]  =  permutation[j];  point[pj]  =  oldX[preRed];  [BUGGY]      int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	427	427	2	replace	for(int    j    =    0;    j    <    preRed;    ++j)    {    int  permutation[j]  =  permutation[j];  point[pj]  =  oldX[preRed];	  	non-compiled	[CE]  ']'  expected	23	None	add
74	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  preRed;  ++j)  {  int  j  =  0;  j  <  preRed;  ++j)  {  [CE]  >  expected  [FE]          AssertionFailedError    [CONTEXT]      double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;      [BUGGY]  for(int  j  =  0;  j  <  preRed;  ++j)  {  int  j  =  0;  j  <  preRed;  ++j)  {  [BUGGY]      int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	427	427	2	replace	for(int    j    =    0;    j    <    preRed;    ++j)    {    int  j  =  0;  j  <  preRed;  ++j)  {	  	non-compiled	[CE]  >  expected	23	None	add
75	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  preRed;  ++j)  {  int  permutation[j]  =  permutation[j];  [CE]  ']'  expected  [FE]            AssertionFailedError    [CONTEXT]      double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;      [BUGGY]  for(int  j  =  0;  j  <  preRed;  ++j)  {  int  permutation[j]  =  permutation[j];  [BUGGY]      int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	427	427	2	replace	for(int    j    =    0;    j    <    preRed;    ++j)    {    int  permutation[j]  =  permutation[j];	  	non-compiled	[CE]  ']'  expected	23	None	add
76	[BUG]  [BUGGY]  double[]  solvedCols  =  diag[0]  *  cost;  [CE]  class,  interface,  or  enum  expected  [FE]                  AssertionFailedError      [CONTEXT]      double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;      [BUGGY]  double[]  solvedCols  =  diag[0]  *  cost;  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	427	427	2	replace	double[]  solvedCols  =  diag[0]  *  cost;	  double[]    solvedCols    =    diag[0]    *    costRelativeTolerance;    	non-compiled	[CE]  class,  interface,  or  enum  expected	14	None	replace
77	[BUG]  [BUGGY]  double[]  solvedCols  =  cost[0]  *  diagR;  [CE]  class,  interface,  or  enum  expected  [FE]                    AssertionFailedError      [CONTEXT]      double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;      [BUGGY]  double[]  solvedCols  =  cost[0]  *  diagR;  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	427	427	2	replace	double[]  solvedCols  =  cost[0]  *  diagR;	  double[]    solvedCols    =    diag[0]    *    costRelativeTolerance;    	non-compiled	[CE]  class,  interface,  or  enum  expected	14	None	replace
78	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  4;  ++j)  {  for(int  j  =  0;  j  <  4;  ++j)  {  [CE]  illegal  start  of  expression  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;      [BUGGY]  for(int  j  =  0;  j  <  4;  ++j)  {  for(int  j  =  0;  j  <  4;  ++j)  {  [BUGGY]      int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	427	427	2	replace	for(int    j    =    0;    j    <    4;    ++j)    {    for(int  j  =  0;  j  <  4;  ++j)  {	  	non-compiled	[CE]  illegal  start  of  expression	34	None	add
79	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  4;  ++j)  {  int  permutation[j]  =  permutation[j];  [CE]  ']'  expected  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;      [BUGGY]  for(int  j  =  0;  j  <  4;  ++j)  {  int  permutation[j]  =  permutation[j];  [BUGGY]      int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	427	427	2	replace	for(int    j    =    0;    j    <    4;    ++j)    {    int  permutation[j]  =  permutation[j];	  	non-compiled	[CE]  ']'  expected	34	None	add
80	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  4;  ++j)  {  int  j  =  0;  j  <  4;  ++j)  {  [CE]  illegal  start  of  type  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;      [BUGGY]  for(int  j  =  0;  j  <  4;  ++j)  {  int  j  =  0;  j  <  4;  ++j)  {  [BUGGY]      int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	427	427	2	replace	for(int    j    =    0;    j    <    4;    ++j)    {    int  j  =  0;  j  <  4;  ++j)  {	  	non-compiled	[CE]  illegal  start  of  type	34	None	add
81	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  4;  ++j)  {  For(int  j  =  0;  j  <  4;  ++j)  {  [CE]  '.class'  expected  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]      double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;      [BUGGY]  for(int  j  =  0;  j  <  4;  ++j)  {  For(int  j  =  0;  j  <  4;  ++j)  {  [BUGGY]      int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	427	427	2	replace	for(int    j    =    0;    j    <    4;    ++j)    {    For(int  j  =  0;  j  <  4;  ++j)  {	  	non-compiled	[CE]  '.class'  expected	34	None	add
82	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  4;  ++j)  {  int  permutation[j]  =  permutation[j];  oldX[pj]  =  tmpVec;  [CE]  ']'  expected  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]      double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;      [BUGGY]  for(int  j  =  0;  j  <  4;  ++j)  {  int  permutation[j]  =  permutation[j];  oldX[pj]  =  tmpVec;  [BUGGY]      int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	427	427	2	replace	for(int    j    =    0;    j    <    4;    ++j)    {    int  permutation[j]  =  permutation[j];  oldX[pj]  =  tmpVec;	  	non-compiled	[CE]  ']'  expected	34	None	add
83	[BUG]  [BUGGY]  xNorm+=  tmp  *  xK;  [CE]  class,  interface,  or  enum  expected  [FE]            AssertionFailedError      [CONTEXT]      double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;      [BUGGY]  xNorm+=  tmp  *  xK;  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	427	427	2	replace	xNorm+=  tmp  *  xK;	  double    xK    =    permutation[k]    *    point[k];    xNorm+=    tmp    *    xK;    	non-compiled	[CE]  class,  interface,  or  enum  expected	86	None	replace
84	[BUG]  [BUGGY]  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  tmp;  [CE]  class,  interface,  or  enum  expected  [FE]              AssertionFailedError      [CONTEXT]      double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;      [BUGGY]  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  tmp;  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	427	427	2	replace	double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  tmp;	  double    xK    =    permutation[k]    *    point[k];    xNorm+=    tmp    *    xK;    	non-compiled	[CE]  class,  interface,  or  enum  expected	86	None	replace
85	[BUG]  [BUGGY]  double[]  solvedCols  =  diag[k]  *  coeff2;  [CE]  class,  interface,  or  enum  expected  [FE]              AssertionFailedError      [CONTEXT]      double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;      [BUGGY]  double[]  solvedCols  =  diag[k]  *  coeff2;  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	427	427	2	replace	double[]  solvedCols  =  diag[k]  *  coeff2;	  double[]    solvedCols    =    diag[k]    *    coeff1;    	non-compiled	[CE]  class,  interface,  or  enum  expected	94	None	replace
86	[BUG]  [BUGGY]  double[]  solvedCols  =  coeff1[k]  *  diagR;  [CE]  class,  interface,  or  enum  expected  [FE]                AssertionFailedError      [CONTEXT]      double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;      [BUGGY]  double[]  solvedCols  =  coeff1[k]  *  diagR;  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	427	427	2	replace	double[]  solvedCols  =  coeff1[k]  *  diagR;	  double[]    solvedCols    =    diag[k]    *    coeff1;    	non-compiled	[CE]  class,  interface,  or  enum  expected	94	None	replace
87	[BUG]  [BUGGY]  int  j  =  0;  j  <  permutation.length;  ++j)  {  [CE]  >  expected  [FE]            AssertionFailedError      [CONTEXT]      double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;      [BUGGY]  int  j  =  0;  j  <  permutation.length;  ++j)  {  [BUGGY]      int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	427	427	2	replace	int  j  =  0;  j  <  permutation.length;  ++j)  {	  for(int    j    =    0;    j    <    diag.length;    ++j)    {    int    j    =    0;    j    <    diag.length;    ++j)    {    	non-compiled	[CE]  >  expected	38	None	replace
88	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  permutation.length;  ++j)  {  int  j  =  0;  j  <  diag.length;  ++j)  {  [CE]  >  expected  [FE]              AssertionFailedError      [CONTEXT]      double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;      [BUGGY]  for(int  j  =  0;  j  <  permutation.length;  ++j)  {  int  j  =  0;  j  <  diag.length;  ++j)  {  [BUGGY]      int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	427	427	2	replace	for(int  j  =  0;  j  <  permutation.length;  ++j)  {  int  j  =  0;  j  <  diag.length;  ++j)  {	  for(int    j    =    0;    j    <    diag.length;    ++j)    {    int    j    =    0;    j    <    diag.length;    ++j)    {    	non-compiled	[CE]  >  expected	38	None	replace
89	[BUG]  [BUGGY]  int  j  =  0;  j  <  diag.length;  ++j)  {  [CE]  >  expected  [FE]                AssertionFailedError      [CONTEXT]      double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;      [BUGGY]  int  j  =  0;  j  <  diag.length;  ++j)  {  [BUGGY]      int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	427	427	2	replace	int  j  =  0;  j  <  diag.length;  ++j)  {	  for(int    j    =    0;    j    <    diag.length;    ++j)    {    int    j    =    0;    j    <    diag.length;    ++j)    {    	non-compiled	[CE]  >  expected	38	None	replace
90	[BUG]  [BUGGY]  xK  =  permutation[0]  *  point[0];  xNorm+=  xK  *  tmpVec;  [CE]  class,  interface,  or  enum  expected  [FE]              AssertionFailedError      [CONTEXT]      double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;      [BUGGY]  xK  =  permutation[0]  *  point[0];  xNorm+=  xK  *  tmpVec;  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	427	427	2	replace	xK  =  permutation[0]  *  point[0];  xNorm+=  xK  *  tmpVec;	  double    xK    =    permutation[0]    *    point[0];    xNorm+=    xK    *    tmpVec;    	non-compiled	[CE]  class,  interface,  or  enum  expected	77	None	replace
91	[BUG]  [BUGGY]  xK  =  permutation[0]  *  point[1];  xNorm+=  xK  *  tmpVec;  [CE]  class,  interface,  or  enum  expected  [FE]                AssertionFailedError      [CONTEXT]      double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;      [BUGGY]  xK  =  permutation[0]  *  point[1];  xNorm+=  xK  *  tmpVec;  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	427	427	2	replace	xK  =  permutation[0]  *  point[1];  xNorm+=  xK  *  tmpVec;	  double    xK    =    permutation[0]    *    point[0];    xNorm+=    xK    *    tmpVec;    	non-compiled	[CE]  class,  interface,  or  enum  expected	77	None	replace
92	[BUG]  [BUGGY]  double  xK  =  permutation[0]  *  point[1];  xNorm+=  xK  *  tmpVec;  [CE]  class,  interface,  or  enum  expected  [FE]                  AssertionFailedError      [CONTEXT]      double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;      [BUGGY]  double  xK  =  permutation[0]  *  point[1];  xNorm+=  xK  *  tmpVec;  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	427	427	2	replace	double  xK  =  permutation[0]  *  point[1];  xNorm+=  xK  *  tmpVec;	  double    xK    =    permutation[0]    *    point[0];    xNorm+=    xK    *    tmpVec;    	non-compiled	[CE]  class,  interface,  or  enum  expected	77	None	replace
93	[BUG]  [BUGGY]  double  xK  =  diag[k]  *  point[k];  xNorm+=  xN  *  tmpVec;  [CE]  class,  interface,  or  enum  expected  [FE]              AssertionFailedError      [CONTEXT]      double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;      [BUGGY]  double  xK  =  diag[k]  *  point[k];  xNorm+=  xN  *  tmpVec;  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	427	427	2	replace	double  xK  =  diag[k]  *  point[k];  xNorm+=  xN  *  tmpVec;	  double    xK    =    permutation[k]    *    point[k];    xNorm+=    xN    *    tmpVec;    	non-compiled	[CE]  class,  interface,  or  enum  expected	17	None	replace
94	[BUG]  [BUGGY]  xK  =  diag[k]  *  point[k];  xNorm+=  xN  *  tmpVec;  [CE]  class,  interface,  or  enum  expected  [FE]                AssertionFailedError      [CONTEXT]      double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;      [BUGGY]  xK  =  diag[k]  *  point[k];  xNorm+=  xN  *  tmpVec;  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	427	427	2	replace	xK  =  diag[k]  *  point[k];  xNorm+=  xN  *  tmpVec;	  double    xK    =    permutation[k]    *    point[k];    xNorm+=    xN    *    tmpVec;    	non-compiled	[CE]  class,  interface,  or  enum  expected	17	None	replace
95	[BUG]  [BUGGY]  xK  =  permutation[k]  *  point[k];  xNorm+=  xN  *  tmpVec  +  1;  [CE]  class,  interface,  or  enum  expected  [FE]                  AssertionFailedError      [CONTEXT]      double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;      [BUGGY]  xK  =  permutation[k]  *  point[k];  xNorm+=  xN  *  tmpVec  +  1;  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	427	427	2	replace	xK  =  permutation[k]  *  point[k];  xNorm+=  xN  *  tmpVec  +  1;	  double    xK    =    permutation[k]    *    point[k];    xNorm+=    xN    *    tmpVec;    	non-compiled	[CE]  class,  interface,  or  enum  expected	17	None	replace
96	[BUG]  [BUGGY]  xK  =  permutation[k]  *  point[k];  xNorm+=  Math.sqrt(test(xK));  [CE]  class,  interface,  or  enum  expected  [FE]                  AssertionFailedError      [CONTEXT]      double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;      [BUGGY]  xK  =  permutation[k]  *  point[k];  xNorm+=  Math.sqrt(test(xK));  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	427	427	2	replace	xK  =  permutation[k]  *  point[k];  xNorm+=  Math.sqrt(test(xK));	  double    xK    =    permutation[k]    *    point[k];    xNorm+=    Math.sqrt(test(xK));    	non-compiled	[CE]  class,  interface,  or  enum  expected	59	None	replace
97	[BUG]  [BUGGY]  xNorm+=  Math.sqrt(test(xK));  [CE]  class,  interface,  or  enum  expected  [FE]                    AssertionFailedError      [CONTEXT]      double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;      [BUGGY]  xNorm+=  Math.sqrt(test(xK));  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	427	427	2	replace	xNorm+=  Math.sqrt(test(xK));	  double    xK    =    permutation[k]    *    point[k];    xNorm+=    Math.sqrt(test(xK));    	non-compiled	[CE]  class,  interface,  or  enum  expected	59	None	replace
98	[BUG]  [BUGGY]  xK  =  permutation[k]  *  point[k];  xNorm+=  Math.sqrt(test(xK,  cost));  [CE]  class,  interface,  or  enum  expected  [FE]                      AssertionFailedError      [CONTEXT]      double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;      [BUGGY]  xK  =  permutation[k]  *  point[k];  xNorm+=  Math.sqrt(test(xK,  cost));  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	427	427	2	replace	xK  =  permutation[k]  *  point[k];  xNorm+=  Math.sqrt(test(xK,  cost));	  double    xK    =    permutation[k]    *    point[k];    xNorm+=    Math.sqrt(test(xK));    	non-compiled	[CE]  class,  interface,  or  enum  expected	59	None	replace
99	[BUG]  [BUGGY]  For(int  j  =  0;  j  <  diag.length;  ++j)  {  [CE]  '.class'  expected  [FE]        AssertionFailedError      [CONTEXT]      double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;      [BUGGY]  For(int  j  =  0;  j  <  diag.length;  ++j)  {  [BUGGY]      int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	427	427	2	replace	For(int  j  =  0;  j  <  diag.length;  ++j)  {	  for(int    j    =    0;    j    <    diag.length;    ++j)    {    for(int    j    =    0;    j    <    diag.length;    ++j)    {    	non-compiled	[CE]  '.class'  expected	36	None	replace
100	[BUG]  [BUGGY]  xNorm+=  oldX[0];  [CE]  class,  interface,  or  enum  expected  [FE]                    AssertionFailedError      [CONTEXT]      double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;      [BUGGY]  xNorm+=  oldX[0];  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	427	427	2	replace	xNorm+=  oldX[0];	  xNorm+=    oldX[xNorm];    	non-compiled	[CE]  class,  interface,  or  enum  expected	26	None	replace
101	[BUG]  [BUGGY]  xNorm+=  oldX[xNorm]  *  cost;  [CE]  class,  interface,  or  enum  expected  [FE]                      AssertionFailedError      [CONTEXT]      double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;      [BUGGY]  xNorm+=  oldX[xNorm]  *  cost;  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	427	427	2	replace	xNorm+=  oldX[xNorm]  *  cost;	  xNorm+=    oldX[xNorm];    	non-compiled	[CE]  class,  interface,  or  enum  expected	26	None	replace
102	[BUG]  [BUGGY]  xNorm+=  oldX[cost];  [CE]  class,  interface,  or  enum  expected  [FE]                        AssertionFailedError      [CONTEXT]      double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;      [BUGGY]  xNorm+=  oldX[cost];  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	427	427	2	replace	xNorm+=  oldX[cost];	  xNorm+=    oldX[xNorm];    	non-compiled	[CE]  class,  interface,  or  enum  expected	26	None	replace
103	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  1;  ++j)  {  double  j  =  0;  j  <  2;  ++j)  {  [CE]  illegal  start  of  type  [FE]        AssertionFailedError      [CONTEXT]      double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;      [BUGGY]  for(int  j  =  0;  j  <  1;  ++j)  {  double  j  =  0;  j  <  2;  ++j)  {  [BUGGY]      int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	427	427	2	replace	for(int  j  =  0;  j  <  1;  ++j)  {  double  j  =  0;  j  <  2;  ++j)  {	  for(int    j    =    0;    j    <    2;    ++j)    {    double    j    =    0;    j    <    2;    ++j)    {    	non-compiled	[CE]  illegal  start  of  type	99	None	replace
104	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  1;  ++j)  {  double  j  =  0;  j  <  2)  {  [CE]  illegal  start  of  type  [FE]          AssertionFailedError      [CONTEXT]      double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;      [BUGGY]  for(int  j  =  0;  j  <  1;  ++j)  {  double  j  =  0;  j  <  2)  {  [BUGGY]      int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	427	427	2	replace	for(int  j  =  0;  j  <  1;  ++j)  {  double  j  =  0;  j  <  2)  {	  for(int    j    =    0;    j    <    2;    ++j)    {    double    j    =    0;    j    <    2;    ++j)    {    	non-compiled	[CE]  illegal  start  of  type	99	None	replace
105	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;      [BUGGY]  for(int  j  =  0;  j  <  xNorm;  ++j)  {  [BUGGY]      int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	427	427	2	add	for(int  j  =  0;  j  <  xNorm;  ++j)  {	  for(int    j    =    0;    j    <    cost;    ++j)    {    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	19	14	replace
106	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  xNorm;  ++j)  {  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;      [BUGGY]  for(int  j  =  0;  j  <  xNorm;  ++j)  {  [BUGGY]      int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	427	427	2	replace	for(int  j  =  0;  j  <  xNorm;  ++j)  {	  for(int    j    =    0;    j    <    cost;    ++j)    {    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	19	14	replace
107	[BUG]  [BUGGY]  double  solveCols  =  diag[k]  *  point[k];  xNorm+=  xK  *  xNorm;  [CE]  class,  interface,  or  enum  expected  [FE]            AssertionFailedError      [CONTEXT]      double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;      [BUGGY]  double  solveCols  =  diag[k]  *  point[k];  xNorm+=  xK  *  xNorm;  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	427	427	2	replace	double  solveCols  =  diag[k]  *  point[k];  xNorm+=  xK  *  xNorm;	  double    solveCols    =    diag[k]    *    point[k];    xNorm+=    xK    *    xK;    	non-compiled	[CE]  class,  interface,  or  enum  expected	75	None	replace
108	[BUG]  [BUGGY]  double  solveCols  =  diag[k]  *  point[k];  xNorm+=  xK  *  cost;  [CE]  class,  interface,  or  enum  expected  [FE]              AssertionFailedError      [CONTEXT]      double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;      [BUGGY]  double  solveCols  =  diag[k]  *  point[k];  xNorm+=  xK  *  cost;  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	427	427	2	replace	double  solveCols  =  diag[k]  *  point[k];  xNorm+=  xK  *  cost;	  double    solveCols    =    diag[k]    *    point[k];    xNorm+=    xK    *    xK;    	non-compiled	[CE]  class,  interface,  or  enum  expected	75	None	replace
109	[BUG]  [BUGGY]  xNorm+=  xK  *  diag[k];  [CE]  class,  interface,  or  enum  expected  [FE]                AssertionFailedError      [CONTEXT]      double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;      [BUGGY]  xNorm+=  xK  *  diag[k];  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	427	427	2	replace	xNorm+=  xK  *  diag[k];	  double    solveCols    =    diag[k]    *    point[k];    xNorm+=    xK    *    xK;    	non-compiled	[CE]  class,  interface,  or  enum  expected	75	None	replace
110	[BUG]  [BUGGY]  double  xCols  =  diag[k]  *  point[k];  xNorm+=  xK  *  xNorm;  [CE]  class,  interface,  or  enum  expected  [FE]                  AssertionFailedError      [CONTEXT]      double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;      [BUGGY]  double  xCols  =  diag[k]  *  point[k];  xNorm+=  xK  *  xNorm;  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	427	427	2	replace	double  xCols  =  diag[k]  *  point[k];  xNorm+=  xK  *  xNorm;	  double    solveCols    =    diag[k]    *    point[k];    xNorm+=    xK    *    xK;    	non-compiled	[CE]  class,  interface,  or  enum  expected	75	None	replace
111	[BUG]  [BUGGY]  double  solvedCols  =  diag[k]  *  point[k];  xNorm+=  xN  *  xNorm;  [CE]  class,  interface,  or  enum  expected  [FE]                  AssertionFailedError      [CONTEXT]      double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;      [BUGGY]  double  solvedCols  =  diag[k]  *  point[k];  xNorm+=  xN  *  xNorm;  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	427	427	2	replace	double  solvedCols  =  diag[k]  *  point[k];  xNorm+=  xN  *  xNorm;	  double    solvedCols    =    diag[k]    *    point[k];    xNorm+=    xN    *    xK;    	non-compiled	[CE]  class,  interface,  or  enum  expected	5	None	replace
112	[BUG]  [BUGGY]  double  solvedCols  =  diag[k]  *  point[k];  xNorm+=  xN  *  cost;  [CE]  class,  interface,  or  enum  expected  [FE]                    AssertionFailedError      [CONTEXT]      double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;      [BUGGY]  double  solvedCols  =  diag[k]  *  point[k];  xNorm+=  xN  *  cost;  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	427	427	2	replace	double  solvedCols  =  diag[k]  *  point[k];  xNorm+=  xN  *  cost;	  double    solvedCols    =    diag[k]    *    point[k];    xNorm+=    xN    *    xK;    	non-compiled	[CE]  class,  interface,  or  enum  expected	5	None	replace
113	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  oldX.length;  ++j)  {  for(int  j  =  0;  j  <  oldX.length;  ++j)  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;      [BUGGY]  for(int  j  =  0;  j  <  oldX.length;  ++j)  {  for(int  j  =  0;  j  <  oldX.length;  ++j)  {  [BUGGY]      int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	427	427	2	replace	for(int    j    =    0;    j    <    oldX.length;    ++j)    {    for(int  j  =  0;  j  <  oldX.length;  ++j)  {	  	non-compiled	[CE]  illegal  start  of  expression	45	None	add
114	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  oldX.length;  ++j)  {  int  permutation[j]  =  permutation[j];  point[pj]  =  oldX[pj];  [CE]  ']'  expected  [FE]      AssertionFailedError    [CONTEXT]      double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;      [BUGGY]  for(int  j  =  0;  j  <  oldX.length;  ++j)  {  int  permutation[j]  =  permutation[j];  point[pj]  =  oldX[pj];  [BUGGY]      int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	427	427	2	replace	for(int    j    =    0;    j    <    oldX.length;    ++j)    {    int  permutation[j]  =  permutation[j];  point[pj]  =  oldX[pj];	  	non-compiled	[CE]  ']'  expected	45	None	add
115	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  oldX.length;  ++j)  {  int  j  =  0;  j  <  oldX.length;  ++j)  {  [CE]  >  expected  [FE]        AssertionFailedError    [CONTEXT]      double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;      [BUGGY]  for(int  j  =  0;  j  <  oldX.length;  ++j)  {  int  j  =  0;  j  <  oldX.length;  ++j)  {  [BUGGY]      int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	427	427	2	replace	for(int    j    =    0;    j    <    oldX.length;    ++j)    {    int  j  =  0;  j  <  oldX.length;  ++j)  {	  	non-compiled	[CE]  >  expected	45	None	add
116	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  oldX.length;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]      double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;      [BUGGY]  for(int  j  =  0;  j  <  oldX.length;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  [BUGGY]      int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	427	427	2	replace	for(int    j    =    0;    j    <    oldX.length;    ++j)    {    int  pj  =  permutation[j];  point[pj]  =  oldX[pj];	  	non-compiled	[CE]  illegal  start  of  expression	45	None	add
117	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  oldX.length;  ++j)  {  int  permutation[j]  =  permutation[j];  point[pj]  =  oldX[point];  [CE]  ']'  expected  [FE]            AssertionFailedError    [CONTEXT]      double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;      [BUGGY]  for(int  j  =  0;  j  <  oldX.length;  ++j)  {  int  permutation[j]  =  permutation[j];  point[pj]  =  oldX[point];  [BUGGY]      int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	427	427	2	replace	for(int    j    =    0;    j    <    oldX.length;    ++j)    {    int  permutation[j]  =  permutation[j];  point[pj]  =  oldX[point];	  	non-compiled	[CE]  ']'  expected	45	None	add
118	[BUG]  [BUGGY]  double  xNorm  =  diag[k]  *  cost[k];  xNorm+=  xK  *  xK;  [CE]  class,  interface,  or  enum  expected  [FE]              AssertionFailedError      [CONTEXT]      double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;      [BUGGY]  double  xNorm  =  diag[k]  *  cost[k];  xNorm+=  xK  *  xK;  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	427	427	2	replace	double  xNorm  =  diag[k]  *  cost[k];  xNorm+=  xK  *  xK;	  double    xNorm    =    diag[k]    *    point[k];    xNorm+=    xK    *    xK;    	non-compiled	[CE]  class,  interface,  or  enum  expected	63	None	replace
119	[BUG]  [BUGGY]  double  xNorm  =  diag[k]  *  cost;  xNorm+=  xK  *  xK;  [CE]  class,  interface,  or  enum  expected  [FE]                AssertionFailedError      [CONTEXT]      double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;      [BUGGY]  double  xNorm  =  diag[k]  *  cost;  xNorm+=  xK  *  xK;  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	427	427	2	replace	double  xNorm  =  diag[k]  *  cost;  xNorm+=  xK  *  xK;	  double    xNorm    =    diag[k]    *    point[k];    xNorm+=    xK    *    xK;    	non-compiled	[CE]  class,  interface,  or  enum  expected	63	None	replace
120	[BUG]  [BUGGY]  double  xNorm  =  diag[k]  *  point[k];  xNorm+=  xK  *  xNorm;  [CE]  class,  interface,  or  enum  expected  [FE]                  AssertionFailedError      [CONTEXT]      double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;      [BUGGY]  double  xNorm  =  diag[k]  *  point[k];  xNorm+=  xK  *  xNorm;  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	427	427	2	replace	double  xNorm  =  diag[k]  *  point[k];  xNorm+=  xK  *  xNorm;	  double    xNorm    =    diag[k]    *    point[k];    xNorm+=    xK    *    xK;    	non-compiled	[CE]  class,  interface,  or  enum  expected	63	None	replace
121	[BUG]  [BUGGY]  xNorm+=  xK  *  cost;  [CE]  class,  interface,  or  enum  expected  [FE]                    AssertionFailedError      [CONTEXT]      double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;      [BUGGY]  xNorm+=  xK  *  cost;  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	427	427	2	replace	xNorm+=  xK  *  cost;	  double    solvedCols    =    diag[k]    *    point[k];    xNorm+=    xK    *    cost;    	non-compiled	[CE]  class,  interface,  or  enum  expected	6	None	replace
122	[BUG]  [BUGGY]  double[]  solvedCols  =  diag[k]  *  costRelativeTolerance  +  2;  [CE]  class,  interface,  or  enum  expected  [FE]              AssertionFailedError      [CONTEXT]      double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;      [BUGGY]  double[]  solvedCols  =  diag[k]  *  costRelativeTolerance  +  2;  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	427	427	2	replace	double[]  solvedCols  =  diag[k]  *  costRelativeTolerance  +  2;	  double[]    solvedCols    =    diag[k]    *    costRelativeTolerance    +    1;    	non-compiled	[CE]  class,  interface,  or  enum  expected	62	None	replace
123	[BUG]  [BUGGY]  double[]  solvedCols  =  diag[k]  *  costRelativeTolerance  +  3;  [CE]  class,  interface,  or  enum  expected  [FE]                AssertionFailedError      [CONTEXT]      double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;      [BUGGY]  double[]  solvedCols  =  diag[k]  *  costRelativeTolerance  +  3;  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	427	427	2	replace	double[]  solvedCols  =  diag[k]  *  costRelativeTolerance  +  3;	  double[]    solvedCols    =    diag[k]    *    costRelativeTolerance    +    1;    	non-compiled	[CE]  class,  interface,  or  enum  expected	62	None	replace
124	[BUG]  [BUGGY]  xNorm+=  xK  *  cost[k];  [CE]  class,  interface,  or  enum  expected  [FE]              AssertionFailedError      [CONTEXT]      double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;      [BUGGY]  xNorm+=  xK  *  cost[k];  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	427	427	2	replace	xNorm+=  xK  *  cost[k];	  xNorm+=    xK    *    permutation[k];    	non-compiled	[CE]  class,  interface,  or  enum  expected	7	None	replace
125	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  point.length;  ++j)  {  for(int  j  =  0;  j  <  point.length;  ++j)  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;      [BUGGY]  for(int  j  =  0;  j  <  point.length;  ++j)  {  for(int  j  =  0;  j  <  point.length;  ++j)  {  [BUGGY]      int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	427	427	2	replace	for(int    j    =    0;    j    <    point.length;    ++j)    {    for(int  j  =  0;  j  <  point.length;  ++j)  {	  	non-compiled	[CE]  illegal  start  of  expression	47	None	add
126	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  point.length;  ++j)  {  int  permutation[j]  =  permutation[j];  point[pj]  =  oldX[pj];  [CE]  ']'  expected  [FE]      AssertionFailedError    [CONTEXT]      double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;      [BUGGY]  for(int  j  =  0;  j  <  point.length;  ++j)  {  int  permutation[j]  =  permutation[j];  point[pj]  =  oldX[pj];  [BUGGY]      int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	427	427	2	replace	for(int    j    =    0;    j    <    point.length;    ++j)    {    int  permutation[j]  =  permutation[j];  point[pj]  =  oldX[pj];	  	non-compiled	[CE]  ']'  expected	47	None	add
127	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  point.length;  ++j)  {  int  j  =  0;  j  <  point.length;  ++j)  {  [CE]  >  expected  [FE]        AssertionFailedError    [CONTEXT]      double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;      [BUGGY]  for(int  j  =  0;  j  <  point.length;  ++j)  {  int  j  =  0;  j  <  point.length;  ++j)  {  [BUGGY]      int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	427	427	2	replace	for(int    j    =    0;    j    <    point.length;    ++j)    {    int  j  =  0;  j  <  point.length;  ++j)  {	  	non-compiled	[CE]  >  expected	47	None	add
128	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  point.length;  ++j)  {  int  permutation[j]  =  permutation[j];  point[pj]  =  oldX[point[j];  [CE]  ']'  expected  [FE]          AssertionFailedError    [CONTEXT]      double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;      [BUGGY]  for(int  j  =  0;  j  <  point.length;  ++j)  {  int  permutation[j]  =  permutation[j];  point[pj]  =  oldX[point[j];  [BUGGY]      int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	427	427	2	replace	for(int    j    =    0;    j    <    point.length;    ++j)    {    int  permutation[j]  =  permutation[j];  point[pj]  =  oldX[point[j];	  	non-compiled	[CE]  ']'  expected	47	None	add
129	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  point.length;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]      double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;      [BUGGY]  for(int  j  =  0;  j  <  point.length;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  [BUGGY]      int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	427	427	2	replace	for(int    j    =    0;    j    <    point.length;    ++j)    {    int  pj  =  permutation[j];  point[pj]  =  oldX[pj];	  	non-compiled	[CE]  illegal  start  of  expression	47	None	add
130	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  permutation.length;  ++j)  {  for(int  j  =  0;  j  <  permutation.length;  ++j)  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;      [BUGGY]  for(int  j  =  0;  j  <  permutation.length;  ++j)  {  for(int  j  =  0;  j  <  permutation.length;  ++j)  {  [BUGGY]      int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	427	427	2	replace	for(int    j    =    0;    j    <    permutation.length;    ++j)    {    for(int  j  =  0;  j  <  permutation.length;  ++j)  {	  	non-compiled	[CE]  illegal  start  of  expression	20	None	add
131	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  permutation.length;  ++j)  {  int  j  =  0;  j  <  permutation.length;  ++j)  {  [CE]  >  expected  [FE]      AssertionFailedError    [CONTEXT]      double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;      [BUGGY]  for(int  j  =  0;  j  <  permutation.length;  ++j)  {  int  j  =  0;  j  <  permutation.length;  ++j)  {  [BUGGY]      int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	427	427	2	replace	for(int    j    =    0;    j    <    permutation.length;    ++j)    {    int  j  =  0;  j  <  permutation.length;  ++j)  {	  	non-compiled	[CE]  >  expected	20	None	add
132	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  permutation.length;  ++j)  {  int  permutation[j]  =  permutation[j];  point[pj]  =  oldX[pj];  [CE]  ']'  expected  [FE]        AssertionFailedError    [CONTEXT]      double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;      [BUGGY]  for(int  j  =  0;  j  <  permutation.length;  ++j)  {  int  permutation[j]  =  permutation[j];  point[pj]  =  oldX[pj];  [BUGGY]      int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	427	427	2	replace	for(int    j    =    0;    j    <    permutation.length;    ++j)    {    int  permutation[j]  =  permutation[j];  point[pj]  =  oldX[pj];	  	non-compiled	[CE]  ']'  expected	20	None	add
133	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  permutation.length;  ++j)  {  int  permutation[j]  =  permutation[j];  [CE]  ']'  expected  [FE]          AssertionFailedError    [CONTEXT]      double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;      [BUGGY]  for(int  j  =  0;  j  <  permutation.length;  ++j)  {  int  permutation[j]  =  permutation[j];  [BUGGY]      int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	427	427	2	replace	for(int    j    =    0;    j    <    permutation.length;    ++j)    {    int  permutation[j]  =  permutation[j];	  	non-compiled	[CE]  ']'  expected	20	None	add
134	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  permutation.length;  ++j)  {  int  permutation.length  =  0;  j  <  permutation.length;  ++j)  {  [CE]  ';'  expected  [FE]            AssertionFailedError    [CONTEXT]      double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;      [BUGGY]  for(int  j  =  0;  j  <  permutation.length;  ++j)  {  int  permutation.length  =  0;  j  <  permutation.length;  ++j)  {  [BUGGY]      int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	427	427	2	replace	for(int    j    =    0;    j    <    permutation.length;    ++j)    {    int  permutation.length  =  0;  j  <  permutation.length;  ++j)  {	  	non-compiled	[CE]  ';'  expected	20	None	add
135	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;      [BUGGY]  for(int  j  =  0;  j  <  preRed  +  1;  ++j)  {  [BUGGY]      int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	427	427	2	add	for(int  j  =  0;  j  <  preRed  +  1;  ++j)  {	  for(int    j    =    0;    j    <    preRed;    ++j)    {    	compilable	  [FE]  AssertionFailedError  	24	11	replace
136	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  preRed  +  1;  ++j)  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;      [BUGGY]  for(int  j  =  0;  j  <  preRed  +  1;  ++j)  {  [BUGGY]      int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	427	427	2	replace	for(int  j  =  0;  j  <  preRed  +  1;  ++j)  {	  for(int    j    =    0;    j    <    preRed;    ++j)    {    	compilable	  [FE]  AssertionFailedError  	24	11	replace
137	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]      AssertionFailedError    [CONTEXT]      double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;      [BUGGY]  for(int  j  =  0;  j  <  previousCost;  ++j)  {  [BUGGY]      int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	427	427	2	add	for(int  j  =  0;  j  <  previousCost;  ++j)  {	  for(int    j    =    0;    j    <    preRed;    ++j)    {    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	24	13	replace
138	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  previousCost;  ++j)  {  [FE]  ArrayIndexOutOfBoundsException  [FE]      AssertionFailedError    [CONTEXT]      double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;      [BUGGY]  for(int  j  =  0;  j  <  previousCost;  ++j)  {  [BUGGY]      int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	427	427	2	replace	for(int  j  =  0;  j  <  previousCost;  ++j)  {	  for(int    j    =    0;    j    <    preRed;    ++j)    {    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	24	13	replace
139	[BUG]  [BUGGY]  double  solvedCols  =  diag[k]  *  cost[k];  xNorm+=  xK  *  xNorm;  [CE]  class,  interface,  or  enum  expected  [FE]              AssertionFailedError      [CONTEXT]      double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;      [BUGGY]  double  solvedCols  =  diag[k]  *  cost[k];  xNorm+=  xK  *  xNorm;  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	427	427	2	replace	double  solvedCols  =  diag[k]  *  cost[k];  xNorm+=  xK  *  xNorm;	  double    solvedCols    =    diag[k]    *    point[k];    xNorm+=    xK    *    xNorm;    	non-compiled	[CE]  class,  interface,  or  enum  expected	3	None	replace
140	[BUG]  [BUGGY]  double  solvedCols  =  diag[k]  *  point[k];  xNorm+=  xK  *  xNorm  +  1;  [CE]  class,  interface,  or  enum  expected  [FE]                AssertionFailedError      [CONTEXT]      double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;      [BUGGY]  double  solvedCols  =  diag[k]  *  point[k];  xNorm+=  xK  *  xNorm  +  1;  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	427	427	2	replace	double  solvedCols  =  diag[k]  *  point[k];  xNorm+=  xK  *  xNorm  +  1;	  double    solvedCols    =    diag[k]    *    point[k];    xNorm+=    xK    *    xNorm;    	non-compiled	[CE]  class,  interface,  or  enum  expected	3	None	replace
141	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  permutation.length;  ++j)  {  Integer  j  =  0;  j  <  diag.length;  ++j)  {  [CE]  >  expected  [FE]        AssertionFailedError      [CONTEXT]      double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;      [BUGGY]  for(int  j  =  0;  j  <  permutation.length;  ++j)  {  Integer  j  =  0;  j  <  diag.length;  ++j)  {  [BUGGY]      int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	427	427	2	replace	for(int  j  =  0;  j  <  permutation.length;  ++j)  {  Integer  j  =  0;  j  <  diag.length;  ++j)  {	  for(int    j    =    0;    j    <    diag.length;    ++j)    {    Integer    j    =    0;    j    <    diag.length;    ++j)    {    	non-compiled	[CE]  >  expected	87	None	replace
142	[BUG]  [BUGGY]  Integer  j  =  0;  j  <  diag.length;  ++j)  {  [CE]  >  expected  [FE]          AssertionFailedError      [CONTEXT]      double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;      [BUGGY]  Integer  j  =  0;  j  <  diag.length;  ++j)  {  [BUGGY]      int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	427	427	2	replace	Integer  j  =  0;  j  <  diag.length;  ++j)  {	  for(int    j    =    0;    j    <    diag.length;    ++j)    {    Integer    j    =    0;    j    <    diag.length;    ++j)    {    	non-compiled	[CE]  >  expected	87	None	replace
143	[BUG]  [BUGGY]  Integer  j  =  0;  j  <  permutation.length;  ++j)  {  [CE]  >  expected  [FE]            AssertionFailedError      [CONTEXT]      double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;      [BUGGY]  Integer  j  =  0;  j  <  permutation.length;  ++j)  {  [BUGGY]      int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	427	427	2	replace	Integer  j  =  0;  j  <  permutation.length;  ++j)  {	  for(int    j    =    0;    j    <    diag.length;    ++j)    {    Integer    j    =    0;    j    <    diag.length;    ++j)    {    	non-compiled	[CE]  >  expected	87	None	replace
144	[BUG]  [BUGGY]  double  xNorm  =  oldX[k]  *  point[k];  xNorm+=  xNorm;  [CE]  class,  interface,  or  enum  expected  [FE]                  AssertionFailedError      [CONTEXT]      double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;      [BUGGY]  double  xNorm  =  oldX[k]  *  point[k];  xNorm+=  xNorm;  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	427	427	2	replace	double  xNorm  =  oldX[k]  *  point[k];  xNorm+=  xNorm;	  double    xNorm    =    diag[k]    *    point[k];    xNorm+=    oldX[xNorm];    	non-compiled	[CE]  class,  interface,  or  enum  expected	89	None	replace
145	[BUG]  [BUGGY]  double  xNorm  =  diag[k]  *  cost[k];  xNorm+=  oldX[xNorm];  [CE]  class,  interface,  or  enum  expected  [FE]                    AssertionFailedError      [CONTEXT]      double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;      [BUGGY]  double  xNorm  =  diag[k]  *  cost[k];  xNorm+=  oldX[xNorm];  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	427	427	2	replace	double  xNorm  =  diag[k]  *  cost[k];  xNorm+=  oldX[xNorm];	  double    xNorm    =    diag[k]    *    point[k];    xNorm+=    oldX[xNorm];    	non-compiled	[CE]  class,  interface,  or  enum  expected	89	None	replace
146	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  oldX,  ++j)  {  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;      [BUGGY]  for(int  j  =  0;  j  <  oldX,  ++j)  {  [BUGGY]      int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	427	427	2	replace	for(int  j  =  0;  j  <  oldX,  ++j)  {	  for(int    j    =    0;    j    <    oldX;    ++j)    {    	non-compiled	[CE]  ';'  expected	22	None	replace
147	[BUG]  [BUGGY]  xK  =  permutation[k]  *  point[k];  xNorm+=  Math.sqrt(value);  [CE]  class,  interface,  or  enum  expected  [FE]                AssertionFailedError      [CONTEXT]      double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;      [BUGGY]  xK  =  permutation[k]  *  point[k];  xNorm+=  Math.sqrt(value);  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	427	427	2	replace	xK  =  permutation[k]  *  point[k];  xNorm+=  Math.sqrt(value);	  double    xK    =    permutation[k]    *    point[k];    xNorm+=    Math.sqrt(value);    	non-compiled	[CE]  class,  interface,  or  enum  expected	58	None	replace
148	[BUG]  [BUGGY]  xK  =  permutation[k]  *  cost[k];  xNorm+=  Math.sqrt(value);  [CE]  class,  interface,  or  enum  expected  [FE]                  AssertionFailedError      [CONTEXT]      double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;      [BUGGY]  xK  =  permutation[k]  *  cost[k];  xNorm+=  Math.sqrt(value);  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	427	427	2	replace	xK  =  permutation[k]  *  cost[k];  xNorm+=  Math.sqrt(value);	  double    xK    =    permutation[k]    *    point[k];    xNorm+=    Math.sqrt(value);    	non-compiled	[CE]  class,  interface,  or  enum  expected	58	None	replace
149	[BUG]  [BUGGY]  xNorm+=  Math.sqrt(value);  [CE]  class,  interface,  or  enum  expected  [FE]                    AssertionFailedError      [CONTEXT]      double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;      [BUGGY]  xNorm+=  Math.sqrt(value);  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	427	427	2	replace	xNorm+=  Math.sqrt(value);	  double    xK    =    permutation[k]    *    point[k];    xNorm+=    Math.sqrt(value);    	non-compiled	[CE]  class,  interface,  or  enum  expected	58	None	replace
150	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  cost;  ++j)  {  for(int  j  =  0;  j  <  cost;  ++j)  {  [CE]  illegal  start  of  expression  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;      [BUGGY]  for(int  j  =  0;  j  <  cost;  ++j)  {  for(int  j  =  0;  j  <  cost;  ++j)  {  [BUGGY]      int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	427	427	2	replace	for(int    j    =    0;    j    <    cost;    ++j)    {    for(int  j  =  0;  j  <  cost;  ++j)  {	  	non-compiled	[CE]  illegal  start  of  expression	18	None	add
151	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  cost;  ++j)  {  int  permutation[j]  =  permutation[j];  [CE]  ']'  expected  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;      [BUGGY]  for(int  j  =  0;  j  <  cost;  ++j)  {  int  permutation[j]  =  permutation[j];  [BUGGY]      int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	427	427	2	replace	for(int    j    =    0;    j    <    cost;    ++j)    {    int  permutation[j]  =  permutation[j];	  	non-compiled	[CE]  ']'  expected	18	None	add
152	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  cost;  ++j)  {  For(int  j  =  0;  j  <  cost;  ++j)  {  [CE]  '.class'  expected  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;      [BUGGY]  for(int  j  =  0;  j  <  cost;  ++j)  {  For(int  j  =  0;  j  <  cost;  ++j)  {  [BUGGY]      int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	427	427	2	replace	for(int    j    =    0;    j    <    cost;    ++j)    {    For(int  j  =  0;  j  <  cost;  ++j)  {	  	non-compiled	[CE]  '.class'  expected	18	None	add
153	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  cost;  ++j)  {  for(int  j  =  0;  j  <  Cost;  ++j)  {  [CE]  illegal  start  of  expression  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]      double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;      [BUGGY]  for(int  j  =  0;  j  <  cost;  ++j)  {  for(int  j  =  0;  j  <  Cost;  ++j)  {  [BUGGY]      int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	427	427	2	replace	for(int    j    =    0;    j    <    cost;    ++j)    {    for(int  j  =  0;  j  <  Cost;  ++j)  {	  	non-compiled	[CE]  illegal  start  of  expression	18	None	add
154	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  cost;  ++j)  {  int  j  =  0;  j  <  cost;  ++j)  {  [CE]  >  expected  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]      double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;      [BUGGY]  for(int  j  =  0;  j  <  cost;  ++j)  {  int  j  =  0;  j  <  cost;  ++j)  {  [BUGGY]      int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	427	427	2	replace	for(int    j    =    0;    j    <    cost;    ++j)    {    int  j  =  0;  j  <  cost;  ++j)  {	  	non-compiled	[CE]  >  expected	18	None	add
155	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  permutation.length;  ++j)  {  int  diag  =  0;  j  <  diag.length;  ++j)  {  [CE]  >  expected  [FE]        AssertionFailedError      [CONTEXT]      double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;      [BUGGY]  for(int  j  =  0;  j  <  permutation.length;  ++j)  {  int  diag  =  0;  j  <  diag.length;  ++j)  {  [BUGGY]      int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	427	427	2	replace	for(int  j  =  0;  j  <  permutation.length;  ++j)  {  int  diag  =  0;  j  <  diag.length;  ++j)  {	  for(int    j    =    0;    j    <    diag.length;    ++j)    {    int    diag    =    0;    j    <    diag.length;    ++j)    {    	non-compiled	[CE]  >  expected	61	None	replace
156	[BUG]  [BUGGY]  int  diag  =  0;  j  <  diag.length;  ++j)  {  [CE]  >  expected  [FE]          AssertionFailedError      [CONTEXT]      double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;      [BUGGY]  int  diag  =  0;  j  <  diag.length;  ++j)  {  [BUGGY]      int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	427	427	2	replace	int  diag  =  0;  j  <  diag.length;  ++j)  {	  for(int    j    =    0;    j    <    diag.length;    ++j)    {    int    diag    =    0;    j    <    diag.length;    ++j)    {    	non-compiled	[CE]  >  expected	61	None	replace
157	[BUG]  [BUGGY]  int  diag  =  0;  j  <  permutation.length;  ++j)  {  [CE]  >  expected  [FE]            AssertionFailedError      [CONTEXT]      double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;      [BUGGY]  int  diag  =  0;  j  <  permutation.length;  ++j)  {  [BUGGY]      int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	427	427	2	replace	int  diag  =  0;  j  <  permutation.length;  ++j)  {	  for(int    j    =    0;    j    <    diag.length;    ++j)    {    int    diag    =    0;    j    <    diag.length;    ++j)    {    	non-compiled	[CE]  >  expected	61	None	replace
158	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;      [BUGGY]  for(int  j  =  0;  j  <  permutation.length  -  1;  ++j)  {  [BUGGY]      int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	427	427	2	add	for(int  j  =  0;  j  <  permutation.length  -  1;  ++j)  {	  for(int    j    =    0;    j    <    permutation.length;    ++j)    {    	compilable	  [FE]  AssertionFailedError  	21	12	replace
159	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  permutation.length  -  1;  ++j)  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;      [BUGGY]  for(int  j  =  0;  j  <  permutation.length  -  1;  ++j)  {  [BUGGY]      int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	427	427	2	replace	for(int  j  =  0;  j  <  permutation.length  -  1;  ++j)  {	  for(int    j    =    0;    j    <    permutation.length;    ++j)    {    	compilable	  [FE]  AssertionFailedError  	21	12	replace
160	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]      AssertionFailedError    [CONTEXT]      double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;      [BUGGY]  for(int  j  =  0;  j  <  permutation.length  +  1;  ++j)  {  [BUGGY]      int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	427	427	2	add	for(int  j  =  0;  j  <  permutation.length  +  1;  ++j)  {	  for(int    j    =    0;    j    <    permutation.length;    ++j)    {    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	21	15	replace
161	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  permutation.length  +  1;  ++j)  {  [FE]  ArrayIndexOutOfBoundsException  [FE]      AssertionFailedError    [CONTEXT]      double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;      [BUGGY]  for(int  j  =  0;  j  <  permutation.length  +  1;  ++j)  {  [BUGGY]      int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	427	427	2	replace	for(int  j  =  0;  j  <  permutation.length  +  1;  ++j)  {	  for(int    j    =    0;    j    <    permutation.length;    ++j)    {    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	21	15	replace
162	[BUG]  [BUGGY]  double  solvedCols  =  diag[k]  *  point[k];  xNorm+=  xW  *  xNorm;  [CE]  class,  interface,  or  enum  expected  [FE]                AssertionFailedError      [CONTEXT]      double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;      [BUGGY]  double  solvedCols  =  diag[k]  *  point[k];  xNorm+=  xW  *  xNorm;  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	427	427	2	replace	double  solvedCols  =  diag[k]  *  point[k];  xNorm+=  xW  *  xNorm;	  double    solvedCols    =    diag[k]    *    point[k];    xNorm+=    xW    *    xK;    	non-compiled	[CE]  class,  interface,  or  enum  expected	64	None	replace
163	[BUG]  [BUGGY]  double  solvedCols  =  diag[k]  *  point[k];  xNorm+=  xK  *  xW;  [CE]  class,  interface,  or  enum  expected  [FE]                  AssertionFailedError      [CONTEXT]      double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;      [BUGGY]  double  solvedCols  =  diag[k]  *  point[k];  xNorm+=  xK  *  xW;  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	427	427	2	replace	double  solvedCols  =  diag[k]  *  point[k];  xNorm+=  xK  *  xW;	  double    solvedCols    =    diag[k]    *    point[k];    xNorm+=    xW    *    xK;    	non-compiled	[CE]  class,  interface,  or  enum  expected	64	None	replace
164	[BUG]  [BUGGY]  xNorm+=  xW  *  xK;  [CE]  class,  interface,  or  enum  expected  [FE]                    AssertionFailedError      [CONTEXT]      double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;      [BUGGY]  xNorm+=  xW  *  xK;  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	427	427	2	replace	xNorm+=  xW  *  xK;	  double    solvedCols    =    diag[k]    *    point[k];    xNorm+=    xW    *    xK;    	non-compiled	[CE]  class,  interface,  or  enum  expected	64	None	replace
165	[BUG]  [BUGGY]  int  permutation[j]  =  cost;  [CE]  ']'  expected  [FE]                  AssertionFailedError      [CONTEXT]      double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;      [BUGGY]  int  permutation[j]  =  cost;  [BUGGY]      int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	427	427	2	replace	int  permutation[j]  =  cost;	  int    permutation[j]    =    previousCost;    	non-compiled	[CE]  ']'  expected	42	None	replace
166	[BUG]  [BUGGY]  int  permutation[j]  =  xNorm;  [CE]  ']'  expected  [FE]                    AssertionFailedError      [CONTEXT]      double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;      [BUGGY]  int  permutation[j]  =  xNorm;  [BUGGY]      int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	427	427	2	replace	int  permutation[j]  =  xNorm;	  int    permutation[j]    =    previousCost;    	non-compiled	[CE]  ']'  expected	42	None	replace
167	[BUG]  [BUGGY]  int  permutation[j]  =  preRed;  [CE]  ']'  expected  [FE]                      AssertionFailedError      [CONTEXT]      double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;      [BUGGY]  int  permutation[j]  =  preRed;  [BUGGY]      int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	427	427	2	replace	int  permutation[j]  =  preRed;	  int    permutation[j]    =    previousCost;    	non-compiled	[CE]  ']'  expected	42	None	replace
168	[BUG]  [BUGGY]  int  permutation[j]  =  previousCost  -  1;  [CE]  ']'  expected  [FE]                        AssertionFailedError      [CONTEXT]      double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;      [BUGGY]  int  permutation[j]  =  previousCost  -  1;  [BUGGY]      int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	427	427	2	replace	int  permutation[j]  =  previousCost  -  1;	  int    permutation[j]    =    previousCost;    	non-compiled	[CE]  ']'  expected	42	None	replace
169	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;      [BUGGY]  for(int  j  =  0;  j  <  oldX.length  -  1;  ++j)  {  [BUGGY]      int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	427	427	2	add	for(int  j  =  0;  j  <  oldX.length  -  1;  ++j)  {	  for(int    j    =    0;    j    <    oldX.length;    ++j)    {    	compilable	  [FE]  AssertionFailedError  	46	12	replace
170	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  oldX.length  -  1;  ++j)  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;      [BUGGY]  for(int  j  =  0;  j  <  oldX.length  -  1;  ++j)  {  [BUGGY]      int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	427	427	2	replace	for(int  j  =  0;  j  <  oldX.length  -  1;  ++j)  {	  for(int    j    =    0;    j    <    oldX.length;    ++j)    {    	compilable	  [FE]  AssertionFailedError  	46	12	replace
171	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;      [BUGGY]  for(int  j  =  0;  j  <  oldX.length  -  2;  ++j)  {  [BUGGY]      int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	427	427	2	add	for(int  j  =  0;  j  <  oldX.length  -  2;  ++j)  {	  for(int    j    =    0;    j    <    oldX.length;    ++j)    {    	compilable	  [FE]  AssertionFailedError  	46	12	replace
172	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  oldX.length  -  2;  ++j)  {  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;      [BUGGY]  for(int  j  =  0;  j  <  oldX.length  -  2;  ++j)  {  [BUGGY]      int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	427	427	2	replace	for(int  j  =  0;  j  <  oldX.length  -  2;  ++j)  {	  for(int    j    =    0;    j    <    oldX.length;    ++j)    {    	compilable	  [FE]  AssertionFailedError  	46	12	replace
173	[BUG]  [BUGGY]  double[]  solvedCols  =  coeff1  /  costRelativeTolerance;  [CE]  class,  interface,  or  enum  expected  [FE]                AssertionFailedError      [CONTEXT]      double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;      [BUGGY]  double[]  solvedCols  =  coeff1  /  costRelativeTolerance;  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	427	427	2	replace	double[]  solvedCols  =  coeff1  /  costRelativeTolerance;	  double[]    solvedCols    =    coeff1    *    costRelativeTolerance;    	non-compiled	[CE]  class,  interface,  or  enum  expected	13	None	replace
174	[BUG]  [BUGGY]  double[]  solvedCols  =  coeff1  *  costRelativeTolerance  +  1;  [CE]  class,  interface,  or  enum  expected  [FE]                  AssertionFailedError      [CONTEXT]      double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;      [BUGGY]  double[]  solvedCols  =  coeff1  *  costRelativeTolerance  +  1;  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	427	427	2	replace	double[]  solvedCols  =  coeff1  *  costRelativeTolerance  +  1;	  double[]    solvedCols    =    coeff1    *    costRelativeTolerance;    	non-compiled	[CE]  class,  interface,  or  enum  expected	13	None	replace
175	[BUG]  [BUGGY]  double[]  solvedCols  =  cost  *  coefrelativeTolerance;  [CE]  class,  interface,  or  enum  expected  [FE]                    AssertionFailedError      [CONTEXT]      double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;      [BUGGY]  double[]  solvedCols  =  cost  *  coefrelativeTolerance;  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	427	427	2	replace	double[]  solvedCols  =  cost  *  coefrelativeTolerance;	  double[]    solvedCols    =    coeff1    *    costRelativeTolerance;    	non-compiled	[CE]  class,  interface,  or  enum  expected	13	None	replace
176	[BUG]  [BUGGY]  int  permutation[j]  =  Math.min(permutation[j],  cost);  [CE]  ']'  expected  [FE]                    AssertionFailedError      [CONTEXT]      double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;      [BUGGY]  int  permutation[j]  =  Math.min(permutation[j],  cost);  [BUGGY]      int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	427	427	2	replace	int  permutation[j]  =  Math.min(permutation[j],  cost);	  int    permutation[j]    =    Math.min(permutation[j],    previousCost);    	non-compiled	[CE]  ']'  expected	43	None	replace
177	[BUG]  [BUGGY]  int  permutation[j]  =  Math.min(permutation[0],  previousCost);  [CE]  ']'  expected  [FE]                      AssertionFailedError      [CONTEXT]      double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;      [BUGGY]  int  permutation[j]  =  Math.min(permutation[0],  previousCost);  [BUGGY]      int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	427	427	2	replace	int  permutation[j]  =  Math.min(permutation[0],  previousCost);	  int    permutation[j]    =    Math.min(permutation[j],    previousCost);    	non-compiled	[CE]  ']'  expected	43	None	replace
178	[BUG]  [BUGGY]  int  permutation[j]  =  Math.min(permutation[j],  xNorm);  [CE]  ']'  expected  [FE]                        AssertionFailedError      [CONTEXT]      double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;      [BUGGY]  int  permutation[j]  =  Math.min(permutation[j],  xNorm);  [BUGGY]      int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	427	427	2	replace	int  permutation[j]  =  Math.min(permutation[j],  xNorm);	  int    permutation[j]    =    Math.min(permutation[j],    previousCost);    	non-compiled	[CE]  ']'  expected	43	None	replace
179	[BUG]  [BUGGY]  int  permutation[j]  =  Math.min(permutation[j],  previousCost,  cost);  [CE]  ']'  expected  [FE]                          AssertionFailedError      [CONTEXT]      double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;      [BUGGY]  int  permutation[j]  =  Math.min(permutation[j],  previousCost,  cost);  [BUGGY]      int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	427	427	2	replace	int  permutation[j]  =  Math.min(permutation[j],  previousCost,  cost);	  int    permutation[j]    =    Math.min(permutation[j],    previousCost);    	non-compiled	[CE]  ']'  expected	43	None	replace
180	[BUG]  [BUGGY]  xNorm+=  xK  *  maxCosine;  [CE]  class,  interface,  or  enum  expected  [FE]                  AssertionFailedError      [CONTEXT]      double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;      [BUGGY]  xNorm+=  xK  *  maxCosine;  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	427	427	2	replace	xNorm+=  xK  *  maxCosine;	  double    xK    =    permutation[k]    *    point[k];    xNorm+=    xK    *    maxCosine;    	non-compiled	[CE]  class,  interface,  or  enum  expected	15	None	replace
181	[BUG]  [BUGGY]  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  maxCosine;  [CE]  class,  interface,  or  enum  expected  [FE]                    AssertionFailedError      [CONTEXT]      double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;      [BUGGY]  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  maxCosine;  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	427	427	2	replace	double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  maxCosine;	  double    xK    =    permutation[k]    *    point[k];    xNorm+=    xK    *    maxCosine;    	non-compiled	[CE]  class,  interface,  or  enum  expected	15	None	replace
182	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  3;  ++j)  {  int  permutation[j]  =  permutation[j];  [CE]  ']'  expected  [FE]                AssertionFailedError      [CONTEXT]      double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;      [BUGGY]  for(int  j  =  0;  j  <  3;  ++j)  {  int  permutation[j]  =  permutation[j];  [BUGGY]      int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	427	427	2	replace	for(int  j  =  0;  j  <  3;  ++j)  {  int  permutation[j]  =  permutation[j];	  for(int    j    =    0;    j    <    2;    ++j)    {    int    permutation[j]    =    permutation[j];    	non-compiled	[CE]  ']'  expected	57	None	replace
183	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  1;  ++j)  {  int  permutation[j]  =  permutation[j];  [CE]  ']'  expected  [FE]                  AssertionFailedError      [CONTEXT]      double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;      [BUGGY]  for(int  j  =  0;  j  <  1;  ++j)  {  int  permutation[j]  =  permutation[j];  [BUGGY]      int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	427	427	2	replace	for(int  j  =  0;  j  <  1;  ++j)  {  int  permutation[j]  =  permutation[j];	  for(int    j    =    0;    j    <    2;    ++j)    {    int    permutation[j]    =    permutation[j];    	non-compiled	[CE]  ']'  expected	57	None	replace
184	[BUG]  [BUGGY]  double  xCols  =  diag[k]  *  point[k];  xNorm+=  xK  *  oldX[xNorm];  [CE]  class,  interface,  or  enum  expected  [FE]                    AssertionFailedError      [CONTEXT]      double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;      [BUGGY]  double  xCols  =  diag[k]  *  point[k];  xNorm+=  xK  *  oldX[xNorm];  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	427	427	2	replace	double  xCols  =  diag[k]  *  point[k];  xNorm+=  xK  *  oldX[xNorm];	  double    xCols    =    diag[k]    *    point[k];    xNorm+=    oldX[xNorm];    	non-compiled	[CE]  class,  interface,  or  enum  expected	90	None	replace
185	[BUG]  [BUGGY]  double  xCols  =  diag[k]  *  cost[k];  xNorm+=  oldX[xNorm];  [CE]  class,  interface,  or  enum  expected  [FE]                      AssertionFailedError      [CONTEXT]      double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;      [BUGGY]  double  xCols  =  diag[k]  *  cost[k];  xNorm+=  oldX[xNorm];  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	427	427	2	replace	double  xCols  =  diag[k]  *  cost[k];  xNorm+=  oldX[xNorm];	  double    xCols    =    diag[k]    *    point[k];    xNorm+=    oldX[xNorm];    	non-compiled	[CE]  class,  interface,  or  enum  expected	90	None	replace
186	[BUG]  [BUGGY]  for(int  j  =  1;  j  <  diag.length;  ++j)  {  for(int  j  =  1;  j  <  diag.length;  ++j)  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;      [BUGGY]  for(int  j  =  1;  j  <  diag.length;  ++j)  {  for(int  j  =  1;  j  <  diag.length;  ++j)  {  [BUGGY]      int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	427	427	2	replace	for(int    j    =    1;    j    <    diag.length;    ++j)    {    for(int  j  =  1;  j  <  diag.length;  ++j)  {	  	non-compiled	[CE]  illegal  start  of  expression	49	None	add
187	[BUG]  [BUGGY]  for(int  j  =  1;  j  <  diag.length;  ++j)  {  int  permutation[j]  =  permutation[j];  point[pj]  =  oldX[pj];  [CE]  ']'  expected  [FE]      AssertionFailedError    [CONTEXT]      double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;      [BUGGY]  for(int  j  =  1;  j  <  diag.length;  ++j)  {  int  permutation[j]  =  permutation[j];  point[pj]  =  oldX[pj];  [BUGGY]      int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	427	427	2	replace	for(int    j    =    1;    j    <    diag.length;    ++j)    {    int  permutation[j]  =  permutation[j];  point[pj]  =  oldX[pj];	  	non-compiled	[CE]  ']'  expected	49	None	add
188	[BUG]  [BUGGY]  for(int  j  =  1;  j  <  diag.length;  ++j)  {  int  j  =  1;  j  <  diag.length;  ++j)  {  [CE]  >  expected  [FE]        AssertionFailedError    [CONTEXT]      double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;      [BUGGY]  for(int  j  =  1;  j  <  diag.length;  ++j)  {  int  j  =  1;  j  <  diag.length;  ++j)  {  [BUGGY]      int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	427	427	2	replace	for(int    j    =    1;    j    <    diag.length;    ++j)    {    int  j  =  1;  j  <  diag.length;  ++j)  {	  	non-compiled	[CE]  >  expected	49	None	add
189	[BUG]  [BUGGY]  for(int  j  =  1;  j  <  diag.length;  ++j)  {  int  permutation[j]  =  permutation[j];  point[pj]  =  oldX[permutation[j];  [CE]  ']'  expected  [FE]          AssertionFailedError    [CONTEXT]      double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;      [BUGGY]  for(int  j  =  1;  j  <  diag.length;  ++j)  {  int  permutation[j]  =  permutation[j];  point[pj]  =  oldX[permutation[j];  [BUGGY]      int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	427	427	2	replace	for(int    j    =    1;    j    <    diag.length;    ++j)    {    int  permutation[j]  =  permutation[j];  point[pj]  =  oldX[permutation[j];	  	non-compiled	[CE]  ']'  expected	49	None	add
190	[BUG]  [BUGGY]  for(int  j  =  1;  j  <  diag.length;  ++j)  {  int  permutation[j]  =  permutation[j];  point[pj]  =  oldX[point];  [CE]  ']'  expected  [FE]            AssertionFailedError    [CONTEXT]      double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;      [BUGGY]  for(int  j  =  1;  j  <  diag.length;  ++j)  {  int  permutation[j]  =  permutation[j];  point[pj]  =  oldX[point];  [BUGGY]      int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	427	427	2	replace	for(int    j    =    1;    j    <    diag.length;    ++j)    {    int  permutation[j]  =  permutation[j];  point[pj]  =  oldX[point];	  	non-compiled	[CE]  ']'  expected	49	None	add
191	[BUG]  [BUGGY]  xK  =  permutation[k]  *  oldX;  xNorm+=  xK  *  point[k];  [CE]  class,  interface,  or  enum  expected  [FE]                  AssertionFailedError      [CONTEXT]      double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;      [BUGGY]  xK  =  permutation[k]  *  oldX;  xNorm+=  xK  *  point[k];  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	427	427	2	replace	xK  =  permutation[k]  *  oldX;  xNorm+=  xK  *  point[k];	  xK    =    permutation[k]    *    point[k];    xNorm+=    xK    *    oldX;    	non-compiled	[CE]  class,  interface,  or  enum  expected	82	None	replace
192	[BUG]  [BUGGY]  double  xNorm  =  permutation[k]  *  point[k];  xNorm+=  oldX[xNorm];  [CE]  class,  interface,  or  enum  expected  [FE]                AssertionFailedError      [CONTEXT]      double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;      [BUGGY]  double  xNorm  =  permutation[k]  *  point[k];  xNorm+=  oldX[xNorm];  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	427	427	2	replace	double  xNorm  =  permutation[k]  *  point[k];  xNorm+=  oldX[xNorm];	  double    xNorm    =    diag[k]    *    permutation[k];    xNorm+=    oldX[xNorm];    	non-compiled	[CE]  class,  interface,  or  enum  expected	95	None	replace
193	[BUG]  [BUGGY]  double  xNorm  =  permutation[k]  *  diagR[k];  xNorm+=  oldX[xNorm];  [CE]  class,  interface,  or  enum  expected  [FE]                  AssertionFailedError      [CONTEXT]      double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;      [BUGGY]  double  xNorm  =  permutation[k]  *  diagR[k];  xNorm+=  oldX[xNorm];  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	427	427	2	replace	double  xNorm  =  permutation[k]  *  diagR[k];  xNorm+=  oldX[xNorm];	  double    xNorm    =    diag[k]    *    permutation[k];    xNorm+=    oldX[xNorm];    	non-compiled	[CE]  class,  interface,  or  enum  expected	95	None	replace
194	[BUG]  [BUGGY]  xK  =  permutation[k]  *  point[k];  xNorm+=  diag[0  *  xNorm;  [CE]  ']'  expected  [FE]                AssertionFailedError      [CONTEXT]      double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;      [BUGGY]  xK  =  permutation[k]  *  point[k];  xNorm+=  diag[0  *  xNorm;  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	427	427	2	replace	xK  =  permutation[k]  *  point[k];  xNorm+=  diag[0  *  xNorm;	  double    xK    =    permutation[k]    *    point[k];    xNorm+=    diag[xK    *    xNorm;    	non-compiled	[CE]  ']'  expected	66	None	replace
195	[BUG]  [BUGGY]  xK  =  permutation[k]  *  point[k];  xNorm+=  diag[xK  *  xNorm;  [CE]  ']'  expected  [FE]                  AssertionFailedError      [CONTEXT]      double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;      [BUGGY]  xK  =  permutation[k]  *  point[k];  xNorm+=  diag[xK  *  xNorm;  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	427	427	2	replace	xK  =  permutation[k]  *  point[k];  xNorm+=  diag[xK  *  xNorm;	  double    xK    =    permutation[k]    *    point[k];    xNorm+=    diag[xK    *    xNorm;    	non-compiled	[CE]  ']'  expected	66	None	replace
196	[BUG]  [BUGGY]  int  permutation[j]  =  permutation[j];  point[pj]  =  oldX[permutation[j];  [CE]  ']'  expected  [FE]              AssertionFailedError      [CONTEXT]      double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;      [BUGGY]  int  permutation[j]  =  permutation[j];  point[pj]  =  oldX[permutation[j];  [BUGGY]      int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	427	427	2	replace	int  permutation[j]  =  permutation[j];  point[pj]  =  oldX[permutation[j];	  for(int    j    =    0;    j    <    2;    ++j)    {    int    permutation[j]    =    permutation[j];    point[pj]    =    oldX[permutation[j];    	non-compiled	[CE]  ']'  expected	56	None	replace
197	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  2;  ++j)  {  int  permutation[j]  =  permutation[j];  point[pj]  =  oldX[permutation[j];  }  [CE]  ']'  expected  [FE]                AssertionFailedError      [CONTEXT]      double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;      [BUGGY]  for(int  j  =  0;  j  <  2;  ++j)  {  int  permutation[j]  =  permutation[j];  point[pj]  =  oldX[permutation[j];  }  [BUGGY]      int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	427	427	2	replace	for(int  j  =  0;  j  <  2;  ++j)  {  int  permutation[j]  =  permutation[j];  point[pj]  =  oldX[permutation[j];  }	  for(int    j    =    0;    j    <    2;    ++j)    {    int    permutation[j]    =    permutation[j];    point[pj]    =    oldX[permutation[j];    	non-compiled	[CE]  ']'  expected	56	None	replace
198	[BUG]  [BUGGY]  int  pj  =  permutation[j];  point[pj]  =  oldX[permutation[j];  [CE]  ']'  expected  [FE]                  AssertionFailedError      [CONTEXT]      double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;      [BUGGY]  int  pj  =  permutation[j];  point[pj]  =  oldX[permutation[j];  [BUGGY]      int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	427	427	2	replace	int  pj  =  permutation[j];  point[pj]  =  oldX[permutation[j];	  for(int    j    =    0;    j    <    2;    ++j)    {    int    permutation[j]    =    permutation[j];    point[pj]    =    oldX[permutation[j];    	non-compiled	[CE]  ']'  expected	56	None	replace
199	[BUG]  [BUGGY]  int  oldX  =  point[k]  *  diag[k];  [CE]  class,  interface,  or  enum  expected  [FE]                AssertionFailedError      [CONTEXT]      double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;      [BUGGY]  int  oldX  =  point[k]  *  diag[k];  [BUGGY]      int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	427	427	2	replace	int  oldX  =  point[k]  *  diag[k];	  int    oldX    =    diag[k]    *    point[k];    	non-compiled	[CE]  class,  interface,  or  enum  expected	96	None	replace
200	[BUG]  [BUGGY]  int  oldX  =  diag[k]  *  cost[k];  [CE]  class,  interface,  or  enum  expected  [FE]                  AssertionFailedError      [CONTEXT]      double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;      [BUGGY]  int  oldX  =  diag[k]  *  cost[k];  [BUGGY]      int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	427	427	2	replace	int  oldX  =  diag[k]  *  cost[k];	  int    oldX    =    diag[k]    *    point[k];    	non-compiled	[CE]  class,  interface,  or  enum  expected	96	None	replace
201	[BUG]  [BUGGY]  int  oldX  =  diag[k]  *  point[k]  +  cost;  [CE]  class,  interface,  or  enum  expected  [FE]                    AssertionFailedError      [CONTEXT]      double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;      [BUGGY]  int  oldX  =  diag[k]  *  point[k]  +  cost;  [BUGGY]      int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	427	427	2	replace	int  oldX  =  diag[k]  *  point[k]  +  cost;	  int    oldX    =    diag[k]    *    point[k];    	non-compiled	[CE]  class,  interface,  or  enum  expected	96	None	replace
202	[BUG]  [BUGGY]  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  [CE]  class,  interface,  or  enum  expected  [FE]          AssertionFailedError      [CONTEXT]      double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;      [BUGGY]  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  [BUGGY]      int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	427	427	2	replace	int  pj  =  permutation[j];  point[pj]  =  oldX[pj];	  for(int    j    =    0;    j    <    2;    ++j)    {    int    permutation[j]    =    permutation[j];    point[pj]    =    oldX[pj];    	non-compiled	[CE]  class,  interface,  or  enum  expected	54	None	replace
203	[BUG]  [BUGGY]  int  permutation[j]  =  permutation[j];  point[pj]  =  oldX[pj];  [CE]  ']'  expected  [FE]            AssertionFailedError      [CONTEXT]      double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;      [BUGGY]  int  permutation[j]  =  permutation[j];  point[pj]  =  oldX[pj];  [BUGGY]      int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	427	427	2	replace	int  permutation[j]  =  permutation[j];  point[pj]  =  oldX[pj];	  for(int    j    =    0;    j    <    2;    ++j)    {    int    permutation[j]    =    permutation[j];    point[pj]    =    oldX[pj];    	non-compiled	[CE]  ']'  expected	54	None	replace
204	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  2;  ++j)  {  int  permutation[j]  =  permutation[j];  point[pj]  =  oldX[pj];  }  [CE]  ']'  expected  [FE]              AssertionFailedError      [CONTEXT]      double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;      [BUGGY]  for(int  j  =  0;  j  <  2;  ++j)  {  int  permutation[j]  =  permutation[j];  point[pj]  =  oldX[pj];  }  [BUGGY]      int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	427	427	2	replace	for(int  j  =  0;  j  <  2;  ++j)  {  int  permutation[j]  =  permutation[j];  point[pj]  =  oldX[pj];  }	  for(int    j    =    0;    j    <    2;    ++j)    {    int    permutation[j]    =    permutation[j];    point[pj]    =    oldX[pj];    	non-compiled	[CE]  ']'  expected	54	None	replace
205	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  3;  ++j)  {  int  permutation[j]  =  permutation[j];  point[pj]  =  oldX[pj];  }  [CE]  ']'  expected  [FE]                AssertionFailedError      [CONTEXT]      double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;      [BUGGY]  for(int  j  =  0;  j  <  3;  ++j)  {  int  permutation[j]  =  permutation[j];  point[pj]  =  oldX[pj];  }  [BUGGY]      int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	427	427	2	replace	for(int  j  =  0;  j  <  3;  ++j)  {  int  permutation[j]  =  permutation[j];  point[pj]  =  oldX[pj];  }	  for(int    j    =    0;    j    <    2;    ++j)    {    int    permutation[j]    =    permutation[j];    point[pj]    =    oldX[pj];    	non-compiled	[CE]  ']'  expected	54	None	replace
206	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  point.length;  ++j)  {  int  permutation[j]  =  permutation[j];  point[pj]  =  oldX[pj];  }  [CE]  ']'  expected  [FE]          AssertionFailedError      [CONTEXT]      double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;      [BUGGY]  for(int  j  =  0;  j  <  point.length;  ++j)  {  int  permutation[j]  =  permutation[j];  point[pj]  =  oldX[pj];  }  [BUGGY]      int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	427	427	2	replace	for(int  j  =  0;  j  <  point.length;  ++j)  {  int  permutation[j]  =  permutation[j];  point[pj]  =  oldX[pj];  }	  for(int    j    =    0;    j    <    diag.length;    ++j)    {    int    permutation[j]    =    permutation[j];    point[pj]    =    oldX[pj];    	non-compiled	[CE]  ']'  expected	37	None	replace
207	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  permutation.length;  ++j)  {  int  permutation[j]  =  permutation[j];  point[pj]  =  oldX[pj];  }  [CE]  ']'  expected  [FE]            AssertionFailedError      [CONTEXT]      double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;      [BUGGY]  for(int  j  =  0;  j  <  permutation.length;  ++j)  {  int  permutation[j]  =  permutation[j];  point[pj]  =  oldX[pj];  }  [BUGGY]      int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	427	427	2	replace	for(int  j  =  0;  j  <  permutation.length;  ++j)  {  int  permutation[j]  =  permutation[j];  point[pj]  =  oldX[pj];  }	  for(int    j    =    0;    j    <    diag.length;    ++j)    {    int    permutation[j]    =    permutation[j];    point[pj]    =    oldX[pj];    	non-compiled	[CE]  ']'  expected	37	None	replace
208	[BUG]  [BUGGY]  int  permutation[j]  =  permutation[0];  [CE]  ']'  expected  [FE]                AssertionFailedError      [CONTEXT]      double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;      [BUGGY]  int  permutation[j]  =  permutation[0];  [BUGGY]      int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	427	427	2	replace	int  permutation[j]  =  permutation[0];	  int    permutation[j]    =    permutation[j];    	non-compiled	[CE]  ']'  expected	41	None	replace
209	[BUG]  [BUGGY]  int  permutation[j]  =  permutation[i];  [CE]  ']'  expected  [FE]                  AssertionFailedError      [CONTEXT]      double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;      [BUGGY]  int  permutation[j]  =  permutation[i];  [BUGGY]      int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	427	427	2	replace	int  permutation[j]  =  permutation[i];	  int    permutation[j]    =    permutation[j];    	non-compiled	[CE]  ']'  expected	41	None	replace
210	[BUG]  [BUGGY]  int  permutation[j]  =  permutation[k];  [CE]  ']'  expected  [FE]                    AssertionFailedError      [CONTEXT]      double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;      [BUGGY]  int  permutation[j]  =  permutation[k];  [BUGGY]      int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	427	427	2	replace	int  permutation[j]  =  permutation[k];	  int    permutation[j]    =    permutation[j];    	non-compiled	[CE]  ']'  expected	41	None	replace
211	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  1;  ++j)  {  for(int  j  =  0;  j  <  1;  ++j)  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;      [BUGGY]  for(int  j  =  0;  j  <  1;  ++j)  {  for(int  j  =  0;  j  <  1;  ++j)  {  [BUGGY]      int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	427	427	2	replace	for(int    j    =    0;    j    <    1;    ++j)    {    for(int  j  =  0;  j  <  1;  ++j)  {	  	non-compiled	[CE]  illegal  start  of  expression	32	None	add
212	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  1;  ++j)  {  int  permutation[j]  =  permutation[j];  point[pj]  =  oldX[pj];  [CE]  ']'  expected  [FE]      AssertionFailedError    [CONTEXT]      double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;      [BUGGY]  for(int  j  =  0;  j  <  1;  ++j)  {  int  permutation[j]  =  permutation[j];  point[pj]  =  oldX[pj];  [BUGGY]      int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	427	427	2	replace	for(int    j    =    0;    j    <    1;    ++j)    {    int  permutation[j]  =  permutation[j];  point[pj]  =  oldX[pj];	  	non-compiled	[CE]  ']'  expected	32	None	add
213	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  1;  ++j)  {  int  j  =  0;  j  <  1;  ++j)  {  [CE]  illegal  start  of  type  [FE]        AssertionFailedError    [CONTEXT]      double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;      [BUGGY]  for(int  j  =  0;  j  <  1;  ++j)  {  int  j  =  0;  j  <  1;  ++j)  {  [BUGGY]      int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	427	427	2	replace	for(int    j    =    0;    j    <    1;    ++j)    {    int  j  =  0;  j  <  1;  ++j)  {	  	non-compiled	[CE]  illegal  start  of  type	32	None	add
214	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  1;  ++j)  {  int  permutation[j]  =  permutation[j];  point[pj]  =  oldX[permutation[j];  [CE]  ']'  expected  [FE]          AssertionFailedError    [CONTEXT]      double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;      [BUGGY]  for(int  j  =  0;  j  <  1;  ++j)  {  int  permutation[j]  =  permutation[j];  point[pj]  =  oldX[permutation[j];  [BUGGY]      int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	427	427	2	replace	for(int    j    =    0;    j    <    1;    ++j)    {    int  permutation[j]  =  permutation[j];  point[pj]  =  oldX[permutation[j];	  	non-compiled	[CE]  ']'  expected	32	None	add
215	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  diag.length);  ++j)  {  [CE]  ';'  expected  [FE]          AssertionFailedError      [CONTEXT]      double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;      [BUGGY]  for(int  j  =  0;  j  <  diag.length);  ++j)  {  [BUGGY]      int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	427	427	2	replace	for(int  j  =  0;  j  <  diag.length);  ++j)  {	  for(int    j    =    0;    j    <    diag.length;    ++j)    {    for(int    j    =    0;    j    <    diag.length);    ++j)    {    	non-compiled	[CE]  ';'  expected	88	None	replace
216	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  permutation.length;  ++j)  {  int  permutation[j]  =  permutation[j];  }  [CE]  ']'  expected  [FE]                AssertionFailedError      [CONTEXT]      double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;      [BUGGY]  for(int  j  =  0;  j  <  permutation.length;  ++j)  {  int  permutation[j]  =  permutation[j];  }  [BUGGY]      int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	427	427	2	replace	for(int  j  =  0;  j  <  permutation.length;  ++j)  {  int  permutation[j]  =  permutation[j];  }	  for(int    j    =    0;    j    <    diag.length;    ++j)    {    int    permutation[j]    =    permutation[j];    	non-compiled	[CE]  ']'  expected	40	None	replace
217	[BUG]  [BUGGY]  xK  =  diag[k]  *  cost[k];  xNorm+=  xK  *  xK;  [CE]  class,  interface,  or  enum  expected  [FE]            AssertionFailedError      [CONTEXT]      double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;      [BUGGY]  xK  =  diag[k]  *  cost[k];  xNorm+=  xK  *  xK;  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	427	427	2	replace	xK  =  diag[k]  *  cost[k];  xNorm+=  xK  *  xK;	  double    xK    =    diag[k]    *    point[k];    xNorm+=    xK    *    xK;    	non-compiled	[CE]  class,  interface,  or  enum  expected	85	None	replace
218	[BUG]  [BUGGY]  double  xK  =  diag[k]  *  cost[k];  xNorm+=  xK  *  xK;  [CE]  class,  interface,  or  enum  expected  [FE]              AssertionFailedError      [CONTEXT]      double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;      [BUGGY]  double  xK  =  diag[k]  *  cost[k];  xNorm+=  xK  *  xK;  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	427	427	2	replace	double  xK  =  diag[k]  *  cost[k];  xNorm+=  xK  *  xK;	  double    xK    =    diag[k]    *    point[k];    xNorm+=    xK    *    xK;    	non-compiled	[CE]  class,  interface,  or  enum  expected	85	None	replace
219	[BUG]  [BUGGY]  double  xK  =  point[k]  *  diagR[k];  xNorm+=  xK  *  xK;  [CE]  class,  interface,  or  enum  expected  [FE]                AssertionFailedError      [CONTEXT]      double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;      [BUGGY]  double  xK  =  point[k]  *  diagR[k];  xNorm+=  xK  *  xK;  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	427	427	2	replace	double  xK  =  point[k]  *  diagR[k];  xNorm+=  xK  *  xK;	  double    xK    =    diag[k]    *    point[k];    xNorm+=    xK    *    xK;    	non-compiled	[CE]  class,  interface,  or  enum  expected	85	None	replace
220	[BUG]  [BUGGY]  int  permutation[j]  =  Math.min(permutation[0],  preRed);  [CE]  ']'  expected  [FE]                      AssertionFailedError      [CONTEXT]      double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;      [BUGGY]  int  permutation[j]  =  Math.min(permutation[0],  preRed);  [BUGGY]      int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	427	427	2	replace	int  permutation[j]  =  Math.min(permutation[0],  preRed);	  int    permutation[j]    =    Math.min(permutation[j],    preRed);    	non-compiled	[CE]  ']'  expected	44	None	replace
221	[BUG]  [BUGGY]  int  permutation[j]  =  Math.min(permutation[j],  preRed  +  1);  [CE]  ']'  expected  [FE]                        AssertionFailedError      [CONTEXT]      double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;      [BUGGY]  int  permutation[j]  =  Math.min(permutation[j],  preRed  +  1);  [BUGGY]      int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	427	427	2	replace	int  permutation[j]  =  Math.min(permutation[j],  preRed  +  1);	  int    permutation[j]    =    Math.min(permutation[j],    preRed);    	non-compiled	[CE]  ']'  expected	44	None	replace
222	[BUG]  [BUGGY]  double  xK  =  permutation[k]  *  point[k];  xNorm+=  Math.sqrt(xNorm);  [CE]  class,  interface,  or  enum  expected  [FE]                AssertionFailedError      [CONTEXT]      double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;      [BUGGY]  double  xK  =  permutation[k]  *  point[k];  xNorm+=  Math.sqrt(xNorm);  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	427	427	2	replace	double  xK  =  permutation[k]  *  point[k];  xNorm+=  Math.sqrt(xNorm);	  double    xK    =    permutation[k]    *    point[k];    xNorm+=    Math.sqrt(cost);    	non-compiled	[CE]  class,  interface,  or  enum  expected	10	None	replace
223	[BUG]  [BUGGY]  xNorm+=  xK  *  tmpVec  +  1;  [CE]  class,  interface,  or  enum  expected  [FE]            AssertionFailedError      [CONTEXT]      double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;      [BUGGY]  xNorm+=  xK  *  tmpVec  +  1;  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	427	427	2	replace	xNorm+=  xK  *  tmpVec  +  1;	  xNorm+=    xK    *    tmpVec;    	non-compiled	[CE]  class,  interface,  or  enum  expected	16	None	replace
224	[BUG]  [BUGGY]  xNorm+=  xK  *  xk;  [CE]  class,  interface,  or  enum  expected  [FE]              AssertionFailedError      [CONTEXT]      double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;      [BUGGY]  xNorm+=  xK  *  xk;  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	427	427	2	replace	xNorm+=  xK  *  xk;	  xNorm+=    xK    *    tmpVec;    	non-compiled	[CE]  class,  interface,  or  enum  expected	16	None	replace
225	[BUG]  [BUGGY]  double  solvedCols  =  diag[k]  *  point[k];  xNorm+=  xK  *  oldX[1];  [CE]  class,  interface,  or  enum  expected  [FE]                    AssertionFailedError      [CONTEXT]      double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;      [BUGGY]  double  solvedCols  =  diag[k]  *  point[k];  xNorm+=  xK  *  oldX[1];  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	427	427	2	replace	double  solvedCols  =  diag[k]  *  point[k];  xNorm+=  xK  *  oldX[1];	  double    solvedCols    =    diag[k]    *    point[k];    xNorm+=    oldX[1];    	non-compiled	[CE]  class,  interface,  or  enum  expected	71	None	replace
226	[BUG]  [BUGGY]  double  solvedCols  =  diag[k]  *  point[k];  xNorm+=  xNorm  *  oldX[1];  [CE]  class,  interface,  or  enum  expected  [FE]                      AssertionFailedError      [CONTEXT]      double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;      [BUGGY]  double  solvedCols  =  diag[k]  *  point[k];  xNorm+=  xNorm  *  oldX[1];  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	427	427	2	replace	double  solvedCols  =  diag[k]  *  point[k];  xNorm+=  xNorm  *  oldX[1];	  double    solvedCols    =    diag[k]    *    point[k];    xNorm+=    oldX[1];    	non-compiled	[CE]  class,  interface,  or  enum  expected	71	None	replace
227	[BUG]  [BUGGY]  double  solvedCols  =  oldX[k]  *  point[k];  xNorm+=  xNorm[1];  [CE]  class,  interface,  or  enum  expected  [FE]                        AssertionFailedError      [CONTEXT]      double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;      [BUGGY]  double  solvedCols  =  oldX[k]  *  point[k];  xNorm+=  xNorm[1];  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	427	427	2	replace	double  solvedCols  =  oldX[k]  *  point[k];  xNorm+=  xNorm[1];	  double    solvedCols    =    diag[k]    *    point[k];    xNorm+=    oldX[1];    	non-compiled	[CE]  class,  interface,  or  enum  expected	71	None	replace
228	[BUG]  [BUGGY]  double  solvedCols  =  diag[k]  *  point[k];  xNorm+=  xK  *  oldX[i];  [CE]  class,  interface,  or  enum  expected  [FE]                      AssertionFailedError      [CONTEXT]      double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;      [BUGGY]  double  solvedCols  =  diag[k]  *  point[k];  xNorm+=  xK  *  oldX[i];  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	427	427	2	replace	double  solvedCols  =  diag[k]  *  point[k];  xNorm+=  xK  *  oldX[i];	  double    solvedCols    =    diag[k]    *    point[k];    xNorm+=    oldX[i];    	non-compiled	[CE]  class,  interface,  or  enum  expected	72	None	replace
229	[BUG]  [BUGGY]  double  solvedCols  =  diag[k]  *  point[k];  xNorm+=  xNorm  *  oldX[i];  [CE]  class,  interface,  or  enum  expected  [FE]                        AssertionFailedError      [CONTEXT]      double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;      [BUGGY]  double  solvedCols  =  diag[k]  *  point[k];  xNorm+=  xNorm  *  oldX[i];  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	427	427	2	replace	double  solvedCols  =  diag[k]  *  point[k];  xNorm+=  xNorm  *  oldX[i];	  double    solvedCols    =    diag[k]    *    point[k];    xNorm+=    oldX[i];    	non-compiled	[CE]  class,  interface,  or  enum  expected	72	None	replace
230	[BUG]  [BUGGY]  xNorm+=  oldX[i];  [CE]  class,  interface,  or  enum  expected  [FE]                          AssertionFailedError      [CONTEXT]      double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;      [BUGGY]  xNorm+=  oldX[i];  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	427	427	2	replace	xNorm+=  oldX[i];	  double    solvedCols    =    diag[k]    *    point[k];    xNorm+=    oldX[i];    	non-compiled	[CE]  class,  interface,  or  enum  expected	72	None	replace
231	[BUG]  [BUGGY]  xNorm+=  cost  *  xK;  [CE]  class,  interface,  or  enum  expected  [FE]              AssertionFailedError      [CONTEXT]      double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;      [BUGGY]  xNorm+=  cost  *  xK;  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	427	427	2	replace	xNorm+=  cost  *  xK;	  xNorm+=    xK    *    xK;    	non-compiled	[CE]  class,  interface,  or  enum  expected	2	None	replace
232	[BUG]  [BUGGY]  xNorm+=  xK  *  value;  [CE]  class,  interface,  or  enum  expected  [FE]                AssertionFailedError      [CONTEXT]      double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;      [BUGGY]  xNorm+=  xK  *  value;  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	427	427	2	replace	xNorm+=  xK  *  value;	  xNorm+=    xK    *    xK;    	non-compiled	[CE]  class,  interface,  or  enum  expected	2	None	replace
233	[BUG]  [BUGGY]  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  oldY;  [CE]  class,  interface,  or  enum  expected  [FE]                    AssertionFailedError      [CONTEXT]      double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;      [BUGGY]  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  oldY;  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	427	427	2	replace	double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  oldY;	  double    xK    =    permutation[k]    *    point[k];    xNorm+=    xK    *    oldY;    	non-compiled	[CE]  class,  interface,  or  enum  expected	83	None	replace
234	[BUG]  [BUGGY]  int  permutation  =  permutation[j]  -  1;  [CE]  class,  interface,  or  enum  expected  [FE]                AssertionFailedError      [CONTEXT]      double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;      [BUGGY]  int  permutation  =  permutation[j]  -  1;  [BUGGY]      int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	427	427	2	replace	int  permutation  =  permutation[j]  -  1;	  int    permutation    =    permutation[j];    	non-compiled	[CE]  class,  interface,  or  enum  expected	79	None	replace
235	[BUG]  [BUGGY]  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  cost;  [CE]  class,  interface,  or  enum  expected  [FE]                AssertionFailedError      [CONTEXT]      double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;      [BUGGY]  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  cost;  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	427	427	2	replace	double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  cost;	  double    xK    =    permutation[k]    *    point[k];    xNorm+=    xK    *    cost;    	non-compiled	[CE]  class,  interface,  or  enum  expected	8	None	replace
236	[BUG]  [BUGGY]  double  solvedCols  =  diag[k]  *  point[k];  xNorm+=  xS  *  xNorm;  [CE]  class,  interface,  or  enum  expected  [FE]                AssertionFailedError      [CONTEXT]      double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;      [BUGGY]  double  solvedCols  =  diag[k]  *  point[k];  xNorm+=  xS  *  xNorm;  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	427	427	2	replace	double  solvedCols  =  diag[k]  *  point[k];  xNorm+=  xS  *  xNorm;	  double    solvedCols    =    diag[k]    *    point[k];    xNorm+=    xS    *    xK;    	non-compiled	[CE]  class,  interface,  or  enum  expected	4	None	replace
237	[BUG]  [BUGGY]  double  solvedCols  =  diag[k]  *  point[k];  xNorm+=  xS  *  xK  +  1;  [CE]  class,  interface,  or  enum  expected  [FE]                  AssertionFailedError      [CONTEXT]      double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;      [BUGGY]  double  solvedCols  =  diag[k]  *  point[k];  xNorm+=  xS  *  xK  +  1;  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	427	427	2	replace	double  solvedCols  =  diag[k]  *  point[k];  xNorm+=  xS  *  xK  +  1;	  double    solvedCols    =    diag[k]    *    point[k];    xNorm+=    xS    *    xK;    	non-compiled	[CE]  class,  interface,  or  enum  expected	4	None	replace
238	[BUG]  [BUGGY]  double  solvedCols  =  diag[k]  *  point[k];  xNorm+=  xK  *  xS;  [CE]  class,  interface,  or  enum  expected  [FE]                    AssertionFailedError      [CONTEXT]      double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;      [BUGGY]  double  solvedCols  =  diag[k]  *  point[k];  xNorm+=  xK  *  xS;  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	427	427	2	replace	double  solvedCols  =  diag[k]  *  point[k];  xNorm+=  xK  *  xS;	  double    solvedCols    =    diag[k]    *    point[k];    xNorm+=    xS    *    xK;    	non-compiled	[CE]  class,  interface,  or  enum  expected	4	None	replace
239	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  points.length;  ++j)  {  [CE]  cannot  find  symbol  points  [FE]    AssertionFailedError    [CONTEXT]      double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;      [BUGGY]  for(int  j  =  0;  j  <  points.length;  ++j)  {  [BUGGY]      int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	427	427	2	replace	for(int  j  =  0;  j  <  points.length;  ++j)  {	  for(int    j    =    0;    j    <    point.length;    ++j)    {    	non-compiled	[CE]  cannot  find  symbol  points	48	None	replace
240	[BUG]  [BUGGY]  double  xCols  =  diag[k]  *  cost[k];  xNorm+=  xK  *  xK;  [CE]  class,  interface,  or  enum  expected  [FE]            AssertionFailedError      [CONTEXT]      double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;      [BUGGY]  double  xCols  =  diag[k]  *  cost[k];  xNorm+=  xK  *  xK;  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	427	427	2	replace	double  xCols  =  diag[k]  *  cost[k];  xNorm+=  xK  *  xK;	  double    xCols    =    diag[k]    *    point[k];    xNorm+=    xK    *    xK;    	non-compiled	[CE]  class,  interface,  or  enum  expected	1	None	replace
241	[BUG]  [BUGGY]  double  xCols  =  diag[k]  *  value[k];  xNorm+=  xK  *  xK;  [CE]  class,  interface,  or  enum  expected  [FE]              AssertionFailedError      [CONTEXT]      double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;      [BUGGY]  double  xCols  =  diag[k]  *  value[k];  xNorm+=  xK  *  xK;  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	427	427	2	replace	double  xCols  =  diag[k]  *  value[k];  xNorm+=  xK  *  xK;	  double    xCols    =    diag[k]    *    point[k];    xNorm+=    xK    *    xK;    	non-compiled	[CE]  class,  interface,  or  enum  expected	1	None	replace
242	[BUG]  [BUGGY]  double  xK  =  permutation[k]  *  point[k];  xNorm+=  xK  *  tmpVec  +  2;  [CE]  class,  interface,  or  enum  expected  [FE]                AssertionFailedError      [CONTEXT]      double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;      [BUGGY]  double  xK  =  permutation[k]  *  point[k];  xNorm+=  xK  *  tmpVec  +  2;  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	427	427	2	replace	double  xK  =  permutation[k]  *  point[k];  xNorm+=  xK  *  tmpVec  +  2;	  double    xK    =    permutation[k]    *    point[k];    xNorm+=    xK    *    tmpVec    +    1;    	non-compiled	[CE]  class,  interface,  or  enum  expected	78	None	replace
243	[BUG]  [BUGGY]  double  solveCols  =  diag[k]  *  point[k];  xNorm+=  xK  *  oldX[xNorm];  [CE]  class,  interface,  or  enum  expected  [FE]                AssertionFailedError      [CONTEXT]      double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;      [BUGGY]  double  solveCols  =  diag[k]  *  point[k];  xNorm+=  xK  *  oldX[xNorm];  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	427	427	2	replace	double  solveCols  =  diag[k]  *  point[k];  xNorm+=  xK  *  oldX[xNorm];	  double    solveCols    =    diag[k]    *    point[k];    xNorm+=    oldX[xNorm];    	non-compiled	[CE]  class,  interface,  or  enum  expected	84	None	replace
244	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  4;  ++j)  {  int  j  =  0;  j  <  2;  ++j)  {  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;      [BUGGY]  for(int  j  =  0;  j  <  4;  ++j)  {  int  j  =  0;  j  <  2;  ++j)  {  [BUGGY]      int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	427	427	2	replace	for(int  j  =  0;  j  <  4;  ++j)  {  int  j  =  0;  j  <  2;  ++j)  {	  for(int    j    =    0;    j    <    2;    ++j)    {    int    j    =    0;    j    <    2;    ++j)    {    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
245	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  4;  ++j)  {  int  permutation[j]  =  permutation[j];  point[pj]  =  oldX[pj];  }  [CE]  ']'  expected  [FE]          AssertionFailedError      [CONTEXT]      double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;      [BUGGY]  for(int  j  =  0;  j  <  4;  ++j)  {  int  permutation[j]  =  permutation[j];  point[pj]  =  oldX[pj];  }  [BUGGY]      int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	427	427	2	replace	for(int  j  =  0;  j  <  4;  ++j)  {  int  permutation[j]  =  permutation[j];  point[pj]  =  oldX[pj];  }	  for(int    j    =    0;    j    <    2;    ++j)    {    int    permutation[j]    =    permutation[j];    point[pj]    =    oldX[pj];    	non-compiled	[CE]  ']'  expected	54	None	replace
246	[BUG]  [BUGGY]  double  xCols  =  oldX[k]  *  point[k];  xNorm+=  xCols[xNorm];  [CE]  class,  interface,  or  enum  expected  [FE]                    AssertionFailedError      [CONTEXT]      double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;      [BUGGY]  double  xCols  =  oldX[k]  *  point[k];  xNorm+=  xCols[xNorm];  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	427	427	2	replace	double  xCols  =  oldX[k]  *  point[k];  xNorm+=  xCols[xNorm];	  double    xCols    =    diag[k]    *    point[k];    xNorm+=    oldX[xNorm];    	non-compiled	[CE]  class,  interface,  or  enum  expected	90	None	replace
247	[BUG]  [BUGGY]  double  xCols  =  diag[k]  *  oldX[k];  xNorm+=  xCols[xNorm];  [CE]  class,  interface,  or  enum  expected  [FE]                      AssertionFailedError      [CONTEXT]      double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;      [BUGGY]  double  xCols  =  diag[k]  *  oldX[k];  xNorm+=  xCols[xNorm];  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	427	427	2	replace	double  xCols  =  diag[k]  *  oldX[k];  xNorm+=  xCols[xNorm];	  double    xCols    =    diag[k]    *    point[k];    xNorm+=    oldX[xNorm];    	non-compiled	[CE]  class,  interface,  or  enum  expected	90	None	replace
248	[BUG]  [BUGGY]  double  xCols  =  diag[k]  *  point[k];  xNorm+=  oldX[0];  [CE]  class,  interface,  or  enum  expected  [FE]                        AssertionFailedError      [CONTEXT]      double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;      [BUGGY]  double  xCols  =  diag[k]  *  point[k];  xNorm+=  oldX[0];  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	427	427	2	replace	double  xCols  =  diag[k]  *  point[k];  xNorm+=  oldX[0];	  double    xCols    =    diag[k]    *    point[k];    xNorm+=    oldX[xNorm];    	non-compiled	[CE]  class,  interface,  or  enum  expected	90	None	replace
249	[BUG]  [BUGGY]  xCols  =  diag[k]  *  point[k];  xNorm+=  oldX[0];  [CE]  class,  interface,  or  enum  expected  [FE]                          AssertionFailedError      [CONTEXT]      double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;      [BUGGY]  xCols  =  diag[k]  *  point[k];  xNorm+=  oldX[0];  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	427	427	2	replace	xCols  =  diag[k]  *  point[k];  xNorm+=  oldX[0];	  double    xCols    =    diag[k]    *    point[k];    xNorm+=    oldX[xNorm];    	non-compiled	[CE]  class,  interface,  or  enum  expected	90	None	replace
250	[BUG]  [BUGGY]  double  xK  =  permutation[k]  *  cost[k];  xNorm+=  Math.sqrt(value);  [CE]  class,  interface,  or  enum  expected  [FE]                AssertionFailedError      [CONTEXT]      double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;      [BUGGY]  double  xK  =  permutation[k]  *  cost[k];  xNorm+=  Math.sqrt(value);  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	427	427	2	replace	double  xK  =  permutation[k]  *  cost[k];  xNorm+=  Math.sqrt(value);	  double    xK    =    permutation[k]    *    point[k];    xNorm+=    Math.sqrt(value);    	non-compiled	[CE]  class,  interface,  or  enum  expected	58	None	replace
251	[BUG]  [BUGGY]  double  xK  =  diagnostic[k]  *  point[k];  xNorm+=  Math.sqrt(diag[k]);  [CE]  class,  interface,  or  enum  expected  [FE]                AssertionFailedError      [CONTEXT]      double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;      [BUGGY]  double  xK  =  diagnostic[k]  *  point[k];  xNorm+=  Math.sqrt(diag[k]);  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	427	427	2	replace	double  xK  =  diagnostic[k]  *  point[k];  xNorm+=  Math.sqrt(diag[k]);	  double    xK    =    permutation[k]    *    point[k];    xNorm+=    Math.sqrt(diag[k]);    	non-compiled	[CE]  class,  interface,  or  enum  expected	91	None	replace
252	[BUG]  [BUGGY]  xK  =  diag[k]  *  point[k];  xNorm+=  Math.sqrt(diag[k]);  [CE]  class,  interface,  or  enum  expected  [FE]                  AssertionFailedError      [CONTEXT]      double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;      [BUGGY]  xK  =  diag[k]  *  point[k];  xNorm+=  Math.sqrt(diag[k]);  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	427	427	2	replace	xK  =  diag[k]  *  point[k];  xNorm+=  Math.sqrt(diag[k]);	  double    xK    =    permutation[k]    *    point[k];    xNorm+=    Math.sqrt(diag[k]);    	non-compiled	[CE]  class,  interface,  or  enum  expected	91	None	replace
253	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  point.length;  ++j)  {  int  permutation[j]  =  permutation[j];  [CE]  ']'  expected  [FE]    AssertionFailedError    [CONTEXT]      double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;      [BUGGY]  for(int  j  =  0;  j  <  point.length;  ++j)  {  int  permutation[j]  =  permutation[j];  [BUGGY]      int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	427	427	2	replace	for(int    j    =    0;    j    <    point.length;    ++j)    {    int  permutation[j]  =  permutation[j];	  	non-compiled	[CE]  ']'  expected	47	None	add
254	[BUG]  [BUGGY]  xK  =  permutation[k]  *  point[k];  xNorm+=  diag[xNorm  *  xK;  [CE]  ']'  expected  [FE]            AssertionFailedError      [CONTEXT]      double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;      [BUGGY]  xK  =  permutation[k]  *  point[k];  xNorm+=  diag[xNorm  *  xK;  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	427	427	2	replace	xK  =  permutation[k]  *  point[k];  xNorm+=  diag[xNorm  *  xK;	  double    xK    =    permutation[k]    *    point[k];    xNorm+=    tmp    *    xK;    	non-compiled	[CE]  ']'  expected	86	None	replace
255	[BUG]  [BUGGY]  xK  =  permutation[k]  *  point[k];  xNorm+=  tmp  *  xK;  [CE]  class,  interface,  or  enum  expected  [FE]              AssertionFailedError      [CONTEXT]      double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;      [BUGGY]  xK  =  permutation[k]  *  point[k];  xNorm+=  tmp  *  xK;  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	427	427	2	replace	xK  =  permutation[k]  *  point[k];  xNorm+=  tmp  *  xK;	  double    xK    =    permutation[k]    *    point[k];    xNorm+=    tmp    *    xK;    	non-compiled	[CE]  class,  interface,  or  enum  expected	86	None	replace
256	[BUG]  [BUGGY]  xK  =  permutation[k]  *  point[k];  xNorm+=  Math.sqrt(xK);  [CE]  class,  interface,  or  enum  expected  [FE]                  AssertionFailedError      [CONTEXT]      double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;      [BUGGY]  xK  =  permutation[k]  *  point[k];  xNorm+=  Math.sqrt(xK);  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	427	427	2	replace	xK  =  permutation[k]  *  point[k];  xNorm+=  Math.sqrt(xK);	  xK    =    permutation[k]    *    point[k];    xNorm+=    Math.sqrt(cost);    	non-compiled	[CE]  class,  interface,  or  enum  expected	92	None	replace
257	[BUG]  [BUGGY]  xK  =  permutation[k]  *  value[k];  xNorm+=  Math.sqrt(cost);  [CE]  class,  interface,  or  enum  expected  [FE]                    AssertionFailedError      [CONTEXT]      double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;      [BUGGY]  xK  =  permutation[k]  *  value[k];  xNorm+=  Math.sqrt(cost);  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	427	427	2	replace	xK  =  permutation[k]  *  value[k];  xNorm+=  Math.sqrt(cost);	  xK    =    permutation[k]    *    point[k];    xNorm+=    Math.sqrt(cost);    	non-compiled	[CE]  class,  interface,  or  enum  expected	92	None	replace
258	[BUG]  [BUGGY]  double  xK  =  permutation[k]  *  point[k];  xNorm+=  Math.sqrt(test(diag[k]));  [CE]  class,  interface,  or  enum  expected  [FE]                  AssertionFailedError      [CONTEXT]      double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;      [BUGGY]  double  xK  =  permutation[k]  *  point[k];  xNorm+=  Math.sqrt(test(diag[k]));  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	427	427	2	replace	double  xK  =  permutation[k]  *  point[k];  xNorm+=  Math.sqrt(test(diag[k]));	  double    xK    =    permutation[k]    *    point[k];    xNorm+=    Math.sqrt(test(xK));    	non-compiled	[CE]  class,  interface,  or  enum  expected	59	None	replace
259	[BUG]  [BUGGY]  double  xK  =  permutation[k]  *  point[k];  xNorm+=  Math.sqrt(test(xK),  cost);  [CE]  class,  interface,  or  enum  expected  [FE]                    AssertionFailedError      [CONTEXT]      double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;      [BUGGY]  double  xK  =  permutation[k]  *  point[k];  xNorm+=  Math.sqrt(test(xK),  cost);  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	427	427	2	replace	double  xK  =  permutation[k]  *  point[k];  xNorm+=  Math.sqrt(test(xK),  cost);	  double    xK    =    permutation[k]    *    point[k];    xNorm+=    Math.sqrt(test(xK));    	non-compiled	[CE]  class,  interface,  or  enum  expected	59	None	replace
260	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  len;  ++j)  {  [CE]  cannot  find  symbol  len  [FE]    AssertionFailedError    [CONTEXT]      double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;      [BUGGY]  for(int  j  =  0;  j  <  len;  ++j)  {  [BUGGY]      int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	427	427	2	replace	for(int  j  =  0;  j  <  len;  ++j)  {	  for(int    j    =    0;    j    <    preRed;    ++j)    {    	non-compiled	[CE]  cannot  find  symbol  len	24	None	replace
261	[BUG]  [BUGGY]  double  solvedCols  =  diag[k]  *  cost[k];  xNorm+=  xS  *  xK;  [CE]  class,  interface,  or  enum  expected  [FE]                AssertionFailedError      [CONTEXT]      double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;      [BUGGY]  double  solvedCols  =  diag[k]  *  cost[k];  xNorm+=  xS  *  xK;  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	427	427	2	replace	double  solvedCols  =  diag[k]  *  cost[k];  xNorm+=  xS  *  xK;	  double    solvedCols    =    diag[k]    *    point[k];    xNorm+=    xS    *    xK;    	non-compiled	[CE]  class,  interface,  or  enum  expected	4	None	replace
262	[BUG]  [BUGGY]  double  solveCols  =  diag[k]  *  point[k];  xNorm+=  oldX[0];  [CE]  class,  interface,  or  enum  expected  [FE]                AssertionFailedError      [CONTEXT]      double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;      [BUGGY]  double  solveCols  =  diag[k]  *  point[k];  xNorm+=  oldX[0];  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	427	427	2	replace	double  solveCols  =  diag[k]  *  point[k];  xNorm+=  oldX[0];	  double    solveCols    =    diag[k]    *    point[k];    xNorm+=    oldX[xNorm];    	non-compiled	[CE]  class,  interface,  or  enum  expected	84	None	replace
263	[BUG]  [BUGGY]  double  solveCols  =  oldX[k]  *  point[k];  xNorm+=  xNorm;  [CE]  class,  interface,  or  enum  expected  [FE]                  AssertionFailedError      [CONTEXT]      double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;      [BUGGY]  double  solveCols  =  oldX[k]  *  point[k];  xNorm+=  xNorm;  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	427	427	2	replace	double  solveCols  =  oldX[k]  *  point[k];  xNorm+=  xNorm;	  double    solveCols    =    diag[k]    *    point[k];    xNorm+=    oldX[xNorm];    	non-compiled	[CE]  class,  interface,  or  enum  expected	84	None	replace
264	[BUG]  [BUGGY]  double  solveCols  =  diag[k]  *  point[k];  xNorm+=  oldX[1];  [CE]  class,  interface,  or  enum  expected  [FE]                    AssertionFailedError      [CONTEXT]      double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;      [BUGGY]  double  solveCols  =  diag[k]  *  point[k];  xNorm+=  oldX[1];  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	427	427	2	replace	double  solveCols  =  diag[k]  *  point[k];  xNorm+=  oldX[1];	  double    solveCols    =    diag[k]    *    point[k];    xNorm+=    oldX[xNorm];    	non-compiled	[CE]  class,  interface,  or  enum  expected	84	None	replace
265	[BUG]  [BUGGY]  tmpVec  =  permutation[0]  *  point[0];  xNorm+=  xK  *  tmpVec;  [CE]  class,  interface,  or  enum  expected  [FE]              AssertionFailedError      [CONTEXT]      double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;      [BUGGY]  tmpVec  =  permutation[0]  *  point[0];  xNorm+=  xK  *  tmpVec;  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	427	427	2	replace	tmpVec  =  permutation[0]  *  point[0];  xNorm+=  xK  *  tmpVec;	  double    xK    =    permutation[0]    *    point[0];    xNorm+=    xK    *    tmpVec;    	non-compiled	[CE]  class,  interface,  or  enum  expected	77	None	replace
266	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  oldX.length;  ++j)  {  int  j  =  0;  j  <  diag.length;  ++j)  {  [CE]  >  expected  [FE]            AssertionFailedError      [CONTEXT]      double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;      [BUGGY]  for(int  j  =  0;  j  <  oldX.length;  ++j)  {  int  j  =  0;  j  <  diag.length;  ++j)  {  [BUGGY]      int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	427	427	2	replace	for(int  j  =  0;  j  <  oldX.length;  ++j)  {  int  j  =  0;  j  <  diag.length;  ++j)  {	  for(int    j    =    0;    j    <    diag.length;    ++j)    {    int    j    =    0;    j    <    diag.length;    ++j)    {    	non-compiled	[CE]  >  expected	38	None	replace
267	[BUG]  [BUGGY]  double  solvedCols  =  diag[k]  *  point[k];  xNorm+=  xN  *  xK  +  1;  [CE]  class,  interface,  or  enum  expected  [FE]                  AssertionFailedError      [CONTEXT]      double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;      [BUGGY]  double  solvedCols  =  diag[k]  *  point[k];  xNorm+=  xN  *  xK  +  1;  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	427	427	2	replace	double  solvedCols  =  diag[k]  *  point[k];  xNorm+=  xN  *  xK  +  1;	  double    solvedCols    =    diag[k]    *    point[k];    xNorm+=    xN    *    xK;    	non-compiled	[CE]  class,  interface,  or  enum  expected	5	None	replace
268	[BUG]  [BUGGY]  double  solvedCols  =  diag[k]  *  point[k];  xNorm+=  xK  *  xN;  [CE]  class,  interface,  or  enum  expected  [FE]                    AssertionFailedError      [CONTEXT]      double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;      [BUGGY]  double  solvedCols  =  diag[k]  *  point[k];  xNorm+=  xK  *  xN;  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	427	427	2	replace	double  solvedCols  =  diag[k]  *  point[k];  xNorm+=  xK  *  xN;	  double    solvedCols    =    diag[k]    *    point[k];    xNorm+=    xN    *    xK;    	non-compiled	[CE]  class,  interface,  or  enum  expected	5	None	replace
269	[BUG]  [BUGGY]  double  solvedCols  =  diag[k]  *  cost[k];  xNorm+=  xN  *  xK;  [CE]  class,  interface,  or  enum  expected  [FE]                      AssertionFailedError      [CONTEXT]      double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;      [BUGGY]  double  solvedCols  =  diag[k]  *  cost[k];  xNorm+=  xN  *  xK;  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	427	427	2	replace	double  solvedCols  =  diag[k]  *  cost[k];  xNorm+=  xN  *  xK;	  double    solvedCols    =    diag[k]    *    point[k];    xNorm+=    xN    *    xK;    	non-compiled	[CE]  class,  interface,  or  enum  expected	5	None	replace
270	[BUG]  [BUGGY]  double[]  solvedCols  =  diag[1]  *  costRelativeTolerance;  [CE]  class,  interface,  or  enum  expected  [FE]                  AssertionFailedError      [CONTEXT]      double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;      [BUGGY]  double[]  solvedCols  =  diag[1]  *  costRelativeTolerance;  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	427	427	2	replace	double[]  solvedCols  =  diag[1]  *  costRelativeTolerance;	  double[]    solvedCols    =    diag[0]    *    costRelativeTolerance;    	non-compiled	[CE]  class,  interface,  or  enum  expected	14	None	replace
271	[BUG]  [BUGGY]  double[]  solvedCols  =  diag[0]  *  costRelativeTolerance  +  1;  [CE]  class,  interface,  or  enum  expected  [FE]                    AssertionFailedError      [CONTEXT]      double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;      [BUGGY]  double[]  solvedCols  =  diag[0]  *  costRelativeTolerance  +  1;  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	427	427	2	replace	double[]  solvedCols  =  diag[0]  *  costRelativeTolerance  +  1;	  double[]    solvedCols    =    diag[0]    *    costRelativeTolerance;    	non-compiled	[CE]  class,  interface,  or  enum  expected	14	None	replace
272	[BUG]  [BUGGY]  double  solveCols  =  diag[k]  *  cost[k];  xNorm+=  xK  *  xK;  [CE]  class,  interface,  or  enum  expected  [FE]            AssertionFailedError      [CONTEXT]      double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;      [BUGGY]  double  solveCols  =  diag[k]  *  cost[k];  xNorm+=  xK  *  xK;  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	427	427	2	replace	double  solveCols  =  diag[k]  *  cost[k];  xNorm+=  xK  *  xK;	  double    solveCols    =    diag[k]    *    point[k];    xNorm+=    xK    *    xK;    	non-compiled	[CE]  class,  interface,  or  enum  expected	75	None	replace
273	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  last.length;  ++j)  {  [CE]  cannot  find  symbol  last  [FE]        AssertionFailedError      [CONTEXT]      double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;      [BUGGY]  for(int  j  =  0;  j  <  last.length;  ++j)  {  [BUGGY]      int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	427	427	2	replace	for(int  j  =  0;  j  <  last.length;  ++j)  {	  for(int    j    =    0;    j    <    cost.length;    ++j)    {    	non-compiled	[CE]  cannot  find  symbol  last	93	None	replace
274	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  3;  ++j)  {  int  permutation[j]  =  permutation[j];  point[pj]  =  oldX[permutation[j];  }  [CE]  ']'  expected  [FE]              AssertionFailedError      [CONTEXT]      double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;      [BUGGY]  for(int  j  =  0;  j  <  3;  ++j)  {  int  permutation[j]  =  permutation[j];  point[pj]  =  oldX[permutation[j];  }  [BUGGY]      int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	427	427	2	replace	for(int  j  =  0;  j  <  3;  ++j)  {  int  permutation[j]  =  permutation[j];  point[pj]  =  oldX[permutation[j];  }	  for(int    j    =    0;    j    <    2;    ++j)    {    int    permutation[j]    =    permutation[j];    point[pj]    =    oldX[permutation[j];    	non-compiled	[CE]  ']'  expected	56	None	replace
275	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  4;  ++j)  {  int  permutation[j]  =  permutation[j];  point[pj]  =  oldX[permutation[j];  }  [CE]  ']'  expected  [FE]                AssertionFailedError      [CONTEXT]      double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;      [BUGGY]  for(int  j  =  0;  j  <  4;  ++j)  {  int  permutation[j]  =  permutation[j];  point[pj]  =  oldX[permutation[j];  }  [BUGGY]      int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	427	427	2	replace	for(int  j  =  0;  j  <  4;  ++j)  {  int  permutation[j]  =  permutation[j];  point[pj]  =  oldX[permutation[j];  }	  for(int    j    =    0;    j    <    2;    ++j)    {    int    permutation[j]    =    permutation[j];    point[pj]    =    oldX[permutation[j];    	non-compiled	[CE]  ']'  expected	56	None	replace
276	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  4;  ++j)  {  for(int  j  =  0;  j  <  3;  ++j)  {  [CE]  illegal  start  of  expression  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;      [BUGGY]  for(int  j  =  0;  j  <  4;  ++j)  {  for(int  j  =  0;  j  <  3;  ++j)  {  [BUGGY]      int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	427	427	2	replace	for(int    j    =    0;    j    <    4;    ++j)    {    for(int  j  =  0;  j  <  3;  ++j)  {	  	non-compiled	[CE]  illegal  start  of  expression	34	None	add
277	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  4;  ++j)  {  int  permutation  =  permutation[j];  [CE]  illegal  start  of  expression  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;      [BUGGY]  for(int  j  =  0;  j  <  4;  ++j)  {  int  permutation  =  permutation[j];  [BUGGY]      int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	427	427	2	replace	for(int    j    =    0;    j    <    4;    ++j)    {    int  permutation  =  permutation[j];	  	non-compiled	[CE]  illegal  start  of  expression	34	None	add
278	[BUG]  [BUGGY]  xK  =  diag[k]  *  point[k];  xNorm+=  diag[xK  *  xK;  [CE]  ']'  expected  [FE]            AssertionFailedError      [CONTEXT]      double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;      [BUGGY]  xK  =  diag[k]  *  point[k];  xNorm+=  diag[xK  *  xK;  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	427	427	2	replace	xK  =  diag[k]  *  point[k];  xNorm+=  diag[xK  *  xK;	  double    xK    =    permutation[k]    *    point[k];    xNorm+=    diag[xK    *    xK;    	non-compiled	[CE]  ']'  expected	67	None	replace
279	[BUG]  [BUGGY]  double  xK  =  diag[k]  *  point[k];  xNorm+=  diag[xK  *  xK;  [CE]  ']'  expected  [FE]              AssertionFailedError      [CONTEXT]      double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;      [BUGGY]  double  xK  =  diag[k]  *  point[k];  xNorm+=  diag[xK  *  xK;  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	427	427	2	replace	double  xK  =  diag[k]  *  point[k];  xNorm+=  diag[xK  *  xK;	  double    xK    =    permutation[k]    *    point[k];    xNorm+=    diag[xK    *    xK;    	non-compiled	[CE]  ']'  expected	67	None	replace
280	[BUG]  [BUGGY]  xK  =  diag[k]  *  point[k];  xNorm+=  diag[0  *  xK;  [CE]  ']'  expected  [FE]                AssertionFailedError      [CONTEXT]      double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;      [BUGGY]  xK  =  diag[k]  *  point[k];  xNorm+=  diag[0  *  xK;  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	427	427	2	replace	xK  =  diag[k]  *  point[k];  xNorm+=  diag[0  *  xK;	  double    xK    =    permutation[k]    *    point[k];    xNorm+=    diag[xK    *    xK;    	non-compiled	[CE]  ']'  expected	67	None	replace
281	[BUG]  [BUGGY]  double  xK  =  diag[k]  *  point[k];  xNorm+=  diag[xK  *  xK  +  1;  [CE]  ']'  expected  [FE]                  AssertionFailedError      [CONTEXT]      double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;      [BUGGY]  double  xK  =  diag[k]  *  point[k];  xNorm+=  diag[xK  *  xK  +  1;  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	427	427	2	replace	double  xK  =  diag[k]  *  point[k];  xNorm+=  diag[xK  *  xK  +  1;	  double    xK    =    permutation[k]    *    point[k];    xNorm+=    diag[xK    *    xK;    	non-compiled	[CE]  ']'  expected	67	None	replace
282	[BUG]  [BUGGY]  double  solvedCols  =  diag[k]  *  value[k];  xNorm+=  xK  *  cost;  [CE]  class,  interface,  or  enum  expected  [FE]                    AssertionFailedError      [CONTEXT]      double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;      [BUGGY]  double  solvedCols  =  diag[k]  *  value[k];  xNorm+=  xK  *  cost;  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	427	427	2	replace	double  solvedCols  =  diag[k]  *  value[k];  xNorm+=  xK  *  cost;	  double    solvedCols    =    diag[k]    *    point[k];    xNorm+=    xK    *    cost;    	non-compiled	[CE]  class,  interface,  or  enum  expected	6	None	replace
283	[BUG]  [BUGGY]  double  solvedCols  =  diag[k]  *  cost[k];  xNorm+=  xK  *  point[k];  [CE]  class,  interface,  or  enum  expected  [FE]                      AssertionFailedError      [CONTEXT]      double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;      [BUGGY]  double  solvedCols  =  diag[k]  *  cost[k];  xNorm+=  xK  *  point[k];  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	427	427	2	replace	double  solvedCols  =  diag[k]  *  cost[k];  xNorm+=  xK  *  point[k];	  double    solvedCols    =    diag[k]    *    point[k];    xNorm+=    xK    *    cost;    	non-compiled	[CE]  class,  interface,  or  enum  expected	6	None	replace
284	[BUG]  [BUGGY]  int  permutation[j]  =  Math.min(previousCost,  permutation[j]);  [CE]  ']'  expected  [FE]                    AssertionFailedError      [CONTEXT]      double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;      [BUGGY]  int  permutation[j]  =  Math.min(previousCost,  permutation[j]);  [BUGGY]      int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	427	427	2	replace	int  permutation[j]  =  Math.min(previousCost,  permutation[j]);	  int    permutation[j]    =    Math.min(permutation[j],    previousCost);    	non-compiled	[CE]  ']'  expected	43	None	replace
285	[BUG]  [BUGGY]  int  permutation[j]  =  Math.min(permutation[k],  cost);  [CE]  ']'  expected  [FE]                      AssertionFailedError      [CONTEXT]      double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;      [BUGGY]  int  permutation[j]  =  Math.min(permutation[k],  cost);  [BUGGY]      int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	427	427	2	replace	int  permutation[j]  =  Math.min(permutation[k],  cost);	  int    permutation[j]    =    Math.min(permutation[j],    previousCost);    	non-compiled	[CE]  ']'  expected	43	None	replace
286	[BUG]  [BUGGY]  double  xK  =  diagnostic[k]  *  point[k];  xNorm+=  xK  *  xNorm;  [CE]  class,  interface,  or  enum  expected  [FE]              AssertionFailedError      [CONTEXT]      double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;      [BUGGY]  double  xK  =  diagnostic[k]  *  point[k];  xNorm+=  xK  *  xNorm;  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	427	427	2	replace	double  xK  =  diagnostic[k]  *  point[k];  xNorm+=  xK  *  xNorm;	  double    xK    =    point[k]    *    point[k];    xNorm+=    xK    *    xNorm;    	non-compiled	[CE]  class,  interface,  or  enum  expected	98	None	replace
287	[BUG]  [BUGGY]  xK  =  point[k]  *  diag[k];  xNorm+=  xK  *  xNorm;  [CE]  class,  interface,  or  enum  expected  [FE]                AssertionFailedError      [CONTEXT]      double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;      [BUGGY]  xK  =  point[k]  *  diag[k];  xNorm+=  xK  *  xNorm;  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	427	427	2	replace	xK  =  point[k]  *  diag[k];  xNorm+=  xK  *  xNorm;	  double    xK    =    point[k]    *    point[k];    xNorm+=    xK    *    xNorm;    	non-compiled	[CE]  class,  interface,  or  enum  expected	98	None	replace
288	[BUG]  [BUGGY]  xNorm  =  diag[k]  *  cost[k];  xNorm+=  xK  *  xK;  [CE]  class,  interface,  or  enum  expected  [FE]              AssertionFailedError      [CONTEXT]      double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;      [BUGGY]  xNorm  =  diag[k]  *  cost[k];  xNorm+=  xK  *  xK;  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	427	427	2	replace	xNorm  =  diag[k]  *  cost[k];  xNorm+=  xK  *  xK;	  double    xNorm    =    diag[k]    *    point[k];    xNorm+=    xK    *    xK;    	non-compiled	[CE]  class,  interface,  or  enum  expected	63	None	replace
289	[BUG]  [BUGGY]  double  xNorm  =  diagnostic[k]  *  point[k];  xNorm+=  xK  *  xNorm;  [CE]  class,  interface,  or  enum  expected  [FE]                AssertionFailedError      [CONTEXT]      double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;      [BUGGY]  double  xNorm  =  diagnostic[k]  *  point[k];  xNorm+=  xK  *  xNorm;  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	427	427	2	replace	double  xNorm  =  diagnostic[k]  *  point[k];  xNorm+=  xK  *  xNorm;	  double    xNorm    =    diag[k]    *    point[k];    xNorm+=    xK    *    xK;    	non-compiled	[CE]  class,  interface,  or  enum  expected	63	None	replace
290	[BUG]  [BUGGY]  double  solvedCols  =  diag[k]  *  permutation[xNorm];  xNorm+=  oldX[xNorm];  [CE]  class,  interface,  or  enum  expected  [FE]                  AssertionFailedError      [CONTEXT]      double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;      [BUGGY]  double  solvedCols  =  diag[k]  *  permutation[xNorm];  xNorm+=  oldX[xNorm];  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	427	427	2	replace	double  solvedCols  =  diag[k]  *  permutation[xNorm];  xNorm+=  oldX[xNorm];	  double    solvedCols    =    permutation[k]    *    diagR[xNorm];    xNorm+=    oldX[xNorm];    	non-compiled	[CE]  class,  interface,  or  enum  expected	29	None	replace
291	[BUG]  [BUGGY]  double  solvedCols  =  oldX[k]  *  diagR[xNorm];  xNorm+=  permutation[xNorm];  [CE]  class,  interface,  or  enum  expected  [FE]                    AssertionFailedError      [CONTEXT]      double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;      [BUGGY]  double  solvedCols  =  oldX[k]  *  diagR[xNorm];  xNorm+=  permutation[xNorm];  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	427	427	2	replace	double  solvedCols  =  oldX[k]  *  diagR[xNorm];  xNorm+=  permutation[xNorm];	  double    solvedCols    =    permutation[k]    *    diagR[xNorm];    xNorm+=    oldX[xNorm];    	non-compiled	[CE]  class,  interface,  or  enum  expected	29	None	replace
292	[BUG]  [BUGGY]  double  solvedCols  =  diag[k]  *  oldX[k];  xNorm+=  xNorm  *  point[xNorm];  [CE]  class,  interface,  or  enum  expected  [FE]                      AssertionFailedError      [CONTEXT]      double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;      [BUGGY]  double  solvedCols  =  diag[k]  *  oldX[k];  xNorm+=  xNorm  *  point[xNorm];  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	427	427	2	replace	double  solvedCols  =  diag[k]  *  oldX[k];  xNorm+=  xNorm  *  point[xNorm];	  double    solvedCols    =    diag[k]    *    point[k];    xNorm+=    xNorm    *    oldX[xNorm];    	non-compiled	[CE]  class,  interface,  or  enum  expected	27	None	replace
293	[BUG]  [BUGGY]  double  solvedCols  =  diag[k]  *  value[k];  xNorm+=  xNorm  *  oldX[xNorm];  [CE]  class,  interface,  or  enum  expected  [FE]                        AssertionFailedError      [CONTEXT]      double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;      [BUGGY]  double  solvedCols  =  diag[k]  *  value[k];  xNorm+=  xNorm  *  oldX[xNorm];  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	427	427	2	replace	double  solvedCols  =  diag[k]  *  value[k];  xNorm+=  xNorm  *  oldX[xNorm];	  double    solvedCols    =    diag[k]    *    point[k];    xNorm+=    xNorm    *    oldX[xNorm];    	non-compiled	[CE]  class,  interface,  or  enum  expected	27	None	replace
294	[BUG]  [BUGGY]  xK  =  point[k]  *  permutation[k];  xNorm+=  xK  *  oldX;  [CE]  class,  interface,  or  enum  expected  [FE]                  AssertionFailedError      [CONTEXT]      double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;      [BUGGY]  xK  =  point[k]  *  permutation[k];  xNorm+=  xK  *  oldX;  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	427	427	2	replace	xK  =  point[k]  *  permutation[k];  xNorm+=  xK  *  oldX;	  xK    =    permutation[k]    *    point[k];    xNorm+=    xK    *    oldX;    	non-compiled	[CE]  class,  interface,  or  enum  expected	82	None	replace
295	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  oldX.length;  ++j)  {  int  permutation[j]  =  permutation[j];  point[pj]  =  oldX[pj];  }  [CE]  ']'  expected  [FE]          AssertionFailedError      [CONTEXT]      double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;      [BUGGY]  for(int  j  =  0;  j  <  oldX.length;  ++j)  {  int  permutation[j]  =  permutation[j];  point[pj]  =  oldX[pj];  }  [BUGGY]      int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	427	427	2	replace	for(int  j  =  0;  j  <  oldX.length;  ++j)  {  int  permutation[j]  =  permutation[j];  point[pj]  =  oldX[pj];  }	  for(int    j    =    0;    j    <    diag.length;    ++j)    {    int    permutation[j]    =    permutation[j];    point[pj]    =    oldX[pj];    	non-compiled	[CE]  ']'  expected	37	None	replace
296	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  diag.length;  ++j)  {  int  permutation[j]  =  permutation[j];  point[pj]  =  oldX[pj];  }  [CE]  ']'  expected  [FE]            AssertionFailedError      [CONTEXT]      double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;      [BUGGY]  for(int  j  =  0;  j  <  diag.length;  ++j)  {  int  permutation[j]  =  permutation[j];  point[pj]  =  oldX[pj];  }  [BUGGY]      int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	427	427	2	replace	for(int  j  =  0;  j  <  diag.length;  ++j)  {  int  permutation[j]  =  permutation[j];  point[pj]  =  oldX[pj];  }	  for(int    j    =    0;    j    <    diag.length;    ++j)    {    int    permutation[j]    =    permutation[j];    point[pj]    =    oldX[pj];    	non-compiled	[CE]  ']'  expected	37	None	replace
297	[BUG]  [BUGGY]  double[]  solvedCols  =  costRelativeTolerance  *  coeff1;  [CE]  class,  interface,  or  enum  expected  [FE]                AssertionFailedError      [CONTEXT]      double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;      [BUGGY]  double[]  solvedCols  =  costRelativeTolerance  *  coeff1;  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	427	427	2	replace	double[]  solvedCols  =  costRelativeTolerance  *  coeff1;	  double[]    solvedCols    =    coeff1    *    costRelativeTolerance;    	non-compiled	[CE]  class,  interface,  or  enum  expected	13	None	replace
298	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  3;  ++j)  {  For(int  j  =  0;  j  <  3;  ++j)  {  [CE]  '.class'  expected  [FE]    AssertionFailedError    [CONTEXT]      double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;      [BUGGY]  for(int  j  =  0;  j  <  3;  ++j)  {  For(int  j  =  0;  j  <  3;  ++j)  {  [BUGGY]      int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	427	427	2	replace	for(int    j    =    0;    j    <    3;    ++j)    {    For(int  j  =  0;  j  <  3;  ++j)  {	  	non-compiled	[CE]  '.class'  expected	30	None	add
299	[BUG]  [BUGGY]  xK  =  diag[k]  *  point[k];  xNorm+=  diag[xK  *  xNorm;  [CE]  ']'  expected  [FE]                AssertionFailedError      [CONTEXT]      double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;      [BUGGY]  xK  =  diag[k]  *  point[k];  xNorm+=  diag[xK  *  xNorm;  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	427	427	2	replace	xK  =  diag[k]  *  point[k];  xNorm+=  diag[xK  *  xNorm;	  double    xK    =    permutation[k]    *    point[k];    xNorm+=    diag[xK    *    xNorm;    	non-compiled	[CE]  ']'  expected	66	None	replace
300	[BUG]  [BUGGY]  double  xK  =  diag[k]  *  point[k];  xNorm+=  diag[xK  *  xNorm;  [CE]  ']'  expected  [FE]                  AssertionFailedError      [CONTEXT]      double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;      [BUGGY]  double  xK  =  diag[k]  *  point[k];  xNorm+=  diag[xK  *  xNorm;  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	427	427	2	replace	double  xK  =  diag[k]  *  point[k];  xNorm+=  diag[xK  *  xNorm;	  double    xK    =    permutation[k]    *    point[k];    xNorm+=    diag[xK    *    xNorm;    	non-compiled	[CE]  ']'  expected	66	None	replace
301	[BUG]  [BUGGY]  double  xK  =  diagnostic[k]  *  point[k];  xNorm+=  diag[xK  *  xNorm;  [CE]  ']'  expected  [FE]                    AssertionFailedError      [CONTEXT]      double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;      [BUGGY]  double  xK  =  diagnostic[k]  *  point[k];  xNorm+=  diag[xK  *  xNorm;  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	427	427	2	replace	double  xK  =  diagnostic[k]  *  point[k];  xNorm+=  diag[xK  *  xNorm;	  double    xK    =    permutation[k]    *    point[k];    xNorm+=    diag[xK    *    xNorm;    	non-compiled	[CE]  ']'  expected	66	None	replace
302	[BUG]  [BUGGY]  double  xK  =  permutation[k]  *  point[k];  xNorm+=  diag[0  *  xNorm;  [CE]  ']'  expected  [FE]                      AssertionFailedError      [CONTEXT]      double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;      [BUGGY]  double  xK  =  permutation[k]  *  point[k];  xNorm+=  diag[0  *  xNorm;  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	427	427	2	replace	double  xK  =  permutation[k]  *  point[k];  xNorm+=  diag[0  *  xNorm;	  double    xK    =    permutation[k]    *    point[k];    xNorm+=    diag[xK    *    xNorm;    	non-compiled	[CE]  ']'  expected	66	None	replace
303	[BUG]  [BUGGY]  xNorm+=  oldX[1];  [CE]  class,  interface,  or  enum  expected  [FE]                    AssertionFailedError      [CONTEXT]      double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;      [BUGGY]  xNorm+=  oldX[1];  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	427	427	2	replace	xNorm+=  oldX[1];	  xNorm+=    oldX[xNorm];    	non-compiled	[CE]  class,  interface,  or  enum  expected	26	None	replace
304	[BUG]  [BUGGY]  double  solvedCols  =  diag[k]  *  oldX[k];  xNorm+=  xNorm  *  oldX[i];  [CE]  class,  interface,  or  enum  expected  [FE]                      AssertionFailedError      [CONTEXT]      double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;      [BUGGY]  double  solvedCols  =  diag[k]  *  oldX[k];  xNorm+=  xNorm  *  oldX[i];  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	427	427	2	replace	double  solvedCols  =  diag[k]  *  oldX[k];  xNorm+=  xNorm  *  oldX[i];	  double    solvedCols    =    diag[k]    *    point[k];    xNorm+=    oldX[i];    	non-compiled	[CE]  class,  interface,  or  enum  expected	72	None	replace
305	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]            AssertionFailedError      [CONTEXT]      double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;      [BUGGY]  for(int  j  =  0;  j  <  oldRes.length;  ++j)  {  [BUGGY]      int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	427	427	2	add	for(int  j  =  0;  j  <  oldRes.length;  ++j)  {	  for(int    j    =    0;    j    <    fixedCols.length;    ++j)    {    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	51	11	replace
306	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  oldRes.length;  ++j)  {  [FE]  ArrayIndexOutOfBoundsException  [FE]            AssertionFailedError      [CONTEXT]      double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;      [BUGGY]  for(int  j  =  0;  j  <  oldRes.length;  ++j)  {  [BUGGY]      int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	427	427	2	replace	for(int  j  =  0;  j  <  oldRes.length;  ++j)  {	  for(int    j    =    0;    j    <    fixedCols.length;    ++j)    {    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	51	11	replace
307	[BUG]  [BUGGY]  int  j  =  0;  j  <  2;  ++j)  {  [CE]  illegal  start  of  type  [FE]        AssertionFailedError      [CONTEXT]      double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;      [BUGGY]  int  j  =  0;  j  <  2;  ++j)  {  [BUGGY]      int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	427	427	2	replace	int  j  =  0;  j  <  2;  ++j)  {	  for(int    j    =    0;    j    <    2;    ++j)    {    double    j    =    0;    j    <    2;    ++j)    {    	non-compiled	[CE]  illegal  start  of  type	99	None	replace
308	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  permutation.length;  ++j)  {  int  permutation.length  =  0;  for(int  j  =  0;  j  <  permutation.length;  ++j)  {  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]      double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;      [BUGGY]  for(int  j  =  0;  j  <  permutation.length;  ++j)  {  int  permutation.length  =  0;  for(int  j  =  0;  j  <  permutation.length;  ++j)  {  [BUGGY]      int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	427	427	2	replace	for(int    j    =    0;    j    <    permutation.length;    ++j)    {    int  permutation.length  =  0;  for(int  j  =  0;  j  <  permutation.length;  ++j)  {	  	non-compiled	[CE]  ';'  expected	20	None	add
309	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  oldX.length;  ++j)  {  int  permutation[j]  =  permutation[j];  [CE]  ']'  expected  [FE]    AssertionFailedError    [CONTEXT]      double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;      [BUGGY]  for(int  j  =  0;  j  <  oldX.length;  ++j)  {  int  permutation[j]  =  permutation[j];  [BUGGY]      int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	427	427	2	replace	for(int    j    =    0;    j    <    oldX.length;    ++j)    {    int  permutation[j]  =  permutation[j];	  	non-compiled	[CE]  ']'  expected	45	None	add
310	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  oldX.length;  ++j)  {  int  permutation  =  permutation[j];  point[pj]  =  oldX[pj];  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]      double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;      [BUGGY]  for(int  j  =  0;  j  <  oldX.length;  ++j)  {  int  permutation  =  permutation[j];  point[pj]  =  oldX[pj];  [BUGGY]      int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	427	427	2	replace	for(int    j    =    0;    j    <    oldX.length;    ++j)    {    int  permutation  =  permutation[j];  point[pj]  =  oldX[pj];	  	non-compiled	[CE]  illegal  start  of  expression	45	None	add
311	[BUG]  [BUGGY]  xNorm+=  xK  *  tmpVec  +  cost;  [CE]  class,  interface,  or  enum  expected  [FE]            AssertionFailedError      [CONTEXT]      double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;      [BUGGY]  xNorm+=  xK  *  tmpVec  +  cost;  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	427	427	2	replace	xNorm+=  xK  *  tmpVec  +  cost;	  xNorm+=    xK    *    tmpVec;    	non-compiled	[CE]  class,  interface,  or  enum  expected	16	None	replace
312	[BUG]  [BUGGY]  double  solvedCols  =  diag[k]  *  value[k];  xNorm+=  xK  *  xNorm;  [CE]  class,  interface,  or  enum  expected  [FE]              AssertionFailedError      [CONTEXT]      double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;      [BUGGY]  double  solvedCols  =  diag[k]  *  value[k];  xNorm+=  xK  *  xNorm;  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	427	427	2	replace	double  solvedCols  =  diag[k]  *  value[k];  xNorm+=  xK  *  xNorm;	  double    solvedCols    =    diag[k]    *    point[k];    xNorm+=    xK    *    xNorm;    	non-compiled	[CE]  class,  interface,  or  enum  expected	3	None	replace
313	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  oldX.length;  ++j)  {  Integer  j  =  0;  j  <  diag.length;  ++j)  {  [CE]  >  expected  [FE]        AssertionFailedError      [CONTEXT]      double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;      [BUGGY]  for(int  j  =  0;  j  <  oldX.length;  ++j)  {  Integer  j  =  0;  j  <  diag.length;  ++j)  {  [BUGGY]      int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	427	427	2	replace	for(int  j  =  0;  j  <  oldX.length;  ++j)  {  Integer  j  =  0;  j  <  diag.length;  ++j)  {	  for(int    j    =    0;    j    <    diag.length;    ++j)    {    Integer    j    =    0;    j    <    diag.length;    ++j)    {    	non-compiled	[CE]  >  expected	87	None	replace
314	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  permutation.length;  ++j)  {  Integer  oldX  =  0;  j  <  oldX.length;  ++j)  {  [CE]  >  expected  [FE]          AssertionFailedError      [CONTEXT]      double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;      [BUGGY]  for(int  j  =  0;  j  <  permutation.length;  ++j)  {  Integer  oldX  =  0;  j  <  oldX.length;  ++j)  {  [BUGGY]      int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	427	427	2	replace	for(int  j  =  0;  j  <  permutation.length;  ++j)  {  Integer  oldX  =  0;  j  <  oldX.length;  ++j)  {	  for(int    j    =    0;    j    <    diag.length;    ++j)    {    Integer    j    =    0;    j    <    diag.length;    ++j)    {    	non-compiled	[CE]  >  expected	87	None	replace
315	[BUG]  [BUGGY]  double  xK  =  permutation[k]  *  point[k];  xNorm+=  Math.sqrt(diag);  [CE]  class,  interface,  or  enum  expected  [FE]                AssertionFailedError      [CONTEXT]      double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;      [BUGGY]  double  xK  =  permutation[k]  *  point[k];  xNorm+=  Math.sqrt(diag);  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	427	427	2	replace	double  xK  =  permutation[k]  *  point[k];  xNorm+=  Math.sqrt(diag);	  double    xK    =    permutation[k]    *    point[k];    xNorm+=    Math.sqrt(cost);    	non-compiled	[CE]  class,  interface,  or  enum  expected	10	None	replace
316	[BUG]  [BUGGY]  double  xK  =  permutation[k]  *  cost[k];  xNorm+=  Math.sqrt(xNorm);  [CE]  class,  interface,  or  enum  expected  [FE]                  AssertionFailedError      [CONTEXT]      double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;      [BUGGY]  double  xK  =  permutation[k]  *  cost[k];  xNorm+=  Math.sqrt(xNorm);  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	427	427	2	replace	double  xK  =  permutation[k]  *  cost[k];  xNorm+=  Math.sqrt(xNorm);	  double    xK    =    permutation[k]    *    point[k];    xNorm+=    Math.sqrt(cost);    	non-compiled	[CE]  class,  interface,  or  enum  expected	10	None	replace
317	[BUG]  [BUGGY]  double  solvedCols  =  diag[k]  *  oldX[k];  xNorm+=  xK  *  point[xNorm];  [CE]  class,  interface,  or  enum  expected  [FE]                  AssertionFailedError      [CONTEXT]      double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;      [BUGGY]  double  solvedCols  =  diag[k]  *  oldX[k];  xNorm+=  xK  *  point[xNorm];  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	427	427	2	replace	double  solvedCols  =  diag[k]  *  oldX[k];  xNorm+=  xK  *  point[xNorm];	  double    solvedCols    =    diag[k]    *    point[k];    xNorm+=    xK    *    oldX[xNorm];    	non-compiled	[CE]  class,  interface,  or  enum  expected	25	None	replace
318	[BUG]  [BUGGY]  double  solvedCols  =  diag[k]  *  oldX[k];  xNorm+=  xK  *  xNorm;  [CE]  class,  interface,  or  enum  expected  [FE]                    AssertionFailedError      [CONTEXT]      double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;      [BUGGY]  double  solvedCols  =  diag[k]  *  oldX[k];  xNorm+=  xK  *  xNorm;  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	427	427	2	replace	double  solvedCols  =  diag[k]  *  oldX[k];  xNorm+=  xK  *  xNorm;	  double    solvedCols    =    diag[k]    *    point[k];    xNorm+=    xK    *    oldX[xNorm];    	non-compiled	[CE]  class,  interface,  or  enum  expected	25	None	replace
319	[BUG]  [BUGGY]  double  solvedCols  =  diag[k]  *  oldX[k];  xNorm+=  xK  *  xNorm];  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;      [BUGGY]  double  solvedCols  =  diag[k]  *  oldX[k];  xNorm+=  xK  *  xNorm];  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	427	427	2	replace	double  solvedCols  =  diag[k]  *  oldX[k];  xNorm+=  xK  *  xNorm];	  double    solvedCols    =    diag[k]    *    point[k];    xNorm+=    xK    *    oldX[xNorm];    	non-compiled	[CE]  ';'  expected	25	None	replace
320	[BUG]  [BUGGY]  double  xK  =  permutation[k]  *  point[k];  xNorm+=  xK  *  xK  +  1;  [CE]  class,  interface,  or  enum  expected  [FE]                AssertionFailedError      [CONTEXT]      double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;      [BUGGY]  double  xK  =  permutation[k]  *  point[k];  xNorm+=  xK  *  xK  +  1;  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	427	427	2	replace	double  xK  =  permutation[k]  *  point[k];  xNorm+=  xK  *  xK  +  1;	  double    xK    =    permutation[k]    *    point[k];    xNorm+=    xK    *    tmpVec    +    1;    	non-compiled	[CE]  class,  interface,  or  enum  expected	78	None	replace
321	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  =  cost;  ++j)  {  [CE]  illegal  start  of  expression  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;      [BUGGY]  for(int  j  =  0;  j  <  =  cost;  ++j)  {  [BUGGY]      int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	427	427	2	replace	for(int  j  =  0;  j  <  =  cost;  ++j)  {	  for(int    j    =    0;    j    <    cost;    ++j)    {    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
322	[BUG]  [BUGGY]  double  xK  =  permutation[k]  *  point[k];  xNorm+=  xN  *  tmpVec  +  1;  [CE]  class,  interface,  or  enum  expected  [FE]              AssertionFailedError      [CONTEXT]      double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;      [BUGGY]  double  xK  =  permutation[k]  *  point[k];  xNorm+=  xN  *  tmpVec  +  1;  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	427	427	2	replace	double  xK  =  permutation[k]  *  point[k];  xNorm+=  xN  *  tmpVec  +  1;	  double    xK    =    permutation[k]    *    point[k];    xNorm+=    xN    *    tmpVec;    	non-compiled	[CE]  class,  interface,  or  enum  expected	17	None	replace
323	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  2)  {  int  permutation[j]  =  permutation[j];  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;      [BUGGY]  for(int  j  =  0;  j  <  2)  {  int  permutation[j]  =  permutation[j];  [BUGGY]      int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	427	427	2	replace	for(int  j  =  0;  j  <  2)  {  int  permutation[j]  =  permutation[j];	  for(int    j    =    0;    j    <    2;    ++j)    {    int    permutation[j]    =    permutation[j];    	non-compiled	[CE]  ';'  expected	57	None	replace
324	[BUG]  [BUGGY]  xCols  =  diag[k]  *  cost[k];  xNorm+=  xK  *  xK;  [CE]  class,  interface,  or  enum  expected  [FE]            AssertionFailedError      [CONTEXT]      double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;      [BUGGY]  xCols  =  diag[k]  *  cost[k];  xNorm+=  xK  *  xK;  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	427	427	2	replace	xCols  =  diag[k]  *  cost[k];  xNorm+=  xK  *  xK;	  double    xCols    =    diag[k]    *    point[k];    xNorm+=    xK    *    xK;    	non-compiled	[CE]  class,  interface,  or  enum  expected	1	None	replace
325	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  oldY;  ++j)  {  [CE]  cannot  find  symbol  oldY  [FE]                  AssertionFailedError      [CONTEXT]      double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;      [BUGGY]  for(int  j  =  0;  j  <  oldY;  ++j)  {  [BUGGY]      int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	427	427	2	replace	for(int  j  =  0;  j  <  oldY;  ++j)  {	  for(int    j    =    0;    j    <    oldX;    ++j)    {    	non-compiled	[CE]  cannot  find  symbol  oldY	22	None	replace
326	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  1;  ++j)  {  int  permutation[j]  =  permutation[j];  point[pj]  =  oldX[oldRes];  [CE]  ']'  expected  [FE]    AssertionFailedError    [CONTEXT]      double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;      [BUGGY]  for(int  j  =  0;  j  <  1;  ++j)  {  int  permutation[j]  =  permutation[j];  point[pj]  =  oldX[oldRes];  [BUGGY]      int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	427	427	2	replace	for(int    j    =    0;    j    <    1;    ++j)    {    int  permutation[j]  =  permutation[j];  point[pj]  =  oldX[oldRes];	  	non-compiled	[CE]  ']'  expected	32	None	add
327	[BUG]  [BUGGY]  double[]  solvedCols  =  coeff1[k]  *  diag[k];  [CE]  class,  interface,  or  enum  expected  [FE]              AssertionFailedError      [CONTEXT]      double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;      [BUGGY]  double[]  solvedCols  =  coeff1[k]  *  diag[k];  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	427	427	2	replace	double[]  solvedCols  =  coeff1[k]  *  diag[k];	  double[]    solvedCols    =    diag[k]    *    coeff1;    	non-compiled	[CE]  class,  interface,  or  enum  expected	94	None	replace
328	[BUG]  [BUGGY]  xK  =  permutation[k]  *  cost[k];  xNorm+=  xK  *  maxCosine;  [CE]  class,  interface,  or  enum  expected  [FE]                  AssertionFailedError      [CONTEXT]      double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;      [BUGGY]  xK  =  permutation[k]  *  cost[k];  xNorm+=  xK  *  maxCosine;  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	427	427	2	replace	xK  =  permutation[k]  *  cost[k];  xNorm+=  xK  *  maxCosine;	  double    xK    =    permutation[k]    *    point[k];    xNorm+=    xK    *    maxCosine;    	non-compiled	[CE]  class,  interface,  or  enum  expected	15	None	replace
329	[BUG]  [BUGGY]  double  solvedCols  =  diag[k]  *  point[k];  xNorm+=  xW  *  xK  +  1;  [CE]  class,  interface,  or  enum  expected  [FE]                AssertionFailedError      [CONTEXT]      double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;      [BUGGY]  double  solvedCols  =  diag[k]  *  point[k];  xNorm+=  xW  *  xK  +  1;  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	427	427	2	replace	double  solvedCols  =  diag[k]  *  point[k];  xNorm+=  xW  *  xK  +  1;	  double    solvedCols    =    diag[k]    *    point[k];    xNorm+=    xW    *    xK;    	non-compiled	[CE]  class,  interface,  or  enum  expected	64	None	replace
330	[BUG]  [BUGGY]  double  solvedCols  =  diag[k]  *  value[k];  xNorm+=  xW  *  xK;  [CE]  class,  interface,  or  enum  expected  [FE]                  AssertionFailedError      [CONTEXT]      double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;      [BUGGY]  double  solvedCols  =  diag[k]  *  value[k];  xNorm+=  xW  *  xK;  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	427	427	2	replace	double  solvedCols  =  diag[k]  *  value[k];  xNorm+=  xW  *  xK;	  double    solvedCols    =    diag[k]    *    point[k];    xNorm+=    xW    *    xK;    	non-compiled	[CE]  class,  interface,  or  enum  expected	64	None	replace
331	[BUG]  [BUGGY]  double  solvedCols  =  diag[k]  *  cost[k];  xNorm+=  xW  *  xK;  [CE]  class,  interface,  or  enum  expected  [FE]                    AssertionFailedError      [CONTEXT]      double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;      [BUGGY]  double  solvedCols  =  diag[k]  *  cost[k];  xNorm+=  xW  *  xK;  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	427	427	2	replace	double  solvedCols  =  diag[k]  *  cost[k];  xNorm+=  xW  *  xK;	  double    solvedCols    =    diag[k]    *    point[k];    xNorm+=    xW    *    xK;    	non-compiled	[CE]  class,  interface,  or  enum  expected	64	None	replace
332	[BUG]  [BUGGY]  double  solvedCols  =  diag[k]  *  oldX[k];  xNorm+=  xNorm  *  oldX[1];  [CE]  class,  interface,  or  enum  expected  [FE]                    AssertionFailedError      [CONTEXT]      double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;      [BUGGY]  double  solvedCols  =  diag[k]  *  oldX[k];  xNorm+=  xNorm  *  oldX[1];  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	427	427	2	replace	double  solvedCols  =  diag[k]  *  oldX[k];  xNorm+=  xNorm  *  oldX[1];	  double    solvedCols    =    diag[k]    *    point[k];    xNorm+=    oldX[1];    	non-compiled	[CE]  class,  interface,  or  enum  expected	71	None	replace
333	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  oldY.length;  ++j)  {  [CE]  cannot  find  symbol  oldY  [FE]    AssertionFailedError    [CONTEXT]      double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;      [BUGGY]  for(int  j  =  0;  j  <  oldY.length;  ++j)  {  [BUGGY]      int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	427	427	2	replace	for(int  j  =  0;  j  <  oldY.length;  ++j)  {	  for(int    j    =    0;    j    <    oldX.length;    ++j)    {    	non-compiled	[CE]  cannot  find  symbol  oldY	46	None	replace
334	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  permutation.length;  ++j)  {  int  diag  =  0;  j  <  diag.length;  ++j)  {  }  [CE]  >  expected  [FE]        AssertionFailedError      [CONTEXT]      double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;      [BUGGY]  for(int  j  =  0;  j  <  permutation.length;  ++j)  {  int  diag  =  0;  j  <  diag.length;  ++j)  {  }  [BUGGY]      int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	427	427	2	replace	for(int  j  =  0;  j  <  permutation.length;  ++j)  {  int  diag  =  0;  j  <  diag.length;  ++j)  {  }	  for(int    j    =    0;    j    <    diag.length;    ++j)    {    int    diag    =    0;    j    <    diag.length;    ++j)    {    	non-compiled	[CE]  >  expected	61	None	replace
335	[BUG]  [BUGGY]  double  xK  =  point[k]  *  diag[k];  xNorm+=  xK  *  xK;  [CE]  class,  interface,  or  enum  expected  [FE]            AssertionFailedError      [CONTEXT]      double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;      [BUGGY]  double  xK  =  point[k]  *  diag[k];  xNorm+=  xK  *  xK;  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	427	427	2	replace	double  xK  =  point[k]  *  diag[k];  xNorm+=  xK  *  xK;	  double    xK    =    diag[k]    *    point[k];    xNorm+=    xK    *    xK;    	non-compiled	[CE]  class,  interface,  or  enum  expected	85	None	replace
336	[BUG]  [BUGGY]  double  xK  =  diagnostic[k]  *  point[k];  xNorm+=  xK  *  xK;  [CE]  class,  interface,  or  enum  expected  [FE]              AssertionFailedError      [CONTEXT]      double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;      [BUGGY]  double  xK  =  diagnostic[k]  *  point[k];  xNorm+=  xK  *  xK;  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	427	427	2	replace	double  xK  =  diagnostic[k]  *  point[k];  xNorm+=  xK  *  xK;	  double    xK    =    diag[k]    *    point[k];    xNorm+=    xK    *    xK;    	non-compiled	[CE]  class,  interface,  or  enum  expected	85	None	replace
337	[BUG]  [BUGGY]  double  solvedCols  =  diag[k]  *  point[k];  xNorm+=  xK[0];  [CE]  class,  interface,  or  enum  expected  [FE]                  AssertionFailedError      [CONTEXT]      double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;      [BUGGY]  double  solvedCols  =  diag[k]  *  point[k];  xNorm+=  xK[0];  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	427	427	2	replace	double  solvedCols  =  diag[k]  *  point[k];  xNorm+=  xK[0];	  double    solvedCols    =    diag[k]    *    point[k];    xNorm+=    oldX[0];    	non-compiled	[CE]  class,  interface,  or  enum  expected	70	None	replace
338	[BUG]  [BUGGY]  double  solvedCols  =  oldX[k]  *  point[k];  xNorm+=  oldX[0];  [CE]  class,  interface,  or  enum  expected  [FE]                        AssertionFailedError      [CONTEXT]      double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;      [BUGGY]  double  solvedCols  =  oldX[k]  *  point[k];  xNorm+=  oldX[0];  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	427	427	2	replace	double  solvedCols  =  oldX[k]  *  point[k];  xNorm+=  oldX[0];	  double    solvedCols    =    oldX[k]    *    point[k];    xNorm+=    oldX[xNorm];    	non-compiled	[CE]  class,  interface,  or  enum  expected	73	None	replace
339	[BUG]  [BUGGY]  double  solvedCols  =  oldX[k]  *  point[k];  xNorm+=  oldX[1];  [CE]  class,  interface,  or  enum  expected  [FE]                          AssertionFailedError      [CONTEXT]      double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;      [BUGGY]  double  solvedCols  =  oldX[k]  *  point[k];  xNorm+=  oldX[1];  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	427	427	2	replace	double  solvedCols  =  oldX[k]  *  point[k];  xNorm+=  oldX[1];	  double    solvedCols    =    oldX[k]    *    point[k];    xNorm+=    oldX[xNorm];    	non-compiled	[CE]  class,  interface,  or  enum  expected	73	None	replace
340	[BUG]  [BUGGY]  double  solvedCols  =  oldX[k]  *  diag[k];  xNorm+=  oldX[xNorm];  [CE]  class,  interface,  or  enum  expected  [FE]                            AssertionFailedError      [CONTEXT]      double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;      [BUGGY]  double  solvedCols  =  oldX[k]  *  diag[k];  xNorm+=  oldX[xNorm];  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	427	427	2	replace	double  solvedCols  =  oldX[k]  *  diag[k];  xNorm+=  oldX[xNorm];	  double    solvedCols    =    oldX[k]    *    point[k];    xNorm+=    oldX[xNorm];    	non-compiled	[CE]  class,  interface,  or  enum  expected	73	None	replace
341	[BUG]  [BUGGY]  double  solvedCols  =  oldX[k]  *  point[k];  xNorm+=  oldX[i];  [CE]  class,  interface,  or  enum  expected  [FE]                              AssertionFailedError      [CONTEXT]      double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;      [BUGGY]  double  solvedCols  =  oldX[k]  *  point[k];  xNorm+=  oldX[i];  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	427	427	2	replace	double  solvedCols  =  oldX[k]  *  point[k];  xNorm+=  oldX[i];	  double    solvedCols    =    oldX[k]    *    point[k];    xNorm+=    oldX[xNorm];    	non-compiled	[CE]  class,  interface,  or  enum  expected	73	None	replace
342	[BUG]  [BUGGY]  xNorm  =  diag[k]  *  point[k];  xNorm+=  oldX[xNorm];  [CE]  class,  interface,  or  enum  expected  [FE]                AssertionFailedError      [CONTEXT]      double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;      [BUGGY]  xNorm  =  diag[k]  *  point[k];  xNorm+=  oldX[xNorm];  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	427	427	2	replace	xNorm  =  diag[k]  *  point[k];  xNorm+=  oldX[xNorm];	  double    xNorm    =    diag[k]    *    permutation[k];    xNorm+=    oldX[xNorm];    	non-compiled	[CE]  class,  interface,  or  enum  expected	95	None	replace
343	[BUG]  [BUGGY]  double  xNorm  =  permutation[k]  *  diag[k];  xNorm+=  oldX[xNorm];  [CE]  class,  interface,  or  enum  expected  [FE]                  AssertionFailedError      [CONTEXT]      double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;      [BUGGY]  double  xNorm  =  permutation[k]  *  diag[k];  xNorm+=  oldX[xNorm];  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	427	427	2	replace	double  xNorm  =  permutation[k]  *  diag[k];  xNorm+=  oldX[xNorm];	  double    xNorm    =    diag[k]    *    permutation[k];    xNorm+=    oldX[xNorm];    	non-compiled	[CE]  class,  interface,  or  enum  expected	95	None	replace
344	[BUG]  [BUGGY]  xNorm  =  permutation[k]  *  diag[k];  xNorm+=  oldX[xNorm];  [CE]  class,  interface,  or  enum  expected  [FE]                    AssertionFailedError      [CONTEXT]      double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;      [BUGGY]  xNorm  =  permutation[k]  *  diag[k];  xNorm+=  oldX[xNorm];  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	427	427	2	replace	xNorm  =  permutation[k]  *  diag[k];  xNorm+=  oldX[xNorm];	  double    xNorm    =    diag[k]    *    permutation[k];    xNorm+=    oldX[xNorm];    	non-compiled	[CE]  class,  interface,  or  enum  expected	95	None	replace
345	[BUG]  [BUGGY]  int  j  =  oldX[j];  [CE]  class,  interface,  or  enum  expected  [FE]                  AssertionFailedError      [CONTEXT]      double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;      [BUGGY]  int  j  =  oldX[j];  [BUGGY]      int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	427	427	2	replace	int  j  =  oldX[j];	  int    j    =    permutation[j];    	non-compiled	[CE]  class,  interface,  or  enum  expected	80	None	replace
346	[BUG]  [BUGGY]  int  j  =  point[j];  [CE]  class,  interface,  or  enum  expected  [FE]                    AssertionFailedError      [CONTEXT]      double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;      [BUGGY]  int  j  =  point[j];  [BUGGY]      int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	427	427	2	replace	int  j  =  point[j];	  int    j    =    permutation[j];    	non-compiled	[CE]  class,  interface,  or  enum  expected	80	None	replace
347	[BUG]  [BUGGY]  double[]  solvedCols  =  diag[k]  *  pointRelativeTolerance  +  1;  [CE]  class,  interface,  or  enum  expected  [FE]              AssertionFailedError      [CONTEXT]      double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;      [BUGGY]  double[]  solvedCols  =  diag[k]  *  pointRelativeTolerance  +  1;  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	427	427	2	replace	double[]  solvedCols  =  diag[k]  *  pointRelativeTolerance  +  1;	  double[]    solvedCols    =    diag[k]    *    costRelativeTolerance    +    1;    	non-compiled	[CE]  class,  interface,  or  enum  expected	62	None	replace
348	[BUG]  [BUGGY]  int  permutation[j]  =  value;  [CE]  ']'  expected  [FE]                  AssertionFailedError      [CONTEXT]      double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;      [BUGGY]  int  permutation[j]  =  value;  [BUGGY]      int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	427	427	2	replace	int  permutation[j]  =  value;	  int    permutation[j]    =    previousCost;    	non-compiled	[CE]  ']'  expected	42	None	replace
349	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  permutations.length;  ++j)  {  [CE]  cannot  find  symbol  permutations  [FE]        AssertionFailedError      [CONTEXT]      double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;      [BUGGY]  for(int  j  =  0;  j  <  permutations.length;  ++j)  {  [BUGGY]      int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	427	427	2	replace	for(int  j  =  0;  j  <  permutations.length;  ++j)  {	  for(int    j    =    0;    j    <    diag.length;    ++j)    {    for(int    j    =    0;    j    <    diag.length;    ++j)    {    	non-compiled	[CE]  cannot  find  symbol  permutations	36	None	replace
350	[BUG]  [BUGGY]  double  solvedCols  =  permutation[k]  *  xNorm;  xNorm+=  oldX[0];  [CE]  class,  interface,  or  enum  expected  [FE]                AssertionFailedError      [CONTEXT]      double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;      [BUGGY]  double  solvedCols  =  permutation[k]  *  xNorm;  xNorm+=  oldX[0];  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	427	427	2	replace	double  solvedCols  =  permutation[k]  *  xNorm;  xNorm+=  oldX[0];	  double    solvedCols    =    permutation[k]    *    xNorm;    xNorm+=    oldX[xNorm];    	non-compiled	[CE]  class,  interface,  or  enum  expected	28	None	replace
351	[BUG]  [BUGGY]  double  solvedCols  =  oldX[k]  *  xNorm;  xNorm+=  permutation[xNorm];  [CE]  class,  interface,  or  enum  expected  [FE]                  AssertionFailedError      [CONTEXT]      double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;      [BUGGY]  double  solvedCols  =  oldX[k]  *  xNorm;  xNorm+=  permutation[xNorm];  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	427	427	2	replace	double  solvedCols  =  oldX[k]  *  xNorm;  xNorm+=  permutation[xNorm];	  double    solvedCols    =    permutation[k]    *    xNorm;    xNorm+=    oldX[xNorm];    	non-compiled	[CE]  class,  interface,  or  enum  expected	28	None	replace
352	[BUG]  [BUGGY]  double  solvedCols  =  diag[k]  *  xNorm;  xNorm+=  oldX[xNorm];  [CE]  class,  interface,  or  enum  expected  [FE]                    AssertionFailedError      [CONTEXT]      double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;      [BUGGY]  double  solvedCols  =  diag[k]  *  xNorm;  xNorm+=  oldX[xNorm];  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	427	427	2	replace	double  solvedCols  =  diag[k]  *  xNorm;  xNorm+=  oldX[xNorm];	  double    solvedCols    =    permutation[k]    *    xNorm;    xNorm+=    oldX[xNorm];    	non-compiled	[CE]  class,  interface,  or  enum  expected	28	None	replace
353	[BUG]  [BUGGY]  for(int  j  =  1;  j  <  diag.length;  ++j)  {  int  permutation[j]  =  permutation[j];  [CE]  ']'  expected  [FE]    AssertionFailedError    [CONTEXT]      double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;      [BUGGY]  for(int  j  =  1;  j  <  diag.length;  ++j)  {  int  permutation[j]  =  permutation[j];  [BUGGY]      int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	427	427	2	replace	for(int    j    =    1;    j    <    diag.length;    ++j)    {    int  permutation[j]  =  permutation[j];	  	non-compiled	[CE]  ']'  expected	49	None	add
354	[BUG]  [BUGGY]  for(int  j  =  1;  j  <  diag.length;  ++j)  {  int  permutation[j]  =  permutation[j];  point[pj]  =  oldX[oldRes];  [CE]  ']'  expected  [FE]      AssertionFailedError    [CONTEXT]      double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;      [BUGGY]  for(int  j  =  1;  j  <  diag.length;  ++j)  {  int  permutation[j]  =  permutation[j];  point[pj]  =  oldX[oldRes];  [BUGGY]      int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	427	427	2	replace	for(int    j    =    1;    j    <    diag.length;    ++j)    {    int  permutation[j]  =  permutation[j];  point[pj]  =  oldX[oldRes];	  	non-compiled	[CE]  ']'  expected	49	None	add
355	[BUG]  [BUGGY]  xK  =  permutation[k]  *  point[k];  xNorm+=  xK  *  cost;  [CE]  class,  interface,  or  enum  expected  [FE]                AssertionFailedError      [CONTEXT]      double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;      [BUGGY]  xK  =  permutation[k]  *  point[k];  xNorm+=  xK  *  cost;  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	427	427	2	replace	xK  =  permutation[k]  *  point[k];  xNorm+=  xK  *  cost;	  double    xK    =    permutation[k]    *    point[k];    xNorm+=    xK    *    cost;    	non-compiled	[CE]  class,  interface,  or  enum  expected	8	None	replace
356	[BUG]  [BUGGY]  xK  =  permutation[k]  *  cost[k];  xNorm+=  xK  *  point;  [CE]  class,  interface,  or  enum  expected  [FE]                  AssertionFailedError      [CONTEXT]      double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;      [BUGGY]  xK  =  permutation[k]  *  cost[k];  xNorm+=  xK  *  point;  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	427	427	2	replace	xK  =  permutation[k]  *  cost[k];  xNorm+=  xK  *  point;	  double    xK    =    permutation[k]    *    point[k];    xNorm+=    xK    *    cost;    	non-compiled	[CE]  class,  interface,  or  enum  expected	8	None	replace
357	[BUG]  [BUGGY]  double  xK  =  permutation[k]  *  cost[k];  xNorm+=  xK  *  point;  [CE]  class,  interface,  or  enum  expected  [FE]                    AssertionFailedError      [CONTEXT]      double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;      [BUGGY]  double  xK  =  permutation[k]  *  cost[k];  xNorm+=  xK  *  point;  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	427	427	2	replace	double  xK  =  permutation[k]  *  cost[k];  xNorm+=  xK  *  point;	  double    xK    =    permutation[k]    *    point[k];    xNorm+=    xK    *    cost;    	non-compiled	[CE]  class,  interface,  or  enum  expected	8	None	replace
358	[BUG]  [BUGGY]  xNorm  =  oldX[k]  *  point[k];  xNorm+=  xNorm;  [CE]  class,  interface,  or  enum  expected  [FE]                  AssertionFailedError      [CONTEXT]      double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;      [BUGGY]  xNorm  =  oldX[k]  *  point[k];  xNorm+=  xNorm;  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	427	427	2	replace	xNorm  =  oldX[k]  *  point[k];  xNorm+=  xNorm;	  double    xNorm    =    diag[k]    *    point[k];    xNorm+=    oldX[xNorm];    	non-compiled	[CE]  class,  interface,  or  enum  expected	89	None	replace
359	[BUG]  [BUGGY]  double  xNorm  =  diag[k]  *  point[k];  xNorm+=  oldX[0];  [CE]  class,  interface,  or  enum  expected  [FE]                    AssertionFailedError      [CONTEXT]      double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;      [BUGGY]  double  xNorm  =  diag[k]  *  point[k];  xNorm+=  oldX[0];  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	427	427	2	replace	double  xNorm  =  diag[k]  *  point[k];  xNorm+=  oldX[0];	  double    xNorm    =    diag[k]    *    point[k];    xNorm+=    oldX[xNorm];    	non-compiled	[CE]  class,  interface,  or  enum  expected	89	None	replace
360	[BUG]  [BUGGY]  double  xNorm  =  diag[k]  *  oldX[k];  xNorm+=  xNorm  *  xNorm;  [CE]  class,  interface,  or  enum  expected  [FE]                      AssertionFailedError      [CONTEXT]      double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;      [BUGGY]  double  xNorm  =  diag[k]  *  oldX[k];  xNorm+=  xNorm  *  xNorm;  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	427	427	2	replace	double  xNorm  =  diag[k]  *  oldX[k];  xNorm+=  xNorm  *  xNorm;	  double    xNorm    =    diag[k]    *    point[k];    xNorm+=    oldX[xNorm];    	non-compiled	[CE]  class,  interface,  or  enum  expected	89	None	replace
361	[BUG]  [BUGGY]  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  tmpVec;  [CE]  class,  interface,  or  enum  expected  [FE]            AssertionFailedError      [CONTEXT]      double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;      [BUGGY]  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  tmpVec;  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	427	427	2	replace	xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  tmpVec;	  xK    =    permutation[k]    *    point[k];    xNorm+=    xK    *    tmpVec;    	non-compiled	[CE]  class,  interface,  or  enum  expected	76	None	replace
362	[BUG]  [BUGGY]  xK  =  tmpVec  *  point[k];  xNorm+=  xK  *  permutation[k];  [CE]  class,  interface,  or  enum  expected  [FE]            AssertionFailedError      [CONTEXT]      double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;      [BUGGY]  xK  =  tmpVec  *  point[k];  xNorm+=  xK  *  permutation[k];  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	427	427	2	replace	xK  =  tmpVec  *  point[k];  xNorm+=  xK  *  permutation[k];	  xK    =    permutation[k]    *    point[k];    xNorm+=    xK    *    tmpVec;    	non-compiled	[CE]  class,  interface,  or  enum  expected	76	None	replace
363	[BUG]  [BUGGY]  xK  =  oldX[k]  *  point[k];  xNorm+=  xK  *  tmpVec;  [CE]  class,  interface,  or  enum  expected  [FE]              AssertionFailedError      [CONTEXT]      double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;      [BUGGY]  xK  =  oldX[k]  *  point[k];  xNorm+=  xK  *  tmpVec;  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	427	427	2	replace	xK  =  oldX[k]  *  point[k];  xNorm+=  xK  *  tmpVec;	  xK    =    permutation[k]    *    point[k];    xNorm+=    xK    *    tmpVec;    	non-compiled	[CE]  class,  interface,  or  enum  expected	76	None	replace
364	[BUG]  [BUGGY]  double[]  solvedCols  =  diag[0]  *  coeff1;  [CE]  class,  interface,  or  enum  expected  [FE]                  AssertionFailedError      [CONTEXT]      double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;      [BUGGY]  double[]  solvedCols  =  diag[0]  *  coeff1;  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	427	427	2	replace	double[]  solvedCols  =  diag[0]  *  coeff1;	  double[]    solvedCols    =    diag[0]    *    costRelativeTolerance;    	non-compiled	[CE]  class,  interface,  or  enum  expected	14	None	replace
365	[BUG]  [BUGGY]  xNorm+=  xK  *  point;  [CE]  class,  interface,  or  enum  expected  [FE]              AssertionFailedError      [CONTEXT]      double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;      [BUGGY]  xNorm+=  xK  *  point;  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	427	427	2	replace	xNorm+=  xK  *  point;	  xNorm+=    xK    *    xK;    	non-compiled	[CE]  class,  interface,  or  enum  expected	2	None	replace
366	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  oldX.length  &&  ++j)  {  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]      double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;      [BUGGY]  for(int  j  =  0;  j  <  oldX.length  &&  ++j)  {  [BUGGY]      int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	427	427	2	replace	for(int  j  =  0;  j  <  oldX.length  &&  ++j)  {	  for(int    j    =    0;    j    <    oldX.length;    ++j)    {    	non-compiled	[CE]  ';'  expected	46	None	replace
367	[BUG]  [BUGGY]  xK  =  permutation[k]  *  point[k];  xNorm+=  Math.sqrt(exp);  [CE]  class,  interface,  or  enum  expected  [FE]                  AssertionFailedError      [CONTEXT]      double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;      [BUGGY]  xK  =  permutation[k]  *  point[k];  xNorm+=  Math.sqrt(exp);  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	427	427	2	replace	xK  =  permutation[k]  *  point[k];  xNorm+=  Math.sqrt(exp);	  xK    =    permutation[k]    *    point[k];    xNorm+=    Math.sqrt(cost);    	non-compiled	[CE]  class,  interface,  or  enum  expected	92	None	replace
368	[BUG]  [BUGGY]  xK  =  permutation[k]  *  point[k];  xNorm+=  Math.sqrt(test(cost));  [CE]  class,  interface,  or  enum  expected  [FE]                    AssertionFailedError      [CONTEXT]      double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;      [BUGGY]  xK  =  permutation[k]  *  point[k];  xNorm+=  Math.sqrt(test(cost));  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	427	427	2	replace	xK  =  permutation[k]  *  point[k];  xNorm+=  Math.sqrt(test(cost));	  xK    =    permutation[k]    *    point[k];    xNorm+=    Math.sqrt(cost);    	non-compiled	[CE]  class,  interface,  or  enum  expected	92	None	replace
369	[BUG]  [BUGGY]  xNorm+=  diagnostic[k]  *  point[k];  [CE]  class,  interface,  or  enum  expected  [FE]                AssertionFailedError      [CONTEXT]      double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;      [BUGGY]  xNorm+=  diagnostic[k]  *  point[k];  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	427	427	2	replace	xNorm+=  diagnostic[k]  *  point[k];	  xNorm+=    permutation[k]    *    point[k];    	non-compiled	[CE]  class,  interface,  or  enum  expected	69	None	replace
370	[BUG]  [BUGGY]  int  j  =  startIteration?  permutation[j]  :  1;  [CE]  class,  interface,  or  enum  expected  [FE]                  AssertionFailedError      [CONTEXT]      double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;      [BUGGY]  int  j  =  startIteration?  permutation[j]  :  1;  [BUGGY]      int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	427	427	2	replace	int  j  =  startIteration?  permutation[j]  :  1;	  int    j    =    permutation[j];    	non-compiled	[CE]  class,  interface,  or  enum  expected	80	None	replace
371	[BUG]  [BUGGY]  xK  =  tmp[k]  *  point[k];  xNorm+=  xK  *  xK;  [CE]  class,  interface,  or  enum  expected  [FE]              AssertionFailedError      [CONTEXT]      double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;      [BUGGY]  xK  =  tmp[k]  *  point[k];  xNorm+=  xK  *  xK;  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	427	427	2	replace	xK  =  tmp[k]  *  point[k];  xNorm+=  xK  *  xK;	  xK    =    permutation[k]    *    point[k];    xNorm+=    xK    *    xK;    	non-compiled	[CE]  class,  interface,  or  enum  expected	68	None	replace
372	[BUG]  [BUGGY]  int  permutation  =  permutation[i  -  1];  [CE]  class,  interface,  or  enum  expected  [FE]                  AssertionFailedError      [CONTEXT]      double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;      [BUGGY]  int  permutation  =  permutation[i  -  1];  [BUGGY]      int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	427	427	2	replace	int  permutation  =  permutation[i  -  1];	  int    permutation    =    permutation[i];    	non-compiled	[CE]  class,  interface,  or  enum  expected	97	None	replace
373	[BUG]  [BUGGY]  int  permutation  =  permutation[i]  &  1;  [CE]  class,  interface,  or  enum  expected  [FE]                    AssertionFailedError      [CONTEXT]      double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;      [BUGGY]  int  permutation  =  permutation[i]  &  1;  [BUGGY]      int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	427	427	2	replace	int  permutation  =  permutation[i]  &  1;	  int    permutation    =    permutation[i];    	non-compiled	[CE]  class,  interface,  or  enum  expected	97	None	replace
374	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  oldX  +  1;  ++j)  {  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]                  AssertionFailedError      [CONTEXT]      double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;      [BUGGY]  for(int  j  =  0;  j  <  oldX  +  1;  ++j)  {  [BUGGY]      int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	427	427	2	replace	for(int  j  =  0;  j  <  oldX  +  1;  ++j)  {	  for(int    j    =    0;    j    <    oldX;    ++j)    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	22	None	replace
375	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  point.length;  ++j)  {  For(int  j  =  0;  j  <  point.length;  ++j)  {  [CE]  '.class'  expected  [FE]    AssertionFailedError    [CONTEXT]      double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;      [BUGGY]  for(int  j  =  0;  j  <  point.length;  ++j)  {  For(int  j  =  0;  j  <  point.length;  ++j)  {  [BUGGY]      int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	427	427	2	replace	for(int    j    =    0;    j    <    point.length;    ++j)    {    For(int  j  =  0;  j  <  point.length;  ++j)  {	  	non-compiled	[CE]  '.class'  expected	47	None	add
376	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  1;  ++j)  {  For(int  j  =  0;  j  <  1;  ++j)  {  [CE]  '.class'  expected  [FE]    AssertionFailedError    [CONTEXT]      double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;      [BUGGY]  for(int  j  =  0;  j  <  1;  ++j)  {  For(int  j  =  0;  j  <  1;  ++j)  {  [BUGGY]      int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	427	427	2	replace	for(int    j    =    0;    j    <    1;    ++j)    {    For(int  j  =  0;  j  <  1;  ++j)  {	  	non-compiled	[CE]  '.class'  expected	32	None	add
377	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  1;  ++j)  {  for(int  j  =  0;  j  <  2;  ++j)  {  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]      double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;      [BUGGY]  for(int  j  =  0;  j  <  1;  ++j)  {  for(int  j  =  0;  j  <  2;  ++j)  {  [BUGGY]      int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	427	427	2	replace	for(int    j    =    0;    j    <    1;    ++j)    {    for(int  j  =  0;  j  <  2;  ++j)  {	  	non-compiled	[CE]  illegal  start  of  expression	32	None	add
378	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  1;  ++j)  {  for(int  j  =  0;  j  <  1)  {  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]      double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;      [BUGGY]  for(int  j  =  0;  j  <  1;  ++j)  {  for(int  j  =  0;  j  <  1)  {  [BUGGY]      int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	427	427	2	replace	for(int    j    =    0;    j    <    1;    ++j)    {    for(int  j  =  0;  j  <  1)  {	  	non-compiled	[CE]  ';'  expected	32	None	add
379	[BUG]  [BUGGY]  xNorm  =  diag[k]  *  cost[k];  xNorm+=  oldX[xNorm];  [CE]  class,  interface,  or  enum  expected  [FE]                  AssertionFailedError      [CONTEXT]      double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;      [BUGGY]  xNorm  =  diag[k]  *  cost[k];  xNorm+=  oldX[xNorm];  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	427	427	2	replace	xNorm  =  diag[k]  *  cost[k];  xNorm+=  oldX[xNorm];	  double    xNorm    =    diag[k]    *    point[k];    xNorm+=    oldX[xNorm];    	non-compiled	[CE]  class,  interface,  or  enum  expected	89	None	replace
380	[BUG]  [BUGGY]  double  xNorm  =  diag[k]  *  point[k];  xNorm+=  xK  *  xNorm];  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;      [BUGGY]  double  xNorm  =  diag[k]  *  point[k];  xNorm+=  xK  *  xNorm];  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	427	427	2	replace	double  xNorm  =  diag[k]  *  point[k];  xNorm+=  xK  *  xNorm];	  double    xNorm    =    diag[k]    *    point[k];    xNorm+=    oldX[xNorm];    	non-compiled	[CE]  ';'  expected	89	None	replace
381	[BUG]  [BUGGY]  double  xNorm  =  diag[k]  *  point[k];  xNorm+=  xK  *  oldX[xNorm];  [CE]  class,  interface,  or  enum  expected  [FE]                      AssertionFailedError      [CONTEXT]      double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;      [BUGGY]  double  xNorm  =  diag[k]  *  point[k];  xNorm+=  xK  *  oldX[xNorm];  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	427	427	2	replace	double  xNorm  =  diag[k]  *  point[k];  xNorm+=  xK  *  oldX[xNorm];	  double    xNorm    =    diag[k]    *    point[k];    xNorm+=    oldX[xNorm];    	non-compiled	[CE]  class,  interface,  or  enum  expected	89	None	replace
382	[BUG]  [BUGGY]  double  solveCols  =  diag[k]  *  point[k];  xNorm+=  xK  *  xNorm];  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;      [BUGGY]  double  solveCols  =  diag[k]  *  point[k];  xNorm+=  xK  *  xNorm];  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	427	427	2	replace	double  solveCols  =  diag[k]  *  point[k];  xNorm+=  xK  *  xNorm];	  double    solveCols    =    diag[k]    *    point[k];    xNorm+=    oldX[xNorm];    	non-compiled	[CE]  ';'  expected	84	None	replace
383	[BUG]  [BUGGY]  double  xCols  =  diag[k]  *  point[k];  xNorm+=  xK  *  xNorm];  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;      [BUGGY]  double  xCols  =  diag[k]  *  point[k];  xNorm+=  xK  *  xNorm];  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	427	427	2	replace	double  xCols  =  diag[k]  *  point[k];  xNorm+=  xK  *  xNorm];	  double    xCols    =    diag[k]    *    point[k];    xNorm+=    oldX[xNorm];    	non-compiled	[CE]  ';'  expected	90	None	replace
384	[BUG]  [BUGGY]  double  xCols  =  diag[k]  *  value[k];  xNorm+=  oldX[xNorm];  [CE]  class,  interface,  or  enum  expected  [FE]                      AssertionFailedError      [CONTEXT]      double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;      [BUGGY]  double  xCols  =  diag[k]  *  value[k];  xNorm+=  oldX[xNorm];  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	427	427	2	replace	double  xCols  =  diag[k]  *  value[k];  xNorm+=  oldX[xNorm];	  double    xCols    =    diag[k]    *    point[k];    xNorm+=    oldX[xNorm];    	non-compiled	[CE]  class,  interface,  or  enum  expected	90	None	replace
385	[BUG]  [BUGGY]  double  xK  =  diag[k]  *  point[k];  xNorm+=  Math.sqrt(diag[k]);  [CE]  class,  interface,  or  enum  expected  [FE]                AssertionFailedError      [CONTEXT]      double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;      [BUGGY]  double  xK  =  diag[k]  *  point[k];  xNorm+=  Math.sqrt(diag[k]);  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	427	427	2	replace	double  xK  =  diag[k]  *  point[k];  xNorm+=  Math.sqrt(diag[k]);	  double    xK    =    permutation[k]    *    point[k];    xNorm+=    Math.sqrt(diag[k]);    	non-compiled	[CE]  class,  interface,  or  enum  expected	91	None	replace
386	[BUG]  [BUGGY]  xK  =  diagnostic[k]  *  point[k];  xNorm+=  Math.sqrt(diag[k]);  [CE]  class,  interface,  or  enum  expected  [FE]                  AssertionFailedError      [CONTEXT]      double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;      [BUGGY]  xK  =  diagnostic[k]  *  point[k];  xNorm+=  Math.sqrt(diag[k]);  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	427	427	2	replace	xK  =  diagnostic[k]  *  point[k];  xNorm+=  Math.sqrt(diag[k]);	  double    xK    =    permutation[k]    *    point[k];    xNorm+=    Math.sqrt(diag[k]);    	non-compiled	[CE]  class,  interface,  or  enum  expected	91	None	replace
387	[BUG]  [BUGGY]  double  xK  =  permutation[k]  *  point[k];  xNorm+=  xN  *  xK;  [CE]  class,  interface,  or  enum  expected  [FE]              AssertionFailedError      [CONTEXT]      double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;      [BUGGY]  double  xK  =  permutation[k]  *  point[k];  xNorm+=  xN  *  xK;  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	427	427	2	replace	double  xK  =  permutation[k]  *  point[k];  xNorm+=  xN  *  xK;	  double    xK    =    permutation[k]    *    point[k];    xNorm+=    xN    *    tmpVec;    	non-compiled	[CE]  class,  interface,  or  enum  expected	17	None	replace
388	[BUG]  [BUGGY]  double  xK  =  point[k]  *  diag[k];  xNorm+=  xK  *  xNorm;  [CE]  class,  interface,  or  enum  expected  [FE]              AssertionFailedError      [CONTEXT]      double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;      [BUGGY]  double  xK  =  point[k]  *  diag[k];  xNorm+=  xK  *  xNorm;  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	427	427	2	replace	double  xK  =  point[k]  *  diag[k];  xNorm+=  xK  *  xNorm;	  double    xK    =    point[k]    *    point[k];    xNorm+=    xK    *    xNorm;    	non-compiled	[CE]  class,  interface,  or  enum  expected	98	None	replace
389	[BUG]  [BUGGY]  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  oldX;  [CE]  class,  interface,  or  enum  expected  [FE]                  AssertionFailedError      [CONTEXT]      double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;      [BUGGY]  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  oldX;  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	427	427	2	replace	xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  oldX;	  xK    =    permutation[k]    *    point[k];    xNorm+=    xK    *    oldX;    	non-compiled	[CE]  class,  interface,  or  enum  expected	82	None	replace
390	[BUG]  [BUGGY]  xK  =  oldX[k]  *  point[k];  xNorm+=  xK  *  xK;  [CE]  class,  interface,  or  enum  expected  [FE]                    AssertionFailedError      [CONTEXT]      double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;      [BUGGY]  xK  =  oldX[k]  *  point[k];  xNorm+=  xK  *  xK;  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	427	427	2	replace	xK  =  oldX[k]  *  point[k];  xNorm+=  xK  *  xK;	  xK    =    permutation[k]    *    point[k];    xNorm+=    xK    *    oldX;    	non-compiled	[CE]  class,  interface,  or  enum  expected	82	None	replace
391	[BUG]  [BUGGY]  double  solvedCols  =  diag[k]  *  xNorm;  xNorm+=  xK  *  xNorm;  [CE]  class,  interface,  or  enum  expected  [FE]              AssertionFailedError      [CONTEXT]      double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;      [BUGGY]  double  solvedCols  =  diag[k]  *  xNorm;  xNorm+=  xK  *  xNorm;  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	427	427	2	replace	double  solvedCols  =  diag[k]  *  xNorm;  xNorm+=  xK  *  xNorm;	  double    solvedCols    =    diag[k]    *    point[k];    xNorm+=    xK    *    xNorm;    	non-compiled	[CE]  class,  interface,  or  enum  expected	3	None	replace
392	[BUG]  [BUGGY]  double  xK  =  diag[k]  *  point[k];  xNorm+=  Math.sqrt(test(xK));  [CE]  class,  interface,  or  enum  expected  [FE]                  AssertionFailedError      [CONTEXT]      double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;      [BUGGY]  double  xK  =  diag[k]  *  point[k];  xNorm+=  Math.sqrt(test(xK));  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	427	427	2	replace	double  xK  =  diag[k]  *  point[k];  xNorm+=  Math.sqrt(test(xK));	  double    xK    =    permutation[k]    *    point[k];    xNorm+=    Math.sqrt(test(xK));    	non-compiled	[CE]  class,  interface,  or  enum  expected	59	None	replace
393	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  preRed;  ++j)  {  For(int  j  =  0;  j  <  preRed;  ++j)  {  [CE]  '.class'  expected  [FE]    AssertionFailedError    [CONTEXT]      double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;      [BUGGY]  for(int  j  =  0;  j  <  preRed;  ++j)  {  For(int  j  =  0;  j  <  preRed;  ++j)  {  [BUGGY]      int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	427	427	2	replace	for(int    j    =    0;    j    <    preRed;    ++j)    {    For(int  j  =  0;  j  <  preRed;  ++j)  {	  	non-compiled	[CE]  '.class'  expected	23	None	add
394	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  preRed;  ++j)  {  int  preRed  =  0;  j  <  preRed;  ++j)  {  [CE]  >  expected  [FE]      AssertionFailedError    [CONTEXT]      double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;      [BUGGY]  for(int  j  =  0;  j  <  preRed;  ++j)  {  int  preRed  =  0;  j  <  preRed;  ++j)  {  [BUGGY]      int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	427	427	2	replace	for(int    j    =    0;    j    <    preRed;    ++j)    {    int  preRed  =  0;  j  <  preRed;  ++j)  {	  	non-compiled	[CE]  >  expected	23	None	add
395	[BUG]  [BUGGY]  xK  =  diagnostic[k]  *  point[k];  xNorm+=  diag[xK  *  xNorm;  [CE]  ']'  expected  [FE]                AssertionFailedError      [CONTEXT]      double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;      [BUGGY]  xK  =  diagnostic[k]  *  point[k];  xNorm+=  diag[xK  *  xNorm;  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	427	427	2	replace	xK  =  diagnostic[k]  *  point[k];  xNorm+=  diag[xK  *  xNorm;	  double    xK    =    permutation[k]    *    point[k];    xNorm+=    diag[xK    *    xNorm;    	non-compiled	[CE]  ']'  expected	66	None	replace
396	[BUG]  [BUGGY]  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  tmpVec  +  1;  [CE]  class,  interface,  or  enum  expected  [FE]                AssertionFailedError      [CONTEXT]      double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;      [BUGGY]  double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  tmpVec  +  1;  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	427	427	2	replace	double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  tmpVec  +  1;	  double    xK    =    permutation[k]    *    point[k];    xNorm+=    xK    *    tmpVec    +    1;    	non-compiled	[CE]  class,  interface,  or  enum  expected	78	None	replace
397	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  1;  ++j)  {  int  permutation[j]  =  permutation[j];  point[pj]  =  oldX[pj];  }  [CE]  ']'  expected  [FE]          AssertionFailedError      [CONTEXT]      double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;      [BUGGY]  for(int  j  =  0;  j  <  1;  ++j)  {  int  permutation[j]  =  permutation[j];  point[pj]  =  oldX[pj];  }  [BUGGY]      int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	427	427	2	replace	for(int  j  =  0;  j  <  1;  ++j)  {  int  permutation[j]  =  permutation[j];  point[pj]  =  oldX[pj];  }	  for(int    j    =    0;    j    <    2;    ++j)    {    int    permutation[j]    =    permutation[j];    point[pj]    =    oldX[pj];    	non-compiled	[CE]  ']'  expected	54	None	replace
398	[BUG]  [BUGGY]  double  solvedCols  =  oldX[k]  *  xNorm;  xNorm+=  oldX[xNorm];  [CE]  class,  interface,  or  enum  expected  [FE]                AssertionFailedError      [CONTEXT]      double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;      [BUGGY]  double  solvedCols  =  oldX[k]  *  xNorm;  xNorm+=  oldX[xNorm];  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	427	427	2	replace	double  solvedCols  =  oldX[k]  *  xNorm;  xNorm+=  oldX[xNorm];	  double    solvedCols    =    permutation[k]    *    xNorm;    xNorm+=    oldX[xNorm];    	non-compiled	[CE]  class,  interface,  or  enum  expected	28	None	replace
399	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  permutation.length;  ++j)  {  For(int  j  =  0;  j  <  permutation.length;  ++j)  {  [CE]  '.class'  expected  [FE]    AssertionFailedError    [CONTEXT]      double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;      [BUGGY]  for(int  j  =  0;  j  <  permutation.length;  ++j)  {  For(int  j  =  0;  j  <  permutation.length;  ++j)  {  [BUGGY]      int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	427	427	2	replace	for(int    j    =    0;    j    <    permutation.length;    ++j)    {    For(int  j  =  0;  j  <  permutation.length;  ++j)  {	  	non-compiled	[CE]  '.class'  expected	20	None	add
400	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  permutation.length;  ++j)  {  int  permutation  =  0;  j  <  permutation.length;  ++j)  {  [CE]  >  expected  [FE]      AssertionFailedError    [CONTEXT]      double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;      [BUGGY]  for(int  j  =  0;  j  <  permutation.length;  ++j)  {  int  permutation  =  0;  j  <  permutation.length;  ++j)  {  [BUGGY]      int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	427	427	2	replace	for(int    j    =    0;    j    <    permutation.length;    ++j)    {    int  permutation  =  0;  j  <  permutation.length;  ++j)  {	  	non-compiled	[CE]  >  expected	20	None	add
401	[BUG]  [BUGGY]  xK  =  tmp[k]  *  point[k];  xNorm+=  xK  *  xNorm;  [CE]  class,  interface,  or  enum  expected  [FE]              AssertionFailedError      [CONTEXT]      double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;      [BUGGY]  xK  =  tmp[k]  *  point[k];  xNorm+=  xK  *  xNorm;  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	427	427	2	replace	xK  =  tmp[k]  *  point[k];  xNorm+=  xK  *  xNorm;	  xK    =    permutation[k]    *    point[k];    xNorm+=    xK    *    xNorm;    	non-compiled	[CE]  class,  interface,  or  enum  expected	65	None	replace
402	[BUG]  [BUGGY]  double  xK  =  diagnostic[k]  *  point[k];  xNorm+=  diag[xK  *  xK;  [CE]  ']'  expected  [FE]            AssertionFailedError      [CONTEXT]      double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;      [BUGGY]  double  xK  =  diagnostic[k]  *  point[k];  xNorm+=  diag[xK  *  xK;  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	427	427	2	replace	double  xK  =  diagnostic[k]  *  point[k];  xNorm+=  diag[xK  *  xK;	  double    xK    =    permutation[k]    *    point[k];    xNorm+=    diag[xK    *    xK;    	non-compiled	[CE]  ']'  expected	67	None	replace
403	[BUG]  [BUGGY]  xK  =  diagnostic[k]  *  point[k];  xNorm+=  diag[xK  *  xK;  [CE]  ']'  expected  [FE]              AssertionFailedError      [CONTEXT]      double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;      [BUGGY]  xK  =  diagnostic[k]  *  point[k];  xNorm+=  diag[xK  *  xK;  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	427	427	2	replace	xK  =  diagnostic[k]  *  point[k];  xNorm+=  diag[xK  *  xK;	  double    xK    =    permutation[k]    *    point[k];    xNorm+=    diag[xK    *    xK;    	non-compiled	[CE]  ']'  expected	67	None	replace
404	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  conmutation.length;  ++j)  {  [CE]  cannot  find  symbol  conmutation  [FE]        AssertionFailedError      [CONTEXT]      double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;      [BUGGY]  for(int  j  =  0;  j  <  conmutation.length;  ++j)  {  [BUGGY]      int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	427	427	2	replace	for(int  j  =  0;  j  <  conmutation.length;  ++j)  {	  for(int    j    =    0;    j    <    cost.length;    ++j)    {    	non-compiled	[CE]  cannot  find  symbol  conmutation	93	None	replace
405	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  3;  ++j)  {  for(int  j  =  0;  j  <  4;  ++j)  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;      [BUGGY]  for(int  j  =  0;  j  <  3;  ++j)  {  for(int  j  =  0;  j  <  4;  ++j)  {  [BUGGY]      int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	427	427	2	replace	for(int    j    =    0;    j    <    3;    ++j)    {    for(int  j  =  0;  j  <  4;  ++j)  {	  	non-compiled	[CE]  illegal  start  of  expression	30	None	add
406	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  3;  ++j)  {  double  j  =  0;  j  <  3;  ++j)  {  [CE]  illegal  start  of  type  [FE]      AssertionFailedError    [CONTEXT]      double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;      [BUGGY]  for(int  j  =  0;  j  <  3;  ++j)  {  double  j  =  0;  j  <  3;  ++j)  {  [BUGGY]      int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	427	427	2	replace	for(int    j    =    0;    j    <    3;    ++j)    {    double  j  =  0;  j  <  3;  ++j)  {	  	non-compiled	[CE]  illegal  start  of  type	30	None	add
407	[BUG]  [BUGGY]  double  xK  =  value[k]  *  point[k];  xNorm+=  Math.sqrt(value);  [CE]  class,  interface,  or  enum  expected  [FE]                AssertionFailedError      [CONTEXT]      double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;      [BUGGY]  double  xK  =  value[k]  *  point[k];  xNorm+=  Math.sqrt(value);  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	427	427	2	replace	double  xK  =  value[k]  *  point[k];  xNorm+=  Math.sqrt(value);	  double    xK    =    permutation[k]    *    point[k];    xNorm+=    Math.sqrt(value);    	non-compiled	[CE]  class,  interface,  or  enum  expected	58	None	replace
408	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;      [BUGGY]  for(int  j  =  0;  j  <  costRelativeTolerance;  ++j)  {  [BUGGY]      int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	427	427	2	add	for(int  j  =  0;  j  <  costRelativeTolerance;  ++j)  {	  for(int    j    =    0;    j    <    preRed;    ++j)    {    	compilable	  [FE]  AssertionFailedError  	24	12	replace
409	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  costRelativeTolerance;  ++j)  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;      [BUGGY]  for(int  j  =  0;  j  <  costRelativeTolerance;  ++j)  {  [BUGGY]      int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	427	427	2	replace	for(int  j  =  0;  j  <  costRelativeTolerance;  ++j)  {	  for(int    j    =    0;    j    <    preRed;    ++j)    {    	compilable	  [FE]  AssertionFailedError  	24	12	replace
410	[BUG]  [BUGGY]  double  solvedCols  =  oldX[k]  *  diagR[xNorm];  xNorm+=  oldX[xNorm];  [CE]  class,  interface,  or  enum  expected  [FE]                  AssertionFailedError      [CONTEXT]      double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;      [BUGGY]  double  solvedCols  =  oldX[k]  *  diagR[xNorm];  xNorm+=  oldX[xNorm];  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	427	427	2	replace	double  solvedCols  =  oldX[k]  *  diagR[xNorm];  xNorm+=  oldX[xNorm];	  double    solvedCols    =    permutation[k]    *    diagR[xNorm];    xNorm+=    oldX[xNorm];    	non-compiled	[CE]  class,  interface,  or  enum  expected	29	None	replace
411	[BUG]  [BUGGY]  double  solvedCols  =  diag[k]  *  tmpR[xNorm];  xNorm+=  oldX[xNorm];  [CE]  class,  interface,  or  enum  expected  [FE]                    AssertionFailedError      [CONTEXT]      double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;      [BUGGY]  double  solvedCols  =  diag[k]  *  tmpR[xNorm];  xNorm+=  oldX[xNorm];  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	427	427	2	replace	double  solvedCols  =  diag[k]  *  tmpR[xNorm];  xNorm+=  oldX[xNorm];	  double    solvedCols    =    permutation[k]    *    diagR[xNorm];    xNorm+=    oldX[xNorm];    	non-compiled	[CE]  class,  interface,  or  enum  expected	29	None	replace
412	[BUG]  [BUGGY]  double  xK  =  tmp[k]  *  point[k];  xNorm+=  xK  *  xK;  [CE]  class,  interface,  or  enum  expected  [FE]            AssertionFailedError      [CONTEXT]      double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;      [BUGGY]  double  xK  =  tmp[k]  *  point[k];  xNorm+=  xK  *  xK;  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	427	427	2	replace	double  xK  =  tmp[k]  *  point[k];  xNorm+=  xK  *  xK;	  double    xK    =    permutation[k]    *    point[k];    xNorm+=    tmp    *    xK;    	non-compiled	[CE]  class,  interface,  or  enum  expected	86	None	replace
413	[BUG]  [BUGGY]  double  xWs  =  diag[k]  *  point[k];  xNorm+=  xW  *  xK;  [CE]  class,  interface,  or  enum  expected  [FE]                AssertionFailedError      [CONTEXT]      double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;      [BUGGY]  double  xWs  =  diag[k]  *  point[k];  xNorm+=  xW  *  xK;  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	427	427	2	replace	double  xWs  =  diag[k]  *  point[k];  xNorm+=  xW  *  xK;	  double    solvedCols    =    diag[k]    *    point[k];    xNorm+=    xW    *    xK;    	non-compiled	[CE]  class,  interface,  or  enum  expected	64	None	replace
414	[BUG]  [BUGGY]  double  xK  =  diag[k]  *  costRelativeTolerance;  xNorm+=  xK  *  xK;  [CE]  class,  interface,  or  enum  expected  [FE]            AssertionFailedError      [CONTEXT]      double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;      [BUGGY]  double  xK  =  diag[k]  *  costRelativeTolerance;  xNorm+=  xK  *  xK;  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	427	427	2	replace	double  xK  =  diag[k]  *  costRelativeTolerance;  xNorm+=  xK  *  xK;	  double    xK    =    diag[k]    *    point[k];    xNorm+=    xK    *    xK;    	non-compiled	[CE]  class,  interface,  or  enum  expected	85	None	replace
415	[BUG]  [BUGGY]  for(int  j  =  1;  j  <  diag.length;  ++j)  {  For(int  j  =  1;  j  <  diag.length;  ++j)  {  [CE]  '.class'  expected  [FE]    AssertionFailedError    [CONTEXT]      double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;      [BUGGY]  for(int  j  =  1;  j  <  diag.length;  ++j)  {  For(int  j  =  1;  j  <  diag.length;  ++j)  {  [BUGGY]      int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	427	427	2	replace	for(int    j    =    1;    j    <    diag.length;    ++j)    {    For(int  j  =  1;  j  <  diag.length;  ++j)  {	  	non-compiled	[CE]  '.class'  expected	49	None	add
416	[BUG]  [BUGGY]  for(int  j  =  1;  j  <  diag.length;  ++j)  {  Integer  j  =  1;  j  <  diag.length;  ++j)  {  [CE]  >  expected  [FE]      AssertionFailedError    [CONTEXT]      double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;      [BUGGY]  for(int  j  =  1;  j  <  diag.length;  ++j)  {  Integer  j  =  1;  j  <  diag.length;  ++j)  {  [BUGGY]      int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	427	427	2	replace	for(int    j    =    1;    j    <    diag.length;    ++j)    {    Integer  j  =  1;  j  <  diag.length;  ++j)  {	  	non-compiled	[CE]  >  expected	49	None	add
417	[BUG]  [BUGGY]  double  xCols  =  oldX[k]  *  point[k];  xNorm+=  oldX[xNorm];  [CE]  class,  interface,  or  enum  expected  [FE]                        AssertionFailedError      [CONTEXT]      double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;      [BUGGY]  double  xCols  =  oldX[k]  *  point[k];  xNorm+=  oldX[xNorm];  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	427	427	2	replace	double  xCols  =  oldX[k]  *  point[k];  xNorm+=  oldX[xNorm];	  double    solvedCols    =    oldX[k]    *    point[k];    xNorm+=    oldX[xNorm];    	non-compiled	[CE]  class,  interface,  or  enum  expected	73	None	replace
418	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;      [BUGGY]  for(int  j  =  0;  j  <  point.length  -  1;  ++j)  {  [BUGGY]      int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	427	427	2	add	for(int  j  =  0;  j  <  point.length  -  1;  ++j)  {	  for(int    j    =    0;    j    <    point.length;    ++j)    {    	compilable	  [FE]  AssertionFailedError  	48	12	replace
419	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  point.length  -  1;  ++j)  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;      [BUGGY]  for(int  j  =  0;  j  <  point.length  -  1;  ++j)  {  [BUGGY]      int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	427	427	2	replace	for(int  j  =  0;  j  <  point.length  -  1;  ++j)  {	  for(int    j    =    0;    j    <    point.length;    ++j)    {    	compilable	  [FE]  AssertionFailedError  	48	12	replace
420	[BUG]  [BUGGY]  double[]  solvedCols  =  diag[k]  *  point[k];  [CE]  class,  interface,  or  enum  expected  [FE]              AssertionFailedError      [CONTEXT]      double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;      [BUGGY]  double[]  solvedCols  =  diag[k]  *  point[k];  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	427	427	2	replace	double[]  solvedCols  =  diag[k]  *  point[k];	  double[]    solvedCols    =    diag[k]    *    cost;    	non-compiled	[CE]  class,  interface,  or  enum  expected	12	None	replace
421	[BUG]  [BUGGY]  xNorm  =  oldX[k]  *  permutation[k];  [CE]  class,  interface,  or  enum  expected  [FE]                AssertionFailedError      [CONTEXT]      double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;      [BUGGY]  xNorm  =  oldX[k]  *  permutation[k];  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	427	427	2	replace	xNorm  =  oldX[k]  *  permutation[k];	  double    xNorm    =    diag[k]    *    permutation[k];    xNorm+=    oldX[xNorm];    	non-compiled	[CE]  class,  interface,  or  enum  expected	95	None	replace
422	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  1;  ++j)  {  int  permutation[j]  =  permutation[j];  point[pj]  =  oldX[permutation[j];  }  [CE]  ']'  expected  [FE]              AssertionFailedError      [CONTEXT]      double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;      [BUGGY]  for(int  j  =  0;  j  <  1;  ++j)  {  int  permutation[j]  =  permutation[j];  point[pj]  =  oldX[permutation[j];  }  [BUGGY]      int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	427	427	2	replace	for(int  j  =  0;  j  <  1;  ++j)  {  int  permutation[j]  =  permutation[j];  point[pj]  =  oldX[permutation[j];  }	  for(int    j    =    0;    j    <    2;    ++j)    {    int    permutation[j]    =    permutation[j];    point[pj]    =    oldX[permutation[j];    	non-compiled	[CE]  ']'  expected	56	None	replace
423	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  oldX.length;  ++j)  {  For(int  j  =  0;  j  <  oldX.length;  ++j)  {  [CE]  '.class'  expected  [FE]    AssertionFailedError    [CONTEXT]      double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;      [BUGGY]  for(int  j  =  0;  j  <  oldX.length;  ++j)  {  For(int  j  =  0;  j  <  oldX.length;  ++j)  {  [BUGGY]      int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	427	427	2	replace	for(int    j    =    0;    j    <    oldX.length;    ++j)    {    For(int  j  =  0;  j  <  oldX.length;  ++j)  {	  	non-compiled	[CE]  '.class'  expected	45	None	add
424	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  oldX.length;  ++j)  {  Integer  j  =  0;  j  <  oldX.length;  ++j)  {  [CE]  >  expected  [FE]      AssertionFailedError    [CONTEXT]      double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;      [BUGGY]  for(int  j  =  0;  j  <  oldX.length;  ++j)  {  Integer  j  =  0;  j  <  oldX.length;  ++j)  {  [BUGGY]      int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	427	427	2	replace	for(int    j    =    0;    j    <    oldX.length;    ++j)    {    Integer  j  =  0;  j  <  oldX.length;  ++j)  {	  	non-compiled	[CE]  >  expected	45	None	add
425	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  oldX.length;  ++j)  {  for(int  j  =  0;  j  <  oldX.length);  ++j)  {  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]      double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;      [BUGGY]  for(int  j  =  0;  j  <  oldX.length;  ++j)  {  for(int  j  =  0;  j  <  oldX.length);  ++j)  {  [BUGGY]      int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	427	427	2	replace	for(int    j    =    0;    j    <    oldX.length;    ++j)    {    for(int  j  =  0;  j  <  oldX.length);  ++j)  {	  	non-compiled	[CE]  ';'  expected	45	None	add
426	[BUG]  [BUGGY]  double  oldX  =  diag[k]  *  point[k];  [CE]  class,  interface,  or  enum  expected  [FE]                AssertionFailedError      [CONTEXT]      double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;      [BUGGY]  double  oldX  =  diag[k]  *  point[k];  [BUGGY]      int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	427	427	2	replace	double  oldX  =  diag[k]  *  point[k];	  int    oldX    =    diag[k]    *    point[k];    	non-compiled	[CE]  class,  interface,  or  enum  expected	96	None	replace
427	[BUG]  [BUGGY]  int  permutation  =  permutation[0]  +  1;  [CE]  class,  interface,  or  enum  expected  [FE]                    AssertionFailedError      [CONTEXT]      double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;      [BUGGY]  int  permutation  =  permutation[0]  +  1;  [BUGGY]      int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	427	427	2	replace	int  permutation  =  permutation[0]  +  1;	  int    permutation    =    permutation[0];    	non-compiled	[CE]  class,  interface,  or  enum  expected	81	None	replace
428	[BUG]  [BUGGY]  xNorm+=  cost  *  permutation[k];  [CE]  class,  interface,  or  enum  expected  [FE]              AssertionFailedError      [CONTEXT]      double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;      [BUGGY]  xNorm+=  cost  *  permutation[k];  [BUGGY]      for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	427	427	2	replace	xNorm+=  cost  *  permutation[k];	  xNorm+=    xK    *    permutation[k];    	non-compiled	[CE]  class,  interface,  or  enum  expected	7	None	replace
429	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  diag.length;  ++j)  {  int  permutation[j]  =  permutation[j];  }  [CE]  ']'  expected  [FE]                AssertionFailedError      [CONTEXT]      double  xK  =  diag[k]  *  point[k];  xNorm+=  xK  *  xK;  }  xNorm  =  Math.sqrt(xNorm);    }  else  {  cost  =  previousCost;      [BUGGY]  for(int  j  =  0;  j  <  diag.length;  ++j)  {  int  permutation[j]  =  permutation[j];  }  [BUGGY]      int  pj  =  permutation[j];  point[pj]  =  oldX[pj];  }  tmpVec=  residuals;  residuals  =  oldRes;  oldRes=  tmpVec;  }  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3651483716701107	427	427	2	replace	for(int  j  =  0;  j  <  diag.length;  ++j)  {  int  permutation[j]  =  permutation[j];  }	  for(int    j    =    0;    j    <    diag.length;    ++j)    {    int    permutation[j]    =    permutation[j];    	non-compiled	[CE]  ']'  expected	40	None	replace
