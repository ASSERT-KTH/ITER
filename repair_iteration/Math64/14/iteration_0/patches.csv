bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]    double  tmp  =(actRed  <  0)?  (0.5  *  dirDer  /(dirDer  +  0.5  *  actRed)):  0.5;  [CE]  variable  tmp  is  already  defined  in  method  doOptimize()  [FE]    AssertionFailedError  [CONTEXT]  double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {  [BUGGY]    double  tmp  =(actRed  <  0)?  (0.5  *  dirDer  /(dirDer  +  0.5  *  actRed)):  0.5;  [BUGGY]  tmp  =  0.1;  }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	replace	    double  tmp  =(actRed  <  0)?  (0.5  *  dirDer  /(dirDer  +  0.5  *  actRed)):  0.5;		non-compiled	[CE]  variable  tmp  is  already  defined  in  method  doOptimize()	28	None	add
2	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError  [CONTEXT]  double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {  [BUGGY]  tmp  =  0.5;  [BUGGY]  }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	add	tmp  =  0.5;	tmp  =  0.1;  	compilable	  [FE]  AssertionFailedError  	27	7	replace
3	[BUG]  [BUGGY]  tmp  =  0.5;  [FE]  AssertionFailedError  [FE]    AssertionFailedError  [CONTEXT]  double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {  [BUGGY]  tmp  =  0.5;  [BUGGY]  }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	replace	tmp  =  0.5;	tmp  =  0.1;  	compilable	  [FE]  AssertionFailedError  	27	7	replace
4	[BUG]  [BUGGY]  timeout  [FE]      AssertionFailedError  [CONTEXT]  double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {  [BUGGY]  tmp  =  1.0;  [BUGGY]  }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	add	tmp  =  1.0;	tmp  =  0.1;  	compilable	timeout	27	1	replace
5	[BUG]  [BUGGY]  tmp  =  1.0;  timeout  [FE]      AssertionFailedError  [CONTEXT]  double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {  [BUGGY]  tmp  =  1.0;  [BUGGY]  }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	replace	tmp  =  1.0;	tmp  =  0.1;  	compilable	timeout	27	1	replace
6	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError  [CONTEXT]  double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {  [BUGGY]  tmp  =  0.0;  [BUGGY]  }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	add	tmp  =  0.0;	tmp  =  0.1;  	compilable	  [FE]  AssertionFailedError  	27	12	replace
7	[BUG]  [BUGGY]  tmp  =  0.0;  [FE]  AssertionFailedError  [FE]        AssertionFailedError  [CONTEXT]  double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {  [BUGGY]  tmp  =  0.0;  [BUGGY]  }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	replace	tmp  =  0.0;	tmp  =  0.1;  	compilable	  [FE]  AssertionFailedError  	27	12	replace
8	[BUG]  [BUGGY]  timeout  [FE]          AssertionFailedError  [CONTEXT]  double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {  [BUGGY]  tmp  =  1;  [BUGGY]  }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	add	tmp  =  1;	tmp  =  0.1;  	compilable	timeout	27	1	replace
9	[BUG]  [BUGGY]  tmp  =  1;  timeout  [FE]          AssertionFailedError  [CONTEXT]  double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {  [BUGGY]  tmp  =  1;  [BUGGY]  }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	replace	tmp  =  1;	tmp  =  0.1;  	compilable	timeout	27	1	replace
10	[BUG]  [BUGGY]    double  tmp  =(actRed  ==  0)?  0.5  *  dirDer  /(dirDer  +  0.5  *  actRed)):  0.5;  [CE]  :  expected  [FE]    AssertionFailedError  [CONTEXT]  double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {  [BUGGY]    double  tmp  =(actRed  ==  0)?  0.5  *  dirDer  /(dirDer  +  0.5  *  actRed)):  0.5;  [BUGGY]  tmp  =  0.1;  }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	replace	    double  tmp  =(actRed  ==  0)?  0.5  *  dirDer  /(dirDer  +  0.5  *  actRed)):  0.5;		non-compiled	[CE]  :  expected	28	None	add
11	[BUG]  [BUGGY]    double  tmp  =(actRed  ==  0)?  0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed):  0.5;  [CE]  variable  tmp  is  already  defined  in  method  doOptimize()  [FE]      AssertionFailedError  [CONTEXT]  double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {  [BUGGY]    double  tmp  =(actRed  ==  0)?  0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed):  0.5;  [BUGGY]  tmp  =  0.1;  }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	replace	    double  tmp  =(actRed  ==  0)?  0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed):  0.5;		non-compiled	[CE]  variable  tmp  is  already  defined  in  method  doOptimize()	28	None	add
12	[BUG]  [BUGGY]    double  tmp  =(actRed  ==  0)?  0.5  *  dirDer  /(previousCost  +  0.5  *  actRed):  0.5;  [CE]  variable  tmp  is  already  defined  in  method  doOptimize()  [FE]        AssertionFailedError  [CONTEXT]  double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {  [BUGGY]    double  tmp  =(actRed  ==  0)?  0.5  *  dirDer  /(previousCost  +  0.5  *  actRed):  0.5;  [BUGGY]  tmp  =  0.1;  }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	replace	    double  tmp  =(actRed  ==  0)?  0.5  *  dirDer  /(previousCost  +  0.5  *  actRed):  0.5;		non-compiled	[CE]  variable  tmp  is  already  defined  in  method  doOptimize()	28	None	add
13	[BUG]  [BUGGY]  timeout  [FE]    AssertionFailedError  [CONTEXT]  double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {  [BUGGY]  tmp  =  0.5  *  previousCost;  [BUGGY]  }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	add	tmp  =  0.5  *  previousCost;	tmp  =  0.1;  	compilable	timeout	27	1	replace
14	[BUG]  [BUGGY]  tmp  =  0.5  *  previousCost;  timeout  [FE]    AssertionFailedError  [CONTEXT]  double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {  [BUGGY]  tmp  =  0.5  *  previousCost;  [BUGGY]  }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	replace	tmp  =  0.5  *  previousCost;	tmp  =  0.1;  	compilable	timeout	27	1	replace
15	[BUG]  [BUGGY]    double  tmp  =(actRed  <  0)?  0.5  *  dirDer  /(dirDer  +  0.5  *  actRed)):  0.5;  [CE]  :  expected  [FE]    AssertionFailedError  [CONTEXT]  double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {  [BUGGY]    double  tmp  =(actRed  <  0)?  0.5  *  dirDer  /(dirDer  +  0.5  *  actRed)):  0.5;  [BUGGY]  tmp  =  0.1;  }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	replace	    double  tmp  =(actRed  <  0)?  0.5  *  dirDer  /(dirDer  +  0.5  *  actRed)):  0.5;		non-compiled	[CE]  :  expected	28	None	add
