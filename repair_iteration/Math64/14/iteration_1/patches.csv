bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  double  tmp  =(preRed  ==  0)?  0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed):  0.5;  [CE]  variable  tmp  is  already  defined  in  method  doOptimize()  [FE]          AssertionFailedError    [CONTEXT]    double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {    [BUGGY]  double  tmp  =(preRed  ==  0)?  0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed):  0.5;  [BUGGY]    tmp  =  0.1;  }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	replace	double  tmp  =(preRed  ==  0)?  0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed):  0.5;	      double    tmp    =(actRed    ==    0)?    0.5    *    dirDer    /    (dirDer    +    0.5    *    actRed):    0.5;    	non-compiled	[CE]  variable  tmp  is  already  defined  in  method  doOptimize()	11	None	replace
2	[BUG]  [BUGGY]  double  tmp  =(actRed  ==  0)?  0.5  *  dirDer  /  (dirDer  +  0.5  *  costRelativeTolerance):  0.5;  [CE]  variable  tmp  is  already  defined  in  method  doOptimize()  [FE]            AssertionFailedError    [CONTEXT]    double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {    [BUGGY]  double  tmp  =(actRed  ==  0)?  0.5  *  dirDer  /  (dirDer  +  0.5  *  costRelativeTolerance):  0.5;  [BUGGY]    tmp  =  0.1;  }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	replace	double  tmp  =(actRed  ==  0)?  0.5  *  dirDer  /  (dirDer  +  0.5  *  costRelativeTolerance):  0.5;	      double    tmp    =(actRed    ==    0)?    0.5    *    dirDer    /    (dirDer    +    0.5    *    actRed):    0.5;    	non-compiled	[CE]  variable  tmp  is  already  defined  in  method  doOptimize()	11	None	replace
3	[BUG]  [BUGGY]  double  tmp  =(actRed  ==  0)?  0.5  *  dirDer  /  (preRed  +  0.5  *  actRed):  0.5;  [CE]  variable  tmp  is  already  defined  in  method  doOptimize()  [FE]              AssertionFailedError    [CONTEXT]    double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {    [BUGGY]  double  tmp  =(actRed  ==  0)?  0.5  *  dirDer  /  (preRed  +  0.5  *  actRed):  0.5;  [BUGGY]    tmp  =  0.1;  }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	replace	double  tmp  =(actRed  ==  0)?  0.5  *  dirDer  /  (preRed  +  0.5  *  actRed):  0.5;	      double    tmp    =(actRed    ==    0)?    0.5    *    dirDer    /    (dirDer    +    0.5    *    actRed):    0.5;    	non-compiled	[CE]  variable  tmp  is  already  defined  in  method  doOptimize()	11	None	replace
4	[BUG]  [BUGGY]  double  tmp  =(actRed  ==  0)?  0.5  *  dirDer  /  (dirDer  +  0.5  *  preRed):  0.5;  [CE]  variable  tmp  is  already  defined  in  method  doOptimize()  [FE]                AssertionFailedError    [CONTEXT]    double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {    [BUGGY]  double  tmp  =(actRed  ==  0)?  0.5  *  dirDer  /  (dirDer  +  0.5  *  preRed):  0.5;  [BUGGY]    tmp  =  0.1;  }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	replace	double  tmp  =(actRed  ==  0)?  0.5  *  dirDer  /  (dirDer  +  0.5  *  preRed):  0.5;	      double    tmp    =(actRed    ==    0)?    0.5    *    dirDer    /    (dirDer    +    0.5    *    actRed):    0.5;    	non-compiled	[CE]  variable  tmp  is  already  defined  in  method  doOptimize()	11	None	replace
5	[BUG]  [BUGGY]  timeout  [FE]        AssertionFailedError    [CONTEXT]    double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {    [BUGGY]  tmp  =  0.5  *  cost;  [BUGGY]    }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	add	tmp  =  0.5  *  cost;	  tmp    =    0.5    *    previousCost;    timeout    	compilable	timeout	14	1	replace
6	[BUG]  [BUGGY]  tmp  =  0.5  *  cost;  timeout  [FE]        AssertionFailedError    [CONTEXT]    double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {    [BUGGY]  tmp  =  0.5  *  cost;  [BUGGY]    }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	replace	tmp  =  0.5  *  cost;	  tmp    =    0.5    *    previousCost;    timeout    	compilable	timeout	14	1	replace
7	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]    double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {    [BUGGY]  tmp  =  0.5  *  dirDer;  [BUGGY]    }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	add	tmp  =  0.5  *  dirDer;	  tmp    =    0.5    *    previousCost;    timeout    	compilable	  [FE]  AssertionFailedError  	14	12	replace
8	[BUG]  [BUGGY]  tmp  =  0.5  *  dirDer;  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]    double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {    [BUGGY]  tmp  =  0.5  *  dirDer;  [BUGGY]    }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	replace	tmp  =  0.5  *  dirDer;	  tmp    =    0.5    *    previousCost;    timeout    	compilable	  [FE]  AssertionFailedError  	14	12	replace
9	[BUG]  [BUGGY]  tmp  =  0.5  *  permutation;  [CE]  bad  operand  types  for  binary  operator  '*'  [FE]            AssertionFailedError    [CONTEXT]    double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {    [BUGGY]  tmp  =  0.5  *  permutation;  [BUGGY]    }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	replace	tmp  =  0.5  *  permutation;	  tmp    =    0.5    *    previousCost;    timeout    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '*'	14	None	replace
10	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]              AssertionFailedError    [CONTEXT]    double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {    [BUGGY]  tmp  =  0.5  *  preRed;  [BUGGY]    }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	add	tmp  =  0.5  *  preRed;	  tmp    =    0.5    *    previousCost;    timeout    	compilable	  [FE]  AssertionFailedError  	14	6	replace
11	[BUG]  [BUGGY]  tmp  =  0.5  *  preRed;  [FE]  AssertionFailedError  [FE]              AssertionFailedError    [CONTEXT]    double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {    [BUGGY]  tmp  =  0.5  *  preRed;  [BUGGY]    }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	replace	tmp  =  0.5  *  preRed;	  tmp    =    0.5    *    previousCost;    timeout    	compilable	  [FE]  AssertionFailedError  	14	6	replace
12	[BUG]  [BUGGY]  double  tmp  =(previousCost  ==  0)?  0.5  *  dirDer  /(actRed  +  0.5  *  actRed):  0.5;  [CE]  variable  tmp  is  already  defined  in  method  doOptimize()  [FE]            AssertionFailedError    [CONTEXT]    double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {    [BUGGY]  double  tmp  =(previousCost  ==  0)?  0.5  *  dirDer  /(actRed  +  0.5  *  actRed):  0.5;  [BUGGY]    tmp  =  0.1;  }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	replace	double  tmp  =(previousCost  ==  0)?  0.5  *  dirDer  /(actRed  +  0.5  *  actRed):  0.5;	      double    tmp    =(actRed    ==    0)?    0.5    *    dirDer    /(previousCost    +    0.5    *    actRed):    0.5;    	non-compiled	[CE]  variable  tmp  is  already  defined  in  method  doOptimize()	12	None	replace
13	[BUG]  [BUGGY]  double  tmp  =(previousCost  ==  0)?  0.5  *  dirDer  /(preRed  +  0.5  *  actRed):  0.5;  [CE]  variable  tmp  is  already  defined  in  method  doOptimize()  [FE]              AssertionFailedError    [CONTEXT]    double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {    [BUGGY]  double  tmp  =(previousCost  ==  0)?  0.5  *  dirDer  /(preRed  +  0.5  *  actRed):  0.5;  [BUGGY]    tmp  =  0.1;  }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	replace	double  tmp  =(previousCost  ==  0)?  0.5  *  dirDer  /(preRed  +  0.5  *  actRed):  0.5;	      double    tmp    =(actRed    ==    0)?    0.5    *    dirDer    /(previousCost    +    0.5    *    actRed):    0.5;    	non-compiled	[CE]  variable  tmp  is  already  defined  in  method  doOptimize()	12	None	replace
14	[BUG]  [BUGGY]  double  tmp  =(previousCost  ==  0)?  0.5  *  actRed  /(actRed  +  0.5  *  actRed):  0.5;  [CE]  variable  tmp  is  already  defined  in  method  doOptimize()  [FE]                AssertionFailedError    [CONTEXT]    double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {    [BUGGY]  double  tmp  =(previousCost  ==  0)?  0.5  *  actRed  /(actRed  +  0.5  *  actRed):  0.5;  [BUGGY]    tmp  =  0.1;  }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	replace	double  tmp  =(previousCost  ==  0)?  0.5  *  actRed  /(actRed  +  0.5  *  actRed):  0.5;	      double    tmp    =(actRed    ==    0)?    0.5    *    dirDer    /(previousCost    +    0.5    *    actRed):    0.5;    	non-compiled	[CE]  variable  tmp  is  already  defined  in  method  doOptimize()	12	None	replace
15	[BUG]  [BUGGY]  double  tmp  =(previousCost  >=  0)?  0.5  *  dirDer  /(actRed  +  0.5  *  actRed):  0.5;  [CE]  variable  tmp  is  already  defined  in  method  doOptimize()  [FE]                  AssertionFailedError    [CONTEXT]    double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {    [BUGGY]  double  tmp  =(previousCost  >=  0)?  0.5  *  dirDer  /(actRed  +  0.5  *  actRed):  0.5;  [BUGGY]    tmp  =  0.1;  }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	replace	double  tmp  =(previousCost  >=  0)?  0.5  *  dirDer  /(actRed  +  0.5  *  actRed):  0.5;	      double    tmp    =(actRed    ==    0)?    0.5    *    dirDer    /(previousCost    +    0.5    *    actRed):    0.5;    	non-compiled	[CE]  variable  tmp  is  already  defined  in  method  doOptimize()	12	None	replace
16	[BUG]  [BUGGY]  double  tmp  =(preRed  <  0)?  (0.5  *  dirDer  /(dirDer  +  0.5  *  actRed))  :  0.5;  [CE]  variable  tmp  is  already  defined  in  method  doOptimize()  [FE]        AssertionFailedError    [CONTEXT]    double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {    [BUGGY]  double  tmp  =(preRed  <  0)?  (0.5  *  dirDer  /(dirDer  +  0.5  *  actRed))  :  0.5;  [BUGGY]    tmp  =  0.1;  }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	replace	double  tmp  =(preRed  <  0)?  (0.5  *  dirDer  /(dirDer  +  0.5  *  actRed))  :  0.5;	      double    tmp    =(actRed    <    0)?    (0.5    *    dirDer    /(dirDer    +    0.5    *    actRed)):    0.5;    	non-compiled	[CE]  variable  tmp  is  already  defined  in  method  doOptimize()	1	None	replace
17	[BUG]  [BUGGY]  double  tmp  =(actRed  <  0)?  (0.5  *  dirDer  /(dirDer  +  0.5  *  costRelativeTolerance))  :  0.5;  [CE]  variable  tmp  is  already  defined  in  method  doOptimize()  [FE]          AssertionFailedError    [CONTEXT]    double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {    [BUGGY]  double  tmp  =(actRed  <  0)?  (0.5  *  dirDer  /(dirDer  +  0.5  *  costRelativeTolerance))  :  0.5;  [BUGGY]    tmp  =  0.1;  }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	replace	double  tmp  =(actRed  <  0)?  (0.5  *  dirDer  /(dirDer  +  0.5  *  costRelativeTolerance))  :  0.5;	      double    tmp    =(actRed    <    0)?    (0.5    *    dirDer    /(dirDer    +    0.5    *    actRed)):    0.5;    	non-compiled	[CE]  variable  tmp  is  already  defined  in  method  doOptimize()	1	None	replace
18	[BUG]  [BUGGY]  double  tmp  =(actRed  <  0)?  (0.5  *  dirDer  /(preRed  +  0.5  *  actRed))  :  0.5;  [CE]  variable  tmp  is  already  defined  in  method  doOptimize()  [FE]            AssertionFailedError    [CONTEXT]    double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {    [BUGGY]  double  tmp  =(actRed  <  0)?  (0.5  *  dirDer  /(preRed  +  0.5  *  actRed))  :  0.5;  [BUGGY]    tmp  =  0.1;  }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	replace	double  tmp  =(actRed  <  0)?  (0.5  *  dirDer  /(preRed  +  0.5  *  actRed))  :  0.5;	      double    tmp    =(actRed    <    0)?    (0.5    *    dirDer    /(dirDer    +    0.5    *    actRed)):    0.5;    	non-compiled	[CE]  variable  tmp  is  already  defined  in  method  doOptimize()	1	None	replace
19	[BUG]  [BUGGY]  double  tmp  =(actRed  <  0)?  (0.5  *  cost  /(dirDer  +  0.5  *  actRed))  :  0.5;  [CE]  variable  tmp  is  already  defined  in  method  doOptimize()  [FE]              AssertionFailedError    [CONTEXT]    double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {    [BUGGY]  double  tmp  =(actRed  <  0)?  (0.5  *  cost  /(dirDer  +  0.5  *  actRed))  :  0.5;  [BUGGY]    tmp  =  0.1;  }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	replace	double  tmp  =(actRed  <  0)?  (0.5  *  cost  /(dirDer  +  0.5  *  actRed))  :  0.5;	      double    tmp    =(actRed    <    0)?    (0.5    *    dirDer    /(dirDer    +    0.5    *    actRed)):    0.5;    	non-compiled	[CE]  variable  tmp  is  already  defined  in  method  doOptimize()	1	None	replace
20	[BUG]  [BUGGY]  double  tmp  =(actRed  ==  0)?  0.5  *  dirDer  /(dirDer  +  0.5  *  costRelativeTolerance))  :  0.5;  [CE]  :  expected  [FE]        AssertionFailedError    [CONTEXT]    double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {    [BUGGY]  double  tmp  =(actRed  ==  0)?  0.5  *  dirDer  /(dirDer  +  0.5  *  costRelativeTolerance))  :  0.5;  [BUGGY]    tmp  =  0.1;  }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	replace	double  tmp  =(actRed  ==  0)?  0.5  *  dirDer  /(dirDer  +  0.5  *  costRelativeTolerance))  :  0.5;	      double    tmp    =(actRed    ==    0)?    0.5    *    dirDer    /(dirDer    +    0.5    *    actRed)):    0.5;    	non-compiled	[CE]  :  expected	10	None	replace
21	[BUG]  [BUGGY]  double  tmp  =(actRed  ==  0)?  0.5  *  dirDer  /(preRed  +  0.5  *  actRed))  :  0.5;  [CE]  :  expected  [FE]          AssertionFailedError    [CONTEXT]    double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {    [BUGGY]  double  tmp  =(actRed  ==  0)?  0.5  *  dirDer  /(preRed  +  0.5  *  actRed))  :  0.5;  [BUGGY]    tmp  =  0.1;  }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	replace	double  tmp  =(actRed  ==  0)?  0.5  *  dirDer  /(preRed  +  0.5  *  actRed))  :  0.5;	      double    tmp    =(actRed    ==    0)?    0.5    *    dirDer    /(dirDer    +    0.5    *    actRed)):    0.5;    	non-compiled	[CE]  :  expected	10	None	replace
22	[BUG]  [BUGGY]  double  tmp  =(preRed  ==  0)?  0.5  *  dirDer  /(dirDer  +  0.5  *  actRed))  :  0.5;  [CE]  :  expected  [FE]            AssertionFailedError    [CONTEXT]    double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {    [BUGGY]  double  tmp  =(preRed  ==  0)?  0.5  *  dirDer  /(dirDer  +  0.5  *  actRed))  :  0.5;  [BUGGY]    tmp  =  0.1;  }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	replace	double  tmp  =(preRed  ==  0)?  0.5  *  dirDer  /(dirDer  +  0.5  *  actRed))  :  0.5;	      double    tmp    =(actRed    ==    0)?    0.5    *    dirDer    /(dirDer    +    0.5    *    actRed)):    0.5;    	non-compiled	[CE]  :  expected	10	None	replace
23	[BUG]  [BUGGY]  double  tmp  =(actRed  ==  0)?  0.5  *  dirDer  /(dirDer  +  0.5  *  preRed))  :  0.5;  [CE]  :  expected  [FE]              AssertionFailedError    [CONTEXT]    double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {    [BUGGY]  double  tmp  =(actRed  ==  0)?  0.5  *  dirDer  /(dirDer  +  0.5  *  preRed))  :  0.5;  [BUGGY]    tmp  =  0.1;  }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	replace	double  tmp  =(actRed  ==  0)?  0.5  *  dirDer  /(dirDer  +  0.5  *  preRed))  :  0.5;	      double    tmp    =(actRed    ==    0)?    0.5    *    dirDer    /(dirDer    +    0.5    *    actRed)):    0.5;    	non-compiled	[CE]  :  expected	10	None	replace
24	[BUG]  [BUGGY]  timeout  [FE]    AssertionFailedError    [CONTEXT]    double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {    [BUGGY]  tmp  =  10.0;  [BUGGY]    }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	add	tmp  =  10.0;	  tmp    =    0.0;    	compilable	timeout	7	1	replace
25	[BUG]  [BUGGY]  tmp  =  10.0;  timeout  [FE]    AssertionFailedError    [CONTEXT]    double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {    [BUGGY]  tmp  =  10.0;  [BUGGY]    }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	replace	tmp  =  10.0;	  tmp    =    0.0;    	compilable	timeout	7	1	replace
26	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {    [BUGGY]  tmp  =  0.5;  tmp  =  0.5;  [BUGGY]    }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	add	tmp    =    0.5;    tmp  =  0.5;	  	compilable	  [FE]  AssertionFailedError  	2	2	add
27	[BUG]  [BUGGY]  tmp  =  0.5;  tmp  =  0.5;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {    [BUGGY]  tmp  =  0.5;  tmp  =  0.5;  [BUGGY]    }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	replace	tmp    =    0.5;    tmp  =  0.5;	  	compilable	  [FE]  AssertionFailedError  	2	2	add
28	[BUG]  [BUGGY]  tmp  =  0.5;  tmp  =  0.5;  System.arraycopy(previousCost,  0,  tmp,  0,  previousCost);  [CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;  [FE]      AssertionFailedError    [CONTEXT]    double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {    [BUGGY]  tmp  =  0.5;  tmp  =  0.5;  System.arraycopy(previousCost,  0,  tmp,  0,  previousCost);  [BUGGY]    }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	replace	tmp    =    0.5;    tmp  =  0.5;  System.arraycopy(previousCost,  0,  tmp,  0,  previousCost);	  	non-compiled	[CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;	2	None	add
29	[BUG]  [BUGGY]  tmp  =  0.5;  tmp  =  0.5;  System.arraycopy(lmPar,  0,  tmp,  0,  previousCost);  [CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;  [FE]        AssertionFailedError    [CONTEXT]    double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {    [BUGGY]  tmp  =  0.5;  tmp  =  0.5;  System.arraycopy(lmPar,  0,  tmp,  0,  previousCost);  [BUGGY]    }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	replace	tmp    =    0.5;    tmp  =  0.5;  System.arraycopy(lmPar,  0,  tmp,  0,  previousCost);	  	non-compiled	[CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;	2	None	add
30	[BUG]  [BUGGY]  tmp  =  0.5;  tmp  =  0.5;  System.arraycopy(lmDer,  0,  tmp,  0,  previousCost);  [CE]  cannot  find  symbol  lmDer  [FE]          AssertionFailedError    [CONTEXT]    double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {    [BUGGY]  tmp  =  0.5;  tmp  =  0.5;  System.arraycopy(lmDer,  0,  tmp,  0,  previousCost);  [BUGGY]    }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	replace	tmp    =    0.5;    tmp  =  0.5;  System.arraycopy(lmDer,  0,  tmp,  0,  previousCost);	  	non-compiled	[CE]  cannot  find  symbol  lmDer	2	None	add
31	[BUG]  [BUGGY]  tmp  =  0.5;  tmp  =  0.5;  System.arraycopy(previousCost,  0,  lmPar,  0,  previousCost);  [CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;  [FE]            AssertionFailedError    [CONTEXT]    double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {    [BUGGY]  tmp  =  0.5;  tmp  =  0.5;  System.arraycopy(previousCost,  0,  lmPar,  0,  previousCost);  [BUGGY]    }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	replace	tmp    =    0.5;    tmp  =  0.5;  System.arraycopy(previousCost,  0,  lmPar,  0,  previousCost);	  	non-compiled	[CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;	2	None	add
32	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]    double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {    [BUGGY]  tmp  =  0.5  *  previousCost;  tmp  =  0.5  *  previousCost;  [BUGGY]    }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	add	tmp    =    0.5    *    previousCost;    tmp  =  0.5  *  previousCost;	  timeout    	compilable	  [FE]  AssertionFailedError  	13	2	add
33	[BUG]  [BUGGY]  tmp  =  0.5  *  previousCost;  tmp  =  0.5  *  previousCost;  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]    double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {    [BUGGY]  tmp  =  0.5  *  previousCost;  tmp  =  0.5  *  previousCost;  [BUGGY]    }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	replace	tmp    =    0.5    *    previousCost;    tmp  =  0.5  *  previousCost;	  timeout    	compilable	  [FE]  AssertionFailedError  	13	2	add
34	[BUG]  [BUGGY]  tmp  =  0.5  *  previousCost;  tmp  =  0.5  *  priorCost;  [CE]  cannot  find  symbol  priorCost  [FE]          AssertionFailedError    [CONTEXT]    double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {    [BUGGY]  tmp  =  0.5  *  previousCost;  tmp  =  0.5  *  priorCost;  [BUGGY]    }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	replace	tmp    =    0.5    *    previousCost;    tmp  =  0.5  *  priorCost;	  timeout    	non-compiled	[CE]  cannot  find  symbol  priorCost	13	None	add
35	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]              AssertionFailedError    [CONTEXT]    double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {    [BUGGY]  tmp  =  0;  [BUGGY]    }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	add	tmp  =  0;	  tmp    =    1;    timeout    	compilable	  [FE]  AssertionFailedError  	9	12	replace
36	[BUG]  [BUGGY]  tmp  =  0;  [FE]  AssertionFailedError  [FE]              AssertionFailedError    [CONTEXT]    double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {    [BUGGY]  tmp  =  0;  [BUGGY]    }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	replace	tmp  =  0;	  tmp    =    1;    timeout    	compilable	  [FE]  AssertionFailedError  	9	12	replace
37	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {    [BUGGY]  tmp  =  0.0;  tmp  =  0.0;  [BUGGY]    }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	add	tmp    =    0.0;    tmp  =  0.0;	  	compilable	  [FE]  AssertionFailedError  	6	2	add
38	[BUG]  [BUGGY]  tmp  =  0.0;  tmp  =  0.0;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {    [BUGGY]  tmp  =  0.0;  tmp  =  0.0;  [BUGGY]    }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	replace	tmp    =    0.0;    tmp  =  0.0;	  	compilable	  [FE]  AssertionFailedError  	6	2	add
39	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {    [BUGGY]  tmp  =  0.0;  tmp  =  0.0;  previousCost  =  Math.min(delta,  10.0  *  lmNorm);  [BUGGY]    }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	add	tmp    =    0.0;    tmp  =  0.0;  previousCost  =  Math.min(delta,  10.0  *  lmNorm);	  	compilable	  [FE]  AssertionFailedError  	6	8	add
40	[BUG]  [BUGGY]  tmp  =  0.0;  tmp  =  0.0;  previousCost  =  Math.min(delta,  10.0  *  lmNorm);  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {    [BUGGY]  tmp  =  0.0;  tmp  =  0.0;  previousCost  =  Math.min(delta,  10.0  *  lmNorm);  [BUGGY]    }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	replace	tmp    =    0.0;    tmp  =  0.0;  previousCost  =  Math.min(delta,  10.0  *  lmNorm);	  	compilable	  [FE]  AssertionFailedError  	6	8	add
41	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]    double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {    [BUGGY]  tmp  =  0.0;  tmp  =  0.0;  this.lmPar  =  Math.min(lmPar,  10.0  *  lmNorm);  [BUGGY]    }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	add	tmp    =    0.0;    tmp  =  0.0;  this.lmPar  =  Math.min(lmPar,  10.0  *  lmNorm);	  	compilable	  [FE]  AssertionFailedError  	6	2	add
42	[BUG]  [BUGGY]  tmp  =  0.0;  tmp  =  0.0;  this.lmPar  =  Math.min(lmPar,  10.0  *  lmNorm);  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]    double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {    [BUGGY]  tmp  =  0.0;  tmp  =  0.0;  this.lmPar  =  Math.min(lmPar,  10.0  *  lmNorm);  [BUGGY]    }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	replace	tmp    =    0.0;    tmp  =  0.0;  this.lmPar  =  Math.min(lmPar,  10.0  *  lmNorm);	  	compilable	  [FE]  AssertionFailedError  	6	2	add
43	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]    double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {    [BUGGY]  tmp  =  0.0;  tmp  =  0.0;  }  else  if((  previousCost  >=  10.0)||(previousCost  >=  20.0))  {  [BUGGY]    }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	add	tmp    =    0.0;    tmp  =  0.0;  }  else  if((  previousCost  >=  10.0)||(previousCost  >=  20.0))  {	  	compilable	  [FE]  AssertionFailedError  	6	12	add
44	[BUG]  [BUGGY]  tmp  =  0.0;  tmp  =  0.0;  }  else  if((  previousCost  >=  10.0)||(previousCost  >=  20.0))  {  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]    double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {    [BUGGY]  tmp  =  0.0;  tmp  =  0.0;  }  else  if((  previousCost  >=  10.0)||(previousCost  >=  20.0))  {  [BUGGY]    }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	replace	tmp    =    0.0;    tmp  =  0.0;  }  else  if((  previousCost  >=  10.0)||(previousCost  >=  20.0))  {	  	compilable	  [FE]  AssertionFailedError  	6	12	add
45	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]    double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {    [BUGGY]  tmp  =  0.0;  tmp  =  0.0;  }  else  if((  previousCost  >=  10.0)||(lmPar  <  0.5))  {  [BUGGY]    }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	add	tmp    =    0.0;    tmp  =  0.0;  }  else  if((  previousCost  >=  10.0)||(lmPar  <  0.5))  {	  	compilable	  [FE]  AssertionFailedError  	6	13	add
46	[BUG]  [BUGGY]  tmp  =  0.0;  tmp  =  0.0;  }  else  if((  previousCost  >=  10.0)||(lmPar  <  0.5))  {  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]    double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {    [BUGGY]  tmp  =  0.0;  tmp  =  0.0;  }  else  if((  previousCost  >=  10.0)||(lmPar  <  0.5))  {  [BUGGY]    }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	replace	tmp    =    0.0;    tmp  =  0.0;  }  else  if((  previousCost  >=  10.0)||(lmPar  <  0.5))  {	  	compilable	  [FE]  AssertionFailedError  	6	13	add
47	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]              AssertionFailedError    [CONTEXT]    double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {    [BUGGY]  tmp  =  1;  tmp  =  1;  [BUGGY]    }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	add	tmp    =    1;    tmp  =  1;	  timeout    	compilable	  [FE]  AssertionFailedError  	8	2	add
48	[BUG]  [BUGGY]  tmp  =  1;  tmp  =  1;  [FE]  AssertionFailedError  [FE]              AssertionFailedError    [CONTEXT]    double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {    [BUGGY]  tmp  =  1;  tmp  =  1;  [BUGGY]    }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	replace	tmp    =    1;    tmp  =  1;	  timeout    	compilable	  [FE]  AssertionFailedError  	8	2	add
49	[BUG]  [BUGGY]  timeout  [FE]                AssertionFailedError    [CONTEXT]    double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {    [BUGGY]  tmp  =  1;  tmp  =  1;  }  else  if((  previousCost  >=  0.0)||(previousCost  >=  1.0))  {  [BUGGY]    }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	add	tmp    =    1;    tmp  =  1;  }  else  if((  previousCost  >=  0.0)||(previousCost  >=  1.0))  {	  timeout    	compilable	timeout	8	1	add
50	[BUG]  [BUGGY]  tmp  =  1;  tmp  =  1;  }  else  if((  previousCost  >=  0.0)||(previousCost  >=  1.0))  {  timeout  [FE]                AssertionFailedError    [CONTEXT]    double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {    [BUGGY]  tmp  =  1;  tmp  =  1;  }  else  if((  previousCost  >=  0.0)||(previousCost  >=  1.0))  {  [BUGGY]    }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	replace	tmp    =    1;    tmp  =  1;  }  else  if((  previousCost  >=  0.0)||(previousCost  >=  1.0))  {	  timeout    	compilable	timeout	8	1	add
51	[BUG]  [BUGGY]  timeout  [FE]                  AssertionFailedError    [CONTEXT]    double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {    [BUGGY]  tmp  =  1;  tmp  =  1;  }  else  if((  previousCost  >=  0.0)||(lmPar  <  1.0))  {  [BUGGY]    }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	add	tmp    =    1;    tmp  =  1;  }  else  if((  previousCost  >=  0.0)||(lmPar  <  1.0))  {	  timeout    	compilable	timeout	8	1	add
52	[BUG]  [BUGGY]  tmp  =  1;  tmp  =  1;  }  else  if((  previousCost  >=  0.0)||(lmPar  <  1.0))  {  timeout  [FE]                  AssertionFailedError    [CONTEXT]    double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {    [BUGGY]  tmp  =  1;  tmp  =  1;  }  else  if((  previousCost  >=  0.0)||(lmPar  <  1.0))  {  [BUGGY]    }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	replace	tmp    =    1;    tmp  =  1;  }  else  if((  previousCost  >=  0.0)||(lmPar  <  1.0))  {	  timeout    	compilable	timeout	8	1	add
53	[BUG]  [BUGGY]  timeout  [FE]                    AssertionFailedError    [CONTEXT]    double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {    [BUGGY]  tmp  =  1;  tmp  =  1;  }  else  if((  previousCost  >=  0.0)||(previousCost!=  1.0))  {  [BUGGY]    }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	add	tmp    =    1;    tmp  =  1;  }  else  if((  previousCost  >=  0.0)||(previousCost!=  1.0))  {	  timeout    	compilable	timeout	8	1	add
54	[BUG]  [BUGGY]  tmp  =  1;  tmp  =  1;  }  else  if((  previousCost  >=  0.0)||(previousCost!=  1.0))  {  timeout  [FE]                    AssertionFailedError    [CONTEXT]    double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {    [BUGGY]  tmp  =  1;  tmp  =  1;  }  else  if((  previousCost  >=  0.0)||(previousCost!=  1.0))  {  [BUGGY]    }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	replace	tmp    =    1;    tmp  =  1;  }  else  if((  previousCost  >=  0.0)||(previousCost!=  1.0))  {	  timeout    	compilable	timeout	8	1	add
55	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                      AssertionFailedError    [CONTEXT]    double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {    [BUGGY]  tmp  =  1;  tmp  =  1;  this.lmPar  =  Math.min(lmPar,  10.0  *  lmNorm);  [BUGGY]    }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	add	tmp    =    1;    tmp  =  1;  this.lmPar  =  Math.min(lmPar,  10.0  *  lmNorm);	  timeout    	compilable	  [FE]  AssertionFailedError  	8	2	add
56	[BUG]  [BUGGY]  tmp  =  1;  tmp  =  1;  this.lmPar  =  Math.min(lmPar,  10.0  *  lmNorm);  [FE]  AssertionFailedError  [FE]                      AssertionFailedError    [CONTEXT]    double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {    [BUGGY]  tmp  =  1;  tmp  =  1;  this.lmPar  =  Math.min(lmPar,  10.0  *  lmNorm);  [BUGGY]    }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	replace	tmp    =    1;    tmp  =  1;  this.lmPar  =  Math.min(lmPar,  10.0  *  lmNorm);	  timeout    	compilable	  [FE]  AssertionFailedError  	8	2	add
57	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]    double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {    [BUGGY]  tmp  =  1.0;  tmp  =  1.0;  [BUGGY]    }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	add	tmp    =    1.0;    tmp  =  1.0;	  timeout    	compilable	  [FE]  AssertionFailedError  	4	2	add
58	[BUG]  [BUGGY]  tmp  =  1.0;  tmp  =  1.0;  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]    double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {    [BUGGY]  tmp  =  1.0;  tmp  =  1.0;  [BUGGY]    }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	replace	tmp    =    1.0;    tmp  =  1.0;	  timeout    	compilable	  [FE]  AssertionFailedError  	4	2	add
59	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]    double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {    [BUGGY]  tmp  =  1.0;  tmp  =  1.0;  this.lmPar  =  Math.min(delta,  10.0  *  lmNorm);  [BUGGY]    }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	add	tmp    =    1.0;    tmp  =  1.0;  this.lmPar  =  Math.min(delta,  10.0  *  lmNorm);	  timeout    	compilable	  [FE]  AssertionFailedError  	4	3	add
60	[BUG]  [BUGGY]  tmp  =  1.0;  tmp  =  1.0;  this.lmPar  =  Math.min(delta,  10.0  *  lmNorm);  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]    double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {    [BUGGY]  tmp  =  1.0;  tmp  =  1.0;  this.lmPar  =  Math.min(delta,  10.0  *  lmNorm);  [BUGGY]    }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	replace	tmp    =    1.0;    tmp  =  1.0;  this.lmPar  =  Math.min(delta,  10.0  *  lmNorm);	  timeout    	compilable	  [FE]  AssertionFailedError  	4	3	add
61	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]              AssertionFailedError    [CONTEXT]    double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {    [BUGGY]  tmp  =  1.0;  tmp  =  1.0;  this.lmPar  =  Math.min(lmPar,  10.0  *  lmNorm);  [BUGGY]    }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	add	tmp    =    1.0;    tmp  =  1.0;  this.lmPar  =  Math.min(lmPar,  10.0  *  lmNorm);	  timeout    	compilable	  [FE]  AssertionFailedError  	4	2	add
62	[BUG]  [BUGGY]  tmp  =  1.0;  tmp  =  1.0;  this.lmPar  =  Math.min(lmPar,  10.0  *  lmNorm);  [FE]  AssertionFailedError  [FE]              AssertionFailedError    [CONTEXT]    double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {    [BUGGY]  tmp  =  1.0;  tmp  =  1.0;  this.lmPar  =  Math.min(lmPar,  10.0  *  lmNorm);  [BUGGY]    }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	replace	tmp    =    1.0;    tmp  =  1.0;  this.lmPar  =  Math.min(lmPar,  10.0  *  lmNorm);	  timeout    	compilable	  [FE]  AssertionFailedError  	4	2	add
63	[BUG]  [BUGGY]  timeout  [FE]                AssertionFailedError    [CONTEXT]    double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {    [BUGGY]  tmp  =  1.0;  tmp  =  1.0;  }  else  if((  previousCost  >=  0.0)||(previousCost  >=  1.0))  {  [BUGGY]    }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	add	tmp    =    1.0;    tmp  =  1.0;  }  else  if((  previousCost  >=  0.0)||(previousCost  >=  1.0))  {	  timeout    	compilable	timeout	4	1	add
64	[BUG]  [BUGGY]  tmp  =  1.0;  tmp  =  1.0;  }  else  if((  previousCost  >=  0.0)||(previousCost  >=  1.0))  {  timeout  [FE]                AssertionFailedError    [CONTEXT]    double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {    [BUGGY]  tmp  =  1.0;  tmp  =  1.0;  }  else  if((  previousCost  >=  0.0)||(previousCost  >=  1.0))  {  [BUGGY]    }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	replace	tmp    =    1.0;    tmp  =  1.0;  }  else  if((  previousCost  >=  0.0)||(previousCost  >=  1.0))  {	  timeout    	compilable	timeout	4	1	add
65	[BUG]  [BUGGY]  timeout  [FE]                  AssertionFailedError    [CONTEXT]    double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {    [BUGGY]  tmp  =  1.0;  tmp  =  1.0;  }  else  if((  previousCost  >=  0.0)||(lmPar  <  1.0))  {  [BUGGY]    }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	add	tmp    =    1.0;    tmp  =  1.0;  }  else  if((  previousCost  >=  0.0)||(lmPar  <  1.0))  {	  timeout    	compilable	timeout	4	1	add
66	[BUG]  [BUGGY]  tmp  =  1.0;  tmp  =  1.0;  }  else  if((  previousCost  >=  0.0)||(lmPar  <  1.0))  {  timeout  [FE]                  AssertionFailedError    [CONTEXT]    double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {    [BUGGY]  tmp  =  1.0;  tmp  =  1.0;  }  else  if((  previousCost  >=  0.0)||(lmPar  <  1.0))  {  [BUGGY]    }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	replace	tmp    =    1.0;    tmp  =  1.0;  }  else  if((  previousCost  >=  0.0)||(lmPar  <  1.0))  {	  timeout    	compilable	timeout	4	1	add
67	[BUG]  [BUGGY]  double  tmp  =(actRed  <  0)?  0.5  *  dirDer  /(dirDer  +  0.5  *  costRelativeTolerance))  :  0.5;  [CE]  :  expected  [FE]        AssertionFailedError    [CONTEXT]    double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {    [BUGGY]  double  tmp  =(actRed  <  0)?  0.5  *  dirDer  /(dirDer  +  0.5  *  costRelativeTolerance))  :  0.5;  [BUGGY]    tmp  =  0.1;  }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	replace	double  tmp  =(actRed  <  0)?  0.5  *  dirDer  /(dirDer  +  0.5  *  costRelativeTolerance))  :  0.5;	      double    tmp    =(actRed    <    0)?    0.5    *    dirDer    /(dirDer    +    0.5    *    actRed)):    0.5;    	non-compiled	[CE]  :  expected	15	None	replace
68	[BUG]  [BUGGY]  double  tmp  =(preRed  <  0)?  0.5  *  dirDer  /(dirDer  +  0.5  *  actRed))  :  0.5;  [CE]  :  expected  [FE]          AssertionFailedError    [CONTEXT]    double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {    [BUGGY]  double  tmp  =(preRed  <  0)?  0.5  *  dirDer  /(dirDer  +  0.5  *  actRed))  :  0.5;  [BUGGY]    tmp  =  0.1;  }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	replace	double  tmp  =(preRed  <  0)?  0.5  *  dirDer  /(dirDer  +  0.5  *  actRed))  :  0.5;	      double    tmp    =(actRed    <    0)?    0.5    *    dirDer    /(dirDer    +    0.5    *    actRed)):    0.5;    	non-compiled	[CE]  :  expected	15	None	replace
69	[BUG]  [BUGGY]  double  tmp  =(actRed  <  0)?  0.5  *  dirDer  /(preRed  +  0.5  *  actRed))  :  0.5;  [CE]  :  expected  [FE]            AssertionFailedError    [CONTEXT]    double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {    [BUGGY]  double  tmp  =(actRed  <  0)?  0.5  *  dirDer  /(preRed  +  0.5  *  actRed))  :  0.5;  [BUGGY]    tmp  =  0.1;  }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	replace	double  tmp  =(actRed  <  0)?  0.5  *  dirDer  /(preRed  +  0.5  *  actRed))  :  0.5;	      double    tmp    =(actRed    <    0)?    0.5    *    dirDer    /(dirDer    +    0.5    *    actRed)):    0.5;    	non-compiled	[CE]  :  expected	15	None	replace
70	[BUG]  [BUGGY]  double  tmp  =(actRed  <  0)?  0.5  *  dirDer  /(dirDer  +  0.5  *  preRed))  :  0.5;  [CE]  :  expected  [FE]              AssertionFailedError    [CONTEXT]    double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {    [BUGGY]  double  tmp  =(actRed  <  0)?  0.5  *  dirDer  /(dirDer  +  0.5  *  preRed))  :  0.5;  [BUGGY]    tmp  =  0.1;  }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	replace	double  tmp  =(actRed  <  0)?  0.5  *  dirDer  /(dirDer  +  0.5  *  preRed))  :  0.5;	      double    tmp    =(actRed    <    0)?    0.5    *    dirDer    /(dirDer    +    0.5    *    actRed)):    0.5;    	non-compiled	[CE]  :  expected	15	None	replace
71	[BUG]  [BUGGY]  timeout  [FE]          AssertionFailedError    [CONTEXT]    double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {    [BUGGY]  tmp  =  1.0  *  previousCost;  [BUGGY]    }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	add	tmp  =  1.0  *  previousCost;	  tmp    =    1.0;    timeout    	compilable	timeout	5	1	replace
72	[BUG]  [BUGGY]  tmp  =  1.0  *  previousCost;  timeout  [FE]          AssertionFailedError    [CONTEXT]    double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {    [BUGGY]  tmp  =  1.0  *  previousCost;  [BUGGY]    }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	replace	tmp  =  1.0  *  previousCost;	  tmp    =    1.0;    timeout    	compilable	timeout	5	1	replace
73	[BUG]  [BUGGY]  tmp  =  0.0;  double  tmp  =  0.0;  [CE]  variable  tmp  is  already  defined  in  method  doOptimize()  [FE]    AssertionFailedError    [CONTEXT]    double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {    [BUGGY]  tmp  =  0.0;  double  tmp  =  0.0;  [BUGGY]    }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	replace	tmp    =    0.0;    double  tmp  =  0.0;	  	non-compiled	[CE]  variable  tmp  is  already  defined  in  method  doOptimize()	6	None	add
74	[BUG]  [BUGGY]  tmp  =  0.0;  int  tmp  =  0.0;  [CE]  variable  tmp  is  already  defined  in  method  doOptimize()  [FE]      AssertionFailedError    [CONTEXT]    double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {    [BUGGY]  tmp  =  0.0;  int  tmp  =  0.0;  [BUGGY]    }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	replace	tmp    =    0.0;    int  tmp  =  0.0;	  	non-compiled	[CE]  variable  tmp  is  already  defined  in  method  doOptimize()	6	None	add
75	[BUG]  [BUGGY]  tmp  =  0.0;  (tmp  =  0.0);  [CE]  not  a  statement  [FE]        AssertionFailedError    [CONTEXT]    double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {    [BUGGY]  tmp  =  0.0;  (tmp  =  0.0);  [BUGGY]    }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	replace	tmp    =    0.0;    (tmp  =  0.0);	  	non-compiled	[CE]  not  a  statement	6	None	add
76	[BUG]  [BUGGY]  tmp  =  0.0;  (tmp  =  0.0;  [CE]  ')'  expected  [FE]          AssertionFailedError    [CONTEXT]    double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {    [BUGGY]  tmp  =  0.0;  (tmp  =  0.0;  [BUGGY]    }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	replace	tmp    =    0.0;    (tmp  =  0.0;	  	non-compiled	[CE]  ')'  expected	6	None	add
77	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]              AssertionFailedError    [CONTEXT]    double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {    [BUGGY]  tmp  =  1;  tmp  =  1;  this.lmPar  =  2  *  Math.min(delta,  10.0  *  lmNorm);  [BUGGY]    }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	add	tmp    =    1;    tmp  =  1;  this.lmPar  =  2  *  Math.min(delta,  10.0  *  lmNorm);	  timeout    	compilable	  [FE]  AssertionFailedError  	8	3	add
78	[BUG]  [BUGGY]  tmp  =  1;  tmp  =  1;  this.lmPar  =  2  *  Math.min(delta,  10.0  *  lmNorm);  [FE]  AssertionFailedError  [FE]              AssertionFailedError    [CONTEXT]    double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {    [BUGGY]  tmp  =  1;  tmp  =  1;  this.lmPar  =  2  *  Math.min(delta,  10.0  *  lmNorm);  [BUGGY]    }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	replace	tmp    =    1;    tmp  =  1;  this.lmPar  =  2  *  Math.min(delta,  10.0  *  lmNorm);	  timeout    	compilable	  [FE]  AssertionFailedError  	8	3	add
79	[BUG]  [BUGGY]  timeout  [FE]                AssertionFailedError    [CONTEXT]    double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {    [BUGGY]  tmp  =  1;  tmp  =  1;  }  else  if((  previousCost  >=  0)||(lmPar  >=  0.5))  {  [BUGGY]    }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	add	tmp    =    1;    tmp  =  1;  }  else  if((  previousCost  >=  0)||(lmPar  >=  0.5))  {	  timeout    	compilable	timeout	8	1	add
80	[BUG]  [BUGGY]  tmp  =  1;  tmp  =  1;  }  else  if((  previousCost  >=  0)||(lmPar  >=  0.5))  {  timeout  [FE]                AssertionFailedError    [CONTEXT]    double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {    [BUGGY]  tmp  =  1;  tmp  =  1;  }  else  if((  previousCost  >=  0)||(lmPar  >=  0.5))  {  [BUGGY]    }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	replace	tmp    =    1;    tmp  =  1;  }  else  if((  previousCost  >=  0)||(lmPar  >=  0.5))  {	  timeout    	compilable	timeout	8	1	add
81	[BUG]  [BUGGY]  timeout  [FE]                  AssertionFailedError    [CONTEXT]    double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {    [BUGGY]  tmp  =  1;  tmp  =  1;  }  else  if((  previousCost  >=  0)||(lmPar  >=  0.0))  {  [BUGGY]    }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	add	tmp    =    1;    tmp  =  1;  }  else  if((  previousCost  >=  0)||(lmPar  >=  0.0))  {	  timeout    	compilable	timeout	8	1	add
82	[BUG]  [BUGGY]  tmp  =  1;  tmp  =  1;  }  else  if((  previousCost  >=  0)||(lmPar  >=  0.0))  {  timeout  [FE]                  AssertionFailedError    [CONTEXT]    double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {    [BUGGY]  tmp  =  1;  tmp  =  1;  }  else  if((  previousCost  >=  0)||(lmPar  >=  0.0))  {  [BUGGY]    }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	replace	tmp    =    1;    tmp  =  1;  }  else  if((  previousCost  >=  0)||(lmPar  >=  0.0))  {	  timeout    	compilable	timeout	8	1	add
83	[BUG]  [BUGGY]  tmp  =  0.5  *  previousCost;  double  tmp  =  0.5  *  previousCost;  [CE]  variable  tmp  is  already  defined  in  method  doOptimize()  [FE]        AssertionFailedError    [CONTEXT]    double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {    [BUGGY]  tmp  =  0.5  *  previousCost;  double  tmp  =  0.5  *  previousCost;  [BUGGY]    }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	replace	tmp    =    0.5    *    previousCost;    double  tmp  =  0.5  *  previousCost;	  timeout    	non-compiled	[CE]  variable  tmp  is  already  defined  in  method  doOptimize()	13	None	add
84	[BUG]  [BUGGY]  double  tmp  =(previousCost  ==  0)?  0.5  *  dirDer  /(previousCost  +  0.5  *  actRed):  0.5;  [CE]  variable  tmp  is  already  defined  in  method  doOptimize()  [FE]            AssertionFailedError    [CONTEXT]    double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {    [BUGGY]  double  tmp  =(previousCost  ==  0)?  0.5  *  dirDer  /(previousCost  +  0.5  *  actRed):  0.5;  [BUGGY]    tmp  =  0.1;  }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	replace	double  tmp  =(previousCost  ==  0)?  0.5  *  dirDer  /(previousCost  +  0.5  *  actRed):  0.5;	      double    tmp    =(actRed    ==    0)?    0.5    *    dirDer    /(previousCost    +    0.5    *    actRed):    0.5;    	non-compiled	[CE]  variable  tmp  is  already  defined  in  method  doOptimize()	12	None	replace
85	[BUG]  [BUGGY]  double  tmp  =(previousCost  ==  0)?  0.5  *  dirDer  /(dirDer  +  0.5  *  actRed):  0.5;  [CE]  variable  tmp  is  already  defined  in  method  doOptimize()  [FE]              AssertionFailedError    [CONTEXT]    double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {    [BUGGY]  double  tmp  =(previousCost  ==  0)?  0.5  *  dirDer  /(dirDer  +  0.5  *  actRed):  0.5;  [BUGGY]    tmp  =  0.1;  }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	replace	double  tmp  =(previousCost  ==  0)?  0.5  *  dirDer  /(dirDer  +  0.5  *  actRed):  0.5;	      double    tmp    =(actRed    ==    0)?    0.5    *    dirDer    /(previousCost    +    0.5    *    actRed):    0.5;    	non-compiled	[CE]  variable  tmp  is  already  defined  in  method  doOptimize()	12	None	replace
86	[BUG]  [BUGGY]  tmp  =  0.5;  double  tmp  =  0.5;  [CE]  variable  tmp  is  already  defined  in  method  doOptimize()  [FE]    AssertionFailedError    [CONTEXT]    double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {    [BUGGY]  tmp  =  0.5;  double  tmp  =  0.5;  [BUGGY]    }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	replace	tmp    =    0.5;    double  tmp  =  0.5;	  	non-compiled	[CE]  variable  tmp  is  already  defined  in  method  doOptimize()	2	None	add
87	[BUG]  [BUGGY]  tmp  =  0.5;  int  tmp  =  0.5;  [CE]  variable  tmp  is  already  defined  in  method  doOptimize()  [FE]      AssertionFailedError    [CONTEXT]    double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {    [BUGGY]  tmp  =  0.5;  int  tmp  =  0.5;  [BUGGY]    }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	replace	tmp    =    0.5;    int  tmp  =  0.5;	  	non-compiled	[CE]  variable  tmp  is  already  defined  in  method  doOptimize()	2	None	add
88	[BUG]  [BUGGY]  tmp  =  0.5;  (tmp  =  0.5;  [CE]  ')'  expected  [FE]        AssertionFailedError    [CONTEXT]    double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {    [BUGGY]  tmp  =  0.5;  (tmp  =  0.5;  [BUGGY]    }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	replace	tmp    =    0.5;    (tmp  =  0.5;	  	non-compiled	[CE]  ')'  expected	2	None	add
89	[BUG]  [BUGGY]  tmp  =  1.0;  double  tmp  =  1.0;  [CE]  variable  tmp  is  already  defined  in  method  doOptimize()  [FE]          AssertionFailedError    [CONTEXT]    double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {    [BUGGY]  tmp  =  1.0;  double  tmp  =  1.0;  [BUGGY]    }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	replace	tmp    =    1.0;    double  tmp  =  1.0;	  timeout    	non-compiled	[CE]  variable  tmp  is  already  defined  in  method  doOptimize()	4	None	add
90	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]    double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {    [BUGGY]  tmp  =  1.0;  tmp  =  0.0;  [BUGGY]    }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	add	tmp    =    1.0;    tmp  =  0.0;	  timeout    	compilable	  [FE]  AssertionFailedError  	4	2	add
91	[BUG]  [BUGGY]  tmp  =  1.0;  tmp  =  0.0;  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]    double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {    [BUGGY]  tmp  =  1.0;  tmp  =  0.0;  [BUGGY]    }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	replace	tmp    =    1.0;    tmp  =  0.0;	  timeout    	compilable	  [FE]  AssertionFailedError  	4	2	add
92	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]              AssertionFailedError    [CONTEXT]    double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {    [BUGGY]  tmp  =  1.0;  tmp  =  1.1;  [BUGGY]    }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	add	tmp    =    1.0;    tmp  =  1.1;	  timeout    	compilable	  [FE]  AssertionFailedError  	4	2	add
93	[BUG]  [BUGGY]  tmp  =  1.0;  tmp  =  1.1;  [FE]  AssertionFailedError  [FE]              AssertionFailedError    [CONTEXT]    double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {    [BUGGY]  tmp  =  1.0;  tmp  =  1.1;  [BUGGY]    }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	replace	tmp    =    1.0;    tmp  =  1.1;	  timeout    	compilable	  [FE]  AssertionFailedError  	4	2	add
94	[BUG]  [BUGGY]  double  tmp  =(actRed  <  0)?  (0.5  *  dirDer  /(dirDer  +  0.5  *  preRed))  :  0.5;  [CE]  variable  tmp  is  already  defined  in  method  doOptimize()  [FE]        AssertionFailedError    [CONTEXT]    double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {    [BUGGY]  double  tmp  =(actRed  <  0)?  (0.5  *  dirDer  /(dirDer  +  0.5  *  preRed))  :  0.5;  [BUGGY]    tmp  =  0.1;  }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	replace	double  tmp  =(actRed  <  0)?  (0.5  *  dirDer  /(dirDer  +  0.5  *  preRed))  :  0.5;	      double    tmp    =(actRed    <    0)?    (0.5    *    dirDer    /(dirDer    +    0.5    *    actRed)):    0.5;    	non-compiled	[CE]  variable  tmp  is  already  defined  in  method  doOptimize()	1	None	replace
95	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {    [BUGGY]  tmp  =  0.0;  tmp  =  0.00;  [BUGGY]    }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	add	tmp    =    0.0;    tmp  =  0.00;	  	compilable	  [FE]  AssertionFailedError  	6	2	add
96	[BUG]  [BUGGY]  tmp  =  0.0;  tmp  =  0.00;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {    [BUGGY]  tmp  =  0.0;  tmp  =  0.00;  [BUGGY]    }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	replace	tmp    =    0.0;    tmp  =  0.00;	  	compilable	  [FE]  AssertionFailedError  	6	2	add
97	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {    [BUGGY]  tmp  =  0.0;  tmp  =  1.0;  [BUGGY]    }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	add	tmp    =    0.0;    tmp  =  1.0;	  	compilable	  [FE]  AssertionFailedError  	6	2	add
98	[BUG]  [BUGGY]  tmp  =  0.0;  tmp  =  1.0;  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {    [BUGGY]  tmp  =  0.0;  tmp  =  1.0;  [BUGGY]    }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	replace	tmp    =    0.0;    tmp  =  1.0;	  	compilable	  [FE]  AssertionFailedError  	6	2	add
99	[BUG]  [BUGGY]  tmp  =  1;  tmp  =  1);  [CE]  ';'  expected  [FE]              AssertionFailedError    [CONTEXT]    double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {    [BUGGY]  tmp  =  1;  tmp  =  1);  [BUGGY]    }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	replace	tmp    =    1;    tmp  =  1);	  timeout    	non-compiled	[CE]  ';'  expected	8	None	add
100	[BUG]  [BUGGY]  tmp  =  1;  double  tmp  =  1;  [CE]  variable  tmp  is  already  defined  in  method  doOptimize()  [FE]                AssertionFailedError    [CONTEXT]    double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {    [BUGGY]  tmp  =  1;  double  tmp  =  1;  [BUGGY]    }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	replace	tmp    =    1;    double  tmp  =  1;	  timeout    	non-compiled	[CE]  variable  tmp  is  already  defined  in  method  doOptimize()	8	None	add
101	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                  AssertionFailedError    [CONTEXT]    double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {    [BUGGY]  tmp  =  1;  tmp  =  2;  [BUGGY]    }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	add	tmp    =    1;    tmp  =  2;	  timeout    	compilable	  [FE]  AssertionFailedError  	8	2	add
102	[BUG]  [BUGGY]  tmp  =  1;  tmp  =  2;  [FE]  AssertionFailedError  [FE]                  AssertionFailedError    [CONTEXT]    double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {    [BUGGY]  tmp  =  1;  tmp  =  2;  [BUGGY]    }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	replace	tmp    =    1;    tmp  =  2;	  timeout    	compilable	  [FE]  AssertionFailedError  	8	2	add
103	[BUG]  [BUGGY]  tmp  =  1;  tmp  =  1;  }  [CE]  'else'  without  'if'  [FE]                    AssertionFailedError    [CONTEXT]    double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {    [BUGGY]  tmp  =  1;  tmp  =  1;  }  [BUGGY]    }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	replace	tmp    =    1;    tmp  =  1;  }	  timeout    	non-compiled	[CE]  'else'  without  'if'	8	None	add
104	[BUG]  [BUGGY]  tmp  =  0.5;  (tmp  =  0.5);  [CE]  not  a  statement  [FE]    AssertionFailedError    [CONTEXT]    double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {    [BUGGY]  tmp  =  0.5;  (tmp  =  0.5);  [BUGGY]    }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	replace	tmp    =    0.5;    (tmp  =  0.5);	  	non-compiled	[CE]  not  a  statement	2	None	add
105	[BUG]  [BUGGY]  double  tmp  =(actRed  ==  0)?  0.5  *  dirDer  /(previousCost  +  0.5  *  actRed))  :  0.5;  [CE]  :  expected  [FE]        AssertionFailedError    [CONTEXT]    double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {    [BUGGY]  double  tmp  =(actRed  ==  0)?  0.5  *  dirDer  /(previousCost  +  0.5  *  actRed))  :  0.5;  [BUGGY]    tmp  =  0.1;  }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	replace	double  tmp  =(actRed  ==  0)?  0.5  *  dirDer  /(previousCost  +  0.5  *  actRed))  :  0.5;	      double    tmp    =(actRed    ==    0)?    0.5    *    dirDer    /(dirDer    +    0.5    *    actRed)):    0.5;    	non-compiled	[CE]  :  expected	10	None	replace
106	[BUG]  [BUGGY]  double  tmp  =(previousCost  ==  0)?  0.5  *  dirDer  /(dirDer  +  0.5  *  actRed))  :  0.5;  [CE]  :  expected  [FE]          AssertionFailedError    [CONTEXT]    double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {    [BUGGY]  double  tmp  =(previousCost  ==  0)?  0.5  *  dirDer  /(dirDer  +  0.5  *  actRed))  :  0.5;  [BUGGY]    tmp  =  0.1;  }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	replace	double  tmp  =(previousCost  ==  0)?  0.5  *  dirDer  /(dirDer  +  0.5  *  actRed))  :  0.5;	      double    tmp    =(actRed    ==    0)?    0.5    *    dirDer    /(dirDer    +    0.5    *    actRed)):    0.5;    	non-compiled	[CE]  :  expected	10	None	replace
107	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]    double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {    [BUGGY]  tmp  =  0.5  *  lmPar;  [BUGGY]    }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	add	tmp  =  0.5  *  lmPar;	  tmp    =    0.5    *    previousCost;    timeout    	compilable	  [FE]  AssertionFailedError  	14	11	replace
108	[BUG]  [BUGGY]  tmp  =  0.5  *  lmPar;  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]    double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {    [BUGGY]  tmp  =  0.5  *  lmPar;  [BUGGY]    }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	replace	tmp  =  0.5  *  lmPar;	  tmp    =    0.5    *    previousCost;    timeout    	compilable	  [FE]  AssertionFailedError  	14	11	replace
109	[BUG]  [BUGGY]  double  tmp  =(actRed  <  0)?  (0.5  *  dirDer  /(previousCost  +  0.5  *  actRed))  :  0.5;  [CE]  variable  tmp  is  already  defined  in  method  doOptimize()  [FE]        AssertionFailedError    [CONTEXT]    double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {    [BUGGY]  double  tmp  =(actRed  <  0)?  (0.5  *  dirDer  /(previousCost  +  0.5  *  actRed))  :  0.5;  [BUGGY]    tmp  =  0.1;  }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	replace	double  tmp  =(actRed  <  0)?  (0.5  *  dirDer  /(previousCost  +  0.5  *  actRed))  :  0.5;	      double    tmp    =(actRed    <    0)?    (0.5    *    dirDer    /(dirDer    +    0.5    *    actRed)):    0.5;    	non-compiled	[CE]  variable  tmp  is  already  defined  in  method  doOptimize()	1	None	replace
110	[BUG]  [BUGGY]  double  tmp  =(previousCost  <  0)?  (0.5  *  dirDer  /(dirDer  +  0.5  *  actRed))  :  0.5;  [CE]  variable  tmp  is  already  defined  in  method  doOptimize()  [FE]          AssertionFailedError    [CONTEXT]    double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {    [BUGGY]  double  tmp  =(previousCost  <  0)?  (0.5  *  dirDer  /(dirDer  +  0.5  *  actRed))  :  0.5;  [BUGGY]    tmp  =  0.1;  }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	replace	double  tmp  =(previousCost  <  0)?  (0.5  *  dirDer  /(dirDer  +  0.5  *  actRed))  :  0.5;	      double    tmp    =(actRed    <    0)?    (0.5    *    dirDer    /(dirDer    +    0.5    *    actRed)):    0.5;    	non-compiled	[CE]  variable  tmp  is  already  defined  in  method  doOptimize()	1	None	replace
111	[BUG]  [BUGGY]  double  tmp  =(actRed  <  0)?  0.5  *  dirDer  /(previousCost  +  0.5  *  actRed))  :  0.5;  [CE]  :  expected  [FE]        AssertionFailedError    [CONTEXT]    double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {    [BUGGY]  double  tmp  =(actRed  <  0)?  0.5  *  dirDer  /(previousCost  +  0.5  *  actRed))  :  0.5;  [BUGGY]    tmp  =  0.1;  }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	replace	double  tmp  =(actRed  <  0)?  0.5  *  dirDer  /(previousCost  +  0.5  *  actRed))  :  0.5;	      double    tmp    =(actRed    <    0)?    0.5    *    dirDer    /(dirDer    +    0.5    *    actRed)):    0.5;    	non-compiled	[CE]  :  expected	15	None	replace
112	[BUG]  [BUGGY]  double  tmp  =(previousCost  <  0)?  0.5  *  dirDer  /(dirDer  +  0.5  *  actRed))  :  0.5;  [CE]  :  expected  [FE]          AssertionFailedError    [CONTEXT]    double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {    [BUGGY]  double  tmp  =(previousCost  <  0)?  0.5  *  dirDer  /(dirDer  +  0.5  *  actRed))  :  0.5;  [BUGGY]    tmp  =  0.1;  }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	replace	double  tmp  =(previousCost  <  0)?  0.5  *  dirDer  /(dirDer  +  0.5  *  actRed))  :  0.5;	      double    tmp    =(actRed    <    0)?    0.5    *    dirDer    /(dirDer    +    0.5    *    actRed)):    0.5;    	non-compiled	[CE]  :  expected	15	None	replace
